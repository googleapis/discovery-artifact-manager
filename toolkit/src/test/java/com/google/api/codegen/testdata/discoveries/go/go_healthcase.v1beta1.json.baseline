
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the project in which the dataset should be created (e.g.,
  // `projects/{project_id}/locations/{location_id}`).
  parent := "projects/my-project/locations/my-location"  // TODO: Update placeholder value.

  rb := &healthcare.Dataset{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Create(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Source dataset resource name. (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
  sourceDataset := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  rb := &healthcare.DeidentifyDatasetRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Deidentify(sourceDataset, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the dataset to delete (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
  name := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the dataset this DICOM store belongs to.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  rb := &healthcare.DicomStore{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Create(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the DICOM store to delete.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DICOM store resource name from which the data should be exported (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  name := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  rb := &healthcare.ExportDicomDataRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Export(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the DICOM store to get.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store resource into which the data is imported (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  name := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  rb := &healthcare.ImportDicomDataRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Import(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the dataset.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  req := healthcareService.Projects.Locations.Datasets.DicomStores.List(parent)
  if err := req.Pages(ctx, func(page *healthcare.ListDicomStoresResponse) error {
    for _, dicomStore := range page.DicomStores {
      // TODO: Change code below to process each `dicomStore` resource:
      fmt.Printf("%#v\n", dicomStore)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Output only. Resource name of the DICOM store, of the form
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  rb := &healthcare.DicomStore{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Patch(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `instances`).
  dicomWebPath := "instances"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.SearchForInstances(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `series`).
  dicomWebPath := "series"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.SearchForSeries(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `studies`).
  dicomWebPath := "studies"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.SearchForStudies(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  rb := &healthcare.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}`).
  dicomWebPath := "studies"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.StoreInstances(parent, dicomWebPath, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}`).
  dicomWebPath := "studies/my-study"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Delete(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}/metadata`.
  dicomWebPath := "studies/my-study/metadata"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.RetrieveMetadata(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}`).
  dicomWebPath := "studies/my-study"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.RetrieveStudy(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `instances`).
  dicomWebPath := "studies/my-study/instances"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.SearchForInstances(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `series`).
  dicomWebPath := "studies/my-study/series"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.SearchForSeries(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
  dicomWebPath := "studies/my-study/series/my-sery"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Delete(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `studies/{study_id}/series/{series_id}/instances/{instance_id}`).
  dicomWebPath := "studies/my-study/series/my-sery/instances/my-instance"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Delete(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).
  dicomWebPath := "studies/my-study/series/my-sery/instances/my-instance/frames/my-frame"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Frames.RetrieveFrames(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).
  dicomWebPath := "studies/my-study/series/my-sery/instances/my-instance/frames/my-frame/rendered"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Frames.RetrieveRendered(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `studies/{study_id}/series/{series_id}/instance/{instance_id}`).
  dicomWebPath := "studies/my-study/series/my-sery/instances/my-instance"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveInstance(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).
  dicomWebPath := "studies/my-study/series/my-sery/instances/my-instance/metadata"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveMetadata(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).
  dicomWebPath := "studies/my-study/series/my-sery/instances/my-instance/rendered"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveRendered(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.
  dicomWebPath := "studies/my-study/series/my-sery/metadata"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.RetrieveMetadata(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
  dicomWebPath := "studies/my-study/series/my-sery"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.RetrieveSeries(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g.,
  // `instances`).
  dicomWebPath := "studies/my-study/series/my-sery/instances"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.SearchForInstances(parent, dicomWebPath).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the DICOM store that is being accessed (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
  // QIDO-RS standard (e.g., `studies/{study_id}`).
  dicomWebPath := "studies/my-study"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.Studies.StoreInstances(parent, dicomWebPath, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store"  // TODO: Update placeholder value.

  rb := &healthcare.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.DicomStores.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the dataset this FHIR store belongs to.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  rb := &healthcare.FhirStore{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Create(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the FHIR store to delete.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the FHIR store to export resource from. The name should be in
  // the format of
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  rb := &healthcare.ExportResourcesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Export(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the FHIR store to retrieve resources from.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ObservationLastn(parent).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the `Patient` resource for which the information is required.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.PatientEverything(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the resource to purge.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ResourcePurge(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the FHIR store to retrieve the capabilities for.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Capabilities(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the FHIR store this resource belongs to.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  // The type of the resource to delete.
  type2 := "my-type"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalDelete(parent, type2).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the FHIR store this resource belongs to.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  // The type of the resource to update.
  type2 := "my-type"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalPatch(parent, type2, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the FHIR store this resource belongs to.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  // The type of the resource to update.
  type2 := "my-type"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalUpdate(parent, type2, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the FHIR store this resource belongs to.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  // The type of the resource to create.
  type2 := "my-type"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Create(parent, type2, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the resource to delete.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the FHIR store in which this bundle will be executed.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ExecuteBundle(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the resource to retrieve.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.History(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the resource to update.
  name := "my-name"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Patch(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the resource to retrieve.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Read(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the FHIR store to retrieve resources from.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  rb := &healthcare.SearchResourcesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Search(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the resource to update.
  name := "my-name"  // TODO: Update placeholder value.

  rb := &healthcare.HttpBody{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Update(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the resource version to retrieve.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Vread(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the FHIR store to get.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the FHIR store to import FHIR resources to. The name should be
  // in the format of
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  rb := &healthcare.ImportResourcesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Import(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the dataset.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  req := healthcareService.Projects.Locations.Datasets.FhirStores.List(parent)
  if err := req.Pages(ctx, func(page *healthcare.ListFhirStoresResponse) error {
    for _, fhirStore := range page.FhirStores {
      // TODO: Change code below to process each `fhirStore` resource:
      fmt.Printf("%#v\n", fhirStore)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Output only. Resource name of the FHIR store, of the form
  // `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  rb := &healthcare.FhirStore{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.Patch(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  rb := &healthcare.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store"  // TODO: Update placeholder value.

  rb := &healthcare.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.FhirStores.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the dataset to read (e.g.,
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
  name := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the dataset this HL7v2 store belongs to.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  rb := &healthcare.Hl7V2Store{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Create(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the HL7v2 store to delete.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the HL7v2 store to get.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "my-resource"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the dataset.
  parent := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  req := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.List(parent)
  if err := req.Pages(ctx, func(page *healthcare.ListHl7V2StoresResponse) error {
    for _, hl7V2Store := range page.Hl7V2Stores {
      // TODO: Change code below to process each `hl7V2Store` resource:
      fmt.Printf("%#v\n", hl7V2Store)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the dataset this message belongs to.
  parent := "my-parent"  // TODO: Update placeholder value.

  rb := &healthcare.CreateMessageRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Create(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the HL7v2 message to delete.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the HL7v2 message to retrieve.
  name := "my-name"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the HL7v2 store this message belongs to.
  parent := "my-parent"  // TODO: Update placeholder value.

  rb := &healthcare.IngestMessageRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Ingest(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the HL7v2 store to retrieve messages from.
  parent := "my-parent"  // TODO: Update placeholder value.

  req := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.List(parent)
  if err := req.Pages(ctx, func(page *healthcare.ListMessagesResponse) error {
    for _, item := range page.Messages {
      // TODO: Change code below to process each `item` resource:
      fmt.Printf("%#v\n", item)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Resource name of the Message, of the form
  // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
  // Assigned by the server.
  name := "my-name"  // TODO: Update placeholder value.

  rb := &healthcare.Message{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Patch(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Output only. Resource name of the HL7v2 store, of the form
  // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
  name := "my-name"  // TODO: Update placeholder value.

  rb := &healthcare.Hl7V2Store{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.Patch(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // See the operation documentation for the appropriate value for this field.
  resource := "my-resource"  // TODO: Update placeholder value.

  rb := &healthcare.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "my-resource"  // TODO: Update placeholder value.

  rb := &healthcare.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Hl7V2Stores.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the project whose datasets should be listed (e.g.,
  // `projects/{project_id}/locations/{location_id}`).
  parent := "projects/my-project/locations/my-location"  // TODO: Update placeholder value.

  req := healthcareService.Projects.Locations.Datasets.List(parent)
  if err := req.Pages(ctx, func(page *healthcare.ListDatasetsResponse) error {
    for _, dataset := range page.Datasets {
      // TODO: Change code below to process each `dataset` resource:
      fmt.Printf("%#v\n", dataset)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource.
  name := "projects/my-project/locations/my-location/datasets/my-dataset/operations/my-operation"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Datasets.Operations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation's parent resource.
  name := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  req := healthcareService.Projects.Locations.Datasets.Operations.List(name)
  if err := req.Pages(ctx, func(page *healthcare.ListOperationsResponse) error {
    for _, operation := range page.Operations {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Output only. Resource name of the dataset, of the form
  // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
  name := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  rb := &healthcare.Dataset{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.Patch(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  rb := &healthcare.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // See the operation documentation for the appropriate value for this field.
  resource := "projects/my-project/locations/my-location/datasets/my-dataset"  // TODO: Update placeholder value.

  rb := &healthcare.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := healthcareService.Projects.Locations.Datasets.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Resource name for the location.
  name := "projects/my-project/locations/my-location"  // TODO: Update placeholder value.

  resp, err := healthcareService.Projects.Locations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/healthcare/v1beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, healthcare.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  healthcareService, err := healthcare.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource that owns the locations collection, if applicable.
  name := "projects/my-project"  // TODO: Update placeholder value.

  req := healthcareService.Projects.Locations.List(name)
  if err := req.Pages(ctx, func(page *healthcare.ListLocationsResponse) error {
    for _, location := range page.Locations {
      // TODO: Change code below to process each `location` resource:
      fmt.Printf("%#v\n", location)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

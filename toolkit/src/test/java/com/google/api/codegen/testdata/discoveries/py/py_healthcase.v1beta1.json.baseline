
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the project in which the dataset should be created (e.g.,
# `projects/{project_id}/locations/{location_id}`).
parent = 'projects/my-project/locations/my-location'  # TODO: Update placeholder value.

dataset_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().create(parent=parent, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Source dataset resource name. (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
source_dataset = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

deidentify_dataset_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().deidentify(sourceDataset=source_dataset, body=deidentify_dataset_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the dataset to delete (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
name = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().delete(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the dataset this DICOM store belongs to.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

dicom_store_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().dicomStores().create(parent=parent, body=dicom_store_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the DICOM store to delete.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().delete(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The DICOM store resource name from which the data should be exported (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
name = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

export_dicom_data_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().dicomStores().export(name=name, body=export_dicom_data_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the DICOM store to get.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().getIamPolicy(resource=resource)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store resource into which the data is imported (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
name = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

import_dicom_data_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().dicomStores().import(name=name, body=import_dicom_data_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the dataset.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().list(parent=parent)
while True:
    response = request.execute()

    for dicom_store in response.get('dicomStores', []):
        # TODO: Change code below to process each `dicom_store` resource:
        pprint(dicom_store)

    request = service.projects().locations().datasets().dicomStores().list_next(previous_request=request, previous_response=response)
    if request is None:
        break
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Output only. Resource name of the DICOM store, of the form
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

dicom_store_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.projects().locations().datasets().dicomStores().patch(name=name, body=dicom_store_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `instances`).
dicom_web_path = 'instances'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().searchForInstances(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `series`).
dicom_web_path = 'series'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().searchForSeries(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `studies`).
dicom_web_path = 'studies'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().searchForStudies(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being specified.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

set_iam_policy_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().dicomStores().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}`).
dicom_web_path = 'studies'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().dicomStores().storeInstances(parent=parent, dicomWebPath=dicom_web_path, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}`).
dicom_web_path = 'studies/my-study'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().delete(parent=parent, dicomWebPath=dicom_web_path)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}/metadata`.
dicom_web_path = 'studies/my-study/metadata'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().retrieveMetadata(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}`).
dicom_web_path = 'studies/my-study'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().retrieveStudy(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `instances`).
dicom_web_path = 'studies/my-study/instances'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().searchForInstances(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `series`).
dicom_web_path = 'studies/my-study/series'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().searchForSeries(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
dicom_web_path = 'studies/my-study/series/my-sery'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().delete(parent=parent, dicomWebPath=dicom_web_path)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `studies/{study_id}/series/{series_id}/instances/{instance_id}`).
dicom_web_path = 'studies/my-study/series/my-sery/instances/my-instance'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().instances().delete(parent=parent, dicomWebPath=dicom_web_path)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).
dicom_web_path = 'studies/my-study/series/my-sery/instances/my-instance/frames/my-frame'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().instances().frames().retrieveFrames(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).
dicom_web_path = 'studies/my-study/series/my-sery/instances/my-instance/frames/my-frame/rendered'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().instances().frames().retrieveRendered(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `studies/{study_id}/series/{series_id}/instance/{instance_id}`).
dicom_web_path = 'studies/my-study/series/my-sery/instances/my-instance'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().instances().retrieveInstance(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).
dicom_web_path = 'studies/my-study/series/my-sery/instances/my-instance/metadata'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().instances().retrieveMetadata(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).
dicom_web_path = 'studies/my-study/series/my-sery/instances/my-instance/rendered'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().instances().retrieveRendered(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.
dicom_web_path = 'studies/my-study/series/my-sery/metadata'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().retrieveMetadata(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
dicom_web_path = 'studies/my-study/series/my-sery'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().retrieveSeries(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g.,
# `instances`).
dicom_web_path = 'studies/my-study/series/my-sery/instances'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().dicomStores().studies().series().searchForInstances(parent=parent, dicomWebPath=dicom_web_path)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the DICOM store that is being accessed (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

# The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
# QIDO-RS standard (e.g., `studies/{study_id}`).
dicom_web_path = 'studies/my-study'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().dicomStores().studies().storeInstances(parent=parent, dicomWebPath=dicom_web_path, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy detail is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store'  # TODO: Update placeholder value.

test_iam_permissions_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().dicomStores().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the dataset this FHIR store belongs to.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

fhir_store_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().create(parent=parent, body=fhir_store_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the FHIR store to delete.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().delete(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the FHIR store to export resource from. The name should be in
# the format of
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

export_resources_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().export(name=name, body=export_resources_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the FHIR store to retrieve resources from.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().observationLastn(parent=parent)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the `Patient` resource for which the information is required.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().patientEverything(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the resource to purge.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().resourcePurge(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the FHIR store to retrieve the capabilities for.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().capabilities(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the FHIR store this resource belongs to.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

# The type of the resource to delete.
type_ = 'my-type'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().conditionalDelete(parent=parent, type=type_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the FHIR store this resource belongs to.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

# The type of the resource to update.
type_ = 'my-type'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.projects().locations().datasets().fhirStores().fhir().conditionalPatch(parent=parent, type=type_, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the FHIR store this resource belongs to.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

# The type of the resource to update.
type_ = 'my-type'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.projects().locations().datasets().fhirStores().fhir().conditionalUpdate(parent=parent, type=type_, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the FHIR store this resource belongs to.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

# The type of the resource to create.
type_ = 'my-type'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().fhir().create(parent=parent, type=type_, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the resource to delete.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().delete(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the FHIR store in which this bundle will be executed.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().fhir().executeBundle(parent=parent, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the resource to retrieve.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().history(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the resource to update.
name = 'my-name'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.projects().locations().datasets().fhirStores().fhir().patch(name=name, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the resource to retrieve.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().read(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the FHIR store to retrieve resources from.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

search_resources_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().fhir().search(parent=parent, body=search_resources_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the resource to update.
name = 'my-name'  # TODO: Update placeholder value.

http_body_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.projects().locations().datasets().fhirStores().fhir().update(name=name, body=http_body_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the resource version to retrieve.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().fhir().vread(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the FHIR store to get.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().getIamPolicy(resource=resource)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the FHIR store to import FHIR resources to. The name should be
# in the format of
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

import_resources_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().import(name=name, body=import_resources_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the dataset.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().fhirStores().list(parent=parent)
while True:
    response = request.execute()

    for fhir_store in response.get('fhirStores', []):
        # TODO: Change code below to process each `fhir_store` resource:
        pprint(fhir_store)

    request = service.projects().locations().datasets().fhirStores().list_next(previous_request=request, previous_response=response)
    if request is None:
        break
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Output only. Resource name of the FHIR store, of the form
# `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

fhir_store_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.projects().locations().datasets().fhirStores().patch(name=name, body=fhir_store_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being specified.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

set_iam_policy_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy detail is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store'  # TODO: Update placeholder value.

test_iam_permissions_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().fhirStores().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the dataset to read (e.g.,
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
name = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().getIamPolicy(resource=resource)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the dataset this HL7v2 store belongs to.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

hl7_v2_store_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().hl7V2Stores().create(parent=parent, body=hl7_v2_store_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the HL7v2 store to delete.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().hl7V2Stores().delete(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the HL7v2 store to get.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().hl7V2Stores().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'my-resource'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().hl7V2Stores().getIamPolicy(resource=resource)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the dataset.
parent = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().hl7V2Stores().list(parent=parent)
while True:
    response = request.execute()

    for hl7_v2_store in response.get('hl7V2Stores', []):
        # TODO: Change code below to process each `hl7_v2_store` resource:
        pprint(hl7_v2_store)

    request = service.projects().locations().datasets().hl7V2Stores().list_next(previous_request=request, previous_response=response)
    if request is None:
        break
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the dataset this message belongs to.
parent = 'my-parent'  # TODO: Update placeholder value.

create_message_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().hl7V2Stores().messages().create(parent=parent, body=create_message_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the HL7v2 message to delete.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().hl7V2Stores().messages().delete(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource name of the HL7v2 message to retrieve.
name = 'my-name'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().hl7V2Stores().messages().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the HL7v2 store this message belongs to.
parent = 'my-parent'  # TODO: Update placeholder value.

ingest_message_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().hl7V2Stores().messages().ingest(parent=parent, body=ingest_message_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Name of the HL7v2 store to retrieve messages from.
parent = 'my-parent'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().hl7V2Stores().messages().list(parent=parent)
while True:
    response = request.execute()

    for item in response.get('messages', []):
        # TODO: Change code below to process each `item` resource:
        pprint(item)

    request = service.projects().locations().datasets().hl7V2Stores().messages().list_next(previous_request=request, previous_response=response)
    if request is None:
        break
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Resource name of the Message, of the form
# `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
# Assigned by the server.
name = 'my-name'  # TODO: Update placeholder value.

message_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.projects().locations().datasets().hl7V2Stores().messages().patch(name=name, body=message_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Output only. Resource name of the HL7v2 store, of the form
# `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
name = 'my-name'  # TODO: Update placeholder value.

hl7_v2_store_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.projects().locations().datasets().hl7V2Stores().patch(name=name, body=hl7_v2_store_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being specified.
# See the operation documentation for the appropriate value for this field.
resource = 'my-resource'  # TODO: Update placeholder value.

set_iam_policy_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().hl7V2Stores().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy detail is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'my-resource'  # TODO: Update placeholder value.

test_iam_permissions_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().hl7V2Stores().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the project whose datasets should be listed (e.g.,
# `projects/{project_id}/locations/{location_id}`).
parent = 'projects/my-project/locations/my-location'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().list(parent=parent)
while True:
    response = request.execute()

    for dataset in response.get('datasets', []):
        # TODO: Change code below to process each `dataset` resource:
        pprint(dataset)

    request = service.projects().locations().datasets().list_next(previous_request=request, previous_response=response)
    if request is None:
        break
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the operation resource.
name = 'projects/my-project/locations/my-location/datasets/my-dataset/operations/my-operation'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().operations().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The name of the operation's parent resource.
name = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

request = service.projects().locations().datasets().operations().list(name=name)
while True:
    response = request.execute()

    for operation in response.get('operations', []):
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = service.projects().locations().datasets().operations().list_next(previous_request=request, previous_response=response)
    if request is None:
        break
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Output only. Resource name of the dataset, of the form
# `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
name = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

dataset_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.projects().locations().datasets().patch(name=name, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy is being specified.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

set_iam_policy_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# REQUIRED: The resource for which the policy detail is being requested.
# See the operation documentation for the appropriate value for this field.
resource = 'projects/my-project/locations/my-location/datasets/my-dataset'  # TODO: Update placeholder value.

test_iam_permissions_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().locations().datasets().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# Resource name for the location.
name = 'projects/my-project/locations/my-location'  # TODO: Update placeholder value.

request = service.projects().locations().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Healthcare API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/healthcare
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud auth application-default login`.
   Google API Client will automatically use them as long as googl-auth is installed.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs and Google Auth Python Library by running
   `pip install --upgrade google-api-python-client google-auth`
"""
from pprint import pprint

from googleapiclient import discovery

service = discovery.build('healthcare', 'v1beta1')

# The resource that owns the locations collection, if applicable.
name = 'projects/my-project'  # TODO: Update placeholder value.

request = service.projects().locations().list(name=name)
while True:
    response = request.execute()

    for location in response.get('locations', []):
        # TODO: Change code below to process each `location` resource:
        pprint(location)

    request = service.projects().locations().list_next(previous_request=request, previous_response=response)
    if request is None:
        break

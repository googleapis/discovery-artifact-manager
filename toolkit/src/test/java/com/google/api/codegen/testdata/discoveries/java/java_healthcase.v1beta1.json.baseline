
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Dataset;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the project in which the dataset should be created (e.g.,
    // `projects/{project_id}/locations/{location_id}`).
    String parent = "projects/my-project/locations/my-location";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Dataset requestBody = new Dataset();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Create request = cloudHealthcareService.projects().locations().datasets().create(parent, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.DeidentifyDatasetRequest;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Source dataset resource name. (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
    String sourceDataset = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DeidentifyDatasetRequest requestBody = new DeidentifyDatasetRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Deidentify request = cloudHealthcareService.projects().locations().datasets().deidentify(sourceDataset, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the dataset to delete (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
    String name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Delete request = cloudHealthcareService.projects().locations().datasets().delete(name);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.DicomStore;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the dataset this DICOM store belongs to.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DicomStore requestBody = new DicomStore();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Create request = cloudHealthcareService.projects().locations().datasets().dicomStores().create(parent, requestBody);

    DicomStore response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the DICOM store to delete.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Delete request = cloudHealthcareService.projects().locations().datasets().dicomStores().delete(name);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.ExportDicomDataRequest;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DICOM store resource name from which the data should be exported (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ExportDicomDataRequest requestBody = new ExportDicomDataRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Export request = cloudHealthcareService.projects().locations().datasets().dicomStores().export(name, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.DicomStore;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the DICOM store to get.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Get request = cloudHealthcareService.projects().locations().datasets().dicomStores().get(name);

    DicomStore response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.GetIamPolicy request = cloudHealthcareService.projects().locations().datasets().dicomStores().getIamPolicy(resource);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.ImportDicomDataRequest;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store resource into which the data is imported (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ImportDicomDataRequest requestBody = new ImportDicomDataRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.CloudHealthcareImport request = cloudHealthcareService.projects().locations().datasets().dicomStores().cloudHealthcareImport(name, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.DicomStore;
import com.google.api.services.healthcare.v1beta1.model.ListDicomStoresResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the dataset.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.List request = cloudHealthcareService.projects().locations().datasets().dicomStores().list(parent);

    ListDicomStoresResponse response;
    do {
      response = request.execute();
      if (response.getDicomStores() == null) {
        continue;
      }
      for (DicomStore dicomStore : response.getDicomStores()) {
        // TODO: Change code below to process each `dicomStore` resource:
        System.out.println(dicomStore);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.DicomStore;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Output only. Resource name of the DICOM store, of the form
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    DicomStore requestBody = new DicomStore();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Patch request = cloudHealthcareService.projects().locations().datasets().dicomStores().patch(name, requestBody);

    DicomStore response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `instances`).
    String dicomWebPath = "instances";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.SearchForInstances request = cloudHealthcareService.projects().locations().datasets().dicomStores().searchForInstances(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `series`).
    String dicomWebPath = "series";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.SearchForSeries request = cloudHealthcareService.projects().locations().datasets().dicomStores().searchForSeries(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies`).
    String dicomWebPath = "studies";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.SearchForStudies request = cloudHealthcareService.projects().locations().datasets().dicomStores().searchForStudies(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import com.google.api.services.healthcare.v1beta1.model.SetIamPolicyRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    SetIamPolicyRequest requestBody = new SetIamPolicyRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.SetIamPolicy request = cloudHealthcareService.projects().locations().datasets().dicomStores().setIamPolicy(resource, requestBody);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    String dicomWebPath = "studies";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.StoreInstances request = cloudHealthcareService.projects().locations().datasets().dicomStores().storeInstances(parent, dicomWebPath, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    String dicomWebPath = "studies/my-study";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Delete request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().delete(parent, dicomWebPath);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/metadata`.
    String dicomWebPath = "studies/my-study/metadata";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.RetrieveMetadata request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().retrieveMetadata(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    String dicomWebPath = "studies/my-study";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.RetrieveStudy request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().retrieveStudy(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `instances`).
    String dicomWebPath = "studies/my-study/instances";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.SearchForInstances request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().searchForInstances(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `series`).
    String dicomWebPath = "studies/my-study/series";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.SearchForSeries request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().searchForSeries(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
    String dicomWebPath = "studies/my-study/series/my-sery";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.Delete request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().delete(parent, dicomWebPath);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instances/{instance_id}`).
    String dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Delete request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().instances().delete(parent, dicomWebPath);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).
    String dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/frames/my-frame";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Frames.RetrieveFrames request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().instances().frames().retrieveFrames(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).
    String dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/frames/my-frame/rendered";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Frames.RetrieveRendered request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().instances().frames().retrieveRendered(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}`).
    String dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveInstance request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().instances().retrieveInstance(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).
    String dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/metadata";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveMetadata request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().instances().retrieveMetadata(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).
    String dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/rendered";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveRendered request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().instances().retrieveRendered(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.
    String dicomWebPath = "studies/my-study/series/my-sery/metadata";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.RetrieveMetadata request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().retrieveMetadata(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
    String dicomWebPath = "studies/my-study/series/my-sery";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.RetrieveSeries request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().retrieveSeries(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `instances`).
    String dicomWebPath = "studies/my-study/series/my-sery/instances";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.Series.SearchForInstances request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().series().searchForInstances(parent, dicomWebPath);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    String dicomWebPath = "studies/my-study";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.StoreInstances request = cloudHealthcareService.projects().locations().datasets().dicomStores().studies().storeInstances(parent, dicomWebPath, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsRequest;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TestIamPermissionsRequest requestBody = new TestIamPermissionsRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.DicomStores.TestIamPermissions request = cloudHealthcareService.projects().locations().datasets().dicomStores().testIamPermissions(resource, requestBody);

    TestIamPermissionsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.FhirStore;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the dataset this FHIR store belongs to.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    FhirStore requestBody = new FhirStore();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Create request = cloudHealthcareService.projects().locations().datasets().fhirStores().create(parent, requestBody);

    FhirStore response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the FHIR store to delete.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Delete request = cloudHealthcareService.projects().locations().datasets().fhirStores().delete(name);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.ExportResourcesRequest;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the FHIR store to export resource from. The name should be in
    // the format of
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ExportResourcesRequest requestBody = new ExportResourcesRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Export request = cloudHealthcareService.projects().locations().datasets().fhirStores().export(name, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the FHIR store to retrieve resources from.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.ObservationLastn request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().observationLastn(parent);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the `Patient` resource for which the information is required.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.PatientEverything request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().patientEverything(name);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the resource to purge.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.ResourcePurge request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().resourcePurge(name);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the FHIR store to retrieve the capabilities for.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Capabilities request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().capabilities(name);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the FHIR store this resource belongs to.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // The type of the resource to delete.
    String type = "my-type";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalDelete request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().conditionalDelete(parent, type);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the FHIR store this resource belongs to.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // The type of the resource to update.
    String type = "my-type";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalPatch request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().conditionalPatch(parent, type, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the FHIR store this resource belongs to.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // The type of the resource to update.
    String type = "my-type";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalUpdate request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().conditionalUpdate(parent, type, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the FHIR store this resource belongs to.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // The type of the resource to create.
    String type = "my-type";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Create request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().create(parent, type, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the resource to delete.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Delete request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().delete(name);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the FHIR store in which this bundle will be executed.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.ExecuteBundle request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().executeBundle(parent, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the resource to retrieve.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.History request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().history(name);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the resource to update.
    String name = "my-name";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Patch request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().patch(name, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the resource to retrieve.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Read request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().read(name);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import com.google.api.services.healthcare.v1beta1.model.SearchResourcesRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the FHIR store to retrieve resources from.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    SearchResourcesRequest requestBody = new SearchResourcesRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Search request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().search(parent, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the resource to update.
    String name = "my-name";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    HttpBody requestBody = new HttpBody();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Update request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().update(name, requestBody);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.HttpBody;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the resource version to retrieve.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Fhir.Vread request = cloudHealthcareService.projects().locations().datasets().fhirStores().fhir().vread(name);

    HttpBody response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.FhirStore;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the FHIR store to get.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Get request = cloudHealthcareService.projects().locations().datasets().fhirStores().get(name);

    FhirStore response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.GetIamPolicy request = cloudHealthcareService.projects().locations().datasets().fhirStores().getIamPolicy(resource);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.ImportResourcesRequest;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the FHIR store to import FHIR resources to. The name should be
    // in the format of
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ImportResourcesRequest requestBody = new ImportResourcesRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.CloudHealthcareImport request = cloudHealthcareService.projects().locations().datasets().fhirStores().cloudHealthcareImport(name, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.FhirStore;
import com.google.api.services.healthcare.v1beta1.model.ListFhirStoresResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the dataset.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.List request = cloudHealthcareService.projects().locations().datasets().fhirStores().list(parent);

    ListFhirStoresResponse response;
    do {
      response = request.execute();
      if (response.getFhirStores() == null) {
        continue;
      }
      for (FhirStore fhirStore : response.getFhirStores()) {
        // TODO: Change code below to process each `fhirStore` resource:
        System.out.println(fhirStore);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.FhirStore;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Output only. Resource name of the FHIR store, of the form
    // `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    FhirStore requestBody = new FhirStore();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.Patch request = cloudHealthcareService.projects().locations().datasets().fhirStores().patch(name, requestBody);

    FhirStore response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import com.google.api.services.healthcare.v1beta1.model.SetIamPolicyRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    SetIamPolicyRequest requestBody = new SetIamPolicyRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.SetIamPolicy request = cloudHealthcareService.projects().locations().datasets().fhirStores().setIamPolicy(resource, requestBody);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsRequest;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TestIamPermissionsRequest requestBody = new TestIamPermissionsRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.FhirStores.TestIamPermissions request = cloudHealthcareService.projects().locations().datasets().fhirStores().testIamPermissions(resource, requestBody);

    TestIamPermissionsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the dataset to read (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
    String name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Get request = cloudHealthcareService.projects().locations().datasets().get(name);

    Dataset response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.GetIamPolicy request = cloudHealthcareService.projects().locations().datasets().getIamPolicy(resource);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Hl7V2Store;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the dataset this HL7v2 store belongs to.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Hl7V2Store requestBody = new Hl7V2Store();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Create request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().create(parent, requestBody);

    Hl7V2Store response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the HL7v2 store to delete.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Delete request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().delete(name);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Hl7V2Store;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the HL7v2 store to get.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Get request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().get(name);

    Hl7V2Store response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "my-resource";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.GetIamPolicy request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().getIamPolicy(resource);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Hl7V2Store;
import com.google.api.services.healthcare.v1beta1.model.ListHl7V2StoresResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the dataset.
    String parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.List request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().list(parent);

    ListHl7V2StoresResponse response;
    do {
      response = request.execute();
      if (response.getHl7V2Stores() == null) {
        continue;
      }
      for (Hl7V2Store hl7V2Store : response.getHl7V2Stores()) {
        // TODO: Change code below to process each `hl7V2Store` resource:
        System.out.println(hl7V2Store);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.CreateMessageRequest;
import com.google.api.services.healthcare.v1beta1.model.Message;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the dataset this message belongs to.
    String parent = "my-parent";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreateMessageRequest requestBody = new CreateMessageRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Messages.Create request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().messages().create(parent, requestBody);

    Message response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the HL7v2 message to delete.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Messages.Delete request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().messages().delete(name);

    request.execute();
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Message;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource name of the HL7v2 message to retrieve.
    String name = "my-name";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Messages.Get request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().messages().get(name);

    Message response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.IngestMessageRequest;
import com.google.api.services.healthcare.v1beta1.model.IngestMessageResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the HL7v2 store this message belongs to.
    String parent = "my-parent";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    IngestMessageRequest requestBody = new IngestMessageRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Messages.Ingest request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().messages().ingest(parent, requestBody);

    IngestMessageResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.ListMessagesResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the HL7v2 store to retrieve messages from.
    String parent = "my-parent";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Messages.List request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().messages().list(parent);

    ListMessagesResponse response;
    do {
      response = request.execute();
      if (response.getMessages() == null) {
        continue;
      }
      for (String item : response.getMessages()) {
        // TODO: Change code below to process each `item` resource:
        System.out.println(item);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Message;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Resource name of the Message, of the form
    // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
    // Assigned by the server.
    String name = "my-name";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Message requestBody = new Message();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Messages.Patch request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().messages().patch(name, requestBody);

    Message response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Hl7V2Store;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Output only. Resource name of the HL7v2 store, of the form
    // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
    String name = "my-name";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Hl7V2Store requestBody = new Hl7V2Store();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.Patch request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().patch(name, requestBody);

    Hl7V2Store response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import com.google.api.services.healthcare.v1beta1.model.SetIamPolicyRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    String resource = "my-resource";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    SetIamPolicyRequest requestBody = new SetIamPolicyRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.SetIamPolicy request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().setIamPolicy(resource, requestBody);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsRequest;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "my-resource";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TestIamPermissionsRequest requestBody = new TestIamPermissionsRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Hl7V2Stores.TestIamPermissions request = cloudHealthcareService.projects().locations().datasets().hl7V2Stores().testIamPermissions(resource, requestBody);

    TestIamPermissionsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Dataset;
import com.google.api.services.healthcare.v1beta1.model.ListDatasetsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the project whose datasets should be listed (e.g.,
    // `projects/{project_id}/locations/{location_id}`).
    String parent = "projects/my-project/locations/my-location";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.List request = cloudHealthcareService.projects().locations().datasets().list(parent);

    ListDatasetsResponse response;
    do {
      response = request.execute();
      if (response.getDatasets() == null) {
        continue;
      }
      for (Dataset dataset : response.getDatasets()) {
        // TODO: Change code below to process each `dataset` resource:
        System.out.println(dataset);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the operation resource.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset/operations/my-operation";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Operations.Get request = cloudHealthcareService.projects().locations().datasets().operations().get(name);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.ListOperationsResponse;
import com.google.api.services.healthcare.v1beta1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the operation's parent resource.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Operations.List request = cloudHealthcareService.projects().locations().datasets().operations().list(name);

    ListOperationsResponse response;
    do {
      response = request.execute();
      if (response.getOperations() == null) {
        continue;
      }
      for (Operation operation : response.getOperations()) {
        // TODO: Change code below to process each `operation` resource:
        System.out.println(operation);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Output only. Resource name of the dataset, of the form
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
    String name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Dataset requestBody = new Dataset();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.Patch request = cloudHealthcareService.projects().locations().datasets().patch(name, requestBody);

    Dataset response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Policy;
import com.google.api.services.healthcare.v1beta1.model.SetIamPolicyRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    SetIamPolicyRequest requestBody = new SetIamPolicyRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.SetIamPolicy request = cloudHealthcareService.projects().locations().datasets().setIamPolicy(resource, requestBody);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsRequest;
import com.google.api.services.healthcare.v1beta1.model.TestIamPermissionsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    String resource = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TestIamPermissionsRequest requestBody = new TestIamPermissionsRequest();

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Datasets.TestIamPermissions request = cloudHealthcareService.projects().locations().datasets().testIamPermissions(resource, requestBody);

    TestIamPermissionsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.Location;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Resource name for the location.
    String name = "projects/my-project/locations/my-location";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.Get request = cloudHealthcareService.projects().locations().get(name);

    Location response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Healthcare API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/healthcare
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/healthcare/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.healthcare.v1beta1.CloudHealthcare;
import com.google.api.services.healthcare.v1beta1.model.ListLocationsResponse;
import com.google.api.services.healthcare.v1beta1.model.Location;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudHealthcareExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The resource that owns the locations collection, if applicable.
    String name = "projects/my-project";  // TODO: Update placeholder value.

    CloudHealthcare cloudHealthcareService = createCloudHealthcareService();
    CloudHealthcare.Projects.Locations.List request = cloudHealthcareService.projects().locations().list(name);

    ListLocationsResponse response;
    do {
      response = request.execute();
      if (response.getLocations() == null) {
        continue;
      }
      for (Location location : response.getLocations()) {
        // TODO: Change code below to process each `location` resource:
        System.out.println(location);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudHealthcare createCloudHealthcareService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudHealthcare.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudHealthcareSample/0.1")
        .build();
  }
}


// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the project in which the dataset should be created (e.g.,
            // `projects/{project_id}/locations/{location_id}`).
            string parent = "projects/my-project/locations/my-location";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.Dataset requestBody = new Data.Dataset();

            ProjectsResource.LocationsResource.DatasetsResource.CreateRequest request = cloudHealthcareService.Projects.Locations.Datasets.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Source dataset resource name. (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
            string sourceDataset = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.DeidentifyDatasetRequest requestBody = new Data.DeidentifyDatasetRequest();

            ProjectsResource.LocationsResource.DatasetsResource.DeidentifyRequest request = cloudHealthcareService.Projects.Locations.Datasets.Deidentify(requestBody, sourceDataset);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the dataset to delete (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
            string name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.Delete(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the dataset this DICOM store belongs to.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.DicomStore requestBody = new Data.DicomStore();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.CreateRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DicomStore response = request.Execute();
            // Data.DicomStore response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the DICOM store to delete.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Delete(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The DICOM store resource name from which the data should be exported (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.ExportDicomDataRequest requestBody = new Data.ExportDicomDataRequest();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.ExportRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Export(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the DICOM store to get.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.GetRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DicomStore response = request.Execute();
            // Data.DicomStore response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.GetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store resource into which the data is imported (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.ImportDicomDataRequest requestBody = new Data.ImportDicomDataRequest();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.ImportRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Import(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the dataset.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.ListRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.List(parent);

            Data.ListDicomStoresResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.DicomStores == null)
                {
                    continue;
                }
                foreach (Data.DicomStore dicomStore in response.DicomStores)
                {
                    // TODO: Change code below to process each `dicomStore` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(dicomStore));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Output only. Resource name of the DICOM store, of the form
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.DicomStore requestBody = new Data.DicomStore();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.PatchRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Patch(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DicomStore response = request.Execute();
            // Data.DicomStore response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `instances`).
            string dicomWebPath = "instances";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.SearchForInstancesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.SearchForInstances(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `series`).
            string dicomWebPath = "series";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.SearchForSeriesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.SearchForSeries(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `studies`).
            string dicomWebPath = "studies";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.SearchForStudiesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.SearchForStudies(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being specified.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.SetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}`).
            string dicomWebPath = "studies";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StoreInstancesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.StoreInstances(requestBody, parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}`).
            string dicomWebPath = "studies/my-study";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Delete(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}/metadata`.
            string dicomWebPath = "studies/my-study/metadata";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.RetrieveMetadataRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.RetrieveMetadata(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}`).
            string dicomWebPath = "studies/my-study";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.RetrieveStudyRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.RetrieveStudy(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `instances`).
            string dicomWebPath = "studies/my-study/instances";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SearchForInstancesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.SearchForInstances(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `series`).
            string dicomWebPath = "studies/my-study/series";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SearchForSeriesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.SearchForSeries(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
            string dicomWebPath = "studies/my-study/series/my-sery";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Delete(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `studies/{study_id}/series/{series_id}/instances/{instance_id}`).
            string dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.InstancesResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Delete(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).
            string dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/frames/my-frame";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.InstancesResource.FramesResource.RetrieveFramesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Frames.RetrieveFrames(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).
            string dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/frames/my-frame/rendered";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.InstancesResource.FramesResource.RetrieveRenderedRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.Frames.RetrieveRendered(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `studies/{study_id}/series/{series_id}/instance/{instance_id}`).
            string dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.InstancesResource.RetrieveInstanceRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveInstance(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).
            string dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/metadata";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.InstancesResource.RetrieveMetadataRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveMetadata(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).
            string dicomWebPath = "studies/my-study/series/my-sery/instances/my-instance/rendered";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.InstancesResource.RetrieveRenderedRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.Instances.RetrieveRendered(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.
            string dicomWebPath = "studies/my-study/series/my-sery/metadata";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.RetrieveMetadataRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.RetrieveMetadata(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
            string dicomWebPath = "studies/my-study/series/my-sery";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.RetrieveSeriesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.RetrieveSeries(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g.,
            // `instances`).
            string dicomWebPath = "studies/my-study/series/my-sery/instances";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.SeriesResource.SearchForInstancesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.Series.SearchForInstances(parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the DICOM store that is being accessed (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
            // QIDO-RS standard (e.g., `studies/{study_id}`).
            string dicomWebPath = "studies/my-study";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.StudiesResource.StoreInstancesRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.Studies.StoreInstances(requestBody, parent, dicomWebPath);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy detail is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            ProjectsResource.LocationsResource.DatasetsResource.DicomStoresResource.TestIamPermissionsRequest request = cloudHealthcareService.Projects.Locations.Datasets.DicomStores.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the dataset this FHIR store belongs to.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.FhirStore requestBody = new Data.FhirStore();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.CreateRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FhirStore response = request.Execute();
            // Data.FhirStore response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the FHIR store to delete.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Delete(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the FHIR store to export resource from. The name should be in
            // the format of
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.ExportResourcesRequest requestBody = new Data.ExportResourcesRequest();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.ExportRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Export(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the FHIR store to retrieve resources from.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.ObservationLastnRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ObservationLastn(parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the `Patient` resource for which the information is required.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.PatientEverythingRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.PatientEverything(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the resource to purge.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.ResourcePurgeRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ResourcePurge(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the FHIR store to retrieve the capabilities for.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.CapabilitiesRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Capabilities(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the FHIR store this resource belongs to.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // The type of the resource to delete.
            string type = "my-type";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.ConditionalDeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalDelete(parent, type);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the FHIR store this resource belongs to.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // The type of the resource to update.
            string type = "my-type";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.ConditionalPatchRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalPatch(requestBody, parent, type);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the FHIR store this resource belongs to.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // The type of the resource to update.
            string type = "my-type";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.ConditionalUpdateRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ConditionalUpdate(requestBody, parent, type);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the FHIR store this resource belongs to.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // The type of the resource to create.
            string type = "my-type";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.CreateRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Create(requestBody, parent, type);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the resource to delete.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Delete(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the FHIR store in which this bundle will be executed.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.ExecuteBundleRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.ExecuteBundle(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the resource to retrieve.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.HistoryRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.History(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the resource to update.
            string name = "my-name";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.PatchRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Patch(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the resource to retrieve.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.ReadRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Read(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the FHIR store to retrieve resources from.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SearchResourcesRequest requestBody = new Data.SearchResourcesRequest();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.SearchRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Search(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the resource to update.
            string name = "my-name";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.HttpBody requestBody = new Data.HttpBody();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.UpdateRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Update(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the resource version to retrieve.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.FhirResource.VreadRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Fhir.Vread(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.HttpBody response = request.Execute();
            // Data.HttpBody response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the FHIR store to get.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.GetRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FhirStore response = request.Execute();
            // Data.FhirStore response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.GetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the FHIR store to import FHIR resources to. The name should be
            // in the format of
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.ImportResourcesRequest requestBody = new Data.ImportResourcesRequest();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.ImportRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Import(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the dataset.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.ListRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.List(parent);

            Data.ListFhirStoresResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.FhirStores == null)
                {
                    continue;
                }
                foreach (Data.FhirStore fhirStore in response.FhirStores)
                {
                    // TODO: Change code below to process each `fhirStore` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(fhirStore));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Output only. Resource name of the FHIR store, of the form
            // `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.FhirStore requestBody = new Data.FhirStore();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.PatchRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.Patch(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FhirStore response = request.Execute();
            // Data.FhirStore response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being specified.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.SetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy detail is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            ProjectsResource.LocationsResource.DatasetsResource.FhirStoresResource.TestIamPermissionsRequest request = cloudHealthcareService.Projects.Locations.Datasets.FhirStores.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the dataset to read (e.g.,
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
            string name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.GetRequest request = cloudHealthcareService.Projects.Locations.Datasets.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.GetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the dataset this HL7v2 store belongs to.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.Hl7V2Store requestBody = new Data.Hl7V2Store();

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.CreateRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Hl7V2Store response = request.Execute();
            // Data.Hl7V2Store response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the HL7v2 store to delete.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Delete(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the HL7v2 store to get.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.GetRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Hl7V2Store response = request.Execute();
            // Data.Hl7V2Store response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "my-resource";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.GetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the dataset.
            string parent = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.ListRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.List(parent);

            Data.ListHl7V2StoresResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Hl7V2Stores == null)
                {
                    continue;
                }
                foreach (Data.Hl7V2Store hl7V2Store in response.Hl7V2Stores)
                {
                    // TODO: Change code below to process each `hl7V2Store` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(hl7V2Store));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the dataset this message belongs to.
            string parent = "my-parent";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.CreateMessageRequest requestBody = new Data.CreateMessageRequest();

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.MessagesResource.CreateRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Message response = request.Execute();
            // Data.Message response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the HL7v2 message to delete.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.MessagesResource.DeleteRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Delete(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource name of the HL7v2 message to retrieve.
            string name = "my-name";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.MessagesResource.GetRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Message response = request.Execute();
            // Data.Message response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the HL7v2 store this message belongs to.
            string parent = "my-parent";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.IngestMessageRequest requestBody = new Data.IngestMessageRequest();

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.MessagesResource.IngestRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Ingest(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.IngestMessageResponse response = request.Execute();
            // Data.IngestMessageResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Name of the HL7v2 store to retrieve messages from.
            string parent = "my-parent";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.MessagesResource.ListRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.List(parent);

            Data.ListMessagesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Messages == null)
                {
                    continue;
                }
                foreach (string item in response.Messages)
                {
                    // TODO: Change code below to process each `item` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(item));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Resource name of the Message, of the form
            // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
            // Assigned by the server.
            string name = "my-name";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Message requestBody = new Data.Message();

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.MessagesResource.PatchRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Messages.Patch(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Message response = request.Execute();
            // Data.Message response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Output only. Resource name of the HL7v2 store, of the form
            // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
            string name = "my-name";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Hl7V2Store requestBody = new Data.Hl7V2Store();

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.PatchRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.Patch(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Hl7V2Store response = request.Execute();
            // Data.Hl7V2Store response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being specified.
            // See the operation documentation for the appropriate value for this field.
            string resource = "my-resource";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.SetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy detail is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "my-resource";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            ProjectsResource.LocationsResource.DatasetsResource.Hl7V2StoresResource.TestIamPermissionsRequest request = cloudHealthcareService.Projects.Locations.Datasets.Hl7V2Stores.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the project whose datasets should be listed (e.g.,
            // `projects/{project_id}/locations/{location_id}`).
            string parent = "projects/my-project/locations/my-location";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.ListRequest request = cloudHealthcareService.Projects.Locations.Datasets.List(parent);

            Data.ListDatasetsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Datasets == null)
                {
                    continue;
                }
                foreach (Data.Dataset dataset in response.Datasets)
                {
                    // TODO: Change code below to process each `dataset` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(dataset));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the operation resource.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset/operations/my-operation";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.OperationsResource.GetRequest request = cloudHealthcareService.Projects.Locations.Datasets.Operations.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The name of the operation's parent resource.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.DatasetsResource.OperationsResource.ListRequest request = cloudHealthcareService.Projects.Locations.Datasets.Operations.List(name);

            Data.ListOperationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Operations)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Output only. Resource name of the dataset, of the form
            // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
            string name = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Dataset requestBody = new Data.Dataset();

            ProjectsResource.LocationsResource.DatasetsResource.PatchRequest request = cloudHealthcareService.Projects.Locations.Datasets.Patch(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being specified.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            ProjectsResource.LocationsResource.DatasetsResource.SetIamPolicyRequest request = cloudHealthcareService.Projects.Locations.Datasets.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // REQUIRED: The resource for which the policy detail is being requested.
            // See the operation documentation for the appropriate value for this field.
            string resource = "projects/my-project/locations/my-location/datasets/my-dataset";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            ProjectsResource.LocationsResource.DatasetsResource.TestIamPermissionsRequest request = cloudHealthcareService.Projects.Locations.Datasets.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // Resource name for the location.
            string name = "projects/my-project/locations/my-location";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.GetRequest request = cloudHealthcareService.Projects.Locations.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Location response = request.Execute();
            // Data.Location response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudHealthcare.v1beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudHealthcare.v1beta1.Data;

namespace CloudHealthcareSample
{
    public class CloudHealthcareExample
    {
        public static void Main(string[] args)
        {
            CloudHealthcareService cloudHealthcareService = new CloudHealthcareService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-CloudHealthcareSample/0.1",
            });

            // The resource that owns the locations collection, if applicable.
            string name = "projects/my-project";  // TODO: Update placeholder value.

            ProjectsResource.LocationsResource.ListRequest request = cloudHealthcareService.Projects.Locations.List(name);

            Data.ListLocationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Locations == null)
                {
                    continue;
                }
                foreach (Data.Location location in response.Locations)
                {
                    // TODO: Change code below to process each `location` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(location));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}

{
  "schemas": {
    "CreateWorkerPoolOperationMetadata": {
      "id": "CreateWorkerPoolOperationMetadata",
      "description": "Metadata for the `CreateWorkerPool` operation.",
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        },
        "workerPool": {
          "type": "string",
          "description": "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
        }
      }
    },
    "ProcessAppManifestCallbackOperationMetadata": {
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Metadata for `ProcessAppManifestCallback` operation.",
      "id": "ProcessAppManifestCallbackOperationMetadata"
    },
    "Notification": {
      "id": "Notification",
      "properties": {
        "httpDelivery": {
          "$ref": "HTTPDelivery",
          "description": "Configuration for HTTP delivery."
        },
        "slackDelivery": {
          "$ref": "SlackDelivery",
          "description": "Configuration for Slack delivery."
        },
        "structDelivery": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          },
          "description": "Escape hatch for users to supply custom delivery configs.",
          "type": "object"
        },
        "smtpDelivery": {
          "$ref": "SMTPDelivery",
          "description": "Configuration for SMTP (email) delivery."
        },
        "filter": {
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Notification is the container which holds the data that is relevant to this particular notification."
    },
    "SMTPDelivery": {
      "id": "SMTPDelivery",
      "type": "object",
      "properties": {
        "senderAddress": {
          "type": "string",
          "description": "This is the SMTP account/email that is used to send the message."
        },
        "port": {
          "description": "The SMTP port of the server.",
          "type": "string"
        },
        "server": {
          "type": "string",
          "description": "The address of the SMTP server."
        },
        "fromAddress": {
          "type": "string",
          "description": "This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender."
        },
        "password": {
          "description": "The SMTP sender's password.",
          "$ref": "NotifierSecretRef"
        },
        "recipientAddresses": {
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification."
    },
    "UpdateGitLabConfigOperationMetadata": {
      "id": "UpdateGitLabConfigOperationMetadata",
      "description": "Metadata for `UpdateGitLabConfig` operation.",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Volume": {
      "properties": {
        "name": {
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.",
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        }
      },
      "id": "Volume",
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "type": "object"
    },
    "CreateBitbucketServerConfigOperationMetadata": {
      "description": "Metadata for `CreateBitbucketServerConfig` operation.",
      "id": "CreateBitbucketServerConfigOperationMetadata",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        }
      },
      "type": "object"
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CreateGitLabConfigOperationMetadata": {
      "type": "object",
      "id": "CreateGitLabConfigOperationMetadata",
      "description": "Metadata for `CreateGitLabConfig` operation.",
      "properties": {
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        }
      }
    },
    "SecretManagerSecret": {
      "properties": {
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        },
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*",
          "type": "string"
        }
      },
      "id": "SecretManagerSecret",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "type": "object"
    },
    "BuiltImage": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`."
        },
        "digest": {
          "description": "Docker Registry 2.0 digest.",
          "type": "string"
        },
        "pushTiming": {
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing the specified image.",
          "$ref": "TimeSpan"
        }
      },
      "type": "object",
      "id": "BuiltImage",
      "description": "An image built by the pipeline."
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata": {
      "properties": {
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "config": {
          "description": "The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        }
      },
      "type": "object",
      "description": "Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.",
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata"
    },
    "NetworkConfig": {
      "id": "NetworkConfig",
      "properties": {
        "peeredNetwork": {
          "description": "Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to WorkerPool.project_id on the default network. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`, and {network} is the name of a VPC network in the project.",
          "type": "string"
        }
      },
      "description": "Network describes the network configuration for a `WorkerPool`.",
      "type": "object"
    },
    "HTTPDelivery": {
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "type": "object",
      "id": "HTTPDelivery",
      "properties": {
        "uri": {
          "description": "The URI to which JSON-containing HTTP POST requests should be sent.",
          "type": "string"
        }
      }
    },
    "BuildOperationMetadata": {
      "id": "BuildOperationMetadata",
      "properties": {
        "build": {
          "$ref": "Build",
          "description": "The build that the operation is tracking."
        }
      },
      "description": "Metadata for build operations.",
      "type": "object"
    },
    "RunWorkflowCustomOperationMetadata": {
      "description": "Represents the custom metadata of the RunWorkflow long-running operation.",
      "properties": {
        "pipelineRunId": {
          "type": "string",
          "description": "Output only. ID of the pipeline run created by RunWorkflow.",
          "readOnly": true
        },
        "apiVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. API version used to start the operation."
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string",
          "readOnly": true
        },
        "requestedCancellation": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time the operation was created."
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time the operation finished running."
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string",
          "readOnly": true
        }
      },
      "id": "RunWorkflowCustomOperationMetadata",
      "type": "object"
    },
    "InlineSecret": {
      "id": "InlineSecret",
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "properties": {
        "envMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets."
        },
        "kmsKeyName": {
          "type": "string",
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*"
        }
      },
      "type": "object"
    },
    "Secrets": {
      "properties": {
        "secretManager": {
          "items": {
            "$ref": "SecretManagerSecret"
          },
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "type": "array"
        },
        "inline": {
          "items": {
            "$ref": "InlineSecret"
          },
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "Secrets and secret environment variables.",
      "id": "Secrets"
    },
    "NotifierMetadata": {
      "type": "object",
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier.",
      "id": "NotifierMetadata",
      "properties": {
        "notifier": {
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"/:\". For example: \"gcr.io/my-project/notifiers/smtp:1.2.34\".",
          "type": "string"
        },
        "name": {
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\".",
          "type": "string"
        }
      }
    },
    "WorkerConfig": {
      "properties": {
        "diskSizeGb": {
          "description": "Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size.",
          "type": "string",
          "format": "int64"
        },
        "machineType": {
          "description": "Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "WorkerConfig defines the configuration to be used for a creating workers in the pool.",
      "id": "WorkerConfig"
    },
    "DeleteGitHubEnterpriseConfigOperationMetadata": {
      "id": "DeleteGitHubEnterpriseConfigOperationMetadata",
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        }
      },
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation."
    },
    "BuildStep": {
      "type": "object",
      "id": "BuildStep",
      "description": "A step in the build pipeline.",
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array"
        },
        "waitFor": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully."
        },
        "timeout": {
          "format": "google-duration",
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string"
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.",
          "type": "string"
        },
        "dir": {
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step."
        },
        "timing": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true
        },
        "entrypoint": {
          "type": "string",
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used."
        },
        "status": {
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "readOnly": true,
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "pullTiming": {
          "$ref": "TimeSpan",
          "readOnly": true,
          "description": "Output only. Stores timing information for pulling this build step's builder image only."
        },
        "script": {
          "type": "string",
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args."
        },
        "env": {
          "items": {
            "type": "string"
          },
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array"
        },
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "type": "array"
        }
      }
    },
    "Hash": {
      "description": "Container message for hash values.",
      "properties": {
        "type": {
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ],
          "type": "string",
          "description": "The type of hash that was performed.",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ]
        },
        "value": {
          "format": "byte",
          "description": "The hash value.",
          "type": "string"
        }
      },
      "id": "Hash",
      "type": "object"
    },
    "Secret": {
      "properties": {
        "kmsKeyName": {
          "type": "string",
          "description": "Cloud KMS key name to use to decrypt these envs."
        },
        "secretEnv": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.",
      "id": "Secret"
    },
    "Build": {
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "id": "Build",
      "properties": {
        "projectId": {
          "description": "Output only. ID of the project.",
          "readOnly": true,
          "type": "string"
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "type": "string",
          "readOnly": true
        },
        "substitutions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Substitutions data for `Build` resource."
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "secrets": {
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
          "items": {
            "$ref": "Secret"
          },
          "type": "array"
        },
        "timeout": {
          "type": "string",
          "format": "google-duration",
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes."
        },
        "source": {
          "description": "The location of the source files to build.",
          "$ref": "Source"
        },
        "failureInfo": {
          "$ref": "FailureInfo",
          "description": "Output only. Contains information about the build when status=FAILURE.",
          "readOnly": true
        },
        "tags": {
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
          "type": "string"
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "$ref": "SourceProvenance",
          "readOnly": true
        },
        "artifacts": {
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
          "$ref": "Artifacts"
        },
        "status": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "description": "Output only. Status of the build."
        },
        "queueTtl": {
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "format": "google-duration",
          "type": "string"
        },
        "logUrl": {
          "type": "string",
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "readOnly": true
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the build was received.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "results": {
          "readOnly": true,
          "$ref": "Results",
          "description": "Output only. Results of the build."
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array",
          "items": {
            "$ref": "BuildStep"
          }
        },
        "availableSecrets": {
          "description": "Secrets and secret environment variables.",
          "$ref": "Secrets"
        },
        "finishTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution."
        },
        "statusDetail": {
          "description": "Output only. Customer-readable message about the current status.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service."
        },
        "options": {
          "description": "Special options for this build.",
          "$ref": "BuildOptions"
        },
        "timing": {
          "readOnly": true,
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "type": "object",
          "additionalProperties": {
            "$ref": "TimeSpan"
          }
        },
        "approval": {
          "$ref": "BuildApproval",
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "readOnly": true
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`."
        },
        "id": {
          "readOnly": true,
          "description": "Output only. Unique identifier of the build.",
          "type": "string"
        },
        "warnings": {
          "items": {
            "$ref": "Warning"
          },
          "type": "array",
          "readOnly": true,
          "description": "Output only. Non-fatal problems encountered during the execution of the build."
        },
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDevtoolsCloudbuildV2OperationMetadata": {
      "properties": {
        "statusMessage": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time the operation finished running."
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Server-defined resource path for the target of the operation."
        },
        "apiVersion": {
          "type": "string",
          "description": "Output only. API version used to start the operation.",
          "readOnly": true
        },
        "requestedCancellation": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        }
      },
      "id": "GoogleDevtoolsCloudbuildV2OperationMetadata",
      "type": "object",
      "description": "Represents the metadata of the long-running operation."
    },
    "BitbucketServerConnectedRepository": {
      "description": "/ BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.",
      "id": "BitbucketServerConnectedRepository",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "Status",
          "readOnly": true,
          "description": "Output only. The status of the repo connection request."
        },
        "parent": {
          "type": "string",
          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`"
        },
        "repo": {
          "$ref": "BitbucketServerRepositoryId",
          "description": "The Bitbucket Server repositories to connect."
        }
      }
    },
    "NotifierSecretRef": {
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.",
      "type": "object",
      "properties": {
        "secretRef": {
          "type": "string",
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`."
        }
      },
      "id": "NotifierSecretRef"
    },
    "FailureInfo": {
      "properties": {
        "detail": {
          "type": "string",
          "description": "Explains the failure issue in more detail using hard-coded text."
        },
        "type": {
          "type": "string",
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "description": "The name of the failure."
        }
      },
      "type": "object",
      "description": "A fatal problem encountered during the execution of the build.",
      "id": "FailureInfo"
    },
    "DeleteWorkerPoolOperationMetadata": {
      "description": "Metadata for the `DeleteWorkerPool` operation.",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        }
      },
      "id": "DeleteWorkerPoolOperationMetadata",
      "type": "object"
    },
    "NotifierSpec": {
      "description": "NotifierSpec is the configuration container for notifications.",
      "id": "NotifierSpec",
      "properties": {
        "notification": {
          "$ref": "Notification",
          "description": "The configuration of this particular notifier."
        },
        "secrets": {
          "items": {
            "$ref": "NotifierSecret"
          },
          "type": "array",
          "description": "Configurations for secret resources used by this particular notifier."
        }
      },
      "type": "object"
    },
    "OperationMetadata": {
      "type": "object",
      "description": "Represents the metadata of the long-running operation.",
      "properties": {
        "apiVersion": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. API version used to start the operation."
        },
        "cancelRequested": {
          "type": "boolean",
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time the operation was created.",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "statusDetail": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "target": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Server-defined resource path for the target of the operation."
        }
      },
      "id": "OperationMetadata"
    },
    "UpdateWorkerPoolOperationMetadata": {
      "id": "UpdateWorkerPoolOperationMetadata",
      "description": "Metadata for the `UpdateWorkerPool` operation.",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "workerPool": {
          "type": "string",
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
        },
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FileHashes": {
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "Hash"
          }
        }
      },
      "id": "FileHashes",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      }
    },
    "Results": {
      "properties": {
        "buildStepImages": {
          "items": {
            "type": "string"
          },
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array"
        },
        "numArtifacts": {
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded.",
          "type": "string",
          "format": "int64"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "BuiltImage"
          },
          "description": "Container images that were built as a part of the build."
        },
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded."
        },
        "artifactTiming": {
          "$ref": "TimeSpan",
          "description": "Time to push all non-container artifacts."
        }
      },
      "description": "Artifacts created by the build pipeline.",
      "id": "Results",
      "type": "object"
    },
    "ApprovalConfig": {
      "type": "object",
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "properties": {
        "approvalRequired": {
          "type": "boolean",
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start."
        }
      },
      "id": "ApprovalConfig"
    },
    "SlackDelivery": {
      "id": "SlackDelivery",
      "type": "object",
      "properties": {
        "webhookUri": {
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel.",
          "$ref": "NotifierSecretRef"
        }
      },
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks."
    },
    "SourceProvenance": {
      "type": "object",
      "id": "SourceProvenance",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "properties": {
        "resolvedStorageSourceManifest": {
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
          "$ref": "StorageSourceManifest"
        },
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "fileHashes": {
          "readOnly": true,
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "type": "object"
        }
      }
    },
    "CreateGitHubEnterpriseConfigOperationMetadata": {
      "id": "CreateGitHubEnterpriseConfigOperationMetadata",
      "type": "object",
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation.",
      "properties": {
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ListWorkerPoolsResponse": {
      "description": "Response containing existing `WorkerPools`.",
      "id": "ListWorkerPoolsResponse",
      "properties": {
        "workerPools": {
          "description": "`WorkerPools` for the specified project.",
          "items": {
            "$ref": "WorkerPool"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ApprovalResult": {
      "id": "ApprovalResult",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "type": "object",
      "properties": {
        "approverAccount": {
          "readOnly": true,
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.",
          "type": "string"
        },
        "decision": {
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ],
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "description": "Required. The decision of this manual approval.",
          "type": "string"
        },
        "approvalTime": {
          "description": "Output only. The time when the approval decision was made.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "url": {
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.",
          "type": "string"
        },
        "comment": {
          "type": "string",
          "description": "Optional. An optional comment for this manual approval result."
        }
      }
    },
    "WorkerPool": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "description": "Required. Immutable. The region where the `WorkerPool` runs. Only \"us-central1\" is currently supported. Note that `region` cannot be changed once the `WorkerPool` is created."
        },
        "deleteTime": {
          "readOnly": true,
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. Time at which the request to create the `WorkerPool` was received."
        },
        "state": {
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED"
          ],
          "type": "string",
          "description": "Output only. WorkerPool state.",
          "enumDescriptions": [
            "State of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted."
          ]
        },
        "networkConfig": {
          "description": "Network configuration for the `WorkerPool`.",
          "$ref": "NetworkConfig"
        },
        "updateTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
          "format": "google-datetime"
        },
        "name": {
          "readOnly": true,
          "description": "Output only. The resource name of the `WorkerPool`. Format of the name is `projects/{project_id}/workerPools/{worker_pool_id}`, where the value of {worker_pool_id} is provided in the CreateWorkerPool request.",
          "type": "string"
        },
        "workerConfig": {
          "description": "Worker configuration for the `WorkerPool`.",
          "$ref": "WorkerConfig"
        }
      },
      "id": "WorkerPool",
      "description": "Configuration for a WorkerPool to run the builds. Workers are machines that Cloud Build uses to run your builds. By default, all workers run in a project owned by Cloud Build. To have full control over the workers that execute your builds -- such as enabling them to access private resources on your private network -- you can request Cloud Build to run the workers in your own project by creating a custom workers pool."
    },
    "ArtifactObjects": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix."
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "description": "Path globs used to match files in the build's workspace.",
          "type": "array"
        },
        "timing": {
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "$ref": "TimeSpan",
          "readOnly": true
        }
      },
      "type": "object",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "id": "ArtifactObjects"
    },
    "BuildOptions": {
      "description": "Optional arguments to enable specific features of builds.",
      "type": "object",
      "properties": {
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.",
          "format": "int64",
          "type": "string"
        },
        "logging": {
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).",
            "Turn off all logging. No build logs will be captured."
          ],
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "type": "string"
        },
        "workerPool": {
          "description": "This field deprecated; please use `pool.name` instead.",
          "type": "string"
        },
        "logStreamingOption": {
          "type": "string",
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ],
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "description": "Option to define build log streaming behavior to Google Cloud Storage."
        },
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        },
        "substitutionOption": {
          "type": "string",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ]
        },
        "pool": {
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
          "$ref": "PoolOption"
        },
        "requestedVerifyOption": {
          "description": "Requested verifiability options.",
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ],
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "type": "string"
        },
        "machineType": {
          "description": "Compute Engine machine type on which to run the build.",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ],
          "type": "string",
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ]
        },
        "secretEnv": {
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "volumes": {
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        },
        "sourceProvenanceHash": {
          "type": "array",
          "description": "Requested hash for SourceProvenance.",
          "items": {
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ],
            "type": "string",
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ]
          }
        }
      },
      "id": "BuildOptions"
    },
    "PoolOption": {
      "id": "PoolOption",
      "properties": {
        "name": {
          "type": "string",
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}"
        }
      },
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
      "type": "object"
    },
    "Artifacts": {
      "id": "Artifacts",
      "type": "object",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        }
      }
    },
    "NotifierConfig": {
      "properties": {
        "apiVersion": {
          "description": "The API version of this configuration format.",
          "type": "string"
        },
        "metadata": {
          "$ref": "NotifierMetadata",
          "description": "Metadata for referring to/handling/deploying this notifier."
        },
        "spec": {
          "$ref": "NotifierSpec",
          "description": "The actual configuration for this notifier."
        },
        "kind": {
          "type": "string",
          "description": "The type of notifier to use (e.g. SMTPNotifier)."
        }
      },
      "type": "object",
      "description": "NotifierConfig is the top-level configuration message.",
      "id": "NotifierConfig"
    },
    "CancelOperationRequest": {
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "properties": {}
    },
    "ArtifactResult": {
      "properties": {
        "location": {
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.",
          "type": "string"
        },
        "fileHash": {
          "items": {
            "$ref": "FileHashes"
          },
          "type": "array",
          "description": "The file hash of the artifact."
        }
      },
      "type": "object",
      "id": "ArtifactResult",
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file."
    },
    "UpdateBitbucketServerConfigOperationMetadata": {
      "type": "object",
      "id": "UpdateBitbucketServerConfigOperationMetadata",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        }
      },
      "description": "Metadata for `UpdateBitbucketServerConfig` operation."
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "Source": {
      "properties": {
        "repoSource": {
          "description": "If provided, get the source from this location in a Cloud Source Repository.",
          "$ref": "RepoSource"
        },
        "storageSourceManifest": {
          "description": "If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
          "$ref": "StorageSourceManifest"
        },
        "storageSource": {
          "description": "If provided, get the source from this location in Google Cloud Storage.",
          "$ref": "StorageSource"
        }
      },
      "type": "object",
      "id": "Source",
      "description": "Location of the source in a supported storage service."
    },
    "TimeSpan": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "End of time span."
        },
        "startTime": {
          "description": "Start of time span.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "Start and end times for a build execution phase.",
      "id": "TimeSpan"
    },
    "UpdateGitHubEnterpriseConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        }
      },
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "id": "UpdateGitHubEnterpriseConfigOperationMetadata"
    },
    "RepoSource": {
      "type": "object",
      "description": "Location of the source in a Google Cloud Source Repository.",
      "properties": {
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "tagName": {
          "type": "string",
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision regex.",
          "type": "boolean"
        },
        "repoName": {
          "description": "Name of the Cloud Source Repository.",
          "type": "string"
        },
        "substitutions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger"
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        }
      },
      "id": "RepoSource"
    },
    "DeleteBitbucketServerConfigOperationMetadata": {
      "id": "DeleteBitbucketServerConfigOperationMetadata",
      "type": "object",
      "description": "Metadata for `DeleteBitbucketServerConfig` operation.",
      "properties": {
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        }
      }
    },
    "StorageSource": {
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "type": "object",
      "id": "StorageSource",
      "properties": {
        "generation": {
          "type": "string",
          "format": "int64",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used."
        },
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build."
        }
      }
    },
    "DeleteGitLabConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        }
      },
      "id": "DeleteGitLabConfigOperationMetadata",
      "description": "Metadata for `DeleteGitLabConfig` operation."
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponse": {
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponse",
      "properties": {
        "bitbucketServerConnectedRepositories": {
          "type": "array",
          "items": {
            "$ref": "BitbucketServerConnectedRepository"
          },
          "description": "The connected Bitbucket Server repositories."
        }
      },
      "type": "object",
      "description": "Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories."
    },
    "BuildApproval": {
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "type": "object",
      "id": "BuildApproval",
      "properties": {
        "config": {
          "description": "Output only. Configuration for manual approval of this build.",
          "readOnly": true,
          "$ref": "ApprovalConfig"
        },
        "result": {
          "readOnly": true,
          "description": "Output only. Result of manual approval for this Build.",
          "$ref": "ApprovalResult"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "readOnly": true,
          "description": "Output only. The state of this build's approval.",
          "type": "string"
        }
      }
    },
    "NotifierSecret": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects/my-project/secrets/my-secret/versions/latest\"."
        },
        "name": {
          "type": "string",
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\"."
        }
      },
      "id": "NotifierSecret",
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path."
    },
    "BitbucketServerRepositoryId": {
      "properties": {
        "webhookId": {
          "format": "int32",
          "readOnly": true,
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "type": "integer"
        },
        "repoSlug": {
          "description": "Required. Identifier for the repository.",
          "type": "string"
        },
        "projectKey": {
          "type": "string",
          "description": "Required. Identifier for the project storing the repository."
        }
      },
      "type": "object",
      "description": "BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.",
      "id": "BitbucketServerRepositoryId"
    },
    "StorageSourceManifest": {
      "id": "StorageSourceManifest",
      "properties": {
        "generation": {
          "type": "string",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "description": "Google Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        }
      },
      "description": "Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "type": "object"
    },
    "Warning": {
      "id": "Warning",
      "properties": {
        "text": {
          "description": "Explanation of the warning generated.",
          "type": "string"
        },
        "priority": {
          "type": "string",
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "description": "The priority for this warning."
        }
      },
      "type": "object",
      "description": "A non-fatal problem encountered during the execution of the build."
    }
  },
  "name": "cloudbuild",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "id": "cloudbuild:v1alpha2",
  "batchPath": "batch",
  "kind": "discovery#restDescription",
  "servicePath": "",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "version": "v1alpha2",
  "protocol": "rest",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "discoveryVersion": "v1",
  "basePath": "",
  "revision": "20220322",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "title": "Cloud Build API",
  "fullyEncodeReservedExpansion": true,
  "version_module": true,
  "canonicalName": "Cloud Build",
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "parameters": {
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "prettyPrint": {
      "type": "boolean",
      "location": "query",
      "default": "true",
      "description": "Returns response with indentations and line breaks."
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format."
    },
    "alt": {
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "type": "string",
      "description": "Data format for response."
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "workerPools": {
          "methods": {
            "create": {
              "response": {
                "$ref": "WorkerPool"
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "WorkerPool"
              },
              "flatPath": "v1alpha2/projects/{projectsId}/workerPools",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha2/{+parent}/workerPools",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "workerPoolId": {
                  "type": "string",
                  "description": "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/.",
                  "location": "query"
                },
                "parent": {
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Required. The parent resource where this book will be created. Format: projects/{project}"
                }
              },
              "id": "cloudbuild.projects.workerPools.create",
              "description": "Creates a `WorkerPool` to run the builds, and returns the new worker pool."
            },
            "list": {
              "path": "v1alpha2/{+parent}/workerPools",
              "parameters": {
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. The parent, which owns this collection of `WorkerPools`. Format: projects/{project}",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "httpMethod": "GET",
              "id": "cloudbuild.projects.workerPools.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListWorkerPoolsResponse"
              },
              "description": "Lists `WorkerPool`s by project.",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1alpha2/projects/{projectsId}/workerPools"
            },
            "get": {
              "id": "cloudbuild.projects.workerPools.get",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1alpha2/projects/{projectsId}/workerPools/{workerPoolsId}",
              "description": "Returns details of a `WorkerPool`.",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the `WorkerPool` to retrieve. Format: projects/{project}/workerPools/{workerPool}"
                }
              },
              "path": "v1alpha2/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "WorkerPool"
              }
            },
            "patch": {
              "httpMethod": "PATCH",
              "description": "Updates a `WorkerPool`.",
              "request": {
                "$ref": "WorkerPool"
              },
              "path": "v1alpha2/{+name}",
              "id": "cloudbuild.projects.workerPools.patch",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "WorkerPool"
              },
              "parameters": {
                "updateMask": {
                  "description": "A mask specifying which fields in `WorkerPool` should be updated.",
                  "type": "string",
                  "location": "query",
                  "format": "google-fieldmask"
                },
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "Output only. The resource name of the `WorkerPool`. Format of the name is `projects/{project_id}/workerPools/{worker_pool_id}`, where the value of {worker_pool_id} is provided in the CreateWorkerPool request.",
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$",
                  "required": true
                }
              },
              "flatPath": "v1alpha2/projects/{projectsId}/workerPools/{workerPoolsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "delete": {
              "id": "cloudbuild.projects.workerPools.delete",
              "response": {
                "$ref": "Empty"
              },
              "flatPath": "v1alpha2/projects/{projectsId}/workerPools/{workerPoolsId}",
              "path": "v1alpha2/{+name}",
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "description": "Required. The name of the `WorkerPool` to delete. Format: projects/{project}/workerPools/{workerPool}",
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$",
                  "required": true
                }
              },
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "description": "Deletes a `WorkerPool`.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          }
        },
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "cloudbuild.projects.locations.operations.get",
                  "path": "v1alpha2/{+name}",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "type": "string"
                    }
                  }
                },
                "cancel": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource to be cancelled.",
                      "required": true
                    }
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1alpha2/{+name}:cancel"
                }
              }
            }
          }
        }
      }
    }
  },
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "rootUrl": "https://cloudbuild.googleapis.com/"
}

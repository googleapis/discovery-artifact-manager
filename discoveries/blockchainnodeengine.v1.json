{
  "baseUrl": "https://blockchainnodeengine.googleapis.com/",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    }
  },
  "canonicalName": "Blockchain Node Engine",
  "basePath": "",
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://blockchainnodeengine.mtls.googleapis.com/",
  "rootUrl": "https://blockchainnodeengine.googleapis.com/",
  "title": "Blockchain Node Engine API",
  "description": "",
  "id": "blockchainnodeengine:v1",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "blockchainNodes": {
              "methods": {
                "delete": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "blockchainnodeengine.projects.locations.blockchainNodes.delete",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/blockchainNodes/{blockchainNodesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "requestId": {
                      "type": "string",
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query"
                    },
                    "name": {
                      "location": "path",
                      "type": "string",
                      "description": "Required. The fully qualified name of the blockchain node to delete. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/blockchainNodes/[^/]+$",
                      "required": true
                    }
                  },
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes a single blockchain node."
                },
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/blockchainNodes/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "Required. The fully qualified name of the blockchain node to fetch. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.",
                      "required": true
                    }
                  },
                  "httpMethod": "GET",
                  "id": "blockchainnodeengine.projects.locations.blockchainNodes.get",
                  "response": {
                    "$ref": "BlockchainNode"
                  },
                  "description": "Gets details of a single blockchain node.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/blockchainNodes/{blockchainNodesId}"
                },
                "create": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "blockchainNodeId": {
                      "description": "Required. ID of the requesting object.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "Required. Value for parent."
                    },
                    "requestId": {
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+parent}/blockchainNodes",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "blockchainnodeengine.projects.locations.blockchainNodes.create",
                  "httpMethod": "POST",
                  "description": "Creates a new blockchain node in a given project and location.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/blockchainNodes",
                  "request": {
                    "$ref": "BlockchainNode"
                  }
                },
                "list": {
                  "path": "v1/{+parent}/blockchainNodes",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/blockchainNodes",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Lists blockchain nodes in a given project and location.",
                  "parameters": {
                    "pageSize": {
                      "description": "Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    },
                    "parent": {
                      "description": "Required. Parent value for `ListNodesRequest`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    },
                    "orderBy": {
                      "description": "Hint for how to order the results.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "A token identifying a page of results the server should return.",
                      "type": "string",
                      "location": "query"
                    },
                    "filter": {
                      "description": "Filtering results.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "httpMethod": "GET",
                  "id": "blockchainnodeengine.projects.locations.blockchainNodes.list",
                  "response": {
                    "$ref": "ListBlockchainNodesResponse"
                  }
                },
                "patch": {
                  "httpMethod": "PATCH",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Updates the parameters of a single blockchain node.",
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/blockchainNodes/[^/]+$",
                      "description": "Output only. The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.",
                      "type": "string",
                      "required": true
                    },
                    "updateMask": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. Field mask is used to specify the fields to be overwritten in the Blockchain node resource by the update. The fields specified in the `update_mask` are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.",
                      "format": "google-fieldmask"
                    },
                    "requestId": {
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "BlockchainNode"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/blockchainNodes/{blockchainNodesId}",
                  "id": "blockchainnodeengine.projects.locations.blockchainNodes.patch"
                }
              }
            },
            "operations": {
              "methods": {
                "cancel": {
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "The name of the operation resource to be cancelled.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "path": "v1/{+name}:cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "id": "blockchainnodeengine.projects.locations.operations.cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleProtobufEmpty"
                  },
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "pageSize": {
                      "description": "The standard list page size.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "The name of the operation's parent resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The standard list filter."
                    }
                  },
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
                  "path": "v1/{+name}/operations",
                  "id": "blockchainnodeengine.projects.locations.operations.list",
                  "httpMethod": "GET"
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "blockchainnodeengine.projects.locations.operations.get"
                },
                "delete": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "response": {
                    "$ref": "GoogleProtobufEmpty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource to be deleted.",
                      "required": true
                    }
                  },
                  "id": "blockchainnodeengine.projects.locations.operations.delete",
                  "httpMethod": "DELETE",
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."
                }
              }
            }
          },
          "methods": {
            "list": {
              "description": "Lists information about the supported locations for this service.",
              "id": "blockchainnodeengine.projects.locations.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "flatPath": "v1/projects/{projectsId}/locations",
              "path": "v1/{+name}/locations",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "parameters": {
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "type": "integer",
                  "format": "int32",
                  "location": "query"
                },
                "pageToken": {
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "The resource that owns the locations collection, if applicable.",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                }
              }
            },
            "get": {
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "required": true,
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "type": "string",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Location"
              },
              "id": "blockchainnodeengine.projects.locations.get",
              "description": "Gets information about a location.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ]
            }
          }
        }
      }
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "documentationLink": "https://cloud.google.com/blockchain-node-engine",
  "revision": "20230621",
  "fullyEncodeReservedExpansion": true,
  "discoveryVersion": "v1",
  "protocol": "rest",
  "servicePath": "",
  "batchPath": "batch",
  "name": "blockchainnodeengine",
  "version": "v1",
  "version_module": true,
  "ownerDomain": "google.com",
  "schemas": {
    "ConnectionInfo": {
      "properties": {
        "endpointInfo": {
          "description": "Output only. The endpoint information through which to interact with a blockchain node.",
          "readOnly": true,
          "$ref": "EndpointInfo"
        }
      },
      "id": "ConnectionInfo",
      "type": "object",
      "description": "The connection information through which to interact with a blockchain node."
    },
    "Location": {
      "id": "Location",
      "type": "object",
      "description": "A resource that represents a Google Cloud location.",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "type": "string",
          "description": "The canonical id for this location. For example: `\"us-east1\"`."
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata. For example the available capacity at the given location."
        }
      }
    },
    "ListLocationsResponse": {
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "Location"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "id": "ListLocationsResponse"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        }
      },
      "type": "object",
      "id": "Status"
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "properties": {
        "statusMessage": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time the operation finished running."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time the operation was created.",
          "readOnly": true
        },
        "apiVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. API version used to start the operation."
        },
        "verb": {
          "type": "string",
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "requestedCancellation": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have `Operation.error` value with a `google.rpc.Status.code` of `1`, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        }
      },
      "description": "Represents the metadata of the long-running operation.",
      "type": "object"
    },
    "EndpointInfo": {
      "properties": {
        "websocketsApiEndpoint": {
          "readOnly": true,
          "description": "Output only. The assigned URL for the node WebSockets API endpoint.",
          "type": "string"
        },
        "jsonRpcApiEndpoint": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The assigned URL for the node JSON-RPC API endpoint."
        }
      },
      "id": "EndpointInfo",
      "type": "object",
      "description": "Contains endpoint information through which to interact with a blockchain node."
    },
    "ListOperationsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          }
        }
      },
      "id": "ListOperationsResponse",
      "type": "object",
      "description": "The response message for Operations.ListOperations."
    },
    "EthereumEndpoints": {
      "properties": {
        "executionClientPrometheusMetricsApiEndpoint": {
          "description": "Output only. The assigned URL for the node's execution client's Prometheus metrics endpoint.",
          "readOnly": true,
          "type": "string"
        },
        "beaconApiEndpoint": {
          "description": "Output only. The assigned URL for the node's Beacon API endpoint.",
          "readOnly": true,
          "type": "string"
        },
        "beaconPrometheusMetricsApiEndpoint": {
          "readOnly": true,
          "description": "Output only. The assigned URL for the node's Beacon Prometheus metrics endpoint. See [Prometheus Metrics](https://lighthouse-book.sigmaprime.io/advanced_metrics.html) for more details.",
          "type": "string"
        }
      },
      "description": "Contains endpoint information specific to Ethereum nodes.",
      "id": "EthereumEndpoints",
      "type": "object"
    },
    "CancelOperationRequest": {
      "type": "object",
      "properties": {},
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation."
    },
    "Operation": {
      "type": "object",
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      }
    },
    "GethDetails": {
      "properties": {
        "garbageCollectionMode": {
          "description": "Immutable. Blockchain garbage collection mode.",
          "enumDescriptions": [
            "The garbage collection has not been specified.",
            "Configures Geth's garbage collection so that older data not needed for a full node is deleted. This is the default mode when creating a full node.",
            "Configures Geth's garbage collection so that old data is never deleted. This is the default mode when creating an archive node. This value can also be chosen when creating a full node in order to create a partial/recent archive node. See [Sync modes](https://geth.ethereum.org/docs/fundamentals/sync-modes) for more details."
          ],
          "type": "string",
          "enum": [
            "GARBAGE_COLLECTION_MODE_UNSPECIFIED",
            "FULL",
            "ARCHIVE"
          ]
        }
      },
      "description": "Options for the Geth execution client. See [Command-line Options](https://geth.ethereum.org/docs/fundamentals/command-line-options) for more details.",
      "type": "object",
      "id": "GethDetails"
    },
    "GoogleProtobufEmpty": {
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "GoogleProtobufEmpty",
      "properties": {}
    },
    "ListBlockchainNodesResponse": {
      "type": "object",
      "id": "ListBlockchainNodesResponse",
      "description": "Message for response to listing blockchain nodes.",
      "properties": {
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached.",
          "type": "array"
        },
        "blockchainNodes": {
          "items": {
            "$ref": "BlockchainNode"
          },
          "type": "array",
          "description": "The list of nodes"
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "EthereumDetails": {
      "properties": {
        "consensusClient": {
          "enumDeprecated": [
            false,
            false,
            true
          ],
          "enumDescriptions": [
            "Consensus client has not been specified, but should be.",
            "Consensus client implementation written in Rust, maintained by Sigma Prime. See [Lighthouse - Sigma Prime](https://lighthouse.sigmaprime.io/) for details.",
            "Erigon's embedded consensus client embedded in the execution client. Note this option is not currently available when creating new blockchain nodes. See [Erigon on GitHub](https://github.com/ledgerwatch/erigon#embedded-consensus-layer) for details."
          ],
          "enum": [
            "CONSENSUS_CLIENT_UNSPECIFIED",
            "LIGHTHOUSE",
            "ERIGON_EMBEDDED_CONSENSUS_LAYER"
          ],
          "description": "Immutable. The consensus client.",
          "type": "string"
        },
        "executionClient": {
          "description": "Immutable. The execution client",
          "enum": [
            "EXECUTION_CLIENT_UNSPECIFIED",
            "GETH",
            "ERIGON"
          ],
          "enumDescriptions": [
            "Execution client has not been specified, but should be.",
            "Official Go implementation of the Ethereum protocol. See [go-ethereum](https://geth.ethereum.org/) for details.",
            "An implementation of Ethereum (execution client), on the efficiency frontier, written in Go. See [Erigon on GitHub](https://github.com/ledgerwatch/erigon) for details."
          ],
          "type": "string"
        },
        "additionalEndpoints": {
          "$ref": "EthereumEndpoints",
          "readOnly": true,
          "description": "Output only. Ethereum-specific endpoint information."
        },
        "network": {
          "enum": [
            "NETWORK_UNSPECIFIED",
            "MAINNET",
            "TESTNET_GOERLI_PRATER",
            "TESTNET_SEPOLIA"
          ],
          "type": "string",
          "enumDescriptions": [
            "The network has not been specified, but should be.",
            "The Ethereum Mainnet.",
            "The Ethereum Testnet based on Goerli protocol.",
            "The Ethereum Testnet based on Sepolia/Bepolia protocol."
          ],
          "description": "Immutable. The Ethereum environment being accessed."
        },
        "apiEnableDebug": {
          "type": "boolean",
          "description": "Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`."
        },
        "gethDetails": {
          "description": "Details for the Geth execution client.",
          "$ref": "GethDetails"
        },
        "apiEnableAdmin": {
          "description": "Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.",
          "type": "boolean"
        },
        "nodeType": {
          "description": "Immutable. The type of Ethereum node.",
          "type": "string",
          "enum": [
            "NODE_TYPE_UNSPECIFIED",
            "LIGHT",
            "FULL",
            "ARCHIVE"
          ],
          "enumDescriptions": [
            "Node type has not been specified, but should be.",
            "An Ethereum node that only downloads Ethereum block headers.",
            "Keeps a complete copy of the blockchain data, and contributes to the network by receiving, validating, and forwarding transactions.",
            "Holds the same data as full node as well as all of the blockchain's history state data dating back to the Genesis Block."
          ]
        }
      },
      "type": "object",
      "description": "Ethereum-specific blockchain node details.",
      "id": "EthereumDetails"
    },
    "BlockchainNode": {
      "id": "BlockchainNode",
      "type": "object",
      "description": "A representation of a blockchain node.",
      "properties": {
        "ethereumDetails": {
          "$ref": "EthereumDetails",
          "description": "Ethereum-specific blockchain node details."
        },
        "blockchainType": {
          "type": "string",
          "enum": [
            "BLOCKCHAIN_TYPE_UNSPECIFIED",
            "ETHEREUM"
          ],
          "description": "Immutable. The blockchain type of the node.",
          "enumDescriptions": [
            "Blockchain type has not been specified, but should be.",
            "The blockchain type is Ethereum."
          ]
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "DELETING",
            "RUNNING",
            "ERROR",
            "UPDATING",
            "REPAIRING",
            "RECONCILING"
          ],
          "enumDescriptions": [
            "The state has not been specified.",
            "The node has been requested and is in the process of being created.",
            "The existing node is undergoing deletion, but is not yet finished.",
            "The node is running and ready for use.",
            "The node is in an unexpected or errored state.",
            "The node is currently being updated.",
            "The node is currently being repaired.",
            "The node is currently being reconciled."
          ],
          "description": "Output only. A status representing the state of the node."
        },
        "connectionInfo": {
          "$ref": "ConnectionInfo",
          "description": "Output only. The connection information used to interact with a blockchain node.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`."
        },
        "labels": {
          "description": "User-provided key-value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The timestamp at which the blockchain node was first created.",
          "readOnly": true
        },
        "updateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. The timestamp at which the blockchain node was last updated."
        }
      }
    }
  }
}

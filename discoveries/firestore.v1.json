{
  "id": "firestore:v1",
  "discoveryVersion": "v1",
  "rootUrl": "https://firestore.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "ownerDomain": "google.com",
  "canonicalName": "Firestore",
  "revision": "20230905",
  "fullyEncodeReservedExpansion": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "parameters": {
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    }
  },
  "ownerName": "Google",
  "version_module": true,
  "protocol": "rest",
  "batchPath": "batch",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "backups": {
              "methods": {
                "list": {
                  "response": {
                    "$ref": "GoogleFirestoreAdminV1ListBackupsResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/backups",
                  "httpMethod": "GET",
                  "path": "v1/{+parent}/backups",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "firestore.projects.locations.backups.list",
                  "description": "Lists all the backups.",
                  "parameters": {
                    "parent": {
                      "description": "Required. The location to list backups from. Format is `projects/{project}/locations/{location}`. Use `{location} = '-'` to list backups from all locations for the given project. This allows listing backups from a single location or from all locations.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ]
                },
                "get": {
                  "id": "firestore.projects.locations.backups.get",
                  "description": "Gets information about a backup.",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "Required. Name of the backup to fetch. Format is `projects/{project}/locations/{location}/backups/{backup}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/backups/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "GoogleFirestoreAdminV1Backup"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/backups/{backupsId}",
                  "path": "v1/{+name}"
                },
                "delete": {
                  "id": "firestore.projects.locations.backups.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/backups/{backupsId}",
                  "path": "v1/{+name}",
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes a backup.",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "Required. Name of the backup to delete. format is `projects/{project}/locations/{location}/backups/{backup}`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/backups/[^/]+$"
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "list": {
              "flatPath": "v1/projects/{projectsId}/locations",
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "location": "path",
                  "description": "The resource that owns the locations collection, if applicable."
                },
                "filter": {
                  "type": "string",
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "location": "query"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of results to return. If not set, the service selects a default."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Lists information about the supported locations for this service.",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "id": "firestore.projects.locations.list",
              "httpMethod": "GET",
              "path": "v1/{+name}/locations",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "httpMethod": "GET",
              "description": "Gets information about a location.",
              "response": {
                "$ref": "Location"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "firestore.projects.locations.get",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "description": "Resource name for the location.",
                  "required": true,
                  "pattern": "^projects/[^/]+/locations/[^/]+$"
                }
              },
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}"
            }
          }
        },
        "databases": {
          "methods": {
            "list": {
              "path": "v1/{+parent}/databases",
              "flatPath": "v1/projects/{projectsId}/databases",
              "description": "List all the databases in the project.",
              "id": "firestore.projects.databases.list",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "description": "Required. A parent name of the form `projects/{project_id}`",
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "GoogleFirestoreAdminV1ListDatabasesResponse"
              }
            },
            "create": {
              "description": "Create a database.",
              "request": {
                "$ref": "GoogleFirestoreAdminV1Database"
              },
              "parameters": {
                "databaseId": {
                  "type": "string",
                  "location": "query",
                  "description": "Required. The ID to use for the database, which will become the final component of the database's resource name. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. \"(default)\" database id is also valid."
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "description": "Required. A parent name of the form `projects/{project_id}`",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                }
              },
              "path": "v1/{+parent}/databases",
              "id": "firestore.projects.databases.create",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "flatPath": "v1/projects/{projectsId}/databases",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              }
            },
            "restore": {
              "parameters": {
                "parent": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The project to restore the database in. Format is `projects/{project_id}`.",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/databases:restore",
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleFirestoreAdminV1RestoreDatabaseRequest"
              },
              "description": "Creates a new database by restoring from an existing backup. The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup. The long-running operation can be used to track the progress of the restore, with the Operation's metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the restore was successful. The new database is not readable or writeable until the LRO has completed.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "path": "v1/{+parent}/databases:restore",
              "id": "firestore.projects.databases.restore"
            },
            "patch": {
              "flatPath": "v1/projects/{projectsId}/databases/{databasesId}",
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "id": "firestore.projects.databases.patch",
              "description": "Updates a database.",
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "The resource name of the Database. Format: `projects/{project}/databases/{database}`",
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "required": true
                },
                "updateMask": {
                  "description": "The list of fields to be updated.",
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "GoogleFirestoreAdminV1Database"
              },
              "httpMethod": "PATCH",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "GoogleFirestoreAdminV1Database"
              },
              "path": "v1/{+name}",
              "description": "Gets information about a database.",
              "id": "firestore.projects.databases.get",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}`",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/projects/{projectsId}/databases/{databasesId}"
            },
            "importDocuments": {
              "flatPath": "v1/projects/{projectsId}/databases/{databasesId}:importDocuments",
              "id": "firestore.projects.databases.importDocuments",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:importDocuments",
              "description": "Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "request": {
                "$ref": "GoogleFirestoreAdminV1ImportDocumentsRequest"
              },
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "description": "Required. Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              }
            },
            "exportDocuments": {
              "httpMethod": "POST",
              "path": "v1/{+name}:exportDocuments",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "description": "Required. Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`."
                }
              },
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "id": "firestore.projects.databases.exportDocuments",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "flatPath": "v1/projects/{projectsId}/databases/{databasesId}:exportDocuments",
              "request": {
                "$ref": "GoogleFirestoreAdminV1ExportDocumentsRequest"
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. For more details on export behavior and output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import"
            },
            "delete": {
              "httpMethod": "DELETE",
              "id": "firestore.projects.databases.delete",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/projects/{projectsId}/databases/{databasesId}",
              "description": "Deletes a database.",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}`"
                },
                "etag": {
                  "location": "query",
                  "description": "The current etag of the Database. If an etag is provided and does not match the current etag of the database, deletion will be blocked and a FAILED_PRECONDITION error will be returned.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "response": {
                "$ref": "GoogleLongrunningOperation"
              }
            }
          },
          "resources": {
            "backupSchedules": {
              "methods": {
                "get": {
                  "httpMethod": "GET",
                  "id": "firestore.projects.databases.backupSchedules.get",
                  "response": {
                    "$ref": "GoogleFirestoreAdminV1BackupSchedule"
                  },
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$",
                      "type": "string",
                      "description": "Required. The name of the backup schedule. Format `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "description": "Gets information about a backup schedule.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/backupSchedules/{backupSchedulesId}"
                },
                "delete": {
                  "id": "firestore.projects.databases.backupSchedules.delete",
                  "httpMethod": "DELETE",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/backupSchedules/{backupSchedulesId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "description": "Deletes a backup schedule.",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of backup schedule. Format `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$",
                      "type": "string",
                      "required": true
                    }
                  }
                },
                "list": {
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/backupSchedules",
                  "path": "v1/{+parent}/backupSchedules",
                  "id": "firestore.projects.databases.backupSchedules.list",
                  "description": "List backup schedules.",
                  "response": {
                    "$ref": "GoogleFirestoreAdminV1ListBackupSchedulesResponse"
                  },
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "required": true,
                      "description": "Required. The parent database. Format is `projects/{project}/databases/{database}`.",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ]
                },
                "patch": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "path": "v1/{+name}",
                  "description": "Updates a backup schedule.",
                  "response": {
                    "$ref": "GoogleFirestoreAdminV1BackupSchedule"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "firestore.projects.databases.backupSchedules.patch",
                  "httpMethod": "PATCH",
                  "request": {
                    "$ref": "GoogleFirestoreAdminV1BackupSchedule"
                  },
                  "parameters": {
                    "name": {
                      "description": "Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$"
                    },
                    "updateMask": {
                      "type": "string",
                      "format": "google-fieldmask",
                      "description": "The list of fields to be updated.",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/backupSchedules/{backupSchedulesId}"
                },
                "create": {
                  "httpMethod": "POST",
                  "id": "firestore.projects.databases.backupSchedules.create",
                  "response": {
                    "$ref": "GoogleFirestoreAdminV1BackupSchedule"
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/backupSchedules",
                  "description": "Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule with retention up to 7 days and one weekly backup schedule with retention up to 14 weeks.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "request": {
                    "$ref": "GoogleFirestoreAdminV1BackupSchedule"
                  },
                  "path": "v1/{+parent}/backupSchedules",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "Required. The parent database. Format `projects/{project}/databases/{database}`",
                      "pattern": "^projects/[^/]+/databases/[^/]+$"
                    }
                  }
                }
              }
            },
            "documents": {
              "methods": {
                "list": {
                  "description": "Lists documents.",
                  "parameters": {
                    "orderBy": {
                      "description": "Optional. The optional ordering of the documents to return. For example: `priority desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When absent, documents are ordered based on `__name__ ASC`.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    },
                    "showMissing": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If the list should show missing documents. A document is missing if it does not exist, but there are sub-documents nested underneath it. When true, such missing documents will be returned with a key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may not specify `where` or `order_by`."
                    },
                    "mask.fieldPaths": {
                      "location": "query",
                      "type": "string",
                      "repeated": true,
                      "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference."
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must match the values set in the request that generated the page token.",
                      "type": "string"
                    },
                    "collectionId": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`. This is optional, and when not provided, Firestore will list documents from all collections under the provided `parent`."
                    },
                    "readTime": {
                      "description": "Perform the read at the provided time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
                      "type": "string",
                      "location": "query",
                      "format": "google-datetime"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Optional. The maximum number of documents to return in a single response. Firestore may return fewer than this value.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "transaction": {
                      "type": "string",
                      "format": "byte",
                      "description": "Perform the read as part of an already active transaction.",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}/{collectionId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameterOrder": [
                    "parent",
                    "collectionId"
                  ],
                  "httpMethod": "GET",
                  "id": "firestore.projects.databases.documents.list",
                  "path": "v1/{+parent}/{collectionId}",
                  "response": {
                    "$ref": "ListDocumentsResponse"
                  }
                },
                "commit": {
                  "response": {
                    "$ref": "CommitResponse"
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:commit",
                  "request": {
                    "$ref": "CommitRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "id": "firestore.projects.databases.documents.commit",
                  "description": "Commits a transaction, while optionally updating documents.",
                  "parameterOrder": [
                    "database"
                  ],
                  "parameters": {
                    "database": {
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+database}/documents:commit"
                },
                "partitionQuery": {
                  "request": {
                    "$ref": "PartitionQueryRequest"
                  },
                  "id": "firestore.projects.databases.documents.partitionQuery",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "PartitionQueryResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents`. Document resource names are not supported; only database resource names can be specified."
                    }
                  },
                  "description": "Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results.",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:partitionQuery",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "path": "v1/{+parent}:partitionQuery"
                },
                "runAggregationQuery": {
                  "description": "Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ```",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "path": "v1/{+parent}:runAggregationQuery",
                  "request": {
                    "$ref": "RunAggregationQueryRequest"
                  },
                  "response": {
                    "$ref": "RunAggregationQueryResponse"
                  },
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "id": "firestore.projects.databases.documents.runAggregationQuery",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:runAggregationQuery",
                  "httpMethod": "POST"
                },
                "batchGet": {
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:batchGet",
                  "description": "Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.",
                  "parameterOrder": [
                    "database"
                  ],
                  "response": {
                    "$ref": "BatchGetDocumentsResponse"
                  },
                  "parameters": {
                    "database": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "required": true
                    }
                  },
                  "request": {
                    "$ref": "BatchGetDocumentsRequest"
                  },
                  "path": "v1/{+database}/documents:batchGet",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "id": "firestore.projects.databases.documents.batchGet"
                },
                "batchWrite": {
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:batchWrite",
                  "id": "firestore.projects.databases.documents.batchWrite",
                  "request": {
                    "$ref": "BatchWriteRequest"
                  },
                  "parameterOrder": [
                    "database"
                  ],
                  "parameters": {
                    "database": {
                      "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+$"
                    }
                  },
                  "httpMethod": "POST",
                  "description": "Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.",
                  "response": {
                    "$ref": "BatchWriteResponse"
                  },
                  "path": "v1/{+database}/documents:batchWrite",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ]
                },
                "beginTransaction": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "BeginTransactionRequest"
                  },
                  "path": "v1/{+database}/documents:beginTransaction",
                  "response": {
                    "$ref": "BeginTransactionResponse"
                  },
                  "parameterOrder": [
                    "database"
                  ],
                  "id": "firestore.projects.databases.documents.beginTransaction",
                  "description": "Starts a new transaction.",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:beginTransaction",
                  "parameters": {
                    "database": {
                      "required": true,
                      "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "type": "string"
                    }
                  }
                },
                "createDocument": {
                  "httpMethod": "POST",
                  "description": "Creates a new document.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "request": {
                    "$ref": "Document"
                  },
                  "path": "v1/{+parent}/{collectionId}",
                  "id": "firestore.projects.databases.documents.createDocument",
                  "parameterOrder": [
                    "parent",
                    "collectionId"
                  ],
                  "response": {
                    "$ref": "Document"
                  },
                  "parameters": {
                    "mask.fieldPaths": {
                      "type": "string",
                      "location": "query",
                      "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
                      "repeated": true
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/.*$",
                      "required": true,
                      "description": "Required. The parent resource. For example: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`",
                      "location": "path",
                      "type": "string"
                    },
                    "documentId": {
                      "type": "string",
                      "description": "The client-assigned document ID to use for this document. Optional. If not specified, an ID will be assigned by the service.",
                      "location": "query"
                    },
                    "collectionId": {
                      "location": "path",
                      "description": "Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{collectionId}"
                },
                "patch": {
                  "description": "Updates or inserts a document.",
                  "request": {
                    "$ref": "Document"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "description": "The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "required": true,
                      "location": "path"
                    },
                    "currentDocument.exists": {
                      "description": "When set to `true`, the target document must exist. When set to `false`, the target document must not exist.",
                      "type": "boolean",
                      "location": "query"
                    },
                    "updateMask.fieldPaths": {
                      "location": "query",
                      "repeated": true,
                      "type": "string",
                      "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference."
                    },
                    "currentDocument.updateTime": {
                      "format": "google-datetime",
                      "type": "string",
                      "description": "When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.",
                      "location": "query"
                    },
                    "mask.fieldPaths": {
                      "repeated": true,
                      "type": "string",
                      "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
                      "location": "query"
                    }
                  },
                  "httpMethod": "PATCH",
                  "id": "firestore.projects.databases.documents.patch",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
                  "response": {
                    "$ref": "Document"
                  }
                },
                "listCollectionIds": {
                  "description": "Lists all the collection IDs underneath a document.",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "request": {
                    "$ref": "ListCollectionIdsRequest"
                  },
                  "id": "firestore.projects.databases.documents.listCollectionIds",
                  "response": {
                    "$ref": "ListCollectionIdsResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:listCollectionIds",
                  "path": "v1/{+parent}:listCollectionIds",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "location": "path",
                      "type": "string",
                      "description": "Required. The parent document. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
                      "required": true
                    }
                  }
                },
                "rollback": {
                  "description": "Rolls back a transaction.",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "firestore.projects.databases.documents.rollback",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "path": "v1/{+database}/documents:rollback",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:rollback",
                  "parameterOrder": [
                    "database"
                  ],
                  "parameters": {
                    "database": {
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "request": {
                    "$ref": "RollbackRequest"
                  }
                },
                "listDocuments": {
                  "response": {
                    "$ref": "ListDocumentsResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{collectionId}",
                  "httpMethod": "GET",
                  "path": "v1/{+parent}/{collectionId}",
                  "parameterOrder": [
                    "parent",
                    "collectionId"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "description": "Lists documents.",
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "description": "Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must match the values set in the request that generated the page token.",
                      "type": "string"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "Optional. The maximum number of documents to return in a single response. Firestore may return fewer than this value.",
                      "type": "integer",
                      "location": "query"
                    },
                    "mask.fieldPaths": {
                      "repeated": true,
                      "location": "query",
                      "type": "string",
                      "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference."
                    },
                    "collectionId": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`. This is optional, and when not provided, Firestore will list documents from all collections under the provided `parent`."
                    },
                    "parent": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents$",
                      "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`"
                    },
                    "readTime": {
                      "location": "query",
                      "type": "string",
                      "description": "Perform the read at the provided time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
                      "format": "google-datetime"
                    },
                    "transaction": {
                      "location": "query",
                      "description": "Perform the read as part of an already active transaction.",
                      "format": "byte",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Optional. The optional ordering of the documents to return. For example: `priority desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When absent, documents are ordered based on `__name__ ASC`.",
                      "type": "string",
                      "location": "query"
                    },
                    "showMissing": {
                      "type": "boolean",
                      "description": "If the list should show missing documents. A document is missing if it does not exist, but there are sub-documents nested underneath it. When true, such missing documents will be returned with a key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may not specify `where` or `order_by`.",
                      "location": "query"
                    }
                  },
                  "id": "firestore.projects.databases.documents.listDocuments"
                },
                "runQuery": {
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:runQuery",
                  "path": "v1/{+parent}:runQuery",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "id": "firestore.projects.databases.documents.runQuery",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "required": true
                    }
                  },
                  "description": "Runs a query.",
                  "request": {
                    "$ref": "RunQueryRequest"
                  },
                  "response": {
                    "$ref": "RunQueryResponse"
                  }
                },
                "listen": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:listen",
                  "parameterOrder": [
                    "database"
                  ],
                  "id": "firestore.projects.databases.documents.listen",
                  "response": {
                    "$ref": "ListenResponse"
                  },
                  "parameters": {
                    "database": {
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
                      "location": "path"
                    }
                  },
                  "path": "v1/{+database}/documents:listen",
                  "request": {
                    "$ref": "ListenRequest"
                  },
                  "description": "Listens to changes. This method is only available via gRPC or WebChannel (not REST).",
                  "httpMethod": "POST"
                },
                "delete": {
                  "description": "Deletes a document.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "currentDocument.updateTime": {
                      "format": "google-datetime",
                      "description": "When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.",
                      "location": "query",
                      "type": "string"
                    },
                    "currentDocument.exists": {
                      "location": "query",
                      "description": "When set to `true`, the target document must exist. When set to `false`, the target document must not exist.",
                      "type": "boolean"
                    },
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "description": "Required. The resource name of the Document to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`."
                    }
                  },
                  "httpMethod": "DELETE",
                  "id": "firestore.projects.databases.documents.delete",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
                  "path": "v1/{+name}"
                },
                "write": {
                  "httpMethod": "POST",
                  "path": "v1/{+database}/documents:write",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "id": "firestore.projects.databases.documents.write",
                  "description": "Streams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST).",
                  "parameters": {
                    "database": {
                      "type": "string",
                      "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`. This is only required in the first message.",
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "WriteResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents:write",
                  "parameterOrder": [
                    "database"
                  ],
                  "request": {
                    "$ref": "WriteRequest"
                  }
                },
                "get": {
                  "response": {
                    "$ref": "Document"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "description": "Gets a single document.",
                  "id": "firestore.projects.databases.documents.get",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
                  "parameters": {
                    "readTime": {
                      "type": "string",
                      "format": "google-datetime",
                      "description": "Reads the version of the document at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
                      "location": "query"
                    },
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
                      "description": "Required. The resource name of the Document to get. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`."
                    },
                    "mask.fieldPaths": {
                      "location": "query",
                      "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
                      "type": "string",
                      "repeated": true
                    },
                    "transaction": {
                      "format": "byte",
                      "type": "string",
                      "location": "query",
                      "description": "Reads the document in a transaction."
                    }
                  }
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "GoogleLongrunningOperation"
                  },
                  "id": "firestore.projects.databases.operations.get",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "The name of the operation resource."
                    }
                  },
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                },
                "delete": {
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource to be deleted.",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "id": "firestore.projects.databases.operations.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "cancel": {
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "GoogleLongrunningCancelOperationRequest"
                  },
                  "path": "v1/{+name}:cancel",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}:cancel",
                  "id": "firestore.projects.databases.operations.cancel",
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "list": {
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "id": "firestore.projects.databases.operations.list",
                  "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations",
                  "path": "v1/{+name}/operations",
                  "response": {
                    "$ref": "GoogleLongrunningListOperationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/datastore"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/databases/[^/]+$",
                      "required": true,
                      "description": "The name of the operation's parent resource.",
                      "location": "path",
                      "type": "string"
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The standard list page token.",
                      "location": "query"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "filter": {
                      "description": "The standard list filter.",
                      "location": "query",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "collectionGroups": {
              "resources": {
                "indexes": {
                  "methods": {
                    "list": {
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1ListIndexesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
                      "id": "firestore.projects.databases.collectionGroups.indexes.list",
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get the next page of results."
                        },
                        "pageSize": {
                          "location": "query",
                          "format": "int32",
                          "description": "The number of results to return.",
                          "type": "integer"
                        },
                        "parent": {
                          "description": "Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$"
                        },
                        "filter": {
                          "type": "string",
                          "location": "query",
                          "description": "The filter to apply to list results."
                        }
                      },
                      "path": "v1/{+parent}/indexes",
                      "description": "Lists composite indexes."
                    },
                    "delete": {
                      "httpMethod": "DELETE",
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
                      "path": "v1/{+name}",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "type": "string",
                          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "required": true,
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$"
                        }
                      },
                      "id": "firestore.projects.databases.collectionGroups.indexes.delete",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Deletes a composite index.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    },
                    "get": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
                          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
                      "description": "Gets a composite index.",
                      "path": "v1/{+name}",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "firestore.projects.databases.collectionGroups.indexes.get",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1Index"
                      }
                    },
                    "create": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "description": "Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.",
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1Index"
                      },
                      "parameters": {
                        "parent": {
                          "description": "Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "path": "v1/{+parent}/indexes",
                      "httpMethod": "POST",
                      "id": "firestore.projects.databases.collectionGroups.indexes.create"
                    }
                  }
                },
                "fields": {
                  "methods": {
                    "patch": {
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "httpMethod": "PATCH",
                      "id": "firestore.projects.databases.collectionGroups.fields.patch",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "description": "Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: \"index_config\" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.",
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Required. A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\\`address.city\\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\\`*\\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.",
                          "required": true,
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "location": "path",
                          "type": "string"
                        },
                        "updateMask": {
                          "location": "query",
                          "type": "string",
                          "description": "A mask, relative to the field. If specified, only configuration specified by this field_mask will be updated in the field.",
                          "format": "google-fieldmask"
                        }
                      },
                      "path": "v1/{+name}",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1Field"
                      }
                    },
                    "list": {
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields",
                      "id": "firestore.projects.databases.collectionGroups.fields.list",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1ListFieldsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ],
                      "path": "v1/{+parent}/fields",
                      "httpMethod": "GET",
                      "description": "Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false or `ttlConfig:*`.",
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "description": "Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "required": true
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get the next page of results.",
                          "location": "query"
                        },
                        "filter": {
                          "type": "string",
                          "description": "The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with a filter that includes `indexConfig.usesAncestorConfig:false` .",
                          "location": "query"
                        },
                        "pageSize": {
                          "location": "query",
                          "type": "integer",
                          "description": "The number of results to return.",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ]
                    },
                    "get": {
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
                      "path": "v1/{+name}",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`",
                          "location": "path",
                          "type": "string",
                          "required": true
                        }
                      },
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1Field"
                      },
                      "id": "firestore.projects.databases.collectionGroups.fields.get",
                      "description": "Gets the metadata and configuration for a Field.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://firestore.googleapis.com/",
  "documentationLink": "https://cloud.google.com/firestore",
  "mtlsRootUrl": "https://firestore.mtls.googleapis.com/",
  "schemas": {
    "GoogleFirestoreAdminV1Stats": {
      "properties": {
        "sizeBytes": {
          "format": "int64",
          "description": "Output only. Summation of the size of all documents and index entries in the backup, measured in bytes.",
          "type": "string",
          "readOnly": true
        },
        "indexCount": {
          "type": "string",
          "format": "int64",
          "readOnly": true,
          "description": "Output only. The total number of index entries contained in the backup."
        },
        "documentCount": {
          "format": "int64",
          "readOnly": true,
          "type": "string",
          "description": "Output only. The total number of documents contained in the backup."
        }
      },
      "description": "Backup specific statistics.",
      "id": "GoogleFirestoreAdminV1Stats",
      "type": "object"
    },
    "CompositeFilter": {
      "type": "object",
      "properties": {
        "op": {
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "AND",
            "OR"
          ],
          "description": "The operator for combining multiple filters.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Documents are required to satisfy all of the combined filters.",
            "Documents are required to satisfy at least one of the combined filters."
          ]
        },
        "filters": {
          "items": {
            "$ref": "Filter"
          },
          "description": "The list of filters to combine. Requires: * At least one filter is present.",
          "type": "array"
        }
      },
      "description": "A filter that merges multiple other filters using the given operator.",
      "id": "CompositeFilter"
    },
    "GoogleFirestoreAdminV1Field": {
      "properties": {
        "ttlConfig": {
          "description": "The TTL configuration for this `Field`. Setting or unsetting this will enable or disable the TTL for documents that have this `Field`.",
          "$ref": "GoogleFirestoreAdminV1TtlConfig"
        },
        "indexConfig": {
          "description": "The index configuration for this field. If unset, field indexing will revert to the configuration defined by the `ancestor_field`. To explicitly remove all indexes for this field, specify an index config with an empty list of indexes.",
          "$ref": "GoogleFirestoreAdminV1IndexConfig"
        },
        "name": {
          "description": "Required. A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\\`address.city\\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\\`*\\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.",
          "type": "string"
        }
      },
      "id": "GoogleFirestoreAdminV1Field",
      "description": "Represents a single field in the database. Fields are grouped by their \"Collection Group\", which represent all collections in the database with the same id.",
      "type": "object"
    },
    "WriteResult": {
      "id": "WriteResult",
      "type": "object",
      "properties": {
        "updateTime": {
          "description": "The last update time of the document after applying the write. Not set after a `delete`. If the write did not actually change the document, this will be the previous update_time.",
          "format": "google-datetime",
          "type": "string"
        },
        "transformResults": {
          "description": "The results of applying each DocumentTransform.FieldTransform, in the same order.",
          "type": "array",
          "items": {
            "$ref": "Value"
          }
        }
      },
      "description": "The result of applying a write."
    },
    "Document": {
      "type": "object",
      "description": "A Firestore document. Must not exceed 1 MiB - 4 bytes.",
      "id": "Document",
      "properties": {
        "updateTime": {
          "description": "Output only. The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.",
          "format": "google-datetime",
          "type": "string"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "Value"
          }
        },
        "name": {
          "type": "string",
          "description": "The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`."
        }
      }
    },
    "Value": {
      "description": "A message that can hold any of the supported value types.",
      "type": "object",
      "id": "Value",
      "properties": {
        "arrayValue": {
          "description": "An array value. Cannot directly contain another array value, though can contain an map which contains another array.",
          "$ref": "ArrayValue"
        },
        "bytesValue": {
          "format": "byte",
          "description": "A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.",
          "type": "string"
        },
        "booleanValue": {
          "description": "A boolean value.",
          "type": "boolean"
        },
        "stringValue": {
          "description": "A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.",
          "type": "string"
        },
        "geoPointValue": {
          "description": "A geo point value representing a point on the surface of Earth.",
          "$ref": "LatLng"
        },
        "timestampValue": {
          "description": "A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.",
          "type": "string",
          "format": "google-datetime"
        },
        "mapValue": {
          "description": "A map value.",
          "$ref": "MapValue"
        },
        "integerValue": {
          "format": "int64",
          "type": "string",
          "description": "An integer value."
        },
        "doubleValue": {
          "type": "number",
          "format": "double",
          "description": "A double value."
        },
        "referenceValue": {
          "type": "string",
          "description": "A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`."
        },
        "nullValue": {
          "enumDescriptions": [
            "Null value."
          ],
          "enum": [
            "NULL_VALUE"
          ],
          "description": "A null value.",
          "type": "string"
        }
      }
    },
    "TransactionOptions": {
      "type": "object",
      "id": "TransactionOptions",
      "properties": {
        "readWrite": {
          "description": "The transaction can be used for both read and write operations.",
          "$ref": "ReadWrite"
        },
        "readOnly": {
          "description": "The transaction can only be used for read operations.",
          "$ref": "ReadOnly"
        }
      },
      "description": "Options for creating a new transaction."
    },
    "Cursor": {
      "description": "A position in a query result set.",
      "id": "Cursor",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "Value"
          },
          "description": "The values that represent a position, in the order they appear in the order by clause of a query. Can contain fewer values than specified in the order by clause."
        },
        "before": {
          "type": "boolean",
          "description": "If the position is just before or just after the given values, relative to the sort order defined by the query."
        }
      },
      "type": "object"
    },
    "RollbackRequest": {
      "properties": {
        "transaction": {
          "description": "Required. The transaction to roll back.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "The request for Firestore.Rollback.",
      "id": "RollbackRequest",
      "type": "object"
    },
    "ListLocationsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "Location"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations."
    },
    "ReadWrite": {
      "id": "ReadWrite",
      "properties": {
        "retryTransaction": {
          "description": "An optional transaction to retry.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Options for a transaction that can be used to read and write documents. Firestore does not allow 3rd party auth requests to create read-write. transactions."
    },
    "FieldFilter": {
      "properties": {
        "value": {
          "$ref": "Value",
          "description": "The value to compare to."
        },
        "field": {
          "description": "The field to filter by.",
          "$ref": "FieldReference"
        },
        "op": {
          "description": "The operator to filter by.",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "EQUAL",
            "NOT_EQUAL",
            "ARRAY_CONTAINS",
            "IN",
            "ARRAY_CONTAINS_ANY",
            "NOT_IN"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The given `field` is less than the given `value`. Requires: * That `field` come first in `order_by`.",
            "The given `field` is less than or equal to the given `value`. Requires: * That `field` come first in `order_by`.",
            "The given `field` is greater than the given `value`. Requires: * That `field` come first in `order_by`.",
            "The given `field` is greater than or equal to the given `value`. Requires: * That `field` come first in `order_by`.",
            "The given `field` is equal to the given `value`.",
            "The given `field` is not equal to the given `value`. Requires: * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`.",
            "The given `field` is an array that contains the given `value`.",
            "The given `field` is equal to at least one value in the given array. Requires: * That `value` is a non-empty `ArrayValue`, subject to disjunction limits. * No `NOT_IN` filters in the same query.",
            "The given `field` is an array that contains any of the values in the given array. Requires: * That `value` is a non-empty `ArrayValue`, subject to disjunction limits. * No other `ARRAY_CONTAINS_ANY` filters within the same disjunction. * No `NOT_IN` filters in the same query.",
            "The value of the `field` is not in the given array. Requires: * That `value` is a non-empty `ArrayValue` with at most 10 values. * No other `OR`, `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`, `NOT_EQUAL`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`."
          ],
          "type": "string"
        }
      },
      "type": "object",
      "description": "A filter on a specific field.",
      "id": "FieldFilter"
    },
    "GoogleFirestoreAdminV1Database": {
      "id": "GoogleFirestoreAdminV1Database",
      "properties": {
        "keyPrefix": {
          "type": "string",
          "description": "Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id (\"~\") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).",
          "readOnly": true
        },
        "uid": {
          "type": "string",
          "description": "Output only. The system-generated UUID4 for this Database.",
          "readOnly": true
        },
        "etag": {
          "type": "string",
          "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding."
        },
        "concurrencyMode": {
          "type": "string",
          "enum": [
            "CONCURRENCY_MODE_UNSPECIFIED",
            "OPTIMISTIC",
            "PESSIMISTIC",
            "OPTIMISTIC_WITH_ENTITY_GROUPS"
          ],
          "description": "The concurrency control mode to use for this database.",
          "enumDescriptions": [
            "Not used.",
            "Use optimistic concurrency control by default. This mode is available for Cloud Firestore databases.",
            "Use pessimistic concurrency control by default. This mode is available for Cloud Firestore databases. This is the default setting for Cloud Firestore.",
            "Use optimistic concurrency control with entity groups by default. This is the only available mode for Cloud Datastore. This mode is also available for Cloud Firestore with Datastore Mode but is not recommended."
          ]
        },
        "earliestVersionTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name of the Database. Format: `projects/{project}/databases/{database}`"
        },
        "updateTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database."
        },
        "versionRetentionPeriod": {
          "readOnly": true,
          "type": "string",
          "format": "google-duration",
          "description": "Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour."
        },
        "appEngineIntegrationMode": {
          "type": "string",
          "enum": [
            "APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED",
            "ENABLED",
            "DISABLED"
          ],
          "description": "The App Engine integration mode to use for this database.",
          "enumDescriptions": [
            "Not used.",
            "If an App Engine application exists in the same region as this database, App Engine configuration will impact this database. This includes disabling of the application & database, as well as disabling writes to the database.",
            "App Engine has no effect on the ability of this database to serve requests. This is the default setting for databases created with the Firestore API."
          ]
        },
        "locationId": {
          "description": "The location of the database. Available databases are listed at https://cloud.google.com/firestore/docs/locations.",
          "type": "string"
        },
        "deleteProtectionState": {
          "type": "string",
          "description": "State of delete protection for the database.",
          "enumDescriptions": [
            "The default value. Delete protection type is not specified",
            "Delete protection is disabled",
            "Delete protection is enabled"
          ],
          "enum": [
            "DELETE_PROTECTION_STATE_UNSPECIFIED",
            "DELETE_PROTECTION_DISABLED",
            "DELETE_PROTECTION_ENABLED"
          ]
        },
        "pointInTimeRecoveryEnablement": {
          "type": "string",
          "enumDescriptions": [
            "Not used.",
            "Reads are supported on selected versions of the data from within the past 7 days: * Reads against any timestamp within the past hour * Reads against 1-minute snapshots beyond 1 hour and within 7 days `version_retention_period` and `earliest_version_time` can be used to determine the supported versions.",
            "Reads are supported on any version of the data from within the past 1 hour."
          ],
          "enum": [
            "POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED",
            "POINT_IN_TIME_RECOVERY_ENABLED",
            "POINT_IN_TIME_RECOVERY_DISABLED"
          ],
          "description": "Whether to enable the PITR feature on this database."
        },
        "createTime": {
          "description": "Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_TYPE_UNSPECIFIED",
            "FIRESTORE_NATIVE",
            "DATASTORE_MODE"
          ],
          "description": "The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.",
          "enumDescriptions": [
            "The default value. This value is used if the database type is omitted.",
            "Firestore Native Mode",
            "Firestore in Datastore Mode."
          ]
        }
      },
      "description": "A Cloud Firestore Database.",
      "type": "object"
    },
    "DocumentMask": {
      "type": "object",
      "properties": {
        "fieldPaths": {
          "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "DocumentMask",
      "description": "A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value."
    },
    "TargetChange": {
      "id": "TargetChange",
      "properties": {
        "readTime": {
          "description": "The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.",
          "format": "google-datetime",
          "type": "string"
        },
        "targetChangeType": {
          "type": "string",
          "enum": [
            "NO_CHANGE",
            "ADD",
            "REMOVE",
            "CURRENT",
            "RESET"
          ],
          "enumDescriptions": [
            "No change has occurred. Used only to send an updated `resume_token`.",
            "The targets have been added.",
            "The targets have been removed.",
            "The targets reflect all changes committed before the targets were added to the stream. This will be sent after or with a `read_time` that is greater than or equal to the time at which the targets were added. Listeners can wait for this change if read-after-write semantics are desired.",
            "The targets have been reset, and a new initial state for the targets will be returned in subsequent changes. After the initial state is complete, `CURRENT` will be returned even if the target was previously indicated to be `CURRENT`."
          ],
          "description": "The type of change that occurred."
        },
        "targetIds": {
          "description": "The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "cause": {
          "$ref": "Status",
          "description": "The error that resulted in this change, if applicable."
        },
        "resumeToken": {
          "description": "A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Targets being watched have changed.",
      "type": "object"
    },
    "GoogleFirestoreAdminV1Progress": {
      "properties": {
        "estimatedWork": {
          "format": "int64",
          "type": "string",
          "description": "The amount of work estimated."
        },
        "completedWork": {
          "format": "int64",
          "description": "The amount of work completed.",
          "type": "string"
        }
      },
      "id": "GoogleFirestoreAdminV1Progress",
      "description": "Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.",
      "type": "object"
    },
    "CommitRequest": {
      "type": "object",
      "properties": {
        "writes": {
          "type": "array",
          "description": "The writes to apply. Always executed atomically and in order.",
          "items": {
            "$ref": "Write"
          }
        },
        "transaction": {
          "description": "If set, applies all writes in this transaction, and commits it.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "The request for Firestore.Commit.",
      "id": "CommitRequest"
    },
    "Aggregation": {
      "id": "Aggregation",
      "properties": {
        "avg": {
          "$ref": "Avg",
          "description": "Average aggregator."
        },
        "sum": {
          "$ref": "Sum",
          "description": "Sum aggregator."
        },
        "alias": {
          "description": "Optional. Optional name of the field to store the result of the aggregation into. If not provided, Firestore will pick a default name following the format `field_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS field_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS field_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to document field name limitations.",
          "type": "string"
        },
        "count": {
          "description": "Count aggregator.",
          "$ref": "Count"
        }
      },
      "description": "Defines an aggregation that produces a single result.",
      "type": "object"
    },
    "GoogleFirestoreAdminV1ListFieldsResponse": {
      "id": "GoogleFirestoreAdminV1ListFieldsResponse",
      "properties": {
        "fields": {
          "description": "The requested fields.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1Field"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A page token that may be used to request another page of results. If blank, this is the last page.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The response for FirestoreAdmin.ListFields."
    },
    "FieldReference": {
      "description": "A reference to a field in a document, ex: `stats.operations`.",
      "id": "FieldReference",
      "properties": {
        "fieldPath": {
          "type": "string",
          "description": "A reference to a field in a document. Requires: * MUST be a dot-delimited (`.`) string of segments, where each segment conforms to document field name limitations."
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1ListDatabasesResponse": {
      "id": "GoogleFirestoreAdminV1ListDatabasesResponse",
      "type": "object",
      "description": "The list of databases for a project.",
      "properties": {
        "databases": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1Database"
          },
          "type": "array",
          "description": "The databases in the project."
        }
      }
    },
    "ReadOnly": {
      "description": "Options for a transaction that can only be used to read documents.",
      "id": "ReadOnly",
      "type": "object",
      "properties": {
        "readTime": {
          "description": "Reads documents at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "GoogleFirestoreAdminV1TtlConfig": {
      "id": "GoogleFirestoreAdminV1TtlConfig",
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACTIVE",
            "NEEDS_REPAIR"
          ],
          "enumDescriptions": [
            "The state is unspecified or unknown.",
            "The TTL is being applied. There is an active long-running operation to track the change. Newly written documents will have TTLs applied as requested. Requested TTLs on existing documents are still being processed. When TTLs on all existing documents have been processed, the state will move to 'ACTIVE'.",
            "The TTL is active for all documents.",
            "The TTL configuration could not be enabled for all existing documents. Newly written documents will continue to have their TTL applied. The LRO returned when last attempting to enable TTL for this `Field` has failed, and may have more details."
          ],
          "readOnly": true,
          "description": "Output only. The state of the TTL configuration.",
          "type": "string"
        }
      },
      "description": "The TTL (time-to-live) configuration for documents that have this `Field` set. Storing a timestamp value into a TTL-enabled field will be treated as the document's absolute expiration time. Timestamp values in the past indicate that the document is eligible for immediate expiration. Using any other data type or leaving the field absent will disable expiration for the individual document."
    },
    "GoogleFirestoreAdminV1FieldOperationMetadata": {
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.UpdateField.",
      "id": "GoogleFirestoreAdminV1FieldOperationMetadata",
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time this operation completed. Will be unset if operation still in progress."
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation started."
        },
        "field": {
          "description": "The field resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`",
          "type": "string"
        },
        "ttlConfigDelta": {
          "$ref": "GoogleFirestoreAdminV1TtlConfigDelta",
          "description": "Describes the deltas of TTL configuration."
        },
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "indexConfigDeltas": {
          "type": "array",
          "description": "A list of IndexConfigDelta, which describe the intent of this operation.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1IndexConfigDelta"
          }
        },
        "progressDocuments": {
          "description": "The progress, in documents, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "state": {
          "type": "string",
          "description": "The state of the operation.",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ],
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ]
        }
      }
    },
    "BatchGetDocumentsResponse": {
      "description": "The streamed response for Firestore.BatchGetDocuments.",
      "id": "BatchGetDocumentsResponse",
      "type": "object",
      "properties": {
        "readTime": {
          "description": "The time at which the document was read. This may be monotically increasing, in this case the previous documents in the result stream are guaranteed not to have changed between their read_time and this one.",
          "type": "string",
          "format": "google-datetime"
        },
        "missing": {
          "description": "A document name that was requested but does not exist. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
          "type": "string"
        },
        "transaction": {
          "description": "The transaction that was started as part of this request. Will only be set in the first response, and only if BatchGetDocumentsRequest.new_transaction was set in the request.",
          "format": "byte",
          "type": "string"
        },
        "found": {
          "$ref": "Document",
          "description": "A document that was requested."
        }
      }
    },
    "GoogleFirestoreAdminV1TtlConfigDelta": {
      "description": "Information about a TTL configuration change.",
      "id": "GoogleFirestoreAdminV1TtlConfigDelta",
      "properties": {
        "changeType": {
          "type": "string",
          "enum": [
            "CHANGE_TYPE_UNSPECIFIED",
            "ADD",
            "REMOVE"
          ],
          "description": "Specifies how the TTL configuration is changing.",
          "enumDescriptions": [
            "The type of change is not specified or known.",
            "The TTL config is being added.",
            "The TTL config is being removed."
          ]
        }
      },
      "type": "object"
    },
    "ListCollectionIdsRequest": {
      "type": "object",
      "properties": {
        "readTime": {
          "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "type": "string",
          "format": "google-datetime"
        },
        "pageSize": {
          "description": "The maximum number of results to return.",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "A page token. Must be a value from ListCollectionIdsResponse.",
          "type": "string"
        }
      },
      "description": "The request for Firestore.ListCollectionIds.",
      "id": "ListCollectionIdsRequest"
    },
    "GoogleFirestoreAdminV1RestoreDatabaseMetadata": {
      "type": "object",
      "description": "Metadata for the long-running operation from the RestoreDatabase request.",
      "properties": {
        "endTime": {
          "description": "The time the restore finished, unset for ongoing restores.",
          "format": "google-datetime",
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time the restore was started."
        },
        "database": {
          "description": "The name of the database being restored to.",
          "type": "string"
        },
        "progressPercentage": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "How far along the restore is as an estimated percentage of remaining time."
        },
        "operationState": {
          "type": "string",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The operation state of the restore.",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ]
        },
        "backup": {
          "description": "The name of the backup restoring from.",
          "type": "string"
        }
      },
      "id": "GoogleFirestoreAdminV1RestoreDatabaseMetadata"
    },
    "Precondition": {
      "description": "A precondition on a document, used for conditional operations.",
      "id": "Precondition",
      "properties": {
        "updateTime": {
          "description": "When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.",
          "type": "string",
          "format": "google-datetime"
        },
        "exists": {
          "description": "When set to `true`, the target document must exist. When set to `false`, the target document must not exist.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Order": {
      "properties": {
        "field": {
          "description": "The field to order by.",
          "$ref": "FieldReference"
        },
        "direction": {
          "enumDescriptions": [
            "Unspecified.",
            "Ascending.",
            "Descending."
          ],
          "type": "string",
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "description": "The direction to order by. Defaults to `ASCENDING`."
        }
      },
      "type": "object",
      "id": "Order",
      "description": "An order on a field."
    },
    "LatLng": {
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "type": "number",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "format": "double"
        }
      },
      "type": "object",
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "id": "LatLng"
    },
    "Write": {
      "description": "A write on a document.",
      "type": "object",
      "id": "Write",
      "properties": {
        "updateTransforms": {
          "items": {
            "$ref": "FieldTransform"
          },
          "type": "array",
          "description": "The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order."
        },
        "updateMask": {
          "description": "The fields to update in this write. This field can be set only when the operation is `update`. If the mask is not set for an `update` and the document exists, any existing data will be overwritten. If the mask is set and the document on the server has fields not covered by the mask, they are left unchanged. Fields referenced in the mask, but not present in the input document, are deleted from the document on the server. The field paths in this mask must not contain a reserved field name.",
          "$ref": "DocumentMask"
        },
        "delete": {
          "description": "A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
          "type": "string"
        },
        "transform": {
          "description": "Applies a transformation to a document.",
          "$ref": "DocumentTransform"
        },
        "update": {
          "description": "A document to write.",
          "$ref": "Document"
        },
        "currentDocument": {
          "description": "An optional precondition on the document. The write will fail if this is set and not met by the target document.",
          "$ref": "Precondition"
        }
      }
    },
    "UnaryFilter": {
      "properties": {
        "op": {
          "type": "string",
          "description": "The unary operator to apply.",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "IS_NAN",
            "IS_NULL",
            "IS_NOT_NAN",
            "IS_NOT_NULL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The given `field` is equal to `NaN`.",
            "The given `field` is equal to `NULL`.",
            "The given `field` is not equal to `NaN`. Requires: * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`.",
            "The given `field` is not equal to `NULL`. Requires: * A single `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`."
          ]
        },
        "field": {
          "description": "The field to which to apply the operator.",
          "$ref": "FieldReference"
        }
      },
      "description": "A filter with a single operand.",
      "id": "UnaryFilter",
      "type": "object"
    },
    "Target": {
      "type": "object",
      "description": "A specification of a set of documents to listen to.",
      "properties": {
        "readTime": {
          "format": "google-datetime",
          "description": "Start listening after a specific `read_time`. The client must know the state of matching documents at this time.",
          "type": "string"
        },
        "once": {
          "type": "boolean",
          "description": "If the target should be removed once it is current and consistent."
        },
        "resumeToken": {
          "description": "A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.",
          "type": "string",
          "format": "byte"
        },
        "documents": {
          "description": "A target specified by a set of document names.",
          "$ref": "DocumentsTarget"
        },
        "query": {
          "description": "A target specified by a query.",
          "$ref": "QueryTarget"
        },
        "targetId": {
          "type": "integer",
          "description": "The target ID that identifies the target on the stream. Must be a positive number and non-zero. If `target_id` is 0 (or unspecified), the server will assign an ID for this target and return that in a `TargetChange::ADD` event. Once a target with `target_id=0` is added, all subsequent targets must also have `target_id=0`. If an `AddTarget` request with `target_id != 0` is sent to the server after a target with `target_id=0` is added, the server will immediately send a response with a `TargetChange::Remove` event. Note that if the client sends multiple `AddTarget` requests without an ID, the order of IDs returned in `TargetChage.target_ids` are undefined. Therefore, clients should provide a target ID instead of relying on the server to assign one. If `target_id` is non-zero, there must not be an existing active target on this stream with the same ID.",
          "format": "int32"
        },
        "expectedCount": {
          "description": "The number of documents that last matched the query at the resume token or read time. This value is only relevant when a `resume_type` is provided. This value being present and greater than zero signals that the client wants `ExistenceFilter.unchanged_names` to be included in the response.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "Target"
    },
    "BatchWriteResponse": {
      "description": "The response from Firestore.BatchWrite.",
      "properties": {
        "status": {
          "type": "array",
          "items": {
            "$ref": "Status"
          },
          "description": "The status of applying the writes. This i-th write status corresponds to the i-th write in the request."
        },
        "writeResults": {
          "description": "The result of applying the writes. This i-th write result corresponds to the i-th write in the request.",
          "items": {
            "$ref": "WriteResult"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "BatchWriteResponse"
    },
    "GoogleFirestoreAdminV1Backup": {
      "id": "GoogleFirestoreAdminV1Backup",
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "NOT_AVAILABLE"
          ],
          "type": "string",
          "description": "Output only. The current state of the backup.",
          "readOnly": true,
          "enumDescriptions": [
            "The state is unspecified.",
            "The pending backup is still being created. Operations on the backup will be rejected in this state.",
            "The backup is complete and ready to use.",
            "The backup is not available at this moment."
          ]
        },
        "snapshotTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The backup contains an externally consistent copy of the database at this time."
        },
        "database": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of the Firestore database that the backup is from. Format is `projects/{project}/databases/{database}`."
        },
        "databaseUid": {
          "description": "Output only. The system-generated UUID4 for the Firestore database that the backup is from.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Output only. The unique resource name of the Backup. Format is `projects/{project}/locations/{location}/backups/{backup}`.",
          "readOnly": true,
          "type": "string"
        },
        "expireTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The timestamp at which this backup expires.",
          "readOnly": true
        },
        "stats": {
          "readOnly": true,
          "$ref": "GoogleFirestoreAdminV1Stats",
          "description": "Output only. Statistics about the backup. This data only becomes available after the backup is fully materialized to secondary storage. This field will be empty till then."
        }
      },
      "description": "A Backup of a Cloud Firestore Database. The backup contains all documents and index configurations for the given database at a specific point in time.",
      "type": "object"
    },
    "GoogleFirestoreAdminV1WeeklyRecurrence": {
      "description": "Represents a recurring schedule that runs on a specified day of the week. The time zone is UTC.",
      "properties": {
        "day": {
          "description": "The day of week to run. DAY_OF_WEEK_UNSPECIFIED is not allowed.",
          "enumDescriptions": [
            "The day of the week is unspecified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ],
          "type": "string"
        }
      },
      "id": "GoogleFirestoreAdminV1WeeklyRecurrence",
      "type": "object"
    },
    "CollectionSelector": {
      "description": "A selection of a collection, such as `messages as m1`.",
      "properties": {
        "collectionId": {
          "description": "The collection ID. When set, selects only collections with this ID.",
          "type": "string"
        },
        "allDescendants": {
          "description": "When false, selects only collections that are immediate children of the `parent` specified in the containing `RunQueryRequest`. When true, selects all descendant collections.",
          "type": "boolean"
        }
      },
      "id": "CollectionSelector",
      "type": "object"
    },
    "WriteRequest": {
      "description": "The request for Firestore.Write. The first request creates a stream, or resumes an existing one from a token. When creating a new stream, the server replies with a response containing only an ID and a token, to use in the next request. When resuming a stream, the server first streams any responses later than the given token, then a response containing only an up-to-date token, to use in the next request.",
      "properties": {
        "streamId": {
          "type": "string",
          "description": "The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created."
        },
        "writes": {
          "description": "The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.",
          "type": "array",
          "items": {
            "$ref": "Write"
          }
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels associated with this write request.",
          "type": "object"
        },
        "streamToken": {
          "format": "byte",
          "type": "string",
          "description": "A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the `stream_id` field. Leave this field unset when creating a new stream."
        }
      },
      "id": "WriteRequest",
      "type": "object"
    },
    "DocumentsTarget": {
      "properties": {
        "documents": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided."
        }
      },
      "id": "DocumentsTarget",
      "description": "A target specified by a set of documents names.",
      "type": "object"
    },
    "ListenRequest": {
      "properties": {
        "labels": {
          "type": "object",
          "description": "Labels associated with this target change.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "addTarget": {
          "$ref": "Target",
          "description": "A target to add to this stream."
        },
        "removeTarget": {
          "format": "int32",
          "type": "integer",
          "description": "The ID of a target to remove from this stream."
        }
      },
      "description": "A request for Firestore.Listen",
      "id": "ListenRequest",
      "type": "object"
    },
    "StructuredAggregationQuery": {
      "id": "StructuredAggregationQuery",
      "description": "Firestore query for running an aggregation over a StructuredQuery.",
      "type": "object",
      "properties": {
        "structuredQuery": {
          "$ref": "StructuredQuery",
          "description": "Nested structured query."
        },
        "aggregations": {
          "items": {
            "$ref": "Aggregation"
          },
          "type": "array",
          "description": "Optional. Series of aggregations to apply over the results of the `structured_query`. Requires: * A minimum of one and maximum of five aggregations per query."
        }
      }
    },
    "GoogleFirestoreAdminV1UpdateDatabaseMetadata": {
      "description": "Metadata related to the update database operation.",
      "type": "object",
      "properties": {},
      "id": "GoogleFirestoreAdminV1UpdateDatabaseMetadata"
    },
    "Sum": {
      "type": "object",
      "properties": {
        "field": {
          "$ref": "FieldReference",
          "description": "The field to aggregate on."
        }
      },
      "id": "Sum",
      "description": "Sum of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers."
    },
    "DocumentTransform": {
      "properties": {
        "fieldTransforms": {
          "description": "The list of transformations to apply to the fields of the document, in order. This must not be empty.",
          "items": {
            "$ref": "FieldTransform"
          },
          "type": "array"
        },
        "document": {
          "description": "The name of the document to transform.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DocumentTransform",
      "description": "A transformation of a document."
    },
    "GoogleLongrunningOperation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        }
      },
      "id": "GoogleLongrunningOperation",
      "type": "object"
    },
    "GoogleFirestoreAdminV1ImportDocumentsMetadata": {
      "type": "object",
      "id": "GoogleFirestoreAdminV1ImportDocumentsMetadata",
      "properties": {
        "inputUriPrefix": {
          "type": "string",
          "description": "The location of the documents being imported."
        },
        "startTime": {
          "description": "The time this operation started.",
          "format": "google-datetime",
          "type": "string"
        },
        "collectionIds": {
          "type": "array",
          "description": "Which collection ids are being imported.",
          "items": {
            "type": "string"
          }
        },
        "progressBytes": {
          "description": "The progress, in bytes, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "progressDocuments": {
          "description": "The progress, in documents, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "operationState": {
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ],
          "description": "The state of the import operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "type": "string"
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation completed. Will be unset if operation still in progress."
        },
        "namespaceIds": {
          "type": "array",
          "description": "Which namespace ids are being imported.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.ImportDocuments."
    },
    "GoogleFirestoreAdminV1ExportDocumentsRequest": {
      "properties": {
        "snapshotTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp that corresponds to the version of the database to be exported. The timestamp must be rounded to the minute, in the past, and not older than 1 hour. If specified, then the exported documents will represent a consistent view of the database at the provided time. Otherwise, there are no guarantees about the consistency of the exported documents."
        },
        "namespaceIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "An empty list represents all namespaces. This is the preferred usage for databases that don't use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique."
        },
        "collectionIds": {
          "description": "Which collection ids to export. Unspecified means all collections.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outputUriPrefix": {
          "description": "The output URI. Currently only supports Google Cloud Storage URIs of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional Google Cloud Storage namespace path. When choosing a name, be sure to consider Google Cloud Storage naming guidelines: https://cloud.google.com/storage/docs/naming. If the URI is a bucket (without a namespace path), a prefix will be generated based on the start time.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The request for FirestoreAdmin.ExportDocuments.",
      "id": "GoogleFirestoreAdminV1ExportDocumentsRequest"
    },
    "RunQueryResponse": {
      "description": "The response for Firestore.RunQuery.",
      "properties": {
        "done": {
          "type": "boolean",
          "description": "If present, Firestore has completely finished the request and no more documents will be returned."
        },
        "readTime": {
          "type": "string",
          "description": "The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `document` will be sent, and this represents the time at which the query was run.",
          "format": "google-datetime"
        },
        "skippedResults": {
          "format": "int32",
          "type": "integer",
          "description": "The number of results that have been skipped due to an offset between the last response and the current response."
        },
        "transaction": {
          "description": "The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.",
          "type": "string",
          "format": "byte"
        },
        "document": {
          "$ref": "Document",
          "description": "A query result, not set when reporting partial progress."
        }
      },
      "id": "RunQueryResponse",
      "type": "object"
    },
    "MapValue": {
      "type": "object",
      "id": "MapValue",
      "properties": {
        "fields": {
          "description": "The map's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Value"
          }
        }
      },
      "description": "A map value."
    },
    "GoogleFirestoreAdminV1IndexConfigDelta": {
      "id": "GoogleFirestoreAdminV1IndexConfigDelta",
      "description": "Information about an index configuration change.",
      "type": "object",
      "properties": {
        "index": {
          "description": "The index being changed.",
          "$ref": "GoogleFirestoreAdminV1Index"
        },
        "changeType": {
          "description": "Specifies how the index is changing.",
          "enumDescriptions": [
            "The type of change is not specified or known.",
            "The single field index is being added.",
            "The single field index is being removed."
          ],
          "enum": [
            "CHANGE_TYPE_UNSPECIFIED",
            "ADD",
            "REMOVE"
          ],
          "type": "string"
        }
      }
    },
    "Filter": {
      "id": "Filter",
      "description": "A filter.",
      "properties": {
        "compositeFilter": {
          "$ref": "CompositeFilter",
          "description": "A composite filter."
        },
        "unaryFilter": {
          "$ref": "UnaryFilter",
          "description": "A filter that takes exactly one argument."
        },
        "fieldFilter": {
          "description": "A filter on a document field.",
          "$ref": "FieldFilter"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1ExportDocumentsResponse": {
      "id": "GoogleFirestoreAdminV1ExportDocumentsResponse",
      "type": "object",
      "description": "Returned in the google.longrunning.Operation response field.",
      "properties": {
        "outputUriPrefix": {
          "type": "string",
          "description": "Location of the output files. This can be used to begin an import into Cloud Firestore (this project or another project) after the operation completes successfully."
        }
      }
    },
    "BloomFilter": {
      "description": "A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter). The bloom filter hashes the entries with MD5 and treats the resulting 128-bit hash as 2 distinct 64-bit hash values, interpreted as unsigned integers using 2's complement encoding. These two hash values, named `h1` and `h2`, are then used to compute the `hash_count` hash values using the formula, starting at `i=0`: h(i) = h1 + (i * h2) These resulting values are then taken modulo the number of bits in the bloom filter to get the bits of the bloom filter to test for the given entry.",
      "properties": {
        "bits": {
          "$ref": "BitSequence",
          "description": "The bloom filter data."
        },
        "hashCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of hashes used by the algorithm."
        }
      },
      "id": "BloomFilter",
      "type": "object"
    },
    "RunAggregationQueryRequest": {
      "id": "RunAggregationQueryRequest",
      "description": "The request for Firestore.RunAggregationQuery.",
      "type": "object",
      "properties": {
        "newTransaction": {
          "$ref": "TransactionOptions",
          "description": "Starts a new transaction as part of the query, defaulting to read-only. The new transaction ID will be returned as the first response in the stream."
        },
        "transaction": {
          "type": "string",
          "description": "Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.",
          "format": "byte"
        },
        "readTime": {
          "description": "Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "format": "google-datetime",
          "type": "string"
        },
        "structuredAggregationQuery": {
          "description": "An aggregation query.",
          "$ref": "StructuredAggregationQuery"
        }
      }
    },
    "GoogleFirestoreAdminV1ListBackupSchedulesResponse": {
      "type": "object",
      "properties": {
        "backupSchedules": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1BackupSchedule"
          },
          "type": "array",
          "description": "List of all backup schedules."
        }
      },
      "description": "The response for FirestoreAdmin.ListBackupSchedules.",
      "id": "GoogleFirestoreAdminV1ListBackupSchedulesResponse"
    },
    "ListenResponse": {
      "description": "The response for Firestore.Listen.",
      "properties": {
        "documentChange": {
          "description": "A Document has changed.",
          "$ref": "DocumentChange"
        },
        "targetChange": {
          "$ref": "TargetChange",
          "description": "Targets have changed."
        },
        "documentRemove": {
          "description": "A Document has been removed from a target (because it is no longer relevant to that target).",
          "$ref": "DocumentRemove"
        },
        "documentDelete": {
          "$ref": "DocumentDelete",
          "description": "A Document has been deleted."
        },
        "filter": {
          "$ref": "ExistenceFilter",
          "description": "A filter to apply to the set of documents previously returned for the given target. Returned when documents may have been removed from the given target, but the exact documents are unknown."
        }
      },
      "id": "ListenResponse",
      "type": "object"
    },
    "Location": {
      "description": "A resource that represents a Google Cloud location.",
      "id": "Location",
      "properties": {
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1IndexConfig": {
      "id": "GoogleFirestoreAdminV1IndexConfig",
      "description": "The index configuration for this field.",
      "type": "object",
      "properties": {
        "reverting": {
          "description": "Output only When true, the `Field`'s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by `ancestor_field`, at which point `uses_ancestor_config` will be `true` and `reverting` will be `false`.",
          "type": "boolean"
        },
        "indexes": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1Index"
          },
          "description": "The indexes supported for this field.",
          "type": "array"
        },
        "usesAncestorConfig": {
          "type": "boolean",
          "description": "Output only. When true, the `Field`'s index configuration is set from the configuration specified by the `ancestor_field`. When false, the `Field`'s index configuration is defined explicitly."
        },
        "ancestorField": {
          "description": "Output only. Specifies the resource name of the `Field` from which this field's index configuration is set (when `uses_ancestor_config` is true), or from which it *would* be set if this field had no index configuration (when `uses_ancestor_config` is false).",
          "type": "string"
        }
      }
    },
    "RunQueryRequest": {
      "id": "RunQueryRequest",
      "properties": {
        "newTransaction": {
          "description": "Starts a new transaction and reads the documents. Defaults to a read-only transaction. The new transaction ID will be returned as the first response in the stream.",
          "$ref": "TransactionOptions"
        },
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days."
        },
        "transaction": {
          "format": "byte",
          "description": "Run the query within an already active transaction. The value here is the opaque transaction ID to execute the query in.",
          "type": "string"
        },
        "structuredQuery": {
          "$ref": "StructuredQuery",
          "description": "A structured query."
        }
      },
      "type": "object",
      "description": "The request for Firestore.RunQuery."
    },
    "GoogleFirestoreAdminV1DailyRecurrence": {
      "id": "GoogleFirestoreAdminV1DailyRecurrence",
      "type": "object",
      "description": "Represent a recurring schedule that runs at a specific time every day. The time zone is UTC.",
      "properties": {}
    },
    "BitSequence": {
      "type": "object",
      "id": "BitSequence",
      "properties": {
        "padding": {
          "type": "integer",
          "description": "The number of bits of the last byte in `bitmap` to ignore as \"padding\". If the length of `bitmap` is zero, then this value must be `0`. Otherwise, this value must be between 0 and 7, inclusive.",
          "format": "int32"
        },
        "bitmap": {
          "description": "The bytes that encode the bit sequence. May have a length of zero.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "A sequence of bits, encoded in a byte array. Each byte in the `bitmap` byte array stores 8 bits of the sequence. The only exception is the last byte, which may store 8 _or fewer_ bits. The `padding` defines the number of bits of the last byte to be ignored as \"padding\". The values of these \"padding\" bits are unspecified and must be ignored. To retrieve the first bit, bit 0, calculate: `(bitmap[0] & 0x01) != 0`. To retrieve the second bit, bit 1, calculate: `(bitmap[0] & 0x02) != 0`. To retrieve the third bit, bit 2, calculate: `(bitmap[0] & 0x04) != 0`. To retrieve the fourth bit, bit 3, calculate: `(bitmap[0] & 0x08) != 0`. To retrieve bit n, calculate: `(bitmap[n / 8] & (0x01 \u003c\u003c (n % 8))) != 0`. The \"size\" of a `BitSequence` (the number of bits it contains) is calculated by this formula: `(bitmap.length * 8) - padding`."
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1BackupSchedule": {
      "properties": {
        "updateTime": {
          "description": "Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "weeklyRecurrence": {
          "description": "For a schedule that runs weekly on a specific day and time.",
          "$ref": "GoogleFirestoreAdminV1WeeklyRecurrence"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`"
        },
        "retention": {
          "format": "google-duration",
          "type": "string",
          "description": "At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days."
        },
        "dailyRecurrence": {
          "description": "For a schedule that runs daily at a specified time.",
          "$ref": "GoogleFirestoreAdminV1DailyRecurrence"
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.",
          "format": "google-datetime"
        }
      },
      "id": "GoogleFirestoreAdminV1BackupSchedule",
      "description": "A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.",
      "type": "object"
    },
    "ArrayValue": {
      "id": "ArrayValue",
      "properties": {
        "values": {
          "description": "Values in the array.",
          "type": "array",
          "items": {
            "$ref": "Value"
          }
        }
      },
      "description": "An array value.",
      "type": "object"
    },
    "GoogleFirestoreAdminV1LocationMetadata": {
      "type": "object",
      "id": "GoogleFirestoreAdminV1LocationMetadata",
      "properties": {},
      "description": "The metadata message for google.cloud.location.Location.metadata."
    },
    "FieldTransform": {
      "properties": {
        "increment": {
          "description": "Adds the given value to the field's current value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If either of the given value or the current field value are doubles, both values will be interpreted as doubles. Double arithmetic and representation of double values follow IEEE 754 semantics. If there is positive/negative integer overflow, the field is resolved to the largest magnitude positive/negative integer.",
          "$ref": "Value"
        },
        "removeAllFromArray": {
          "description": "Remove all of the given elements from the array in the field. If the field is not an array, or if the field does not yet exist, it is set to the empty array. Equivalent numbers of the different types (e.g. 3L and 3.0) are considered equal when deciding whether an element should be removed. NaN is equal to NaN, and Null is equal to Null. This will remove all equivalent values if there are duplicates. The corresponding transform_result will be the null value.",
          "$ref": "ArrayValue"
        },
        "maximum": {
          "description": "Sets the field to the maximum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If a maximum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the larger operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and zero input value is always the stored value. The maximum of any numeric value x and NaN is NaN.",
          "$ref": "Value"
        },
        "appendMissingElements": {
          "description": "Append the given elements in order if they are not already present in the current field value. If the field is not an array, or if the field does not yet exist, it is first set to the empty array. Equivalent numbers of different types (e.g. 3L and 3.0) are considered equal when checking if a value is missing. NaN is equal to NaN, and Null is equal to Null. If the input contains multiple equivalent values, only the first will be considered. The corresponding transform_result will be the null value.",
          "$ref": "ArrayValue"
        },
        "fieldPath": {
          "type": "string",
          "description": "The path of the field. See Document.fields for the field path syntax reference."
        },
        "setToServerValue": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The time at which the server processed the request, with millisecond precision. If used on multiple fields (same or different documents) in a transaction, all the fields will get the same server timestamp."
          ],
          "enum": [
            "SERVER_VALUE_UNSPECIFIED",
            "REQUEST_TIME"
          ],
          "description": "Sets the field to the given server value."
        },
        "minimum": {
          "description": "Sets the field to the minimum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the input value. If a minimum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the smaller operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and zero input value is always the stored value. The minimum of any numeric value x and NaN is NaN.",
          "$ref": "Value"
        }
      },
      "description": "A transformation of a field of the document.",
      "type": "object",
      "id": "FieldTransform"
    },
    "DocumentChange": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "Document",
          "description": "The new state of the Document. If `mask` is set, contains only fields that were updated or added."
        },
        "removedTargetIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "A set of target IDs for targets that no longer match this document.",
          "type": "array"
        },
        "targetIds": {
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array",
          "description": "A set of target IDs of targets that match this document."
        }
      },
      "description": "A Document has changed. May be the result of multiple writes, including deletes, that ultimately resulted in a new value for the Document. Multiple DocumentChange messages may be returned for the same logical change, if multiple targets are affected.",
      "id": "DocumentChange"
    },
    "PartitionQueryRequest": {
      "id": "PartitionQueryRequest",
      "properties": {
        "partitionCount": {
          "type": "string",
          "format": "int64",
          "description": "The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available."
        },
        "structuredQuery": {
          "description": "A structured query. Query must specify collection with all descendants and be ordered by name ascending. Other filters, order bys, limits, offsets, and start/end cursors are not supported.",
          "$ref": "StructuredQuery"
        },
        "pageToken": {
          "type": "string",
          "description": "The `next_page_token` value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W"
        },
        "readTime": {
          "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "format": "google-datetime",
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "description": "The maximum number of partitions to return in this call, subject to `partition_count`. For example, if `partition_count` = 10 and `page_size` = 8, the first call to PartitionQuery will return up to 8 partitions and a `next_page_token` if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in `partition_count`.",
          "format": "int32"
        }
      },
      "description": "The request for Firestore.PartitionQuery.",
      "type": "object"
    },
    "PartitionQueryResponse": {
      "id": "PartitionQueryResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A page token that may be used to request an additional set of results, up to the number specified by `partition_count` in the PartitionQuery request. If blank, there are no more results."
        },
        "partitions": {
          "description": "Partition results. Each partition is a split point that can be used by RunQuery as a starting or end point for the query results. The RunQuery requests must be made with the same query supplied to this PartitionQuery request. The partition cursors will be ordered according to same ordering as the results of the query supplied to PartitionQuery. For example, if a PartitionQuery request returns partition cursors A and B, running the following three queries will return the entire result set of the original query: * query, end_at A * query, start_at A, end_at B * query, start_at B An empty result may indicate that the query has too few results to be partitioned.",
          "items": {
            "$ref": "Cursor"
          },
          "type": "array"
        }
      },
      "description": "The response for Firestore.PartitionQuery."
    },
    "GoogleLongrunningListOperationsResponse": {
      "id": "GoogleLongrunningListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "GoogleLongrunningOperation"
          }
        }
      }
    },
    "ListDocumentsResponse": {
      "description": "The response for Firestore.ListDocuments.",
      "properties": {
        "documents": {
          "items": {
            "$ref": "Document"
          },
          "type": "array",
          "description": "The Documents found."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of documents. If this field is omitted, there are no subsequent pages."
        }
      },
      "id": "ListDocumentsResponse",
      "type": "object"
    },
    "GoogleLongrunningCancelOperationRequest": {
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "id": "GoogleLongrunningCancelOperationRequest",
      "type": "object"
    },
    "DocumentDelete": {
      "type": "object",
      "properties": {
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The read timestamp at which the delete was observed. Greater or equal to the `commit_time` of the delete."
        },
        "document": {
          "description": "The resource name of the Document that was deleted.",
          "type": "string"
        },
        "removedTargetIds": {
          "description": "A set of target IDs for targets that previously matched this entity.",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "description": "A Document has been deleted. May be the result of multiple writes, including updates, the last of which deleted the Document. Multiple DocumentDelete messages may be returned for the same logical delete, if multiple targets are affected.",
      "id": "DocumentDelete"
    },
    "GoogleFirestoreAdminV1ImportDocumentsRequest": {
      "properties": {
        "namespaceIds": {
          "type": "array",
          "description": "An empty list represents all namespaces. This is the preferred usage for databases that don't use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.",
          "items": {
            "type": "string"
          }
        },
        "inputUriPrefix": {
          "type": "string",
          "description": "Location of the exported files. This must match the output_uri_prefix of an ExportDocumentsResponse from an export that has completed successfully. See: google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix."
        },
        "collectionIds": {
          "description": "Which collection ids to import. Unspecified means all collections included in the import.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "GoogleFirestoreAdminV1ImportDocumentsRequest",
      "type": "object",
      "description": "The request for FirestoreAdmin.ImportDocuments."
    },
    "StructuredQuery": {
      "type": "object",
      "id": "StructuredQuery",
      "properties": {
        "where": {
          "description": "The filter to apply.",
          "$ref": "Filter"
        },
        "select": {
          "$ref": "Projection",
          "description": "Optional sub-set of the fields to return. This acts as a DocumentMask over the documents returned from a query. When not set, assumes that the caller wants all fields returned."
        },
        "orderBy": {
          "description": "The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a \u003e 1` becomes `WHERE a \u003e 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ \u003e ... AND a \u003e 1` becomes `WHERE __name__ \u003e ... AND a \u003e 1 ORDER BY a ASC, __name__ ASC`",
          "type": "array",
          "items": {
            "$ref": "Order"
          }
        },
        "offset": {
          "description": "The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.",
          "format": "int32",
          "type": "integer"
        },
        "startAt": {
          "description": "A potential prefix of a position in the result set to start the query at. The ordering of the result set is based on the `ORDER BY` clause of the original query. ``` SELECT * FROM k WHERE a = 1 AND b \u003e 2 ORDER BY b ASC, __name__ ASC; ``` This query's results are ordered by `(b ASC, __name__ ASC)`. Cursors can reference either the full ordering or a prefix of the location, though it cannot reference more fields than what are in the provided `ORDER BY`. Continuing off the example above, attaching the following start cursors will have varying impact: - `START BEFORE (2, /k/123)`: start the query right before `a = 1 AND b \u003e 2 AND __name__ \u003e /k/123`. - `START AFTER (10)`: start the query right after `a = 1 AND b \u003e 10`. Unlike `OFFSET` which requires scanning over the first N results to skip, a start cursor allows the query to begin at a logical position. This position is not required to match an actual result, it will scan forward from this position to find the next document. Requires: * The number of values cannot be greater than the number of fields specified in the `ORDER BY` clause.",
          "$ref": "Cursor"
        },
        "endAt": {
          "$ref": "Cursor",
          "description": "A potential prefix of a position in the result set to end the query at. This is similar to `START_AT` but with it controlling the end position rather than the start position. Requires: * The number of values cannot be greater than the number of fields specified in the `ORDER BY` clause."
        },
        "from": {
          "description": "The collections to query.",
          "items": {
            "$ref": "CollectionSelector"
          },
          "type": "array"
        },
        "limit": {
          "format": "int32",
          "type": "integer",
          "description": "The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified."
        }
      },
      "description": "A Firestore query."
    },
    "BeginTransactionResponse": {
      "type": "object",
      "description": "The response for Firestore.BeginTransaction.",
      "id": "BeginTransactionResponse",
      "properties": {
        "transaction": {
          "format": "byte",
          "description": "The transaction that was started.",
          "type": "string"
        }
      }
    },
    "GoogleFirestoreAdminV1DeleteDatabaseMetadata": {
      "type": "object",
      "properties": {},
      "id": "GoogleFirestoreAdminV1DeleteDatabaseMetadata",
      "description": "Metadata related to the delete database operation."
    },
    "ExistenceFilter": {
      "id": "ExistenceFilter",
      "type": "object",
      "properties": {
        "unchangedNames": {
          "$ref": "BloomFilter",
          "description": "A bloom filter that, despite its name, contains the UTF-8 byte encodings of the resource names of ALL the documents that match target_id, in the form `projects/{project_id}/databases/{database_id}/documents/{document_path}`. This bloom filter may be omitted at the server's discretion, such as if it is deemed that the client will not make use of it or if it is too computationally expensive to calculate or transmit. Clients must gracefully handle this field being absent by falling back to the logic used before this field existed; that is, re-add the target without a resume token to figure out which documents in the client's cache are out of sync."
        },
        "targetId": {
          "type": "integer",
          "description": "The target ID to which this filter applies.",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "description": "The total count of documents that match target_id. If different from the count of documents in the client that match, the client must manually determine which documents no longer match the target. The client can use the `unchanged_names` bloom filter to assist with this determination by testing ALL the document names against the filter; if the document name is NOT in the filter, it means the document no longer matches the target.",
          "format": "int32"
        }
      },
      "description": "A digest of all the documents that match a given target."
    },
    "GoogleFirestoreAdminV1IndexOperationMetadata": {
      "id": "GoogleFirestoreAdminV1IndexOperationMetadata",
      "properties": {
        "endTime": {
          "description": "The time this operation completed. Will be unset if operation still in progress.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The state of the operation.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ]
        },
        "index": {
          "type": "string",
          "description": "The index resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`"
        },
        "progressBytes": {
          "description": "The progress, in bytes, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time this operation started."
        },
        "progressDocuments": {
          "description": "The progress, in documents, of this operation.",
          "$ref": "GoogleFirestoreAdminV1Progress"
        }
      },
      "type": "object",
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.CreateIndex."
    },
    "GoogleFirestoreAdminV1ExportDocumentsMetadata": {
      "type": "object",
      "properties": {
        "progressDocuments": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "The progress, in documents, of this operation."
        },
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "collectionIds": {
          "type": "array",
          "description": "Which collection ids are being exported.",
          "items": {
            "type": "string"
          }
        },
        "namespaceIds": {
          "type": "array",
          "description": "Which namespace ids are being exported.",
          "items": {
            "type": "string"
          }
        },
        "snapshotTime": {
          "type": "string",
          "description": "The timestamp that corresponds to the version of the database that is being exported. If unspecified, there are no guarantees about the consistency of the documents being exported.",
          "format": "google-datetime"
        },
        "operationState": {
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The state of the export operation.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ]
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time this operation started."
        },
        "endTime": {
          "format": "google-datetime",
          "description": "The time this operation completed. Will be unset if operation still in progress.",
          "type": "string"
        },
        "outputUriPrefix": {
          "type": "string",
          "description": "Where the documents are being exported to."
        }
      },
      "id": "GoogleFirestoreAdminV1ExportDocumentsMetadata",
      "description": "Metadata for google.longrunning.Operation results from FirestoreAdmin.ExportDocuments."
    },
    "GoogleFirestoreAdminV1ListIndexesResponse": {
      "id": "GoogleFirestoreAdminV1ListIndexesResponse",
      "type": "object",
      "description": "The response for FirestoreAdmin.ListIndexes.",
      "properties": {
        "indexes": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1Index"
          },
          "type": "array",
          "description": "The requested indexes."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A page token that may be used to request another page of results. If blank, this is the last page."
        }
      }
    },
    "CommitResponse": {
      "properties": {
        "commitTime": {
          "description": "The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the commit.",
          "type": "string",
          "format": "google-datetime"
        },
        "writeResults": {
          "type": "array",
          "items": {
            "$ref": "WriteResult"
          },
          "description": "The result of applying the writes. This i-th write result corresponds to the i-th write in the request."
        }
      },
      "description": "The response for Firestore.Commit.",
      "id": "CommitResponse",
      "type": "object"
    },
    "Avg": {
      "type": "object",
      "id": "Avg",
      "description": "Average of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.",
      "properties": {
        "field": {
          "description": "The field to aggregate on.",
          "$ref": "FieldReference"
        }
      }
    },
    "DocumentRemove": {
      "id": "DocumentRemove",
      "description": "A Document has been removed from the view of the targets. Sent if the document is no longer relevant to a target and is out of view. Can be sent instead of a DocumentDelete or a DocumentChange if the server can not send the new value of the document. Multiple DocumentRemove messages may be returned for the same logical write or delete, if multiple targets are affected.",
      "type": "object",
      "properties": {
        "readTime": {
          "description": "The read timestamp at which the remove was observed. Greater or equal to the `commit_time` of the change/delete/remove.",
          "type": "string",
          "format": "google-datetime"
        },
        "removedTargetIds": {
          "description": "A set of target IDs for targets that previously matched this document.",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "document": {
          "description": "The resource name of the Document that has gone out of view.",
          "type": "string"
        }
      }
    },
    "GoogleFirestoreAdminV1Index": {
      "description": "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
      "id": "GoogleFirestoreAdminV1Index",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty."
        },
        "apiScope": {
          "type": "string",
          "description": "The API scope supported by this index.",
          "enum": [
            "ANY_API",
            "DATASTORE_MODE_API"
          ],
          "enumDescriptions": [
            "The index can only be used by the Firestore Native query API. This is the default.",
            "The index can only be used by the Firestore in Datastore Mode query API."
          ]
        },
        "queryScope": {
          "description": "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
          "enumDescriptions": [
            "The query scope is unspecified. Not a valid option.",
            "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the collection id specified by the index.",
            "Indexes with a collection group query scope specified allow queries against all collections that has the collection id specified by the index.",
            "Include all the collections's ancestor in the index. Only available for Datastore Mode databases."
          ],
          "enum": [
            "QUERY_SCOPE_UNSPECIFIED",
            "COLLECTION",
            "COLLECTION_GROUP",
            "COLLECTION_RECURSIVE"
          ],
          "type": "string"
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "The state is unspecified.",
            "The index is being created. There is an active long-running operation for the index. The index is updated when writing a document. Some index data may exist.",
            "The index is ready to be used. The index is updated when writing a document. The index is fully populated from all stored documents it applies to.",
            "The index was being created, but something went wrong. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing a document. Some index data may exist. Use the google.longrunning.Operations API to determine why the operation that last attempted to create this index failed, then re-create the index."
          ],
          "description": "Output only. The serving state of the index.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "NEEDS_REPAIR"
          ]
        },
        "fields": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1IndexField"
          },
          "description": "The fields supported by this index. For composite indexes, this requires a minimum of 2 and a maximum of 100 fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
          "type": "array"
        }
      }
    },
    "QueryTarget": {
      "description": "A target specified by a query.",
      "properties": {
        "structuredQuery": {
          "$ref": "StructuredQuery",
          "description": "A structured query."
        },
        "parent": {
          "type": "string",
          "description": "The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`"
        }
      },
      "id": "QueryTarget",
      "type": "object"
    },
    "Projection": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "FieldReference"
          },
          "description": "The fields to return. If empty, all fields are returned. To only return the name of the document, use `['__name__']`.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "The projection of document's fields to return.",
      "id": "Projection"
    },
    "BeginTransactionRequest": {
      "properties": {
        "options": {
          "description": "The options for the transaction. Defaults to a read-write transaction.",
          "$ref": "TransactionOptions"
        }
      },
      "type": "object",
      "description": "The request for Firestore.BeginTransaction.",
      "id": "BeginTransactionRequest"
    },
    "WriteResponse": {
      "id": "WriteResponse",
      "properties": {
        "commitTime": {
          "type": "string",
          "description": "The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the write.",
          "format": "google-datetime"
        },
        "writeResults": {
          "type": "array",
          "items": {
            "$ref": "WriteResult"
          },
          "description": "The result of applying the writes. This i-th write result corresponds to the i-th write in the request."
        },
        "streamId": {
          "description": "The ID of the stream. Only set on the first message, when a new stream was created.",
          "type": "string"
        },
        "streamToken": {
          "type": "string",
          "description": "A token that represents the position of this response in the stream. This can be used by a client to resume the stream at this point. This field is always set.",
          "format": "byte"
        }
      },
      "description": "The response for Firestore.Write.",
      "type": "object"
    },
    "GoogleFirestoreAdminV1RestoreDatabaseRequest": {
      "description": "The request message for FirestoreAdmin.RestoreDatabase.",
      "id": "GoogleFirestoreAdminV1RestoreDatabaseRequest",
      "type": "object",
      "properties": {
        "backup": {
          "type": "string",
          "description": "Required. Backup to restore from. Must be from the same project as the parent. Format is: `projects/{project_id}/locations/{location}/backups/{backup}`"
        },
        "databaseId": {
          "description": "Required. The ID to use for the database, which will become the final component of the database's resource name. This database id must not be associated with an existing database. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. \"(default)\" database id is also valid.",
          "type": "string"
        }
      }
    },
    "BatchWriteRequest": {
      "properties": {
        "writes": {
          "type": "array",
          "items": {
            "$ref": "Write"
          },
          "description": "The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Labels associated with this batch write."
        }
      },
      "description": "The request for Firestore.BatchWrite.",
      "type": "object",
      "id": "BatchWriteRequest"
    },
    "ListCollectionIdsResponse": {
      "id": "ListCollectionIdsResponse",
      "description": "The response from Firestore.ListCollectionIds.",
      "type": "object",
      "properties": {
        "collectionIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The collection ids."
        },
        "nextPageToken": {
          "description": "A page token that may be used to continue the list.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty"
    },
    "BatchGetDocumentsRequest": {
      "properties": {
        "mask": {
          "$ref": "DocumentMask",
          "description": "The fields to return. If not set, returns all fields. If a document has a field that is not present in this mask, that field will not be returned in the response."
        },
        "readTime": {
          "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "format": "google-datetime",
          "type": "string"
        },
        "documents": {
          "description": "The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newTransaction": {
          "description": "Starts a new transaction and reads the documents. Defaults to a read-only transaction. The new transaction ID will be returned as the first response in the stream.",
          "$ref": "TransactionOptions"
        },
        "transaction": {
          "description": "Reads documents in a transaction.",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "BatchGetDocumentsRequest",
      "type": "object",
      "description": "The request for Firestore.BatchGetDocuments."
    },
    "GoogleFirestoreAdminV1ListBackupsResponse": {
      "description": "The response for FirestoreAdmin.ListBackups.",
      "type": "object",
      "properties": {
        "unreachable": {
          "description": "List of locations that existing backups were not able to be fetched from. Instead of failing the entire requests when a single location is unreachable, this response returns a partial result set and list of locations unable to be reached here. The request can be retried against a single location to get a concrete error.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "backups": {
          "items": {
            "$ref": "GoogleFirestoreAdminV1Backup"
          },
          "description": "List of all backups for the project. Ordered by `location ASC, create_time DESC, name ASC`.",
          "type": "array"
        }
      },
      "id": "GoogleFirestoreAdminV1ListBackupsResponse"
    },
    "AggregationResult": {
      "properties": {
        "aggregateFields": {
          "additionalProperties": {
            "$ref": "Value"
          },
          "description": "The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.",
          "type": "object"
        }
      },
      "type": "object",
      "id": "AggregationResult",
      "description": "The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result."
    },
    "RunAggregationQueryResponse": {
      "id": "RunAggregationQueryResponse",
      "type": "object",
      "properties": {
        "result": {
          "description": "A single aggregation result. Not present when reporting partial progress.",
          "$ref": "AggregationResult"
        },
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run."
        },
        "transaction": {
          "type": "string",
          "description": "The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction.",
          "format": "byte"
        }
      },
      "description": "The response for Firestore.RunAggregationQuery."
    },
    "Count": {
      "properties": {
        "upTo": {
          "format": "int64",
          "type": "string",
          "description": "Optional. Optional constraint on the maximum number of documents to count. This provides a way to set an upper bound on the number of documents to scan, limiting latency, and cost. Unspecified is interpreted as no bound. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be greater than zero when present."
        }
      },
      "type": "object",
      "description": "Count of documents that match the query. The `COUNT(*)` aggregation function operates on the entire document so it does not require a field reference.",
      "id": "Count"
    },
    "GoogleFirestoreAdminV1CreateDatabaseMetadata": {
      "description": "Metadata related to the create database operation.",
      "type": "object",
      "id": "GoogleFirestoreAdminV1CreateDatabaseMetadata",
      "properties": {}
    },
    "GoogleFirestoreAdminV1IndexField": {
      "properties": {
        "fieldPath": {
          "description": "Can be __name__. For single field indexes, this must match the name of the field or may be omitted.",
          "type": "string"
        },
        "arrayConfig": {
          "description": "Indicates that this field supports operations on `array_value`s.",
          "enum": [
            "ARRAY_CONFIG_UNSPECIFIED",
            "CONTAINS"
          ],
          "enumDescriptions": [
            "The index does not support additional array queries.",
            "The index supports array containment queries."
          ],
          "type": "string"
        },
        "order": {
          "type": "string",
          "enumDescriptions": [
            "The ordering is unspecified. Not a valid option.",
            "The field is ordered by ascending field value.",
            "The field is ordered by descending field value."
          ],
          "enum": [
            "ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "description": "Indicates that this field supports ordering by the specified order or comparing using =, !=, \u003c, \u003c=, \u003e, \u003e=."
        }
      },
      "type": "object",
      "description": "A field in an index. The field_path describes which field is indexed, the value_mode describes how the field value is indexed.",
      "id": "GoogleFirestoreAdminV1IndexField"
    }
  },
  "version": "v1",
  "name": "firestore",
  "kind": "discovery#restDescription",
  "servicePath": "",
  "description": "Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. ",
  "title": "Cloud Firestore API"
}

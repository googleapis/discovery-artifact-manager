{
  "description": "Enables apps to fetch information and perform actions in Google Chat. Authentication is a prerequisite for using the Google Chat REST API.",
  "ownerName": "Google",
  "protocol": "rest",
  "ownerDomain": "google.com",
  "revision": "20221029",
  "servicePath": "",
  "name": "chat",
  "parameters": {
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "description": "V1 error format.",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    }
  },
  "id": "chat:v1",
  "documentationLink": "https://developers.google.com/hangouts/chat",
  "title": "Google Chat API",
  "fullyEncodeReservedExpansion": true,
  "version_module": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/chat.messages": {
          "description": "View, compose, send, update, and delete messages, and add, view, and delete reactions to messages."
        },
        "https://www.googleapis.com/auth/chat.messages.readonly": {
          "description": "view messages and reactions in Google Chat"
        },
        "https://www.googleapis.com/auth/chat.messages.create": {
          "description": "Compose and send messages in Google Chat"
        },
        "https://www.googleapis.com/auth/chat.memberships": {
          "description": "View, add, and remove members from conversations in Google Chat"
        }
      }
    }
  },
  "baseUrl": "https://chat.googleapis.com/",
  "rootUrl": "https://chat.googleapis.com/",
  "canonicalName": "Hangouts Chat",
  "version": "v1",
  "mtlsRootUrl": "https://chat.mtls.googleapis.com/",
  "batchPath": "batch",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "schemas": {
    "GoogleAppsCardV1Button": {
      "id": "GoogleAppsCardV1Button",
      "properties": {
        "disabled": {
          "description": "If `true`, the button is displayed in a disabled state and doesn't respond to user actions.",
          "type": "boolean"
        },
        "altText": {
          "description": "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.",
          "type": "string"
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "The action to perform when the button is clicked."
        },
        "color": {
          "description": "If set, the button is filled with a solid background.",
          "$ref": "Color"
        },
        "icon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "The icon image."
        },
        "text": {
          "description": "The text of the button.",
          "type": "string"
        }
      },
      "description": "A button. Can be a text button or an image button.",
      "type": "object"
    },
    "GoogleAppsCardV1GridItem": {
      "description": "Represents a single item in the grid layout.",
      "properties": {
        "image": {
          "$ref": "GoogleAppsCardV1ImageComponent",
          "description": "The image that displays in the grid item."
        },
        "subtitle": {
          "type": "string",
          "description": "The grid item's subtitle."
        },
        "layout": {
          "enum": [
            "GRID_ITEM_LAYOUT_UNSPECIFIED",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ],
          "type": "string",
          "enumDescriptions": [
            "No layout specified.",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "description": "The layout to use for the grid item."
        },
        "textAlignment": {
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "description": "The horizontal alignment of the grid item's text.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "The grid item's title."
        },
        "id": {
          "description": "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1GridItem",
      "type": "object"
    },
    "CardAction": {
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The label used to be displayed in the action menu item."
        },
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "OnClick"
        }
      },
      "type": "object",
      "id": "CardAction",
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser. Not supported by Google Chat apps."
    },
    "GoogleAppsCardV1Divider": {
      "properties": {},
      "id": "GoogleAppsCardV1Divider",
      "description": "A divider that appears in between widgets.",
      "type": "object"
    },
    "Attachment": {
      "type": "object",
      "description": "An attachment in Google Chat.",
      "properties": {
        "source": {
          "enum": [
            "SOURCE_UNSPECIFIED",
            "DRIVE_FILE",
            "UPLOADED_CONTENT"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "The source of the attachment.",
          "type": "string"
        },
        "attachmentDataRef": {
          "description": "A reference to the attachment data. This is used with the media API to download the attachment data.",
          "$ref": "AttachmentDataRef"
        },
        "contentType": {
          "type": "string",
          "description": "The content type (MIME type) of the file."
        },
        "driveDataRef": {
          "$ref": "DriveDataRef",
          "description": "A reference to the drive attachment. This is used with the Drive API."
        },
        "downloadUri": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps should not use this URL to download attachment content."
        },
        "contentName": {
          "description": "The original file name for the content, not the full path.",
          "type": "string"
        },
        "name": {
          "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
          "type": "string"
        },
        "thumbnailUri": {
          "description": "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps should not use this URL to download attachment content.",
          "readOnly": true,
          "type": "string"
        }
      },
      "id": "Attachment"
    },
    "ListMembershipsResponse": {
      "properties": {
        "memberships": {
          "items": {
            "$ref": "Membership"
          },
          "type": "array",
          "description": "List of memberships in the requested (or first) page."
        },
        "nextPageToken": {
          "description": "A token that can be sent as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListMembershipsResponse"
    },
    "FormAction": {
      "type": "object",
      "id": "FormAction",
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "properties": {
        "actionMethodName": {
          "type": "string",
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."
        },
        "parameters": {
          "description": "List of action parameters.",
          "type": "array",
          "items": {
            "$ref": "ActionParameter"
          }
        }
      }
    },
    "Image": {
      "id": "Image",
      "description": "An image that is specified by a URL and can have an onclick action.",
      "type": "object",
      "properties": {
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action."
        },
        "aspectRatio": {
          "format": "double",
          "type": "number",
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."
        },
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        }
      }
    },
    "Button": {
      "description": "A button. Can be a text button or an image button.",
      "properties": {
        "textButton": {
          "$ref": "TextButton",
          "description": "A button with text and onclick action."
        },
        "imageButton": {
          "$ref": "ImageButton",
          "description": "A button with image and onclick action."
        }
      },
      "type": "object",
      "id": "Button"
    },
    "GoogleAppsCardV1SelectionItem": {
      "properties": {
        "selected": {
          "description": "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "The value associated with this item. The client should use this as a form input value."
        },
        "text": {
          "type": "string",
          "description": "The text to be displayed."
        }
      },
      "id": "GoogleAppsCardV1SelectionItem",
      "type": "object",
      "description": "A selectable item in the switch control."
    },
    "TextParagraph": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "description": "A paragraph of text. Formatted text supported.",
      "id": "TextParagraph"
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "GoogleAppsCardV1DateTimePicker": {
      "type": "object",
      "id": "GoogleAppsCardV1DateTimePicker",
      "description": "The widget that lets users to specify a date and time. Not supported by Google Chat apps.",
      "properties": {
        "timezoneOffsetDate": {
          "type": "integer",
          "format": "int32",
          "description": "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side."
        },
        "name": {
          "description": "The name of the text input that's used in `formInput`, and uniquely identifies this input.",
          "type": "string"
        },
        "type": {
          "enum": [
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ],
          "enumDescriptions": [
            "The user can select a date and time.",
            "The user can only select a date.",
            "The user can only select a time."
          ],
          "description": "The type of the date/time picker.",
          "type": "string"
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation."
        },
        "label": {
          "type": "string",
          "description": "The label for the field that displays to the user."
        },
        "valueMsEpoch": {
          "type": "string",
          "description": "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.",
          "format": "int64"
        }
      }
    },
    "GoogleAppsCardV1ImageComponent": {
      "type": "object",
      "properties": {
        "cropStyle": {
          "$ref": "GoogleAppsCardV1ImageCropStyle",
          "description": "The crop style to apply to the image."
        },
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to the image."
        },
        "imageUri": {
          "description": "The image URL.",
          "type": "string"
        },
        "altText": {
          "description": "The accessibility label for the image.",
          "type": "string"
        }
      },
      "description": "Represents an image.",
      "id": "GoogleAppsCardV1ImageComponent"
    },
    "GoogleAppsCardV1Action": {
      "properties": {
        "function": {
          "description": "Apps Script function to invoke when the containing element is clicked/activated.",
          "type": "string"
        },
        "interaction": {
          "type": "string",
          "description": "Optional. Required when opening a [dialog](https://developers.google.com/chat/how-tos/dialogs). What to do in response to an interaction with a user, such as a user clicking button on a card message. If unspecified, the app responds by executing an `action` - like opening a link or running a function - as normal. By specifying an `interaction`, the app can respond in special interactive ways. For example, by setting `interaction` to `OPEN_DIALOG`, the app can open a [dialog](https://developers.google.com/chat/how-tos/dialogs). When specified, a loading indicator is not shown. Supported by Chat apps, but not Google Workspace Add-ons. If specified for an add-on, the entire card is stripped and nothing is shown in the client.",
          "enumDescriptions": [
            "Default value. The `action` executes as normal.",
            "Opens a [dialog](https://developers.google.com/chat/how-tos/dialogs), a windowed, card-based interface that Chat apps use to interact with users. Only supported by Chat apps in response to button-clicks on card messages. Not supported by Google Workspace Add-ons. If specified for an add-on, the entire card is stripped and nothing is shown in the client."
          ],
          "enum": [
            "INTERACTION_UNSPECIFIED",
            "OPEN_DIALOG"
          ]
        },
        "persistValues": {
          "description": "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed. Not supported by Google Chat apps.",
          "type": "boolean"
        },
        "loadIndicator": {
          "enum": [
            "SPINNER",
            "NONE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Displays a spinner to indicate that content is loading.",
            "Nothing is displayed."
          ],
          "description": "Specifies the loading indicator that the action displays while making the call to the action."
        },
        "parameters": {
          "description": "List of action parameters.",
          "items": {
            "$ref": "GoogleAppsCardV1ActionParameter"
          },
          "type": "array"
        }
      },
      "id": "GoogleAppsCardV1Action",
      "type": "object",
      "description": "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form."
    },
    "Thread": {
      "type": "object",
      "id": "Thread",
      "description": "A thread in Google Chat.",
      "properties": {
        "name": {
          "description": "Resource name of the thread. Example: spaces/{space}/threads/{thread}",
          "type": "string"
        },
        "threadKey": {
          "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread). For other requests, this is an output only field.",
          "type": "string"
        }
      }
    },
    "SlashCommandMetadata": {
      "type": "object",
      "id": "SlashCommandMetadata",
      "description": "Annotation metadata for slash commands (/).",
      "properties": {
        "commandName": {
          "type": "string",
          "description": "The name of the invoked slash command."
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add Chat app to space.",
            "Invoke slash command in space."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "INVOKE"
          ],
          "type": "string",
          "description": "The type of slash command."
        },
        "triggersDialog": {
          "description": "Indicating whether the slash command is for a dialog.",
          "type": "boolean"
        },
        "commandId": {
          "description": "The command id of the invoked slash command.",
          "type": "string",
          "format": "int64"
        },
        "bot": {
          "$ref": "User",
          "description": "The Chat app whose command was invoked."
        }
      }
    },
    "DateInput": {
      "id": "DateInput",
      "description": "Date input values. Not supported by Chat apps.",
      "properties": {
        "msSinceEpoch": {
          "format": "int64",
          "type": "string",
          "description": "Time since epoch time, in milliseconds."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1Widget": {
      "type": "object",
      "properties": {
        "grid": {
          "$ref": "GoogleAppsCardV1Grid",
          "description": "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```"
        },
        "divider": {
          "$ref": "GoogleAppsCardV1Divider",
          "description": "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"
        },
        "horizontalAlignment": {
          "type": "string",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "description": "The horizontal alignment of this widget."
        },
        "dateTimePicker": {
          "$ref": "GoogleAppsCardV1DateTimePicker",
          "description": "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```"
        },
        "image": {
          "description": "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/sasha.png\" \"altText\": \"Avatar for Sasha\" } ```",
          "$ref": "GoogleAppsCardV1Image"
        },
        "buttonList": {
          "description": "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```",
          "$ref": "GoogleAppsCardV1ButtonList"
        },
        "textParagraph": {
          "description": "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```",
          "$ref": "GoogleAppsCardV1TextParagraph"
        },
        "decoratedText": {
          "description": "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"sasha@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_sasha\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```",
          "$ref": "GoogleAppsCardV1DecoratedText"
        },
        "selectionInput": {
          "$ref": "GoogleAppsCardV1SelectionInput",
          "description": "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```"
        },
        "textInput": {
          "description": "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```",
          "$ref": "GoogleAppsCardV1TextInput"
        }
      },
      "description": "A widget is a UI element that presents texts, images, etc.",
      "id": "GoogleAppsCardV1Widget"
    },
    "SlashCommand": {
      "properties": {
        "commandId": {
          "description": "The id of the slash command invoked.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SlashCommand",
      "description": "A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat."
    },
    "Space": {
      "id": "Space",
      "properties": {
        "spaceThreadingState": {
          "readOnly": true,
          "description": "Output only. The threading state in the Chat space.",
          "enum": [
            "SPACE_THREADING_STATE_UNSPECIFIED",
            "THREADED_MESSAGES",
            "GROUPED_MESSAGES",
            "UNTHREADED_MESSAGES"
          ],
          "enumDescriptions": [
            "Reserved.",
            "Named spaces that support message threads. When users respond to a message, they can reply in-thread, which keeps their response in the context of the original message.",
            "Named spaces where the conversation is organized by topic. Topics and their replies are grouped together.",
            "Direct messages (DMs) between two people and group conversations between 3 or more people."
          ],
          "type": "string"
        },
        "name": {
          "description": "Resource name of the space. Format: spaces/{space}",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer preview) instead. The type of a space.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ROOM",
            "DM"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "",
            "Conversations between two or more humans.",
            "1:1 Direct Message between a human and a Chat app, where all messages are flat. Note that this does not include direct messages between two humans."
          ]
        },
        "singleUserBotDm": {
          "description": "Optional. Whether the space is a DM between a Chat app and a single human.",
          "type": "boolean"
        },
        "displayName": {
          "type": "string",
          "description": "The space's display name. For direct messages between humans, this field might be empty."
        },
        "spaceDetails": {
          "$ref": "SpaceDetails",
          "description": "Details about the space including description and rules."
        },
        "threaded": {
          "type": "boolean",
          "description": "Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space.",
          "readOnly": true
        }
      },
      "type": "object",
      "description": "A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app."
    },
    "GoogleAppsCardV1ActionParameter": {
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the parameter.",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        }
      },
      "id": "GoogleAppsCardV1ActionParameter"
    },
    "ActionResponse": {
      "id": "ActionResponse",
      "type": "object",
      "description": "Parameters that a Chat app can use to configure how it's response is posted.",
      "properties": {
        "type": {
          "description": "Input only. The type of Chat app response.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "NEW_MESSAGE",
            "UPDATE_MESSAGE",
            "UPDATE_USER_MESSAGE_CARDS",
            "REQUEST_CONFIG",
            "DIALOG"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default type; will be handled as NEW_MESSAGE.",
            "Post as a new message in the topic.",
            "Update the Chat app's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT.",
            "Update the cards on a user's message. This is only permitted as a response to a MESSAGE event with a matched url, or a CARD_CLICKED event where the message sender type is HUMAN. Text will be ignored.",
            "Privately ask the user for additional auth or config.",
            "Presents a [dialog](https://developers.google.com/chat/how-tos/dialogs)."
          ]
        },
        "dialogAction": {
          "$ref": "DialogAction",
          "description": "Input only. A response to an event related to a [dialog](https://developers.google.com/chat/how-tos/dialogs). Must be accompanied by `ResponseType.Dialog`."
        },
        "url": {
          "description": "Input only. URL for users to auth or config. (Only for REQUEST_CONFIG response types.)",
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1TextParagraph": {
      "id": "GoogleAppsCardV1TextParagraph",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text that's shown in the widget."
        }
      },
      "description": "A paragraph of text that supports formatting. See [Text formatting](https://developers.google.com/workspace/add-ons/concepts/widgets#text_formatting) for details.",
      "type": "object"
    },
    "UserMentionMetadata": {
      "properties": {
        "type": {
          "description": "The type of user mention.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "MENTION"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add user to space.",
            "Mention user in space."
          ]
        },
        "user": {
          "description": "The user mentioned.",
          "$ref": "User"
        }
      },
      "type": "object",
      "id": "UserMentionMetadata",
      "description": "Annotation metadata for user mentions (@)."
    },
    "GoogleAppsCardV1DecoratedText": {
      "properties": {
        "wrapText": {
          "description": "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated.",
          "type": "boolean"
        },
        "icon": {
          "description": "Deprecated in favor of start_icon.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "topLabel": {
          "description": "The formatted text label that shows above the main text.",
          "type": "string"
        },
        "endIcon": {
          "description": "An icon displayed after the text.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "Only the top and bottom label and content region are clickable."
        },
        "bottomLabel": {
          "type": "string",
          "description": "The formatted text label that shows below the main text."
        },
        "button": {
          "description": "A button that can be clicked to trigger an action.",
          "$ref": "GoogleAppsCardV1Button"
        },
        "startIcon": {
          "description": "The icon displayed in front of the text.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "switchControl": {
          "description": "A switch widget can be clicked to change its state or trigger an action.",
          "$ref": "GoogleAppsCardV1SwitchControl"
        },
        "text": {
          "type": "string",
          "description": "Required. The main widget formatted text. See Text formatting for details."
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1DecoratedText",
      "description": "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text."
    },
    "GoogleAppsCardV1CardHeader": {
      "properties": {
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "title": {
          "description": "Required. The title of the card header. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.",
          "type": "string"
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        },
        "imageAltText": {
          "type": "string",
          "description": "The alternative text of this image which is used for accessibility."
        },
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "description": "The image's type.",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1CardHeader",
      "type": "object",
      "description": "Represents a card header."
    },
    "DeprecatedEvent": {
      "description": "Google Chat events.",
      "id": "DeprecatedEvent",
      "properties": {
        "isDialogEvent": {
          "type": "boolean",
          "description": "True when the event is related to [dialogs](https://developers.google.com/chat/how-tos/dialogs)."
        },
        "action": {
          "$ref": "FormAction",
          "description": "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information."
        },
        "configCompleteRedirectUrl": {
          "type": "string",
          "description": "The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information."
        },
        "threadKey": {
          "type": "string",
          "description": "The Chat app-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information."
        },
        "eventTime": {
          "description": "The timestamp indicating when the event occurred.",
          "format": "google-datetime",
          "type": "string"
        },
        "space": {
          "description": "The space in which the event occurred.",
          "$ref": "Space"
        },
        "user": {
          "description": "The user that triggered the event.",
          "$ref": "User"
        },
        "message": {
          "$ref": "Message",
          "description": "The message that triggered the event, if applicable."
        },
        "dialogEventType": {
          "description": "The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) event received.",
          "type": "string",
          "enumDescriptions": [
            "This could be used when the corresponding event is not dialog related. For example an @mention.",
            "Any user action that opens a [dialog](https://developers.google.com/chat/how-tos/dialogs).",
            "A card click event from a [dialog](https://developers.google.com/chat/how-tos/dialogs).",
            "The [dialog](https://developers.google.com/chat/how-tos/dialogs) was cancelled."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "REQUEST_DIALOG",
            "SUBMIT_DIALOG",
            "CANCEL_DIALOG"
          ]
        },
        "token": {
          "type": "string",
          "description": "A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat)."
        },
        "common": {
          "description": "Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes information submitted by users interacting with [dialogs](https://developers.google.com/chat/how-tos/dialogs), like data entered on a card.",
          "$ref": "CommonEventObject"
        },
        "type": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "MESSAGE",
            "ADDED_TO_SPACE",
            "REMOVED_FROM_SPACE",
            "CARD_CLICKED"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A message was sent in a space.",
            "The Chat app was added to a space.",
            "The Chat app was removed from a space.",
            "The Chat app's interactive card was clicked."
          ],
          "description": "The type of the event."
        }
      },
      "type": "object"
    },
    "Card": {
      "properties": {
        "name": {
          "description": "Name of the card.",
          "type": "string"
        },
        "sections": {
          "description": "Sections are separated by a line divider.",
          "type": "array",
          "items": {
            "$ref": "Section"
          }
        },
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "CardHeader"
        },
        "cardActions": {
          "description": "The actions of this card.",
          "type": "array",
          "items": {
            "$ref": "CardAction"
          }
        }
      },
      "type": "object",
      "description": "A card is a UI element that can contain UI widgets such as texts, images.",
      "id": "Card"
    },
    "GoogleAppsCardV1ImageCropStyle": {
      "description": "Represents the crop style applied to an image.",
      "properties": {
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "type": "string",
          "description": "The crop type.",
          "enum": [
            "IMAGE_CROP_TYPE_UNSPECIFIED",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ]
        },
        "aspectRatio": {
          "type": "number",
          "format": "double",
          "description": "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`."
        }
      },
      "id": "GoogleAppsCardV1ImageCropStyle",
      "type": "object"
    },
    "CardHeader": {
      "id": "CardHeader",
      "type": "object",
      "properties": {
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        },
        "title": {
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines.",
          "type": "string"
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageStyle": {
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ],
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ],
          "type": "string",
          "description": "The image's type (e.g. square border or circular border)."
        }
      }
    },
    "TimeInput": {
      "description": "Time input values. Not supported by Chat apps.",
      "type": "object",
      "properties": {
        "minutes": {
          "format": "int32",
          "type": "integer",
          "description": "The number of minutes past the hour. Valid values are 0 to 59."
        },
        "hours": {
          "type": "integer",
          "format": "int32",
          "description": "The hour on a 24-hour clock."
        }
      },
      "id": "TimeInput"
    },
    "SpaceDetails": {
      "id": "SpaceDetails",
      "properties": {
        "guidelines": {
          "type": "string",
          "description": "Optional. The space's rules, expectations, and etiquette."
        },
        "description": {
          "type": "string",
          "description": "Optional. A description of the space. It could describe the space's discussion topic, functional purpose, or participants."
        }
      },
      "description": "Details about the space including description and rules.",
      "type": "object"
    },
    "CommonEventObject": {
      "id": "CommonEventObject",
      "type": "object",
      "properties": {
        "timeZone": {
          "description": "The timezone ID and offset from Coordinated Universal Time (UTC).",
          "$ref": "TimeZone"
        },
        "platform": {
          "description": "The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.",
          "enum": [
            "UNKNOWN_PLATFORM",
            "WEB",
            "IOS",
            "ANDROID"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "hostApp": {
          "enumDescriptions": [
            "Google can't identify a host app.",
            "The add-on launches from Gmail.",
            "The add-on launches from Google Calendar.",
            "The add-on launches from Google Drive.",
            "Not used.",
            "The add-on launches from Google Docs.",
            "The add-on launches from Google Meet.",
            "The add-on launches from Google Sheets.",
            "The add-on launches from Google Slides.",
            "The add-on launches from Google Drawings.",
            "A Google Chat app. Not used for Google Workspace Add-ons."
          ],
          "type": "string",
          "description": "The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.",
          "enum": [
            "UNSPECIFIED_HOST_APP",
            "GMAIL",
            "CALENDAR",
            "DRIVE",
            "DEMO",
            "DOCS",
            "MEET",
            "SHEETS",
            "SLIDES",
            "DRAWINGS",
            "CHAT"
          ]
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings."
        },
        "formInputs": {
          "description": "A map containing the current values of the widgets in a card. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. Depending on the input data type, a different object represents each input: For single-value widgets, `StringInput`. For multi-value widgets, an array of `StringInput` objects. For a date-time picker, a `DateTimeInput`. For a date-only picker, a `DateInput`. For a time-only picker, a `TimeInput`. Corresponds with the data entered by a user on a card in a [dialog](https://developers.google.com/chat/how-tos/dialogs).",
          "type": "object",
          "additionalProperties": {
            "$ref": "Inputs"
          }
        },
        "userLocale": {
          "description": "The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\". Not supported by Chat apps.",
          "type": "string"
        },
        "invokedFunction": {
          "description": "Name of the invoked function associated with the widget. Only set for Chat apps.",
          "type": "string"
        }
      },
      "description": "Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs)."
    },
    "DriveDataRef": {
      "type": "object",
      "id": "DriveDataRef",
      "description": "A reference to the data of a drive attachment.",
      "properties": {
        "driveFileId": {
          "description": "The id for the drive file, for use with the Drive API.",
          "type": "string"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "lastUpdateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.",
          "type": "string"
        },
        "thread": {
          "description": "The thread the message belongs to. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).",
          "$ref": "Thread"
        },
        "actionResponse": {
          "description": "Input only. Parameters that a Chat app can use to configure how its response is posted.",
          "$ref": "ActionResponse"
        },
        "cards": {
          "type": "array",
          "items": {
            "$ref": "Card"
          },
          "description": "Deprecated: Use `cards_v2` instead. Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message."
        },
        "fallbackText": {
          "type": "string",
          "description": "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications)."
        },
        "annotations": {
          "readOnly": true,
          "description": "Output only. Annotations associated with the text in this message.",
          "items": {
            "$ref": "Annotation"
          },
          "type": "array"
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time at which the message was created in Google Chat server.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "threadReply": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. When `true`, the message is a response in a reply thread. When `false`, the message is visible in the space's top-level conversation as either the first message of a thread or a message with no threaded replies. If the space doesn't support reply in threads, this field is always `false`."
        },
        "cardsV2": {
          "type": "array",
          "items": {
            "$ref": "CardWithId"
          },
          "description": "Richly formatted and interactive cards that display UI elements and editable widgets, such as: - Formatted text - Buttons - Clickable images - Checkboxes - Radio buttons - Input widgets. Cards are usually displayed below the text-body of a Chat message, but can situationally appear other places, such as [dialogs](https://developers.google.com/chat/how-tos/dialogs). The `cardId` is a unique identifier among cards in the same message and for identifying user input values. Currently supported widgets include: - `TextParagraph` - `DecoratedText` - `Image` - `ButtonList` - `Divider`"
        },
        "name": {
          "description": "Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`",
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Plain-text body of the message. The first link to an image, video, web page, or other preview-able item generates a preview chip."
        },
        "argumentText": {
          "description": "Plain-text body of the message with all Chat app mentions stripped out.",
          "type": "string"
        },
        "slashCommand": {
          "description": "Output only. Slash command information, if applicable.",
          "readOnly": true,
          "$ref": "SlashCommand"
        },
        "sender": {
          "description": "Output only. The user who created the message.",
          "readOnly": true,
          "$ref": "User"
        },
        "clientAssignedMessageId": {
          "description": "A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).",
          "type": "string"
        },
        "matchedUrl": {
          "description": "Output only. A URL in `spaces.messages.text` that matches a link preview pattern. For more information, refer to [Preview links](https://developers.google.com/chat/how-tos/preview-links).",
          "readOnly": true,
          "$ref": "MatchedUrl"
        },
        "attachment": {
          "type": "array",
          "description": "User uploaded attachment.",
          "items": {
            "$ref": "Attachment"
          }
        },
        "space": {
          "$ref": "Space",
          "description": "The space the message belongs to. When accessed with [user authentication](https://developers.google.com/chat/api/guides/auth/users), only the name of the Space is populated."
        }
      },
      "id": "Message",
      "description": "A message in Google Chat."
    },
    "DialogAction": {
      "description": "Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs) and request status code.",
      "properties": {
        "actionStatus": {
          "description": "Input only. Status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs). Displays a status and message to users, if necessary. For example, in case of an error or success.",
          "$ref": "ActionStatus"
        },
        "dialog": {
          "$ref": "Dialog",
          "description": "Input only. [Dialog](https://developers.google.com/chat/how-tos/dialogs) for the request."
        }
      },
      "id": "DialogAction",
      "type": "object"
    },
    "WidgetMarkup": {
      "properties": {
        "keyValue": {
          "$ref": "KeyValue",
          "description": "Display a key value item in this widget."
        },
        "image": {
          "description": "Display an image in this widget.",
          "$ref": "Image"
        },
        "textParagraph": {
          "$ref": "TextParagraph",
          "description": "Display a text paragraph in this widget."
        },
        "buttons": {
          "items": {
            "$ref": "Button"
          },
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set.",
          "type": "array"
        }
      },
      "id": "WidgetMarkup",
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object"
    },
    "CardWithId": {
      "description": "Widgets for Chat apps to specify.",
      "id": "CardWithId",
      "properties": {
        "card": {
          "description": "Card proto that allows Chat apps to specify UI elements and editable widgets.",
          "$ref": "GoogleAppsCardV1Card"
        },
        "cardId": {
          "type": "string",
          "description": "Required for `cardsV2` messages. Chat app-specified identifier for this widget. Scoped within a message."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1CardAction": {
      "properties": {
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "The `onClick` action for this action item."
        },
        "actionLabel": {
          "description": "The label that displays as the action menu item.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser. Not supported by Google Chat apps.",
      "id": "GoogleAppsCardV1CardAction"
    },
    "GoogleAppsCardV1Grid": {
      "id": "GoogleAppsCardV1Grid",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1GridItem"
          },
          "type": "array",
          "description": "The items to display in the grid."
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters."
        },
        "columnCount": {
          "type": "integer",
          "description": "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
          "format": "int32"
        },
        "title": {
          "type": "string",
          "description": "The text that displays in the grid header."
        },
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to each grid item."
        }
      },
      "description": "Represents a Grid widget that displays items in a configurable grid layout."
    },
    "GoogleAppsCardV1TextInput": {
      "description": "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions.",
      "properties": {
        "initialSuggestions": {
          "description": "The initial suggestions made before any user input.",
          "$ref": "GoogleAppsCardV1Suggestions"
        },
        "type": {
          "type": "string",
          "description": "The style of the text, for example, a single line or multiple lines.",
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ],
          "enumDescriptions": [
            "The text is put into a single line.",
            "The text is put into multiple lines."
          ]
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The onChange action, for example, invoke a function."
        },
        "name": {
          "type": "string",
          "description": "The name of the text input which is used in `formInput`."
        },
        "label": {
          "description": "At least one of label and hintText must be specified.",
          "type": "string"
        },
        "autoCompleteAction": {
          "description": "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "hintText": {
          "description": "The hint text.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The default value when there is no input from the user."
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1TextInput"
    },
    "DateTimeInput": {
      "type": "object",
      "description": "Date and time input values. Not supported by Chat apps.",
      "properties": {
        "hasDate": {
          "type": "boolean",
          "description": "Whether the `datetime` input includes a calendar date."
        },
        "msSinceEpoch": {
          "format": "int64",
          "type": "string",
          "description": "Time since epoch time, in milliseconds."
        },
        "hasTime": {
          "type": "boolean",
          "description": "Whether the `datetime` input includes a timestamp."
        }
      },
      "id": "DateTimeInput"
    },
    "OpenLink": {
      "description": "A link that opens a new window.",
      "type": "object",
      "id": "OpenLink",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1SuggestionItem": {
      "description": "A suggestion item.",
      "type": "object",
      "id": "GoogleAppsCardV1SuggestionItem",
      "properties": {
        "text": {
          "type": "string",
          "description": "The suggested autocomplete result."
        }
      }
    },
    "GoogleAppsCardV1ButtonList": {
      "id": "GoogleAppsCardV1ButtonList",
      "properties": {
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1Button"
          },
          "description": "An array of buttons."
        }
      },
      "type": "object",
      "description": "A list of buttons layed out horizontally."
    },
    "TimeZone": {
      "id": "TimeZone",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such as \"America/Toronto\"."
        },
        "offset": {
          "description": "The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC).",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The timezone ID and offset from Coordinated Universal Time (UTC). Not supported by Chat apps."
    },
    "AttachmentDataRef": {
      "type": "object",
      "id": "AttachmentDataRef",
      "description": "A reference to the data of an attachment.",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "The resource name of the attachment data. This is used with the media API to download the attachment data."
        }
      }
    },
    "ChatAppLogEntry": {
      "type": "object",
      "id": "ChatAppLogEntry",
      "properties": {
        "deployment": {
          "type": "string",
          "description": "The deployment that caused the error. For Chat apps built in Apps Script, this is the deployment ID defined by Apps Script."
        },
        "deploymentFunction": {
          "description": "The unencrypted `callback_method` name that was running when the error was encountered.",
          "type": "string"
        },
        "error": {
          "$ref": "Status",
          "description": "The error code and message."
        }
      },
      "description": "JSON payload of error messages. If the Cloud Logging API is enabled, these error messages are logged to [Google Cloud Logging](https://cloud.google.com/logging/docs)."
    },
    "GoogleAppsCardV1Card": {
      "id": "GoogleAppsCardV1Card",
      "description": "Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. In Google Chat, cards appear in several places: - As stand-alone messages. - Accompanying a text message, just beneath the text message. - As a [dialog](https://developers.google.com/chat/how-tos/dialogs). The following example JSON creates a \"contact card\" that features: - A header with the contact's name, job title, avatar picture. - A section with the contact information, including formatted text. - Buttons that users can click to share the contact or see more or less info. ![Example contact card](/chat/images/card_api_reference.png) ``` { \"cardsV2\": [ { \"cardId\": \"unique-card-id\", \"card\": { \"header\": { \"title\": \"Sasha\", \"subtitle\": \"Software Engineer\", \"imageUrl\": \"https://developers.google.com/chat/images/quickstart-app-avatar.png\", \"imageType\": \"CIRCLE\", \"imageAltText\": \"Avatar for Sasha\", }, \"sections\": [ { \"header\": \"Contact Info\", \"collapsible\": true, \"uncollapsibleWidgetsCount\": 1, \"widgets\": [ { \"decoratedText\": { \"startIcon\": { \"knownIcon\": \"EMAIL\", }, \"text\": \"sasha@example.com\", } }, { \"decoratedText\": { \"startIcon\": { \"knownIcon\": \"PERSON\", }, \"text\": \"Online\", }, }, { \"decoratedText\": { \"startIcon\": { \"knownIcon\": \"PHONE\", }, \"text\": \"+1 (555) 555-1234\", } }, { \"buttonList\": { \"buttons\": [ { \"text\": \"Share\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\", } } }, { \"text\": \"Edit\", \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\", } ], } } }, ], } }, ], }, ], }, } ], } ```",
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1Section"
          },
          "description": "Sections are separated by a line divider."
        },
        "cardActions": {
          "type": "array",
          "description": "The card's actions. Actions are added to the card's generated toolbar menu. Not supported by Google Chat apps. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Settings\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
          "items": {
            "$ref": "GoogleAppsCardV1CardAction"
          }
        },
        "peekCardHeader": {
          "description": "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards. Not supported by Google Chat apps.",
          "$ref": "GoogleAppsCardV1CardHeader"
        },
        "displayStyle": {
          "enum": [
            "DISPLAY_STYLE_UNSPECIFIED",
            "PEEK",
            "REPLACE"
          ],
          "description": "The `peekCardHeader` display style for. Not supported by Google Chat apps.",
          "type": "string",
          "enumDescriptions": [
            "Do not use.",
            "The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead.",
            "Default value. The card is shown by replacing the view of the top card in the card stack."
          ]
        },
        "header": {
          "$ref": "GoogleAppsCardV1CardHeader",
          "description": "The header of the card. A header usually contains a title and an image."
        },
        "fixedFooter": {
          "$ref": "GoogleAppsCardV1CardFixedFooter",
          "description": "The fixed footer shown at the bottom of this card."
        },
        "name": {
          "description": "Name of the card. Used as a card identifier in card navigation.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "KeyValue": {
      "id": "KeyValue",
      "type": "object",
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
      "properties": {
        "button": {
          "$ref": "Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "content": {
          "type": "string",
          "description": "The text of the content. Formatted text supported and always required."
        },
        "bottomLabel": {
          "type": "string",
          "description": "The text of the bottom label. Formatted text supported."
        },
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "icon": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image."
        },
        "contentMultiline": {
          "description": "If the content should be multiline.",
          "type": "boolean"
        },
        "topLabel": {
          "type": "string",
          "description": "The text of the top label. Formatted text supported."
        },
        "onClick": {
          "description": "The onclick action. Only the top label, bottom label and content region are clickable.",
          "$ref": "OnClick"
        }
      }
    },
    "GoogleAppsCardV1Section": {
      "properties": {
        "header": {
          "description": "The header of the section. Formatted text is supported.",
          "type": "string"
        },
        "widgets": {
          "type": "array",
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "GoogleAppsCardV1Widget"
          }
        },
        "uncollapsibleWidgetsCount": {
          "description": "The number of uncollapsible widgets. For example, when a section contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is `true`.",
          "type": "integer",
          "format": "int32"
        },
        "collapsible": {
          "description": "Indicates whether this section is collapsible. If a section is collapsible, the description must be given.",
          "type": "boolean"
        }
      },
      "description": "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
      "id": "GoogleAppsCardV1Section",
      "type": "object"
    },
    "User": {
      "properties": {
        "isAnonymous": {
          "description": "Output only. When `true`, the user is deleted or their profile is not visible.",
          "readOnly": true,
          "type": "boolean"
        },
        "name": {
          "description": "Resource name for a Google Chat user. For human users, represents a person in the People API or a user in the Admin SDK Directory API. Format: `users/{user}`",
          "type": "string"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "HUMAN",
            "BOT"
          ],
          "description": "User type.",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Human user.",
            "Chat app user."
          ],
          "type": "string"
        },
        "domainId": {
          "description": "Unique identifier of the user's Google Workspace domain.",
          "type": "string"
        },
        "displayName": {
          "readOnly": true,
          "description": "Output only. The user's display name.",
          "type": "string"
        }
      },
      "id": "User",
      "type": "object",
      "description": "A user in Google Chat."
    },
    "Color": {
      "properties": {
        "green": {
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float"
        },
        "alpha": {
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).",
          "format": "float",
          "type": "number"
        },
        "blue": {
          "type": "number",
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "format": "float"
        },
        "red": {
          "format": "float",
          "type": "number",
          "description": "The amount of red in the color as a value in the interval [0, 1]."
        }
      },
      "type": "object",
      "id": "Color",
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ..."
    },
    "Membership": {
      "id": "Membership",
      "properties": {
        "member": {
          "$ref": "User",
          "description": "A Google Chat user or app. Format: `users/{user}` or `users/app` When `users/{user}`, represents a [person](https://developers.google.com/people/api/rest/v1/people) in the People API or a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. When `users/app`, represents a Chat app creating membership for itself."
        },
        "name": {
          "description": "Resource name of the membership. Format: spaces/{space}/members/{member}",
          "type": "string"
        },
        "state": {
          "description": "Output only. State of the membership.",
          "type": "string",
          "enumDescriptions": [
            "Default, do not use.",
            "The user has joined the space.",
            "The user has been invited, is able to join the space, but currently has not joined.",
            "The user is not a member of the space, has not been invited and is not able to join the space."
          ],
          "readOnly": true,
          "enum": [
            "MEMBERSHIP_STATE_UNSPECIFIED",
            "JOINED",
            "INVITED",
            "NOT_A_MEMBER"
          ]
        },
        "role": {
          "description": "Output only. User's role within a Chat space, which determines their permitted actions in the space.",
          "enumDescriptions": [
            "Default value. The user isn't a member of the space, but might be invited.",
            "A member of the space. The user has basic permissions, like sending messages to the space. In 1:1 and unnamed group conversations, everyone has this role.",
            "A space manager. The user has all basic permissions plus administrative permissions that allow them to manage the space, like adding or removing members. Only supports SpaceType.SPACE."
          ],
          "enum": [
            "MEMBERSHIP_ROLE_UNSPECIFIED",
            "ROLE_MEMBER",
            "ROLE_MANAGER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The creation time of the membership, such as when a member joined or was invited to join a space."
        }
      },
      "type": "object",
      "description": "Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space."
    },
    "Inputs": {
      "id": "Inputs",
      "description": "Types of data inputs for widgets. Users enter data with these inputs.",
      "properties": {
        "timeInput": {
          "$ref": "TimeInput",
          "description": "Time input values. Not supported by Chat apps."
        },
        "stringInputs": {
          "$ref": "StringInputs",
          "description": "Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented."
        },
        "dateTimeInput": {
          "description": "Date and time input values. Not supported by Chat apps.",
          "$ref": "DateTimeInput"
        },
        "dateInput": {
          "description": "Date input values. Not supported by Chat apps.",
          "$ref": "DateInput"
        }
      },
      "type": "object"
    },
    "StringInputs": {
      "type": "object",
      "id": "StringInputs",
      "properties": {
        "value": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "An array of strings entered by the user."
        }
      },
      "description": "Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented."
    },
    "Media": {
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "Name of the media resource."
        }
      },
      "type": "object",
      "description": "Media resource.",
      "id": "Media"
    },
    "GoogleAppsCardV1OnClick": {
      "description": "Represents the response to an `onClick` event.",
      "id": "GoogleAppsCardV1OnClick",
      "properties": {
        "openDynamicLinkAction": {
          "description": "An add-on triggers this action when the action needs to open a link. This differs from the `open_link` above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "card": {
          "$ref": "GoogleAppsCardV1Card",
          "description": "A new card is pushed to the card stack after clicking if specified."
        },
        "action": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "If specified, an action is triggered by this `onClick`."
        },
        "openLink": {
          "$ref": "GoogleAppsCardV1OpenLink",
          "description": "If specified, this `onClick` triggers an open link action."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1SwitchControl": {
      "description": "Either a toggle-style switch or a checkbox.",
      "properties": {
        "controlType": {
          "description": "The control type, either switch or checkbox.",
          "enum": [
            "SWITCH",
            "CHECKBOX",
            "CHECK_BOX"
          ],
          "type": "string",
          "enumDescriptions": [
            "A toggle-style switch.",
            "Deprecated in favor of `CHECK_BOX`.",
            "A checkbox."
          ]
        },
        "selected": {
          "type": "boolean",
          "description": "If the switch is selected."
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The action when the switch state is changed."
        },
        "value": {
          "description": "The value is what is passed back in the callback.",
          "type": "string"
        },
        "name": {
          "description": "The name of the switch widget that's used in `formInput`.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1SwitchControl",
      "type": "object"
    },
    "GoogleAppsCardV1OpenLink": {
      "description": "Represents an `onClick` event that opens a hyperlink.",
      "id": "GoogleAppsCardV1OpenLink",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        },
        "onClose": {
          "enumDescriptions": [
            "Default value. The card does not reload; nothing happens.",
            "Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the parent card is blocked until the child window closes."
          ],
          "enum": [
            "NOTHING",
            "RELOAD"
          ],
          "description": "Whether the client forgets about a link after opening it, or observes it until the window closes. Not supported by Chat apps.",
          "type": "string"
        },
        "openAs": {
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ],
          "enumDescriptions": [
            "The link opens as a full size window (if that's the frame used by the client.",
            "The link opens as an overlay, such as a pop-up."
          ],
          "type": "string",
          "description": "How to open a link. Not supported by Chat apps."
        }
      },
      "type": "object"
    },
    "Annotation": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "ANNOTATION_TYPE_UNSPECIFIED",
            "USER_MENTION",
            "SLASH_COMMAND"
          ],
          "description": "The type of this annotation.",
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A user is mentioned.",
            "A slash command is invoked."
          ]
        },
        "slashCommand": {
          "description": "The metadata for a slash command.",
          "$ref": "SlashCommandMetadata"
        },
        "length": {
          "type": "integer",
          "description": "Length of the substring in the plain-text message body this annotation corresponds to.",
          "format": "int32"
        },
        "userMention": {
          "description": "The metadata of user mention.",
          "$ref": "UserMentionMetadata"
        },
        "startIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to."
        }
      },
      "id": "Annotation",
      "description": "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```"
    },
    "GoogleAppsCardV1BorderStyle": {
      "description": "Represents the complete border style applied to widgets.",
      "type": "object",
      "properties": {
        "cornerRadius": {
          "type": "integer",
          "format": "int32",
          "description": "The corner radius for the border."
        },
        "type": {
          "type": "string",
          "description": "The border type.",
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ],
          "enum": [
            "BORDER_TYPE_UNSPECIFIED",
            "NO_BORDER",
            "STROKE"
          ]
        },
        "strokeColor": {
          "description": "The colors to use when the type is `BORDER_TYPE_STROKE`.",
          "$ref": "Color"
        }
      },
      "id": "GoogleAppsCardV1BorderStyle"
    },
    "GoogleAppsCardV1Icon": {
      "type": "object",
      "id": "GoogleAppsCardV1Icon",
      "properties": {
        "altText": {
          "description": "The description of the icon, used for accessibility. The default value is provided if you don't specify one.",
          "type": "string"
        },
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "description": "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.",
          "type": "string"
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "knownIcon": {
          "type": "string",
          "description": "The icon specified by the string name of a list of known icons."
        }
      }
    },
    "Section": {
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
      "properties": {
        "header": {
          "description": "The header of the section, text formatted supported.",
          "type": "string"
        },
        "widgets": {
          "type": "array",
          "items": {
            "$ref": "WidgetMarkup"
          },
          "description": "A section must contain at least 1 widget."
        }
      },
      "id": "Section",
      "type": "object"
    },
    "GoogleAppsCardV1CardFixedFooter": {
      "type": "object",
      "id": "GoogleAppsCardV1CardFixedFooter",
      "properties": {
        "secondaryButton": {
          "description": "The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set.",
          "$ref": "GoogleAppsCardV1Button"
        },
        "primaryButton": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "The primary button of the fixed footer. The button must be a text button with text and color set."
        }
      },
      "description": "A persistent (sticky) footer that is added to the bottom of the card."
    },
    "GoogleAppsCardV1Suggestions": {
      "id": "GoogleAppsCardV1Suggestions",
      "properties": {
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1SuggestionItem"
          },
          "type": "array",
          "description": "A list of suggestions used for autocomplete recommendations."
        }
      },
      "description": "A container wrapping elements necessary for showing suggestion items used in text input autocomplete.",
      "type": "object"
    },
    "GoogleAppsCardV1Image": {
      "properties": {
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "The action triggered by an `onClick` event."
        },
        "imageUrl": {
          "type": "string",
          "description": "An image URL."
        },
        "altText": {
          "type": "string",
          "description": "The alternative text of this image, used for accessibility."
        }
      },
      "description": "An image that is specified by a URL and can have an `onClick` action.",
      "id": "GoogleAppsCardV1Image",
      "type": "object"
    },
    "Dialog": {
      "id": "Dialog",
      "properties": {
        "body": {
          "description": "Input only. Body of the dialog, which is rendered in a modal. Google Chat apps do not support the following card entities: `DateTimePicker`, `OnChangeAction`.",
          "$ref": "GoogleAppsCardV1Card"
        }
      },
      "description": "Wrapper around the card body of the dialog.",
      "type": "object"
    },
    "GoogleAppsCardV1SelectionInput": {
      "type": "object",
      "id": "GoogleAppsCardV1SelectionInput",
      "description": "A widget that creates a UI item with options for users to select. For example, a dropdown menu.",
      "properties": {
        "label": {
          "description": "The label displayed ahead of the switch control.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1SelectionItem"
          },
          "description": "An array of the selected items.",
          "type": "array"
        },
        "type": {
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ],
          "enumDescriptions": [
            "A checkbox.",
            "A radio button.",
            "A switch.",
            "A dropdown menu."
          ],
          "type": "string",
          "description": "The type of the selection."
        },
        "name": {
          "description": "The name of the text input which is used in `formInput`.",
          "type": "string"
        },
        "onChangeAction": {
          "description": "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button.",
          "$ref": "GoogleAppsCardV1Action"
        }
      }
    },
    "TextButton": {
      "type": "object",
      "description": "A button with text and onclick action.",
      "id": "TextButton",
      "properties": {
        "onClick": {
          "description": "The onclick action of the button.",
          "$ref": "OnClick"
        },
        "text": {
          "description": "The text of the button.",
          "type": "string"
        }
      }
    },
    "ActionParameter": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        },
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        }
      },
      "type": "object",
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "id": "ActionParameter"
    },
    "MatchedUrl": {
      "description": "A matched url in a Chat message. Chat apps can preview matched URLs. For more information, refer to [Preview links](https://developers.google.com/chat/how-tos/preview-links).",
      "properties": {
        "url": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The url that was matched."
        }
      },
      "type": "object",
      "id": "MatchedUrl"
    },
    "ActionStatus": {
      "id": "ActionStatus",
      "properties": {
        "statusCode": {
          "type": "string",
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ],
          "enumDescriptions": [
            "Not an error; returned on success. HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ],
          "description": "The status code."
        },
        "userFacingMessage": {
          "type": "string",
          "description": "The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent."
        }
      },
      "description": "Represents the status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs).",
      "type": "object"
    },
    "OnClick": {
      "type": "object",
      "properties": {
        "openLink": {
          "$ref": "OpenLink",
          "description": "This onclick triggers an open link action if specified."
        },
        "action": {
          "description": "A form action will be triggered by this onclick if specified.",
          "$ref": "FormAction"
        }
      },
      "id": "OnClick",
      "description": "An onclick action (e.g. open a link)."
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "details": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ListSpacesResponse": {
      "properties": {
        "spaces": {
          "items": {
            "$ref": "Space"
          },
          "description": "List of spaces in the requested (or first) page.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages."
        }
      },
      "id": "ListSpacesResponse",
      "type": "object"
    },
    "ImageButton": {
      "id": "ImageButton",
      "type": "object",
      "description": "An image button with an onclick action.",
      "properties": {
        "name": {
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify.",
          "type": "string"
        },
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "icon": {
          "type": "string",
          "description": "The icon specified by an enum that indices to an icon provided by Chat API.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ]
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "resources": {
    "media": {
      "methods": {
        "download": {
          "flatPath": "v1/media/{mediaId}",
          "parameters": {
            "resourceName": {
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name.",
              "location": "path",
              "pattern": "^.*$",
              "type": "string",
              "required": true
            }
          },
          "id": "chat.media.download",
          "scopes": [
            "https://www.googleapis.com/auth/chat.messages",
            "https://www.googleapis.com/auth/chat.messages.readonly"
          ],
          "description": "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
          "httpMethod": "GET",
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "Media"
          },
          "supportsMediaDownload": true,
          "path": "v1/media/{+resourceName}"
        }
      }
    },
    "rooms": {
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/messages",
              "httpMethod": "POST",
              "flatPath": "v1/rooms/{roomsId}/conversations/{conversationsId}/messages",
              "parameters": {
                "parent": {
                  "pattern": "^rooms/[^/]+/conversations/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}",
                  "location": "path"
                },
                "messageReplyOption": {
                  "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.",
                  "enum": [
                    "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                    "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                    "REPLY_MESSAGE_OR_FAIL"
                  ],
                  "type": "string",
                  "location": "query",
                  "enumDescriptions": [
                    "Default. Starts a thread.",
                    "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                    "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
                  ]
                },
                "messageId": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message)."
                },
                "requestId": {
                  "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
                  "type": "string",
                  "location": "query"
                },
                "threadKey": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread)."
                }
              },
              "response": {
                "$ref": "Message"
              },
              "id": "chat.rooms.conversations.messages",
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "request": {
                "$ref": "Message"
              }
            }
          }
        }
      },
      "methods": {
        "messages": {
          "request": {
            "$ref": "Message"
          },
          "httpMethod": "POST",
          "path": "v1/{+parent}/messages",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameterOrder": [
            "parent"
          ],
          "parameters": {
            "threadKey": {
              "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).",
              "type": "string",
              "location": "query"
            },
            "messageReplyOption": {
              "location": "query",
              "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.",
              "enum": [
                "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                "REPLY_MESSAGE_OR_FAIL"
              ],
              "type": "string",
              "enumDescriptions": [
                "Default. Starts a thread.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
              ]
            },
            "messageId": {
              "type": "string",
              "location": "query",
              "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message)."
            },
            "requestId": {
              "location": "query",
              "type": "string",
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message."
            },
            "parent": {
              "pattern": "^rooms/[^/]+$",
              "location": "path",
              "required": true,
              "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}",
              "type": "string"
            }
          },
          "flatPath": "v1/rooms/{roomsId}/messages",
          "response": {
            "$ref": "Message"
          },
          "id": "chat.rooms.messages"
        },
        "webhooks": {
          "request": {
            "$ref": "Message"
          },
          "response": {
            "$ref": "Message"
          },
          "parameterOrder": [
            "parent"
          ],
          "flatPath": "v1/rooms/{roomsId}/webhooks",
          "path": "v1/{+parent}/webhooks",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameters": {
            "requestId": {
              "location": "query",
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
              "type": "string"
            },
            "messageReplyOption": {
              "enumDescriptions": [
                "Default. Starts a thread.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
              ],
              "location": "query",
              "enum": [
                "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                "REPLY_MESSAGE_OR_FAIL"
              ],
              "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.",
              "type": "string"
            },
            "messageId": {
              "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).",
              "type": "string",
              "location": "query"
            },
            "parent": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}",
              "pattern": "^rooms/[^/]+$"
            },
            "threadKey": {
              "location": "query",
              "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "id": "chat.rooms.webhooks"
        }
      }
    },
    "spaces": {
      "methods": {
        "get": {
          "description": "Returns a space. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
          "parameters": {
            "name": {
              "description": "Required. Resource name of the space, in the form \"spaces/*\". Format: spaces/{space}",
              "pattern": "^spaces/[^/]+$",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Space"
          },
          "httpMethod": "GET",
          "id": "chat.spaces.get",
          "flatPath": "v1/spaces/{spacesId}"
        },
        "webhooks": {
          "response": {
            "$ref": "Message"
          },
          "flatPath": "v1/spaces/{spacesId}/webhooks",
          "httpMethod": "POST",
          "request": {
            "$ref": "Message"
          },
          "path": "v1/{+parent}/webhooks",
          "id": "chat.spaces.webhooks",
          "parameters": {
            "messageReplyOption": {
              "type": "string",
              "enumDescriptions": [
                "Default. Starts a thread.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
              ],
              "location": "query",
              "enum": [
                "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                "REPLY_MESSAGE_OR_FAIL"
              ],
              "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces."
            },
            "threadKey": {
              "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).",
              "location": "query",
              "type": "string"
            },
            "parent": {
              "pattern": "^spaces/[^/]+$",
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}"
            },
            "messageId": {
              "location": "query",
              "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).",
              "type": "string"
            },
            "requestId": {
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
              "type": "string",
              "location": "query"
            }
          },
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameterOrder": [
            "parent"
          ]
        },
        "list": {
          "flatPath": "v1/spaces",
          "httpMethod": "GET",
          "description": "Lists spaces the caller is a member of. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). ",
          "parameters": {
            "pageSize": {
              "description": "Optional. The maximum number of spaces to return. The service may return fewer than this value. If unspecified, at most 100 spaces are returned. The maximum value is 1000; values above 1000 are coerced to 1000. Negative values return an INVALID_ARGUMENT error.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. A page token, received from a previous list spaces call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided must match the call that provided the page token."
            }
          },
          "id": "chat.spaces.list",
          "response": {
            "$ref": "ListSpacesResponse"
          },
          "parameterOrder": [],
          "path": "v1/spaces"
        }
      },
      "resources": {
        "members": {
          "methods": {
            "get": {
              "path": "v1/{+name}",
              "id": "chat.spaces.members.get",
              "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
              "description": "Returns a membership. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Membership"
              },
              "scopes": [
                "https://www.googleapis.com/auth/chat.memberships"
              ],
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "pattern": "^spaces/[^/]+/members/[^/]+$",
                  "required": true,
                  "location": "path",
                  "description": "Required. Resource name of the membership to retrieve. Format: spaces/{space}/members/{member}",
                  "type": "string"
                }
              }
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/chat.memberships"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/spaces/{spacesId}/members",
              "description": "Lists memberships in a space. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "id": "chat.spaces.members.list",
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "description": "The maximum number of memberships to return. The service may return fewer than this value. If unspecified, at most 100 memberships are returned. The maximum value is 1000; values above 1000 are coerced to 1000. Negative values return an INVALID_ARGUMENT error.",
                  "type": "integer"
                },
                "parent": {
                  "description": "Required. The resource name of the space for which to fetch a membership list. Format: spaces/{space}",
                  "type": "string",
                  "location": "path",
                  "pattern": "^spaces/[^/]+$",
                  "required": true
                },
                "pageToken": {
                  "location": "query",
                  "description": "A page token, received from a previous list memberships call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided must match the call that provided the page token.",
                  "type": "string"
                }
              },
              "path": "v1/{+parent}/members"
            }
          }
        },
        "messages": {
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "id": "chat.spaces.messages.attachments.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^spaces/[^/]+/messages/[^/]+/attachments/[^/]+$"
                    }
                  },
                  "description": "Gets the metadata of a message attachment. The attachment data is fetched using the media API. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
                  "path": "v1/{+name}",
                  "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}",
                  "response": {
                    "$ref": "Attachment"
                  }
                }
              }
            }
          },
          "methods": {
            "update": {
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "Message"
              },
              "scopes": [
                "https://www.googleapis.com/auth/chat.messages"
              ],
              "response": {
                "$ref": "Message"
              },
              "httpMethod": "PUT",
              "parameters": {
                "allowMissing": {
                  "description": "Optional. If `true` and the message is not found, a new message is created and `updateMask` is ignored. The specified message ID must be [client-assigned](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message) or the request fails.",
                  "location": "query",
                  "type": "boolean"
                },
                "name": {
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`",
                  "location": "path"
                },
                "updateMask": {
                  "type": "string",
                  "format": "google-fieldmask",
                  "location": "query",
                  "description": "Required. The field paths to update. Separate multiple values with commas. Currently supported field paths: - text - cards (Requires [service account authentication](/chat/api/guides/auth/service-accounts).) - cards_v2 "
                }
              },
              "id": "chat.spaces.messages.update",
              "path": "v1/{+name}",
              "description": "Updates a message. For example usage, see [Update a message](https://developers.google.com/chat/api/guides/crudl/messages#update_a_message). Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)."
            },
            "create": {
              "path": "v1/{+parent}/messages",
              "flatPath": "v1/spaces/{spacesId}/messages",
              "parameterOrder": [
                "parent"
              ],
              "description": "Creates a message. For example usage, see [Create a message](https://developers.google.com/chat/api/guides/crudl/messages#create_a_message). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Fully supports [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). Supports [user authentication](https://developers.google.com/chat/api/guides/auth/users) as part of the [Google Workspace Developer Preview Program](https://developers.google.com/workspace/preview), which grants early access to certain features. [User authentication](https://developers.google.com/chat/api/guides/auth/users) requires the `chat.messages` or `chat.messages.create` authorization scope.",
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://www.googleapis.com/auth/chat.messages",
                "https://www.googleapis.com/auth/chat.messages.create"
              ],
              "request": {
                "$ref": "Message"
              },
              "httpMethod": "POST",
              "parameters": {
                "requestId": {
                  "type": "string",
                  "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
                  "location": "query"
                },
                "messageReplyOption": {
                  "enum": [
                    "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                    "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                    "REPLY_MESSAGE_OR_FAIL"
                  ],
                  "enumDescriptions": [
                    "Default. Starts a thread.",
                    "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                    "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
                  ],
                  "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.",
                  "type": "string",
                  "location": "query"
                },
                "messageId": {
                  "type": "string",
                  "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^spaces/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}"
                },
                "threadKey": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread)."
                }
              },
              "id": "chat.spaces.messages.create"
            },
            "get": {
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. Resource name of the message to retrieve. Format: spaces/{space}/messages/{message} If the message begins with `client-`, then it has a custom name assigned by a Chat app that created it with the Chat REST API. That Chat app (but not others) can pass the custom name to get, update, or delete the message. To learn more, see [create and name a message] (https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$"
                }
              },
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "scopes": [
                "https://www.googleapis.com/auth/chat.messages",
                "https://www.googleapis.com/auth/chat.messages.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Message"
              },
              "path": "v1/{+name}",
              "description": "Returns a message. For example usage, see [Read a message](https://developers.google.com/chat/api/guides/crudl/messages#read_a_message). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Fully supports [Service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). Supports [user authentication](https://developers.google.com/chat/api/guides/auth/users) as part of the [Google Workspace Developer Preview Program](https://developers.google.com/workspace/preview), which grants early access to certain features. [User authentication](https://developers.google.com/chat/api/guides/auth/users) requires the `chat.messages` or `chat.messages.readonly` authorization scope. Note: Might return a message from a blocked member or space.",
              "parameterOrder": [
                "name"
              ],
              "id": "chat.spaces.messages.get"
            },
            "delete": {
              "description": "Deletes a message. For example usage, see [Delete a message](https://developers.google.com/chat/api/guides/crudl/messages#delete_a_message). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Fully supports [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). Supports [user authentication](https://developers.google.com/chat/api/guides/auth/users) as part of the [Google Workspace Developer Preview Program](https://developers.google.com/workspace/preview), which grants early access to certain features. [User authentication](https://developers.google.com/chat/api/guides/auth/users) requires the `chat.messages` authorization scope.",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "description": "Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "type": "string"
                }
              },
              "id": "chat.spaces.messages.delete",
              "response": {
                "$ref": "Empty"
              },
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/chat.messages"
              ],
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}"
            }
          }
        }
      }
    },
    "dms": {
      "methods": {
        "webhooks": {
          "id": "chat.dms.webhooks",
          "response": {
            "$ref": "Message"
          },
          "flatPath": "v1/dms/{dmsId}/webhooks",
          "path": "v1/{+parent}/webhooks",
          "parameters": {
            "requestId": {
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
              "type": "string",
              "location": "query"
            },
            "threadKey": {
              "type": "string",
              "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).",
              "location": "query"
            },
            "messageReplyOption": {
              "type": "string",
              "location": "query",
              "enum": [
                "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                "REPLY_MESSAGE_OR_FAIL"
              ],
              "enumDescriptions": [
                "Default. Starts a thread.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
              ],
              "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces."
            },
            "parent": {
              "type": "string",
              "pattern": "^dms/[^/]+$",
              "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}",
              "required": true,
              "location": "path"
            },
            "messageId": {
              "location": "query",
              "type": "string",
              "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message)."
            }
          },
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameterOrder": [
            "parent"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "Message"
          }
        },
        "messages": {
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "httpMethod": "POST",
          "response": {
            "$ref": "Message"
          },
          "request": {
            "$ref": "Message"
          },
          "parameters": {
            "messageId": {
              "location": "query",
              "type": "string",
              "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message)."
            },
            "requestId": {
              "type": "string",
              "location": "query",
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message."
            },
            "parent": {
              "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}",
              "location": "path",
              "pattern": "^dms/[^/]+$",
              "required": true,
              "type": "string"
            },
            "threadKey": {
              "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).",
              "type": "string",
              "location": "query"
            },
            "messageReplyOption": {
              "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.",
              "enum": [
                "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                "REPLY_MESSAGE_OR_FAIL"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Default. Starts a thread.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
              ]
            }
          },
          "flatPath": "v1/dms/{dmsId}/messages",
          "path": "v1/{+parent}/messages",
          "id": "chat.dms.messages",
          "parameterOrder": [
            "parent"
          ]
        }
      },
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "httpMethod": "POST",
              "parameters": {
                "threadKey": {
                  "description": "Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "description": "Required. The resource name of the space in which to create a message. Format: spaces/{space}",
                  "pattern": "^dms/[^/]+/conversations/[^/]+$",
                  "type": "string",
                  "location": "path"
                },
                "requestId": {
                  "type": "string",
                  "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
                  "location": "query"
                },
                "messageReplyOption": {
                  "description": "Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.",
                  "location": "query",
                  "enum": [
                    "MESSAGE_REPLY_OPTION_UNSPECIFIED",
                    "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD",
                    "REPLY_MESSAGE_OR_FAIL"
                  ],
                  "enumDescriptions": [
                    "Default. Starts a thread.",
                    "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, the message starts a new thread instead.",
                    "Creates the message as a reply to the thread specified by thread ID or thread_key. If it fails, a NOT_FOUND error is returned instead."
                  ],
                  "type": "string"
                },
                "messageId": {
                  "description": "Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).",
                  "type": "string",
                  "location": "query"
                }
              },
              "request": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "flatPath": "v1/dms/{dmsId}/conversations/{conversationsId}/messages",
              "id": "chat.dms.conversations.messages",
              "response": {
                "$ref": "Message"
              },
              "path": "v1/{+parent}/messages"
            }
          }
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "basePath": ""
}

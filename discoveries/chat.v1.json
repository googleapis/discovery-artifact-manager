{
  "canonicalName": "Hangouts Chat",
  "batchPath": "batch",
  "servicePath": "",
  "revision": "20210626",
  "version_module": true,
  "name": "chat",
  "rootUrl": "https://chat.googleapis.com/",
  "discoveryVersion": "v1",
  "baseUrl": "https://chat.googleapis.com/",
  "description": "Enables bots to fetch information and perform actions in Google Chat. Authentication using a service account is a prerequisite for using the Google Chat REST API.",
  "basePath": "",
  "ownerDomain": "google.com",
  "resources": {
    "media": {
      "methods": {
        "download": {
          "flatPath": "v1/media/{mediaId}",
          "parameters": {
            "resourceName": {
              "pattern": "^.*$",
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name."
            }
          },
          "path": "v1/media/{+resourceName}",
          "description": "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
          "supportsMediaDownload": true,
          "parameterOrder": [
            "resourceName"
          ],
          "id": "chat.media.download",
          "httpMethod": "GET",
          "response": {
            "$ref": "Media"
          }
        }
      }
    },
    "spaces": {
      "resources": {
        "members": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "path": "v1/{+parent}/members",
              "parameterOrder": [
                "parent"
              ],
              "description": "Lists human memberships in a space.",
              "parameters": {
                "pageSize": {
                  "location": "query",
                  "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "A token identifying a page of results the server should return.",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^spaces/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "Required. The resource name of the space for which membership list is to be fetched, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "required": true
                }
              },
              "id": "chat.spaces.members.list",
              "flatPath": "v1/spaces/{spacesId}/members"
            },
            "get": {
              "response": {
                "$ref": "Membership"
              },
              "path": "v1/{+name}",
              "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
              "id": "chat.spaces.members.get",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^spaces/[^/]+/members/[^/]+$",
                  "required": true,
                  "description": "Required. Resource name of the membership to be retrieved, in the form \"spaces/*/members/*\". Example: spaces/AAAAMpdlehY/members/105115627578887013105",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Returns a membership."
            }
          }
        },
        "messages": {
          "methods": {
            "update": {
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "description": "Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards",
                  "location": "query"
                },
                "name": {
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/{+name}",
              "response": {
                "$ref": "Message"
              },
              "id": "chat.spaces.messages.update",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "Message"
              },
              "httpMethod": "PUT",
              "description": "Updates a message."
            },
            "get": {
              "httpMethod": "GET",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "id": "chat.spaces.messages.get",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the message to be retrieved, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Returns a message.",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Message"
              }
            },
            "delete": {
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Deletes a message.",
              "response": {
                "$ref": "Empty"
              },
              "id": "chat.spaces.messages.delete",
              "path": "v1/{+name}",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "httpMethod": "DELETE"
            },
            "create": {
              "parameters": {
                "parent": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^spaces/[^/]+$",
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"
                },
                "threadKey": {
                  "type": "string",
                  "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
                  "location": "query"
                }
              },
              "id": "chat.spaces.messages.create",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Message"
              },
              "flatPath": "v1/spaces/{spacesId}/messages",
              "description": "Creates a message.",
              "request": {
                "$ref": "Message"
              },
              "path": "v1/{+parent}/messages"
            }
          },
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^spaces/[^/]+/messages/[^/]+/attachments/[^/]+$",
                      "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\"."
                    }
                  },
                  "response": {
                    "$ref": "Attachment"
                  },
                  "httpMethod": "GET",
                  "id": "chat.spaces.messages.attachments.get",
                  "description": "Gets the metadata of a message attachment. The attachment data is fetched using the media API.",
                  "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}"
                }
              }
            }
          }
        }
      },
      "methods": {
        "list": {
          "parameterOrder": [],
          "response": {
            "$ref": "ListSpacesResponse"
          },
          "flatPath": "v1/spaces",
          "id": "chat.spaces.list",
          "parameters": {
            "pageSize": {
              "format": "int32",
              "location": "query",
              "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.",
              "type": "integer"
            },
            "pageToken": {
              "type": "string",
              "description": "A token identifying a page of results the server should return.",
              "location": "query"
            }
          },
          "description": "Lists spaces the caller is a member of.",
          "httpMethod": "GET",
          "path": "v1/spaces"
        },
        "webhooks": {
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "id": "chat.spaces.webhooks",
          "response": {
            "$ref": "Message"
          },
          "parameters": {
            "threadKey": {
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
              "location": "query",
              "type": "string"
            },
            "parent": {
              "pattern": "^spaces/[^/]+$",
              "type": "string",
              "location": "path",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "required": true
            }
          },
          "parameterOrder": [
            "parent"
          ],
          "path": "v1/{+parent}/webhooks",
          "httpMethod": "POST",
          "request": {
            "$ref": "Message"
          },
          "flatPath": "v1/spaces/{spacesId}/webhooks"
        },
        "get": {
          "parameterOrder": [
            "name"
          ],
          "description": "Returns a space.",
          "parameters": {
            "name": {
              "pattern": "^spaces/[^/]+$",
              "description": "Required. Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "v1/spaces/{spacesId}",
          "id": "chat.spaces.get",
          "response": {
            "$ref": "Space"
          },
          "httpMethod": "GET",
          "path": "v1/{+name}"
        }
      }
    },
    "rooms": {
      "methods": {
        "webhooks": {
          "request": {
            "$ref": "Message"
          },
          "id": "chat.rooms.webhooks",
          "parameterOrder": [
            "parent"
          ],
          "response": {
            "$ref": "Message"
          },
          "httpMethod": "POST",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "flatPath": "v1/rooms/{roomsId}/webhooks",
          "parameters": {
            "threadKey": {
              "type": "string",
              "location": "query",
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            },
            "parent": {
              "location": "path",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "type": "string",
              "required": true,
              "pattern": "^rooms/[^/]+$"
            }
          },
          "path": "v1/{+parent}/webhooks"
        },
        "messages": {
          "flatPath": "v1/rooms/{roomsId}/messages",
          "path": "v1/{+parent}/messages",
          "httpMethod": "POST",
          "id": "chat.rooms.messages",
          "response": {
            "$ref": "Message"
          },
          "parameters": {
            "threadKey": {
              "type": "string",
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
              "location": "query"
            },
            "parent": {
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^rooms/[^/]+$",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"
            }
          },
          "request": {
            "$ref": "Message"
          },
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameterOrder": [
            "parent"
          ]
        }
      },
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "flatPath": "v1/rooms/{roomsId}/conversations/{conversationsId}/messages",
              "response": {
                "$ref": "Message"
              },
              "path": "v1/{+parent}/messages",
              "id": "chat.rooms.conversations.messages",
              "parameters": {
                "parent": {
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^rooms/[^/]+/conversations/[^/]+$"
                },
                "threadKey": {
                  "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
                  "location": "query",
                  "type": "string"
                }
              },
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "request": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST"
            }
          }
        }
      }
    },
    "dms": {
      "methods": {
        "webhooks": {
          "id": "chat.dms.webhooks",
          "request": {
            "$ref": "Message"
          },
          "parameterOrder": [
            "parent"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "Message"
          },
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "flatPath": "v1/dms/{dmsId}/webhooks",
          "path": "v1/{+parent}/webhooks",
          "parameters": {
            "threadKey": {
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
              "location": "query",
              "type": "string"
            },
            "parent": {
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "required": true,
              "type": "string",
              "pattern": "^dms/[^/]+$",
              "location": "path"
            }
          }
        },
        "messages": {
          "flatPath": "v1/dms/{dmsId}/messages",
          "response": {
            "$ref": "Message"
          },
          "request": {
            "$ref": "Message"
          },
          "parameters": {
            "parent": {
              "pattern": "^dms/[^/]+$",
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"
            },
            "threadKey": {
              "location": "query",
              "type": "string",
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            }
          },
          "httpMethod": "POST",
          "id": "chat.dms.messages",
          "path": "v1/{+parent}/messages",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameterOrder": [
            "parent"
          ]
        }
      },
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "request": {
                "$ref": "Message"
              },
              "response": {
                "$ref": "Message"
              },
              "flatPath": "v1/dms/{dmsId}/conversations/{conversationsId}/messages",
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "path": "v1/{+parent}/messages",
              "parameterOrder": [
                "parent"
              ],
              "id": "chat.dms.conversations.messages",
              "httpMethod": "POST",
              "parameters": {
                "threadKey": {
                  "type": "string",
                  "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
                  "location": "query"
                },
                "parent": {
                  "location": "path",
                  "type": "string",
                  "pattern": "^dms/[^/]+/conversations/[^/]+$",
                  "required": true,
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"
                }
              }
            }
          }
        }
      }
    }
  },
  "ownerName": "Google",
  "schemas": {
    "ListSpacesResponse": {
      "id": "ListSpacesResponse",
      "properties": {
        "nextPageToken": {
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed.",
          "type": "string"
        },
        "spaces": {
          "items": {
            "$ref": "Space"
          },
          "description": "List of spaces in the requested (or first) page.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "Card": {
      "properties": {
        "cardActions": {
          "type": "array",
          "items": {
            "$ref": "CardAction"
          },
          "description": "The actions of this card."
        },
        "sections": {
          "items": {
            "$ref": "Section"
          },
          "description": "Sections are separated by a line divider.",
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Name of the card."
        },
        "header": {
          "$ref": "CardHeader",
          "description": "The header of the card. A header usually contains a title and an image."
        }
      },
      "id": "Card",
      "description": "A card is a UI element that can contain UI widgets such as texts, images.",
      "type": "object"
    },
    "GoogleAppsCardV1ImageCropStyle": {
      "properties": {
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "description": "The crop type.",
          "enum": [
            "IMAGE_CROP_TYPE_UNSPECIFIED",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "type": "string"
        },
        "aspectRatio": {
          "type": "number",
          "description": "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
          "format": "double"
        }
      },
      "type": "object",
      "description": "Represents the crop style applied to an image.",
      "id": "GoogleAppsCardV1ImageCropStyle"
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty"
    },
    "DeprecatedEvent": {
      "description": "Google Chat events.",
      "type": "object",
      "id": "DeprecatedEvent",
      "properties": {
        "space": {
          "description": "The room or DM in which the event occurred.",
          "$ref": "Space"
        },
        "action": {
          "$ref": "FormAction",
          "description": "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information."
        },
        "token": {
          "type": "string",
          "description": "A secret value that bots can use to verify if a request is from Google. The token is randomly generated by Google, remains static, and can be obtained from the Google Chat API configuration page in the Cloud Console. Developers can revoke/regenerate it if needed from the same page."
        },
        "user": {
          "$ref": "User",
          "description": "The user that triggered the event."
        },
        "threadKey": {
          "description": "The bot-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information.",
          "type": "string"
        },
        "type": {
          "enum": [
            "UNSPECIFIED",
            "MESSAGE",
            "ADDED_TO_SPACE",
            "REMOVED_FROM_SPACE",
            "CARD_CLICKED"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A message was sent in a room or direct message.",
            "The bot was added to a room or DM.",
            "The bot was removed from a room or DM.",
            "The bot's interactive card was clicked."
          ],
          "description": "The type of the event.",
          "type": "string"
        },
        "configCompleteRedirectUrl": {
          "type": "string",
          "description": "The URL the bot should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information."
        },
        "message": {
          "$ref": "Message",
          "description": "The message that triggered the event, if applicable."
        },
        "eventTime": {
          "type": "string",
          "description": "The timestamp indicating when the event was dispatched.",
          "format": "google-datetime"
        }
      }
    },
    "ActionResponse": {
      "description": "Parameters that a bot can use to configure how it's response is posted.",
      "properties": {
        "type": {
          "description": "The type of bot response.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "NEW_MESSAGE",
            "UPDATE_MESSAGE",
            "REQUEST_CONFIG"
          ],
          "enumDescriptions": [
            "Default type; will be handled as NEW_MESSAGE.",
            "Post as a new message in the topic.",
            "Update the bot's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT.",
            "Update a message, with cards only. (Only after a MESSAGE event with a matched url, or a CARD_CLICKED event on a human created message)."
          ],
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)"
        }
      },
      "type": "object",
      "id": "ActionResponse"
    },
    "User": {
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Human user.",
            "Bot user."
          ],
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "HUMAN",
            "BOT"
          ],
          "description": "User type."
        },
        "name": {
          "type": "string",
          "description": "Resource name, in the format \"users/*\"."
        },
        "displayName": {
          "description": "The user's display name.",
          "type": "string"
        },
        "isAnonymous": {
          "description": "True when the user is deleted or the user's profile is not visible.",
          "type": "boolean"
        },
        "domainId": {
          "type": "string",
          "description": "Obfuscated domain information."
        }
      },
      "description": "A user in Google Chat.",
      "id": "User"
    },
    "GoogleAppsCardV1Section": {
      "description": "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
      "id": "GoogleAppsCardV1Section",
      "properties": {
        "header": {
          "type": "string",
          "description": "The header of the section. Formatted text is supported."
        },
        "widgets": {
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "GoogleAppsCardV1Widget"
          },
          "type": "array"
        },
        "collapsible": {
          "description": "Indicates whether this section is collapsible. If a section is collapsible, the description must be given.",
          "type": "boolean"
        },
        "uncollapsibleWidgetsCount": {
          "type": "integer",
          "description": "The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`.",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "KeyValue": {
      "properties": {
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "content": {
          "description": "The text of the content. Formatted text supported and always required.",
          "type": "string"
        },
        "topLabel": {
          "type": "string",
          "description": "The text of the top label. Formatted text supported."
        },
        "onClick": {
          "description": "The onclick action. Only the top label, bottom label and content region are clickable.",
          "$ref": "OnClick"
        },
        "contentMultiline": {
          "type": "boolean",
          "description": "If the content should be multiline."
        },
        "button": {
          "$ref": "Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "bottomLabel": {
          "type": "string",
          "description": "The text of the bottom label. Formatted text supported."
        },
        "icon": {
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        }
      },
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
      "type": "object",
      "id": "KeyValue"
    },
    "SlashCommandMetadata": {
      "properties": {
        "bot": {
          "$ref": "User",
          "description": "The bot whose command was invoked."
        },
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "The command id of the invoked slash command."
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "INVOKE"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add bot to space.",
            "Invoke slash command in space."
          ],
          "description": "The type of slash command.",
          "type": "string"
        },
        "commandName": {
          "description": "The name of the invoked slash command.",
          "type": "string"
        },
        "triggersDialog": {
          "type": "boolean",
          "description": "Indicating whether the slash command is for a dialog."
        }
      },
      "type": "object",
      "id": "SlashCommandMetadata",
      "description": "Annotation metadata for slash commands (/)."
    },
    "GoogleAppsCardV1Divider": {
      "properties": {},
      "description": "A divider that appears in between widgets.",
      "type": "object",
      "id": "GoogleAppsCardV1Divider"
    },
    "ImageButton": {
      "properties": {
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        },
        "icon": {
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "type": "string",
          "description": "The icon specified by an enum that indices to an icon provided by Chat API.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "name": {
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify.",
          "type": "string"
        }
      },
      "id": "ImageButton",
      "description": "An image button with an onclick action.",
      "type": "object"
    },
    "GoogleAppsCardV1Action": {
      "type": "object",
      "id": "GoogleAppsCardV1Action",
      "properties": {
        "parameters": {
          "type": "array",
          "description": "List of action parameters.",
          "items": {
            "$ref": "GoogleAppsCardV1ActionParameter"
          }
        },
        "function": {
          "description": "Apps Script function to invoke when the containing element is clicked/activated.",
          "type": "string"
        },
        "persistValues": {
          "description": "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed.",
          "type": "boolean"
        },
        "loadIndicator": {
          "type": "string",
          "enum": [
            "SPINNER",
            "NONE"
          ],
          "enumDescriptions": [
            "Displays a spinner to indicate that content is loading.",
            "Nothing is displayed."
          ]
        }
      },
      "description": "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form."
    },
    "GoogleAppsCardV1Widget": {
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object",
      "properties": {
        "buttonList": {
          "$ref": "GoogleAppsCardV1ButtonList",
          "description": "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```"
        },
        "grid": {
          "$ref": "GoogleAppsCardV1Grid",
          "description": "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```"
        },
        "selectionInput": {
          "description": "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```",
          "$ref": "GoogleAppsCardV1SelectionInput"
        },
        "dateTimePicker": {
          "description": "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```",
          "$ref": "GoogleAppsCardV1DateTimePicker"
        },
        "image": {
          "$ref": "GoogleAppsCardV1Image",
          "description": "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/heba_salam.png\" \"altText\": \"Avatar for Heba Salam\" } ```"
        },
        "textInput": {
          "$ref": "GoogleAppsCardV1TextInput",
          "description": "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```"
        },
        "textParagraph": {
          "$ref": "GoogleAppsCardV1TextParagraph",
          "description": "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```"
        },
        "horizontalAlignment": {
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "description": "The horizontal alignment of this widget.",
          "type": "string"
        },
        "decoratedText": {
          "description": "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"heba.salam@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_heba_salam\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```",
          "$ref": "GoogleAppsCardV1DecoratedText"
        },
        "divider": {
          "$ref": "GoogleAppsCardV1Divider",
          "description": "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"
        }
      },
      "id": "GoogleAppsCardV1Widget"
    },
    "GoogleAppsCardV1OpenLink": {
      "properties": {
        "onClose": {
          "enumDescriptions": [
            "Doesn’t reload the card after the child window closes. Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the main card is blocked until the child window closes.",
            ""
          ],
          "type": "string",
          "enum": [
            "NOTHING",
            "RELOAD"
          ]
        },
        "url": {
          "type": "string",
          "description": "The URL to open."
        },
        "openAs": {
          "enumDescriptions": [
            "The link opens as a full size window (if that's the frame used by the client.",
            "The link opens as an overlay, such as a pop-up."
          ],
          "type": "string",
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ]
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1OpenLink"
    },
    "GoogleAppsCardV1Suggestions": {
      "type": "object",
      "id": "GoogleAppsCardV1Suggestions",
      "properties": {
        "items": {
          "description": "A list of suggestions items which will be used in are used in autocomplete.",
          "items": {
            "$ref": "GoogleAppsCardV1SuggestionItem"
          },
          "type": "array"
        }
      },
      "description": "A container wrapping elements necessary for showing suggestion items used in text input autocomplete."
    },
    "CardAction": {
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "id": "CardAction",
      "type": "object",
      "properties": {
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action for this action item."
        },
        "actionLabel": {
          "type": "string",
          "description": "The label used to be displayed in the action menu item."
        }
      }
    },
    "SlashCommand": {
      "type": "object",
      "id": "SlashCommand",
      "description": "A Slash Command in Chat.",
      "properties": {
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "The id of the slash command invoked."
        }
      }
    },
    "GoogleAppsCardV1SwitchControl": {
      "properties": {
        "controlType": {
          "enum": [
            "SWITCH",
            "CHECKBOX",
            "CHECK_BOX"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "Deprecated in favor of `CHECK_BOX`.",
            ""
          ],
          "description": "The control type, either switch or checkbox."
        },
        "selected": {
          "type": "boolean",
          "description": "If the switch is selected."
        },
        "onChangeAction": {
          "description": "The action when the switch state is changed.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "name": {
          "type": "string",
          "description": "The name of the switch widget that's used in formInput."
        },
        "value": {
          "description": "The value is what is passed back in the callback.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1SwitchControl"
    },
    "Color": {
      "type": "object",
      "id": "Color",
      "properties": {
        "alpha": {
          "type": "number",
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).",
          "format": "float"
        },
        "blue": {
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "format": "float",
          "type": "number"
        },
        "red": {
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float"
        },
        "green": {
          "type": "number",
          "format": "float",
          "description": "The amount of green in the color as a value in the interval [0, 1]."
        }
      },
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ..."
    },
    "GoogleAppsCardV1Icon": {
      "id": "GoogleAppsCardV1Icon",
      "type": "object",
      "properties": {
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "type": "string",
          "description": "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "altText": {
          "type": "string",
          "description": "The description of the icon, used for accessibility. The default value is provided if you don't specify one."
        },
        "knownIcon": {
          "description": "The icon specified by the string name of a list of known icons",
          "type": "string"
        }
      }
    },
    "Section": {
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
      "id": "Section",
      "properties": {
        "header": {
          "type": "string",
          "description": "The header of the section, text formatted supported."
        },
        "widgets": {
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "WidgetMarkup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CardWithId": {
      "description": "Widgets for chatbots to specify.",
      "type": "object",
      "properties": {
        "cardId": {
          "description": "Chatbot-specified identifier for this widget. Scoped within a message.",
          "type": "string"
        },
        "card": {
          "description": "Card proto that allows chatbots to specify UI elements and editable widgets.",
          "$ref": "GoogleAppsCardV1Card"
        }
      },
      "id": "CardWithId"
    },
    "TextParagraph": {
      "description": "A paragraph of text. Formatted text supported.",
      "id": "TextParagraph",
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1DecoratedText": {
      "id": "GoogleAppsCardV1DecoratedText",
      "properties": {
        "wrapText": {
          "type": "boolean",
          "description": "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated."
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "Only the top and bottom label and content region are clickable."
        },
        "topLabel": {
          "description": "The formatted text label that shows above the main text.",
          "type": "string"
        },
        "bottomLabel": {
          "type": "string",
          "description": "The formatted text label that shows below the main text."
        },
        "switchControl": {
          "description": "A switch widget can be clicked to change its state or trigger an action.",
          "$ref": "GoogleAppsCardV1SwitchControl"
        },
        "button": {
          "description": "A button that can be clicked to trigger an action.",
          "$ref": "GoogleAppsCardV1Button"
        },
        "startIcon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "The icon displayed in front of the text."
        },
        "text": {
          "type": "string",
          "description": "Required. The main widget formatted text. See Text formatting for details."
        },
        "icon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "Deprecated in favor of start_icon."
        },
        "endIcon": {
          "description": "An icon displayed after the text.",
          "$ref": "GoogleAppsCardV1Icon"
        }
      },
      "description": "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text.",
      "type": "object"
    },
    "Membership": {
      "description": "Represents a membership relation in Hangouts Chat.",
      "id": "Membership",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "member": {
          "$ref": "User",
          "description": "A User in Hangout Chat"
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Default, do not use.",
            "The user has joined the space.",
            "The user has been invited, is able to join the space, but currently has not joined.",
            "The user is not a member of the space, has not been invited and is not able to join the space."
          ],
          "description": "State of the membership.",
          "enum": [
            "MEMBERSHIP_STATE_UNSPECIFIED",
            "JOINED",
            "INVITED",
            "NOT_A_MEMBER"
          ]
        },
        "createTime": {
          "description": "The creation time of the membership a.k.a the time at which the member joined the space, if applicable.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "ListMembershipsResponse": {
      "properties": {
        "memberships": {
          "type": "array",
          "description": "List of memberships in the requested (or first) page.",
          "items": {
            "$ref": "Membership"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results."
        }
      },
      "type": "object",
      "id": "ListMembershipsResponse"
    },
    "GoogleAppsCardV1SelectionItem": {
      "description": "The item in the switch control. A radio button, at most one of the items is selected.",
      "type": "object",
      "id": "GoogleAppsCardV1SelectionItem",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value associated with this item. The client should use this as a form input value."
        },
        "text": {
          "type": "string",
          "description": "The text to be displayed."
        },
        "selected": {
          "description": "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.",
          "type": "boolean"
        }
      }
    },
    "GoogleAppsCardV1DateTimePicker": {
      "properties": {
        "onChangeAction": {
          "description": "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "timezoneOffsetDate": {
          "format": "int32",
          "description": "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side.",
          "type": "integer"
        },
        "name": {
          "type": "string",
          "description": "The name of the text input that's used in formInput, and uniquely identifies this input."
        },
        "valueMsEpoch": {
          "type": "string",
          "description": "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.",
          "format": "int64"
        },
        "label": {
          "description": "The label for the field that displays to the user.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "The user can select a date and time.",
            "The user can only select a date.",
            "The user can only select a time."
          ],
          "description": "The type of the date/time picker.",
          "enum": [
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ],
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1DateTimePicker",
      "description": "The widget that lets users to specify a date and time.",
      "type": "object"
    },
    "TextButton": {
      "description": "A button with text and onclick action.",
      "id": "TextButton",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of the button."
        },
        "onClick": {
          "description": "The onclick action of the button.",
          "$ref": "OnClick"
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1ButtonList": {
      "properties": {
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1Button"
          }
        }
      },
      "type": "object",
      "description": "A list of buttons layed out horizontally.",
      "id": "GoogleAppsCardV1ButtonList"
    },
    "Annotation": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of this annotation.",
          "enum": [
            "ANNOTATION_TYPE_UNSPECIFIED",
            "USER_MENTION",
            "SLASH_COMMAND"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A user is mentioned.",
            "A slash command is invoked."
          ]
        },
        "startIndex": {
          "format": "int32",
          "type": "integer",
          "description": "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length of the substring in the plain-text message body this annotation corresponds to."
        },
        "slashCommand": {
          "$ref": "SlashCommandMetadata",
          "description": "The metadata for a slash command."
        },
        "userMention": {
          "description": "The metadata of user mention.",
          "$ref": "UserMentionMetadata"
        }
      },
      "description": "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```",
      "id": "Annotation",
      "type": "object"
    },
    "GoogleAppsCardV1TextInput": {
      "id": "GoogleAppsCardV1TextInput",
      "description": "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions.",
      "properties": {
        "hintText": {
          "type": "string",
          "description": "The hint text."
        },
        "name": {
          "type": "string",
          "description": "The name of the text input which is used in formInput."
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The onChange action, for example, invoke a function."
        },
        "initialSuggestions": {
          "$ref": "GoogleAppsCardV1Suggestions",
          "description": "The initial suggestions made before any user input."
        },
        "type": {
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ],
          "type": "string",
          "description": "The style of the text, for example, a single line or multiple lines.",
          "enumDescriptions": [
            "The text is put into a single line.",
            "The text is put into multiple lines."
          ]
        },
        "label": {
          "description": "At least one of label and hintText must be specified.",
          "type": "string"
        },
        "value": {
          "description": "The default value when there is no input from the user.",
          "type": "string"
        },
        "autoCompleteAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items."
        }
      },
      "type": "object"
    },
    "OpenLink": {
      "id": "OpenLink",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        }
      },
      "description": "A link that opens a new window.",
      "type": "object"
    },
    "ActionParameter": {
      "type": "object",
      "id": "ActionParameter",
      "properties": {
        "key": {
          "description": "The name of the parameter for the action script.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        }
      },
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."
    },
    "Button": {
      "properties": {
        "textButton": {
          "$ref": "TextButton",
          "description": "A button with text and onclick action."
        },
        "imageButton": {
          "$ref": "ImageButton",
          "description": "A button with image and onclick action."
        }
      },
      "type": "object",
      "description": "A button. Can be a text button or an image button.",
      "id": "Button"
    },
    "GoogleAppsCardV1ImageComponent": {
      "id": "GoogleAppsCardV1ImageComponent",
      "properties": {
        "cropStyle": {
          "$ref": "GoogleAppsCardV1ImageCropStyle",
          "description": "The crop style to apply to the image."
        },
        "altText": {
          "description": "The accessibility label for the image.",
          "type": "string"
        },
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to the image."
        },
        "imageUri": {
          "description": "The image URL.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserMentionMetadata": {
      "description": "Annotation metadata for user mentions (@).",
      "id": "UserMentionMetadata",
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add user to space.",
            "Mention user in space."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "MENTION"
          ],
          "description": "The type of user mention.",
          "type": "string"
        },
        "user": {
          "$ref": "User",
          "description": "The user mentioned."
        }
      }
    },
    "Attachment": {
      "description": "An attachment in Hangouts Chat.",
      "id": "Attachment",
      "properties": {
        "source": {
          "description": "The source of the attachment.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "SOURCE_UNSPECIFIED",
            "DRIVE_FILE",
            "UPLOADED_CONTENT"
          ]
        },
        "contentType": {
          "description": "The content type (MIME type) of the file.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\"."
        },
        "attachmentDataRef": {
          "description": "A reference to the attachment data. This is used with the media API to download the attachment data.",
          "$ref": "AttachmentDataRef"
        },
        "downloadUri": {
          "type": "string",
          "description": "Output only. The download URL which should be used to allow a human user to download the attachment. Bots should not use this URL to download attachment content."
        },
        "driveDataRef": {
          "description": "A reference to the drive attachment. This is used with the Drive API.",
          "$ref": "DriveDataRef"
        },
        "contentName": {
          "description": "The original file name for the content, not the full path.",
          "type": "string"
        },
        "thumbnailUri": {
          "description": "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Bots should not use this URL to download attachment content.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DriveDataRef": {
      "type": "object",
      "id": "DriveDataRef",
      "description": "A reference to the data of a drive attachment.",
      "properties": {
        "driveFileId": {
          "description": "The id for the drive file, for use with the Drive API.",
          "type": "string"
        }
      }
    },
    "CardHeader": {
      "type": "object",
      "properties": {
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        },
        "imageStyle": {
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ],
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ],
          "type": "string",
          "description": "The image's type (e.g. square border or circular border)."
        },
        "subtitle": {
          "type": "string",
          "description": "The subtitle of the card header."
        },
        "title": {
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines.",
          "type": "string"
        }
      },
      "id": "CardHeader"
    },
    "AttachmentDataRef": {
      "type": "object",
      "id": "AttachmentDataRef",
      "description": "A reference to the data of an attachment.",
      "properties": {
        "resourceName": {
          "description": "The resource name of the attachment data. This is used with the media API to download the attachment data.",
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1CardFixedFooter": {
      "properties": {
        "primaryButton": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "The primary button of the fixed footer. The button must be a text button with text and color set."
        },
        "secondaryButton": {
          "description": "The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set.",
          "$ref": "GoogleAppsCardV1Button"
        }
      },
      "description": "A persistent (sticky) footer that is added to the bottom of the card.",
      "type": "object",
      "id": "GoogleAppsCardV1CardFixedFooter"
    },
    "GoogleAppsCardV1GridItem": {
      "properties": {
        "image": {
          "description": "The image that displays in the grid item.",
          "$ref": "GoogleAppsCardV1ImageComponent"
        },
        "id": {
          "description": "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters.",
          "type": "string"
        },
        "layout": {
          "description": "The layout to use for the grid item.",
          "type": "string",
          "enumDescriptions": [
            "No layout specified.",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "enum": [
            "GRID_ITEM_LAYOUT_UNSPECIFIED",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ]
        },
        "textAlignment": {
          "description": "The horizontal alignment of the grid item's text.",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string"
        },
        "title": {
          "description": "The grid item's title.",
          "type": "string"
        },
        "subtitle": {
          "description": "The grid item's subtitle.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1GridItem",
      "type": "object",
      "description": "Represents a single item in the grid layout."
    },
    "OnClick": {
      "properties": {
        "action": {
          "$ref": "FormAction",
          "description": "A form action will be triggered by this onclick if specified."
        },
        "openLink": {
          "$ref": "OpenLink",
          "description": "This onclick triggers an open link action if specified."
        }
      },
      "type": "object",
      "description": "An onclick action (e.g. open a link).",
      "id": "OnClick"
    },
    "GoogleAppsCardV1Image": {
      "description": "An image that is specified by a URL and can have an onClick action.",
      "type": "object",
      "id": "GoogleAppsCardV1Image",
      "properties": {
        "imageUrl": {
          "type": "string",
          "description": "An image URL."
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "altText": {
          "type": "string",
          "description": "The alternative text of this image, used for accessibility."
        }
      }
    },
    "GoogleAppsCardV1Button": {
      "type": "object",
      "id": "GoogleAppsCardV1Button",
      "properties": {
        "onClick": {
          "description": "The action to perform when the button is clicked.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "text": {
          "type": "string",
          "description": "The text of the button."
        },
        "altText": {
          "description": "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.",
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "description": "If true, the button is displayed in a disabled state and doesn't respond to user actions."
        },
        "icon": {
          "description": "The icon image.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "color": {
          "$ref": "Color",
          "description": "If set, the button is filled with a solid background."
        }
      },
      "description": "A button. Can be a text button or an image button."
    },
    "GoogleAppsCardV1OnClick": {
      "properties": {
        "openDynamicLinkAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back."
        },
        "card": {
          "$ref": "GoogleAppsCardV1Card",
          "description": "A new card is pushed to the card stack after clicking if specified."
        },
        "action": {
          "description": "If specified, an action is triggered by this onClick.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "openLink": {
          "description": "If specified, this onClick triggers an open link action.",
          "$ref": "GoogleAppsCardV1OpenLink"
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1OnClick"
    },
    "GoogleAppsCardV1Grid": {
      "type": "object",
      "id": "GoogleAppsCardV1Grid",
      "description": "Represents a Grid widget that displays items in a configurable grid layout.",
      "properties": {
        "columnCount": {
          "description": "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
          "type": "integer",
          "format": "int32"
        },
        "onClick": {
          "description": "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to each grid item."
        },
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1GridItem"
          },
          "type": "array",
          "description": "The items to display in the grid."
        },
        "title": {
          "type": "string",
          "description": "The text that displays in the grid header."
        }
      }
    },
    "GoogleAppsCardV1CardAction": {
      "description": "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser.",
      "id": "GoogleAppsCardV1CardAction",
      "properties": {
        "actionLabel": {
          "description": "The label that displays as the action menu item.",
          "type": "string"
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "The onclick action for this action item."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1SelectionInput": {
      "type": "object",
      "description": "A widget that creates a UI item (for example, a drop-down list) with options for users to select.",
      "id": "GoogleAppsCardV1SelectionInput",
      "properties": {
        "type": {
          "enumDescriptions": [
            "The selection type is a checkbox.",
            "The selection type is a radio button.",
            "The selection type is a switch.",
            "The selection type is a dropdown."
          ],
          "type": "string",
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ]
        },
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1SelectionItem"
          },
          "type": "array"
        },
        "onChangeAction": {
          "description": "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "label": {
          "type": "string",
          "description": "The label displayed ahead of the switch control."
        },
        "name": {
          "description": "The name of the text input which is used in formInput.",
          "type": "string"
        }
      }
    },
    "Message": {
      "id": "Message",
      "description": "A message in Hangouts Chat.",
      "type": "object",
      "properties": {
        "argumentText": {
          "description": "Plain-text body of the message with all bot mentions stripped out.",
          "type": "string"
        },
        "fallbackText": {
          "description": "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).",
          "type": "string"
        },
        "cardsV2": {
          "description": "Rich, formatted and interactive cards that can be used to display UI elements and editable widgets, such as: formatted text, buttons, clickable images, checkboxes, radio buttons. Cards are normally displayed below the plain-text body of the message. This v2 allows input widgets. The string key is a unique identifier among cards in the same message for identifying inputs.",
          "type": "array",
          "items": {
            "$ref": "CardWithId"
          }
        },
        "thread": {
          "$ref": "Thread",
          "description": "The thread the message belongs to."
        },
        "text": {
          "description": "Plain-text body of the message.",
          "type": "string"
        },
        "space": {
          "description": "The space the message belongs to.",
          "$ref": "Space"
        },
        "attachment": {
          "description": "User uploaded attachment.",
          "items": {
            "$ref": "Attachment"
          },
          "type": "array"
        },
        "annotations": {
          "items": {
            "$ref": "Annotation"
          },
          "description": "Output only. Annotations associated with the text in this message.",
          "type": "array"
        },
        "createTime": {
          "description": "Output only. The time at which the message was created in Hangouts Chat server.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "sender": {
          "$ref": "User",
          "description": "The user who created the message."
        },
        "cards": {
          "description": "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message.",
          "type": "array",
          "items": {
            "$ref": "Card"
          }
        },
        "name": {
          "type": "string"
        },
        "previewText": {
          "description": "Text for generating preview chips. This text will not be displayed to the user, but any links to images, web pages, videos, etc. included here will generate preview chips.",
          "type": "string"
        },
        "actionResponse": {
          "description": "Input only. Parameters that a bot can use to configure how its response is posted.",
          "$ref": "ActionResponse"
        },
        "slashCommand": {
          "$ref": "SlashCommand",
          "description": "Slash command information, if applicable."
        }
      }
    },
    "GoogleAppsCardV1SuggestionItem": {
      "type": "object",
      "description": "A suggestion item. Only supports text for now.",
      "id": "GoogleAppsCardV1SuggestionItem",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "Media": {
      "id": "Media",
      "properties": {
        "resourceName": {
          "description": "Name of the media resource.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Media resource."
    },
    "WidgetMarkup": {
      "type": "object",
      "id": "WidgetMarkup",
      "properties": {
        "textParagraph": {
          "description": "Display a text paragraph in this widget.",
          "$ref": "TextParagraph"
        },
        "image": {
          "description": "Display an image in this widget.",
          "$ref": "Image"
        },
        "buttons": {
          "items": {
            "$ref": "Button"
          },
          "type": "array",
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set."
        },
        "keyValue": {
          "description": "Display a key value item in this widget.",
          "$ref": "KeyValue"
        }
      },
      "description": "A widget is a UI element that presents texts, images, etc."
    },
    "GoogleAppsCardV1CardHeader": {
      "type": "object",
      "id": "GoogleAppsCardV1CardHeader",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines."
        },
        "imageAltText": {
          "type": "string",
          "description": "The alternative text of this image which is used for accessibility."
        },
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        },
        "imageType": {
          "type": "string",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "description": "The image's type."
        },
        "subtitle": {
          "type": "string",
          "description": "The subtitle of the card header."
        }
      }
    },
    "GoogleAppsCardV1Card": {
      "type": "object",
      "id": "GoogleAppsCardV1Card",
      "properties": {
        "header": {
          "$ref": "GoogleAppsCardV1CardHeader",
          "description": "The header of the card. A header usually contains a title and an image."
        },
        "fixedFooter": {
          "$ref": "GoogleAppsCardV1CardFixedFooter",
          "description": "The fixed footer shown at the bottom of this card."
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1Section"
          },
          "description": "Sections are separated by a line divider."
        },
        "name": {
          "type": "string",
          "description": "Name of the card, which is used as a identifier for the card in card navigation."
        },
        "peekCardHeader": {
          "$ref": "GoogleAppsCardV1CardHeader",
          "description": "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards."
        },
        "displayStyle": {
          "enumDescriptions": [
            "",
            "The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead.",
            "The card is shown by replacing the view of the top card in the card stack."
          ],
          "type": "string",
          "enum": [
            "DISPLAY_STYLE_UNSPECIFIED",
            "PEEK",
            "REPLACE"
          ],
          "description": "The display style for peekCardHeader."
        },
        "cardActions": {
          "description": "The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Setting\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1CardAction"
          }
        }
      },
      "description": "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Heba Salam\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/heba_salam.png\", \"imageAltText\": \"Avatar for Heba Salam\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"heba.salam@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```"
    },
    "FormAction": {
      "id": "FormAction",
      "properties": {
        "parameters": {
          "description": "List of action parameters.",
          "type": "array",
          "items": {
            "$ref": "ActionParameter"
          }
        },
        "actionMethodName": {
          "type": "string",
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the bot as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."
        }
      },
      "type": "object",
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form."
    },
    "GoogleAppsCardV1ActionParameter": {
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        },
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        }
      },
      "id": "GoogleAppsCardV1ActionParameter",
      "type": "object"
    },
    "GoogleAppsCardV1TextParagraph": {
      "description": "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.",
      "id": "GoogleAppsCardV1TextParagraph",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text that's shown in the widget."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1BorderStyle": {
      "type": "object",
      "description": "Represents the complete border style applied to widgets.",
      "properties": {
        "cornerRadius": {
          "type": "integer",
          "description": "The corner radius for the border.",
          "format": "int32"
        },
        "strokeColor": {
          "$ref": "Color",
          "description": "The colors to use when the type is `BORDER_TYPE_STROKE`."
        },
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ],
          "description": "The border type.",
          "type": "string",
          "enum": [
            "BORDER_TYPE_UNSPECIFIED",
            "NO_BORDER",
            "STROKE"
          ]
        }
      },
      "id": "GoogleAppsCardV1BorderStyle"
    },
    "Image": {
      "description": "An image that is specified by a URL and can have an onclick action.",
      "properties": {
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        },
        "aspectRatio": {
          "type": "number",
          "format": "double",
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."
        },
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        }
      },
      "id": "Image",
      "type": "object"
    },
    "Space": {
      "type": "object",
      "description": "A room or DM in Hangouts Chat.",
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "ROOM",
            "DM"
          ],
          "description": "Output only. The type of a space. This is deprecated. Use `single_user_bot_dm` instead.",
          "enumDescriptions": [
            "",
            "Multi-user spaces such as rooms and DMs between humans.",
            "1:1 Direct Message between a human and a bot, where all messages are flat."
          ],
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Output only. The display name (only if the space is a room). Please note that this field might not be populated in direct messages between humans."
        },
        "name": {
          "type": "string",
          "description": "Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehYs"
        },
        "threaded": {
          "description": "Whether the messages are threaded in this space.",
          "type": "boolean"
        },
        "singleUserBotDm": {
          "description": "Whether the space is a DM between a bot and a single human.",
          "type": "boolean"
        }
      },
      "id": "Space"
    },
    "Thread": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAMpdlehY/threads/UMxbHmzDlr4"
        }
      },
      "description": "A thread in Hangouts Chat.",
      "type": "object",
      "id": "Thread"
    }
  },
  "version": "v1",
  "protocol": "rest",
  "kind": "discovery#restDescription",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "mtlsRootUrl": "https://chat.mtls.googleapis.com/",
  "parameters": {
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "documentationLink": "https://developers.google.com/hangouts/chat",
  "title": "Google Chat API",
  "id": "chat:v1"
}

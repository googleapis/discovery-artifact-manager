{
  "schemas": {
    "Inputs": {
      "id": "Inputs",
      "properties": {
        "timeInput": {
          "$ref": "TimeInput",
          "description": "Time input values. Not supported by Chat apps."
        },
        "stringInputs": {
          "description": "Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented.",
          "$ref": "StringInputs"
        },
        "dateInput": {
          "$ref": "DateInput",
          "description": "Date input values. Not supported by Chat apps."
        },
        "dateTimeInput": {
          "description": "Date and time input values. Not supported by Chat apps.",
          "$ref": "DateTimeInput"
        }
      },
      "description": "Types of data inputs for widgets. Users enter data with these inputs.",
      "type": "object"
    },
    "Space": {
      "properties": {
        "type": {
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "",
            "Conversations between two or more humans.",
            "1:1 Direct Message between a human and a Chat app, where all messages are flat. Note that this does not include direct messages between two humans."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ROOM",
            "DM"
          ],
          "description": "Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer preview) instead. The type of a space."
        },
        "name": {
          "description": "Resource name of the space. Format: spaces/{space}",
          "type": "string"
        },
        "threaded": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Whether messages are threaded in this space."
        },
        "singleUserBotDm": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Whether the space is a DM between a Chat app and a single human."
        },
        "spaceDetails": {
          "description": "Details about the space including description and rules.",
          "$ref": "SpaceDetails"
        },
        "displayName": {
          "type": "string",
          "description": "The space's display name. For direct messages between humans, this field might be empty."
        }
      },
      "type": "object",
      "id": "Space",
      "description": "A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app."
    },
    "DriveDataRef": {
      "properties": {
        "driveFileId": {
          "type": "string",
          "description": "The id for the drive file, for use with the Drive API."
        }
      },
      "description": "A reference to the data of a drive attachment.",
      "id": "DriveDataRef",
      "type": "object"
    },
    "GoogleAppsCardV1DateTimePicker": {
      "type": "object",
      "id": "GoogleAppsCardV1DateTimePicker",
      "description": "The widget that lets users to specify a date and time. Not supported by Google Chat apps.",
      "properties": {
        "type": {
          "description": "The type of the date/time picker.",
          "enum": [
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ],
          "enumDescriptions": [
            "The user can select a date and time.",
            "The user can only select a date.",
            "The user can only select a time."
          ],
          "type": "string"
        },
        "timezoneOffsetDate": {
          "format": "int32",
          "description": "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side.",
          "type": "integer"
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation."
        },
        "name": {
          "type": "string",
          "description": "The name of the text input that's used in `formInput`, and uniquely identifies this input."
        },
        "label": {
          "description": "The label for the field that displays to the user.",
          "type": "string"
        },
        "valueMsEpoch": {
          "description": "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "id": "Attachment",
      "properties": {
        "source": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "The source of the attachment.",
          "enum": [
            "SOURCE_UNSPECIFIED",
            "DRIVE_FILE",
            "UPLOADED_CONTENT"
          ]
        },
        "contentName": {
          "description": "The original file name for the content, not the full path.",
          "type": "string"
        },
        "name": {
          "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
          "type": "string"
        },
        "attachmentDataRef": {
          "$ref": "AttachmentDataRef",
          "description": "A reference to the attachment data. This is used with the media API to download the attachment data."
        },
        "contentType": {
          "type": "string",
          "description": "The content type (MIME type) of the file."
        },
        "thumbnailUri": {
          "description": "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps should not use this URL to download attachment content.",
          "readOnly": true,
          "type": "string"
        },
        "driveDataRef": {
          "$ref": "DriveDataRef",
          "description": "A reference to the drive attachment. This is used with the Drive API."
        },
        "downloadUri": {
          "type": "string",
          "description": "Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps should not use this URL to download attachment content.",
          "readOnly": true
        }
      },
      "description": "An attachment in Google Chat."
    },
    "KeyValue": {
      "properties": {
        "bottomLabel": {
          "description": "The text of the bottom label. Formatted text supported.",
          "type": "string"
        },
        "button": {
          "$ref": "Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "onClick": {
          "description": "The onclick action. Only the top label, bottom label and content region are clickable.",
          "$ref": "OnClick"
        },
        "topLabel": {
          "type": "string",
          "description": "The text of the top label. Formatted text supported."
        },
        "contentMultiline": {
          "type": "boolean",
          "description": "If the content should be multiline."
        },
        "icon": {
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image.",
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "content": {
          "description": "The text of the content. Formatted text supported and always required.",
          "type": "string"
        }
      },
      "id": "KeyValue",
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
      "type": "object"
    },
    "TextButton": {
      "properties": {
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action of the button."
        },
        "text": {
          "type": "string",
          "description": "The text of the button."
        }
      },
      "id": "TextButton",
      "type": "object",
      "description": "A button with text and onclick action."
    },
    "GoogleAppsCardV1CardHeader": {
      "description": "Represents a card header.",
      "type": "object",
      "properties": {
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "type": "string",
          "description": "The image's type.",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ]
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        },
        "subtitle": {
          "type": "string",
          "description": "The subtitle of the card header."
        },
        "title": {
          "description": "Required. The title of the card header. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.",
          "type": "string"
        },
        "imageAltText": {
          "description": "The alternative text of this image which is used for accessibility.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1CardHeader"
    },
    "TimeZone": {
      "properties": {
        "offset": {
          "format": "int32",
          "type": "integer",
          "description": "The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC)."
        },
        "id": {
          "type": "string",
          "description": "The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such as \"America/Toronto\"."
        }
      },
      "description": "The timezone ID and offset from Coordinated Universal Time (UTC). Not supported by Chat apps.",
      "type": "object",
      "id": "TimeZone"
    },
    "DeprecatedEvent": {
      "description": "Google Chat events.",
      "type": "object",
      "properties": {
        "token": {
          "description": "A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).",
          "type": "string"
        },
        "configCompleteRedirectUrl": {
          "description": "The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information.",
          "type": "string"
        },
        "isDialogEvent": {
          "description": "True when the event is related to [dialogs](https://developers.google.com/chat/how-tos/dialogs).",
          "type": "boolean"
        },
        "space": {
          "$ref": "Space",
          "description": "The space in which the event occurred."
        },
        "threadKey": {
          "type": "string",
          "description": "The Chat app-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information."
        },
        "action": {
          "description": "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information.",
          "$ref": "FormAction"
        },
        "user": {
          "description": "The user that triggered the event.",
          "$ref": "User"
        },
        "common": {
          "description": "Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes information submitted by users interacting with [dialogs](https://developers.google.com/chat/how-tos/dialogs), like data entered on a card.",
          "$ref": "CommonEventObject"
        },
        "message": {
          "$ref": "Message",
          "description": "The message that triggered the event, if applicable."
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A message was sent in a space.",
            "The Chat app was added to a space.",
            "The Chat app was removed from a space.",
            "The Chat app's interactive card was clicked."
          ],
          "enum": [
            "UNSPECIFIED",
            "MESSAGE",
            "ADDED_TO_SPACE",
            "REMOVED_FROM_SPACE",
            "CARD_CLICKED"
          ],
          "description": "The type of the event.",
          "type": "string"
        },
        "eventTime": {
          "format": "google-datetime",
          "description": "The timestamp indicating when the event occurred.",
          "type": "string"
        },
        "dialogEventType": {
          "description": "The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) event received.",
          "type": "string",
          "enumDescriptions": [
            "This could be used when the corresponding event is not dialog related. For example an @mention.",
            "Any user action that opens a [dialog](https://developers.google.com/chat/how-tos/dialogs).",
            "A card click event from a [dialog](https://developers.google.com/chat/how-tos/dialogs).",
            "The [dialog](https://developers.google.com/chat/how-tos/dialogs) was cancelled."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "REQUEST_DIALOG",
            "SUBMIT_DIALOG",
            "CANCEL_DIALOG"
          ]
        }
      },
      "id": "DeprecatedEvent"
    },
    "ActionStatus": {
      "type": "object",
      "properties": {
        "userFacingMessage": {
          "description": "The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent.",
          "type": "string"
        },
        "statusCode": {
          "description": "The status code.",
          "type": "string",
          "enumDescriptions": [
            "Not an error; returned on success HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ],
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ]
        }
      },
      "id": "ActionStatus",
      "description": "Represents the status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs)."
    },
    "GoogleAppsCardV1Icon": {
      "type": "object",
      "id": "GoogleAppsCardV1Icon",
      "properties": {
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "knownIcon": {
          "description": "The icon specified by the string name of a list of known icons.",
          "type": "string"
        },
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "description": "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "type": "string"
        },
        "altText": {
          "description": "The description of the icon, used for accessibility. The default value is provided if you don't specify one.",
          "type": "string"
        }
      }
    },
    "WidgetMarkup": {
      "properties": {
        "buttons": {
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set.",
          "type": "array",
          "items": {
            "$ref": "Button"
          }
        },
        "textParagraph": {
          "description": "Display a text paragraph in this widget.",
          "$ref": "TextParagraph"
        },
        "keyValue": {
          "description": "Display a key value item in this widget.",
          "$ref": "KeyValue"
        },
        "image": {
          "description": "Display an image in this widget.",
          "$ref": "Image"
        }
      },
      "type": "object",
      "id": "WidgetMarkup",
      "description": "A widget is a UI element that presents texts, images, etc."
    },
    "ListSpacesResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed.",
          "type": "string"
        },
        "spaces": {
          "type": "array",
          "description": "List of spaces in the requested (or first) page.",
          "items": {
            "$ref": "Space"
          }
        }
      },
      "id": "ListSpacesResponse",
      "type": "object"
    },
    "GoogleAppsCardV1OnClick": {
      "id": "GoogleAppsCardV1OnClick",
      "type": "object",
      "description": "Represents the response to an `onClick` event.",
      "properties": {
        "action": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "If specified, an action is triggered by this `onClick`."
        },
        "card": {
          "description": "A new card is pushed to the card stack after clicking if specified.",
          "$ref": "GoogleAppsCardV1Card"
        },
        "openDynamicLinkAction": {
          "description": "An add-on triggers this action when the action needs to open a link. This differs from the `open_link` above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "openLink": {
          "description": "If specified, this `onClick` triggers an open link action.",
          "$ref": "GoogleAppsCardV1OpenLink"
        }
      }
    },
    "Image": {
      "description": "An image that is specified by a URL and can have an onclick action.",
      "properties": {
        "aspectRatio": {
          "type": "number",
          "format": "double",
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."
        },
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        },
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        }
      },
      "type": "object",
      "id": "Image"
    },
    "Media": {
      "id": "Media",
      "type": "object",
      "description": "Media resource.",
      "properties": {
        "resourceName": {
          "description": "Name of the media resource.",
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1SelectionItem": {
      "description": "A selectable item in the switch control.",
      "id": "GoogleAppsCardV1SelectionItem",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text to be displayed."
        },
        "selected": {
          "type": "boolean",
          "description": "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored."
        },
        "value": {
          "type": "string",
          "description": "The value associated with this item. The client should use this as a form input value."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1Card": {
      "properties": {
        "peekCardHeader": {
          "$ref": "GoogleAppsCardV1CardHeader",
          "description": "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards. Not supported by Google Chat apps."
        },
        "cardActions": {
          "description": "The card's actions. Actions are added to the card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Settings\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
          "items": {
            "$ref": "GoogleAppsCardV1CardAction"
          },
          "type": "array"
        },
        "fixedFooter": {
          "description": "The fixed footer shown at the bottom of this card.",
          "$ref": "GoogleAppsCardV1CardFixedFooter"
        },
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "GoogleAppsCardV1CardHeader"
        },
        "name": {
          "type": "string",
          "description": "Name of the card. Used as a card identifier in card navigation."
        },
        "displayStyle": {
          "type": "string",
          "enum": [
            "DISPLAY_STYLE_UNSPECIFIED",
            "PEEK",
            "REPLACE"
          ],
          "enumDescriptions": [
            "Do not use.",
            "The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead.",
            "Default value. The card is shown by replacing the view of the top card in the card stack."
          ],
          "description": "The `peekCardHeader` display style for. Not supported by Google Chat apps."
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1Section"
          },
          "description": "Sections are separated by a line divider."
        }
      },
      "id": "GoogleAppsCardV1Card",
      "type": "object",
      "description": "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Sasha\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/sasha.png\", \"imageAltText\": \"Avatar for Sasha\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"sasha@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```"
    },
    "GoogleAppsCardV1SuggestionItem": {
      "properties": {
        "text": {
          "type": "string",
          "description": "The suggested autocomplete result."
        }
      },
      "id": "GoogleAppsCardV1SuggestionItem",
      "type": "object",
      "description": "A suggestion item."
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "id": "Status",
      "type": "object"
    },
    "SlashCommandMetadata": {
      "description": "Annotation metadata for slash commands (/).",
      "id": "SlashCommandMetadata",
      "properties": {
        "triggersDialog": {
          "type": "boolean",
          "description": "Indicating whether the slash command is for a dialog."
        },
        "commandName": {
          "type": "string",
          "description": "The name of the invoked slash command."
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add Chat app to space.",
            "Invoke slash command in space."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "INVOKE"
          ],
          "type": "string",
          "description": "The type of slash command."
        },
        "bot": {
          "description": "The Chat app whose command was invoked.",
          "$ref": "User"
        },
        "commandId": {
          "type": "string",
          "description": "The command id of the invoked slash command.",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "CardAction": {
      "properties": {
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "OnClick"
        },
        "actionLabel": {
          "description": "The label used to be displayed in the action menu item.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "id": "CardAction"
    },
    "GoogleAppsCardV1Grid": {
      "type": "object",
      "properties": {
        "columnCount": {
          "type": "integer",
          "description": "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
          "format": "int32"
        },
        "title": {
          "type": "string",
          "description": "The text that displays in the grid header."
        },
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to each grid item."
        },
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1GridItem"
          },
          "type": "array",
          "description": "The items to display in the grid."
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters."
        }
      },
      "id": "GoogleAppsCardV1Grid",
      "description": "Represents a Grid widget that displays items in a configurable grid layout."
    },
    "Card": {
      "description": "A card is a UI element that can contain UI widgets such as texts, images.",
      "properties": {
        "sections": {
          "description": "Sections are separated by a line divider.",
          "items": {
            "$ref": "Section"
          },
          "type": "array"
        },
        "header": {
          "$ref": "CardHeader",
          "description": "The header of the card. A header usually contains a title and an image."
        },
        "cardActions": {
          "description": "The actions of this card.",
          "type": "array",
          "items": {
            "$ref": "CardAction"
          }
        },
        "name": {
          "description": "Name of the card.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Card"
    },
    "SlashCommand": {
      "id": "SlashCommand",
      "type": "object",
      "properties": {
        "commandId": {
          "description": "The id of the slash command invoked.",
          "type": "string",
          "format": "int64"
        }
      },
      "description": "A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat."
    },
    "GoogleAppsCardV1CardFixedFooter": {
      "type": "object",
      "properties": {
        "secondaryButton": {
          "description": "The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set.",
          "$ref": "GoogleAppsCardV1Button"
        },
        "primaryButton": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "The primary button of the fixed footer. The button must be a text button with text and color set."
        }
      },
      "id": "GoogleAppsCardV1CardFixedFooter",
      "description": "A persistent (sticky) footer that is added to the bottom of the card."
    },
    "GoogleAppsCardV1Action": {
      "type": "object",
      "properties": {
        "function": {
          "description": "Apps Script function to invoke when the containing element is clicked/activated.",
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "description": "List of action parameters.",
          "items": {
            "$ref": "GoogleAppsCardV1ActionParameter"
          }
        },
        "loadIndicator": {
          "description": "Specifies the loading indicator that the action displays while making the call to the action.",
          "enumDescriptions": [
            "Displays a spinner to indicate that content is loading.",
            "Nothing is displayed."
          ],
          "type": "string",
          "enum": [
            "SPINNER",
            "NONE"
          ]
        },
        "persistValues": {
          "type": "boolean",
          "description": "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed. Not supported by Google Chat apps."
        }
      },
      "id": "GoogleAppsCardV1Action",
      "description": "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form."
    },
    "FormAction": {
      "type": "object",
      "id": "FormAction",
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "properties": {
        "parameters": {
          "description": "List of action parameters.",
          "type": "array",
          "items": {
            "$ref": "ActionParameter"
          }
        },
        "actionMethodName": {
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired.",
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1Suggestions": {
      "type": "object",
      "id": "GoogleAppsCardV1Suggestions",
      "properties": {
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1SuggestionItem"
          },
          "description": "A list of suggestions used for autocomplete recommendations.",
          "type": "array"
        }
      },
      "description": "A container wrapping elements necessary for showing suggestion items used in text input autocomplete."
    },
    "GoogleAppsCardV1Divider": {
      "type": "object",
      "id": "GoogleAppsCardV1Divider",
      "description": "A divider that appears in between widgets.",
      "properties": {}
    },
    "ImageButton": {
      "id": "ImageButton",
      "description": "An image button with an onclick action.",
      "properties": {
        "icon": {
          "description": "The icon specified by an enum that indices to an icon provided by Chat API.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ]
        },
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        },
        "name": {
          "type": "string",
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        }
      },
      "type": "object"
    },
    "Dialog": {
      "id": "Dialog",
      "properties": {
        "body": {
          "description": "Input only. Body of the dialog, which is rendered in a modal. Google Chat apps do not support the following card entities: `DateTimePicker`, `OnChangeAction`.",
          "$ref": "GoogleAppsCardV1Card"
        }
      },
      "description": "Wrapper around the card body of the dialog.",
      "type": "object"
    },
    "Message": {
      "id": "Message",
      "properties": {
        "sender": {
          "readOnly": true,
          "description": "Output only. The user who created the message.",
          "$ref": "User"
        },
        "matchedUrl": {
          "readOnly": true,
          "$ref": "MatchedUrl",
          "description": "Output only. A URL in `spaces.messages.text` that matches a link preview pattern. For more information, refer to [Preview links](https://developers.google.com/chat/how-tos/preview-links)."
        },
        "text": {
          "description": "Plain-text body of the message. The first link to an image, video, web page, or other preview-able item generates a preview chip.",
          "type": "string"
        },
        "cards": {
          "description": "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message.",
          "items": {
            "$ref": "Card"
          },
          "type": "array"
        },
        "lastUpdateTime": {
          "description": "Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "space": {
          "description": "The space the message belongs to.",
          "$ref": "Space"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time at which the message was created in Google Chat server.",
          "readOnly": true
        },
        "annotations": {
          "description": "Output only. Annotations associated with the text in this message.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "Annotation"
          }
        },
        "fallbackText": {
          "description": "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).",
          "type": "string"
        },
        "argumentText": {
          "type": "string",
          "description": "Plain-text body of the message with all Chat app mentions stripped out."
        },
        "name": {
          "type": "string",
          "description": "Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`"
        },
        "actionResponse": {
          "description": "Input only. Parameters that a Chat app can use to configure how its response is posted.",
          "$ref": "ActionResponse"
        },
        "slashCommand": {
          "readOnly": true,
          "description": "Output only. Slash command information, if applicable.",
          "$ref": "SlashCommand"
        },
        "thread": {
          "$ref": "Thread",
          "description": "The thread the message belongs to."
        },
        "cardsV2": {
          "type": "array",
          "description": "Richly formatted and interactive cards that display UI elements and editable widgets, such as: - Formatted text - Buttons - Clickable images - Checkboxes - Radio buttons - Input widgets. Cards are usually displayed below the text-body of a Chat message, but can situationally appear other places, such as [dialogs](https://developers.google.com/chat/how-tos/dialogs). The `cardId` is a unique identifier among cards in the same message and for identifying user input values. Currently supported widgets include: - `TextParagraph` - `DecoratedText` - `Image` - `ButtonList`",
          "items": {
            "$ref": "CardWithId"
          }
        },
        "attachment": {
          "items": {
            "$ref": "Attachment"
          },
          "type": "array",
          "description": "User uploaded attachment."
        }
      },
      "type": "object",
      "description": "A message in Google Chat."
    },
    "GoogleAppsCardV1TextInput": {
      "type": "object",
      "id": "GoogleAppsCardV1TextInput",
      "properties": {
        "label": {
          "type": "string",
          "description": "At least one of label and hintText must be specified."
        },
        "hintText": {
          "type": "string",
          "description": "The hint text."
        },
        "autoCompleteAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items."
        },
        "name": {
          "description": "The name of the text input which is used in `formInput`.",
          "type": "string"
        },
        "initialSuggestions": {
          "$ref": "GoogleAppsCardV1Suggestions",
          "description": "The initial suggestions made before any user input."
        },
        "type": {
          "enumDescriptions": [
            "The text is put into a single line.",
            "The text is put into multiple lines."
          ],
          "type": "string",
          "description": "The style of the text, for example, a single line or multiple lines.",
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ]
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The onChange action, for example, invoke a function."
        },
        "value": {
          "description": "The default value when there is no input from the user.",
          "type": "string"
        }
      },
      "description": "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions."
    },
    "GoogleAppsCardV1BorderStyle": {
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "BORDER_TYPE_UNSPECIFIED",
            "NO_BORDER",
            "STROKE"
          ],
          "description": "The border type.",
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ]
        },
        "cornerRadius": {
          "format": "int32",
          "description": "The corner radius for the border.",
          "type": "integer"
        },
        "strokeColor": {
          "$ref": "Color",
          "description": "The colors to use when the type is `BORDER_TYPE_STROKE`."
        }
      },
      "description": "Represents the complete border style applied to widgets.",
      "type": "object",
      "id": "GoogleAppsCardV1BorderStyle"
    },
    "CardWithId": {
      "id": "CardWithId",
      "properties": {
        "card": {
          "description": "Card proto that allows Chat apps to specify UI elements and editable widgets.",
          "$ref": "GoogleAppsCardV1Card"
        },
        "cardId": {
          "description": "Required for `cardsV2` messages. Chat app-specified identifier for this widget. Scoped within a message.",
          "type": "string"
        }
      },
      "description": "Widgets for Chat apps to specify.",
      "type": "object"
    },
    "AttachmentDataRef": {
      "type": "object",
      "description": "A reference to the data of an attachment.",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "The resource name of the attachment data. This is used with the media API to download the attachment data."
        }
      },
      "id": "AttachmentDataRef"
    },
    "ListMembershipsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results."
        },
        "memberships": {
          "description": "List of memberships in the requested (or first) page.",
          "type": "array",
          "items": {
            "$ref": "Membership"
          }
        }
      },
      "id": "ListMembershipsResponse",
      "type": "object"
    },
    "ActionParameter": {
      "type": "object",
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "properties": {
        "key": {
          "description": "The name of the parameter for the action script.",
          "type": "string"
        },
        "value": {
          "description": "The value of the parameter.",
          "type": "string"
        }
      },
      "id": "ActionParameter"
    },
    "GoogleAppsCardV1ImageCropStyle": {
      "type": "object",
      "description": "Represents the crop style applied to an image.",
      "id": "GoogleAppsCardV1ImageCropStyle",
      "properties": {
        "aspectRatio": {
          "description": "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
          "format": "double",
          "type": "number"
        },
        "type": {
          "description": "The crop type.",
          "enum": [
            "IMAGE_CROP_TYPE_UNSPECIFIED",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1DecoratedText": {
      "properties": {
        "switchControl": {
          "$ref": "GoogleAppsCardV1SwitchControl",
          "description": "A switch widget can be clicked to change its state or trigger an action."
        },
        "topLabel": {
          "type": "string",
          "description": "The formatted text label that shows above the main text."
        },
        "endIcon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "An icon displayed after the text."
        },
        "icon": {
          "description": "Deprecated in favor of start_icon.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "wrapText": {
          "description": "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated.",
          "type": "boolean"
        },
        "button": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "text": {
          "type": "string",
          "description": "Required. The main widget formatted text. See Text formatting for details."
        },
        "startIcon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "The icon displayed in front of the text."
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "Only the top and bottom label and content region are clickable."
        },
        "bottomLabel": {
          "type": "string",
          "description": "The formatted text label that shows below the main text."
        }
      },
      "description": "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text.",
      "type": "object",
      "id": "GoogleAppsCardV1DecoratedText"
    },
    "GoogleAppsCardV1ImageComponent": {
      "description": "Represents an image.",
      "type": "object",
      "id": "GoogleAppsCardV1ImageComponent",
      "properties": {
        "altText": {
          "description": "The accessibility label for the image.",
          "type": "string"
        },
        "cropStyle": {
          "$ref": "GoogleAppsCardV1ImageCropStyle",
          "description": "The crop style to apply to the image."
        },
        "imageUri": {
          "description": "The image URL.",
          "type": "string"
        },
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to the image."
        }
      }
    },
    "GoogleAppsCardV1CardAction": {
      "id": "GoogleAppsCardV1CardAction",
      "description": "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser.",
      "type": "object",
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The label that displays as the action menu item."
        },
        "onClick": {
          "description": "The `onClick` action for this action item.",
          "$ref": "GoogleAppsCardV1OnClick"
        }
      }
    },
    "Thread": {
      "description": "A thread in Google Chat.",
      "properties": {
        "name": {
          "description": "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAAAAAAAA/threads/TTTTTTTTTTT",
          "type": "string"
        }
      },
      "id": "Thread",
      "type": "object"
    },
    "OnClick": {
      "id": "OnClick",
      "properties": {
        "action": {
          "$ref": "FormAction",
          "description": "A form action will be triggered by this onclick if specified."
        },
        "openLink": {
          "$ref": "OpenLink",
          "description": "This onclick triggers an open link action if specified."
        }
      },
      "type": "object",
      "description": "An onclick action (e.g. open a link)."
    },
    "OpenLink": {
      "description": "A link that opens a new window.",
      "id": "OpenLink",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to open."
        }
      }
    },
    "Section": {
      "type": "object",
      "id": "Section",
      "properties": {
        "widgets": {
          "items": {
            "$ref": "WidgetMarkup"
          },
          "description": "A section must contain at least 1 widget.",
          "type": "array"
        },
        "header": {
          "description": "The header of the section, text formatted supported.",
          "type": "string"
        }
      },
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float)."
    },
    "Button": {
      "description": "A button. Can be a text button or an image button.",
      "id": "Button",
      "type": "object",
      "properties": {
        "textButton": {
          "$ref": "TextButton",
          "description": "A button with text and onclick action."
        },
        "imageButton": {
          "description": "A button with image and onclick action.",
          "$ref": "ImageButton"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {}
    },
    "GoogleAppsCardV1TextParagraph": {
      "type": "object",
      "id": "GoogleAppsCardV1TextParagraph",
      "properties": {
        "text": {
          "description": "The text that's shown in the widget.",
          "type": "string"
        }
      },
      "description": "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting) for details."
    },
    "SpaceDetails": {
      "description": "Details about the space including description and rules.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Optional. A description of the space. It could describe the space's discussion topic, functional purpose, or participants."
        },
        "guidelines": {
          "description": "Optional. The space's rules, expectations, and etiquette.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SpaceDetails"
    },
    "GoogleAppsCardV1SelectionInput": {
      "properties": {
        "type": {
          "enumDescriptions": [
            "A checkbox.",
            "A radio button.",
            "A switch.",
            "A dropdown menu."
          ],
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ],
          "type": "string",
          "description": "The type of the selection."
        },
        "label": {
          "type": "string",
          "description": "The label displayed ahead of the switch control."
        },
        "items": {
          "description": "An array of the selected items.",
          "items": {
            "$ref": "GoogleAppsCardV1SelectionItem"
          },
          "type": "array"
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button."
        },
        "name": {
          "description": "The name of the text input which is used in `formInput`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A widget that creates a UI item with options for users to select. For example, a dropdown menu.",
      "id": "GoogleAppsCardV1SelectionInput"
    },
    "GoogleAppsCardV1Button": {
      "type": "object",
      "id": "GoogleAppsCardV1Button",
      "properties": {
        "onClick": {
          "description": "The action to perform when the button is clicked.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "icon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "The icon image."
        },
        "disabled": {
          "description": "If `true`, the button is displayed in a disabled state and doesn't respond to user actions.",
          "type": "boolean"
        },
        "text": {
          "type": "string",
          "description": "The text of the button."
        },
        "altText": {
          "description": "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.",
          "type": "string"
        },
        "color": {
          "description": "If set, the button is filled with a solid background.",
          "$ref": "Color"
        }
      },
      "description": "A button. Can be a text button or an image button."
    },
    "CommonEventObject": {
      "properties": {
        "parameters": {
          "type": "object",
          "description": "Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userLocale": {
          "description": "The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\". Not supported by Chat apps.",
          "type": "string"
        },
        "invokedFunction": {
          "description": "Name of the invoked function associated with the widget. Only set for Chat apps.",
          "type": "string"
        },
        "formInputs": {
          "additionalProperties": {
            "$ref": "Inputs"
          },
          "type": "object",
          "description": "A map containing the current values of the widgets in a card. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. Depending on the input data type, a different object represents each input: For single-value widgets, `StringInput`. For multi-value widgets, an array of `StringInput` objects. For a date-time picker, a `DateTimeInput`. For a date-only picker, a `DateInput`. For a time-only picker, a `TimeInput`. Corresponds with the data entered by a user on a card in a [dialog](https://developers.google.com/chat/how-tos/dialogs)."
        },
        "timeZone": {
          "description": "The timezone ID and offset from Coordinated Universal Time (UTC).",
          "$ref": "TimeZone"
        },
        "hostApp": {
          "enum": [
            "UNSPECIFIED_HOST_APP",
            "GMAIL",
            "CALENDAR",
            "DRIVE",
            "DEMO",
            "DOCS",
            "SHEETS",
            "SLIDES",
            "DRAWINGS",
            "CHAT"
          ],
          "description": "The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.",
          "enumDescriptions": [
            "Google can't identify a host app.",
            "The add-on launches from Gmail.",
            "The add-on launches from Google Calendar.",
            "The add-on launches from Google Drive.",
            "Not used.",
            "The add-on launches from Google Docs.",
            "The add-on launches from Google Sheets.",
            "The add-on launches from Google Slides.",
            "The add-on launches from Google Drawings.",
            "A Google Chat app. Not used for Google Workspace Add-ons."
          ],
          "type": "string"
        },
        "platform": {
          "description": "The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_PLATFORM",
            "WEB",
            "IOS",
            "ANDROID"
          ]
        }
      },
      "description": "Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).",
      "type": "object",
      "id": "CommonEventObject"
    },
    "ChatAppLogEntry": {
      "properties": {
        "error": {
          "description": "The error code and message.",
          "$ref": "Status"
        },
        "deploymentFunction": {
          "type": "string",
          "description": "The unencrypted `callback_method` name that was running when the error was encountered."
        },
        "deployment": {
          "type": "string",
          "description": "The deployment that caused the error. For Chat apps built in Apps Script, this is the deployment ID defined by Apps Script."
        }
      },
      "id": "ChatAppLogEntry",
      "type": "object",
      "description": "JSON payload of error messages. If the Cloud Logging API is enabled, these error messages are logged to [Google Cloud Logging](https://cloud.google.com/logging/docs)."
    },
    "GoogleAppsCardV1Image": {
      "properties": {
        "onClick": {
          "description": "The action triggered by an `onClick` event.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "altText": {
          "description": "The alternative text of this image, used for accessibility.",
          "type": "string"
        },
        "imageUrl": {
          "description": "An image URL.",
          "type": "string"
        }
      },
      "description": "An image that is specified by a URL and can have an `onClick` action.",
      "type": "object",
      "id": "GoogleAppsCardV1Image"
    },
    "Annotation": {
      "description": "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A user is mentioned.",
            "A slash command is invoked."
          ],
          "type": "string",
          "enum": [
            "ANNOTATION_TYPE_UNSPECIFIED",
            "USER_MENTION",
            "SLASH_COMMAND"
          ],
          "description": "The type of this annotation."
        },
        "userMention": {
          "$ref": "UserMentionMetadata",
          "description": "The metadata of user mention."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length of the substring in the plain-text message body this annotation corresponds to."
        },
        "startIndex": {
          "type": "integer",
          "description": "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.",
          "format": "int32"
        },
        "slashCommand": {
          "description": "The metadata for a slash command.",
          "$ref": "SlashCommandMetadata"
        }
      },
      "id": "Annotation",
      "type": "object"
    },
    "GoogleAppsCardV1Section": {
      "description": "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
      "id": "GoogleAppsCardV1Section",
      "properties": {
        "header": {
          "type": "string",
          "description": "The header of the section. Formatted text is supported."
        },
        "collapsible": {
          "type": "boolean",
          "description": "Indicates whether this section is collapsible. If a section is collapsible, the description must be given."
        },
        "widgets": {
          "items": {
            "$ref": "GoogleAppsCardV1Widget"
          },
          "type": "array",
          "description": "A section must contain at least 1 widget."
        },
        "uncollapsibleWidgetsCount": {
          "type": "integer",
          "description": "The number of uncollapsible widgets. For example, when a section contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is `true`.",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "CardHeader": {
      "id": "CardHeader",
      "type": "object",
      "properties": {
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        },
        "imageStyle": {
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ],
          "description": "The image's type (e.g. square border or circular border).",
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ],
          "type": "string"
        },
        "title": {
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines.",
          "type": "string"
        }
      }
    },
    "DateInput": {
      "description": "Date input values. Not supported by Chat apps.",
      "type": "object",
      "id": "DateInput",
      "properties": {
        "msSinceEpoch": {
          "type": "string",
          "format": "int64",
          "description": "Time since epoch time, in milliseconds."
        }
      }
    },
    "ActionResponse": {
      "properties": {
        "url": {
          "description": "Input only. URL for users to auth or config. (Only for REQUEST_CONFIG response types.)",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Default type; will be handled as NEW_MESSAGE.",
            "Post as a new message in the topic.",
            "Update the Chat app's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT.",
            "Update the cards on a user's message. This is only permitted as a response to a MESSAGE event with a matched url, or a CARD_CLICKED event where the message sender type is HUMAN. Text will be ignored.",
            "Privately ask the user for additional auth or config.",
            "Presents a [dialog](https://developers.google.com/chat/how-tos/dialogs)."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "NEW_MESSAGE",
            "UPDATE_MESSAGE",
            "UPDATE_USER_MESSAGE_CARDS",
            "REQUEST_CONFIG",
            "DIALOG"
          ],
          "description": "Input only. The type of Chat app response."
        },
        "dialogAction": {
          "$ref": "DialogAction",
          "description": "Input only. A response to an event related to a [dialog](https://developers.google.com/chat/how-tos/dialogs). Must be accompanied by `ResponseType.Dialog`."
        }
      },
      "type": "object",
      "description": "Parameters that a Chat app can use to configure how it's response is posted.",
      "id": "ActionResponse"
    },
    "TimeInput": {
      "description": "Time input values. Not supported by Chat apps.",
      "type": "object",
      "properties": {
        "minutes": {
          "description": "The number of minutes past the hour. Valid values are 0 to 59.",
          "format": "int32",
          "type": "integer"
        },
        "hours": {
          "type": "integer",
          "description": "The hour on a 24-hour clock.",
          "format": "int32"
        }
      },
      "id": "TimeInput"
    },
    "DialogAction": {
      "properties": {
        "actionStatus": {
          "$ref": "ActionStatus",
          "description": "Input only. Status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs). Displays a status and message to users, if necessary. For example, in case of an error or success."
        },
        "dialog": {
          "description": "Input only. [Dialog](https://developers.google.com/chat/how-tos/dialogs) for the request.",
          "$ref": "Dialog"
        }
      },
      "id": "DialogAction",
      "description": "Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs) and request status code.",
      "type": "object"
    },
    "GoogleAppsCardV1OpenLink": {
      "description": "Represents an `onClick` event that opens a hyperlink.",
      "type": "object",
      "properties": {
        "openAs": {
          "type": "string",
          "description": "How to open a link. Not supported by Chat apps.",
          "enumDescriptions": [
            "The link opens as a full size window (if that's the frame used by the client.",
            "The link opens as an overlay, such as a pop-up."
          ],
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ]
        },
        "url": {
          "description": "The URL to open.",
          "type": "string"
        },
        "onClose": {
          "enumDescriptions": [
            "Default value. The card does not reload; nothing happens.",
            "Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the parent card is blocked until the child window closes."
          ],
          "type": "string",
          "enum": [
            "NOTHING",
            "RELOAD"
          ],
          "description": "Whether the client forgets about a link after opening it, or observes it until the window closes. Not supported by Chat apps."
        }
      },
      "id": "GoogleAppsCardV1OpenLink"
    },
    "StringInputs": {
      "id": "StringInputs",
      "type": "object",
      "properties": {
        "value": {
          "items": {
            "type": "string"
          },
          "description": "An array of strings entered by the user.",
          "type": "array"
        }
      },
      "description": "Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented."
    },
    "MatchedUrl": {
      "description": "A matched url in a Chat message. Chat apps can preview matched URLs. For more information, refer to [Preview links](https://developers.google.com/chat/how-tos/preview-links).",
      "properties": {
        "url": {
          "readOnly": true,
          "description": "Output only. The url that was matched.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "MatchedUrl"
    },
    "Color": {
      "type": "object",
      "properties": {
        "red": {
          "type": "number",
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "format": "float"
        },
        "green": {
          "type": "number",
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "format": "float"
        },
        "blue": {
          "format": "float",
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "type": "number"
        },
        "alpha": {
          "type": "number",
          "format": "float",
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."
        }
      },
      "id": "Color",
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ..."
    },
    "User": {
      "id": "User",
      "description": "A user in Google Chat.",
      "properties": {
        "domainId": {
          "description": "Unique identifier of the user's Google Workspace domain.",
          "type": "string"
        },
        "isAnonymous": {
          "description": "Output only. When `true`, the user is deleted or their profile is not visible.",
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Human user.",
            "Chat app user."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "HUMAN",
            "BOT"
          ],
          "description": "User type.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Output only. The user's display name.",
          "readOnly": true
        },
        "name": {
          "description": "Resource name for a Google Chat user. Represents a [person](https://developers.google.com/people/api/rest/v1/people#Person) in the People API or a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. Formatted as: `users/{user}`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Membership": {
      "description": "Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.",
      "type": "object",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The creation time of the membership, such as when a member joined or was invited to join a space.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Resource name of the membership. Format: spaces/{space}/members/{member}"
        },
        "state": {
          "enumDescriptions": [
            "Default, do not use.",
            "The user has joined the space.",
            "The user has been invited, is able to join the space, but currently has not joined.",
            "The user is not a member of the space, has not been invited and is not able to join the space."
          ],
          "enum": [
            "MEMBERSHIP_STATE_UNSPECIFIED",
            "JOINED",
            "INVITED",
            "NOT_A_MEMBER"
          ],
          "description": "Output only. State of the membership.",
          "readOnly": true,
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "MEMBERSHIP_ROLE_UNSPECIFIED",
            "ROLE_MEMBER",
            "ROLE_MANAGER"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "Default value. The user isn't a member of the space, but might be invited.",
            "A member of the space. The user has basic permissions, like sending messages to the space. In 1:1 and unnamed group conversations, everyone has this role.",
            "A space manager. The user has all basic permissions plus administrative permissions that allow them to manage the space, like adding or removing members. Only supports SpaceType.SPACE."
          ],
          "description": "Output only. User's role within a Chat space, which determines their permitted actions in the space."
        },
        "member": {
          "$ref": "User",
          "description": "A Google Chat user or app. Format: `users/{user}` or `users/app` When `users/{user}`, represents a [person](https://developers.google.com/people/api/rest/v1/people) in the People API or a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. When `users/app`, represents a Chat app creating membership for itself."
        }
      },
      "id": "Membership"
    },
    "GoogleAppsCardV1SwitchControl": {
      "description": "Either a toggle-style switch or a checkbox.",
      "type": "object",
      "id": "GoogleAppsCardV1SwitchControl",
      "properties": {
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The action when the switch state is changed."
        },
        "controlType": {
          "type": "string",
          "enumDescriptions": [
            "A toggle-style switch.",
            "Deprecated in favor of `CHECK_BOX`.",
            "A checkbox."
          ],
          "enum": [
            "SWITCH",
            "CHECKBOX",
            "CHECK_BOX"
          ],
          "description": "The control type, either switch or checkbox."
        },
        "value": {
          "type": "string",
          "description": "The value is what is passed back in the callback."
        },
        "selected": {
          "description": "If the switch is selected.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "The name of the switch widget that's used in `formInput`."
        }
      }
    },
    "GoogleAppsCardV1GridItem": {
      "description": "Represents a single item in the grid layout.",
      "id": "GoogleAppsCardV1GridItem",
      "type": "object",
      "properties": {
        "layout": {
          "description": "The layout to use for the grid item.",
          "enum": [
            "GRID_ITEM_LAYOUT_UNSPECIFIED",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ],
          "enumDescriptions": [
            "No layout specified.",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "type": "string"
        },
        "subtitle": {
          "description": "The grid item's subtitle.",
          "type": "string"
        },
        "title": {
          "description": "The grid item's title.",
          "type": "string"
        },
        "textAlignment": {
          "description": "The horizontal alignment of the grid item's text.",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string"
        },
        "image": {
          "$ref": "GoogleAppsCardV1ImageComponent",
          "description": "The image that displays in the grid item."
        },
        "id": {
          "type": "string",
          "description": "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters."
        }
      }
    },
    "TextParagraph": {
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "TextParagraph",
      "type": "object",
      "description": "A paragraph of text. Formatted text supported."
    },
    "GoogleAppsCardV1ActionParameter": {
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        },
        "key": {
          "description": "The name of the parameter for the action script.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1ActionParameter"
    },
    "GoogleAppsCardV1Widget": {
      "properties": {
        "buttonList": {
          "description": "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```",
          "$ref": "GoogleAppsCardV1ButtonList"
        },
        "textInput": {
          "$ref": "GoogleAppsCardV1TextInput",
          "description": "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```"
        },
        "textParagraph": {
          "$ref": "GoogleAppsCardV1TextParagraph",
          "description": "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```"
        },
        "decoratedText": {
          "$ref": "GoogleAppsCardV1DecoratedText",
          "description": "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"sasha@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_sasha\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```"
        },
        "horizontalAlignment": {
          "description": "The horizontal alignment of this widget.",
          "type": "string",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ]
        },
        "dateTimePicker": {
          "description": "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```",
          "$ref": "GoogleAppsCardV1DateTimePicker"
        },
        "selectionInput": {
          "$ref": "GoogleAppsCardV1SelectionInput",
          "description": "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```"
        },
        "divider": {
          "$ref": "GoogleAppsCardV1Divider",
          "description": "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"
        },
        "grid": {
          "$ref": "GoogleAppsCardV1Grid",
          "description": "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```"
        },
        "image": {
          "$ref": "GoogleAppsCardV1Image",
          "description": "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/sasha.png\" \"altText\": \"Avatar for Sasha\" } ```"
        }
      },
      "id": "GoogleAppsCardV1Widget",
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object"
    },
    "UserMentionMetadata": {
      "properties": {
        "type": {
          "description": "The type of user mention.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "MENTION"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add user to space.",
            "Mention user in space."
          ],
          "type": "string"
        },
        "user": {
          "description": "The user mentioned.",
          "$ref": "User"
        }
      },
      "id": "UserMentionMetadata",
      "type": "object",
      "description": "Annotation metadata for user mentions (@)."
    },
    "GoogleAppsCardV1ButtonList": {
      "type": "object",
      "id": "GoogleAppsCardV1ButtonList",
      "properties": {
        "buttons": {
          "items": {
            "$ref": "GoogleAppsCardV1Button"
          },
          "description": "An array of buttons.",
          "type": "array"
        }
      },
      "description": "A list of buttons layed out horizontally."
    },
    "DateTimeInput": {
      "description": "Date and time input values. Not supported by Chat apps.",
      "properties": {
        "hasDate": {
          "type": "boolean",
          "description": "Whether the `datetime` input includes a calendar date."
        },
        "hasTime": {
          "description": "Whether the `datetime` input includes a timestamp.",
          "type": "boolean"
        },
        "msSinceEpoch": {
          "format": "int64",
          "description": "Time since epoch time, in milliseconds.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DateTimeInput"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "description": "Enables apps to fetch information and perform actions in Google Chat. Authentication is a prerequisite for using the Google Chat REST API.",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "mtlsRootUrl": "https://chat.mtls.googleapis.com/",
  "version": "v1",
  "parameters": {
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "alt": {
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    }
  },
  "kind": "discovery#restDescription",
  "version_module": true,
  "id": "chat:v1",
  "servicePath": "",
  "documentationLink": "https://developers.google.com/hangouts/chat",
  "resources": {
    "spaces": {
      "resources": {
        "messages": {
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "response": {
                    "$ref": "Attachment"
                  },
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "description": "Gets the metadata of a message attachment. The attachment data is fetched using the media API. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
                  "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^spaces/[^/]+/messages/[^/]+/attachments/[^/]+$",
                      "location": "path",
                      "description": "Required. Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
                      "required": true
                    }
                  },
                  "id": "chat.spaces.messages.attachments.get",
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            }
          },
          "methods": {
            "create": {
              "flatPath": "v1/spaces/{spacesId}/messages",
              "id": "chat.spaces.messages.create",
              "path": "v1/{+parent}/messages",
              "parameters": {
                "requestId": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message."
                },
                "threadKey": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread."
                },
                "parent": {
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
                  "type": "string",
                  "required": true,
                  "pattern": "^spaces/[^/]+$",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Message"
              },
              "request": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "description": "Creates a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)."
            },
            "update": {
              "httpMethod": "PUT",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Message"
              },
              "request": {
                "$ref": "Message"
              },
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "description": "Updates a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
              "id": "chat.spaces.messages.update",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "Required. The field paths to update. Separate multiple values with commas. Currently supported field paths: - text - cards (Requires [service account authentication](/chat/api/guides/auth/service-accounts).) ",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "location": "path",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`"
                }
              },
              "path": "v1/{+name}"
            },
            "get": {
              "id": "chat.spaces.messages.get",
              "path": "v1/{+name}",
              "description": "Returns a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "description": "Required. Resource name of the message to be retrieved, in the form \"spaces/*/messages/*\". Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB",
                  "location": "path",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$"
                }
              },
              "response": {
                "$ref": "Message"
              },
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}"
            },
            "delete": {
              "id": "chat.spaces.messages.delete",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "description": "Deletes a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "type": "string",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}"
            }
          }
        },
        "members": {
          "methods": {
            "get": {
              "description": "Returns a membership. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "pattern": "^spaces/[^/]+/members/[^/]+$",
                  "description": "Required. Resource name of the membership to retrieve. Format: spaces/{space}/members/{member}"
                }
              },
              "response": {
                "$ref": "Membership"
              },
              "id": "chat.spaces.members.get",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
              "httpMethod": "GET"
            },
            "list": {
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "path": "v1/{+parent}/members",
              "description": "Lists human memberships in a space. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
              "id": "chat.spaces.members.list",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "A token identifying a page of results the server should return."
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100."
                },
                "parent": {
                  "pattern": "^spaces/[^/]+$",
                  "required": true,
                  "description": "Required. The resource name of the space for which to fetch a membership list. Format: spaces/{space}",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "flatPath": "v1/spaces/{spacesId}/members"
            }
          }
        }
      },
      "methods": {
        "list": {
          "id": "chat.spaces.list",
          "flatPath": "v1/spaces",
          "path": "v1/spaces",
          "description": "Lists spaces the caller is a member of. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).",
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "description": "Optional. A token identifying a page of results the server should return.",
              "location": "query",
              "type": "string"
            },
            "pageSize": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "Optional. Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100."
            }
          },
          "parameterOrder": [],
          "response": {
            "$ref": "ListSpacesResponse"
          }
        },
        "webhooks": {
          "response": {
            "$ref": "Message"
          },
          "request": {
            "$ref": "Message"
          },
          "parameterOrder": [
            "parent"
          ],
          "id": "chat.spaces.webhooks",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "httpMethod": "POST",
          "parameters": {
            "parent": {
              "required": true,
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "location": "path",
              "pattern": "^spaces/[^/]+$",
              "type": "string"
            },
            "requestId": {
              "type": "string",
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
              "location": "query"
            },
            "threadKey": {
              "location": "query",
              "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.",
              "type": "string"
            }
          },
          "path": "v1/{+parent}/webhooks",
          "flatPath": "v1/spaces/{spacesId}/webhooks"
        },
        "get": {
          "path": "v1/{+name}",
          "parameters": {
            "name": {
              "location": "path",
              "required": true,
              "pattern": "^spaces/[^/]+$",
              "type": "string",
              "description": "Required. Resource name of the space, in the form \"spaces/*\". Format: spaces/{space}"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "id": "chat.spaces.get",
          "httpMethod": "GET",
          "flatPath": "v1/spaces/{spacesId}",
          "response": {
            "$ref": "Space"
          },
          "description": "Returns a space. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)."
        }
      }
    },
    "media": {
      "methods": {
        "download": {
          "supportsMediaDownload": true,
          "description": "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
          "id": "chat.media.download",
          "response": {
            "$ref": "Media"
          },
          "path": "v1/media/{+resourceName}",
          "httpMethod": "GET",
          "parameterOrder": [
            "resourceName"
          ],
          "flatPath": "v1/media/{mediaId}",
          "parameters": {
            "resourceName": {
              "location": "path",
              "pattern": "^.*$",
              "required": true,
              "type": "string",
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name."
            }
          }
        }
      }
    },
    "dms": {
      "methods": {
        "webhooks": {
          "path": "v1/{+parent}/webhooks",
          "parameterOrder": [
            "parent"
          ],
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "httpMethod": "POST",
          "flatPath": "v1/dms/{dmsId}/webhooks",
          "response": {
            "$ref": "Message"
          },
          "parameters": {
            "parent": {
              "type": "string",
              "required": true,
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "location": "path",
              "pattern": "^dms/[^/]+$"
            },
            "requestId": {
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
              "type": "string",
              "location": "query"
            },
            "threadKey": {
              "type": "string",
              "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.",
              "location": "query"
            }
          },
          "request": {
            "$ref": "Message"
          },
          "id": "chat.dms.webhooks"
        },
        "messages": {
          "httpMethod": "POST",
          "flatPath": "v1/dms/{dmsId}/messages",
          "parameters": {
            "threadKey": {
              "type": "string",
              "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.",
              "location": "query"
            },
            "requestId": {
              "location": "query",
              "type": "string",
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message."
            },
            "parent": {
              "location": "path",
              "required": true,
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "type": "string",
              "pattern": "^dms/[^/]+$"
            }
          },
          "id": "chat.dms.messages",
          "request": {
            "$ref": "Message"
          },
          "response": {
            "$ref": "Message"
          },
          "parameterOrder": [
            "parent"
          ],
          "path": "v1/{+parent}/messages",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response."
        }
      },
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "response": {
                "$ref": "Message"
              },
              "request": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/messages",
              "flatPath": "v1/dms/{dmsId}/conversations/{conversationsId}/messages",
              "httpMethod": "POST",
              "parameters": {
                "threadKey": {
                  "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.",
                  "type": "string",
                  "location": "query"
                },
                "requestId": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message."
                },
                "parent": {
                  "type": "string",
                  "required": true,
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
                  "location": "path",
                  "pattern": "^dms/[^/]+/conversations/[^/]+$"
                }
              },
              "id": "chat.dms.conversations.messages",
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response."
            }
          }
        }
      }
    },
    "rooms": {
      "methods": {
        "webhooks": {
          "httpMethod": "POST",
          "parameters": {
            "threadKey": {
              "location": "query",
              "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.",
              "type": "string"
            },
            "requestId": {
              "location": "query",
              "type": "string",
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message."
            },
            "parent": {
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "required": true,
              "pattern": "^rooms/[^/]+$",
              "location": "path",
              "type": "string"
            }
          },
          "id": "chat.rooms.webhooks",
          "response": {
            "$ref": "Message"
          },
          "path": "v1/{+parent}/webhooks",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "flatPath": "v1/rooms/{roomsId}/webhooks",
          "request": {
            "$ref": "Message"
          },
          "parameterOrder": [
            "parent"
          ]
        },
        "messages": {
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "httpMethod": "POST",
          "id": "chat.rooms.messages",
          "response": {
            "$ref": "Message"
          },
          "path": "v1/{+parent}/messages",
          "request": {
            "$ref": "Message"
          },
          "parameterOrder": [
            "parent"
          ],
          "flatPath": "v1/rooms/{roomsId}/messages",
          "parameters": {
            "threadKey": {
              "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.",
              "type": "string",
              "location": "query"
            },
            "parent": {
              "type": "string",
              "required": true,
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "pattern": "^rooms/[^/]+$",
              "location": "path"
            },
            "requestId": {
              "type": "string",
              "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
              "location": "query"
            }
          }
        }
      },
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Message"
              },
              "id": "chat.rooms.conversations.messages",
              "flatPath": "v1/rooms/{roomsId}/conversations/{conversationsId}/messages",
              "path": "v1/{+parent}/messages",
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "parameters": {
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
                  "pattern": "^rooms/[^/]+/conversations/[^/]+$"
                },
                "threadKey": {
                  "description": "Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.",
                  "location": "query",
                  "type": "string"
                },
                "requestId": {
                  "location": "query",
                  "description": "Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "Message"
              }
            }
          }
        }
      }
    }
  },
  "protocol": "rest",
  "title": "Google Chat API",
  "canonicalName": "Hangouts Chat",
  "basePath": "",
  "ownerDomain": "google.com",
  "baseUrl": "https://chat.googleapis.com/",
  "revision": "20220805",
  "discoveryVersion": "v1",
  "rootUrl": "https://chat.googleapis.com/",
  "name": "chat",
  "ownerName": "Google",
  "batchPath": "batch"
}

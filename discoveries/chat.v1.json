{
  "protocol": "rest",
  "canonicalName": "Hangouts Chat",
  "discoveryVersion": "v1",
  "schemas": {
    "GoogleAppsCardV1CardAction": {
      "properties": {
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "actionLabel": {
          "type": "string",
          "description": "The label that displays as the action menu item."
        }
      },
      "id": "GoogleAppsCardV1CardAction",
      "description": "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser.",
      "type": "object"
    },
    "Attachment": {
      "type": "object",
      "description": "An attachment in Hangouts Chat.",
      "properties": {
        "contentType": {
          "description": "The content type (MIME type) of the file.",
          "type": "string"
        },
        "downloadUri": {
          "description": "Output only. The download URL which should be used to allow a human user to download the attachment. Bots should not use this URL to download attachment content.",
          "type": "string"
        },
        "name": {
          "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
          "type": "string"
        },
        "contentName": {
          "type": "string",
          "description": "The original file name for the content, not the full path."
        },
        "attachmentDataRef": {
          "$ref": "AttachmentDataRef",
          "description": "A reference to the attachment data. This is used with the media API to download the attachment data."
        },
        "driveDataRef": {
          "$ref": "DriveDataRef",
          "description": "A reference to the drive attachment. This is used with the Drive API."
        },
        "source": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "SOURCE_UNSPECIFIED",
            "DRIVE_FILE",
            "UPLOADED_CONTENT"
          ],
          "type": "string",
          "description": "The source of the attachment."
        },
        "thumbnailUri": {
          "description": "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Bots should not use this URL to download attachment content.",
          "type": "string"
        }
      },
      "id": "Attachment"
    },
    "Space": {
      "description": "A room or DM in Hangouts Chat.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Output only. The type of a space. This is deprecated. Use `single_user_bot_dm` instead.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ROOM",
            "DM"
          ],
          "enumDescriptions": [
            "",
            "Multi-user spaces such as rooms and DMs between humans.",
            "1:1 Direct Message between a human and a bot, where all messages are flat."
          ]
        },
        "name": {
          "type": "string",
          "description": "Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehYs"
        },
        "threaded": {
          "description": "Whether the messages are threaded in this space.",
          "type": "boolean"
        },
        "displayName": {
          "type": "string",
          "description": "Output only. The display name (only if the space is a room). Please note that this field might not be populated in direct messages between humans."
        },
        "singleUserBotDm": {
          "description": "Whether the space is a DM between a bot and a single human.",
          "type": "boolean"
        }
      },
      "id": "Space"
    },
    "GoogleAppsCardV1Button": {
      "description": "A button. Can be a text button or an image button.",
      "properties": {
        "icon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "The icon image."
        },
        "text": {
          "type": "string",
          "description": "The text of the button."
        },
        "altText": {
          "description": "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.",
          "type": "string"
        },
        "onClick": {
          "description": "The action to perform when the button is clicked.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "color": {
          "description": "If set, the button is filled with a solid background.",
          "$ref": "Color"
        },
        "disabled": {
          "type": "boolean",
          "description": "If true, the button is displayed in a disabled state and doesn't respond to user actions."
        }
      },
      "id": "GoogleAppsCardV1Button",
      "type": "object"
    },
    "Button": {
      "description": "A button. Can be a text button or an image button.",
      "properties": {
        "imageButton": {
          "description": "A button with image and onclick action.",
          "$ref": "ImageButton"
        },
        "textButton": {
          "description": "A button with text and onclick action.",
          "$ref": "TextButton"
        }
      },
      "id": "Button",
      "type": "object"
    },
    "GoogleAppsCardV1Divider": {
      "properties": {},
      "id": "GoogleAppsCardV1Divider",
      "type": "object",
      "description": "A divider that appears in between widgets."
    },
    "DeprecatedEvent": {
      "properties": {
        "token": {
          "type": "string",
          "description": "A secret value that bots can use to verify if a request is from Google. The token is randomly generated by Google, remains static, and can be obtained from the Google Chat API configuration page in the Cloud Console. Developers can revoke/regenerate it if needed from the same page."
        },
        "configCompleteRedirectUrl": {
          "description": "The URL the bot should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information.",
          "type": "string"
        },
        "user": {
          "description": "The user that triggered the event.",
          "$ref": "User"
        },
        "space": {
          "description": "The room or DM in which the event occurred.",
          "$ref": "Space"
        },
        "threadKey": {
          "description": "The bot-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "MESSAGE",
            "ADDED_TO_SPACE",
            "REMOVED_FROM_SPACE",
            "CARD_CLICKED"
          ],
          "description": "The type of the event.",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A message was sent in a room or direct message.",
            "The bot was added to a room or DM.",
            "The bot was removed from a room or DM.",
            "The bot's interactive card was clicked."
          ]
        },
        "eventTime": {
          "type": "string",
          "description": "The timestamp indicating when the event was dispatched.",
          "format": "google-datetime"
        },
        "message": {
          "$ref": "Message",
          "description": "The message that triggered the event, if applicable."
        },
        "action": {
          "description": "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information.",
          "$ref": "FormAction"
        }
      },
      "type": "object",
      "description": "Google Chat events.",
      "id": "DeprecatedEvent"
    },
    "CardWithId": {
      "type": "object",
      "id": "CardWithId",
      "description": "Widgets for chatbots to specify.",
      "properties": {
        "card": {
          "$ref": "GoogleAppsCardV1Card",
          "description": "Card proto that allows chatbots to specify UI elements and editable widgets."
        },
        "cardId": {
          "type": "string",
          "description": "Chatbot-specified identifier for this widget. Scoped within a message."
        }
      }
    },
    "CardHeader": {
      "id": "CardHeader",
      "type": "object",
      "properties": {
        "imageStyle": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ],
          "description": "The image's type (e.g. square border or circular border).",
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ]
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        },
        "title": {
          "type": "string",
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines."
        }
      }
    },
    "GoogleAppsCardV1DecoratedText": {
      "type": "object",
      "id": "GoogleAppsCardV1DecoratedText",
      "description": "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text.",
      "properties": {
        "wrapText": {
          "type": "boolean",
          "description": "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated."
        },
        "switchControl": {
          "description": "A switch widget can be clicked to change its state or trigger an action.",
          "$ref": "GoogleAppsCardV1SwitchControl"
        },
        "icon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "Deprecated in favor of start_icon."
        },
        "button": {
          "description": "A button that can be clicked to trigger an action.",
          "$ref": "GoogleAppsCardV1Button"
        },
        "topLabel": {
          "description": "The formatted text label that shows above the main text.",
          "type": "string"
        },
        "endIcon": {
          "description": "An icon displayed after the text.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "onClick": {
          "description": "Only the top and bottom label and content region are clickable.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "startIcon": {
          "description": "The icon displayed in front of the text.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "text": {
          "type": "string",
          "description": "Required. The main widget formatted text. See Text formatting for details."
        },
        "bottomLabel": {
          "description": "The formatted text label that shows below the main text.",
          "type": "string"
        }
      }
    },
    "ListMembershipsResponse": {
      "id": "ListMembershipsResponse",
      "properties": {
        "memberships": {
          "type": "array",
          "description": "List of memberships in the requested (or first) page.",
          "items": {
            "$ref": "Membership"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1SelectionInput": {
      "type": "object",
      "properties": {
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button."
        },
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1SelectionItem"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "The name of the text input which is used in formInput."
        },
        "type": {
          "enumDescriptions": [
            "The selection type is a checkbox.",
            "The selection type is a radio button.",
            "The selection type is a switch.",
            "The selection type is a dropdown."
          ],
          "type": "string",
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ]
        },
        "label": {
          "description": "The label displayed ahead of the switch control.",
          "type": "string"
        }
      },
      "description": "A widget that creates a UI item (for example, a drop-down list) with options for users to select.",
      "id": "GoogleAppsCardV1SelectionInput"
    },
    "WidgetMarkup": {
      "properties": {
        "image": {
          "$ref": "Image",
          "description": "Display an image in this widget."
        },
        "textParagraph": {
          "description": "Display a text paragraph in this widget.",
          "$ref": "TextParagraph"
        },
        "keyValue": {
          "description": "Display a key value item in this widget.",
          "$ref": "KeyValue"
        },
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "Button"
          },
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set."
        }
      },
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object",
      "id": "WidgetMarkup"
    },
    "GoogleAppsCardV1CardFixedFooter": {
      "id": "GoogleAppsCardV1CardFixedFooter",
      "type": "object",
      "properties": {
        "primaryButton": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "The primary button of the fixed footer. The button must be a text button with text and color set."
        },
        "secondaryButton": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set."
        }
      },
      "description": "A persistent (sticky) footer that is added to the bottom of the card."
    },
    "SlashCommand": {
      "properties": {
        "commandId": {
          "description": "The id of the slash command invoked.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "A Slash Command in Chat.",
      "id": "SlashCommand"
    },
    "GoogleAppsCardV1TextInput": {
      "properties": {
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The onChange action, for example, invoke a function."
        },
        "name": {
          "description": "The name of the text input which is used in formInput.",
          "type": "string"
        },
        "initialSuggestions": {
          "$ref": "GoogleAppsCardV1Suggestions",
          "description": "The initial suggestions made before any user input."
        },
        "label": {
          "description": "At least one of label and hintText must be specified.",
          "type": "string"
        },
        "autoCompleteAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items."
        },
        "value": {
          "description": "The default value when there is no input from the user.",
          "type": "string"
        },
        "type": {
          "description": "The style of the text, for example, a single line or multiple lines.",
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ],
          "enumDescriptions": [
            "The text is put into a single line.",
            "The text is put into multiple lines."
          ],
          "type": "string"
        },
        "hintText": {
          "description": "The hint text.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1TextInput",
      "description": "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions.",
      "type": "object"
    },
    "GoogleAppsCardV1ButtonList": {
      "properties": {
        "buttons": {
          "items": {
            "$ref": "GoogleAppsCardV1Button"
          },
          "type": "array"
        }
      },
      "id": "GoogleAppsCardV1ButtonList",
      "type": "object",
      "description": "A list of buttons layed out horizontally."
    },
    "GoogleAppsCardV1Suggestions": {
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of suggestions items which will be used in are used in autocomplete.",
          "items": {
            "$ref": "GoogleAppsCardV1SuggestionItem"
          }
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1Suggestions",
      "description": "A container wrapping elements necessary for showing suggestion items used in text input autocomplete."
    },
    "AttachmentDataRef": {
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "The resource name of the attachment data. This is used with the media API to download the attachment data."
        }
      },
      "id": "AttachmentDataRef",
      "type": "object",
      "description": "A reference to the data of an attachment."
    },
    "Annotation": {
      "type": "object",
      "id": "Annotation",
      "description": "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```",
      "properties": {
        "length": {
          "description": "Length of the substring in the plain-text message body this annotation corresponds to.",
          "type": "integer",
          "format": "int32"
        },
        "slashCommand": {
          "description": "The metadata for a slash command.",
          "$ref": "SlashCommandMetadata"
        },
        "type": {
          "description": "The type of this annotation.",
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A user is mentioned.",
            "A slash command is invoked."
          ],
          "enum": [
            "ANNOTATION_TYPE_UNSPECIFIED",
            "USER_MENTION",
            "SLASH_COMMAND"
          ]
        },
        "userMention": {
          "$ref": "UserMentionMetadata",
          "description": "The metadata of user mention."
        },
        "startIndex": {
          "format": "int32",
          "type": "integer",
          "description": "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to."
        }
      }
    },
    "Image": {
      "type": "object",
      "description": "An image that is specified by a URL and can have an onclick action.",
      "properties": {
        "aspectRatio": {
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image.",
          "format": "double",
          "type": "number"
        },
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        },
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action."
        }
      },
      "id": "Image"
    },
    "GoogleAppsCardV1Section": {
      "type": "object",
      "description": "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
      "properties": {
        "widgets": {
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "GoogleAppsCardV1Widget"
          },
          "type": "array"
        },
        "uncollapsibleWidgetsCount": {
          "format": "int32",
          "type": "integer",
          "description": "The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`."
        },
        "header": {
          "type": "string",
          "description": "The header of the section. Formatted text is supported."
        },
        "collapsible": {
          "type": "boolean",
          "description": "Indicates whether this section is collapsible. If a section is collapsible, the description must be given."
        }
      },
      "id": "GoogleAppsCardV1Section"
    },
    "TextParagraph": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "description": "A paragraph of text. Formatted text supported.",
      "id": "TextParagraph"
    },
    "GoogleAppsCardV1ImageComponent": {
      "properties": {
        "altText": {
          "type": "string",
          "description": "The accessibility label for the image."
        },
        "cropStyle": {
          "$ref": "GoogleAppsCardV1ImageCropStyle",
          "description": "The crop style to apply to the image."
        },
        "imageUri": {
          "type": "string",
          "description": "The image URL."
        },
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to the image."
        }
      },
      "id": "GoogleAppsCardV1ImageComponent",
      "type": "object"
    },
    "GoogleAppsCardV1OnClick": {
      "properties": {
        "card": {
          "description": "A new card is pushed to the card stack after clicking if specified.",
          "$ref": "GoogleAppsCardV1Card"
        },
        "openLink": {
          "description": "If specified, this onClick triggers an open link action.",
          "$ref": "GoogleAppsCardV1OpenLink"
        },
        "action": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "If specified, an action is triggered by this onClick."
        },
        "openDynamicLinkAction": {
          "description": "An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
          "$ref": "GoogleAppsCardV1Action"
        }
      },
      "id": "GoogleAppsCardV1OnClick",
      "type": "object"
    },
    "GoogleAppsCardV1SwitchControl": {
      "id": "GoogleAppsCardV1SwitchControl",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the switch widget that's used in formInput."
        },
        "selected": {
          "type": "boolean",
          "description": "If the switch is selected."
        },
        "controlType": {
          "enumDescriptions": [
            "",
            "Deprecated in favor of `CHECK_BOX`.",
            ""
          ],
          "type": "string",
          "description": "The control type, either switch or checkbox.",
          "enum": [
            "SWITCH",
            "CHECKBOX",
            "CHECK_BOX"
          ]
        },
        "value": {
          "description": "The value is what is passed back in the callback.",
          "type": "string"
        },
        "onChangeAction": {
          "description": "The action when the switch state is changed.",
          "$ref": "GoogleAppsCardV1Action"
        }
      }
    },
    "GoogleAppsCardV1ActionParameter": {
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        },
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        }
      },
      "id": "GoogleAppsCardV1ActionParameter"
    },
    "KeyValue": {
      "properties": {
        "content": {
          "description": "The text of the content. Formatted text supported and always required.",
          "type": "string"
        },
        "icon": {
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image.",
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "onClick": {
          "description": "The onclick action. Only the top label, bottom label and content region are clickable.",
          "$ref": "OnClick"
        },
        "button": {
          "$ref": "Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "topLabel": {
          "description": "The text of the top label. Formatted text supported.",
          "type": "string"
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "bottomLabel": {
          "description": "The text of the bottom label. Formatted text supported.",
          "type": "string"
        },
        "contentMultiline": {
          "description": "If the content should be multiline.",
          "type": "boolean"
        }
      },
      "id": "KeyValue",
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
      "type": "object"
    },
    "Card": {
      "description": "A card is a UI element that can contain UI widgets such as texts, images.",
      "properties": {
        "name": {
          "description": "Name of the card.",
          "type": "string"
        },
        "cardActions": {
          "type": "array",
          "description": "The actions of this card.",
          "items": {
            "$ref": "CardAction"
          }
        },
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "CardHeader"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "Section"
          },
          "description": "Sections are separated by a line divider."
        }
      },
      "type": "object",
      "id": "Card"
    },
    "TextButton": {
      "properties": {
        "text": {
          "description": "The text of the button.",
          "type": "string"
        },
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action of the button."
        }
      },
      "id": "TextButton",
      "description": "A button with text and onclick action.",
      "type": "object"
    },
    "SlashCommandMetadata": {
      "id": "SlashCommandMetadata",
      "properties": {
        "commandName": {
          "type": "string",
          "description": "The name of the invoked slash command."
        },
        "triggersDialog": {
          "type": "boolean",
          "description": "Indicating whether the slash command is for a dialog."
        },
        "bot": {
          "description": "The bot whose command was invoked.",
          "$ref": "User"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "INVOKE"
          ],
          "description": "The type of slash command.",
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add bot to space.",
            "Invoke slash command in space."
          ]
        },
        "commandId": {
          "type": "string",
          "format": "int64",
          "description": "The command id of the invoked slash command."
        }
      },
      "type": "object",
      "description": "Annotation metadata for slash commands (/)."
    },
    "GoogleAppsCardV1DateTimePicker": {
      "properties": {
        "timezoneOffsetDate": {
          "type": "integer",
          "format": "int32",
          "description": "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side."
        },
        "label": {
          "type": "string",
          "description": "The label for the field that displays to the user."
        },
        "valueMsEpoch": {
          "format": "int64",
          "description": "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "The user can select a date and time.",
            "The user can only select a date.",
            "The user can only select a time."
          ],
          "enum": [
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ],
          "description": "The type of the date/time picker."
        },
        "onChangeAction": {
          "description": "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "name": {
          "description": "The name of the text input that's used in formInput, and uniquely identifies this input.",
          "type": "string"
        }
      },
      "description": "The widget that lets users to specify a date and time.",
      "type": "object",
      "id": "GoogleAppsCardV1DateTimePicker"
    },
    "GoogleAppsCardV1Action": {
      "id": "GoogleAppsCardV1Action",
      "type": "object",
      "properties": {
        "persistValues": {
          "type": "boolean",
          "description": "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed."
        },
        "function": {
          "type": "string",
          "description": "Apps Script function to invoke when the containing element is clicked/activated."
        },
        "parameters": {
          "items": {
            "$ref": "GoogleAppsCardV1ActionParameter"
          },
          "description": "List of action parameters.",
          "type": "array"
        },
        "loadIndicator": {
          "enum": [
            "SPINNER",
            "NONE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Displays a spinner to indicate that content is loading.",
            "Nothing is displayed."
          ]
        }
      },
      "description": "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form."
    },
    "ListSpacesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed."
        },
        "spaces": {
          "description": "List of spaces in the requested (or first) page.",
          "items": {
            "$ref": "Space"
          },
          "type": "array"
        }
      },
      "id": "ListSpacesResponse",
      "type": "object"
    },
    "Message": {
      "description": "A message in Hangouts Chat.",
      "properties": {
        "attachment": {
          "description": "User uploaded attachment.",
          "type": "array",
          "items": {
            "$ref": "Attachment"
          }
        },
        "sender": {
          "$ref": "User",
          "description": "The user who created the message."
        },
        "cards": {
          "type": "array",
          "items": {
            "$ref": "Card"
          },
          "description": "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message."
        },
        "createTime": {
          "description": "Output only. The time at which the message was created in Hangouts Chat server.",
          "type": "string",
          "format": "google-datetime"
        },
        "annotations": {
          "description": "Output only. Annotations associated with the text in this message.",
          "type": "array",
          "items": {
            "$ref": "Annotation"
          }
        },
        "cardsV2": {
          "items": {
            "$ref": "CardWithId"
          },
          "type": "array",
          "description": "Rich, formatted and interactive cards that can be used to display UI elements and editable widgets, such as: formatted text, buttons, clickable images, checkboxes, radio buttons. Cards are normally displayed below the plain-text body of the message. This v2 allows input widgets. The string key is a unique identifier among cards in the same message for identifying inputs."
        },
        "space": {
          "description": "The space the message belongs to.",
          "$ref": "Space"
        },
        "previewText": {
          "type": "string",
          "description": "Text for generating preview chips. This text will not be displayed to the user, but any links to images, web pages, videos, etc. included here will generate preview chips."
        },
        "thread": {
          "description": "The thread the message belongs to.",
          "$ref": "Thread"
        },
        "text": {
          "type": "string",
          "description": "Plain-text body of the message."
        },
        "slashCommand": {
          "description": "Slash command information, if applicable.",
          "$ref": "SlashCommand"
        },
        "actionResponse": {
          "description": "Input only. Parameters that a bot can use to configure how its response is posted.",
          "$ref": "ActionResponse"
        },
        "name": {
          "type": "string"
        },
        "argumentText": {
          "description": "Plain-text body of the message with all bot mentions stripped out.",
          "type": "string"
        },
        "fallbackText": {
          "type": "string",
          "description": "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications)."
        }
      },
      "type": "object",
      "id": "Message"
    },
    "ImageButton": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "icon": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "type": "string",
          "description": "The icon specified by an enum that indices to an icon provided by Chat API."
        },
        "onClick": {
          "description": "The onclick action.",
          "$ref": "OnClick"
        }
      },
      "description": "An image button with an onclick action.",
      "id": "ImageButton",
      "type": "object"
    },
    "GoogleAppsCardV1Grid": {
      "description": "Represents a Grid widget that displays items in a configurable grid layout.",
      "type": "object",
      "properties": {
        "borderStyle": {
          "$ref": "GoogleAppsCardV1BorderStyle",
          "description": "The border style to apply to each grid item."
        },
        "title": {
          "type": "string",
          "description": "The text that displays in the grid header."
        },
        "onClick": {
          "description": "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "columnCount": {
          "format": "int32",
          "type": "integer",
          "description": "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion)."
        },
        "items": {
          "type": "array",
          "description": "The items to display in the grid.",
          "items": {
            "$ref": "GoogleAppsCardV1GridItem"
          }
        }
      },
      "id": "GoogleAppsCardV1Grid"
    },
    "CardAction": {
      "id": "CardAction",
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "type": "object",
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The label used to be displayed in the action menu item."
        },
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action for this action item."
        }
      }
    },
    "GoogleAppsCardV1SelectionItem": {
      "id": "GoogleAppsCardV1SelectionItem",
      "type": "object",
      "description": "The item in the switch control. A radio button, at most one of the items is selected.",
      "properties": {
        "value": {
          "description": "The value associated with this item. The client should use this as a form input value.",
          "type": "string"
        },
        "selected": {
          "description": "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.",
          "type": "boolean"
        },
        "text": {
          "description": "The text to be displayed.",
          "type": "string"
        }
      }
    },
    "FormAction": {
      "properties": {
        "actionMethodName": {
          "type": "string",
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the bot as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."
        },
        "parameters": {
          "description": "List of action parameters.",
          "items": {
            "$ref": "ActionParameter"
          },
          "type": "array"
        }
      },
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "type": "object",
      "id": "FormAction"
    },
    "Thread": {
      "description": "A thread in Hangouts Chat.",
      "id": "Thread",
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAMpdlehY/threads/UMxbHmzDlr4"
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1Card": {
      "id": "GoogleAppsCardV1Card",
      "type": "object",
      "description": "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Heba Salam\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/heba_salam.png\", \"imageAltText\": \"Avatar for Heba Salam\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"heba.salam@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```",
      "properties": {
        "displayStyle": {
          "enum": [
            "DISPLAY_STYLE_UNSPECIFIED",
            "PEEK",
            "REPLACE"
          ],
          "enumDescriptions": [
            "",
            "The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead.",
            "The card is shown by replacing the view of the top card in the card stack."
          ],
          "description": "The display style for peekCardHeader.",
          "type": "string"
        },
        "cardActions": {
          "items": {
            "$ref": "GoogleAppsCardV1CardAction"
          },
          "description": "The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Setting\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
          "type": "array"
        },
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "GoogleAppsCardV1CardHeader"
        },
        "sections": {
          "items": {
            "$ref": "GoogleAppsCardV1Section"
          },
          "type": "array",
          "description": "Sections are separated by a line divider."
        },
        "fixedFooter": {
          "description": "The fixed footer shown at the bottom of this card.",
          "$ref": "GoogleAppsCardV1CardFixedFooter"
        },
        "name": {
          "type": "string",
          "description": "Name of the card, which is used as a identifier for the card in card navigation."
        },
        "peekCardHeader": {
          "$ref": "GoogleAppsCardV1CardHeader",
          "description": "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards."
        }
      }
    },
    "GoogleAppsCardV1SuggestionItem": {
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1SuggestionItem",
      "type": "object",
      "description": "A suggestion item. Only supports text for now."
    },
    "OnClick": {
      "id": "OnClick",
      "type": "object",
      "properties": {
        "openLink": {
          "$ref": "OpenLink",
          "description": "This onclick triggers an open link action if specified."
        },
        "action": {
          "description": "A form action will be triggered by this onclick if specified.",
          "$ref": "FormAction"
        }
      },
      "description": "An onclick action (e.g. open a link)."
    },
    "ActionResponse": {
      "id": "ActionResponse",
      "description": "Parameters that a bot can use to configure how it's response is posted.",
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default type; will be handled as NEW_MESSAGE.",
            "Post as a new message in the topic.",
            "Update the bot's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT.",
            "Update a message, with cards only. (Only after a MESSAGE event with a matched url, or a CARD_CLICKED event on a human created message)."
          ],
          "description": "The type of bot response.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "NEW_MESSAGE",
            "UPDATE_MESSAGE",
            "REQUEST_CONFIG"
          ]
        },
        "url": {
          "type": "string",
          "description": "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)"
        }
      }
    },
    "OpenLink": {
      "description": "A link that opens a new window.",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        }
      },
      "id": "OpenLink",
      "type": "object"
    },
    "GoogleAppsCardV1Image": {
      "properties": {
        "imageUrl": {
          "description": "An image URL.",
          "type": "string"
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "altText": {
          "description": "The alternative text of this image, used for accessibility.",
          "type": "string"
        }
      },
      "description": "An image that is specified by a URL and can have an onClick action.",
      "type": "object",
      "id": "GoogleAppsCardV1Image"
    },
    "GoogleAppsCardV1ImageCropStyle": {
      "description": "Represents the crop style applied to an image.",
      "properties": {
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "description": "The crop type.",
          "enum": [
            "IMAGE_CROP_TYPE_UNSPECIFIED",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "type": "string"
        },
        "aspectRatio": {
          "format": "double",
          "description": "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
          "type": "number"
        }
      },
      "id": "GoogleAppsCardV1ImageCropStyle",
      "type": "object"
    },
    "Membership": {
      "id": "Membership",
      "description": "Represents a membership relation in Hangouts Chat.",
      "properties": {
        "createTime": {
          "description": "The creation time of the membership a.k.a the time at which the member joined the space, if applicable.",
          "format": "google-datetime",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "MEMBERSHIP_STATE_UNSPECIFIED",
            "JOINED",
            "INVITED",
            "NOT_A_MEMBER"
          ],
          "enumDescriptions": [
            "Default, do not use.",
            "The user has joined the space.",
            "The user has been invited, is able to join the space, but currently has not joined.",
            "The user is not a member of the space, has not been invited and is not able to join the space."
          ],
          "description": "State of the membership."
        },
        "member": {
          "description": "A User in Hangout Chat",
          "$ref": "User"
        }
      },
      "type": "object"
    },
    "DriveDataRef": {
      "properties": {
        "driveFileId": {
          "type": "string",
          "description": "The id for the drive file, for use with the Drive API."
        }
      },
      "type": "object",
      "id": "DriveDataRef",
      "description": "A reference to the data of a drive attachment."
    },
    "GoogleAppsCardV1CardHeader": {
      "id": "GoogleAppsCardV1CardHeader",
      "type": "object",
      "properties": {
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageAltText": {
          "type": "string",
          "description": "The alternative text of this image which is used for accessibility."
        },
        "title": {
          "type": "string",
          "description": "The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines."
        },
        "imageType": {
          "description": "The image's type.",
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "type": "string",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ]
        }
      }
    },
    "Section": {
      "id": "Section",
      "properties": {
        "header": {
          "type": "string",
          "description": "The header of the section, text formatted supported."
        },
        "widgets": {
          "items": {
            "$ref": "WidgetMarkup"
          },
          "description": "A section must contain at least 1 widget.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float)."
    },
    "GoogleAppsCardV1Icon": {
      "properties": {
        "altText": {
          "type": "string",
          "description": "The description of the icon, used for accessibility. The default value is provided if you don't specify one."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "knownIcon": {
          "description": "The icon specified by the string name of a list of known icons",
          "type": "string"
        },
        "imageType": {
          "type": "string",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "description": "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.",
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ]
        }
      },
      "type": "object",
      "id": "GoogleAppsCardV1Icon"
    },
    "Media": {
      "properties": {
        "resourceName": {
          "description": "Name of the media resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Media",
      "description": "Media resource."
    },
    "GoogleAppsCardV1TextParagraph": {
      "type": "object",
      "description": "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.",
      "properties": {
        "text": {
          "description": "The text that's shown in the widget.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1TextParagraph"
    },
    "GoogleAppsCardV1BorderStyle": {
      "id": "GoogleAppsCardV1BorderStyle",
      "description": "Represents the complete border style applied to widgets.",
      "properties": {
        "strokeColor": {
          "description": "The colors to use when the type is `BORDER_TYPE_STROKE`.",
          "$ref": "Color"
        },
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ],
          "enum": [
            "BORDER_TYPE_UNSPECIFIED",
            "NO_BORDER",
            "STROKE"
          ],
          "type": "string",
          "description": "The border type."
        },
        "cornerRadius": {
          "type": "integer",
          "description": "The corner radius for the border.",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1OpenLink": {
      "id": "GoogleAppsCardV1OpenLink",
      "type": "object",
      "properties": {
        "onClose": {
          "type": "string",
          "enumDescriptions": [
            "Doesn’t reload the card after the child window closes. Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the main card is blocked until the child window closes.",
            ""
          ],
          "enum": [
            "NOTHING",
            "RELOAD"
          ]
        },
        "url": {
          "type": "string",
          "description": "The URL to open."
        },
        "openAs": {
          "type": "string",
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ],
          "enumDescriptions": [
            "The link opens as a full size window (if that's the frame used by the client.",
            "The link opens as an overlay, such as a pop-up."
          ]
        }
      }
    },
    "GoogleAppsCardV1Widget": {
      "id": "GoogleAppsCardV1Widget",
      "properties": {
        "horizontalAlignment": {
          "type": "string",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "description": "The horizontal alignment of this widget."
        },
        "textParagraph": {
          "description": "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```",
          "$ref": "GoogleAppsCardV1TextParagraph"
        },
        "selectionInput": {
          "$ref": "GoogleAppsCardV1SelectionInput",
          "description": "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```"
        },
        "image": {
          "$ref": "GoogleAppsCardV1Image",
          "description": "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/heba_salam.png\" \"altText\": \"Avatar for Heba Salam\" } ```"
        },
        "textInput": {
          "$ref": "GoogleAppsCardV1TextInput",
          "description": "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```"
        },
        "grid": {
          "$ref": "GoogleAppsCardV1Grid",
          "description": "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```"
        },
        "dateTimePicker": {
          "description": "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```",
          "$ref": "GoogleAppsCardV1DateTimePicker"
        },
        "decoratedText": {
          "$ref": "GoogleAppsCardV1DecoratedText",
          "description": "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"heba.salam@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_heba_salam\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```"
        },
        "divider": {
          "$ref": "GoogleAppsCardV1Divider",
          "description": "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"
        },
        "buttonList": {
          "$ref": "GoogleAppsCardV1ButtonList",
          "description": "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```"
        }
      },
      "type": "object",
      "description": "A widget is a UI element that presents texts, images, etc."
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "id": "Empty",
      "type": "object"
    },
    "Color": {
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...",
      "id": "Color",
      "properties": {
        "green": {
          "type": "number",
          "format": "float",
          "description": "The amount of green in the color as a value in the interval [0, 1]."
        },
        "red": {
          "format": "float",
          "type": "number",
          "description": "The amount of red in the color as a value in the interval [0, 1]."
        },
        "alpha": {
          "format": "float",
          "type": "number",
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."
        },
        "blue": {
          "type": "number",
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "format": "float"
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1GridItem": {
      "type": "object",
      "id": "GoogleAppsCardV1GridItem",
      "properties": {
        "image": {
          "description": "The image that displays in the grid item.",
          "$ref": "GoogleAppsCardV1ImageComponent"
        },
        "textAlignment": {
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string",
          "description": "The horizontal alignment of the grid item's text."
        },
        "id": {
          "type": "string",
          "description": "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters."
        },
        "title": {
          "type": "string",
          "description": "The grid item's title."
        },
        "subtitle": {
          "type": "string",
          "description": "The grid item's subtitle."
        },
        "layout": {
          "enum": [
            "GRID_ITEM_LAYOUT_UNSPECIFIED",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ],
          "type": "string",
          "enumDescriptions": [
            "No layout specified.",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "description": "The layout to use for the grid item."
        }
      },
      "description": "Represents a single item in the grid layout."
    },
    "UserMentionMetadata": {
      "properties": {
        "user": {
          "$ref": "User",
          "description": "The user mentioned."
        },
        "type": {
          "description": "The type of user mention.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "MENTION"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add user to space.",
            "Mention user in space."
          ]
        }
      },
      "id": "UserMentionMetadata",
      "type": "object",
      "description": "Annotation metadata for user mentions (@)."
    },
    "User": {
      "type": "object",
      "description": "A user in Google Chat.",
      "properties": {
        "isAnonymous": {
          "description": "True when the user is deleted or the user's profile is not visible.",
          "type": "boolean"
        },
        "displayName": {
          "description": "The user's display name.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Resource name, in the format \"users/*\"."
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "HUMAN",
            "BOT"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Human user.",
            "Bot user."
          ],
          "description": "User type."
        },
        "domainId": {
          "description": "Obfuscated domain information.",
          "type": "string"
        }
      },
      "id": "User"
    },
    "ActionParameter": {
      "type": "object",
      "id": "ActionParameter",
      "properties": {
        "key": {
          "description": "The name of the parameter for the action script.",
          "type": "string"
        },
        "value": {
          "description": "The value of the parameter.",
          "type": "string"
        }
      },
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "servicePath": "",
  "description": "Enables bots to fetch information and perform actions in Google Chat. Authentication using a service account is a prerequisite for using the Google Chat REST API.",
  "ownerName": "Google",
  "version_module": true,
  "ownerDomain": "google.com",
  "resources": {
    "dms": {
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "path": "v1/{+parent}/messages",
              "request": {
                "$ref": "Message"
              },
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "httpMethod": "POST",
              "flatPath": "v1/dms/{dmsId}/conversations/{conversationsId}/messages",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "threadKey": {
                  "type": "string",
                  "location": "query",
                  "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
                },
                "parent": {
                  "pattern": "^dms/[^/]+/conversations/[^/]+$",
                  "type": "string",
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "chat.dms.conversations.messages",
              "response": {
                "$ref": "Message"
              }
            }
          }
        }
      },
      "methods": {
        "messages": {
          "parameters": {
            "threadKey": {
              "type": "string",
              "location": "query",
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            },
            "parent": {
              "location": "path",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "type": "string",
              "pattern": "^dms/[^/]+$",
              "required": true
            }
          },
          "flatPath": "v1/dms/{dmsId}/messages",
          "id": "chat.dms.messages",
          "path": "v1/{+parent}/messages",
          "response": {
            "$ref": "Message"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "Message"
          },
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameterOrder": [
            "parent"
          ]
        },
        "webhooks": {
          "response": {
            "$ref": "Message"
          },
          "request": {
            "$ref": "Message"
          },
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "flatPath": "v1/dms/{dmsId}/webhooks",
          "parameterOrder": [
            "parent"
          ],
          "path": "v1/{+parent}/webhooks",
          "id": "chat.dms.webhooks",
          "parameters": {
            "threadKey": {
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
              "type": "string",
              "location": "query"
            },
            "parent": {
              "pattern": "^dms/[^/]+$",
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"
            }
          },
          "httpMethod": "POST"
        }
      }
    },
    "rooms": {
      "methods": {
        "webhooks": {
          "httpMethod": "POST",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "path": "v1/{+parent}/webhooks",
          "parameters": {
            "parent": {
              "required": true,
              "location": "path",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "type": "string",
              "pattern": "^rooms/[^/]+$"
            },
            "threadKey": {
              "location": "query",
              "type": "string",
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            }
          },
          "response": {
            "$ref": "Message"
          },
          "parameterOrder": [
            "parent"
          ],
          "request": {
            "$ref": "Message"
          },
          "flatPath": "v1/rooms/{roomsId}/webhooks",
          "id": "chat.rooms.webhooks"
        },
        "messages": {
          "response": {
            "$ref": "Message"
          },
          "id": "chat.rooms.messages",
          "flatPath": "v1/rooms/{roomsId}/messages",
          "path": "v1/{+parent}/messages",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameterOrder": [
            "parent"
          ],
          "parameters": {
            "threadKey": {
              "location": "query",
              "type": "string",
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            },
            "parent": {
              "location": "path",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "pattern": "^rooms/[^/]+$",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "Message"
          },
          "httpMethod": "POST"
        }
      },
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "response": {
                "$ref": "Message"
              },
              "flatPath": "v1/rooms/{roomsId}/conversations/{conversationsId}/messages",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "location": "path",
                  "type": "string",
                  "pattern": "^rooms/[^/]+/conversations/[^/]+$",
                  "required": true
                },
                "threadKey": {
                  "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
                  "type": "string",
                  "location": "query"
                }
              },
              "httpMethod": "POST",
              "id": "chat.rooms.conversations.messages",
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "request": {
                "$ref": "Message"
              },
              "path": "v1/{+parent}/messages"
            }
          }
        }
      }
    },
    "spaces": {
      "methods": {
        "webhooks": {
          "parameters": {
            "parent": {
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^spaces/[^/]+$",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY"
            },
            "threadKey": {
              "type": "string",
              "location": "query",
              "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            }
          },
          "id": "chat.spaces.webhooks",
          "response": {
            "$ref": "Message"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "parent"
          ],
          "flatPath": "v1/spaces/{spacesId}/webhooks",
          "path": "v1/{+parent}/webhooks",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "request": {
            "$ref": "Message"
          }
        },
        "list": {
          "description": "Lists spaces the caller is a member of.",
          "httpMethod": "GET",
          "response": {
            "$ref": "ListSpacesResponse"
          },
          "parameterOrder": [],
          "flatPath": "v1/spaces",
          "id": "chat.spaces.list",
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "A token identifying a page of results the server should return."
            },
            "pageSize": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100."
            }
          },
          "path": "v1/spaces"
        },
        "get": {
          "parameters": {
            "name": {
              "description": "Required. Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
              "pattern": "^spaces/[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/spaces/{spacesId}",
          "response": {
            "$ref": "Space"
          },
          "path": "v1/{+name}",
          "httpMethod": "GET",
          "description": "Returns a space.",
          "id": "chat.spaces.get"
        }
      },
      "resources": {
        "messages": {
          "methods": {
            "create": {
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "Message"
              },
              "flatPath": "v1/spaces/{spacesId}/messages",
              "path": "v1/{+parent}/messages",
              "description": "Creates a message.",
              "id": "chat.spaces.messages.create",
              "parameters": {
                "threadKey": {
                  "location": "query",
                  "type": "string",
                  "description": "Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Hangouts Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
                },
                "parent": {
                  "pattern": "^spaces/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Message"
              }
            },
            "delete": {
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "location": "path",
                  "required": true,
                  "pattern": "^spaces/[^/]+/messages/[^/]+$"
                }
              },
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE",
              "id": "chat.spaces.messages.delete",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "description": "Deletes a message.",
              "response": {
                "$ref": "Empty"
              }
            },
            "update": {
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "response": {
                "$ref": "Message"
              },
              "id": "chat.spaces.messages.update",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PUT",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$"
                },
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards",
                  "location": "query",
                  "type": "string"
                }
              },
              "description": "Updates a message.",
              "path": "v1/{+name}",
              "request": {
                "$ref": "Message"
              }
            },
            "get": {
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "id": "chat.spaces.messages.get",
              "path": "v1/{+name}",
              "httpMethod": "GET",
              "response": {
                "$ref": "Message"
              },
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the message to be retrieved, in the form \"spaces/*/messages/*\". Example: spaces/AAAAMpdlehY/messages/UMxbHmzDlr4.UMxbHmzDlr4",
                  "required": true,
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Returns a message."
            }
          },
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "Attachment"
                  },
                  "path": "v1/{+name}",
                  "description": "Gets the metadata of a message attachment. The attachment data is fetched using the media API.",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "chat.spaces.messages.attachments.get",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^spaces/[^/]+/messages/[^/]+/attachments/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\"."
                    }
                  },
                  "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}"
                }
              }
            }
          }
        },
        "members": {
          "methods": {
            "list": {
              "path": "v1/{+parent}/members",
              "parameterOrder": [
                "parent"
              ],
              "id": "chat.spaces.members.list",
              "flatPath": "v1/spaces/{spacesId}/members",
              "description": "Lists human memberships in a space.",
              "parameters": {
                "parent": {
                  "type": "string",
                  "pattern": "^spaces/[^/]+$",
                  "description": "Required. The resource name of the space for which membership list is to be fetched, in the form \"spaces/*\". Example: spaces/AAAAMpdlehY",
                  "required": true,
                  "location": "path"
                },
                "pageSize": {
                  "format": "int32",
                  "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.",
                  "type": "integer",
                  "location": "query"
                },
                "pageToken": {
                  "location": "query",
                  "description": "A token identifying a page of results the server should return.",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "ListMembershipsResponse"
              }
            },
            "get": {
              "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
              "parameterOrder": [
                "name"
              ],
              "description": "Returns a membership.",
              "id": "chat.spaces.members.get",
              "response": {
                "$ref": "Membership"
              },
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "pattern": "^spaces/[^/]+/members/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Required. Resource name of the membership to be retrieved, in the form \"spaces/*/members/*\". Example: spaces/AAAAMpdlehY/members/105115627578887013105",
                  "location": "path"
                }
              },
              "httpMethod": "GET"
            }
          }
        }
      }
    },
    "media": {
      "methods": {
        "download": {
          "parameterOrder": [
            "resourceName"
          ],
          "supportsMediaDownload": true,
          "response": {
            "$ref": "Media"
          },
          "path": "v1/media/{+resourceName}",
          "flatPath": "v1/media/{mediaId}",
          "id": "chat.media.download",
          "description": "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
          "httpMethod": "GET",
          "parameters": {
            "resourceName": {
              "pattern": "^.*$",
              "location": "path",
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name.",
              "required": true,
              "type": "string"
            }
          }
        }
      }
    }
  },
  "documentationLink": "https://developers.google.com/hangouts/chat",
  "id": "chat:v1",
  "basePath": "",
  "mtlsRootUrl": "https://chat.mtls.googleapis.com/",
  "version": "v1",
  "baseUrl": "https://chat.googleapis.com/",
  "rootUrl": "https://chat.googleapis.com/",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "revision": "20210605",
  "title": "Google Chat API",
  "name": "chat",
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "alt": {
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "default": "json",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    }
  },
  "kind": "discovery#restDescription"
}

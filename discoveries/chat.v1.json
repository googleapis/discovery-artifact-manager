{
  "batchPath": "batch",
  "id": "chat:v1",
  "version_module": true,
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "fullyEncodeReservedExpansion": true,
  "discoveryVersion": "v1",
  "servicePath": "",
  "ownerDomain": "google.com",
  "basePath": "",
  "schemas": {
    "DynamiteIntegrationLogEntry": {
      "description": "JSON payload of error messages. If the Cloud Logging API is enabled, these error messages are logged to [Google Cloud Logging](https://cloud.google.com/logging/docs).",
      "id": "DynamiteIntegrationLogEntry",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error code and message."
        },
        "deployment": {
          "type": "string",
          "description": "The deployment that caused the error. For Chat bots built in Apps Script, this is the deployment ID defined by Apps Script."
        },
        "deploymentFunction": {
          "description": "The unencrypted `callback_method` name that was running when the error was encountered.",
          "type": "string"
        }
      }
    },
    "SlashCommandMetadata": {
      "id": "SlashCommandMetadata",
      "properties": {
        "commandId": {
          "description": "The command id of the invoked slash command.",
          "type": "string",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "description": "The type of slash command.",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add bot to space.",
            "Invoke slash command in space."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "INVOKE"
          ]
        },
        "triggersDialog": {
          "type": "boolean",
          "description": "Indicating whether the slash command is for a dialog."
        },
        "commandName": {
          "type": "string",
          "description": "The name of the invoked slash command."
        },
        "bot": {
          "description": "The bot whose command was invoked.",
          "$ref": "User"
        }
      },
      "type": "object",
      "description": "Annotation metadata for slash commands (/)."
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "Dialog": {
      "description": "Wrapper around the card body of the dialog.",
      "id": "Dialog",
      "properties": {
        "body": {
          "description": "Body of the dialog, which will be rendered in a modal. NOTE: The following fields within the objects are not supported: google.apps.card.v1.Widget.date_time_picker google.apps.card.v1.DecoratedText.SwitchControl.on_change_action google.apps.card.v1.TextInput.on_change_action google.apps.card.v1.SelectionInput.on_change_action google.apps.card.v1.DateTimePicker.on_change_action Setting the fields above will have no effect on the dialog.",
          "$ref": "GoogleAppsCardV1Card"
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1SuggestionItem": {
      "description": "A suggestion item. Only supports text for now.",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1SuggestionItem",
      "type": "object"
    },
    "AttachmentDataRef": {
      "properties": {
        "resourceName": {
          "description": "The resource name of the attachment data. This is used with the media API to download the attachment data.",
          "type": "string"
        }
      },
      "id": "AttachmentDataRef",
      "description": "A reference to the data of an attachment.",
      "type": "object"
    },
    "OnClick": {
      "type": "object",
      "properties": {
        "openLink": {
          "description": "This onclick triggers an open link action if specified.",
          "$ref": "OpenLink"
        },
        "action": {
          "$ref": "FormAction",
          "description": "A form action will be triggered by this onclick if specified."
        }
      },
      "description": "An onclick action (e.g. open a link).",
      "id": "OnClick"
    },
    "GoogleAppsCardV1Widget": {
      "properties": {
        "selectionInput": {
          "description": "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```",
          "$ref": "GoogleAppsCardV1SelectionInput"
        },
        "horizontalAlignment": {
          "type": "string",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "description": "The horizontal alignment of this widget.",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ]
        },
        "image": {
          "$ref": "GoogleAppsCardV1Image",
          "description": "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/heba_salam.png\" \"altText\": \"Avatar for Heba Salam\" } ```"
        },
        "divider": {
          "$ref": "GoogleAppsCardV1Divider",
          "description": "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"
        },
        "decoratedText": {
          "$ref": "GoogleAppsCardV1DecoratedText",
          "description": "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"heba.salam@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_heba_salam\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```"
        },
        "dateTimePicker": {
          "description": "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```",
          "$ref": "GoogleAppsCardV1DateTimePicker"
        },
        "textParagraph": {
          "description": "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```",
          "$ref": "GoogleAppsCardV1TextParagraph"
        },
        "grid": {
          "description": "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```",
          "$ref": "GoogleAppsCardV1Grid"
        },
        "buttonList": {
          "$ref": "GoogleAppsCardV1ButtonList",
          "description": "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```"
        },
        "textInput": {
          "$ref": "GoogleAppsCardV1TextInput",
          "description": "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```"
        }
      },
      "type": "object",
      "description": "A widget is a UI element that presents texts, images, etc.",
      "id": "GoogleAppsCardV1Widget"
    },
    "GoogleAppsCardV1Card": {
      "type": "object",
      "properties": {
        "sections": {
          "description": "Sections are separated by a line divider.",
          "items": {
            "$ref": "GoogleAppsCardV1Section"
          },
          "type": "array"
        },
        "cardActions": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1CardAction"
          },
          "description": "The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Setting\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```"
        },
        "name": {
          "type": "string",
          "description": "Name of the card, which is used as a identifier for the card in card navigation."
        },
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "GoogleAppsCardV1CardHeader"
        },
        "displayStyle": {
          "description": "The display style for peekCardHeader.",
          "enumDescriptions": [
            "",
            "The header of the card appears at the bottom of the sidebar, partially covering the current top card of the stack. Clicking the header pops the card into the card stack. If the card has no header, a generated header is used instead.",
            "The card is shown by replacing the view of the top card in the card stack."
          ],
          "type": "string",
          "enum": [
            "DISPLAY_STYLE_UNSPECIFIED",
            "PEEK",
            "REPLACE"
          ]
        },
        "peekCardHeader": {
          "$ref": "GoogleAppsCardV1CardHeader",
          "description": "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards."
        },
        "fixedFooter": {
          "$ref": "GoogleAppsCardV1CardFixedFooter",
          "description": "The fixed footer shown at the bottom of this card."
        }
      },
      "id": "GoogleAppsCardV1Card",
      "description": "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Heba Salam\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/heba_salam.png\", \"imageAltText\": \"Avatar for Heba Salam\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"heba.salam@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```"
    },
    "Section": {
      "id": "Section",
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
      "properties": {
        "widgets": {
          "items": {
            "$ref": "WidgetMarkup"
          },
          "type": "array",
          "description": "A section must contain at least 1 widget."
        },
        "header": {
          "type": "string",
          "description": "The header of the section, text formatted supported."
        }
      },
      "type": "object"
    },
    "ActionParameter": {
      "id": "ActionParameter",
      "properties": {
        "key": {
          "description": "The name of the parameter for the action script.",
          "type": "string"
        },
        "value": {
          "description": "The value of the parameter.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."
    },
    "GoogleAppsCardV1DateTimePicker": {
      "type": "object",
      "properties": {
        "onChangeAction": {
          "description": "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "timezoneOffsetDate": {
          "description": "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side.",
          "format": "int32",
          "type": "integer"
        },
        "valueMsEpoch": {
          "format": "int64",
          "type": "string",
          "description": "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am."
        },
        "label": {
          "type": "string",
          "description": "The label for the field that displays to the user."
        },
        "name": {
          "description": "The name of the text input that's used in formInput, and uniquely identifies this input.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "The user can select a date and time.",
            "The user can only select a date.",
            "The user can only select a time."
          ],
          "type": "string",
          "description": "The type of the date/time picker.",
          "enum": [
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ]
        }
      },
      "id": "GoogleAppsCardV1DateTimePicker",
      "description": "The widget that lets users to specify a date and time."
    },
    "UserMentionMetadata": {
      "id": "UserMentionMetadata",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of user mention.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "MENTION"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Add user to space.",
            "Mention user in space."
          ]
        },
        "user": {
          "$ref": "User",
          "description": "The user mentioned."
        }
      },
      "description": "Annotation metadata for user mentions (@).",
      "type": "object"
    },
    "GoogleAppsCardV1Divider": {
      "id": "GoogleAppsCardV1Divider",
      "description": "A divider that appears in between widgets.",
      "properties": {},
      "type": "object"
    },
    "GoogleAppsCardV1Button": {
      "properties": {
        "onClick": {
          "description": "The action to perform when the button is clicked.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "text": {
          "description": "The text of the button.",
          "type": "string"
        },
        "altText": {
          "description": "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.",
          "type": "string"
        },
        "color": {
          "description": "If set, the button is filled with a solid background.",
          "$ref": "Color"
        },
        "disabled": {
          "description": "If true, the button is displayed in a disabled state and doesn't respond to user actions.",
          "type": "boolean"
        },
        "icon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "The icon image."
        }
      },
      "id": "GoogleAppsCardV1Button",
      "type": "object",
      "description": "A button. Can be a text button or an image button."
    },
    "GoogleAppsCardV1Suggestions": {
      "description": "A container wrapping elements necessary for showing suggestion items used in text input autocomplete.",
      "properties": {
        "items": {
          "items": {
            "$ref": "GoogleAppsCardV1SuggestionItem"
          },
          "description": "A list of suggestions items which will be used in are used in autocomplete.",
          "type": "array"
        }
      },
      "id": "GoogleAppsCardV1Suggestions",
      "type": "object"
    },
    "GoogleAppsCardV1TextParagraph": {
      "description": "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.",
      "properties": {
        "text": {
          "description": "The text that's shown in the widget.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1TextParagraph",
      "type": "object"
    },
    "DialogAction": {
      "properties": {
        "actionStatus": {
          "description": "Status for either invoke dialog or submit dialog requests. This will be used to display a status and message to user if needed. For example in case of an error or success.",
          "$ref": "ActionStatus"
        },
        "dialog": {
          "$ref": "Dialog",
          "description": "Dialog for the request."
        }
      },
      "id": "DialogAction",
      "description": "Contains dialog if present as well as the ActionStatus for the request sent from user.",
      "type": "object"
    },
    "ActionResponse": {
      "type": "object",
      "description": "Parameters that a bot can use to configure how it's response is posted.",
      "id": "ActionResponse",
      "properties": {
        "url": {
          "description": "URL for users to auth or config. (Only for REQUEST_CONFIG response types.)",
          "type": "string"
        },
        "dialogAction": {
          "$ref": "DialogAction",
          "description": "This response is for Dialog related events and must be accompanied by ResponseType.Dialog"
        },
        "type": {
          "enumDescriptions": [
            "Default type; will be handled as NEW_MESSAGE.",
            "Post as a new message in the topic.",
            "Update the bot's message. This is only permitted on a CARD_CLICKED event where the message sender type is BOT.",
            "Update the cards on a user's message. This is only permitted as a response to a MESSAGE event with a matched url, or a CARD_CLICKED event where the message sender type is HUMAN. Text will be ignored.",
            "Privately ask the user for additional auth or config."
          ],
          "description": "The type of bot response.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "NEW_MESSAGE",
            "UPDATE_MESSAGE",
            "UPDATE_USER_MESSAGE_CARDS",
            "REQUEST_CONFIG"
          ]
        }
      }
    },
    "Message": {
      "id": "Message",
      "description": "A message in Google Chat.",
      "properties": {
        "text": {
          "type": "string",
          "description": "Plain-text body of the message."
        },
        "sender": {
          "description": "The user who created the message.",
          "$ref": "User"
        },
        "previewText": {
          "type": "string",
          "description": "Text for generating preview chips. This text will not be displayed to the user, but any links to images, web pages, videos, etc. included here will generate preview chips."
        },
        "actionResponse": {
          "$ref": "ActionResponse",
          "description": "Input only. Parameters that a bot can use to configure how its response is posted."
        },
        "slashCommand": {
          "$ref": "SlashCommand",
          "description": "Slash command information, if applicable."
        },
        "space": {
          "description": "The space the message belongs to.",
          "$ref": "Space"
        },
        "cards": {
          "type": "array",
          "items": {
            "$ref": "Card"
          },
          "description": "Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message."
        },
        "fallbackText": {
          "description": "A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).",
          "type": "string"
        },
        "name": {
          "description": "Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`",
          "type": "string"
        },
        "thread": {
          "description": "The thread the message belongs to.",
          "$ref": "Thread"
        },
        "matchedUrl": {
          "description": "A URL in `spaces.messages.text` that matches a link unfurling pattern. For more information, refer to [Unfurl links](/chat/how-tos/link-unfurling).",
          "$ref": "MatchedUrl"
        },
        "attachment": {
          "description": "User uploaded attachment.",
          "type": "array",
          "items": {
            "$ref": "Attachment"
          }
        },
        "createTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time at which the message was created in Google Chat server.",
          "format": "google-datetime"
        },
        "lastUpdateTime": {
          "description": "Output only. The time at which the message was last updated in Google Chat server. If the message was never updated, this field will be same as create_time.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "argumentText": {
          "type": "string",
          "description": "Plain-text body of the message with all bot mentions stripped out."
        },
        "annotations": {
          "description": "Output only. Annotations associated with the text in this message.",
          "type": "array",
          "items": {
            "$ref": "Annotation"
          }
        }
      },
      "type": "object"
    },
    "MatchedUrl": {
      "description": "A matched url in a Chat message. Chat bots can unfurl matched URLs. For more information, refer to [Unfurl links](/chat/how-tos/link-unfurling).",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The url that was matched."
        }
      },
      "id": "MatchedUrl"
    },
    "ListMembershipsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results."
        },
        "memberships": {
          "description": "List of memberships in the requested (or first) page.",
          "items": {
            "$ref": "Membership"
          },
          "type": "array"
        }
      },
      "id": "ListMembershipsResponse",
      "type": "object"
    },
    "FormAction": {
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "id": "FormAction",
      "properties": {
        "parameters": {
          "items": {
            "$ref": "ActionParameter"
          },
          "description": "List of action parameters.",
          "type": "array"
        },
        "actionMethodName": {
          "type": "string",
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the bot as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1DecoratedText": {
      "id": "GoogleAppsCardV1DecoratedText",
      "description": "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text.",
      "type": "object",
      "properties": {
        "endIcon": {
          "description": "An icon displayed after the text.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "bottomLabel": {
          "description": "The formatted text label that shows below the main text.",
          "type": "string"
        },
        "icon": {
          "$ref": "GoogleAppsCardV1Icon",
          "description": "Deprecated in favor of start_icon."
        },
        "startIcon": {
          "description": "The icon displayed in front of the text.",
          "$ref": "GoogleAppsCardV1Icon"
        },
        "button": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "wrapText": {
          "type": "boolean",
          "description": "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated."
        },
        "topLabel": {
          "description": "The formatted text label that shows above the main text.",
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Required. The main widget formatted text. See Text formatting for details."
        },
        "onClick": {
          "description": "Only the top and bottom label and content region are clickable.",
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "switchControl": {
          "$ref": "GoogleAppsCardV1SwitchControl",
          "description": "A switch widget can be clicked to change its state or trigger an action."
        }
      }
    },
    "GoogleAppsCardV1ActionParameter": {
      "id": "GoogleAppsCardV1ActionParameter",
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        },
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1Grid": {
      "id": "GoogleAppsCardV1Grid",
      "properties": {
        "borderStyle": {
          "description": "The border style to apply to each grid item.",
          "$ref": "GoogleAppsCardV1BorderStyle"
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick",
          "description": "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters."
        },
        "columnCount": {
          "type": "integer",
          "description": "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
          "format": "int32"
        },
        "items": {
          "description": "The items to display in the grid.",
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1GridItem"
          }
        },
        "title": {
          "description": "The text that displays in the grid header.",
          "type": "string"
        }
      },
      "description": "Represents a Grid widget that displays items in a configurable grid layout.",
      "type": "object"
    },
    "TimeZone": {
      "description": "The timezone id and offset. The id is the tz database time zones such as \"America/Toronto\". The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC).",
      "id": "TimeZone",
      "properties": {
        "id": {
          "type": "string"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "Image": {
      "type": "object",
      "description": "An image that is specified by a URL and can have an onclick action.",
      "id": "Image",
      "properties": {
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        },
        "aspectRatio": {
          "type": "number",
          "format": "double",
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."
        },
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action."
        }
      }
    },
    "GoogleAppsCardV1OnClick": {
      "type": "object",
      "properties": {
        "card": {
          "$ref": "GoogleAppsCardV1Card",
          "description": "A new card is pushed to the card stack after clicking if specified."
        },
        "action": {
          "description": "If specified, an action is triggered by this onClick.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "openLink": {
          "description": "If specified, this onClick triggers an open link action.",
          "$ref": "GoogleAppsCardV1OpenLink"
        },
        "openDynamicLinkAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back."
        }
      },
      "id": "GoogleAppsCardV1OnClick"
    },
    "Thread": {
      "description": "A thread in Google Chat.",
      "id": "Thread",
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name, in the form \"spaces/*/threads/*\". Example: spaces/AAAAAAAAAAA/threads/TTTTTTTTTTT"
        }
      },
      "type": "object"
    },
    "User": {
      "id": "User",
      "type": "object",
      "description": "A user in Google Chat.",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Human user.",
            "Bot user."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "HUMAN",
            "BOT"
          ],
          "description": "User type."
        },
        "isAnonymous": {
          "type": "boolean",
          "description": "True when the user is deleted or the user's profile is not visible."
        },
        "domainId": {
          "type": "string",
          "description": "Unique identifier of the user's Google Workspace domain."
        },
        "name": {
          "description": "Resource name for a Google Chat user. Formatted as `users/AAAAAAAAAAA`. Represents a [person](https://developers.google.com/people/api/rest/v1/people#Person) in the People API.",
          "type": "string"
        },
        "displayName": {
          "description": "The user's display name.",
          "type": "string"
        }
      }
    },
    "DriveDataRef": {
      "id": "DriveDataRef",
      "type": "object",
      "description": "A reference to the data of a drive attachment.",
      "properties": {
        "driveFileId": {
          "description": "The id for the drive file, for use with the Drive API.",
          "type": "string"
        }
      }
    },
    "Media": {
      "id": "Media",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "Name of the media resource."
        }
      },
      "type": "object",
      "description": "Media resource."
    },
    "GoogleAppsCardV1SwitchControl": {
      "id": "GoogleAppsCardV1SwitchControl",
      "type": "object",
      "properties": {
        "controlType": {
          "enum": [
            "SWITCH",
            "CHECKBOX",
            "CHECK_BOX"
          ],
          "description": "The control type, either switch or checkbox.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Deprecated in favor of `CHECK_BOX`.",
            ""
          ]
        },
        "selected": {
          "description": "If the switch is selected.",
          "type": "boolean"
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "The action when the switch state is changed."
        },
        "name": {
          "type": "string",
          "description": "The name of the switch widget that's used in formInput."
        },
        "value": {
          "description": "The value is what is passed back in the callback.",
          "type": "string"
        }
      }
    },
    "Inputs": {
      "properties": {
        "stringInputs": {
          "$ref": "StringInputs"
        },
        "timeInput": {
          "$ref": "TimeInput"
        },
        "dateTimeInput": {
          "$ref": "DateTimeInput"
        },
        "dateInput": {
          "$ref": "DateInput"
        }
      },
      "type": "object",
      "id": "Inputs",
      "description": "The inputs with widgets."
    },
    "GoogleAppsCardV1Icon": {
      "type": "object",
      "properties": {
        "imageType": {
          "description": "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ]
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "knownIcon": {
          "description": "The icon specified by the string name of a list of known icons",
          "type": "string"
        },
        "altText": {
          "type": "string",
          "description": "The description of the icon, used for accessibility. The default value is provided if you don't specify one."
        }
      },
      "id": "GoogleAppsCardV1Icon"
    },
    "GoogleAppsCardV1CardAction": {
      "type": "object",
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The label that displays as the action menu item."
        },
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "GoogleAppsCardV1OnClick"
        }
      },
      "id": "GoogleAppsCardV1CardAction",
      "description": "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser."
    },
    "OpenLink": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to open."
        }
      },
      "id": "OpenLink",
      "description": "A link that opens a new window.",
      "type": "object"
    },
    "ListSpacesResponse": {
      "id": "ListSpacesResponse",
      "type": "object",
      "properties": {
        "spaces": {
          "items": {
            "$ref": "Space"
          },
          "description": "List of spaces in the requested (or first) page.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed.",
          "type": "string"
        }
      }
    },
    "Color": {
      "id": "Color",
      "type": "object",
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...",
      "properties": {
        "alpha": {
          "format": "float",
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).",
          "type": "number"
        },
        "blue": {
          "format": "float",
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "type": "number"
        },
        "green": {
          "type": "number",
          "format": "float",
          "description": "The amount of green in the color as a value in the interval [0, 1]."
        },
        "red": {
          "type": "number",
          "format": "float",
          "description": "The amount of red in the color as a value in the interval [0, 1]."
        }
      }
    },
    "GoogleAppsCardV1GridItem": {
      "id": "GoogleAppsCardV1GridItem",
      "properties": {
        "textAlignment": {
          "type": "string",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "description": "The horizontal alignment of the grid item's text.",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ]
        },
        "subtitle": {
          "description": "The grid item's subtitle.",
          "type": "string"
        },
        "image": {
          "description": "The image that displays in the grid item.",
          "$ref": "GoogleAppsCardV1ImageComponent"
        },
        "id": {
          "type": "string",
          "description": "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters."
        },
        "title": {
          "type": "string",
          "description": "The grid item's title."
        },
        "layout": {
          "enum": [
            "GRID_ITEM_LAYOUT_UNSPECIFIED",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ],
          "description": "The layout to use for the grid item.",
          "enumDescriptions": [
            "No layout specified.",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "type": "string"
        }
      },
      "description": "Represents a single item in the grid layout.",
      "type": "object"
    },
    "Space": {
      "description": "A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat bot.",
      "properties": {
        "type": {
          "enumDescriptions": [
            "",
            "Conversations between two or more humans.",
            "1:1 Direct Message between a human and a Chat bot, where all messages are flat. Note that this does not include direct messages between two humans."
          ],
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "ROOM",
            "DM"
          ],
          "description": "Deprecated. Use `single_user_bot_dm` instead. Output only. The type of a space."
        },
        "name": {
          "type": "string",
          "description": "Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAAA"
        },
        "threaded": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Whether the messages are threaded in this space."
        },
        "displayName": {
          "description": "The space's display name. For direct messages between humans, this field might be empty.",
          "type": "string"
        },
        "singleUserBotDm": {
          "readOnly": true,
          "description": "Output only. Whether the space is a DM between a bot and a single human.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "Space"
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "DateTimeInput": {
      "description": "Input Parameter for Date and Time Picker widget.",
      "id": "DateTimeInput",
      "properties": {
        "hasTime": {
          "type": "boolean"
        },
        "hasDate": {
          "type": "boolean"
        },
        "msSinceEpoch": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommonEventObject": {
      "type": "object",
      "id": "CommonEventObject",
      "properties": {
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Any additional parameters."
        },
        "formInputs": {
          "type": "object",
          "description": "The keys are the string IDs associated with the widget and the values are inputs with a widget in the card.",
          "additionalProperties": {
            "$ref": "Inputs"
          }
        },
        "timeZone": {
          "$ref": "TimeZone"
        },
        "userLocale": {
          "description": "The full locale.displayName in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\"",
          "type": "string"
        },
        "platform": {
          "enum": [
            "UNKNOWN_PLATFORM",
            "WEB",
            "IOS",
            "ANDROID"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "description": "The platform enum which indicates the platform where the add-on is running.",
          "type": "string"
        },
        "hostApp": {
          "type": "string",
          "enum": [
            "UNSPECIFIED_HOST_APP",
            "GMAIL",
            "CALENDAR",
            "DRIVE",
            "DEMO",
            "DOCS",
            "SHEETS",
            "SLIDES",
            "DRAWINGS",
            "CHAT",
            "ALL_HOST_APPS"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "This is only used for aggregating logs on the server. Clients should never send these values directly."
          ],
          "description": "The hostApp enum which indicates the app the add-on is invoked from"
        },
        "invokedFunction": {
          "description": "Name of the invoked function associated with the widget. This field is currently only set for chat.",
          "type": "string"
        }
      },
      "description": "Next available ID = 8"
    },
    "Membership": {
      "properties": {
        "createTime": {
          "description": "Output only. The creation time of the membership a.k.a. the time at which the member joined the space, if applicable.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "member": {
          "description": "A user in Google Chat. Represents a person in the People API. Formatted as `users/person_id` where `person_id` is available from the [People API](https://developers.google.com/people/api/rest/v1/people).",
          "$ref": "User"
        },
        "state": {
          "enum": [
            "MEMBERSHIP_STATE_UNSPECIFIED",
            "JOINED",
            "INVITED",
            "NOT_A_MEMBER"
          ],
          "enumDescriptions": [
            "Default, do not use.",
            "The user has joined the space.",
            "The user has been invited, is able to join the space, but currently has not joined.",
            "The user is not a member of the space, has not been invited and is not able to join the space."
          ],
          "type": "string",
          "description": "State of the membership. Required for `CreateMembership`. Read-only for other usage."
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Represents a membership relation in Google Chat.",
      "id": "Membership",
      "type": "object"
    },
    "GoogleAppsCardV1BorderStyle": {
      "properties": {
        "cornerRadius": {
          "format": "int32",
          "description": "The corner radius for the border.",
          "type": "integer"
        },
        "type": {
          "description": "The border type.",
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ],
          "type": "string",
          "enum": [
            "BORDER_TYPE_UNSPECIFIED",
            "NO_BORDER",
            "STROKE"
          ]
        },
        "strokeColor": {
          "$ref": "Color",
          "description": "The colors to use when the type is `BORDER_TYPE_STROKE`."
        }
      },
      "id": "GoogleAppsCardV1BorderStyle",
      "type": "object",
      "description": "Represents the complete border style applied to widgets."
    },
    "TimeInput": {
      "id": "TimeInput",
      "properties": {
        "minutes": {
          "type": "integer",
          "format": "int32"
        },
        "hours": {
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "description": "Input Parameter for Time Picker widget."
    },
    "Attachment": {
      "properties": {
        "contentType": {
          "description": "The content type (MIME type) of the file.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\"."
        },
        "source": {
          "type": "string",
          "description": "The source of the attachment.",
          "enum": [
            "SOURCE_UNSPECIFIED",
            "DRIVE_FILE",
            "UPLOADED_CONTENT"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "thumbnailUri": {
          "type": "string",
          "description": "Output only. The thumbnail URL which should be used to preview the attachment to a human user. Bots should not use this URL to download attachment content."
        },
        "downloadUri": {
          "type": "string",
          "description": "Output only. The download URL which should be used to allow a human user to download the attachment. Bots should not use this URL to download attachment content."
        },
        "attachmentDataRef": {
          "description": "A reference to the attachment data. This is used with the media API to download the attachment data.",
          "$ref": "AttachmentDataRef"
        },
        "driveDataRef": {
          "$ref": "DriveDataRef",
          "description": "A reference to the drive attachment. This is used with the Drive API."
        },
        "contentName": {
          "type": "string",
          "description": "The original file name for the content, not the full path."
        }
      },
      "description": "An attachment in Google Chat.",
      "id": "Attachment",
      "type": "object"
    },
    "DateInput": {
      "id": "DateInput",
      "properties": {
        "msSinceEpoch": {
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "Input Parameter for Date Picker widget."
    },
    "Card": {
      "id": "Card",
      "properties": {
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "CardHeader"
        },
        "sections": {
          "description": "Sections are separated by a line divider.",
          "type": "array",
          "items": {
            "$ref": "Section"
          }
        },
        "cardActions": {
          "description": "The actions of this card.",
          "type": "array",
          "items": {
            "$ref": "CardAction"
          }
        },
        "name": {
          "description": "Name of the card.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A card is a UI element that can contain UI widgets such as texts, images."
    },
    "GoogleAppsCardV1Image": {
      "id": "GoogleAppsCardV1Image",
      "type": "object",
      "properties": {
        "altText": {
          "type": "string",
          "description": "The alternative text of this image, used for accessibility."
        },
        "onClick": {
          "$ref": "GoogleAppsCardV1OnClick"
        },
        "imageUrl": {
          "type": "string",
          "description": "An image URL."
        }
      },
      "description": "An image that is specified by a URL and can have an onClick action."
    },
    "GoogleAppsCardV1CardFixedFooter": {
      "id": "GoogleAppsCardV1CardFixedFooter",
      "type": "object",
      "properties": {
        "primaryButton": {
          "description": "The primary button of the fixed footer. The button must be a text button with text and color set.",
          "$ref": "GoogleAppsCardV1Button"
        },
        "secondaryButton": {
          "$ref": "GoogleAppsCardV1Button",
          "description": "The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set."
        }
      },
      "description": "A persistent (sticky) footer that is added to the bottom of the card."
    },
    "GoogleAppsCardV1ButtonList": {
      "description": "A list of buttons layed out horizontally.",
      "id": "GoogleAppsCardV1ButtonList",
      "properties": {
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1Button"
          }
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1SelectionItem": {
      "properties": {
        "selected": {
          "description": "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.",
          "type": "boolean"
        },
        "text": {
          "description": "The text to be displayed.",
          "type": "string"
        },
        "value": {
          "description": "The value associated with this item. The client should use this as a form input value.",
          "type": "string"
        }
      },
      "description": "The item in the switch control. A radio button, at most one of the items is selected.",
      "type": "object",
      "id": "GoogleAppsCardV1SelectionItem"
    },
    "GoogleAppsCardV1ImageComponent": {
      "type": "object",
      "id": "GoogleAppsCardV1ImageComponent",
      "properties": {
        "borderStyle": {
          "description": "The border style to apply to the image.",
          "$ref": "GoogleAppsCardV1BorderStyle"
        },
        "cropStyle": {
          "$ref": "GoogleAppsCardV1ImageCropStyle",
          "description": "The crop style to apply to the image."
        },
        "imageUri": {
          "type": "string",
          "description": "The image URL."
        },
        "altText": {
          "description": "The accessibility label for the image.",
          "type": "string"
        }
      }
    },
    "SlashCommand": {
      "type": "object",
      "properties": {
        "commandId": {
          "description": "The id of the slash command invoked.",
          "type": "string",
          "format": "int64"
        }
      },
      "description": "A Slash Command in Chat.",
      "id": "SlashCommand"
    },
    "DeprecatedEvent": {
      "id": "DeprecatedEvent",
      "properties": {
        "isDialogEvent": {
          "description": "Whether or not this event is related to dialogs request, submit or cancel. This will be set to true when we want a request/submit/cancel event.",
          "type": "boolean"
        },
        "threadKey": {
          "description": "The bot-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information.",
          "type": "string"
        },
        "token": {
          "description": "A secret value that bots can use to verify if a request is from Google. The token is randomly generated by Google, remains static, and can be obtained from the Google Chat API configuration page in the Cloud Console. Developers can revoke/regenerate it if needed from the same page.",
          "type": "string"
        },
        "dialogEventType": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "REQUEST_DIALOG",
            "SUBMIT_DIALOG",
            "CANCEL_DIALOG"
          ],
          "type": "string",
          "enumDescriptions": [
            "This could be used when the corresponding event is not dialog related. For example an @mention.",
            "For any user action that would result in a dialog opening.",
            "For card click events from any dialog.",
            "For native cancellation button."
          ],
          "description": "The type of dialog event we have received."
        },
        "space": {
          "description": "The space in which the event occurred.",
          "$ref": "Space"
        },
        "configCompleteRedirectUrl": {
          "type": "string",
          "description": "The URL the bot should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more information."
        },
        "message": {
          "description": "The message that triggered the event, if applicable.",
          "$ref": "Message"
        },
        "user": {
          "description": "The user that triggered the event.",
          "$ref": "User"
        },
        "common": {
          "description": "This will include form information for dialogs such as form inputs, action parameters.",
          "$ref": "CommonEventObject"
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A message was sent in a space.",
            "The bot was added to a space.",
            "The bot was removed from a space.",
            "The bot's interactive card was clicked."
          ],
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "MESSAGE",
            "ADDED_TO_SPACE",
            "REMOVED_FROM_SPACE",
            "CARD_CLICKED"
          ],
          "description": "The type of the event."
        },
        "eventTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp indicating when the event occurred."
        },
        "action": {
          "description": "The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for more information.",
          "$ref": "FormAction"
        }
      },
      "type": "object",
      "description": "Google Chat events."
    },
    "ActionStatus": {
      "properties": {
        "statusCode": {
          "enumDescriptions": [
            "Not an error; returned on success HTTP Mapping: 200 OK",
            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
          ],
          "enum": [
            "OK",
            "CANCELLED",
            "UNKNOWN",
            "INVALID_ARGUMENT",
            "DEADLINE_EXCEEDED",
            "NOT_FOUND",
            "ALREADY_EXISTS",
            "PERMISSION_DENIED",
            "UNAUTHENTICATED",
            "RESOURCE_EXHAUSTED",
            "FAILED_PRECONDITION",
            "ABORTED",
            "OUT_OF_RANGE",
            "UNIMPLEMENTED",
            "INTERNAL",
            "UNAVAILABLE",
            "DATA_LOSS"
          ],
          "description": "The status code.",
          "type": "string"
        },
        "userFacingMessage": {
          "type": "string",
          "description": "This message will be the corresponding string to the above status_code. If unset, an appropriate generic message based on the status_code will be shown to the user. If this field is set then the message will be surfaced to the user for both successes and errors."
        }
      },
      "description": "ActionStatus represents status of a request from the bot developer's side. In specific, for each request a bot gets, the bot developer will set both fields below in relation to what the response status and message related to status should be.",
      "id": "ActionStatus",
      "type": "object"
    },
    "GoogleAppsCardV1TextInput": {
      "type": "object",
      "description": "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The default value when there is no input from the user."
        },
        "initialSuggestions": {
          "$ref": "GoogleAppsCardV1Suggestions",
          "description": "The initial suggestions made before any user input."
        },
        "hintText": {
          "type": "string",
          "description": "The hint text."
        },
        "type": {
          "type": "string",
          "description": "The style of the text, for example, a single line or multiple lines.",
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ],
          "enumDescriptions": [
            "The text is put into a single line.",
            "The text is put into multiple lines."
          ]
        },
        "label": {
          "description": "At least one of label and hintText must be specified.",
          "type": "string"
        },
        "autoCompleteAction": {
          "description": "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items.",
          "$ref": "GoogleAppsCardV1Action"
        },
        "name": {
          "description": "The name of the text input which is used in formInput.",
          "type": "string"
        },
        "onChangeAction": {
          "description": "The onChange action, for example, invoke a function.",
          "$ref": "GoogleAppsCardV1Action"
        }
      },
      "id": "GoogleAppsCardV1TextInput"
    },
    "GoogleAppsCardV1Action": {
      "type": "object",
      "description": "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "properties": {
        "parameters": {
          "items": {
            "$ref": "GoogleAppsCardV1ActionParameter"
          },
          "type": "array",
          "description": "List of action parameters."
        },
        "persistValues": {
          "description": "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed.",
          "type": "boolean"
        },
        "loadIndicator": {
          "enumDescriptions": [
            "Displays a spinner to indicate that content is loading.",
            "Nothing is displayed."
          ],
          "enum": [
            "SPINNER",
            "NONE"
          ],
          "type": "string"
        },
        "function": {
          "description": "Apps Script function to invoke when the containing element is clicked/activated.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1Action"
    },
    "TextButton": {
      "description": "A button with text and onclick action.",
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of the button."
        },
        "onClick": {
          "description": "The onclick action of the button.",
          "$ref": "OnClick"
        }
      },
      "id": "TextButton"
    },
    "WidgetMarkup": {
      "id": "WidgetMarkup",
      "properties": {
        "keyValue": {
          "description": "Display a key value item in this widget.",
          "$ref": "KeyValue"
        },
        "buttons": {
          "items": {
            "$ref": "Button"
          },
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set.",
          "type": "array"
        },
        "textParagraph": {
          "$ref": "TextParagraph",
          "description": "Display a text paragraph in this widget."
        },
        "image": {
          "description": "Display an image in this widget.",
          "$ref": "Image"
        }
      },
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object"
    },
    "TextParagraph": {
      "id": "TextParagraph",
      "description": "A paragraph of text. Formatted text supported.",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "KeyValue": {
      "properties": {
        "button": {
          "$ref": "Button",
          "description": "A button that can be clicked to trigger an action."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "icon": {
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image.",
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "onClick": {
          "description": "The onclick action. Only the top label, bottom label and content region are clickable.",
          "$ref": "OnClick"
        },
        "bottomLabel": {
          "description": "The text of the bottom label. Formatted text supported.",
          "type": "string"
        },
        "topLabel": {
          "type": "string",
          "description": "The text of the top label. Formatted text supported."
        },
        "contentMultiline": {
          "description": "If the content should be multiline.",
          "type": "boolean"
        },
        "content": {
          "description": "The text of the content. Formatted text supported and always required.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
      "id": "KeyValue"
    },
    "StringInputs": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "StringInputs",
      "description": "Input parameter for regular widgets. For single-valued widgets, it will be a single value list; for multi-valued widgets, such as checkbox, all the values are presented."
    },
    "CardHeader": {
      "type": "object",
      "id": "CardHeader",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines."
        },
        "imageStyle": {
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ],
          "description": "The image's type (e.g. square border or circular border).",
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ],
          "type": "string"
        },
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        }
      }
    },
    "GoogleAppsCardV1Section": {
      "id": "GoogleAppsCardV1Section",
      "description": "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
      "properties": {
        "collapsible": {
          "type": "boolean",
          "description": "Indicates whether this section is collapsible. If a section is collapsible, the description must be given."
        },
        "uncollapsibleWidgetsCount": {
          "description": "The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`.",
          "type": "integer",
          "format": "int32"
        },
        "widgets": {
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "GoogleAppsCardV1Widget"
          },
          "type": "array"
        },
        "header": {
          "type": "string",
          "description": "The header of the section. Formatted text is supported."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1CardHeader": {
      "properties": {
        "title": {
          "description": "The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.",
          "type": "string"
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        },
        "imageAltText": {
          "type": "string",
          "description": "The alternative text of this image which is used for accessibility."
        },
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "description": "The image's type.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCardV1CardHeader",
      "type": "object"
    },
    "GoogleAppsCardV1OpenLink": {
      "id": "GoogleAppsCardV1OpenLink",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        },
        "openAs": {
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ],
          "enumDescriptions": [
            "The link opens as a full size window (if that's the frame used by the client.",
            "The link opens as an overlay, such as a pop-up."
          ],
          "type": "string"
        },
        "onClose": {
          "type": "string",
          "enumDescriptions": [
            "Doesn’t reload the card after the child window closes. Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the main card is blocked until the child window closes.",
            ""
          ],
          "enum": [
            "NOTHING",
            "RELOAD"
          ]
        }
      }
    },
    "GoogleAppsCardV1SelectionInput": {
      "type": "object",
      "description": "A widget that creates a UI item (for example, a drop-down list) with options for users to select.",
      "id": "GoogleAppsCardV1SelectionInput",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ],
          "enumDescriptions": [
            "The selection type is a checkbox.",
            "The selection type is a radio button.",
            "The selection type is a switch.",
            "The selection type is a dropdown."
          ]
        },
        "name": {
          "description": "The name of the text input which is used in formInput.",
          "type": "string"
        },
        "label": {
          "description": "The label displayed ahead of the switch control.",
          "type": "string"
        },
        "onChangeAction": {
          "$ref": "GoogleAppsCardV1Action",
          "description": "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCardV1SelectionItem"
          }
        }
      }
    },
    "Button": {
      "properties": {
        "textButton": {
          "description": "A button with text and onclick action.",
          "$ref": "TextButton"
        },
        "imageButton": {
          "$ref": "ImageButton",
          "description": "A button with image and onclick action."
        }
      },
      "id": "Button",
      "type": "object",
      "description": "A button. Can be a text button or an image button."
    },
    "Annotation": {
      "type": "object",
      "description": "Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\" ``` The corresponding annotations metadata: ``` \"annotations\":[{ \"type\":\"USER_MENTION\", \"startIndex\":6, \"length\":7, \"userMention\": { \"user\": { \"name\":\"users/107946847022116401880\", \"displayName\":\"FooBot\", \"avatarUrl\":\"https://goo.gl/aeDtrS\", \"type\":\"BOT\" }, \"type\":\"MENTION\" } }] ```",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "A user is mentioned.",
            "A slash command is invoked."
          ],
          "type": "string",
          "enum": [
            "ANNOTATION_TYPE_UNSPECIFIED",
            "USER_MENTION",
            "SLASH_COMMAND"
          ],
          "description": "The type of this annotation."
        },
        "slashCommand": {
          "description": "The metadata for a slash command.",
          "$ref": "SlashCommandMetadata"
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length of the substring in the plain-text message body this annotation corresponds to."
        },
        "userMention": {
          "description": "The metadata of user mention.",
          "$ref": "UserMentionMetadata"
        },
        "startIndex": {
          "description": "Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "Annotation"
    },
    "ImageButton": {
      "description": "An image button with an onclick action.",
      "id": "ImageButton",
      "type": "object",
      "properties": {
        "onClick": {
          "$ref": "OnClick",
          "description": "The onclick action."
        },
        "name": {
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify.",
          "type": "string"
        },
        "icon": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "description": "The icon specified by an enum that indices to an icon provided by Chat API."
        },
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        }
      }
    },
    "CardAction": {
      "id": "CardAction",
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "properties": {
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "OnClick"
        },
        "actionLabel": {
          "type": "string",
          "description": "The label used to be displayed in the action menu item."
        }
      },
      "type": "object"
    },
    "GoogleAppsCardV1ImageCropStyle": {
      "type": "object",
      "description": "Represents the crop style applied to an image.",
      "properties": {
        "aspectRatio": {
          "type": "number",
          "description": "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
          "format": "double"
        },
        "type": {
          "description": "The crop type.",
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "type": "string",
          "enum": [
            "IMAGE_CROP_TYPE_UNSPECIFIED",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ]
        }
      },
      "id": "GoogleAppsCardV1ImageCropStyle"
    }
  },
  "canonicalName": "Hangouts Chat",
  "mtlsRootUrl": "https://chat.mtls.googleapis.com/",
  "resources": {
    "media": {
      "methods": {
        "download": {
          "response": {
            "$ref": "Media"
          },
          "id": "chat.media.download",
          "description": "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
          "parameterOrder": [
            "resourceName"
          ],
          "parameters": {
            "resourceName": {
              "required": true,
              "type": "string",
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name.",
              "pattern": "^.*$",
              "location": "path"
            }
          },
          "supportsMediaDownload": true,
          "flatPath": "v1/media/{mediaId}",
          "httpMethod": "GET",
          "path": "v1/media/{+resourceName}"
        }
      }
    },
    "dms": {
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "httpMethod": "POST",
              "response": {
                "$ref": "Message"
              },
              "parameters": {
                "requestId": {
                  "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created.",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "pattern": "^dms/[^/]+/conversations/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA"
                },
                "threadKey": {
                  "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
                  "type": "string",
                  "location": "query"
                }
              },
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1/dms/{dmsId}/conversations/{conversationsId}/messages",
              "path": "v1/{+parent}/messages",
              "id": "chat.dms.conversations.messages",
              "request": {
                "$ref": "Message"
              }
            }
          }
        }
      },
      "methods": {
        "webhooks": {
          "request": {
            "$ref": "Message"
          },
          "flatPath": "v1/dms/{dmsId}/webhooks",
          "parameters": {
            "threadKey": {
              "type": "string",
              "location": "query",
              "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            },
            "parent": {
              "pattern": "^dms/[^/]+$",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "requestId": {
              "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created.",
              "location": "query",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "response": {
            "$ref": "Message"
          },
          "id": "chat.dms.webhooks",
          "path": "v1/{+parent}/webhooks",
          "parameterOrder": [
            "parent"
          ]
        },
        "messages": {
          "path": "v1/{+parent}/messages",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "id": "chat.dms.messages",
          "httpMethod": "POST",
          "flatPath": "v1/dms/{dmsId}/messages",
          "parameterOrder": [
            "parent"
          ],
          "parameters": {
            "parent": {
              "location": "path",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "type": "string",
              "required": true,
              "pattern": "^dms/[^/]+$"
            },
            "threadKey": {
              "location": "query",
              "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
              "type": "string"
            },
            "requestId": {
              "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created.",
              "location": "query",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Message"
          },
          "request": {
            "$ref": "Message"
          }
        }
      }
    },
    "spaces": {
      "resources": {
        "messages": {
          "methods": {
            "delete": {
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the message to be deleted, in the form \"spaces/*/messages/*\" Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "chat.spaces.messages.delete",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "response": {
                "$ref": "Empty"
              },
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "description": "Deletes a message.",
              "httpMethod": "DELETE"
            },
            "create": {
              "id": "chat.spaces.messages.create",
              "description": "Creates a message.",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
                  "pattern": "^spaces/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "requestId": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created."
                },
                "threadKey": {
                  "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
                  "type": "string",
                  "location": "query"
                }
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "Message"
              },
              "path": "v1/{+parent}/messages",
              "response": {
                "$ref": "Message"
              },
              "flatPath": "v1/spaces/{spacesId}/messages"
            },
            "get": {
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the message to be retrieved, in the form \"spaces/*/messages/*\". Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^spaces/[^/]+/messages/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Returns a message.",
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "httpMethod": "GET",
              "path": "v1/{+name}",
              "response": {
                "$ref": "Message"
              },
              "id": "chat.spaces.messages.get"
            },
            "update": {
              "id": "chat.spaces.messages.update",
              "request": {
                "$ref": "Message"
              },
              "description": "Updates a message.",
              "parameters": {
                "updateMask": {
                  "description": "Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards * gsuite_message_integration_render_data * attachment",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                },
                "name": {
                  "pattern": "^spaces/[^/]+/messages/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`"
                }
              },
              "response": {
                "$ref": "Message"
              },
              "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
              "httpMethod": "PUT",
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ]
            }
          },
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Attachment"
                  },
                  "description": "Gets the metadata of a message attachment. The attachment data is fetched using the media API.",
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "Resource name of the attachment, in the form \"spaces/*/messages/*/attachments/*\".",
                      "required": true,
                      "pattern": "^spaces/[^/]+/messages/[^/]+/attachments/[^/]+$"
                    }
                  },
                  "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}",
                  "id": "chat.spaces.messages.attachments.get"
                }
              }
            }
          }
        },
        "members": {
          "methods": {
            "list": {
              "parameters": {
                "pageToken": {
                  "description": "A token identifying a page of results the server should return.",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^spaces/[^/]+$",
                  "description": "Required. The resource name of the space for which membership list is to be fetched, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAAA",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100.",
                  "location": "query",
                  "format": "int32"
                }
              },
              "id": "chat.spaces.members.list",
              "description": "Lists human memberships in a space.",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "path": "v1/{+parent}/members",
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "flatPath": "v1/spaces/{spacesId}/members"
            },
            "get": {
              "parameters": {
                "name": {
                  "pattern": "^spaces/[^/]+/members/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "Required. Resource name of the membership to be retrieved, in the form \"spaces/*/members/*\". Example: spaces/AAAAAAAAAAAA/members/111111111111111111111",
                  "required": true
                }
              },
              "response": {
                "$ref": "Membership"
              },
              "id": "chat.spaces.members.get",
              "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "description": "Returns a membership."
            }
          }
        }
      },
      "methods": {
        "list": {
          "id": "chat.spaces.list",
          "parameterOrder": [],
          "description": "Lists spaces the caller is a member of.",
          "httpMethod": "GET",
          "flatPath": "v1/spaces",
          "response": {
            "$ref": "ListSpacesResponse"
          },
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "A token identifying a page of results the server should return.",
              "location": "query"
            },
            "pageSize": {
              "type": "integer",
              "location": "query",
              "format": "int32",
              "description": "Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100."
            }
          },
          "path": "v1/spaces"
        },
        "webhooks": {
          "id": "chat.spaces.webhooks",
          "path": "v1/{+parent}/webhooks",
          "parameters": {
            "requestId": {
              "location": "query",
              "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created.",
              "type": "string"
            },
            "threadKey": {
              "type": "string",
              "location": "query",
              "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            },
            "parent": {
              "pattern": "^spaces/[^/]+$",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "parent"
          ],
          "request": {
            "$ref": "Message"
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Message"
          },
          "flatPath": "v1/spaces/{spacesId}/webhooks",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response."
        },
        "get": {
          "httpMethod": "GET",
          "description": "Returns a space.",
          "id": "chat.spaces.get",
          "parameters": {
            "name": {
              "type": "string",
              "pattern": "^spaces/[^/]+$",
              "required": true,
              "location": "path",
              "description": "Required. Resource name of the space, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAAA"
            }
          },
          "response": {
            "$ref": "Space"
          },
          "path": "v1/{+name}",
          "flatPath": "v1/spaces/{spacesId}",
          "parameterOrder": [
            "name"
          ]
        }
      }
    },
    "rooms": {
      "resources": {
        "conversations": {
          "methods": {
            "messages": {
              "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
              "id": "chat.rooms.conversations.messages",
              "path": "v1/{+parent}/messages",
              "response": {
                "$ref": "Message"
              },
              "flatPath": "v1/rooms/{roomsId}/conversations/{conversationsId}/messages",
              "httpMethod": "POST",
              "parameters": {
                "requestId": {
                  "type": "string",
                  "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created.",
                  "location": "query"
                },
                "threadKey": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^rooms/[^/]+/conversations/[^/]+$",
                  "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Message"
              }
            }
          }
        }
      },
      "methods": {
        "messages": {
          "response": {
            "$ref": "Message"
          },
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "parameters": {
            "parent": {
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^rooms/[^/]+$",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA"
            },
            "requestId": {
              "location": "query",
              "type": "string",
              "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created."
            },
            "threadKey": {
              "location": "query",
              "type": "string",
              "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message."
            }
          },
          "parameterOrder": [
            "parent"
          ],
          "flatPath": "v1/rooms/{roomsId}/messages",
          "httpMethod": "POST",
          "path": "v1/{+parent}/messages",
          "id": "chat.rooms.messages",
          "request": {
            "$ref": "Message"
          }
        },
        "webhooks": {
          "id": "chat.rooms.webhooks",
          "flatPath": "v1/rooms/{roomsId}/webhooks",
          "parameterOrder": [
            "parent"
          ],
          "httpMethod": "POST",
          "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
          "response": {
            "$ref": "Message"
          },
          "request": {
            "$ref": "Message"
          },
          "path": "v1/{+parent}/webhooks",
          "parameters": {
            "parent": {
              "type": "string",
              "location": "path",
              "pattern": "^rooms/[^/]+$",
              "description": "Required. Space resource name, in the form \"spaces/*\". Example: spaces/AAAAAAAAAAA",
              "required": true
            },
            "threadKey": {
              "description": "Optional. Opaque thread identifier string that can be specified to group messages into a single thread. If this is the first message with a given thread identifier, a new thread is created. Subsequent messages with the same thread identifier will be posted into the same thread. This relieves bots and webhooks from having to store the Google Chat thread ID of a thread (created earlier by them) to post further updates to it. Has no effect if thread field, corresponding to an existing thread, is set in message.",
              "type": "string",
              "location": "query"
            },
            "requestId": {
              "type": "string",
              "description": "Optional. A unique request ID for this message. If a message has already been created in the space with this request ID, the subsequent request will return the existing message and no new message will be created.",
              "location": "query"
            }
          }
        }
      }
    }
  },
  "description": "Enables bots to fetch information and perform actions in Google Chat. Authentication using a service account is a prerequisite for using the Google Chat REST API.",
  "documentationLink": "https://developers.google.com/hangouts/chat",
  "baseUrl": "https://chat.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "alt": {
      "type": "string",
      "location": "query",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response."
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "prettyPrint": {
      "location": "query",
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "protocol": "rest",
  "title": "Google Chat API",
  "revision": "20220116",
  "name": "chat",
  "rootUrl": "https://chat.googleapis.com/",
  "version": "v1"
}

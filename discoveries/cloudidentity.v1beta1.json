{
  "canonicalName": "Cloud Identity",
  "kind": "discovery#restDescription",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "mtlsRootUrl": "https://cloudidentity.mtls.googleapis.com/",
  "servicePath": "",
  "description": "API for provisioning and managing identity resources.",
  "parameters": {
    "$.xgafv": {
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response."
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    }
  },
  "baseUrl": "https://cloudidentity.googleapis.com/",
  "schemas": {
    "GoogleAppsCloudidentityDevicesV1CustomAttributeValue": {
      "id": "GoogleAppsCloudidentityDevicesV1CustomAttributeValue",
      "description": "Additional custom attribute values may be one of these types",
      "type": "object",
      "properties": {
        "stringValue": {
          "type": "string",
          "description": "Represents a string value."
        },
        "numberValue": {
          "format": "double",
          "type": "number",
          "description": "Represents a double value."
        },
        "boolValue": {
          "description": "Represents a boolean value.",
          "type": "boolean"
        }
      }
    },
    "DynamicGroupMetadata": {
      "type": "object",
      "description": "Dynamic group metadata like queries and status.",
      "properties": {
        "status": {
          "description": "Output only. Status of the dynamic group.",
          "$ref": "DynamicGroupStatus",
          "readOnly": true
        },
        "queries": {
          "description": "Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.",
          "type": "array",
          "items": {
            "$ref": "DynamicGroupQuery"
          }
        }
      },
      "id": "DynamicGroupMetadata"
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      }
    },
    "CreateDeviceRequest": {
      "description": "Request message for creating a Company Owned device.",
      "properties": {
        "device": {
          "$ref": "Device",
          "description": "Required. The device to be created. The name field within this device is ignored in the create method. A new name is created by the method, and returned within the response. Only the fields `device_type`, `serial_number` and `asset_tag` (if present) are used to create the device. All other fields are ignored. The `device_type` and `serial_number` fields are required."
        }
      },
      "type": "object",
      "id": "CreateDeviceRequest"
    },
    "CancelWipeDeviceUserRequest": {
      "id": "CancelWipeDeviceUserRequest",
      "description": "Request message for cancelling an unfinished user account wipe.",
      "properties": {},
      "type": "object"
    },
    "BlockDeviceUserRequest": {
      "id": "BlockDeviceUserRequest",
      "type": "object",
      "properties": {},
      "description": "Request message for blocking account on device."
    },
    "CancelWipeDeviceRequest": {
      "description": "Request message for cancelling an unfinished device wipe.",
      "type": "object",
      "id": "CancelWipeDeviceRequest",
      "properties": {}
    },
    "ListDevicesResponse": {
      "id": "ListDevicesResponse",
      "type": "object",
      "description": "Response message that is returned from the ListDevices method.",
      "properties": {
        "devices": {
          "items": {
            "$ref": "Device"
          },
          "description": "Devices meeting the list restrictions.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. Empty if there are no more results.",
          "type": "string"
        }
      }
    },
    "Operation": {
      "properties": {
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        }
      },
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object"
    },
    "SamlSpConfig": {
      "description": "SAML SP configuration.",
      "properties": {
        "assertionConsumerServiceUri": {
          "description": "Output only. The SAML Assertion Consumer Service (ACS) URL to be used for IDP-initiated login. Currently assumed to accept Response messages via the HTTP-POST binding.",
          "type": "string",
          "readOnly": true
        },
        "entityId": {
          "description": "Output only. The SAML Entity ID for this SP.",
          "type": "string",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "SamlSpConfig"
    },
    "GoogleAppsCloudidentityDevicesV1DeviceUser": {
      "description": "Represents a user's use of a Device in the Cloud Identity Devices API. A DeviceUser is a resource representing a user's use of a Device",
      "properties": {
        "managementState": {
          "enum": [
            "MANAGEMENT_STATE_UNSPECIFIED",
            "WIPING",
            "WIPED",
            "APPROVED",
            "BLOCKED",
            "PENDING_APPROVAL",
            "UNENROLLED"
          ],
          "type": "string",
          "description": "Output only. Management state of the user on the device.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "This user's data and profile is being removed from the device.",
            "This user's data and profile is removed from the device.",
            "User is approved to access data on the device.",
            "User is blocked from accessing data on the device.",
            "User is awaiting approval.",
            "User is unenrolled from Advanced Windows Management, but the Windows account is still intact."
          ],
          "readOnly": true
        },
        "languageCode": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Default locale used on device, in IETF BCP-47 format."
        },
        "lastSyncTime": {
          "readOnly": true,
          "description": "Output only. Last time when user synced with policies.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "When the user first signed in to the device",
          "format": "google-datetime",
          "type": "string"
        },
        "userEmail": {
          "type": "string",
          "description": "Email address of the user registered on the device."
        },
        "userAgent": {
          "description": "Output only. User agent on the device for this specific user",
          "readOnly": true,
          "type": "string"
        },
        "compromisedState": {
          "type": "string",
          "enumDescriptions": [
            "Compromised state of Device User account is unknown or unspecified.",
            "Device User Account is compromised.",
            "Device User Account is not compromised."
          ],
          "description": "Compromised State of the DeviceUser object",
          "enum": [
            "COMPROMISED_STATE_UNSPECIFIED",
            "COMPROMISED",
            "NOT_COMPROMISED"
          ]
        },
        "passwordState": {
          "description": "Password state of the DeviceUser object",
          "type": "string",
          "enum": [
            "PASSWORD_STATE_UNSPECIFIED",
            "PASSWORD_SET",
            "PASSWORD_NOT_SET"
          ],
          "enumDescriptions": [
            "Password state not set.",
            "Password set in object.",
            "Password not set in object."
          ]
        },
        "firstSyncTime": {
          "format": "google-datetime",
          "description": "Output only. Most recent time when user registered with this service.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where `device_user_id` uniquely identifies a user's use of a device."
        }
      },
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1DeviceUser"
    },
    "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserResponse": {
      "id": "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserResponse",
      "type": "object",
      "properties": {
        "deviceUser": {
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser",
          "description": "Resultant DeviceUser object for the action."
        }
      },
      "description": "Response message for approving the device to access user data."
    },
    "DynamicGroupQuery": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string",
          "enum": [
            "RESOURCE_TYPE_UNSPECIFIED",
            "USER"
          ],
          "enumDescriptions": [
            "Default value (not valid)",
            "For queries on User"
          ]
        },
        "query": {
          "type": "string",
          "description": "Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`"
        }
      },
      "id": "DynamicGroupQuery",
      "description": "Defines a query on a resource."
    },
    "ListClientStatesResponse": {
      "properties": {
        "clientStates": {
          "type": "array",
          "items": {
            "$ref": "ClientState"
          },
          "description": "Client states meeting the list restrictions."
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. Empty if there are no more results.",
          "type": "string"
        }
      },
      "description": "Response message that is returned in LRO result of ListClientStates Operation.",
      "id": "ListClientStatesResponse",
      "type": "object"
    },
    "CancelWipeDeviceResponse": {
      "properties": {
        "device": {
          "description": "Resultant Device object for the action. Note that asset tags will not be returned in the device object.",
          "$ref": "Device"
        }
      },
      "type": "object",
      "description": "Response message for cancelling an unfinished device wipe.",
      "id": "CancelWipeDeviceResponse"
    },
    "BlockDeviceUserResponse": {
      "description": "Response message for blocking the device from accessing user data.",
      "properties": {
        "deviceUser": {
          "$ref": "DeviceUser",
          "description": "Resultant DeviceUser object for the action."
        }
      },
      "id": "BlockDeviceUserResponse",
      "type": "object"
    },
    "SearchTransitiveMembershipsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results."
        },
        "memberships": {
          "description": "List of transitive members satisfying the query.",
          "items": {
            "$ref": "MemberRelation"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "The response message for MembershipsService.SearchTransitiveMemberships.",
      "id": "SearchTransitiveMembershipsResponse"
    },
    "WipeDeviceUserRequest": {
      "type": "object",
      "description": "Request message for starting an account wipe on device.",
      "properties": {},
      "id": "WipeDeviceUserRequest"
    },
    "RsaPublicKeyInfo": {
      "type": "object",
      "id": "RsaPublicKeyInfo",
      "properties": {
        "keySize": {
          "description": "Key size in bits (size of the modulus).",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "RSA public key information."
    },
    "CancelWipeDeviceUserResponse": {
      "properties": {
        "deviceUser": {
          "$ref": "DeviceUser",
          "description": "Resultant DeviceUser object for the action."
        }
      },
      "id": "CancelWipeDeviceUserResponse",
      "type": "object",
      "description": "Response message for cancelling an unfinished user account wipe."
    },
    "ClientState": {
      "description": "Represents the state associated with an API client calling the Devices API. Resource representing ClientState and supports updates from API users",
      "id": "ClientState",
      "type": "object",
      "properties": {
        "ownerType": {
          "readOnly": true,
          "enum": [
            "OWNER_TYPE_UNSPECIFIED",
            "OWNER_TYPE_CUSTOMER",
            "OWNER_TYPE_PARTNER"
          ],
          "enumDescriptions": [
            "Unknown owner type",
            "Customer is the owner",
            "Partner is the owner"
          ],
          "type": "string",
          "description": "Output only. The owner of the ClientState"
        },
        "lastUpdateTime": {
          "description": "Output only. The time the client state data was last updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`, where partner_id corresponds to the partner storing the data."
        },
        "assetTags": {
          "items": {
            "type": "string"
          },
          "description": "The caller can specify asset tags for this resource",
          "type": "array"
        },
        "customId": {
          "type": "string",
          "description": "This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field."
        },
        "healthScore": {
          "type": "string",
          "enumDescriptions": [
            "Default value",
            "The object is in very poor health as defined by the caller.",
            "The object is in poor health as defined by the caller.",
            "The object health is neither good nor poor, as defined by the caller.",
            "The object is in good health as defined by the caller.",
            "The object is in very good health as defined by the caller."
          ],
          "description": "The Health score of the resource",
          "enum": [
            "HEALTH_SCORE_UNSPECIFIED",
            "VERY_POOR",
            "POOR",
            "NEUTRAL",
            "GOOD",
            "VERY_GOOD"
          ]
        },
        "keyValuePairs": {
          "type": "object",
          "description": "The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.",
          "additionalProperties": {
            "$ref": "CustomAttributeValue"
          }
        },
        "managed": {
          "description": "The management state of the resource as specified by the API client.",
          "enum": [
            "MANAGED_STATE_UNSPECIFIED",
            "MANAGED",
            "UNMANAGED"
          ],
          "type": "string",
          "enumDescriptions": [
            "The management state of the resource is unknown or unspecified.",
            "The resource is managed.",
            "The resource is not managed."
          ]
        },
        "etag": {
          "type": "string",
          "description": "The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest"
        },
        "complianceState": {
          "type": "string",
          "enum": [
            "COMPLIANCE_STATE_UNSPECIFIED",
            "COMPLIANT",
            "NON_COMPLIANT"
          ],
          "description": "The compliance state of the resource as specified by the API client.",
          "enumDescriptions": [
            "The compliance state of the resource is unknown or unspecified.",
            "Device is compliant with third party policies",
            "Device is not compliant with third party policies"
          ]
        },
        "scoreReason": {
          "description": "A descriptive cause of the health score.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time the client state data was created.",
          "type": "string"
        }
      }
    },
    "MemberRelation": {
      "type": "object",
      "properties": {
        "relationType": {
          "description": "The relation between the group and the transitive member.",
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "DIRECT",
            "INDIRECT",
            "DIRECT_AND_INDIRECT"
          ],
          "type": "string",
          "enumDescriptions": [
            "The relation type is undefined or undetermined.",
            "The two entities have only a direct membership with each other.",
            "The two entities have only an indirect membership with each other.",
            "The two entities have both a direct and an indirect membership with each other."
          ]
        },
        "member": {
          "description": "Resource name for this member.",
          "type": "string"
        },
        "preferredMemberKey": {
          "description": "Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace.",
          "type": "array",
          "items": {
            "$ref": "EntityKey"
          }
        },
        "roles": {
          "items": {
            "$ref": "TransitiveMembershipRole"
          },
          "type": "array",
          "description": "The membership role details (i.e name of role and expiry time)."
        }
      },
      "description": "Message representing a transitive membership of a group.",
      "id": "MemberRelation"
    },
    "SamlIdpConfig": {
      "type": "object",
      "properties": {
        "logoutRedirectUri": {
          "type": "string",
          "description": "Logout redirect URL/Sign-out page URL. When a user clicks the sign out link on a Google page, they will be redirected to this URL. This is pure redirect with no attached SAML LogoutRequest (SAML Single Logout is currently not supported). Must use HTTPS."
        },
        "changePasswordUri": {
          "type": "string",
          "description": "Change password URL. Users will be sent to this URL when changing their passwords at myaccount.google.com. This takes precedence over the customer-level change password URL. Must use HTTPS."
        },
        "singleSignOnServiceUri": {
          "description": "Required. SingleSignOnService endpoint location/Sign-in page URL. This is the URL where the AuthnRequest will be sent. Must use HTTPS. Currently assumed to accept the HTTP-Redirect binding.",
          "type": "string"
        },
        "entityId": {
          "description": "Required. The SAML Entity ID of the IDP.",
          "type": "string"
        }
      },
      "description": "SAML IDP configuration.",
      "id": "SamlIdpConfig"
    },
    "GoogleAppsCloudidentityDevicesV1Device": {
      "description": " A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user.",
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1Device",
      "properties": {
        "wifiMacAddresses": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "WiFi MAC addresses of device."
        },
        "assetTag": {
          "type": "string",
          "description": "Asset tag of the device."
        },
        "managementState": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Device is approved.",
            "Device is blocked.",
            "Device is pending approval.",
            "The device is not provisioned. Device will start from this state until some action is taken (i.e. a user starts using the device).",
            "Data and settings on the device are being removed.",
            "All data and settings on the device are removed."
          ],
          "description": "Output only. Management state of the device",
          "enum": [
            "MANAGEMENT_STATE_UNSPECIFIED",
            "APPROVED",
            "BLOCKED",
            "PENDING",
            "UNPROVISIONED",
            "WIPING",
            "WIPED"
          ],
          "type": "string",
          "readOnly": true
        },
        "imei": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. IMEI number of device if GSM device; empty otherwise."
        },
        "brand": {
          "description": "Output only. Device brand. Example: Samsung.",
          "readOnly": true,
          "type": "string"
        },
        "enabledUsbDebugging": {
          "readOnly": true,
          "description": "Output only. Whether USB debugging is enabled on device.",
          "type": "boolean"
        },
        "serialNumber": {
          "description": "Serial Number of device. Example: HT82V1A01076.",
          "type": "string"
        },
        "compromisedState": {
          "type": "string",
          "description": "Output only. Represents whether the Device is compromised.",
          "enum": [
            "COMPROMISED_STATE_UNSPECIFIED",
            "COMPROMISED",
            "UNCOMPROMISED"
          ],
          "enumDescriptions": [
            "Default value.",
            "The device is compromised (currently, this means Android device is rooted).",
            "The device is safe (currently, this means Android device is unrooted)."
          ],
          "readOnly": true
        },
        "manufacturer": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Device manufacturer. Example: Motorola."
        },
        "osVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. OS version of the device. Example: Android 8.1.0."
        },
        "model": {
          "type": "string",
          "description": "Output only. Model name of device. Example: Pixel 3.",
          "readOnly": true
        },
        "kernelVersion": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Kernel version of the device."
        },
        "networkOperator": {
          "description": "Output only. Mobile or network operator of device, if available.",
          "type": "string",
          "readOnly": true
        },
        "releaseVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. OS release version. Example: 6.0."
        },
        "meid": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. MEID number of device if CDMA device; empty otherwise."
        },
        "encryptionState": {
          "readOnly": true,
          "type": "string",
          "enum": [
            "ENCRYPTION_STATE_UNSPECIFIED",
            "UNSUPPORTED_BY_DEVICE",
            "ENCRYPTED",
            "NOT_ENCRYPTED"
          ],
          "enumDescriptions": [
            "Encryption Status is not set.",
            "Device doesn't support encryption.",
            "Device is encrypted.",
            "Device is not encrypted."
          ],
          "description": "Output only. Device encryption state."
        },
        "buildNumber": {
          "description": "Output only. Build number of the device.",
          "type": "string",
          "readOnly": true
        },
        "deviceType": {
          "type": "string",
          "description": "Output only. Type of device.",
          "enum": [
            "DEVICE_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "GOOGLE_SYNC",
            "WINDOWS",
            "MAC_OS",
            "LINUX",
            "CHROME_OS"
          ],
          "enumDescriptions": [
            "Unknown device type",
            "Device is an Android device",
            "Device is an iOS device",
            "Device is a Google Sync device.",
            "Device is a Windows device.",
            "Device is a MacOS device.",
            "Device is a Linux device.",
            "Device is a ChromeOS device."
          ],
          "readOnly": true
        },
        "name": {
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique id assigned to the Device.",
          "readOnly": true,
          "type": "string"
        },
        "lastSyncTime": {
          "format": "google-datetime",
          "description": "Most recent time when device synced with this service.",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Output only. Device bootloader version. Example: 0.6.7.",
          "type": "string",
          "readOnly": true
        },
        "securityPatchTime": {
          "description": "Output only. OS security patch update time on device.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "otherAccounts": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: \"com.example\", \"xyz.com\".",
          "items": {
            "type": "string"
          }
        },
        "androidSpecificAttributes": {
          "readOnly": true,
          "description": "Output only. Attributes specific to Android devices.",
          "$ref": "GoogleAppsCloudidentityDevicesV1AndroidAttributes"
        },
        "createTime": {
          "description": "Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "basebandVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Baseband version of the device."
        },
        "ownerType": {
          "readOnly": true,
          "description": "Output only. Whether the device is owned by the company or an individual",
          "enumDescriptions": [
            "Default value. The value is unused.",
            "Company owns the device.",
            "Bring Your Own Device (i.e. individual owns the device)"
          ],
          "enum": [
            "DEVICE_OWNERSHIP_UNSPECIFIED",
            "COMPANY",
            "BYOD"
          ],
          "type": "string"
        },
        "enabledDeveloperOptions": {
          "description": "Output only. Whether developer options is enabled on device.",
          "readOnly": true,
          "type": "boolean"
        }
      }
    },
    "IsInvitableUserResponse": {
      "id": "IsInvitableUserResponse",
      "description": "Response for IsInvitableUser RPC.",
      "properties": {
        "isInvitableUser": {
          "description": "Returns true if the email address is invitable.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GroupRelation": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Display name for this group."
        },
        "groupKey": {
          "$ref": "EntityKey",
          "description": "Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace."
        },
        "roles": {
          "type": "array",
          "description": "Membership roles of the member for the group.",
          "items": {
            "$ref": "TransitiveMembershipRole"
          }
        },
        "group": {
          "type": "string",
          "description": "Resource name for this group."
        },
        "labels": {
          "description": "Labels for Group resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "relationType": {
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "DIRECT",
            "INDIRECT",
            "DIRECT_AND_INDIRECT"
          ],
          "enumDescriptions": [
            "The relation type is undefined or undetermined.",
            "The two entities have only a direct membership with each other.",
            "The two entities have only an indirect membership with each other.",
            "The two entities have both a direct and an indirect membership with each other."
          ],
          "description": "The relation between the member and the transitive group.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Message representing a transitive group of a user or a group.",
      "id": "GroupRelation"
    },
    "GoogleAppsCloudidentityDevicesV1BlockDeviceUserResponse": {
      "description": "Response message for blocking the device from accessing user data.",
      "id": "GoogleAppsCloudidentityDevicesV1BlockDeviceUserResponse",
      "properties": {
        "deviceUser": {
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser",
          "description": "Resultant DeviceUser object for the action."
        }
      },
      "type": "object"
    },
    "SearchGroupsResponse": {
      "properties": {
        "groups": {
          "description": "The `Group` resources that match the search query.",
          "items": {
            "$ref": "Group"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A continuation token to retrieve the next page of results, or empty if there are no more results available.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SearchGroupsResponse",
      "description": "The response message for GroupsService.SearchGroups."
    },
    "ApproveDeviceUserResponse": {
      "id": "ApproveDeviceUserResponse",
      "description": "Response message for approving the device to access user data.",
      "properties": {
        "deviceUser": {
          "$ref": "DeviceUser",
          "description": "Resultant DeviceUser object for the action."
        }
      },
      "type": "object"
    },
    "PosixGroup": {
      "properties": {
        "name": {
          "description": "Name of the POSIX group.",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which group name and gid apply to. If not specified it will default to empty value."
        },
        "gid": {
          "format": "uint64",
          "type": "string",
          "description": "GID of the POSIX group."
        }
      },
      "type": "object",
      "description": "POSIX Group definition to represent a group in a POSIX compliant system.",
      "id": "PosixGroup"
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserResponse": {
      "description": "Response message for cancelling an unfinished user account wipe.",
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserResponse",
      "properties": {
        "deviceUser": {
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser",
          "description": "Resultant DeviceUser object for the action."
        }
      },
      "type": "object"
    },
    "ListMembershipsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "A continuation token to retrieve the next page of results, or empty if there are no more results available.",
          "type": "string"
        },
        "memberships": {
          "type": "array",
          "description": "The `Membership`s under the specified `parent`.",
          "items": {
            "$ref": "Membership"
          }
        }
      },
      "description": "The response message for MembershipsService.ListMemberships.",
      "id": "ListMembershipsResponse"
    },
    "WipeDeviceUserResponse": {
      "description": "Response message for wiping the user's account from the device.",
      "id": "WipeDeviceUserResponse",
      "properties": {
        "deviceUser": {
          "description": "Resultant DeviceUser object for the action.",
          "$ref": "DeviceUser"
        }
      },
      "type": "object"
    },
    "InboundSamlSsoProfile": {
      "description": "A SAML 2.0 (https://www.oasis-open.org/standards#samlv2.0) federation between a Google enterprise customer and a SAML IDP.",
      "id": "InboundSamlSsoProfile",
      "properties": {
        "displayName": {
          "description": "Human-readable name of the SAML SSO profile.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the SAML SSO profile.",
          "readOnly": true
        },
        "spConfig": {
          "description": "SAML SP configuration for this SAML SSO profile. These are the SP details provided by Google that should be configured on the corresponding IDP.",
          "$ref": "SamlSpConfig"
        },
        "idpConfig": {
          "description": "SAML IDP configuration.",
          "$ref": "SamlIdpConfig"
        }
      },
      "type": "object"
    },
    "UpdateMembershipRolesParams": {
      "properties": {
        "membershipRole": {
          "description": "The `MembershipRole`s to be updated. Only `MEMBER` `MembershipRoles` can currently be updated. May only contain a `MembershipRole` with `name` `MEMBER`.",
          "$ref": "MembershipRole"
        },
        "fieldMask": {
          "description": "The fully-qualified names of fields to update. May only contain the field `expiry_detail.expire_time`.",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "id": "UpdateMembershipRolesParams",
      "type": "object",
      "description": "The details of an update to a `MembershipRole`."
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceResponse": {
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceResponse",
      "description": "Response message for cancelling an unfinished device wipe.",
      "type": "object",
      "properties": {
        "device": {
          "$ref": "GoogleAppsCloudidentityDevicesV1Device",
          "description": "Resultant Device object for the action. Note that asset tags will not be returned in the device object."
        }
      }
    },
    "DsaPublicKeyInfo": {
      "description": "DSA public key information.",
      "id": "DsaPublicKeyInfo",
      "type": "object",
      "properties": {
        "keySize": {
          "type": "integer",
          "description": "Key size in bits (size of parameter P)",
          "format": "int32"
        }
      }
    },
    "MembershipRole": {
      "id": "MembershipRole",
      "type": "object",
      "description": "A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.",
      "properties": {
        "expiryDetail": {
          "$ref": "ExpiryDetail",
          "description": "The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value."
        },
        "name": {
          "type": "string",
          "description": "The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`."
        }
      }
    },
    "LookupSelfDeviceUsersResponse": {
      "properties": {
        "customer": {
          "type": "string",
          "description": "The obfuscated customer Id that may be passed back to other Devices API methods such as List, Get, etc."
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. Empty if there are no more results.",
          "type": "string"
        },
        "names": {
          "items": {
            "type": "string"
          },
          "description": "[Resource names](https://cloud.google.com/apis/design/resource_names) of the DeviceUsers in the format: `devices/{device_id}/deviceUsers/{user_resource_id}`, where device_id is the unique ID assigned to a Device and user_resource_id is the unique user ID",
          "type": "array"
        }
      },
      "type": "object",
      "description": "Response containing resource names of the DeviceUsers associated with the caller's credentials.",
      "id": "LookupSelfDeviceUsersResponse"
    },
    "LookupGroupNameResponse": {
      "id": "LookupGroupNameResponse",
      "description": "The response message for GroupsService.LookupGroupName.",
      "properties": {
        "name": {
          "description": "Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the looked-up `Group`.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "LookupMembershipNameResponse": {
      "properties": {
        "name": {
          "description": "The [resource name](https://cloud.google.com/apis/design/resource_names) of the looked-up `Membership`. Must be of the form `groups/{group_id}/memberships/{membership_id}`.",
          "type": "string"
        }
      },
      "id": "LookupMembershipNameResponse",
      "type": "object",
      "description": "The response message for MembershipsService.LookupMembershipName."
    },
    "TransitiveMembershipRole": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "description": "TransitiveMembershipRole in string format. Currently supported TransitiveMembershipRoles: `\"MEMBER\"`, `\"OWNER\"`, and `\"MANAGER\"`."
        }
      },
      "id": "TransitiveMembershipRole",
      "description": "Message representing the role of a TransitiveMembership."
    },
    "EntityKey": {
      "description": "A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.",
      "type": "object",
      "id": "EntityKey",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the entity. For Google-managed entities, the `id` must be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`."
        },
        "namespace": {
          "type": "string",
          "description": "The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`."
        }
      }
    },
    "CustomAttributeValue": {
      "description": "Additional custom attribute values may be one of these types",
      "type": "object",
      "id": "CustomAttributeValue",
      "properties": {
        "numberValue": {
          "description": "Represents a double value.",
          "type": "number",
          "format": "double"
        },
        "stringValue": {
          "type": "string",
          "description": "Represents a string value."
        },
        "boolValue": {
          "type": "boolean",
          "description": "Represents a boolean value."
        }
      }
    },
    "DynamicGroupStatus": {
      "description": "The current status of a dynamic group along with timestamp.",
      "id": "DynamicGroupStatus",
      "type": "object",
      "properties": {
        "statusTime": {
          "description": "The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "status": {
          "enumDescriptions": [
            "Default.",
            "The dynamic group is up-to-date.",
            "The dynamic group has just been created and memberships are being updated."
          ],
          "type": "string",
          "enum": [
            "STATUS_UNSPECIFIED",
            "UP_TO_DATE",
            "UPDATING_MEMBERSHIPS"
          ],
          "description": "Status of the dynamic group."
        }
      }
    },
    "SendUserInvitationRequest": {
      "description": "A request to send email for inviting target user corresponding to the UserInvitation.",
      "id": "SendUserInvitationRequest",
      "properties": {},
      "type": "object"
    },
    "Device": {
      "type": "object",
      "properties": {
        "name": {
          "readOnly": true,
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique id assigned to the Device.",
          "type": "string"
        },
        "wifiMacAddresses": {
          "type": "array",
          "description": "WiFi MAC addresses of device.",
          "items": {
            "type": "string"
          }
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. When the Company-Owned device was imported. This field is empty for BYOD devices."
        },
        "otherAccounts": {
          "description": "Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: \"com.example\", \"xyz.com\".",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "basebandVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Baseband version of the device."
        },
        "osVersion": {
          "description": "Output only. OS version of the device. Example: Android 8.1.0.",
          "readOnly": true,
          "type": "string"
        },
        "enabledUsbDebugging": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Whether USB debugging is enabled on device."
        },
        "model": {
          "description": "Output only. Model name of device. Example: Pixel 3.",
          "type": "string",
          "readOnly": true
        },
        "brand": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Device brand. Example: Samsung."
        },
        "serialNumber": {
          "description": "Serial Number of device. Example: HT82V1A01076.",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Output only. Kernel version of the device.",
          "type": "string",
          "readOnly": true
        },
        "assetTag": {
          "type": "string",
          "description": "Asset tag of the device."
        },
        "networkOperator": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Mobile or network operator of device, if available."
        },
        "ownerType": {
          "type": "string",
          "enumDescriptions": [
            "Default value. The value is unused.",
            "Company owns the device.",
            "Bring Your Own Device (i.e. individual owns the device)"
          ],
          "description": "Output only. Whether the device is owned by the company or an individual",
          "enum": [
            "DEVICE_OWNERSHIP_UNSPECIFIED",
            "COMPANY",
            "BYOD"
          ],
          "readOnly": true
        },
        "androidSpecificAttributes": {
          "description": "Output only. Attributes specific to Android devices.",
          "readOnly": true,
          "$ref": "AndroidAttributes"
        },
        "manufacturer": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Device manufacturer. Example: Motorola."
        },
        "securityPatchTime": {
          "readOnly": true,
          "description": "Output only. OS security patch update time on device.",
          "format": "google-datetime",
          "type": "string"
        },
        "buildNumber": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Build number of the device."
        },
        "meid": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. MEID number of device if CDMA device; empty otherwise."
        },
        "deviceType": {
          "enumDescriptions": [
            "Unknown device type",
            "Device is an Android device",
            "Device is an iOS device",
            "Device is a Google Sync device.",
            "Device is a Windows device.",
            "Device is a MacOS device.",
            "Device is a Linux device.",
            "Device is a ChromeOS device."
          ],
          "type": "string",
          "enum": [
            "DEVICE_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "GOOGLE_SYNC",
            "WINDOWS",
            "MAC_OS",
            "LINUX",
            "CHROME_OS"
          ],
          "description": "Output only. Type of device.",
          "readOnly": true
        },
        "imei": {
          "type": "string",
          "description": "Output only. IMEI number of device if GSM device; empty otherwise.",
          "readOnly": true
        },
        "releaseVersion": {
          "description": "Output only. OS release version. Example: 6.0.",
          "readOnly": true,
          "type": "string"
        },
        "managementState": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Device is approved.",
            "Device is blocked.",
            "Device is pending approval.",
            "The device is not provisioned. Device will start from this state until some action is taken (i.e. a user starts using the device).",
            "Data and settings on the device are being removed.",
            "All data and settings on the device are removed."
          ],
          "enum": [
            "MANAGEMENT_STATE_UNSPECIFIED",
            "APPROVED",
            "BLOCKED",
            "PENDING",
            "UNPROVISIONED",
            "WIPING",
            "WIPED"
          ],
          "readOnly": true,
          "description": "Output only. Management state of the device",
          "type": "string"
        },
        "encryptionState": {
          "description": "Output only. Device encryption state.",
          "type": "string",
          "enum": [
            "ENCRYPTION_STATE_UNSPECIFIED",
            "UNSUPPORTED_BY_DEVICE",
            "ENCRYPTED",
            "NOT_ENCRYPTED"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "Encryption Status is not set.",
            "Device doesn't support encryption.",
            "Device is encrypted.",
            "Device is not encrypted."
          ]
        },
        "lastSyncTime": {
          "description": "Most recent time when device synced with this service.",
          "format": "google-datetime",
          "type": "string"
        },
        "compromisedState": {
          "enum": [
            "COMPROMISED_STATE_UNSPECIFIED",
            "COMPROMISED",
            "UNCOMPROMISED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value.",
            "The device is compromised (currently, this means Android device is rooted).",
            "The device is safe (currently, this means Android device is unrooted)."
          ],
          "description": "Output only. Represents whether the Device is compromised.",
          "readOnly": true
        },
        "bootloaderVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Device bootloader version. Example: 0.6.7."
        },
        "enabledDeveloperOptions": {
          "description": "Output only. Whether developer options is enabled on device.",
          "readOnly": true,
          "type": "boolean"
        }
      },
      "description": "A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user.",
      "id": "Device"
    },
    "UserInvitation": {
      "properties": {
        "updateTime": {
          "description": "Time when the `UserInvitation` was last updated.",
          "format": "google-datetime",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Shall be of the form `customers/{customer}/userinvitations/{user_email_address}`."
        },
        "mailsSentCount": {
          "format": "int64",
          "description": "Number of invitation emails sent to the user.",
          "type": "string"
        },
        "state": {
          "description": "State of the `UserInvitation`.",
          "enumDescriptions": [
            "The default value. This value is used if the state is omitted.",
            "The `UserInvitation` has been created and is ready for sending as an email.",
            "The user has been invited by email.",
            "The user has accepted the invitation and is part of the organization.",
            "The user declined the invitation."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_YET_SENT",
            "INVITED",
            "ACCEPTED",
            "DECLINED"
          ],
          "type": "string"
        }
      },
      "description": "The `UserInvitation` resource represents an email that can be sent to an unmanaged user account inviting them to join the customer’s Google Workspace or Cloud Identity account. An unmanaged account shares an email address domain with the Google Workspace or Cloud Identity account but is not managed by it yet. If the user accepts the `UserInvitation`, the user account will become managed.",
      "id": "UserInvitation",
      "type": "object"
    },
    "WipeDeviceRequest": {
      "type": "object",
      "id": "WipeDeviceRequest",
      "properties": {
        "removeResetLock": {
          "description": "Optional. Specifies if a user is able to factory reset a device after a Device Wipe. On iOS, this is called \"Activation Lock\", while on Android, this is known as \"Factory Reset Protection\". If true, this protection will be removed from the device, so that a user can successfully factory reset. If false, the setting is untouched on the device.",
          "type": "boolean"
        }
      },
      "description": "Request message for wiping all data on the device."
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceUserResponse": {
      "properties": {
        "deviceUser": {
          "description": "Resultant DeviceUser object for the action.",
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser"
        }
      },
      "description": "Response message for wiping the user's account from the device.",
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceUserResponse"
    },
    "MembershipAdjacencyList": {
      "properties": {
        "edges": {
          "type": "array",
          "description": "Each edge contains information about the member that belongs to this group. Note: Fields returned here will help identify the specific Membership resource (e.g name, preferred_member_key and role), but may not be a comprehensive list of all fields.",
          "items": {
            "$ref": "Membership"
          }
        },
        "group": {
          "description": "Resource name of the group that the members belong to.",
          "type": "string"
        }
      },
      "id": "MembershipAdjacencyList",
      "description": "Membership graph's path information as an adjacency list.",
      "type": "object"
    },
    "ListDeviceUsersResponse": {
      "description": "Response message that is returned from the ListDeviceUsers method.",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. Empty if there are no more results.",
          "type": "string"
        },
        "deviceUsers": {
          "description": "Devices meeting the list restrictions.",
          "items": {
            "$ref": "DeviceUser"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "ListDeviceUsersResponse"
    },
    "GoogleAppsCloudidentityDevicesV1ClientState": {
      "type": "object",
      "properties": {
        "keyValuePairs": {
          "type": "object",
          "description": "The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.",
          "additionalProperties": {
            "$ref": "GoogleAppsCloudidentityDevicesV1CustomAttributeValue"
          }
        },
        "scoreReason": {
          "type": "string",
          "description": "A descriptive cause of the health score."
        },
        "managed": {
          "enum": [
            "MANAGED_STATE_UNSPECIFIED",
            "MANAGED",
            "UNMANAGED"
          ],
          "enumDescriptions": [
            "The management state of the resource is unknown or unspecified.",
            "The resource is managed.",
            "The resource is not managed."
          ],
          "type": "string",
          "description": "The management state of the resource as specified by the API client."
        },
        "lastUpdateTime": {
          "description": "Output only. The time the client state data was last updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "healthScore": {
          "description": "The Health score of the resource. The Health score is the callers specification of the condition of the device from a usability point of view. For example, a third-party device management provider may specify a health score based on its compliance with organizational policies.",
          "enumDescriptions": [
            "Default value",
            "The object is in very poor health as defined by the caller.",
            "The object is in poor health as defined by the caller.",
            "The object health is neither good nor poor, as defined by the caller.",
            "The object is in good health as defined by the caller.",
            "The object is in very good health as defined by the caller."
          ],
          "enum": [
            "HEALTH_SCORE_UNSPECIFIED",
            "VERY_POOR",
            "POOR",
            "NEUTRAL",
            "GOOD",
            "VERY_GOOD"
          ],
          "type": "string"
        },
        "complianceState": {
          "enum": [
            "COMPLIANCE_STATE_UNSPECIFIED",
            "COMPLIANT",
            "NON_COMPLIANT"
          ],
          "description": "The compliance state of the resource as specified by the API client.",
          "enumDescriptions": [
            "The compliance state of the resource is unknown or unspecified.",
            "Device is compliant with third party policies",
            "Device is not compliant with third party policies"
          ],
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`, where partner_id corresponds to the partner storing the data. For partners belonging to the \"BeyondCorp Alliance\", this is the partner ID specified to you by Google. For all other callers, this is a string of the form: `{customer_id}-suffix`, where `customer_id` is your customer ID. The *suffix* is any string the caller specifies. This string will be displayed verbatim in the administration console. This suffix is used in setting up Custom Access Levels in Context-Aware Access. Your organization's customer ID can be obtained from the URL: `GET https://www.googleapis.com/admin/directory/v1/customers/my_customer` The `id` field in the response contains the customer ID starting with the letter 'C'. The customer ID to be used in this API is the string after the letter 'C' (not including 'C')",
          "readOnly": true
        },
        "customId": {
          "type": "string",
          "description": "This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field."
        },
        "assetTags": {
          "description": "The caller can specify asset tags for this resource",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ownerType": {
          "type": "string",
          "description": "Output only. The owner of the ClientState",
          "readOnly": true,
          "enum": [
            "OWNER_TYPE_UNSPECIFIED",
            "OWNER_TYPE_CUSTOMER",
            "OWNER_TYPE_PARTNER"
          ],
          "enumDescriptions": [
            "Unknown owner type",
            "Customer is the owner",
            "Partner is the owner"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest"
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time the client state data was created.",
          "format": "google-datetime"
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1ClientState",
      "description": "Represents the state associated with an API client calling the Devices API. Resource representing ClientState and supports updates from API users"
    },
    "CheckTransitiveMembershipResponse": {
      "id": "CheckTransitiveMembershipResponse",
      "type": "object",
      "description": "The response message for MembershipsService.CheckTransitiveMembership.",
      "properties": {
        "hasMembership": {
          "type": "boolean",
          "description": "Response does not include the possible roles of a member since the behavior of this rpc is not all-or-nothing unlike the other rpcs. So, it may not be possible to list all the roles definitively, due to possible lack of authorization in some of the paths."
        }
      }
    },
    "ModifyMembershipRolesRequest": {
      "properties": {
        "updateRolesParams": {
          "type": "array",
          "description": "The `MembershipRole`s to be updated. Updating roles in the same request as adding or removing roles is not supported. Must not be set if either `add_roles` or `remove_roles` is set.",
          "items": {
            "$ref": "UpdateMembershipRolesParams"
          }
        },
        "removeRoles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The `name`s of the `MembershipRole`s to be removed. Adding or removing roles in the same request as updating roles is not supported. It is not possible to remove the `MEMBER` `MembershipRole`. If you wish to delete a `Membership`, call MembershipsService.DeleteMembership instead. Must not contain `MEMBER`. Must not be set if `update_roles_params` is set."
        },
        "addRoles": {
          "items": {
            "$ref": "MembershipRole"
          },
          "description": "The `MembershipRole`s to be added. Adding or removing roles in the same request as updating roles is not supported. Must not be set if `update_roles_params` is set.",
          "type": "array"
        }
      },
      "description": "The request message for MembershipsService.ModifyMembershipRoles.",
      "id": "ModifyMembershipRolesRequest",
      "type": "object"
    },
    "SearchTransitiveGroupsResponse": {
      "id": "SearchTransitiveGroupsResponse",
      "properties": {
        "memberships": {
          "description": "List of transitive groups satisfying the query.",
          "type": "array",
          "items": {
            "$ref": "GroupRelation"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results available for listing."
        }
      },
      "description": "The response message for MembershipsService.SearchTransitiveGroups.",
      "type": "object"
    },
    "IdpSigningKey": {
      "description": "Signing validation key.",
      "id": "IdpSigningKey",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the key.",
          "readOnly": true
        },
        "dsaKeyInfo": {
          "description": "Output only. DSA public key information.",
          "$ref": "DsaPublicKeyInfo",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. When the key data was last updated.",
          "format": "google-datetime"
        },
        "rsaKeyInfo": {
          "$ref": "RsaPublicKeyInfo",
          "description": "Output only. RSA public key information.",
          "readOnly": true
        }
      }
    },
    "DeviceUser": {
      "description": "Represents a user's use of a Device in the Cloud Identity Devices API. A DeviceUser is a resource representing a user's use of a Device",
      "type": "object",
      "id": "DeviceUser",
      "properties": {
        "userEmail": {
          "type": "string",
          "description": "Email address of the user registered on the device."
        },
        "compromisedState": {
          "description": "Compromised State of the DeviceUser object",
          "type": "string",
          "enumDescriptions": [
            "Compromised state of Device User account is unknown or unspecified.",
            "Device User Account is compromised.",
            "Device User Account is not compromised."
          ],
          "enum": [
            "COMPROMISED_STATE_UNSPECIFIED",
            "COMPROMISED",
            "NOT_COMPROMISED"
          ]
        },
        "managementState": {
          "type": "string",
          "enum": [
            "MANAGEMENT_STATE_UNSPECIFIED",
            "WIPING",
            "WIPED",
            "APPROVED",
            "BLOCKED",
            "PENDING_APPROVAL",
            "UNENROLLED"
          ],
          "description": "Output only. Management state of the user on the device.",
          "readOnly": true,
          "enumDescriptions": [
            "Default value. This value is unused.",
            "This user's data and profile is being removed from the device.",
            "This user's data and profile is removed from the device.",
            "User is approved to access data on the device.",
            "User is blocked from accessing data on the device.",
            "User is awaiting approval.",
            "User is unenrolled from Advanced Windows Management, but the Windows account is still intact."
          ]
        },
        "userAgent": {
          "readOnly": true,
          "description": "Output only. User agent on the device for this specific user",
          "type": "string"
        },
        "firstSyncTime": {
          "description": "Output only. Most recent time when user registered with this service.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where `device_user_id` uniquely identifies a user's use of a device."
        },
        "languageCode": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Default locale used on device, in IETF BCP-47 format."
        },
        "lastSyncTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Last time when user synced with policies.",
          "readOnly": true
        },
        "passwordState": {
          "enum": [
            "PASSWORD_STATE_UNSPECIFIED",
            "PASSWORD_SET",
            "PASSWORD_NOT_SET"
          ],
          "enumDescriptions": [
            "Password state not set.",
            "Password set in object.",
            "Password not set in object."
          ],
          "type": "string",
          "description": "Password state of the DeviceUser object"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "When the user first signed in to the device"
        }
      }
    },
    "ExpiryDetail": {
      "description": "The `MembershipRole` expiry details.",
      "type": "object",
      "properties": {
        "expireTime": {
          "description": "The time at which the `MembershipRole` will expire.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "ExpiryDetail"
    },
    "GoogleAppsCloudidentityDevicesV1AndroidAttributes": {
      "properties": {
        "supportsWorkProfile": {
          "description": "Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the \"Enforce Work Profile\" policy.",
          "type": "boolean"
        },
        "ownerProfileAccount": {
          "description": "Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.",
          "type": "boolean"
        },
        "enabledUnknownSources": {
          "type": "boolean",
          "description": "Whether applications from unknown sources can be installed on device."
        },
        "ownershipPrivilege": {
          "enumDescriptions": [
            "Ownership privilege is not set.",
            "Active device administrator privileges on the device.",
            "Profile Owner privileges. The account is in a managed corporate profile.",
            "Device Owner privileges on the device."
          ],
          "type": "string",
          "enum": [
            "OWNERSHIP_PRIVILEGE_UNSPECIFIED",
            "DEVICE_ADMINISTRATOR",
            "PROFILE_OWNER",
            "DEVICE_OWNER"
          ],
          "description": "Ownership privileges on device."
        }
      },
      "type": "object",
      "description": "Resource representing the Android specific attributes of a Device.",
      "id": "GoogleAppsCloudidentityDevicesV1AndroidAttributes"
    },
    "Group": {
      "description": "A group within the Cloud Identity Groups API. A `Group` is a collection of entities, where each entity is either a user, another group, or a service account.",
      "properties": {
        "description": {
          "type": "string",
          "description": "An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`."
        },
        "posixGroups": {
          "items": {
            "$ref": "PosixGroup"
          },
          "type": "array",
          "description": "Optional. The POSIX groups associated with the `Group`."
        },
        "additionalGroupKeys": {
          "description": "Additional entity key aliases for a Group.",
          "type": "array",
          "items": {
            "$ref": "EntityKey"
          }
        },
        "labels": {
          "description": "Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the `Group`."
        },
        "dynamicGroupMetadata": {
          "$ref": "DynamicGroupMetadata",
          "description": "Optional. Dynamic group metadata like queries and status."
        },
        "groupKey": {
          "$ref": "EntityKey",
          "description": "Required. Immutable. The `EntityKey` of the `Group`."
        },
        "updateTime": {
          "description": "Output only. The time when the `Group` was last updated.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time when the `Group` was created."
        },
        "parent": {
          "description": "Required. Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source_id}` for external- identity-mapped groups or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn').",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Group"
    },
    "GetMembershipGraphResponse": {
      "properties": {
        "adjacencyList": {
          "type": "array",
          "description": "The membership graph's path information represented as an adjacency list.",
          "items": {
            "$ref": "MembershipAdjacencyList"
          }
        },
        "groups": {
          "type": "array",
          "description": "The resources representing each group in the adjacency list. Each group in this list can be correlated to a 'group' of the MembershipAdjacencyList using the 'name' of the Group resource.",
          "items": {
            "$ref": "Group"
          }
        }
      },
      "description": "The response message for MembershipsService.GetMembershipGraph.",
      "type": "object",
      "id": "GetMembershipGraphResponse"
    },
    "CancelUserInvitationRequest": {
      "description": "Request to cancel sent invitation for target email in UserInvitation.",
      "properties": {},
      "type": "object",
      "id": "CancelUserInvitationRequest"
    },
    "ListGroupsResponse": {
      "id": "ListGroupsResponse",
      "properties": {
        "groups": {
          "description": "The `Group` resources under the specified `parent`.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A continuation token to retrieve the next page of results, or empty if there are no more results available."
        }
      },
      "type": "object",
      "description": "The response message for GroupsService.ListGroups."
    },
    "ApproveDeviceUserRequest": {
      "properties": {},
      "id": "ApproveDeviceUserRequest",
      "description": "Request message for approving the device to access user data.",
      "type": "object"
    },
    "AndroidAttributes": {
      "properties": {
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the \"Enforce Work Profile\" policy."
        },
        "ownerProfileAccount": {
          "description": "Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.",
          "type": "boolean"
        },
        "enabledUnknownSources": {
          "description": "Whether applications from unknown sources can be installed on device.",
          "type": "boolean"
        },
        "ownershipPrivilege": {
          "description": "Ownership privileges on device.",
          "enumDescriptions": [
            "Ownership privilege is not set.",
            "Active device administrator privileges on the device.",
            "Profile Owner privileges. The account is in a managed corporate profile.",
            "Device Owner privileges on the device."
          ],
          "enum": [
            "OWNERSHIP_PRIVILEGE_UNSPECIFIED",
            "DEVICE_ADMINISTRATOR",
            "PROFILE_OWNER",
            "DEVICE_OWNER"
          ],
          "type": "string"
        }
      },
      "id": "AndroidAttributes",
      "description": "Resource representing the Android specific attributes of a Device.",
      "type": "object"
    },
    "ModifyMembershipRolesResponse": {
      "description": "The response message for MembershipsService.ModifyMembershipRoles.",
      "type": "object",
      "id": "ModifyMembershipRolesResponse",
      "properties": {
        "membership": {
          "description": "The `Membership` resource after modifying its `MembershipRole`s.",
          "$ref": "Membership"
        }
      }
    },
    "ListUserInvitationsResponse": {
      "id": "ListUserInvitationsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The token for the next page. If not empty, indicates that there may be more `UserInvitation` resources that match the listing request; this value can be used in a subsequent ListUserInvitationsRequest to get continued results with the current list call.",
          "type": "string"
        },
        "userInvitations": {
          "description": "The list of UserInvitation resources.",
          "type": "array",
          "items": {
            "$ref": "UserInvitation"
          }
        }
      },
      "description": "Response message for UserInvitation listing request."
    },
    "WipeDeviceResponse": {
      "id": "WipeDeviceResponse",
      "properties": {
        "device": {
          "description": "Resultant Device object for the action. Note that asset tags will not be returned in the device object.",
          "$ref": "Device"
        }
      },
      "type": "object",
      "description": "Response message for wiping all data on the device."
    },
    "Membership": {
      "id": "Membership",
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Output only. The time when the `Membership` was created.",
          "format": "google-datetime",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "TYPE_UNSPECIFIED",
            "USER",
            "SERVICE_ACCOUNT",
            "GROUP",
            "SHARED_DRIVE",
            "OTHER"
          ],
          "enumDescriptions": [
            "Default. Should not be used.",
            "Represents user type.",
            "Represents service account type.",
            "Represents group type.",
            "Represents Shared drive.",
            "Represents other type."
          ],
          "description": "Output only. The type of the membership."
        },
        "updateTime": {
          "description": "Output only. The time when the `Membership` was last updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "memberKey": {
          "$ref": "EntityKey",
          "description": "Immutable. The `EntityKey` of the member. Either `member_key` or `preferred_member_key` must be set when calling MembershipsService.CreateMembership but not both; both shall be set when returned."
        },
        "preferredMemberKey": {
          "$ref": "EntityKey",
          "description": "Required. Immutable. The `EntityKey` of the member. Either `member_key` or `preferred_member_key` must be set when calling MembershipsService.CreateMembership but not both; both shall be set when returned."
        },
        "roles": {
          "items": {
            "$ref": "MembershipRole"
          },
          "type": "array",
          "description": "The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`."
        },
        "name": {
          "description": "Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.",
          "type": "string",
          "readOnly": true
        }
      },
      "description": "A membership within the Cloud Identity Groups API. A `Membership` defines a relationship between a `Group` and an entity belonging to that `Group`, referred to as a \"member\".",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceResponse": {
      "properties": {
        "device": {
          "description": "Resultant Device object for the action. Note that asset tags will not be returned in the device object.",
          "$ref": "GoogleAppsCloudidentityDevicesV1Device"
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceResponse",
      "description": "Response message for wiping all data on the device.",
      "type": "object"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "batchPath": "batch",
  "id": "cloudidentity:v1beta1",
  "basePath": "",
  "version_module": true,
  "ownerName": "Google",
  "title": "Cloud Identity API",
  "revision": "20210618",
  "resources": {
    "devices": {
      "resources": {
        "deviceUsers": {
          "methods": {
            "get": {
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id is the unique ID assigned to the Device, and device_user_id is the unique ID assigned to the User.",
                  "location": "path",
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "cloudidentity.devices.deviceUsers.get",
              "response": {
                "$ref": "DeviceUser"
              },
              "path": "v1beta1/{+name}",
              "httpMethod": "GET",
              "description": "Retrieves the specified DeviceUser",
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}"
            },
            "cancelWipe": {
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id is the unique ID assigned to the Device, and device_user_id is the unique ID assigned to the User.",
                  "type": "string",
                  "location": "path",
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$"
                }
              },
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:cancelWipe",
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "CancelWipeDeviceUserRequest"
              },
              "description": "Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.",
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudidentity.devices.deviceUsers.cancelWipe",
              "path": "v1beta1/{+name}:cancelWipe"
            },
            "lookup": {
              "description": "Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required.",
              "path": "v1beta1/{+parent}:lookup",
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers:lookup",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices.lookup"
              ],
              "id": "cloudidentity.devices.deviceUsers.lookup",
              "response": {
                "$ref": "LookupSelfDeviceUsersResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "rawResourceId": {
                  "location": "query",
                  "description": "Raw Resource Id used by Google Endpoint Verification. If the user is enrolled into Google Endpoint Verification, this id will be saved as the 'device_resource_id' field in the following platform dependent files. Mac: ~/.secureConnect/context_aware_config.json Windows: C:\\Users\\%USERPROFILE%\\.secureConnect\\context_aware_config.json Linux: ~/.secureConnect/context_aware_config.json",
                  "type": "string"
                },
                "parent": {
                  "location": "path",
                  "description": "Must be set to \"devices/-/deviceUsers\" to search across all DeviceUser belonging to the user.",
                  "type": "string",
                  "pattern": "^devices/[^/]+/deviceUsers$",
                  "required": true
                },
                "pageToken": {
                  "description": "A page token, received from a previous `LookupDeviceUsers` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `LookupDeviceUsers` must match the call that provided the page token.",
                  "type": "string",
                  "location": "query"
                },
                "userId": {
                  "type": "string",
                  "location": "query",
                  "description": "The user whose DeviceUser's resource name will be fetched. Must be set to 'me' to fetch the DeviceUser's resource name for the calling user."
                },
                "pageSize": {
                  "description": "The maximum number of DeviceUsers to return. If unspecified, at most 20 DeviceUsers will be returned. The maximum value is 20; values above 20 will be coerced to 20.",
                  "type": "integer",
                  "format": "int32",
                  "location": "query"
                },
                "androidId": {
                  "description": "Android Id returned by [Settings.Secure#ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID).",
                  "type": "string",
                  "location": "query"
                }
              },
              "httpMethod": "GET"
            },
            "delete": {
              "id": "cloudidentity.devices.deviceUsers.delete",
              "parameters": {
                "name": {
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id is the unique ID assigned to the Device, and device_user_id is the unique ID assigned to the User.",
                  "type": "string",
                  "required": true,
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "location": "path"
                }
              },
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}",
              "response": {
                "$ref": "Operation"
              },
              "path": "v1beta1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "description": "Deletes the specified DeviceUser. This also revokes the user's access to device data.",
              "httpMethod": "DELETE"
            },
            "block": {
              "path": "v1beta1/{+name}:block",
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:block",
              "httpMethod": "POST",
              "request": {
                "$ref": "BlockDeviceUserRequest"
              },
              "id": "cloudidentity.devices.deviceUsers.block",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "required": true,
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id is the unique ID assigned to the Device, and device_user_id is the unique ID assigned to the User."
                }
              },
              "description": "Blocks device from accessing user data",
              "response": {
                "$ref": "Operation"
              }
            },
            "list": {
              "path": "v1beta1/{+parent}/deviceUsers",
              "response": {
                "$ref": "ListDeviceUsersResponse"
              },
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers",
              "description": "Lists/Searches DeviceUsers.",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "parameters": {
                "filter": {
                  "location": "query",
                  "description": "Optional. Additional restrictions when fetching list of devices. For a list of search fields, refer to [Mobile device search fields](https://developers.google.com/admin-sdk/directory/v1/search-operators). Multiple search fields are separated by the space character.",
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "location": "query",
                  "description": "Optional. The maximum number of DeviceUsers to return. If unspecified, at most 5 DeviceUsers will be returned. The maximum value is 20; values above 20 will be coerced to 20."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. A page token, received from a previous `ListDeviceUsers` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBooks` must match the call that provided the page token."
                },
                "orderBy": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. Order specification for devices in the response."
                },
                "parent": {
                  "pattern": "^devices/[^/]+$",
                  "description": "Required. To list all DeviceUsers, set this to \"devices/-\". To list all DeviceUsers owned by a device, set this to the resource name of the device. Format: devices/{device}",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "cloudidentity.devices.deviceUsers.list"
            },
            "wipe": {
              "response": {
                "$ref": "Operation"
              },
              "httpMethod": "POST",
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:wipe",
              "description": "Wipes the user's account on a device.",
              "id": "cloudidentity.devices.deviceUsers.wipe",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id is the unique ID assigned to the Device, and device_user_id is the unique ID assigned to the User.",
                  "location": "path",
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "WipeDeviceUserRequest"
              },
              "path": "v1beta1/{+name}:wipe"
            },
            "approve": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:approve",
              "httpMethod": "POST",
              "id": "cloudidentity.devices.deviceUsers.approve",
              "path": "v1beta1/{+name}:approve",
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "required": true,
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id is the unique ID assigned to the Device, and device_user_id is the unique ID assigned to the User."
                }
              },
              "request": {
                "$ref": "ApproveDeviceUserRequest"
              },
              "description": "Approves device to access user data."
            }
          },
          "resources": {
            "clientStates": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates/{clientStatesId}",
                  "response": {
                    "$ref": "ClientState"
                  },
                  "parameters": {
                    "name": {
                      "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device_id}/deviceUsers/{device_user_id}/clientStates/{partner_id}`, where `device_id` is the unique ID assigned to the Device, `device_user_id` is the unique ID assigned to the User and `partner_id` identifies the partner storing the data. To get the client state for devices belonging to your own organization, the `partnerId` is in the format: `customerId-*anystring*`. Where the `customerId` is your organization's customer ID and `anystring` is any suffix. This suffix is used in setting up Custom Access Levels in Context-Aware Access. You may use `my_customer` instead of the customer ID for devices managed by your own organization. You may specify `-` in place of the `{device_id}`, so the ClientState resource name can be: `devices/-/deviceUsers/{device_user_resource_id}/clientStates/{partner_id}`.",
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^devices/[^/]+/deviceUsers/[^/]+/clientStates/[^/]+$"
                    },
                    "customer": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs."
                    }
                  },
                  "description": "Gets the client state for the device user",
                  "httpMethod": "GET",
                  "path": "v1beta1/{+name}",
                  "id": "cloudidentity.devices.deviceUsers.clientStates.get"
                },
                "patch": {
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "ClientState"
                  },
                  "httpMethod": "PATCH",
                  "path": "v1beta1/{+name}",
                  "id": "cloudidentity.devices.deviceUsers.clientStates.patch",
                  "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates/{clientStatesId}",
                  "description": "Updates the client state for the device user **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium",
                  "parameters": {
                    "customer": {
                      "location": "query",
                      "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer_id}`, where customer_id is the customer to whom the device belongs.",
                      "type": "string"
                    },
                    "name": {
                      "pattern": "^devices/[^/]+/deviceUsers/[^/]+/clientStates/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`, where partner_id corresponds to the partner storing the data.",
                      "required": true
                    },
                    "updateMask": {
                      "description": "Optional. Comma-separated list of fully qualified names of fields to be updated. If not specified, all updatable fields in ClientState are updated.",
                      "location": "query",
                      "format": "google-fieldmask",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "methods": {
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "ListDevicesResponse"
          },
          "parameterOrder": [],
          "description": "Lists/Searches devices.",
          "path": "v1beta1/devices",
          "flatPath": "v1beta1/devices",
          "parameters": {
            "view": {
              "enumDescriptions": [
                "Default value. The value is unused.",
                "This view contains all devices imported by the company admin. Each device in the response contains all information specified by the company admin when importing the device (i.e. asset tags).",
                "This view contains all devices with at least one user registered on the device. Each device in the response contains all device information, except for asset tags."
              ],
              "enum": [
                "VIEW_UNSPECIFIED",
                "COMPANY_INVENTORY",
                "USER_ASSIGNED_DEVICES"
              ],
              "type": "string",
              "location": "query",
              "description": "Optional. The view to use for the List request."
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "description": "Optional. Order specification for devices in the response. Only one of the following field names may be used to specify the order: `create_time`, `last_sync_time`, `model`, `os_version`, `device_type` and `serial_number`. `desc` may be specified optionally to specify results to be sorted in descending order. Default order is ascending."
            },
            "filter": {
              "type": "string",
              "location": "query",
              "description": "Optional. Additional restrictions when fetching list of devices. For a list of search fields, refer to [Mobile device search fields](https://developers.google.com/admin-sdk/directory/v1/search-operators). Multiple search fields are separated by the space character."
            },
            "pageSize": {
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "Optional. The maximum number of Devices to return. If unspecified, at most 20 Devices will be returned. The maximum value is 100; values above 100 will be coerced to 100."
            },
            "pageToken": {
              "type": "string",
              "description": "Optional. A page token, received from a previous `ListDevices` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListDevices` must match the call that provided the page token.",
              "location": "query"
            }
          },
          "id": "cloudidentity.devices.list"
        },
        "delete": {
          "httpMethod": "DELETE",
          "response": {
            "$ref": "Operation"
          },
          "path": "v1beta1/{+name}",
          "parameters": {
            "name": {
              "type": "string",
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique ID assigned to the Device.",
              "location": "path",
              "required": true,
              "pattern": "^devices/[^/]+$"
            }
          },
          "id": "cloudidentity.devices.delete",
          "parameterOrder": [
            "name"
          ],
          "description": "Deletes the specified device.",
          "flatPath": "v1beta1/devices/{devicesId}"
        },
        "cancelWipe": {
          "response": {
            "$ref": "Operation"
          },
          "parameters": {
            "name": {
              "required": true,
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique ID assigned to the Device.",
              "pattern": "^devices/[^/]+$",
              "type": "string",
              "location": "path"
            }
          },
          "id": "cloudidentity.devices.cancelWipe",
          "path": "v1beta1/{+name}:cancelWipe",
          "description": "Cancels an unfinished device wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.",
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "POST",
          "flatPath": "v1beta1/devices/{devicesId}:cancelWipe",
          "request": {
            "$ref": "CancelWipeDeviceRequest"
          }
        },
        "wipe": {
          "description": "Wipes all data on the specified device.",
          "response": {
            "$ref": "Operation"
          },
          "httpMethod": "POST",
          "id": "cloudidentity.devices.wipe",
          "parameters": {
            "name": {
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^devices/[^/]+$",
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where device_id is the unique ID assigned to the Device, and device_user_id is the unique ID assigned to the User."
            }
          },
          "request": {
            "$ref": "WipeDeviceRequest"
          },
          "flatPath": "v1beta1/devices/{devicesId}:wipe",
          "parameterOrder": [
            "name"
          ],
          "path": "v1beta1/{+name}:wipe"
        },
        "get": {
          "path": "v1beta1/{+name}",
          "response": {
            "$ref": "Device"
          },
          "description": "Retrieves the specified device.",
          "httpMethod": "GET",
          "parameterOrder": [
            "name"
          ],
          "id": "cloudidentity.devices.get",
          "flatPath": "v1beta1/devices/{devicesId}",
          "parameters": {
            "name": {
              "required": true,
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique ID assigned to the Device.",
              "pattern": "^devices/[^/]+$",
              "location": "path",
              "type": "string"
            }
          }
        },
        "create": {
          "request": {
            "$ref": "CreateDeviceRequest"
          },
          "description": "Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium",
          "id": "cloudidentity.devices.create",
          "response": {
            "$ref": "Operation"
          },
          "flatPath": "v1beta1/devices",
          "parameters": {},
          "parameterOrder": [],
          "httpMethod": "POST",
          "path": "v1beta1/devices"
        }
      }
    },
    "customers": {
      "resources": {
        "userinvitations": {
          "methods": {
            "list": {
              "path": "v1beta1/{+parent}/userinvitations",
              "parameters": {
                "filter": {
                  "description": "Optional. A query string for filtering `UserInvitation` results by their current state, in the format: `\"state=='invited'\"`.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "Optional. The maximum number of UserInvitation resources to return. If unspecified, at most 100 resources will be returned. The maximum value is 200; values above 200 will be set to 200.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "Optional. A page token, received from a previous `ListUserInvitations` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBooks` must match the call that provided the page token.",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "pattern": "^customers/[^/]+$",
                  "description": "Required. The customer ID of the Google Workspace or Cloud Identity account the UserInvitation resources are associated with.",
                  "location": "path"
                },
                "orderBy": {
                  "description": "Optional. The sort order of the list results. You can sort the results in descending order based on either email or last update timestamp but not both, using `order_by=\"email desc\"`. Currently, sorting is supported for `update_time asc`, `update_time desc`, `email asc`, and `email desc`. If not specified, results will be returned based on `email asc` order.",
                  "type": "string",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "ListUserInvitationsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Retrieves a list of UserInvitation resources. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.",
              "flatPath": "v1beta1/customers/{customersId}/userinvitations",
              "httpMethod": "GET",
              "id": "cloudidentity.customers.userinvitations.list"
            },
            "get": {
              "id": "cloudidentity.customers.userinvitations.get",
              "path": "v1beta1/{+name}",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`",
                  "location": "path"
                }
              },
              "description": "Retrieves a UserInvitation resource. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.",
              "httpMethod": "GET",
              "response": {
                "$ref": "UserInvitation"
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}"
            },
            "cancel": {
              "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}:cancel",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`",
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "cloudidentity.customers.userinvitations.cancel",
              "description": "Cancels a UserInvitation that was already sent.",
              "path": "v1beta1/{+name}:cancel",
              "request": {
                "$ref": "CancelUserInvitationRequest"
              }
            },
            "isInvitableUser": {
              "httpMethod": "GET",
              "description": "Verifies whether a user account is eligible to receive a UserInvitation (is an unmanaged account). Eligibility is based on the following criteria: * the email address is a consumer account and it's the primary email address of the account, and * the domain of the email address matches an existing verified Google Workspace or Cloud Identity domain If both conditions are met, the user is eligible. **Note:** This method is not supported for Workspace Essentials customers.",
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}:isInvitableUser",
              "id": "cloudidentity.customers.userinvitations.isInvitableUser",
              "response": {
                "$ref": "IsInvitableUserResponse"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`",
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "required": true
                }
              },
              "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}:isInvitableUser"
            },
            "send": {
              "path": "v1beta1/{+name}:send",
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "SendUserInvitationRequest"
              },
              "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}:send",
              "httpMethod": "POST",
              "description": "Sends a UserInvitation to email. If the `UserInvitation` does not exist for this request and it is a valid request, the request creates a `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour delay where newly-created consumer accounts will not appear in the results. You can still send a `UserInvitation` to those accounts if you know the unmanaged email address and IsInvitableUser==True.",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`",
                  "location": "path",
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "required": true
                }
              },
              "id": "cloudidentity.customers.userinvitations.send"
            }
          }
        }
      }
    },
    "groups": {
      "methods": {
        "search": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "SearchGroupsResponse"
          },
          "flatPath": "v1beta1/groups:search",
          "id": "cloudidentity.groups.search",
          "parameterOrder": [],
          "parameters": {
            "pageSize": {
              "location": "query",
              "format": "int32",
              "description": "The maximum number of results to return. Note that the number of results returned may be less than this value even if there are more available results. To fetch all results, clients must continue calling this method repeatedly until the response no longer contains a `next_page_token`. If unspecified, defaults to 200 for `GroupView.BASIC` and to 50 for `GroupView.FULL`. Must not be greater than 1000 for `GroupView.BASIC` or 500 for `GroupView.FULL`.",
              "type": "integer"
            },
            "view": {
              "description": "The level of detail to be returned. If unspecified, defaults to `View.BASIC`.",
              "enum": [
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Default. Only basic resource information is returned.",
                "All resource information is returned."
              ]
            },
            "pageToken": {
              "description": "The `next_page_token` value returned from a previous search request, if any.",
              "type": "string",
              "location": "query"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Required. The search query. Must be specified in [Common Expression Language](https://opensource.google/projects/cel). May only contain equality operators on the parent and inclusion operators on labels (e.g., `parent == 'customers/{customer_id}' && 'cloudidentity.googleapis.com/groups.discussion_forum' in labels`). The `customer_id` must begin with \"C\" (for example, 'C046psxkn')."
            }
          },
          "path": "v1beta1/groups:search",
          "httpMethod": "GET",
          "description": "Searches for `Group` resources matching a specified query."
        },
        "create": {
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "v1beta1/groups",
          "parameters": {
            "initialGroupConfig": {
              "location": "query",
              "enumDescriptions": [
                "Default. Should not be used.",
                "The end user making the request will be added as the initial owner of the `Group`.",
                "An empty group is created without any initial owners. This can only be used by admins of the domain."
              ],
              "enum": [
                "INITIAL_GROUP_CONFIG_UNSPECIFIED",
                "WITH_INITIAL_OWNER",
                "EMPTY"
              ],
              "description": "Required. The initial configuration option for the `Group`.",
              "type": "string"
            }
          },
          "description": "Creates a `Group`.",
          "parameterOrder": [],
          "path": "v1beta1/groups",
          "httpMethod": "POST",
          "request": {
            "$ref": "Group"
          },
          "id": "cloudidentity.groups.create"
        },
        "get": {
          "parameters": {
            "name": {
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group` to retrieve. Must be of the form `groups/{group_id}`.",
              "location": "path",
              "pattern": "^groups/[^/]+$",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1beta1/{+name}",
          "description": "Retrieves a `Group`.",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "v1beta1/groups/{groupsId}",
          "httpMethod": "GET",
          "id": "cloudidentity.groups.get",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameterOrder": [
            "name"
          ]
        },
        "lookup": {
          "description": "Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.",
          "flatPath": "v1beta1/groups:lookup",
          "parameters": {
            "groupKey.namespace": {
              "description": "The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.",
              "type": "string",
              "location": "query"
            },
            "groupKey.id": {
              "location": "query",
              "description": "The ID of the entity. For Google-managed entities, the `id` must be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.",
              "type": "string"
            }
          },
          "id": "cloudidentity.groups.lookup",
          "path": "v1beta1/groups:lookup",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "LookupGroupNameResponse"
          }
        },
        "delete": {
          "description": "Deletes a `Group`.",
          "response": {
            "$ref": "Operation"
          },
          "parameters": {
            "name": {
              "location": "path",
              "type": "string",
              "pattern": "^groups/[^/]+$",
              "required": true,
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group` to retrieve. Must be of the form `groups/{group_id}`."
            }
          },
          "id": "cloudidentity.groups.delete",
          "path": "v1beta1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "DELETE",
          "flatPath": "v1beta1/groups/{groupsId}"
        },
        "list": {
          "httpMethod": "GET",
          "path": "v1beta1/groups",
          "response": {
            "$ref": "ListGroupsResponse"
          },
          "parameters": {
            "parent": {
              "description": "Required. The parent resource under which to list all `Group` resources. Must be of the form `identitysources/{identity_source_id}` for external- identity-mapped groups or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn').",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "description": "The `next_page_token` value returned from a previous list request, if any.",
              "location": "query",
              "type": "string"
            },
            "view": {
              "enumDescriptions": [
                "Default. Should not be used.",
                "Only basic resource information is returned.",
                "All resource information is returned."
              ],
              "description": "The level of detail to be returned. If unspecified, defaults to `View.BASIC`.",
              "type": "string",
              "location": "query",
              "enum": [
                "VIEW_UNSPECIFIED",
                "BASIC",
                "FULL"
              ]
            },
            "pageSize": {
              "location": "query",
              "format": "int32",
              "description": "The maximum number of results to return. Note that the number of results returned may be less than this value even if there are more available results. To fetch all results, clients must continue calling this method repeatedly until the response no longer contains a `next_page_token`. If unspecified, defaults to 200 for `View.BASIC` and to 50 for `View.FULL`. Must not be greater than 1000 for `View.BASIC` or 500 for `View.FULL`.",
              "type": "integer"
            }
          },
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Lists the `Group` resources under a customer or namespace.",
          "flatPath": "v1beta1/groups",
          "id": "cloudidentity.groups.list"
        },
        "patch": {
          "path": "v1beta1/{+name}",
          "id": "cloudidentity.groups.patch",
          "response": {
            "$ref": "Operation"
          },
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "name": {
              "description": "Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.",
              "type": "string",
              "pattern": "^groups/[^/]+$",
              "required": true,
              "location": "path"
            },
            "updateMask": {
              "format": "google-fieldmask",
              "type": "string",
              "description": "Required. The fully-qualified names of fields to update. May only contain the following fields: `display_name`, `description`, `labels`.",
              "location": "query"
            }
          },
          "description": "Updates a `Group`.",
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1beta1/groups/{groupsId}",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      },
      "resources": {
        "memberships": {
          "methods": {
            "searchTransitiveGroups": {
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "id": "cloudidentity.groups.memberships.searchTransitiveGroups",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.",
              "parameters": {
                "pageSize": {
                  "description": "The default page size is 200 (max 1000).",
                  "location": "query",
                  "format": "int32",
                  "type": "integer"
                },
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification AND label(s). This is a `required` field. Users can search on label attributes of groups. CONTAINS match ('in') is supported on labels. Identity-mapped groups are uniquely identified by both a `member_key_id` and a `member_key_namespace`, which requires an additional query input: `member_key_namespace`. Example query: `member_key_id == 'member_key_id_value' && in labels`",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^groups/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "[Resource name](https://cloud.google.com/apis/design/resource_names) of the group to search transitive memberships in. Format: `groups/{group_id}`, where `group_id` is always '-' as this API will search across all groups for a given member.",
                  "location": "path"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous list request, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "v1beta1/{+parent}/memberships:searchTransitiveGroups",
              "flatPath": "v1beta1/groups/{groupsId}/memberships:searchTransitiveGroups",
              "response": {
                "$ref": "SearchTransitiveGroupsResponse"
              }
            },
            "create": {
              "parameters": {
                "parent": {
                  "pattern": "^groups/[^/]+$",
                  "description": "Required. The parent `Group` resource under which to create the `Membership`. Must be of the form `groups/{group_id}`.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Membership"
              },
              "httpMethod": "POST",
              "flatPath": "v1beta1/groups/{groupsId}/memberships",
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudidentity.groups.memberships.create",
              "description": "Creates a `Membership`.",
              "path": "v1beta1/{+parent}/memberships"
            },
            "searchTransitiveMemberships": {
              "path": "v1beta1/{+parent}/memberships:searchTransitiveMemberships",
              "description": "Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta1/groups/{groupsId}/memberships:searchTransitiveMemberships",
              "httpMethod": "GET",
              "id": "cloudidentity.groups.memberships.searchTransitiveMemberships",
              "response": {
                "$ref": "SearchTransitiveMembershipsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "The next_page_token value returned from a previous list request, if any.",
                  "type": "string"
                },
                "parent": {
                  "description": "[Resource name](https://cloud.google.com/apis/design/resource_names) of the group to search transitive memberships in. Format: `groups/{group_id}`, where `group_id` is the unique ID assigned to the Group.",
                  "type": "string",
                  "location": "path",
                  "pattern": "^groups/[^/]+$",
                  "required": true
                },
                "pageSize": {
                  "description": "The default page size is 200 (max 1000).",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                }
              }
            },
            "modifyMembershipRoles": {
              "request": {
                "$ref": "ModifyMembershipRolesRequest"
              },
              "id": "cloudidentity.groups.memberships.modifyMembershipRoles",
              "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}:modifyMembershipRoles",
              "httpMethod": "POST",
              "response": {
                "$ref": "ModifyMembershipRolesResponse"
              },
              "description": "Modifies the `MembershipRole`s of a `Membership`.",
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}:modifyMembershipRoles",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership` whose roles are to be modified. Must be of the form `groups/{group_id}/memberships/{membership_id}`.",
                  "pattern": "^groups/[^/]+/memberships/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "getMembershipGraph": {
              "flatPath": "v1beta1/groups/{groupsId}/memberships:getMembershipGraph",
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "description": "Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.",
              "parameters": {
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification AND label(s). Certain groups are uniquely identified by both a 'member_key_id' and a 'member_key_namespace', which requires an additional query input: 'member_key_namespace'. Example query: `member_key_id == 'member_key_id_value' && in labels`",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "required": true,
                  "location": "path",
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the group to search transitive memberships in. Format: `groups/{group_id}`, where `group_id` is the unique ID assigned to the Group to which the Membership belongs to. group_id can be a wildcard collection id \"-\". When a group_id is specified, the membership graph will be constrained to paths between the member (defined in the query) and the parent. If a wildcard collection is provided, all membership paths connected to the member will be returned.",
                  "type": "string",
                  "pattern": "^groups/[^/]+$"
                }
              },
              "path": "v1beta1/{+parent}/memberships:getMembershipGraph",
              "id": "cloudidentity.groups.memberships.getMembershipGraph"
            },
            "checkTransitiveMembership": {
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1beta1/groups/{groupsId}/memberships:checkTransitiveMembership",
              "path": "v1beta1/{+parent}/memberships:checkTransitiveMembership",
              "response": {
                "$ref": "CheckTransitiveMembershipResponse"
              },
              "parameters": {
                "parent": {
                  "pattern": "^groups/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "[Resource name](https://cloud.google.com/apis/design/resource_names) of the group to check the transitive membership in. Format: `groups/{group_id}`, where `group_id` is the unique id assigned to the Group to which the Membership belongs to.",
                  "type": "string"
                },
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification. This is a `required` field. Certain groups are uniquely identified by both a 'member_key_id' and a 'member_key_namespace', which requires an additional query input: 'member_key_namespace'. Example query: `member_key_id == 'member_key_id_value'`",
                  "location": "query",
                  "type": "string"
                }
              },
              "id": "cloudidentity.groups.memberships.checkTransitiveMembership",
              "description": "Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group."
            },
            "get": {
              "id": "cloudidentity.groups.memberships.get",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}",
              "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}",
              "response": {
                "$ref": "Membership"
              },
              "description": "Retrieves a `Membership`.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^groups/[^/]+/memberships/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership` to retrieve. Must be of the form `groups/{group_id}/memberships/{membership_id}`."
                }
              }
            },
            "lookup": {
              "parameters": {
                "memberKey.id": {
                  "description": "The ID of the entity. For Google-managed entities, the `id` must be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.",
                  "location": "query",
                  "type": "string"
                },
                "memberKey.namespace": {
                  "description": "The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "description": "Required. The parent `Group` resource under which to lookup the `Membership` name. Must be of the form `groups/{group_id}`.",
                  "location": "path",
                  "type": "string",
                  "pattern": "^groups/[^/]+$"
                }
              },
              "flatPath": "v1beta1/groups/{groupsId}/memberships:lookup",
              "id": "cloudidentity.groups.memberships.lookup",
              "path": "v1beta1/{+parent}/memberships:lookup",
              "response": {
                "$ref": "LookupMembershipNameResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET"
            },
            "list": {
              "description": "Lists the `Membership`s within a `Group`.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1beta1/{+parent}/memberships",
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "parameters": {
                "view": {
                  "location": "query",
                  "enum": [
                    "BASIC",
                    "FULL"
                  ],
                  "enumDescriptions": [
                    "Default. Only basic resource information is returned.",
                    "All resource information is returned."
                  ],
                  "description": "The level of detail to be returned. If unspecified, defaults to `MembershipView.BASIC`.",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "The maximum number of results to return. Note that the number of results returned may be less than this value even if there are more available results. To fetch all results, clients must continue calling this method repeatedly until the response no longer contains a `next_page_token`. If unspecified, defaults to 200 for `GroupView.BASIC` and to 50 for `GroupView.FULL`. Must not be greater than 1000 for `GroupView.BASIC` or 500 for `GroupView.FULL`.",
                  "format": "int32",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^groups/[^/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Required. The parent `Group` resource under which to lookup the `Membership` name. Must be of the form `groups/{group_id}`."
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "The `next_page_token` value returned from a previous search request, if any."
                }
              },
              "httpMethod": "GET",
              "id": "cloudidentity.groups.memberships.list",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta1/groups/{groupsId}/memberships"
            },
            "delete": {
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}",
              "id": "cloudidentity.groups.memberships.delete",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^groups/[^/]+/memberships/[^/]+$",
                  "required": true,
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership` to delete. Must be of the form `groups/{group_id}/memberships/{membership_id}`.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta1/{+name}",
              "description": "Deletes a `Membership`."
            }
          }
        }
      }
    }
  },
  "protocol": "rest",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-identity.devices.lookup": {
          "description": "See your device details"
        },
        "https://www.googleapis.com/auth/cloud-identity.groups": {
          "description": "See, change, create, and delete any of the Cloud Identity Groups that you can access, including the members of each group"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        },
        "https://www.googleapis.com/auth/cloud-identity.groups.readonly": {
          "description": "See any Cloud Identity Groups that you can access, including group members and their emails"
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "name": "cloudidentity",
  "version": "v1beta1",
  "rootUrl": "https://cloudidentity.googleapis.com/",
  "discoveryVersion": "v1",
  "documentationLink": "https://cloud.google.com/identity/"
}

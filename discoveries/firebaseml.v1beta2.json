{
  "description": "Access custom machine learning models hosted via Firebase ML.",
  "kind": "discovery#restDescription",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "version_module": true,
  "documentationLink": "https://firebase.google.com",
  "title": "Firebase ML API",
  "ownerName": "Google",
  "mtlsRootUrl": "https://firebaseml.mtls.googleapis.com/",
  "schemas": {
    "DownloadModelResponse": {
      "description": "The response for downloading a model to device.",
      "type": "object",
      "properties": {
        "sizeBytes": {
          "readOnly": true,
          "type": "string",
          "format": "int64",
          "description": "Output only. The size of the file(s), if this information is available."
        },
        "modelFormat": {
          "enum": [
            "MODEL_FORMAT_UNSPECIFIED",
            "TFLITE"
          ],
          "enumDescriptions": [
            "Unknown format",
            "TFLite model"
          ],
          "type": "string",
          "description": "Output only. The format of the model being downloaded.",
          "readOnly": true
        },
        "expireTime": {
          "description": "Output only. The time that the download URI link expires. If the link has expired, the REST call must be repeated.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "downloadUri": {
          "type": "string",
          "description": "Output only. A download URI for the model/zip file.",
          "readOnly": true
        }
      },
      "id": "DownloadModelResponse"
    },
    "TfLiteModel": {
      "properties": {
        "automlModel": {
          "description": "The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)",
          "type": "string"
        },
        "sizeBytes": {
          "description": "Output only. The size of the TFLite model",
          "readOnly": true,
          "type": "string"
        },
        "gcsTfliteUri": {
          "description": "The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.",
          "type": "string"
        }
      },
      "description": "Information that is specific to TfLite models.",
      "id": "TfLiteModel",
      "type": "object"
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {}
    },
    "ListModelsResponse": {
      "type": "object",
      "description": "The response for list models",
      "id": "ListModelsResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "models": {
          "description": "The list of models",
          "type": "array",
          "items": {
            "$ref": "Model"
          }
        }
      }
    },
    "Operation": {
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      },
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object"
    },
    "ModelState": {
      "properties": {
        "published": {
          "description": "Indicates if this model has been published.",
          "type": "boolean"
        },
        "validationError": {
          "description": "Output only. Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.",
          "readOnly": true,
          "$ref": "Status"
        }
      },
      "description": "State common to all model types. Includes publishing and validation information.",
      "type": "object",
      "id": "ModelState"
    },
    "Status": {
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "Model": {
      "properties": {
        "updateTime": {
          "readOnly": true,
          "description": "Output only. Timestamp when this model was updated in Firebase ML.",
          "type": "string",
          "format": "google-datetime"
        },
        "activeOperations": {
          "description": "Output only. Lists operation ids associated with this model whose status is NOT done.",
          "items": {
            "$ref": "Operation"
          },
          "readOnly": true,
          "type": "array"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3"
        },
        "name": {
          "description": "The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Timestamp when this model was created in Firebase ML.",
          "format": "google-datetime"
        },
        "displayName": {
          "description": "Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.",
          "type": "string"
        },
        "modelHash": {
          "description": "Output only. The model_hash will change if a new file is available for download.",
          "readOnly": true,
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "User defined tags which can be used to group/filter models during listing",
          "type": "array"
        },
        "state": {
          "$ref": "ModelState",
          "description": "State common to all model types. Includes publishing and validation information."
        },
        "tfliteModel": {
          "$ref": "TfLiteModel",
          "description": "A TFLite Model"
        }
      },
      "description": "An ML model hosted in Firebase ML",
      "type": "object",
      "id": "Model"
    },
    "ModelOperationMetadata": {
      "id": "ModelOperationMetadata",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}`"
        },
        "basicOperationStatus": {
          "type": "string",
          "enum": [
            "BASIC_OPERATION_STATUS_UNSPECIFIED",
            "BASIC_OPERATION_STATUS_UPLOADING",
            "BASIC_OPERATION_STATUS_VERIFYING"
          ],
          "enumDescriptions": [
            "The status is unspecified",
            "The model file is being uploaded",
            "The model file is being verified"
          ]
        }
      },
      "type": "object",
      "description": "This is returned in the longrunning operations for create/update."
    }
  },
  "version": "v1beta2",
  "parameters": {
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true",
      "type": "boolean"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ]
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "type": "string",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    }
  },
  "fullyEncodeReservedExpansion": true,
  "batchPath": "batch",
  "rootUrl": "https://firebaseml.googleapis.com/",
  "canonicalName": "Firebase ML",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "baseUrl": "https://firebaseml.googleapis.com/",
  "discoveryVersion": "v1",
  "basePath": "",
  "protocol": "rest",
  "servicePath": "",
  "revision": "20220321",
  "name": "firebaseml",
  "ownerDomain": "google.com",
  "resources": {
    "projects": {
      "resources": {
        "models": {
          "methods": {
            "list": {
              "id": "firebaseml.projects.models.list",
              "response": {
                "$ref": "ListModelsResponse"
              },
              "flatPath": "v1beta2/projects/{projectsId}/models",
              "httpMethod": "GET",
              "path": "v1beta2/{+parent}/models",
              "parameterOrder": [
                "parent"
              ],
              "description": "Lists the models",
              "parameters": {
                "pageSize": {
                  "location": "query",
                  "description": "The maximum number of items to return",
                  "format": "int32",
                  "type": "integer"
                },
                "filter": {
                  "location": "query",
                  "description": "A filter for the list e.g. 'tags: abc' to list models which are tagged with \"abc\"",
                  "type": "string"
                },
                "parent": {
                  "location": "path",
                  "description": "Required. The name of the parent to list models for. The parent must have the form `projects/{project_id}'",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous List request, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "get": {
              "path": "v1beta2/{+name}",
              "id": "firebaseml.projects.models.get",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "description": "Gets a model resource.",
              "response": {
                "$ref": "Model"
              },
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/models/[^/]+$",
                  "type": "string",
                  "description": "Required. The name of the model to get. The name must have the form `projects/{project_id}/models/{model_id}`"
                }
              },
              "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "download": {
              "parameterOrder": [
                "name"
              ],
              "description": "Gets Download information for a model. This is meant for downloading model resources onto devices. It gives very limited information about the model.",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/models/[^/]+$",
                  "description": "Required. The name of the model to download. The name must have the form `projects/{project}/models/{model}`",
                  "type": "string",
                  "required": true
                }
              },
              "path": "v1beta2/{+name}:download",
              "id": "firebaseml.projects.models.download",
              "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}:download",
              "httpMethod": "GET",
              "response": {
                "$ref": "DownloadModelResponse"
              }
            },
            "patch": {
              "description": "Updates a model. The longrunning operation will eventually return a Model.",
              "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}",
              "request": {
                "$ref": "Model"
              },
              "path": "v1beta2/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "firebaseml.projects.models.patch",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "updateMask": {
                  "type": "string",
                  "description": "The update mask",
                  "format": "google-fieldmask",
                  "location": "query"
                },
                "name": {
                  "pattern": "^projects/[^/]+/models/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.",
                  "type": "string"
                }
              },
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Operation"
              }
            },
            "create": {
              "id": "firebaseml.projects.models.create",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "required": true,
                  "description": "Required. The parent project resource where the model is to be created. The parent must have the form `projects/{project_id}`",
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Model"
              },
              "flatPath": "v1beta2/projects/{projectsId}/models",
              "path": "v1beta2/{+parent}/models",
              "description": "Creates a model in Firebase ML. The longrunning operation will eventually return a Model",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Operation"
              }
            },
            "delete": {
              "parameters": {
                "name": {
                  "description": "Required. The name of the model to delete. The name must have the form `projects/{project_id}/models/{model_id}`",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/models/[^/]+$"
                }
              },
              "id": "firebaseml.projects.models.delete",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes a model",
              "httpMethod": "DELETE",
              "path": "v1beta2/{+name}",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}",
              "response": {
                "$ref": "Empty"
              }
            }
          }
        },
        "operations": {
          "methods": {
            "get": {
              "id": "firebaseml.projects.operations.get",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1beta2/{+name}",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "name": {
                  "description": "The name of the operation resource.",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1beta2/projects/{projectsId}/operations/{operationsId}"
            }
          }
        }
      }
    }
  },
  "id": "firebaseml:v1beta2"
}

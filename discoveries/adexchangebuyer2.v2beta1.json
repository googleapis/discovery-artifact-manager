{
  "baseUrl": "https://adexchangebuyer.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/adexchange.buyer": {
          "description": "Manage your Ad Exchange buyer account configuration"
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "id": "adexchangebuyer2:v2beta1",
  "kind": "discovery#restDescription",
  "version": "v2beta1",
  "ownerName": "Google",
  "description": "Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.",
  "basePath": "",
  "title": "Ad Exchange Buyer API II",
  "schemas": {
    "ListProductsResponse": {
      "properties": {
        "products": {
          "description": "The list of matching products at their head revision number.",
          "items": {
            "$ref": "Product"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "List pagination support.",
          "type": "string"
        }
      },
      "id": "ListProductsResponse",
      "type": "object",
      "description": "Response message for listing products visible to the buyer."
    },
    "ResumeProposalDealsRequest": {
      "id": "ResumeProposalDealsRequest",
      "description": "Request message to resume (unpause) serving for already-finalized deals.",
      "properties": {
        "externalDealIds": {
          "type": "array",
          "description": "The external_deal_id's of the deals to resume. If empty, all the deals in the proposal will be resumed.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "MetricValue": {
      "type": "object",
      "id": "MetricValue",
      "description": "A metric value, with an expected value and a variance; represents a count that may be either exact or estimated (for example, when sampled).",
      "properties": {
        "variance": {
          "description": "The variance (for example, square of the standard deviation) of the metric value. If value is exact, variance is 0. Can be used to calculate margin of error as a percentage of value, using the following formula, where Z is the standard constant that depends on the preferred size of the confidence interval (for example, for 90% confidence interval, use Z = 1.645): marginOfError = 100 * Z * sqrt(variance) / value",
          "format": "int64",
          "type": "string"
        },
        "value": {
          "format": "int64",
          "description": "The expected value of the metric.",
          "type": "string"
        }
      }
    },
    "AdSize": {
      "type": "object",
      "properties": {
        "height": {
          "format": "int64",
          "description": "The height of the ad slot in pixels. This field will be present only when size type is `PIXEL`.",
          "type": "string"
        },
        "sizeType": {
          "description": "The size type of the ad slot.",
          "enumDescriptions": [
            "A placeholder for an undefined size type.",
            "Ad slot with size specified by height and width in pixels.",
            "Special size to describe an interstitial ad slot.",
            "Native (mobile) ads rendered by the publisher.",
            "Fluid size (for example, responsive size) can be resized automatically with the change of outside environment."
          ],
          "type": "string",
          "enum": [
            "SIZE_TYPE_UNSPECIFIED",
            "PIXEL",
            "INTERSTITIAL",
            "NATIVE",
            "FLUID"
          ]
        },
        "width": {
          "description": "The width of the ad slot in pixels. This field will be present only when size type is `PIXEL`.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "Represents size of a single ad slot, or a creative.",
      "id": "AdSize"
    },
    "CreativeRestrictions": {
      "description": "Represents creative restrictions associated to Programmatic Guaranteed/ Preferred Deal in Ad Manager. This doesn't apply to Private Auction and AdX Preferred Deals.",
      "properties": {
        "creativeFormat": {
          "description": "The format of the environment that the creatives will be displayed in.",
          "enumDescriptions": [
            "A placeholder for an undefined creative format.",
            "A creative that will be displayed in environments such as a browser.",
            "A video creative that will be displayed in environments such as a video player."
          ],
          "enum": [
            "CREATIVE_FORMAT_UNSPECIFIED",
            "DISPLAY",
            "VIDEO"
          ],
          "type": "string"
        },
        "creativeSpecifications": {
          "items": {
            "$ref": "CreativeSpecification"
          },
          "type": "array"
        },
        "skippableAdType": {
          "type": "string",
          "description": "Skippable video ads allow viewers to skip ads after 5 seconds.",
          "enumDescriptions": [
            "A placeholder for an undefined skippable ad type.",
            "This video ad can be skipped after 5 seconds.",
            "This video ad can be skipped after 5 seconds, and is counted as engaged view after 30 seconds. The creative is hosted on YouTube only, and viewcount of the YouTube video increments after the engaged view.",
            "This video ad is not skippable."
          ],
          "enum": [
            "SKIPPABLE_AD_TYPE_UNSPECIFIED",
            "SKIPPABLE",
            "INSTREAM_SELECT",
            "NOT_SKIPPABLE"
          ]
        }
      },
      "type": "object",
      "id": "CreativeRestrictions"
    },
    "DealServingMetadata": {
      "description": "Message captures metadata about the serving status of a deal.",
      "properties": {
        "dealPauseStatus": {
          "description": "Output only. Tracks which parties (if any) have paused a deal.",
          "$ref": "DealPauseStatus",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "DealServingMetadata"
    },
    "FilteredBidDetailRow": {
      "properties": {
        "bidCount": {
          "description": "The number of bids with the specified detail.",
          "$ref": "MetricValue"
        },
        "rowDimensions": {
          "$ref": "RowDimensions",
          "description": "The values of all dimensions associated with metric values in this row."
        },
        "detailId": {
          "description": "Note: this field will be deprecated, use \"detail\" field instead. When \"detail\" field represents an integer value, this field is populated as the same integer value \"detail\" field represents, otherwise this field will be 0. The ID of the detail. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response message.",
          "format": "int32",
          "deprecated": true,
          "type": "integer"
        },
        "detail": {
          "description": "The ID of the detail, can be numeric or text. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response message.",
          "type": "string"
        }
      },
      "id": "FilteredBidDetailRow",
      "type": "object",
      "description": "The number of filtered bids with the specified dimension values, among those filtered due to the requested filtering reason (for example, creative status), that have the specified detail."
    },
    "FirstPartyMobileApplicationTargeting": {
      "id": "FirstPartyMobileApplicationTargeting",
      "properties": {
        "excludedAppIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of application IDs to be excluded."
        },
        "targetedAppIds": {
          "description": "A list of application IDs to be included.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Represents a list of targeted and excluded mobile application IDs that publishers own. Mobile application IDs are from App Store and Google Play Store. Android App ID, for example, com.google.android.apps.maps, can be found in Google Play Store URL. iOS App ID (which is a number) can be found at the end of iTunes store URL. First party mobile applications is either included or excluded.",
      "type": "object"
    },
    "CreativeSpecification": {
      "type": "object",
      "description": "Represents information for a creative that is associated with a Programmatic Guaranteed/Preferred Deal in Ad Manager.",
      "properties": {
        "creativeSize": {
          "$ref": "AdSize",
          "description": "The size of the creative."
        },
        "creativeCompanionSizes": {
          "description": "Companion sizes may be filled in only when this is a video creative.",
          "items": {
            "$ref": "AdSize"
          },
          "type": "array"
        }
      },
      "id": "CreativeSpecification"
    },
    "ServingContext": {
      "type": "object",
      "properties": {
        "securityType": {
          "$ref": "SecurityContext",
          "deprecated": true,
          "description": "Matches impressions for a particular security type."
        },
        "appType": {
          "$ref": "AppContext",
          "description": "Matches impressions for a particular app type."
        },
        "location": {
          "description": "Matches impressions coming from users *or* publishers in a specific location.",
          "$ref": "LocationContext"
        },
        "platform": {
          "description": "Matches impressions coming from a particular platform.",
          "$ref": "PlatformContext"
        },
        "all": {
          "enum": [
            "SIMPLE_CONTEXT"
          ],
          "enumDescriptions": [
            "A simple context."
          ],
          "description": "Matches all contexts.",
          "type": "string"
        },
        "auctionType": {
          "description": "Matches impressions for a particular auction type.",
          "$ref": "AuctionContext"
        }
      },
      "id": "ServingContext",
      "description": "The serving context for this restriction."
    },
    "Empty": {
      "id": "Empty",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object"
    },
    "Disapproval": {
      "type": "object",
      "properties": {
        "reason": {
          "description": "The categorized reason for disapproval.",
          "enumDescriptions": [
            "The length of the image animation is longer than allowed.",
            "The click through URL doesn't work properly.",
            "Something is wrong with the creative itself.",
            "The ad makes a fourth party call to an unapproved vendor.",
            "The ad targets consumers using remarketing lists and/or collects data for subsequent use in retargeting, but does not correctly declare that use.",
            "Clicking on the ad leads to an error page.",
            "The ad size when rendered does not match the declaration.",
            "Ads with a white background require a border, which was missing.",
            "The creative attempts to set cookies from a fourth party that is not certified.",
            "The creative sets an LSO object.",
            "The ad serves a blank.",
            "The ad uses rotation, but not all destination URLs were declared.",
            "There is a problem with the way the click macro is used.",
            "The ad technology declaration is not accurate.",
            "The actual destination URL does not match the declared destination URL.",
            "The declared expanding direction does not match the actual direction.",
            "The ad does not expand in a supported direction.",
            "The ad uses an expandable vendor that is not supported.",
            "There was an issue with the expandable ad.",
            "The ad uses a video vendor that is not supported.",
            "The length of the video ad is not supported.",
            "The format of the video ad is not supported.",
            "There was an issue with the video ad.",
            "The landing page does not conform to Ad Exchange policy.",
            "The ad or the landing page may contain malware.",
            "The ad contains adult images or video content.",
            "The ad contains text that is unclear or inaccurate.",
            "The ad promotes counterfeit designer goods.",
            "The ad causes a popup window to appear.",
            "The creative does not follow policies set for the RTB protocol.",
            "The ad contains a URL that uses a numeric IP address for the domain.",
            "The ad or landing page contains unacceptable content because it initiated a software or executable download.",
            "The ad set an unauthorized cookie on a Google domain.",
            "Flash content found when no flash was declared.",
            "SSL support declared but not working correctly.",
            "Rich Media - Direct Download in Ad (ex. PDF download).",
            "Maximum download size exceeded.",
            "Bad Destination URL: Site Not Crawlable.",
            "Bad URL: Legal disapproval.",
            "Pharmaceuticals, Gambling, Alcohol not allowed and at least one was detected.",
            "Dynamic DNS at Destination URL.",
            "Poor Image / Video Quality.",
            "For example, Image Trick to Click.",
            "Incorrect Image Layout.",
            "Irrelevant Image / Video.",
            "Broken back button.",
            "Misleading/Inaccurate claims in ads.",
            "Restricted Products.",
            "Unacceptable content. For example, malware.",
            "The ad automatically redirects to the destination site without a click, or reports a click when none were made.",
            "The ad uses URL protocols that do not exist or are not allowed on AdX.",
            "Restricted content (for example, alcohol) was found in the ad but not declared.",
            "Violation of the remarketing list policy.",
            "The destination site's robot.txt file prevents it from being crawled.",
            "Click to download must link to an app.",
            "A review extension must be an accurate review.",
            "Sexually explicit content.",
            "The ad tries to gain an unfair traffic advantage.",
            "The ad tries to circumvent Google's advertising systems.",
            "The ad promotes dangerous knives.",
            "The ad promotes explosives.",
            "The ad promotes guns & parts.",
            "The ad promotes recreational drugs/services & related equipment.",
            "The ad promotes tobacco products/services & related equipment.",
            "The ad promotes weapons.",
            "The ad is unclear or irrelevant to the destination site.",
            "The ad does not meet professional standards.",
            "The promotion is unnecessarily difficult to navigate.",
            "Violation of Google's policy for interest-based ads.",
            "Misuse of personal information.",
            "Omission of relevant information.",
            "Unavailable promotions.",
            "Misleading or unrealistic promotions.",
            "Offensive or inappropriate content.",
            "Capitalizing on sensitive events.",
            "Shocking content.",
            "Products & Services that enable dishonest behavior.",
            "The ad does not meet technical requirements.",
            "Restricted political content.",
            "Unsupported content.",
            "Invalid bidding method.",
            "Video length exceeds limits.",
            "Unacceptable content: Japanese healthcare.",
            "Online pharmacy ID required.",
            "Unacceptable content: Abortion.",
            "Unacceptable content: Birth control.",
            "Restricted in China.",
            "Unacceptable content: Korean healthcare.",
            "Non-family safe or adult content.",
            "Clinical trial recruitment.",
            "Maximum number of HTTP calls exceeded.",
            "Maximum number of cookies exceeded.",
            "Financial service ad does not adhere to specifications.",
            "Flash content was found in an unsupported context.",
            "Misuse by an Open Measurement SDK script.",
            "Use of an Open Measurement SDK vendor not on approved vendor list.",
            "Unacceptable landing page.",
            "Unsupported language.",
            "Non-SSL compliant.",
            "Temporary pausing of creative.",
            "Promotes services related to bail bonds.",
            "Promotes speculative and/or experimental medical treatments."
          ],
          "enum": [
            "LENGTH_OF_IMAGE_ANIMATION",
            "BROKEN_URL",
            "MEDIA_NOT_FUNCTIONAL",
            "INVALID_FOURTH_PARTY_CALL",
            "INCORRECT_REMARKETING_DECLARATION",
            "LANDING_PAGE_ERROR",
            "AD_SIZE_DOES_NOT_MATCH_AD_SLOT",
            "NO_BORDER",
            "FOURTH_PARTY_BROWSER_COOKIES",
            "LSO_OBJECTS",
            "BLANK_CREATIVE",
            "DESTINATION_URLS_UNDECLARED",
            "PROBLEM_WITH_CLICK_MACRO",
            "INCORRECT_AD_TECHNOLOGY_DECLARATION",
            "INCORRECT_DESTINATION_URL_DECLARATION",
            "EXPANDABLE_INCORRECT_DIRECTION",
            "EXPANDABLE_DIRECTION_NOT_SUPPORTED",
            "EXPANDABLE_INVALID_VENDOR",
            "EXPANDABLE_FUNCTIONALITY",
            "VIDEO_INVALID_VENDOR",
            "VIDEO_UNSUPPORTED_LENGTH",
            "VIDEO_UNSUPPORTED_FORMAT",
            "VIDEO_FUNCTIONALITY",
            "LANDING_PAGE_DISABLED",
            "MALWARE_SUSPECTED",
            "ADULT_IMAGE_OR_VIDEO",
            "INACCURATE_AD_TEXT",
            "COUNTERFEIT_DESIGNER_GOODS",
            "POP_UP",
            "INVALID_RTB_PROTOCOL_USAGE",
            "RAW_IP_ADDRESS_IN_SNIPPET",
            "UNACCEPTABLE_CONTENT_SOFTWARE",
            "UNAUTHORIZED_COOKIE_ON_GOOGLE_DOMAIN",
            "UNDECLARED_FLASH_OBJECTS",
            "INVALID_SSL_DECLARATION",
            "DIRECT_DOWNLOAD_IN_AD",
            "MAXIMUM_DOWNLOAD_SIZE_EXCEEDED",
            "DESTINATION_URL_SITE_NOT_CRAWLABLE",
            "BAD_URL_LEGAL_DISAPPROVAL",
            "PHARMA_GAMBLING_ALCOHOL_NOT_ALLOWED",
            "DYNAMIC_DNS_AT_DESTINATION_URL",
            "POOR_IMAGE_OR_VIDEO_QUALITY",
            "UNACCEPTABLE_IMAGE_CONTENT",
            "INCORRECT_IMAGE_LAYOUT",
            "IRRELEVANT_IMAGE_OR_VIDEO",
            "DESTINATION_SITE_DOES_NOT_ALLOW_GOING_BACK",
            "MISLEADING_CLAIMS_IN_AD",
            "RESTRICTED_PRODUCTS",
            "UNACCEPTABLE_CONTENT",
            "AUTOMATED_AD_CLICKING",
            "INVALID_URL_PROTOCOL",
            "UNDECLARED_RESTRICTED_CONTENT",
            "INVALID_REMARKETING_LIST_USAGE",
            "DESTINATION_SITE_NOT_CRAWLABLE_ROBOTS_TXT",
            "CLICK_TO_DOWNLOAD_NOT_AN_APP",
            "INACCURATE_REVIEW_EXTENSION",
            "SEXUALLY_EXPLICIT_CONTENT",
            "GAINING_AN_UNFAIR_ADVANTAGE",
            "GAMING_THE_GOOGLE_NETWORK",
            "DANGEROUS_PRODUCTS_KNIVES",
            "DANGEROUS_PRODUCTS_EXPLOSIVES",
            "DANGEROUS_PRODUCTS_GUNS",
            "DANGEROUS_PRODUCTS_DRUGS",
            "DANGEROUS_PRODUCTS_TOBACCO",
            "DANGEROUS_PRODUCTS_WEAPONS",
            "UNCLEAR_OR_IRRELEVANT_AD",
            "PROFESSIONAL_STANDARDS",
            "DYSFUNCTIONAL_PROMOTION",
            "INVALID_INTEREST_BASED_AD",
            "MISUSE_OF_PERSONAL_INFORMATION",
            "OMISSION_OF_RELEVANT_INFORMATION",
            "UNAVAILABLE_PROMOTIONS",
            "MISLEADING_PROMOTIONS",
            "INAPPROPRIATE_CONTENT",
            "SENSITIVE_EVENTS",
            "SHOCKING_CONTENT",
            "ENABLING_DISHONEST_BEHAVIOR",
            "TECHNICAL_REQUIREMENTS",
            "RESTRICTED_POLITICAL_CONTENT",
            "UNSUPPORTED_CONTENT",
            "INVALID_BIDDING_METHOD",
            "VIDEO_TOO_LONG",
            "VIOLATES_JAPANESE_PHARMACY_LAW",
            "UNACCREDITED_PET_PHARMACY",
            "ABORTION",
            "CONTRACEPTIVES",
            "NEED_CERTIFICATES_TO_ADVERTISE_IN_CHINA",
            "KCDSP_REGISTRATION",
            "NOT_FAMILY_SAFE",
            "CLINICAL_TRIAL_RECRUITMENT",
            "MAXIMUM_NUMBER_OF_HTTP_CALLS_EXCEEDED",
            "MAXIMUM_NUMBER_OF_COOKIES_EXCEEDED",
            "PERSONAL_LOANS",
            "UNSUPPORTED_FLASH_CONTENT",
            "MISUSE_BY_OMID_SCRIPT",
            "NON_WHITELISTED_OMID_VENDOR",
            "DESTINATION_EXPERIENCE",
            "UNSUPPORTED_LANGUAGE",
            "NON_SSL_COMPLIANT",
            "TEMPORARY_PAUSE",
            "BAIL_BONDS",
            "EXPERIMENTAL_MEDICAL_TREATMENT"
          ],
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional details about the reason for disapproval."
        }
      },
      "description": "Output only. The reason and details for a disapproval.",
      "id": "Disapproval"
    },
    "ListFilteredBidsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListFilteredBidsRequest.pageToken field in the subsequent call to the filteredBids.list method to retrieve the next page of results."
        },
        "creativeStatusRows": {
          "type": "array",
          "items": {
            "$ref": "CreativeStatusRow"
          },
          "description": "List of rows, with counts of filtered bids aggregated by filtering reason (for example, creative status)."
        }
      },
      "id": "ListFilteredBidsResponse",
      "description": "Response message for listing all reasons that bids were filtered from the auction.",
      "type": "object"
    },
    "ContactInformation": {
      "description": "Contains information on how a buyer or seller can be reached.",
      "properties": {
        "email": {
          "description": "Email address for the contact.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the contact."
        }
      },
      "id": "ContactInformation",
      "type": "object"
    },
    "UrlTargeting": {
      "type": "object",
      "properties": {
        "excludedUrls": {
          "items": {
            "type": "string"
          },
          "description": "A list of URLs to be excluded.",
          "type": "array"
        },
        "targetedUrls": {
          "type": "array",
          "description": "A list of URLs to be included.",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "UrlTargeting",
      "description": "Represents a list of targeted and excluded URLs (for example, google.com). For Private Auction and AdX Preferred Deals, URLs are either included or excluded. For Programmatic Guaranteed and Preferred Deals, this doesn't apply."
    },
    "ListClientUsersResponse": {
      "id": "ListClientUsersResponse",
      "type": "object",
      "properties": {
        "users": {
          "description": "The returned list of client users.",
          "type": "array",
          "items": {
            "$ref": "ClientUser"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListClientUsersRequest.pageToken field in the subsequent call to the clients.invitations.list method to retrieve the next page of results."
        }
      }
    },
    "BidMetricsRow": {
      "description": "The set of metrics that are measured in numbers of bids, representing how many bids with the specified dimension values were considered eligible at each stage of the bidding funnel;",
      "id": "BidMetricsRow",
      "properties": {
        "measurableImpressions": {
          "$ref": "MetricValue",
          "description": "The number of bids for which the corresponding impression was measurable for viewability (as defined by Active View)."
        },
        "viewableImpressions": {
          "$ref": "MetricValue",
          "description": "The number of bids for which the corresponding impression was viewable (as defined by Active View)."
        },
        "bids": {
          "$ref": "MetricValue",
          "description": "The number of bids that Ad Exchange received from the buyer."
        },
        "rowDimensions": {
          "description": "The values of all dimensions associated with metric values in this row.",
          "$ref": "RowDimensions"
        },
        "billedImpressions": {
          "description": "The number of bids for which the buyer was billed. Also called valid impressions as invalid impressions are not billed.",
          "$ref": "MetricValue"
        },
        "reachedQueries": {
          "$ref": "MetricValue",
          "description": "The number of bids that won the auction and also won the mediation waterfall (if any)."
        },
        "impressionsWon": {
          "description": "The number of bids that won the auction.",
          "$ref": "MetricValue"
        },
        "bidsInAuction": {
          "$ref": "MetricValue",
          "description": "The number of bids that were permitted to compete in the auction."
        }
      },
      "type": "object"
    },
    "AdTechnologyProviders": {
      "id": "AdTechnologyProviders",
      "properties": {
        "detectedProviderIds": {
          "type": "array",
          "description": "The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If the creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the (Google bid protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto] and the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the (OpenRTB protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto], and a bid is submitted with that creative for an impression that will serve to an EEA user, the bid will be filtered before the auction.",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "hasUnidentifiedProvider": {
          "description": "Whether the creative contains an unidentified ad technology provider. If true for a given creative, any bid submitted with that creative for an impression that will serve to an EEA user will be filtered before the auction.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Detected ad technology provider information."
    },
    "ListCreativesResponse": {
      "description": "A response for listing creatives.",
      "type": "object",
      "properties": {
        "creatives": {
          "description": "The list of creatives.",
          "items": {
            "$ref": "Creative"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListCreativesRequest.page_token field in the subsequent call to `ListCreatives` method to retrieve the next page of results.",
          "type": "string"
        }
      },
      "id": "ListCreativesResponse"
    },
    "ClientUserInvitation": {
      "id": "ClientUserInvitation",
      "description": "An invitation for a new client user to get access to the Authorized Buyers UI. All fields are required unless otherwise specified.",
      "properties": {
        "email": {
          "description": "The email address to which the invitation is sent. Email addresses should be unique among all client users under each sponsor buyer.",
          "type": "string"
        },
        "clientAccountId": {
          "type": "string",
          "format": "int64",
          "description": "Numerical account ID of the client buyer that the invited user is associated with. The value of this field is ignored in create operations."
        },
        "invitationId": {
          "type": "string",
          "description": "The unique numerical ID of the invitation that is sent to the user. The value of this field is ignored in create operations.",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "Deal": {
      "id": "Deal",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "The name of the deal.",
          "type": "string"
        },
        "dealId": {
          "readOnly": true,
          "description": "Output only. A unique deal ID for the deal (server-assigned).",
          "type": "string"
        },
        "externalDealId": {
          "readOnly": true,
          "description": "Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc.",
          "type": "string"
        },
        "dealServingMetadata": {
          "readOnly": true,
          "description": "Output only. Metadata about the serving status of this deal.",
          "$ref": "DealServingMetadata"
        },
        "creativePreApprovalPolicy": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED",
            "SELLER_PRE_APPROVAL_REQUIRED",
            "SELLER_PRE_APPROVAL_NOT_REQUIRED"
          ],
          "description": "Output only. Specifies the creative pre-approval policy.",
          "enumDescriptions": [
            "A placeholder for an undefined creative pre-approval policy.",
            "The seller needs to approve each creative before it can serve.",
            "The seller does not need to approve each creative before it can serve."
          ]
        },
        "availableStartTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds."
        },
        "programmaticCreativeSource": {
          "readOnly": true,
          "enum": [
            "PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED",
            "ADVERTISER",
            "PUBLISHER"
          ],
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined programmatic creative source.",
            "The advertiser provides the creatives.",
            "The publisher provides the creatives to be served."
          ],
          "description": "Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer."
        },
        "creativeRestrictions": {
          "readOnly": true,
          "description": "Output only. Restricitions about the creatives associated with the deal (for example, size) This is available for Programmatic Guaranteed/Preferred Deals in Ad Manager.",
          "$ref": "CreativeRestrictions"
        },
        "deliveryControl": {
          "$ref": "DeliveryControl",
          "description": "The set of fields around delivery control that are interesting for a buyer to see but are non-negotiable. These are set by the publisher."
        },
        "createProductId": {
          "description": "The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.",
          "type": "string"
        },
        "creativeSafeFrameCompatibility": {
          "readOnly": true,
          "enum": [
            "CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED",
            "COMPATIBLE",
            "INCOMPATIBLE"
          ],
          "type": "string",
          "description": "Output only. Specifies whether the creative is safeFrame compatible.",
          "enumDescriptions": [
            "A placeholder for an undefined creative safe-frame compatibility.",
            "The creatives need to be compatible with the safe frame option.",
            "The creatives can be incompatible with the safe frame option."
          ]
        },
        "isSetupComplete": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. True, if the buyside inventory setup is complete for this deal."
        },
        "sellerContacts": {
          "type": "array",
          "items": {
            "$ref": "ContactInformation"
          },
          "description": "Output only. Seller contact information for the deal.",
          "readOnly": true
        },
        "updateTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time when the deal was last updated.",
          "type": "string"
        },
        "dealTerms": {
          "description": "The negotiable terms of the deal.",
          "$ref": "DealTerms"
        },
        "description": {
          "description": "Description for the deal terms.",
          "type": "string"
        },
        "syndicationProduct": {
          "enumDescriptions": [
            "A placeholder for an undefined syndication product.",
            "This typically represents a web page.",
            "This represents a mobile property.",
            "This represents video ad formats.",
            "This represents ads shown within games."
          ],
          "description": "The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.",
          "type": "string",
          "enum": [
            "SYNDICATION_PRODUCT_UNSPECIFIED",
            "CONTENT",
            "MOBILE",
            "VIDEO",
            "GAMES"
          ]
        },
        "createProductRevision": {
          "type": "string",
          "description": "Optional. Revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced since the passed-in `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.",
          "format": "int64"
        },
        "proposalId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ID of the proposal that this deal is part of."
        },
        "webPropertyCode": {
          "type": "string",
          "description": "The web property code for the seller copied over from the product."
        },
        "targetingCriterion": {
          "description": "The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together.",
          "type": "array",
          "items": {
            "$ref": "TargetingCriteria"
          }
        },
        "availableEndTime": {
          "description": "Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time of the deal creation."
        },
        "targeting": {
          "readOnly": true,
          "description": "Output only. Specifies the subset of inventory targeted by the deal.",
          "$ref": "MarketplaceTargeting"
        },
        "buyerPrivateData": {
          "$ref": "PrivateData",
          "description": "Buyer private data (hidden from seller)."
        }
      },
      "description": "A deal represents a segment of inventory for displaying ads on. A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving."
    },
    "Note": {
      "id": "Note",
      "description": "A proposal may be associated to several notes.",
      "properties": {
        "proposalRevision": {
          "description": "Output only. The revision number of the proposal when the note is created.",
          "format": "int64",
          "readOnly": true,
          "type": "string"
        },
        "note": {
          "description": "The actual note to attach. (max-length: 1024 unicode code units) Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The timestamp for when this note was created.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "noteId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The unique ID for the note."
        },
        "creatorRole": {
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ],
          "readOnly": true,
          "description": "Output only. The role of the person (buyer/seller) creating the note.",
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ]
        }
      },
      "type": "object"
    },
    "OperatingSystemTargeting": {
      "properties": {
        "operatingSystemVersionCriteria": {
          "description": "IDs of operating system versions to be included/excluded.",
          "$ref": "CriteriaTargeting"
        },
        "operatingSystemCriteria": {
          "$ref": "CriteriaTargeting",
          "description": "IDs of operating systems to be included/excluded."
        }
      },
      "type": "object",
      "id": "OperatingSystemTargeting",
      "description": "Represents targeting information for operating systems."
    },
    "MarketplaceTargeting": {
      "type": "object",
      "description": "Targeting represents different criteria that can be used by advertisers to target ad inventory. For example, they can choose to target ad requests only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.",
      "id": "MarketplaceTargeting",
      "properties": {
        "placementTargeting": {
          "description": "Placement targeting information, for example, URL, mobile applications.",
          "$ref": "PlacementTargeting"
        },
        "geoTargeting": {
          "description": "Geo criteria IDs to be included/excluded.",
          "$ref": "CriteriaTargeting"
        },
        "videoTargeting": {
          "description": "Video targeting information.",
          "$ref": "VideoTargeting"
        },
        "inventorySizeTargeting": {
          "$ref": "InventorySizeTargeting",
          "description": "Inventory sizes to be included/excluded."
        },
        "technologyTargeting": {
          "description": "Technology targeting information, for example, operating system, device category.",
          "$ref": "TechnologyTargeting"
        }
      }
    },
    "PrivateData": {
      "type": "object",
      "properties": {
        "referenceId": {
          "type": "string",
          "description": "A buyer or seller specified reference ID. This can be queried in the list operations (max-length: 1024 unicode code units)."
        }
      },
      "description": "Buyers are allowed to store certain types of private data in a proposal/deal.",
      "id": "PrivateData"
    },
    "DayPart": {
      "description": "Daypart targeting message that specifies if the ad can be shown only during certain parts of a day/week.",
      "id": "DayPart",
      "properties": {
        "startTime": {
          "$ref": "TimeOfDay",
          "description": "The starting time of day for the ad to show (minute level granularity). The start time is inclusive. This field is not available for filtering in PQL queries."
        },
        "dayOfWeek": {
          "description": "The day of the week to target. If unspecified, applicable to all days.",
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ],
          "enumDescriptions": [
            "A placeholder for when the day of the week is not specified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "type": "string"
        },
        "endTime": {
          "description": "The ending time of the day for the ad to show (minute level granularity). The end time is exclusive. This field is not available for filtering in PQL queries.",
          "$ref": "TimeOfDay"
        }
      },
      "type": "object"
    },
    "ListProposalsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Continuation token for fetching the next page of results.",
          "type": "string"
        },
        "proposals": {
          "description": "The list of proposals.",
          "items": {
            "$ref": "Proposal"
          },
          "type": "array"
        }
      },
      "id": "ListProposalsResponse",
      "description": "Response message for listing proposals.",
      "type": "object"
    },
    "AppContext": {
      "id": "AppContext",
      "description": "Output only. The app type the restriction applies to for mobile device.",
      "properties": {
        "appTypes": {
          "type": "array",
          "description": "The app types this restriction applies to.",
          "items": {
            "enum": [
              "NATIVE",
              "WEB"
            ],
            "type": "string",
            "enumDescriptions": [
              "Native app context.",
              "Mobile web app context."
            ]
          }
        }
      },
      "type": "object"
    },
    "SecurityContext": {
      "deprecated": true,
      "id": "SecurityContext",
      "properties": {
        "securities": {
          "description": "The security types in this context.",
          "items": {
            "enum": [
              "INSECURE",
              "SSL"
            ],
            "enumDescriptions": [
              "Matches impressions that require insecure compatibility.",
              "Matches impressions that require SSL compatibility."
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "Output only. A security context.",
      "type": "object"
    },
    "ListCreativeStatusBreakdownByDetailResponse": {
      "properties": {
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListCreativeStatusBreakdownByDetailRequest.pageToken field in the subsequent call to the filteredBids.details.list method to retrieve the next page of results.",
          "type": "string"
        },
        "filteredBidDetailRows": {
          "type": "array",
          "description": "List of rows, with counts of bids with a given creative status aggregated by detail.",
          "items": {
            "$ref": "FilteredBidDetailRow"
          }
        },
        "detailType": {
          "type": "string",
          "description": "The type of detail that the detail IDs represent.",
          "enumDescriptions": [
            "A placeholder for an undefined status. This value will never be returned in responses.",
            "Indicates that the detail ID refers to a creative attribute; see [publisher-excludable-creative-attributes](https://developers.google.com/authorized-buyers/rtb/downloads/publisher-excludable-creative-attributes).",
            "Indicates that the detail ID refers to a vendor; see [vendors](https://developers.google.com/authorized-buyers/rtb/downloads/vendors). This namespace is different from that of the `ATP_VENDOR` detail type.",
            "Indicates that the detail ID refers to a sensitive category; see [ad-sensitive-categories](https://developers.google.com/authorized-buyers/rtb/downloads/ad-sensitive-categories).",
            "Indicates that the detail ID refers to a product category; see [ad-product-categories](https://developers.google.com/authorized-buyers/rtb/downloads/ad-product-categories).",
            "Indicates that the detail ID refers to a disapproval reason; see DisapprovalReason enum in [snippet-status-report-proto](https://developers.google.com/authorized-buyers/rtb/downloads/snippet-status-report-proto).",
            "Indicates that the detail ID refers to a policy topic.",
            "Indicates that the detail ID refers to an ad technology provider (ATP); see [providers] (https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv). This namespace is different from the `VENDOR` detail type; see [ad technology providers](https://support.google.com/admanager/answer/9012903) for more information.",
            "Indicates that the detail string refers the domain of an unknown vendor.",
            "Indicates that the detail ID refers an IAB GVL ID which Google did not detect in the latest TCF Vendor List. See [Global Vendor List] (https://vendor-list.consensu.org/v2/vendor-list.json)"
          ],
          "enum": [
            "DETAIL_TYPE_UNSPECIFIED",
            "CREATIVE_ATTRIBUTE",
            "VENDOR",
            "SENSITIVE_CATEGORY",
            "PRODUCT_CATEGORY",
            "DISAPPROVAL_REASON",
            "POLICY_TOPIC",
            "ATP_VENDOR",
            "VENDOR_DOMAIN",
            "GVL_ID"
          ]
        }
      },
      "type": "object",
      "id": "ListCreativeStatusBreakdownByDetailResponse",
      "description": "Response message for listing all details associated with a given filtered bid reason."
    },
    "PlatformContext": {
      "id": "PlatformContext",
      "properties": {
        "platforms": {
          "type": "array",
          "description": "The platforms this restriction applies to.",
          "items": {
            "enum": [
              "DESKTOP",
              "ANDROID",
              "IOS"
            ],
            "enumDescriptions": [
              "Desktop platform.",
              "Android platform.",
              "iOS platform."
            ],
            "type": "string"
          }
        }
      },
      "description": "Output only. The type of platform the restriction applies to.",
      "type": "object"
    },
    "RealtimeTimeRange": {
      "properties": {
        "startTimestamp": {
          "description": "The start timestamp of the real-time RTB metrics aggregation.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "id": "RealtimeTimeRange",
      "type": "object",
      "description": "An open-ended realtime time range specified by the start timestamp. For filter sets that specify a realtime time range RTB metrics continue to be aggregated throughout the lifetime of the filter set."
    },
    "Size": {
      "id": "Size",
      "type": "object",
      "properties": {
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "The height of the creative."
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "The width of the creative"
        }
      },
      "description": "Message depicting the size of the creative. The units of width and height depend on the type of the targeting."
    },
    "WatchCreativeRequest": {
      "id": "WatchCreativeRequest",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The Pub/Sub topic to publish notifications to. This topic must already exist and must give permission to ad-exchange-buyside-reports@google.com to write to the topic. This should be the full resource name in \"projects/{project_id}/topics/{topic_id}\" format."
        }
      },
      "description": "A request for watching changes to creative Status.",
      "type": "object"
    },
    "AuctionContext": {
      "properties": {
        "auctionTypes": {
          "type": "array",
          "items": {
            "enum": [
              "OPEN_AUCTION",
              "DIRECT_DEALS"
            ],
            "enumDescriptions": [
              "The restriction applies to open auction.",
              "The restriction applies to direct deals."
            ],
            "type": "string"
          },
          "description": "The auction types this restriction applies to."
        }
      },
      "type": "object",
      "description": "Output only. The auction type the restriction applies to.",
      "id": "AuctionContext"
    },
    "Product": {
      "description": "A product is a segment of inventory that a seller wants to sell. It is associated with certain terms and targeting information which helps the buyer know more about the inventory.",
      "type": "object",
      "properties": {
        "productRevision": {
          "type": "string",
          "description": "The revision number of the product (auto-assigned by Marketplace).",
          "format": "int64"
        },
        "webPropertyCode": {
          "type": "string",
          "description": "The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal."
        },
        "targetingCriterion": {
          "items": {
            "$ref": "TargetingCriteria"
          },
          "type": "array",
          "description": "Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values."
        },
        "terms": {
          "$ref": "DealTerms",
          "description": "The negotiable terms of the deal."
        },
        "availableStartTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when serving."
        },
        "seller": {
          "$ref": "Seller",
          "description": "Information about the seller that created this product."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Creation time."
        },
        "syndicationProduct": {
          "enum": [
            "SYNDICATION_PRODUCT_UNSPECIFIED",
            "CONTENT",
            "MOBILE",
            "VIDEO",
            "GAMES"
          ],
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined syndication product.",
            "This typically represents a web page.",
            "This represents a mobile property.",
            "This represents video ad formats.",
            "This represents ads shown within games."
          ],
          "description": "The syndication product associated with the deal."
        },
        "creatorContacts": {
          "items": {
            "$ref": "ContactInformation"
          },
          "description": "Optional contact information for the creator of this product.",
          "type": "array"
        },
        "availableEndTime": {
          "description": "The proposed end time for the deal. The field will be truncated to the order of seconds during serving.",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "Time of last update.",
          "type": "string"
        },
        "productId": {
          "type": "string",
          "description": "The unique ID for the product."
        },
        "displayName": {
          "type": "string",
          "description": "The display name for this product as set by the seller."
        },
        "hasCreatorSignedOff": {
          "type": "boolean",
          "description": "If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false."
        },
        "publisherProfileId": {
          "description": "An ID which can be used by the Publisher Profile API to get more information about the seller that created this product.",
          "type": "string"
        }
      },
      "id": "Product"
    },
    "ListClientsResponse": {
      "properties": {
        "clients": {
          "type": "array",
          "description": "The returned list of clients.",
          "items": {
            "$ref": "Client"
          }
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListClientsRequest.pageToken field in the subsequent call to the accounts.clients.list method to retrieve the next page of results.",
          "type": "string"
        }
      },
      "id": "ListClientsResponse",
      "type": "object"
    },
    "ListFilteredBidRequestsResponse": {
      "type": "object",
      "properties": {
        "calloutStatusRows": {
          "items": {
            "$ref": "CalloutStatusRow"
          },
          "type": "array",
          "description": "List of rows, with counts of filtered bid requests aggregated by callout status."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListFilteredBidRequestsRequest.pageToken field in the subsequent call to the filteredBidRequests.list method to retrieve the next page of results."
        }
      },
      "id": "ListFilteredBidRequestsResponse",
      "description": "Response message for listing all reasons that bid requests were filtered and not sent to the buyer."
    },
    "Proposal": {
      "description": "Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Note: You can't update, create, or otherwise modify Private Auction deals through the API. Fields are updatable unless noted otherwise.",
      "id": "Proposal",
      "properties": {
        "originatorRole": {
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ],
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ],
          "description": "Output only. Indicates whether the buyer/seller created the proposal."
        },
        "privateAuctionId": {
          "description": "Output only. Private auction ID if this proposal is a private auction proposal.",
          "readOnly": true,
          "type": "string"
        },
        "sellerContacts": {
          "description": "Output only. Contact information for the seller.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "ContactInformation"
          }
        },
        "deals": {
          "type": "array",
          "description": "The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.",
          "items": {
            "$ref": "Deal"
          }
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time when the proposal was last revised.",
          "readOnly": true
        },
        "isSetupComplete": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. True, if the buyside inventory setup is complete for this proposal.",
          "deprecated": true
        },
        "proposalId": {
          "description": "Output only. The unique ID of the proposal.",
          "type": "string",
          "readOnly": true
        },
        "billedBuyer": {
          "$ref": "Buyer",
          "readOnly": true,
          "description": "Output only. Reference to the buyer that will get billed for this proposal."
        },
        "proposalState": {
          "enum": [
            "PROPOSAL_STATE_UNSPECIFIED",
            "PROPOSED",
            "BUYER_ACCEPTED",
            "SELLER_ACCEPTED",
            "CANCELED",
            "FINALIZED"
          ],
          "description": "Output only. The current state of the proposal.",
          "enumDescriptions": [
            "A placeholder for an undefined proposal state.",
            "The proposal is under negotiation or renegotiation.",
            "The proposal has been accepted by the buyer.",
            "The proposal has been accepted by the seller.",
            "The negotiations on the proposal were canceled and the proposal was never finalized.",
            "The proposal is finalized. During renegotiation, the proposal may not be in this state."
          ],
          "readOnly": true,
          "type": "string"
        },
        "isRenegotiating": {
          "type": "boolean",
          "description": "Output only. True if the proposal is being renegotiated.",
          "readOnly": true
        },
        "buyerPrivateData": {
          "description": "Private data for buyer. (hidden from seller).",
          "$ref": "PrivateData"
        },
        "termsAndConditions": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The terms and conditions set by the publisher for this proposal."
        },
        "seller": {
          "$ref": "Seller",
          "description": "Reference to the seller on the proposal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error."
        },
        "displayName": {
          "description": "The name for the proposal.",
          "type": "string"
        },
        "lastUpdaterOrCommentorRole": {
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ],
          "type": "string",
          "readOnly": true,
          "description": "Output only. The role of the last user that either updated the proposal or left a comment.",
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ]
        },
        "buyer": {
          "description": "Reference to the buyer on the proposal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.",
          "$ref": "Buyer"
        },
        "proposalRevision": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.",
          "format": "int64"
        },
        "buyerContacts": {
          "type": "array",
          "description": "Contact information for the buyer.",
          "items": {
            "$ref": "ContactInformation"
          }
        },
        "notes": {
          "description": "Output only. The notes associated with this proposal.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "Note"
          }
        }
      },
      "type": "object"
    },
    "ListBidMetricsResponse": {
      "id": "ListBidMetricsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListBidMetricsRequest.pageToken field in the subsequent call to the bidMetrics.list method to retrieve the next page of results.",
          "type": "string"
        },
        "bidMetricsRows": {
          "description": "List of rows, each containing a set of bid metrics.",
          "type": "array",
          "items": {
            "$ref": "BidMetricsRow"
          }
        }
      },
      "description": "Response message for listing the metrics that are measured in number of bids."
    },
    "DeliveryControl": {
      "type": "object",
      "properties": {
        "deliveryRateType": {
          "description": "Output only. Specifies how the impression delivery will be paced.",
          "readOnly": true,
          "enumDescriptions": [
            "A placeholder for an undefined delivery rate type.",
            "Impressions are served uniformly over the life of the deal.",
            "Impressions are served front-loaded.",
            "Impressions are served as fast as possible."
          ],
          "enum": [
            "DELIVERY_RATE_TYPE_UNSPECIFIED",
            "EVENLY",
            "FRONT_LOADED",
            "AS_FAST_AS_POSSIBLE"
          ],
          "type": "string"
        },
        "creativeBlockingLevel": {
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined creative blocking level.",
            "Publisher blocking rules will be applied.",
            "The Ad Exchange policy blocking rules will be applied."
          ],
          "enum": [
            "CREATIVE_BLOCKING_LEVEL_UNSPECIFIED",
            "PUBLISHER_BLOCKING_RULES",
            "ADX_POLICY_BLOCKING_ONLY"
          ],
          "description": "Output only. Specified the creative blocking levels to be applied.",
          "readOnly": true
        },
        "frequencyCaps": {
          "description": "Output only. Specifies any frequency caps.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "FrequencyCap"
          }
        }
      },
      "id": "DeliveryControl",
      "description": "Message contains details about how the deals will be paced."
    },
    "AddNoteRequest": {
      "id": "AddNoteRequest",
      "type": "object",
      "properties": {
        "note": {
          "description": "Details of the note to add.",
          "$ref": "Note"
        }
      },
      "description": "Request message for adding a note to a given proposal."
    },
    "ListNonBillableWinningBidsResponse": {
      "id": "ListNonBillableWinningBidsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListNonBillableWinningBidsRequest.pageToken field in the subsequent call to the nonBillableWinningBids.list method to retrieve the next page of results."
        },
        "nonBillableWinningBidStatusRows": {
          "description": "List of rows, with counts of bids not billed aggregated by reason.",
          "items": {
            "$ref": "NonBillableWinningBidStatusRow"
          },
          "type": "array"
        }
      },
      "description": "Response message for listing all reasons for which a buyer was not billed for a winning bid."
    },
    "LocationContext": {
      "description": "Output only. The Geo criteria the restriction applies to.",
      "properties": {
        "geoCriteriaIds": {
          "description": "IDs representing the geo location for this context. Refer to the [geo-table.csv](https://storage.googleapis.com/adx-rtb-dictionaries/geo-table.csv) file for different geo criteria IDs.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "id": "LocationContext",
      "type": "object"
    },
    "ListImpressionMetricsResponse": {
      "type": "object",
      "properties": {
        "impressionMetricsRows": {
          "type": "array",
          "description": "List of rows, each containing a set of impression metrics.",
          "items": {
            "$ref": "ImpressionMetricsRow"
          }
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListImpressionMetricsRequest.pageToken field in the subsequent call to the impressionMetrics.list method to retrieve the next page of results.",
          "type": "string"
        }
      },
      "description": "Response message for listing the metrics that are measured in number of impressions.",
      "id": "ListImpressionMetricsResponse"
    },
    "PauseProposalRequest": {
      "type": "object",
      "description": "Request message to pause serving for an already-finalized proposal.",
      "properties": {
        "reason": {
          "type": "string",
          "description": "The reason why the proposal is being paused. This human readable message will be displayed in the seller's UI. (Max length: 1000 unicode code units.)"
        }
      },
      "id": "PauseProposalRequest"
    },
    "TimeInterval": {
      "properties": {
        "startTime": {
          "description": "The timestamp marking the start of the range (inclusive) for which data is included.",
          "format": "google-datetime",
          "type": "string"
        },
        "endTime": {
          "description": "The timestamp marking the end of the range (exclusive) for which data is included.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "An interval of time, with an absolute start and end.",
      "type": "object",
      "id": "TimeInterval"
    },
    "PlacementTargeting": {
      "properties": {
        "mobileApplicationTargeting": {
          "description": "Mobile application targeting information in a deal. This doesn't apply to Auction Packages.",
          "$ref": "MobileApplicationTargeting"
        },
        "urlTargeting": {
          "description": "URLs to be included/excluded.",
          "$ref": "UrlTargeting"
        }
      },
      "type": "object",
      "description": "Represents targeting about where the ads can appear, for example, certain sites or mobile applications. Different placement targeting types will be logically OR'ed.",
      "id": "PlacementTargeting"
    },
    "PublisherProfileMobileApplication": {
      "description": "A mobile application that contains a external app ID, name, and app store.",
      "type": "object",
      "id": "PublisherProfileMobileApplication",
      "properties": {
        "appStore": {
          "enumDescriptions": [
            "A placeholder for an unknown app store.",
            "Apple iTunes",
            "Google Play",
            "Roku",
            "Amazon Fire TV",
            "Playstation",
            "Xbox",
            "Samsung TV",
            "Amazon Appstore",
            "OPPO App Market",
            "Samsung Galaxy Store",
            "VIVO App Store",
            "Xiaomi GetApps"
          ],
          "description": "The app store the app belongs to.",
          "enum": [
            "APP_STORE_TYPE_UNSPECIFIED",
            "APPLE_ITUNES",
            "GOOGLE_PLAY",
            "ROKU",
            "AMAZON_FIRETV",
            "PLAYSTATION",
            "XBOX",
            "SAMSUNG_TV",
            "AMAZON",
            "OPPO",
            "SAMSUNG",
            "VIVO",
            "XIAOMI"
          ],
          "type": "string"
        },
        "externalAppId": {
          "description": "The external ID for the app from its app store.",
          "type": "string"
        },
        "name": {
          "description": "The name of the app.",
          "type": "string"
        }
      }
    },
    "CreativeStatusRow": {
      "id": "CreativeStatusRow",
      "properties": {
        "creativeStatusId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the creative status. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes)."
        },
        "rowDimensions": {
          "$ref": "RowDimensions",
          "description": "The values of all dimensions associated with metric values in this row."
        },
        "bidCount": {
          "description": "The number of bids with the specified status.",
          "$ref": "MetricValue"
        }
      },
      "description": "The number of bids with the specified dimension values that did not win the auction (either were filtered pre-auction or lost the auction), as described by the specified creative status.",
      "type": "object"
    },
    "VideoTargeting": {
      "description": "Represents targeting information about video.",
      "type": "object",
      "id": "VideoTargeting",
      "properties": {
        "excludedPositionTypes": {
          "type": "array",
          "items": {
            "enum": [
              "POSITION_TYPE_UNSPECIFIED",
              "PREROLL",
              "MIDROLL",
              "POSTROLL"
            ],
            "enumDescriptions": [
              "A placeholder for an undefined video position.",
              "Ad is played before the video.",
              "Ad is played during the video.",
              "Ad is played after the video."
            ],
            "type": "string"
          },
          "description": "A list of video positions to be excluded. Position types can either be included or excluded (XOR)."
        },
        "targetedPositionTypes": {
          "items": {
            "type": "string",
            "enumDescriptions": [
              "A placeholder for an undefined video position.",
              "Ad is played before the video.",
              "Ad is played during the video.",
              "Ad is played after the video."
            ],
            "enum": [
              "POSITION_TYPE_UNSPECIFIED",
              "PREROLL",
              "MIDROLL",
              "POSTROLL"
            ]
          },
          "type": "array",
          "description": "A list of video positions to be included. When the included list is present, the excluded list must be empty. When the excluded list is present, the included list must be empty."
        }
      }
    },
    "ServingRestriction": {
      "id": "ServingRestriction",
      "type": "object",
      "description": "Output only. A representation of the status of an ad in a specific context. A context here relates to where something ultimately serves (for example, a user or publisher geo, a platform, an HTTPS versus HTTP request, or the type of auction).",
      "properties": {
        "disapprovalReasons": {
          "description": "Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.",
          "type": "array",
          "items": {
            "$ref": "Disapproval"
          },
          "deprecated": true
        },
        "status": {
          "type": "string",
          "enum": [
            "STATUS_UNSPECIFIED",
            "DISAPPROVAL",
            "PENDING_REVIEW"
          ],
          "description": "The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).",
          "enumDescriptions": [
            "The status is not known.",
            "The ad was disapproved in this context.",
            "The ad is pending review in this context."
          ]
        },
        "disapproval": {
          "$ref": "Disapproval",
          "description": "Disapproval bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method."
        },
        "contexts": {
          "description": "The contexts for the restriction.",
          "items": {
            "$ref": "ServingContext"
          },
          "type": "array"
        }
      }
    },
    "GuaranteedFixedPriceTerms": {
      "type": "object",
      "properties": {
        "guaranteedLooks": {
          "format": "int64",
          "description": "Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.",
          "type": "string"
        },
        "reservationType": {
          "type": "string",
          "enum": [
            "RESERVATION_TYPE_UNSPECIFIED",
            "STANDARD",
            "SPONSORSHIP"
          ],
          "enumDescriptions": [
            "An unspecified reservation type.",
            "Non-sponsorship deal.",
            "Sponsorship deals don't have impression goal (guaranteed_looks) and they are served based on the flight dates. For CPM Sponsorship deals, impression_cap is the lifetime impression limit."
          ],
          "description": "The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD."
        },
        "impressionCap": {
          "type": "string",
          "format": "int64",
          "description": "The lifetime impression cap for CPM sponsorship deals. The deal will stop serving when the cap is reached."
        },
        "fixedPrices": {
          "items": {
            "$ref": "PricePerBuyer"
          },
          "type": "array",
          "description": "Fixed price for the specified buyer."
        },
        "guaranteedImpressions": {
          "format": "int64",
          "description": "Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.",
          "type": "string"
        },
        "minimumDailyLooks": {
          "description": "Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.",
          "format": "int64",
          "type": "string"
        },
        "percentShareOfVoice": {
          "description": "For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "GuaranteedFixedPriceTerms",
      "description": "Terms for Programmatic Guaranteed Deals."
    },
    "PricePerBuyer": {
      "type": "object",
      "description": "Used to specify pricing rules for buyers/advertisers. Each PricePerBuyer in a product can become 0 or 1 deals. To check if there is a PricePerBuyer for a particular buyer or buyer/advertiser pair, we look for the most specific matching rule - we first look for a rule matching the buyer and advertiser, next a rule with the buyer but an empty advertiser list, and otherwise look for a matching rule where no buyer is set.",
      "properties": {
        "price": {
          "description": "The specified price.",
          "$ref": "Price"
        },
        "buyer": {
          "description": "The buyer who will pay this price. If unset, all buyers can pay this price (if the advertisers match, and there's no more specific rule matching the buyer).",
          "$ref": "Buyer"
        },
        "advertiserIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of advertisers for this price when associated with this buyer. If empty, all advertisers with this buyer pay this price."
        }
      },
      "id": "PricePerBuyer"
    },
    "ListBidResponseErrorsResponse": {
      "type": "object",
      "description": "Response message for listing all reasons that bid responses resulted in an error.",
      "id": "ListBidResponseErrorsResponse",
      "properties": {
        "calloutStatusRows": {
          "description": "List of rows, with counts of bid responses aggregated by callout status.",
          "type": "array",
          "items": {
            "$ref": "CalloutStatusRow"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListBidResponseErrorsRequest.pageToken field in the subsequent call to the bidResponseErrors.list method to retrieve the next page of results."
        }
      }
    },
    "ClientUser": {
      "properties": {
        "status": {
          "enumDescriptions": [
            "A placeholder for an undefined user status.",
            "A user who was already created but hasn't accepted the invitation yet.",
            "A user that is currently active.",
            "A user that is currently disabled."
          ],
          "description": "The status of the client user.",
          "type": "string",
          "enum": [
            "USER_STATUS_UNSPECIFIED",
            "PENDING",
            "ACTIVE",
            "DISABLED"
          ]
        },
        "clientAccountId": {
          "type": "string",
          "format": "int64",
          "description": "Numerical account ID of the client buyer with which the user is associated; the buyer must be a client of the current sponsor buyer. The value of this field is ignored in an update operation."
        },
        "userId": {
          "description": "The unique numerical ID of the client user that has accepted an invitation. The value of this field is ignored in an update operation.",
          "type": "string",
          "format": "int64"
        },
        "email": {
          "description": "User's email address. The value of this field is ignored in an update operation.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A client user is created under a client buyer and has restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the associated client buyer. The only way a new client user can be created is through accepting an email invitation (see the accounts.clients.invitations.create method). All fields are required unless otherwise specified.",
      "id": "ClientUser"
    },
    "RemoveDealAssociationRequest": {
      "id": "RemoveDealAssociationRequest",
      "type": "object",
      "description": "A request for removing the association between a deal and a creative.",
      "properties": {
        "association": {
          "$ref": "CreativeDealAssociation",
          "description": "The association between a creative and a deal that should be removed."
        }
      }
    },
    "DayPartTargeting": {
      "properties": {
        "timeZoneType": {
          "enum": [
            "TIME_ZONE_SOURCE_UNSPECIFIED",
            "PUBLISHER",
            "USER"
          ],
          "type": "string",
          "description": "The timezone to use for interpreting the day part targeting.",
          "enumDescriptions": [
            "A placeholder for an undefined time zone source.",
            "Use publisher's time zone setting.",
            "Use the user's time zone setting."
          ]
        },
        "dayParts": {
          "items": {
            "$ref": "DayPart"
          },
          "type": "array",
          "description": "A list of day part targeting criterion."
        }
      },
      "description": "Specifies the day part targeting criteria.",
      "id": "DayPartTargeting",
      "type": "object"
    },
    "ListLosingBidsResponse": {
      "description": "Response message for listing all reasons that bids lost in the auction.",
      "type": "object",
      "properties": {
        "creativeStatusRows": {
          "type": "array",
          "description": "List of rows, with counts of losing bids aggregated by loss reason (for example, creative status).",
          "items": {
            "$ref": "CreativeStatusRow"
          }
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListLosingBidsRequest.pageToken field in the subsequent call to the losingBids.list method to retrieve the next page of results.",
          "type": "string"
        }
      },
      "id": "ListLosingBidsResponse"
    },
    "AddDealAssociationRequest": {
      "type": "object",
      "id": "AddDealAssociationRequest",
      "description": "A request for associating a deal and a creative.",
      "properties": {
        "association": {
          "description": "The association between a creative and a deal that should be added.",
          "$ref": "CreativeDealAssociation"
        }
      }
    },
    "Price": {
      "properties": {
        "pricingType": {
          "type": "string",
          "enum": [
            "PRICING_TYPE_UNSPECIFIED",
            "COST_PER_MILLE",
            "COST_PER_DAY"
          ],
          "description": "The pricing type for the deal/product. (default: CPM)",
          "enumDescriptions": [
            "A placeholder for an undefined pricing type. If the pricing type is unpsecified, `COST_PER_MILLE` will be used instead.",
            "Cost per thousand impressions.",
            "Cost per day"
          ]
        },
        "amount": {
          "description": "The actual price with currency specified.",
          "$ref": "Money"
        }
      },
      "type": "object",
      "id": "Price",
      "description": "Represents a price and a pricing type for a product / deal."
    },
    "DealPauseStatus": {
      "id": "DealPauseStatus",
      "type": "object",
      "description": "Tracks which parties (if any) have paused a deal. The deal is considered paused if either hasBuyerPaused or hasSellPaused is true.",
      "properties": {
        "buyerPauseReason": {
          "description": "The buyer's reason for pausing, if the buyer paused the deal.",
          "type": "string"
        },
        "sellerPauseReason": {
          "type": "string",
          "description": "The seller's reason for pausing, if the seller paused the deal."
        },
        "firstPausedBy": {
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ],
          "type": "string",
          "description": "The role of the person who first paused this deal.",
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ]
        },
        "hasSellerPaused": {
          "type": "boolean",
          "description": "True, if the seller has paused the deal unilaterally."
        },
        "hasBuyerPaused": {
          "type": "boolean",
          "description": "True, if the buyer has paused the deal unilaterally."
        }
      }
    },
    "MobileApplicationTargeting": {
      "type": "object",
      "description": "Mobile application targeting settings.",
      "id": "MobileApplicationTargeting",
      "properties": {
        "firstPartyTargeting": {
          "description": "Publisher owned apps to be targeted or excluded by the publisher to display the ads in.",
          "$ref": "FirstPartyMobileApplicationTargeting"
        }
      }
    },
    "CriteriaTargeting": {
      "properties": {
        "targetedCriteriaIds": {
          "description": "A list of numeric IDs to be included.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "excludedCriteriaIds": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array",
          "description": "A list of numeric IDs to be excluded."
        }
      },
      "id": "CriteriaTargeting",
      "type": "object",
      "description": "Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs."
    },
    "NonGuaranteedFixedPriceTerms": {
      "type": "object",
      "properties": {
        "fixedPrices": {
          "items": {
            "$ref": "PricePerBuyer"
          },
          "type": "array",
          "description": "Fixed price for the specified buyer."
        }
      },
      "id": "NonGuaranteedFixedPriceTerms",
      "description": "Terms for Preferred Deals."
    },
    "ListPublisherProfilesResponse": {
      "description": "Response message for profiles visible to the buyer.",
      "type": "object",
      "id": "ListPublisherProfilesResponse",
      "properties": {
        "publisherProfiles": {
          "description": "The list of matching publisher profiles.",
          "items": {
            "$ref": "PublisherProfile"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "List pagination support",
          "type": "string"
        }
      }
    },
    "TargetingValue": {
      "type": "object",
      "description": "A polymorphic targeting value used as part of Shared Targeting.",
      "properties": {
        "creativeSizeValue": {
          "description": "The creative size value to include/exclude. Filled in when key = GOOG_CREATIVE_SIZE",
          "$ref": "CreativeSize"
        },
        "stringValue": {
          "description": "The string value to include/exclude.",
          "type": "string"
        },
        "dayPartTargetingValue": {
          "$ref": "DayPartTargeting",
          "description": "The daypart targeting to include / exclude. Filled in when the key is GOOG_DAYPART_TARGETING. The definition of this targeting is derived from the structure used by Ad Manager."
        },
        "longValue": {
          "format": "int64",
          "type": "string",
          "description": "The long value to include/exclude."
        }
      },
      "id": "TargetingValue"
    },
    "ListCreativeStatusBreakdownByCreativeResponse": {
      "description": "Response message for listing all creatives associated with a given filtered bid reason.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListCreativeStatusBreakdownByCreativeRequest.pageToken field in the subsequent call to the filteredBids.creatives.list method to retrieve the next page of results."
        },
        "filteredBidCreativeRows": {
          "items": {
            "$ref": "FilteredBidCreativeRow"
          },
          "type": "array",
          "description": "List of rows, with counts of bids with a given creative status aggregated by creative."
        }
      },
      "id": "ListCreativeStatusBreakdownByCreativeResponse",
      "type": "object"
    },
    "HtmlContent": {
      "properties": {
        "height": {
          "description": "The height of the HTML snippet in pixels.",
          "format": "int32",
          "type": "integer"
        },
        "snippet": {
          "description": "The HTML snippet that displays the ad when inserted in the web page.",
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "The width of the HTML snippet in pixels."
        }
      },
      "type": "object",
      "id": "HtmlContent",
      "description": "HTML content for a creative."
    },
    "ResumeProposalRequest": {
      "type": "object",
      "description": "Request message to resume (unpause) serving for an already-finalized proposal.",
      "id": "ResumeProposalRequest",
      "properties": {}
    },
    "CreativeDealAssociation": {
      "description": "The association between a creative and a deal.",
      "id": "CreativeDealAssociation",
      "properties": {
        "dealsId": {
          "type": "string",
          "description": "The externalDealId for the deal associated with the creative."
        },
        "accountId": {
          "description": "The account the creative belongs to.",
          "type": "string"
        },
        "creativeId": {
          "type": "string",
          "description": "The ID of the creative associated with the deal."
        }
      },
      "type": "object"
    },
    "InventorySizeTargeting": {
      "description": "Represents the size of an ad unit that can be targeted on an ad request. It only applies to Private Auction, AdX Preferred Deals and Auction Packages. This targeting does not apply to Programmatic Guaranteed and Preferred Deals in Ad Manager.",
      "id": "InventorySizeTargeting",
      "type": "object",
      "properties": {
        "targetedInventorySizes": {
          "description": "A list of inventory sizes to be included.",
          "items": {
            "$ref": "AdSize"
          },
          "type": "array"
        },
        "excludedInventorySizes": {
          "description": "A list of inventory sizes to be excluded.",
          "type": "array",
          "items": {
            "$ref": "AdSize"
          }
        }
      }
    },
    "Date": {
      "id": "Date",
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
      "properties": {
        "month": {
          "type": "integer",
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "format": "int32"
        },
        "day": {
          "format": "int32",
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListBidResponsesWithoutBidsResponse": {
      "properties": {
        "bidResponseWithoutBidsStatusRows": {
          "type": "array",
          "items": {
            "$ref": "BidResponseWithoutBidsStatusRow"
          },
          "description": "List of rows, with counts of bid responses without bids aggregated by status."
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListBidResponsesWithoutBidsRequest.pageToken field in the subsequent call to the bidResponsesWithoutBids.list method to retrieve the next page of results.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListBidResponsesWithoutBidsResponse",
      "description": "Response message for listing all reasons that bid responses were considered to have no applicable bids."
    },
    "ListDealAssociationsResponse": {
      "type": "object",
      "description": "A response for listing creative and deal associations",
      "id": "ListDealAssociationsResponse",
      "properties": {
        "associations": {
          "type": "array",
          "items": {
            "$ref": "CreativeDealAssociation"
          },
          "description": "The list of associations."
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListDealAssociationsRequest.page_token field in the subsequent call to 'ListDealAssociation' method to retrieve the next page of results.",
          "type": "string"
        }
      }
    },
    "ListClientUserInvitationsResponse": {
      "type": "object",
      "id": "ListClientUserInvitationsResponse",
      "properties": {
        "invitations": {
          "type": "array",
          "description": "The returned list of client users.",
          "items": {
            "$ref": "ClientUserInvitation"
          }
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListClientUserInvitationsRequest.pageToken field in the subsequent call to the clients.invitations.list method to retrieve the next page of results.",
          "type": "string"
        }
      }
    },
    "TimeOfDay": {
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
      "type": "object",
      "properties": {
        "hours": {
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
          "format": "int32",
          "type": "integer"
        },
        "nanos": {
          "format": "int32",
          "type": "integer",
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."
        },
        "seconds": {
          "format": "int32",
          "type": "integer",
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."
        },
        "minutes": {
          "description": "Minutes of hour of day. Must be from 0 to 59.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "TimeOfDay"
    },
    "NonGuaranteedAuctionTerms": {
      "id": "NonGuaranteedAuctionTerms",
      "description": "Terms for Private Auctions. Note that Private Auctions can be created only by the seller, but they can be returned in a get or list request.",
      "type": "object",
      "properties": {
        "reservePricesPerBuyer": {
          "description": "Reserve price for the specified buyer.",
          "items": {
            "$ref": "PricePerBuyer"
          },
          "type": "array"
        },
        "autoOptimizePrivateAuction": {
          "description": "True if open auction buyers are allowed to compete with invited buyers in this private auction.",
          "type": "boolean"
        }
      }
    },
    "BidResponseWithoutBidsStatusRow": {
      "id": "BidResponseWithoutBidsStatusRow",
      "properties": {
        "rowDimensions": {
          "$ref": "RowDimensions",
          "description": "The values of all dimensions associated with metric values in this row."
        },
        "status": {
          "type": "string",
          "enum": [
            "STATUS_UNSPECIFIED",
            "RESPONSES_WITHOUT_BIDS",
            "RESPONSES_WITHOUT_BIDS_FOR_ACCOUNT",
            "RESPONSES_WITHOUT_BIDS_FOR_DEAL"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined status. This value will never be returned in responses.",
            "The response had no bids.",
            "The response had no bids for the specified account, though it may have included bids on behalf of other accounts. Applies if: 1. Request is on behalf of a bidder and an account filter is present. 2. Request is on behalf of a child seat.",
            "The response had no bids for the specified deal, though it may have included bids on other deals on behalf of the account to which the deal belongs. If request is on behalf of a bidder and an account filter is not present, this also includes responses that have bids on behalf of accounts other than the account to which the deal belongs."
          ],
          "description": "The status specifying why the bid responses were considered to have no applicable bids."
        },
        "impressionCount": {
          "description": "The number of impressions for which there was a bid response with the specified status.",
          "$ref": "MetricValue"
        }
      },
      "type": "object",
      "description": "The number of impressions with the specified dimension values that were considered to have no applicable bids, as described by the specified status."
    },
    "CreativeSize": {
      "description": "Specifies the size of the creative.",
      "type": "object",
      "id": "CreativeSize",
      "properties": {
        "allowedFormats": {
          "type": "array",
          "items": {
            "enum": [
              "UNKNOWN",
              "AUDIO"
            ],
            "type": "string",
            "enumDescriptions": [
              "A placeholder for an undefined allowed format.",
              "An audio-only ad (without any video)."
            ]
          },
          "description": "What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video)."
        },
        "nativeTemplate": {
          "description": "Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.",
          "enumDescriptions": [
            "A placeholder for an undefined native template.",
            "The creative is linked to native content ad.",
            "The creative is linked to native app install ad.",
            "The creative is linked to native video content ad.",
            "The creative is linked to native video app install ad."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN_NATIVE_TEMPLATE",
            "NATIVE_CONTENT_AD",
            "NATIVE_APP_INSTALL_AD",
            "NATIVE_VIDEO_CONTENT_AD",
            "NATIVE_VIDEO_APP_INSTALL_AD"
          ]
        },
        "skippableAdType": {
          "type": "string",
          "description": "The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.",
          "enumDescriptions": [
            "A placeholder for an undefined skippable ad type.",
            "This video ad can be skipped after 5 seconds.",
            "This video ad can be skipped after 5 seconds, and count as engaged view after 30 seconds. The creative is hosted on YouTube only, and viewcount of the YouTube video increments after the engaged view.",
            "This video ad is not skippable."
          ],
          "enum": [
            "SKIPPABLE_AD_TYPE_UNSPECIFIED",
            "GENERIC",
            "INSTREAM_SELECT",
            "NOT_SKIPPABLE"
          ]
        },
        "companionSizes": {
          "description": "For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO",
          "items": {
            "$ref": "Size"
          },
          "type": "array"
        },
        "size": {
          "description": "For regular or video creative size type, specifies the size of the creative",
          "$ref": "Size"
        },
        "creativeSizeType": {
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined creative size type.",
            "The creative is a regular desktop creative.",
            "The creative is an interstitial creative.",
            "The creative is a video creative.",
            "The creative is a native (mobile) creative."
          ],
          "description": "The creative size type.",
          "enum": [
            "CREATIVE_SIZE_TYPE_UNSPECIFIED",
            "REGULAR",
            "INTERSTITIAL",
            "VIDEO",
            "NATIVE"
          ]
        }
      }
    },
    "NonBillableWinningBidStatusRow": {
      "description": "The number of winning bids with the specified dimension values for which the buyer was not billed, as described by the specified status.",
      "properties": {
        "status": {
          "description": "The status specifying why the winning bids were not billed.",
          "type": "string",
          "enum": [
            "STATUS_UNSPECIFIED",
            "AD_NOT_RENDERED",
            "INVALID_IMPRESSION",
            "FATAL_VAST_ERROR",
            "LOST_IN_MEDIATION"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined status. This value will never be returned in responses.",
            "The buyer was not billed because the ad was not rendered by the publisher.",
            "The buyer was not billed because the impression won by the bid was determined to be invalid.",
            "A video impression was served but a fatal error was reported from the client during playback.",
            "The buyer was not billed because the ad was outplaced in the mediation waterfall."
          ]
        },
        "bidCount": {
          "$ref": "MetricValue",
          "description": "The number of bids with the specified status."
        },
        "rowDimensions": {
          "description": "The values of all dimensions associated with metric values in this row.",
          "$ref": "RowDimensions"
        }
      },
      "type": "object",
      "id": "NonBillableWinningBidStatusRow"
    },
    "AbsoluteDateRange": {
      "properties": {
        "startDate": {
          "$ref": "Date",
          "description": "The start date of the range (inclusive). Must be within the 30 days leading up to current date, and must be equal to or before end_date."
        },
        "endDate": {
          "$ref": "Date",
          "description": "The end date of the range (inclusive). Must be within the 30 days leading up to current date, and must be equal to or after start_date."
        }
      },
      "description": "An absolute date range, specified by its start date and end date. The supported range of dates begins 30 days before today and ends today. Validity checked upon filter set creation. If a filter set with an absolute date range is run at a later date more than 30 days after start_date, it will fail.",
      "id": "AbsoluteDateRange",
      "type": "object"
    },
    "FilteredBidCreativeRow": {
      "id": "FilteredBidCreativeRow",
      "type": "object",
      "properties": {
        "bidCount": {
          "description": "The number of bids with the specified creative.",
          "$ref": "MetricValue"
        },
        "rowDimensions": {
          "$ref": "RowDimensions",
          "description": "The values of all dimensions associated with metric values in this row."
        },
        "creativeId": {
          "description": "The ID of the creative.",
          "type": "string"
        }
      },
      "description": "The number of filtered bids with the specified dimension values that have the specified creative."
    },
    "ListFilterSetsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListFilterSetsRequest.pageToken field in the subsequent call to the accounts.filterSets.list method to retrieve the next page of results.",
          "type": "string"
        },
        "filterSets": {
          "description": "The filter sets belonging to the buyer.",
          "items": {
            "$ref": "FilterSet"
          },
          "type": "array"
        }
      },
      "description": "Response message for listing filter sets.",
      "id": "ListFilterSetsResponse",
      "type": "object"
    },
    "FrequencyCap": {
      "description": "Frequency cap.",
      "id": "FrequencyCap",
      "properties": {
        "timeUnitType": {
          "type": "string",
          "description": "The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.",
          "enum": [
            "TIME_UNIT_TYPE_UNSPECIFIED",
            "MINUTE",
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH",
            "LIFETIME",
            "POD",
            "STREAM"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined time unit type. This just indicates the variable with this value hasn't been initialized.",
            "Minute",
            "Hour",
            "Day",
            "Week",
            "Month",
            "Lifetime",
            "Pod",
            "Stream"
          ]
        },
        "numTimeUnits": {
          "type": "integer",
          "description": "The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.",
          "format": "int32"
        },
        "maxImpressions": {
          "format": "int32",
          "description": "The maximum number of impressions that can be served to a user within the specified time period.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VideoContent": {
      "id": "VideoContent",
      "properties": {
        "videoVastXml": {
          "type": "string",
          "description": "The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard."
        },
        "videoUrl": {
          "type": "string",
          "description": "The URL to fetch a video ad."
        }
      },
      "type": "object",
      "description": "Video content for a creative."
    },
    "Buyer": {
      "properties": {
        "accountId": {
          "type": "string",
          "description": "Authorized Buyers account ID of the buyer."
        }
      },
      "id": "Buyer",
      "description": "Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.",
      "type": "object"
    },
    "FilterSet": {
      "id": "FilterSet",
      "type": "object",
      "properties": {
        "name": {
          "description": "A user-defined name of the filter set. Filter set names must be unique globally and match one of the patterns: - `bidders/*/filterSets/*` (for accessing bidder-level troubleshooting data) - `bidders/*/accounts/*/filterSets/*` (for accessing account-level troubleshooting data) This field is required in create operations.",
          "type": "string"
        },
        "breakdownDimensions": {
          "type": "array",
          "items": {
            "enumDescriptions": [
              "A placeholder for an unspecified dimension; should not be used.",
              "The response should be broken down by publisher identifier. This option is available only for Open Bidding buyers."
            ],
            "enum": [
              "BREAKDOWN_DIMENSION_UNSPECIFIED",
              "PUBLISHER_IDENTIFIER"
            ],
            "type": "string"
          },
          "description": "The set of dimensions along which to break down the response; may be empty. If multiple dimensions are requested, the breakdown is along the Cartesian product of the requested dimensions."
        },
        "creativeId": {
          "type": "string",
          "description": "The ID of the creative on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/*/accounts/*/filterSets/*` pattern."
        },
        "environment": {
          "description": "The environment on which to filter; optional.",
          "type": "string",
          "enum": [
            "ENVIRONMENT_UNSPECIFIED",
            "WEB",
            "APP"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined environment; indicates that no environment filter will be applied.",
            "The ad impression appears on the web.",
            "The ad impression appears in an app."
          ]
        },
        "timeSeriesGranularity": {
          "enumDescriptions": [
            "A placeholder for an unspecified interval; no time series is applied. All rows in response will contain data for the entire requested time range.",
            "Indicates that data will be broken down by the hour.",
            "Indicates that data will be broken down by the day."
          ],
          "description": "The granularity of time intervals if a time series breakdown is preferred; optional.",
          "type": "string",
          "enum": [
            "TIME_SERIES_GRANULARITY_UNSPECIFIED",
            "HOURLY",
            "DAILY"
          ]
        },
        "relativeDateRange": {
          "description": "A relative date range, defined by an offset from today and a duration. Interpreted relative to Pacific time zone.",
          "$ref": "RelativeDateRange"
        },
        "publisherIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For Open Bidding partners only. The list of publisher identifiers on which to filter; may be empty. The filters represented by multiple publisher identifiers are ORed together."
        },
        "realtimeTimeRange": {
          "$ref": "RealtimeTimeRange",
          "description": "An open-ended realtime time range, defined by the aggregation start timestamp."
        },
        "format": {
          "enum": [
            "FORMAT_UNSPECIFIED",
            "NATIVE_DISPLAY",
            "NATIVE_VIDEO",
            "NON_NATIVE_DISPLAY",
            "NON_NATIVE_VIDEO"
          ],
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined format; indicates that no format filter will be applied.",
            "The ad impression is a native ad, and display (for example, image) format.",
            "The ad impression is a native ad, and video format.",
            "The ad impression is not a native ad, and display (for example, image) format.",
            "The ad impression is not a native ad, and video format."
          ],
          "description": "Creative format bidded on or allowed to bid on, can be empty."
        },
        "platforms": {
          "items": {
            "enum": [
              "PLATFORM_UNSPECIFIED",
              "DESKTOP",
              "TABLET",
              "MOBILE"
            ],
            "type": "string",
            "enumDescriptions": [
              "A placeholder for an undefined platform; indicates that no platform filter will be applied.",
              "The ad impression appears on a desktop.",
              "The ad impression appears on a tablet.",
              "The ad impression appears on a mobile device."
            ]
          },
          "type": "array",
          "description": "The list of platforms on which to filter; may be empty. The filters represented by multiple platforms are ORed together (for example, if non-empty, results must match any one of the platforms)."
        },
        "formats": {
          "type": "array",
          "description": "Creative formats bidded on or allowed to bid on, can be empty. Although this field is a list, it can only be populated with a single item. A HTTP 400 bad request error will be returned in the response if you specify multiple items.",
          "items": {
            "enum": [
              "FORMAT_UNSPECIFIED",
              "NATIVE_DISPLAY",
              "NATIVE_VIDEO",
              "NON_NATIVE_DISPLAY",
              "NON_NATIVE_VIDEO"
            ],
            "enumDescriptions": [
              "A placeholder for an undefined format; indicates that no format filter will be applied.",
              "The ad impression is a native ad, and display (for example, image) format.",
              "The ad impression is a native ad, and video format.",
              "The ad impression is not a native ad, and display (for example, image) format.",
              "The ad impression is not a native ad, and video format."
            ],
            "type": "string"
          },
          "deprecated": true
        },
        "absoluteDateRange": {
          "description": "An absolute date range, defined by a start date and an end date. Interpreted relative to Pacific time zone.",
          "$ref": "AbsoluteDateRange"
        },
        "dealId": {
          "type": "string",
          "format": "int64",
          "description": "The ID of the deal on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/*/accounts/*/filterSets/*` pattern."
        },
        "sellerNetworkIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "description": "For Authorized Buyers only. The list of IDs of the seller (publisher) networks on which to filter; may be empty. The filters represented by multiple seller network IDs are ORed together (for example, if non-empty, results must match any one of the publisher networks). See [seller-network-ids](https://developers.google.com/authorized-buyers/rtb/downloads/seller-network-ids) file for the set of existing seller network IDs."
        }
      },
      "description": "A set of filters that is applied to a request for data. Within a filter set, an AND operation is performed across the filters represented by each field. An OR operation is performed across the filters represented by the multiple values of a repeated field, for example, \"format=VIDEO AND deal_id=12 AND (seller_network_id=34 OR seller_network_id=56)\"."
    },
    "TargetingCriteria": {
      "type": "object",
      "properties": {
        "key": {
          "description": "The key representing the shared targeting criterion. Targeting criteria defined by Google ad servers will begin with GOOG_. Third parties may define their own keys. A list of permissible keys along with the acceptable values will be provided as part of the external documentation.",
          "type": "string"
        },
        "inclusions": {
          "items": {
            "$ref": "TargetingValue"
          },
          "type": "array",
          "description": "The list of value to include as part of the targeting. Each value is OR'd together."
        },
        "exclusions": {
          "description": "The list of values to exclude from targeting. Each value is AND'd together.",
          "type": "array",
          "items": {
            "$ref": "TargetingValue"
          }
        }
      },
      "description": "Advertisers can target different attributes of an ad slot. For example, they can choose to show ads only if the user is in the U.S. Such targeting criteria can be specified as part of Shared Targeting.",
      "id": "TargetingCriteria"
    },
    "Correction": {
      "id": "Correction",
      "type": "object",
      "description": "Output only. Shows any corrections that were applied to this creative.",
      "properties": {
        "details": {
          "items": {
            "type": "string"
          },
          "description": "Additional details about what was corrected.",
          "type": "array"
        },
        "contexts": {
          "items": {
            "$ref": "ServingContext"
          },
          "description": "The contexts for the correction.",
          "type": "array"
        },
        "type": {
          "enum": [
            "CORRECTION_TYPE_UNSPECIFIED",
            "VENDOR_IDS_ADDED",
            "SSL_ATTRIBUTE_REMOVED",
            "FLASH_FREE_ATTRIBUTE_REMOVED",
            "FLASH_FREE_ATTRIBUTE_ADDED",
            "REQUIRED_ATTRIBUTE_ADDED",
            "REQUIRED_VENDOR_ADDED",
            "SSL_ATTRIBUTE_ADDED",
            "IN_BANNER_VIDEO_ATTRIBUTE_ADDED",
            "MRAID_ATTRIBUTE_ADDED",
            "FLASH_ATTRIBUTE_REMOVED",
            "VIDEO_IN_SNIPPET_ATTRIBUTE_ADDED"
          ],
          "description": "The type of correction that was applied to the creative.",
          "enumDescriptions": [
            "The correction type is unknown. Refer to the details for more information.",
            "The ad's declared vendors did not match the vendors that were detected. The detected vendors were added.",
            "The ad had the SSL attribute declared but was not SSL-compliant. The SSL attribute was removed.",
            "The ad was declared as Flash-free but contained Flash, so the Flash-free attribute was removed.",
            "The ad was not declared as Flash-free but it did not reference any flash content, so the Flash-free attribute was added.",
            "The ad did not declare a required creative attribute. The attribute was added.",
            "The ad did not declare a required technology vendor. The technology vendor was added.",
            "The ad did not declare the SSL attribute but was SSL-compliant, so the SSL attribute was added.",
            "Properties consistent with In-banner video were found, so an In-Banner Video attribute was added.",
            "The ad makes calls to the MRAID API so the MRAID attribute was added.",
            "The ad unnecessarily declared the Flash attribute, so the Flash attribute was removed.",
            "The ad contains video content."
          ],
          "type": "string"
        }
      }
    },
    "Image": {
      "id": "Image",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the image."
        },
        "height": {
          "description": "Image height in pixels.",
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Image width in pixels."
        }
      },
      "description": "An image resource. You may provide a larger image than was requested, so long as the aspect ratio is preserved.",
      "type": "object"
    },
    "RowDimensions": {
      "description": "A response may include multiple rows, breaking down along various dimensions. Encapsulates the values of all dimensions for a given row.",
      "id": "RowDimensions",
      "type": "object",
      "properties": {
        "timeInterval": {
          "$ref": "TimeInterval",
          "description": "The time interval that this row represents."
        },
        "publisherIdentifier": {
          "type": "string",
          "description": "The publisher identifier for this row, if a breakdown by [BreakdownDimension.PUBLISHER_IDENTIFIER](https://developers.google.com/authorized-buyers/apis/reference/rest/v2beta1/bidders.accounts.filterSets#FilterSet.BreakdownDimension) was requested."
        }
      }
    },
    "StopWatchingCreativeRequest": {
      "description": "A request for stopping notifications for changes to creative Status.",
      "id": "StopWatchingCreativeRequest",
      "type": "object",
      "properties": {}
    },
    "RelativeDateRange": {
      "description": "A relative date range, specified by an offset and a duration. The supported range of dates begins 30 days before today and ends today, for example, the limits for these values are: offset_days \u003e= 0 duration_days \u003e= 1 offset_days + duration_days \u003c= 30",
      "id": "RelativeDateRange",
      "properties": {
        "durationDays": {
          "description": "The number of days in the requested date range, for example, for a range spanning today: 1. For a range spanning the last 7 days: 7.",
          "format": "int32",
          "type": "integer"
        },
        "offsetDays": {
          "type": "integer",
          "format": "int32",
          "description": "The end date of the filter set, specified as the number of days before today, for example, for a range where the last date is today: 0."
        }
      },
      "type": "object"
    },
    "Money": {
      "description": "Represents an amount of money with its currency type.",
      "type": "object",
      "properties": {
        "units": {
          "type": "string",
          "format": "int64",
          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
        },
        "currencyCode": {
          "type": "string",
          "description": "The three-letter currency code defined in ISO 4217."
        },
        "nanos": {
          "format": "int32",
          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
          "type": "integer"
        }
      },
      "id": "Money"
    },
    "TechnologyTargeting": {
      "description": "Represents targeting about various types of technology.",
      "type": "object",
      "id": "TechnologyTargeting",
      "properties": {
        "deviceCapabilityTargeting": {
          "$ref": "CriteriaTargeting",
          "description": "IDs of device capabilities to be included/excluded."
        },
        "operatingSystemTargeting": {
          "$ref": "OperatingSystemTargeting",
          "description": "Operating system related targeting information."
        },
        "deviceCategoryTargeting": {
          "description": "IDs of device categories to be included/excluded.",
          "$ref": "CriteriaTargeting"
        }
      }
    },
    "NativeContent": {
      "type": "object",
      "properties": {
        "logo": {
          "$ref": "Image",
          "description": "A smaller image, for the advertiser's logo."
        },
        "storeUrl": {
          "type": "string",
          "deprecated": true,
          "description": "The URL to the app store to purchase/download the promoted app."
        },
        "image": {
          "$ref": "Image",
          "description": "A large image."
        },
        "appIcon": {
          "description": "The app icon, for app download ads.",
          "$ref": "Image"
        },
        "priceDisplayText": {
          "type": "string",
          "description": "The price of the promoted app including currency info."
        },
        "body": {
          "type": "string",
          "description": "A long description of the ad."
        },
        "headline": {
          "type": "string",
          "description": "A short title for the ad."
        },
        "clickTrackingUrl": {
          "description": "The URL to use for click tracking.",
          "type": "string"
        },
        "advertiserName": {
          "description": "The name of the advertiser or sponsor, to be displayed in the ad creative.",
          "type": "string"
        },
        "clickLinkUrl": {
          "description": "The URL that the browser/SDK will load when the user clicks the ad.",
          "type": "string"
        },
        "starRating": {
          "format": "double",
          "type": "number",
          "description": "The app rating in the app store. Must be in the range [0-5]."
        },
        "callToAction": {
          "type": "string",
          "description": "A label for the button that the user is supposed to click."
        },
        "videoUrl": {
          "type": "string",
          "description": "The URL to fetch a native video ad."
        }
      },
      "description": "Native content for a creative.",
      "id": "NativeContent"
    },
    "Seller": {
      "properties": {
        "accountId": {
          "type": "string",
          "description": "The unique ID for the seller. The seller fills in this field. The seller account ID is then available to buyer in the product."
        },
        "subAccountId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Ad manager network code for the seller."
        }
      },
      "description": "Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.",
      "id": "Seller",
      "type": "object"
    },
    "CalloutStatusRow": {
      "id": "CalloutStatusRow",
      "properties": {
        "impressionCount": {
          "$ref": "MetricValue",
          "description": "The number of impressions for which there was a bid request or bid response with the specified callout status."
        },
        "calloutStatusId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the callout status. See [callout-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/callout-status-codes)."
        },
        "rowDimensions": {
          "$ref": "RowDimensions",
          "description": "The values of all dimensions associated with metric values in this row."
        }
      },
      "description": "The number of impressions with the specified dimension values where the corresponding bid request or bid response was not successful, as described by the specified callout status.",
      "type": "object"
    },
    "DealTerms": {
      "description": "The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher.",
      "id": "DealTerms",
      "properties": {
        "brandingType": {
          "enum": [
            "BRANDING_TYPE_UNSPECIFIED",
            "BRANDED",
            "SEMI_TRANSPARENT"
          ],
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined branding type.",
            "Full URL is included in bid requests.",
            "A TopLevelDomain or masked URL is sent in bid requests rather than the full one."
          ],
          "description": "Visibility of the URL in bid requests. (default: BRANDED)"
        },
        "nonGuaranteedAuctionTerms": {
          "description": "The terms for non-guaranteed auction deals.",
          "$ref": "NonGuaranteedAuctionTerms"
        },
        "estimatedImpressionsPerDay": {
          "format": "int64",
          "description": "Non-binding estimate of the impressions served per day. Can be set by buyer or seller.",
          "type": "string"
        },
        "estimatedGrossSpend": {
          "$ref": "Price",
          "description": "Non-binding estimate of the estimated gross spend for this deal. Can be set by buyer or seller."
        },
        "description": {
          "description": "Publisher provided description for the terms.",
          "type": "string"
        },
        "nonGuaranteedFixedPriceTerms": {
          "description": "The terms for non-guaranteed fixed price deals.",
          "$ref": "NonGuaranteedFixedPriceTerms"
        },
        "sellerTimeZone": {
          "type": "string",
          "description": "The time zone name. For deals with Cost Per Day billing, defines the time zone used to mark the boundaries of a day. It should be an IANA TZ name, such as \"America/Los_Angeles\". For more information, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones."
        },
        "guaranteedFixedPriceTerms": {
          "description": "The terms for guaranteed fixed price deals.",
          "$ref": "GuaranteedFixedPriceTerms"
        }
      },
      "type": "object"
    },
    "CancelNegotiationRequest": {
      "properties": {},
      "description": "Request to cancel an ongoing negotiation.",
      "id": "CancelNegotiationRequest",
      "type": "object"
    },
    "CompleteSetupRequest": {
      "properties": {},
      "id": "CompleteSetupRequest",
      "type": "object",
      "description": "Request message for indicating that the proposal's setup step is complete."
    },
    "PublisherProfile": {
      "properties": {
        "samplePageUrl": {
          "type": "string",
          "description": "URL to a sample content page."
        },
        "displayName": {
          "type": "string",
          "description": "Name of the publisher profile."
        },
        "topHeadlines": {
          "items": {
            "type": "string"
          },
          "description": "Up to three key metrics and rankings. Max 100 characters each. For example \"#1 Mobile News Site for 20 Straight Months\".",
          "type": "array"
        },
        "mobileApps": {
          "description": "The list of apps represented in this publisher profile. Empty if this is a parent profile.",
          "type": "array",
          "items": {
            "$ref": "PublisherProfileMobileApplication"
          }
        },
        "seller": {
          "description": "Seller of the publisher profile.",
          "$ref": "Seller"
        },
        "isParent": {
          "description": "Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller should have only one parent publisher profile, and can have multiple child profiles. Publisher profiles for the same seller will have same value of field google.ads.adexchange.buyer.v2beta1.PublisherProfile.seller. See https://support.google.com/admanager/answer/6035806 for details.",
          "type": "boolean"
        },
        "publisherProfileId": {
          "description": "Unique ID for publisher profile.",
          "type": "string"
        },
        "rateCardInfoUrl": {
          "description": "URL to a publisher rate card.",
          "type": "string"
        },
        "domains": {
          "description": "The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \"photos.google.co.uk/123\", but will instead contain \"google.co.uk\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "programmaticDealsContact": {
          "description": "Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.",
          "type": "string"
        },
        "logoUrl": {
          "description": "A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.",
          "type": "string"
        },
        "overview": {
          "type": "string",
          "description": "Overview of the publisher."
        },
        "mediaKitUrl": {
          "type": "string",
          "description": "URL to additional marketing and sales materials."
        },
        "googlePlusUrl": {
          "description": "URL to publisher's Google+ page.",
          "type": "string"
        },
        "audienceDescription": {
          "description": "Description on the publisher's audience.",
          "type": "string"
        },
        "directDealsContact": {
          "description": "Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.",
          "type": "string"
        },
        "buyerPitchStatement": {
          "description": "Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents a publisher profile (https://support.google.com/admanager/answer/6035806) in Marketplace. All fields are read only. All string fields are free-form text entered by the publisher unless noted otherwise.",
      "id": "PublisherProfile"
    },
    "AcceptProposalRequest": {
      "id": "AcceptProposalRequest",
      "type": "object",
      "properties": {
        "proposalRevision": {
          "type": "string",
          "description": "The last known client revision number of the proposal.",
          "format": "int64"
        }
      },
      "description": "Request to accept a proposal."
    },
    "Client": {
      "description": "A client resource represents a client buyer—an agency, a brand, or an advertiser customer of the sponsor buyer. Users associated with the client buyer have restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the client buyer. All fields are required unless otherwise specified.",
      "properties": {
        "clientAccountId": {
          "format": "int64",
          "type": "string",
          "description": "The globally-unique numerical ID of the client. The value of this field is ignored in create and update operations."
        },
        "role": {
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined client role.",
            "Users associated with this client can see publisher deal offers in the Marketplace. They can neither negotiate proposals nor approve deals. If this client is visible to publishers, they can send deal proposals to this client.",
            "Users associated with this client can respond to deal proposals sent to them by publishers. They can also initiate deal proposals of their own.",
            "Users associated with this client can approve eligible deals on your behalf. Some deals may still explicitly require publisher finalization. If this role is not selected, the sponsor buyer will need to manually approve each of their deals."
          ],
          "description": "The role which is assigned to the client buyer. Each role implies a set of permissions granted to the client. Must be one of `CLIENT_DEAL_VIEWER`, `CLIENT_DEAL_NEGOTIATOR` or `CLIENT_DEAL_APPROVER`.",
          "enum": [
            "CLIENT_ROLE_UNSPECIFIED",
            "CLIENT_DEAL_VIEWER",
            "CLIENT_DEAL_NEGOTIATOR",
            "CLIENT_DEAL_APPROVER"
          ]
        },
        "entityName": {
          "type": "string",
          "description": "The name of the entity. This field is automatically fetched based on the type and ID. The value of this field is ignored in create and update operations."
        },
        "status": {
          "description": "The status of the client buyer.",
          "enum": [
            "CLIENT_STATUS_UNSPECIFIED",
            "DISABLED",
            "ACTIVE"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined client status.",
            "A client that is currently disabled.",
            "A client that is currently active."
          ],
          "type": "string"
        },
        "entityType": {
          "description": "An optional field for specifying the type of the client entity: `ADVERTISER`, `BRAND`, or `AGENCY`.",
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined client entity type. Should not be used.",
            "An advertiser.",
            "A brand.",
            "An advertising agency.",
            "An explicit value for a client that was not yet classified as any particular entity."
          ],
          "enum": [
            "ENTITY_TYPE_UNSPECIFIED",
            "ADVERTISER",
            "BRAND",
            "AGENCY",
            "ENTITY_TYPE_UNCLASSIFIED"
          ]
        },
        "clientName": {
          "description": "Name used to represent this client to publishers. You may have multiple clients that map to the same entity, but for each client the combination of `clientName` and entity must be unique. You can specify this field as empty. Maximum length of 255 characters is allowed.",
          "type": "string"
        },
        "partnerClientId": {
          "description": "Optional arbitrary unique identifier of this client buyer from the standpoint of its Ad Exchange sponsor buyer. This field can be used to associate a client buyer with the identifier in the namespace of its sponsor buyer, lookup client buyers by that identifier and verify whether an Ad Exchange counterpart of a given client buyer already exists. If present, must be unique among all the client buyers for its Ad Exchange sponsor buyer.",
          "type": "string"
        },
        "entityId": {
          "type": "string",
          "format": "int64",
          "description": "Numerical identifier of the client entity. The entity can be an advertiser, a brand, or an agency. This identifier is unique among all the entities with the same type. The value of this field is ignored if the entity type is not provided. A list of all known advertisers with their identifiers is available in the [advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt) file. A list of all known brands with their identifiers is available in the [brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt) file. A list of all known agencies with their identifiers is available in the [agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt) file."
        },
        "visibleToSeller": {
          "description": "Whether the client buyer will be visible to sellers.",
          "type": "boolean"
        }
      },
      "id": "Client",
      "type": "object"
    },
    "Creative": {
      "type": "object",
      "id": "Creative",
      "properties": {
        "detectedAdvertiserIds": {
          "description": "Output only. Detected advertiser IDs, if any.",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "string"
          }
        },
        "native": {
          "description": "A native creative.",
          "$ref": "NativeContent"
        },
        "adChoicesDestinationUrl": {
          "description": "The link to AdChoices destination page.",
          "type": "string"
        },
        "detectedSensitiveCategories": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids."
        },
        "creativeId": {
          "description": "The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.",
          "type": "string"
        },
        "version": {
          "description": "Output only. The version of this creative.",
          "type": "integer",
          "format": "int32"
        },
        "dealsStatus": {
          "enumDescriptions": [
            "The status is unknown.",
            "The creative has not been checked.",
            "The creative has been conditionally approved. See serving_restrictions for details.",
            "The creative has been approved.",
            "The creative has been disapproved.",
            "Placeholder for transition to v1beta1. Currently not used.",
            "Placeholder for transition to v1beta1. Currently not used."
          ],
          "description": "Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.",
          "type": "string",
          "enum": [
            "STATUS_UNSPECIFIED",
            "NOT_CHECKED",
            "CONDITIONALLY_APPROVED",
            "APPROVED",
            "DISAPPROVED",
            "PENDING_REVIEW",
            "STATUS_TYPE_UNSPECIFIED"
          ]
        },
        "attributes": {
          "type": "array",
          "items": {
            "enum": [
              "ATTRIBUTE_UNSPECIFIED",
              "IMAGE_RICH_MEDIA",
              "ADOBE_FLASH_FLV",
              "IS_TAGGED",
              "IS_COOKIE_TARGETED",
              "IS_USER_INTEREST_TARGETED",
              "EXPANDING_DIRECTION_NONE",
              "EXPANDING_DIRECTION_UP",
              "EXPANDING_DIRECTION_DOWN",
              "EXPANDING_DIRECTION_LEFT",
              "EXPANDING_DIRECTION_RIGHT",
              "EXPANDING_DIRECTION_UP_LEFT",
              "EXPANDING_DIRECTION_UP_RIGHT",
              "EXPANDING_DIRECTION_DOWN_LEFT",
              "EXPANDING_DIRECTION_DOWN_RIGHT",
              "CREATIVE_TYPE_HTML",
              "CREATIVE_TYPE_VAST_VIDEO",
              "EXPANDING_DIRECTION_UP_OR_DOWN",
              "EXPANDING_DIRECTION_LEFT_OR_RIGHT",
              "EXPANDING_DIRECTION_ANY_DIAGONAL",
              "EXPANDING_ACTION_ROLLOVER_TO_EXPAND",
              "INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH",
              "RICH_MEDIA_CAPABILITY_TYPE_MRAID",
              "RICH_MEDIA_CAPABILITY_TYPE_FLASH",
              "RICH_MEDIA_CAPABILITY_TYPE_HTML5",
              "SKIPPABLE_INSTREAM_VIDEO",
              "RICH_MEDIA_CAPABILITY_TYPE_SSL",
              "RICH_MEDIA_CAPABILITY_TYPE_NON_SSL",
              "RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL",
              "NON_SKIPPABLE_INSTREAM_VIDEO",
              "NATIVE_ELIGIBILITY_ELIGIBLE",
              "NON_VPAID",
              "NATIVE_ELIGIBILITY_NOT_ELIGIBLE",
              "ANY_INTERSTITIAL",
              "NON_INTERSTITIAL",
              "IN_BANNER_VIDEO",
              "RENDERING_SIZELESS_ADX",
              "OMSDK_1_0"
            ],
            "enumDescriptions": [
              "Do not use. This is a placeholder value only.",
              "The creative is of type image/rich media. For pretargeting.",
              "The creative is of video type Adobe Flash FLV. For pretargeting.",
              "The creative is tagged.",
              "The creative is cookie targeted.",
              "The creative is user interest targeted.",
              "The creative does not expand.",
              "The creative expands up.",
              "The creative expands down.",
              "The creative expands left.",
              "The creative expands right.",
              "The creative expands up and left.",
              "The creative expands up and right.",
              "The creative expands down and left.",
              "The creative expands down and right.",
              "The creative type is HTML.",
              "The creative type is VAST video.",
              "The creative expands up or down.",
              "The creative expands left or right.",
              "The creative expands on any diagonal.",
              "The creative expands when rolled over.",
              "The instream vast video type is vpaid flash.",
              "The creative is MRAID.",
              "The creative is Flash.",
              "The creative is HTML5.",
              "The creative has an instream VAST video type of skippable instream video. For pretargeting.",
              "The creative is SSL.",
              "The creative is non-SSL.",
              "The creative is an interstitial.",
              "The creative has an instream VAST video type of non-skippable instream video. For pretargeting.",
              "The creative is eligible for native.",
              "The creative has an instream VAST video type of non-VPAID. For pretargeting.",
              "The creative is not eligible for native.",
              "The creative has an interstitial size of any interstitial. For pretargeting.",
              "The creative has an interstitial size of non interstitial. For pretargeting.",
              "The video type is in-banner video.",
              "The creative can dynamically resize to fill a variety of slot sizes.",
              "The open measurement SDK is supported."
            ],
            "type": "string"
          },
          "description": "All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method."
        },
        "accountId": {
          "description": "The account that this creative belongs to. Can be used to filter the response of the creatives.list method.",
          "type": "string"
        },
        "declaredClickThroughUrls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of declared destination URLs for the creative."
        },
        "clickThroughUrls": {
          "description": "The set of destination URLs for the creative.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "servingRestrictions": {
          "description": "Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS versus HTTP request, or the type of auction).",
          "type": "array",
          "items": {
            "$ref": "ServingRestriction"
          }
        },
        "video": {
          "description": "A video creative.",
          "$ref": "VideoContent"
        },
        "adTechnologyProviders": {
          "description": "Output only. The detected ad technology providers.",
          "$ref": "AdTechnologyProviders"
        },
        "advertiserName": {
          "description": "The name of the company being advertised in the creative.",
          "type": "string"
        },
        "html": {
          "description": "An HTML creative.",
          "$ref": "HtmlContent"
        },
        "agencyId": {
          "description": "The agency ID for this creative.",
          "type": "string",
          "format": "int64"
        },
        "apiUpdateTime": {
          "description": "Output only. The last update timestamp of the creative through the API.",
          "format": "google-datetime",
          "type": "string"
        },
        "detectedDomains": {
          "type": "array",
          "description": "Output only. The detected domains for this creative.",
          "items": {
            "type": "string"
          }
        },
        "impressionTrackingUrls": {
          "description": "The set of URLs to be called to record an impression.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "openAuctionStatus": {
          "type": "string",
          "description": "Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.",
          "enumDescriptions": [
            "The status is unknown.",
            "The creative has not been checked.",
            "The creative has been conditionally approved. See serving_restrictions for details.",
            "The creative has been approved.",
            "The creative has been disapproved.",
            "Placeholder for transition to v1beta1. Currently not used.",
            "Placeholder for transition to v1beta1. Currently not used."
          ],
          "enum": [
            "STATUS_UNSPECIFIED",
            "NOT_CHECKED",
            "CONDITIONALLY_APPROVED",
            "APPROVED",
            "DISAPPROVED",
            "PENDING_REVIEW",
            "STATUS_TYPE_UNSPECIFIED"
          ]
        },
        "corrections": {
          "description": "Output only. Shows any corrections that were applied to this creative.",
          "items": {
            "$ref": "Correction"
          },
          "deprecated": true,
          "type": "array"
        },
        "vendorIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values."
        },
        "restrictedCategories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "NO_RESTRICTED_CATEGORIES",
              "ALCOHOL"
            ],
            "enumDescriptions": [
              "The ad has no restricted categories",
              "The alcohol restricted category."
            ]
          },
          "description": "All restricted categories for the ads that may be shown from this creative."
        },
        "detectedProductCategories": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs."
        },
        "detectedLanguages": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes."
        }
      },
      "description": "A creative and its classification data."
    },
    "ImpressionMetricsRow": {
      "id": "ImpressionMetricsRow",
      "type": "object",
      "description": "The set of metrics that are measured in numbers of impressions, representing how many impressions with the specified dimension values were considered eligible at each stage of the bidding funnel.",
      "properties": {
        "inventoryMatches": {
          "description": "The number of impressions that match the buyer's inventory pretargeting.",
          "$ref": "MetricValue"
        },
        "responsesWithBids": {
          "description": "The number of impressions for which Ad Exchange received a response from the buyer that contained at least one applicable bid.",
          "$ref": "MetricValue"
        },
        "availableImpressions": {
          "description": "The number of impressions available to the buyer on Ad Exchange. In some cases this value may be unavailable.",
          "$ref": "MetricValue"
        },
        "bidRequests": {
          "$ref": "MetricValue",
          "description": "The number of impressions for which Ad Exchange sent the buyer a bid request."
        },
        "successfulResponses": {
          "$ref": "MetricValue",
          "description": "The number of impressions for which the buyer successfully sent a response to Ad Exchange."
        },
        "rowDimensions": {
          "description": "The values of all dimensions associated with metric values in this row.",
          "$ref": "RowDimensions"
        }
      }
    },
    "PauseProposalDealsRequest": {
      "description": "Request message to pause serving for finalized deals.",
      "properties": {
        "externalDealIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The external_deal_id's of the deals to be paused. If empty, all the deals in the proposal will be paused."
        },
        "reason": {
          "description": "The reason why the deals are being paused. This human readable message will be displayed in the seller's UI. (Max length: 1000 unicode code units.)",
          "type": "string"
        }
      },
      "id": "PauseProposalDealsRequest",
      "type": "object"
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "rootUrl": "https://adexchangebuyer.googleapis.com/",
  "batchPath": "batch",
  "protocol": "rest",
  "version_module": true,
  "canonicalName": "AdExchangeBuyerII",
  "documentationLink": "https://developers.google.com/authorized-buyers/apis/reference/rest/",
  "mtlsRootUrl": "https://adexchangebuyer.mtls.googleapis.com/",
  "servicePath": "",
  "discoveryVersion": "v1",
  "name": "adexchangebuyer2",
  "parameters": {
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    }
  },
  "resources": {
    "accounts": {
      "resources": {
        "publisherProfiles": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "flatPath": "v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}",
              "id": "adexchangebuyer2.accounts.publisherProfiles.get",
              "parameters": {
                "publisherProfileId": {
                  "type": "string",
                  "description": "The id for the publisher profile to get.",
                  "required": true,
                  "location": "path"
                },
                "accountId": {
                  "required": true,
                  "type": "string",
                  "description": "Account ID of the buyer.",
                  "location": "path"
                }
              },
              "path": "v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}",
              "parameterOrder": [
                "accountId",
                "publisherProfileId"
              ],
              "description": "Gets the requested publisher profile by id.",
              "response": {
                "$ref": "PublisherProfile"
              }
            },
            "list": {
              "flatPath": "v2beta1/accounts/{accountId}/publisherProfiles",
              "id": "adexchangebuyer2.accounts.publisherProfiles.list",
              "parameters": {
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "format": "int32",
                  "description": "Specify the number of results to include per page."
                },
                "accountId": {
                  "type": "string",
                  "required": true,
                  "description": "Account ID of the buyer.",
                  "location": "path"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The page token as return from ListPublisherProfilesResponse.",
                  "location": "query"
                }
              },
              "description": "List all publisher profiles visible to the buyer",
              "path": "v2beta1/accounts/{accountId}/publisherProfiles",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameterOrder": [
                "accountId"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "ListPublisherProfilesResponse"
              }
            }
          }
        },
        "products": {
          "methods": {
            "get": {
              "path": "v2beta1/accounts/{accountId}/products/{productId}",
              "parameters": {
                "accountId": {
                  "description": "Account ID of the buyer.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "productId": {
                  "type": "string",
                  "required": true,
                  "description": "The ID for the product to get the head revision for.",
                  "location": "path"
                }
              },
              "flatPath": "v2beta1/accounts/{accountId}/products/{productId}",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "httpMethod": "GET",
              "id": "adexchangebuyer2.accounts.products.get",
              "description": "Gets the requested product by ID.",
              "parameterOrder": [
                "accountId",
                "productId"
              ],
              "response": {
                "$ref": "Product"
              }
            },
            "list": {
              "path": "v2beta1/accounts/{accountId}/products",
              "description": "List all products visible to the buyer (optionally filtered by the specified PQL query).",
              "flatPath": "v2beta1/accounts/{accountId}/products",
              "id": "adexchangebuyer2.accounts.products.list",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "The page token as returned from ListProductsResponse.",
                  "type": "string"
                },
                "accountId": {
                  "required": true,
                  "location": "path",
                  "description": "Account ID of the buyer.",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                  "location": "query"
                },
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "An optional PQL query used to query for products. See https://developers.google.com/ad-manager/docs/pqlreference for documentation about PQL and examples. Nested repeated fields, such as product.targetingCriterion.inclusions, cannot be filtered."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "accountId"
              ],
              "response": {
                "$ref": "ListProductsResponse"
              }
            }
          }
        },
        "clients": {
          "methods": {
            "list": {
              "path": "v2beta1/accounts/{accountId}/clients",
              "parameters": {
                "partnerClientId": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional unique identifier (from the standpoint of an Ad Exchange sponsor buyer partner) of the client to return. If specified, at most one client will be returned in the response."
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the accounts.clients.list method."
                },
                "pageSize": {
                  "description": "Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                },
                "accountId": {
                  "location": "path",
                  "required": true,
                  "format": "int64",
                  "description": "Unique numerical account ID of the sponsor buyer to list the clients for.",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "description": "Lists all the clients for the current sponsor buyer.",
              "flatPath": "v2beta1/accounts/{accountId}/clients",
              "id": "adexchangebuyer2.accounts.clients.list",
              "parameterOrder": [
                "accountId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "response": {
                "$ref": "ListClientsResponse"
              }
            },
            "update": {
              "description": "Updates an existing client buyer.",
              "response": {
                "$ref": "Client"
              },
              "parameterOrder": [
                "accountId",
                "clientAccountId"
              ],
              "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}",
              "parameters": {
                "clientAccountId": {
                  "format": "int64",
                  "location": "path",
                  "description": "Unique numerical account ID of the client to update. (required)",
                  "type": "string",
                  "required": true
                },
                "accountId": {
                  "format": "int64",
                  "description": "Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required)",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}",
              "httpMethod": "PUT",
              "request": {
                "$ref": "Client"
              },
              "id": "adexchangebuyer2.accounts.clients.update"
            },
            "create": {
              "response": {
                "$ref": "Client"
              },
              "parameterOrder": [
                "accountId"
              ],
              "path": "v2beta1/accounts/{accountId}/clients",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "description": "Creates a new client buyer.",
              "request": {
                "$ref": "Client"
              },
              "flatPath": "v2beta1/accounts/{accountId}/clients",
              "id": "adexchangebuyer2.accounts.clients.create",
              "parameters": {
                "accountId": {
                  "required": true,
                  "description": "Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required)",
                  "type": "string",
                  "format": "int64",
                  "location": "path"
                }
              },
              "httpMethod": "POST"
            },
            "get": {
              "parameters": {
                "accountId": {
                  "type": "string",
                  "description": "Numerical account ID of the client's sponsor buyer. (required)",
                  "location": "path",
                  "format": "int64",
                  "required": true
                },
                "clientAccountId": {
                  "type": "string",
                  "format": "int64",
                  "required": true,
                  "location": "path",
                  "description": "Numerical account ID of the client buyer to retrieve. (required)"
                }
              },
              "httpMethod": "GET",
              "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}",
              "description": "Gets a client buyer with a given client account ID.",
              "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}",
              "parameterOrder": [
                "accountId",
                "clientAccountId"
              ],
              "id": "adexchangebuyer2.accounts.clients.get",
              "response": {
                "$ref": "Client"
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ]
            }
          },
          "resources": {
            "invitations": {
              "methods": {
                "get": {
                  "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}",
                  "parameters": {
                    "accountId": {
                      "location": "path",
                      "description": "Numerical account ID of the client's sponsor buyer. (required)",
                      "type": "string",
                      "format": "int64",
                      "required": true
                    },
                    "clientAccountId": {
                      "format": "int64",
                      "description": "Numerical account ID of the client buyer that the user invitation to be retrieved is associated with. (required)",
                      "location": "path",
                      "type": "string",
                      "required": true
                    },
                    "invitationId": {
                      "type": "string",
                      "required": true,
                      "description": "Numerical identifier of the user invitation to retrieve. (required)",
                      "format": "int64",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "accountId",
                    "clientAccountId",
                    "invitationId"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}",
                  "id": "adexchangebuyer2.accounts.clients.invitations.get",
                  "description": "Retrieves an existing client user invitation.",
                  "response": {
                    "$ref": "ClientUserInvitation"
                  }
                },
                "create": {
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "request": {
                    "$ref": "ClientUserInvitation"
                  },
                  "description": "Creates and sends out an email invitation to access an Ad Exchange client buyer account.",
                  "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations",
                  "response": {
                    "$ref": "ClientUserInvitation"
                  },
                  "parameterOrder": [
                    "accountId",
                    "clientAccountId"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "accountId": {
                      "description": "Numerical account ID of the client's sponsor buyer. (required)",
                      "location": "path",
                      "required": true,
                      "format": "int64",
                      "type": "string"
                    },
                    "clientAccountId": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "format": "int64",
                      "description": "Numerical account ID of the client buyer that the user should be associated with. (required)"
                    }
                  },
                  "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations",
                  "id": "adexchangebuyer2.accounts.clients.invitations.create"
                },
                "list": {
                  "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations",
                  "parameters": {
                    "accountId": {
                      "type": "string",
                      "description": "Numerical account ID of the client's sponsor buyer. (required)",
                      "format": "int64",
                      "required": true,
                      "location": "path"
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "Requested page size. Server may return fewer clients than requested. If unspecified, server will pick an appropriate default."
                    },
                    "pageToken": {
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListClientUserInvitationsResponse.nextPageToken returned from the previous call to the clients.invitations.list method.",
                      "location": "query",
                      "type": "string"
                    },
                    "clientAccountId": {
                      "description": "Numerical account ID of the client buyer to list invitations for. (required) You must either specify a string representation of a numerical account identifier or the `-` character to list all the invitations for all the clients of a given sponsor buyer.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "id": "adexchangebuyer2.accounts.clients.invitations.list",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListClientUserInvitationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "parameterOrder": [
                    "accountId",
                    "clientAccountId"
                  ],
                  "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations",
                  "description": "Lists all the client users invitations for a client with a given account ID."
                }
              }
            },
            "users": {
              "methods": {
                "list": {
                  "description": "Lists all the known client users for a specified sponsor buyer account ID.",
                  "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "response": {
                    "$ref": "ListClientUsersResponse"
                  },
                  "parameters": {
                    "clientAccountId": {
                      "description": "The account ID of the client buyer to list users for. (required) You must specify either a string representation of a numerical account identifier or the `-` character to list all the client users for all the clients of a given sponsor buyer.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    },
                    "accountId": {
                      "format": "int64",
                      "description": "Numerical account ID of the sponsor buyer of the client to list users for. (required)",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    },
                    "pageToken": {
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the accounts.clients.users.list method.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "parameterOrder": [
                    "accountId",
                    "clientAccountId"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users",
                  "id": "adexchangebuyer2.accounts.clients.users.list"
                },
                "update": {
                  "id": "adexchangebuyer2.accounts.clients.users.update",
                  "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}",
                  "description": "Updates an existing client user. Only the user status can be changed on update.",
                  "parameters": {
                    "clientAccountId": {
                      "location": "path",
                      "description": "Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)",
                      "format": "int64",
                      "type": "string",
                      "required": true
                    },
                    "userId": {
                      "format": "int64",
                      "type": "string",
                      "location": "path",
                      "description": "Numerical identifier of the user to retrieve. (required)",
                      "required": true
                    },
                    "accountId": {
                      "format": "int64",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "Numerical account ID of the client's sponsor buyer. (required)"
                    }
                  },
                  "request": {
                    "$ref": "ClientUser"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}",
                  "parameterOrder": [
                    "accountId",
                    "clientAccountId",
                    "userId"
                  ],
                  "response": {
                    "$ref": "ClientUser"
                  },
                  "httpMethod": "PUT"
                },
                "get": {
                  "response": {
                    "$ref": "ClientUser"
                  },
                  "description": "Retrieves an existing client user.",
                  "httpMethod": "GET",
                  "path": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}",
                  "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "id": "adexchangebuyer2.accounts.clients.users.get",
                  "parameterOrder": [
                    "accountId",
                    "clientAccountId",
                    "userId"
                  ],
                  "parameters": {
                    "userId": {
                      "description": "Numerical identifier of the user to retrieve. (required)",
                      "location": "path",
                      "type": "string",
                      "format": "int64",
                      "required": true
                    },
                    "clientAccountId": {
                      "format": "int64",
                      "required": true,
                      "description": "Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)",
                      "type": "string",
                      "location": "path"
                    },
                    "accountId": {
                      "format": "int64",
                      "type": "string",
                      "description": "Numerical account ID of the client's sponsor buyer. (required)",
                      "location": "path",
                      "required": true
                    }
                  }
                }
              }
            }
          }
        },
        "proposals": {
          "methods": {
            "cancelNegotiation": {
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameters": {
                "accountId": {
                  "location": "path",
                  "type": "string",
                  "description": "Account ID of the buyer.",
                  "required": true
                },
                "proposalId": {
                  "description": "The ID of the proposal to cancel negotiation for.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "httpMethod": "POST",
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation",
              "id": "adexchangebuyer2.accounts.proposals.cancelNegotiation",
              "description": "Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally.",
              "request": {
                "$ref": "CancelNegotiationRequest"
              },
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation",
              "response": {
                "$ref": "Proposal"
              }
            },
            "list": {
              "path": "v2beta1/accounts/{accountId}/proposals",
              "flatPath": "v2beta1/accounts/{accountId}/proposals",
              "id": "adexchangebuyer2.accounts.proposals.list",
              "description": "List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats' proposals by specifying the ChildSeat's accountId in the request path.",
              "parameterOrder": [
                "accountId"
              ],
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The page token as returned from ListProposalsResponse."
                },
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                  "type": "integer"
                },
                "accountId": {
                  "location": "path",
                  "description": "Account ID of the buyer.",
                  "required": true,
                  "type": "string"
                },
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered."
                },
                "filterSyntax": {
                  "enum": [
                    "FILTER_SYNTAX_UNSPECIFIED",
                    "PQL",
                    "LIST_FILTER"
                  ],
                  "location": "query",
                  "enumDescriptions": [
                    "A placeholder for an undefined filter syntax.",
                    "PQL query syntax. Visit https://developers.google.com/ad-manager/api/pqlreference for PQL documentation and examples.",
                    "API list filtering syntax. Read about syntax and usage at https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters."
                  ],
                  "type": "string",
                  "description": "Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER."
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "ListProposalsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ]
            },
            "accept": {
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameters": {
                "accountId": {
                  "description": "Account ID of the buyer.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "proposalId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The ID of the proposal to accept."
                }
              },
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}:accept",
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "description": "Mark the proposal as accepted at the given revision number. If the number does not match the server's revision number an `ABORTED` error message will be returned. This call updates the proposal_state from `PROPOSED` to `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`. Upon calling this endpoint, the buyer implicitly agrees to the terms and conditions optionally set within the proposal by the publisher.",
              "response": {
                "$ref": "Proposal"
              },
              "httpMethod": "POST",
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:accept",
              "id": "adexchangebuyer2.accounts.proposals.accept",
              "request": {
                "$ref": "AcceptProposalRequest"
              }
            },
            "get": {
              "description": "Gets a proposal given its ID. The proposal is returned at its head revision.",
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "httpMethod": "GET",
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}",
              "id": "adexchangebuyer2.accounts.proposals.get",
              "parameters": {
                "accountId": {
                  "required": true,
                  "type": "string",
                  "description": "Account ID of the buyer.",
                  "location": "path"
                },
                "proposalId": {
                  "type": "string",
                  "description": "The unique ID of the proposal",
                  "location": "path",
                  "required": true
                }
              },
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}",
              "response": {
                "$ref": "Proposal"
              }
            },
            "completeSetup": {
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup",
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "id": "adexchangebuyer2.accounts.proposals.completeSetup",
              "response": {
                "$ref": "Proposal"
              },
              "httpMethod": "POST",
              "description": "You can opt-in to manually update proposals to indicate that setup is complete. By default, proposal setup is automatically completed after their deals are finalized. Contact your Technical Account Manager to opt in. Buyers can call this method when the proposal has been finalized, and all the required creatives have been uploaded using the Creatives API. This call updates the `is_setup_completed` field on the deals in the proposal, and notifies the seller. The server then advances the revision number of the most recent proposal. To mark an individual deal as ready to serve, call `buyers.finalizedDeals.setReadyToServe` in the Marketplace API.",
              "request": {
                "$ref": "CompleteSetupRequest"
              },
              "parameters": {
                "accountId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Account ID of the buyer."
                },
                "proposalId": {
                  "required": true,
                  "description": "The ID of the proposal to mark as setup completed.",
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ]
            },
            "resume": {
              "id": "adexchangebuyer2.accounts.proposals.resume",
              "response": {
                "$ref": "Proposal"
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameters": {
                "proposalId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The ID of the proposal to resume."
                },
                "accountId": {
                  "required": true,
                  "description": "Account ID of the buyer.",
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}:resume",
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "ResumeProposalRequest"
              },
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:resume",
              "description": "Update the given proposal to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all deals in the proposal. Note that if the `has_seller_paused` bit is also set, serving will not resume until the seller also resumes. It is a no-op to resume an already-running proposal. It is an error to call ResumeProposal for a proposal that is not finalized or renegotiating."
            },
            "update": {
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "request": {
                "$ref": "Proposal"
              },
              "description": "Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in `proposal.proposal_revision`, an `ABORTED` error message will be returned. Only the buyer-modifiable fields of the proposal will be updated. Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal does not have a `deal_id`, the server will assign a new unique ID and create the deal. If passed-in deal has a `deal_id`, it will be updated to match the passed-in copy. Any existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a `deal_id` not present at head.",
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}",
              "id": "adexchangebuyer2.accounts.proposals.update",
              "parameters": {
                "accountId": {
                  "type": "string",
                  "required": true,
                  "description": "Account ID of the buyer.",
                  "location": "path"
                },
                "proposalId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the proposal.",
                  "type": "string"
                }
              },
              "httpMethod": "PUT",
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "response": {
                "$ref": "Proposal"
              }
            },
            "create": {
              "request": {
                "$ref": "Proposal"
              },
              "response": {
                "$ref": "Proposal"
              },
              "path": "v2beta1/accounts/{accountId}/proposals",
              "parameterOrder": [
                "accountId"
              ],
              "parameters": {
                "accountId": {
                  "required": true,
                  "type": "string",
                  "description": "Account ID of the buyer.",
                  "location": "path"
                }
              },
              "flatPath": "v2beta1/accounts/{accountId}/proposals",
              "description": "Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server.",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "id": "adexchangebuyer2.accounts.proposals.create",
              "httpMethod": "POST"
            },
            "pause": {
              "id": "adexchangebuyer2.accounts.proposals.pause",
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}:pause",
              "description": "Update the given proposal to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all deals in the proposal. It is a no-op to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.",
              "response": {
                "$ref": "Proposal"
              },
              "request": {
                "$ref": "PauseProposalRequest"
              },
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameters": {
                "proposalId": {
                  "type": "string",
                  "description": "The ID of the proposal to pause.",
                  "location": "path",
                  "required": true
                },
                "accountId": {
                  "description": "Account ID of the buyer.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:pause"
            },
            "addNote": {
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "response": {
                "$ref": "Note"
              },
              "parameters": {
                "accountId": {
                  "required": true,
                  "description": "Account ID of the buyer.",
                  "location": "path",
                  "type": "string"
                },
                "proposalId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The ID of the proposal to attach the note to."
                }
              },
              "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote",
              "id": "adexchangebuyer2.accounts.proposals.addNote",
              "description": "Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note.",
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "httpMethod": "POST",
              "path": "v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote",
              "request": {
                "$ref": "AddNoteRequest"
              }
            }
          }
        },
        "creatives": {
          "resources": {
            "dealAssociations": {
              "methods": {
                "remove": {
                  "path": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove",
                  "parameterOrder": [
                    "accountId",
                    "creativeId"
                  ],
                  "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove",
                  "id": "adexchangebuyer2.accounts.creatives.dealAssociations.remove",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "parameters": {
                    "creativeId": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "The ID of the creative associated with the deal."
                    },
                    "accountId": {
                      "description": "The account the creative belongs to.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "request": {
                    "$ref": "RemoveDealAssociationRequest"
                  },
                  "description": "Remove the association between a deal and a creative.",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "add": {
                  "path": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add",
                  "request": {
                    "$ref": "AddDealAssociationRequest"
                  },
                  "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add",
                  "id": "adexchangebuyer2.accounts.creatives.dealAssociations.add",
                  "description": "Associate an existing deal with a creative.",
                  "parameters": {
                    "accountId": {
                      "location": "path",
                      "type": "string",
                      "description": "The account the creative belongs to.",
                      "required": true
                    },
                    "creativeId": {
                      "description": "The ID of the creative associated with the deal.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "accountId",
                    "creativeId"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "httpMethod": "POST"
                },
                "list": {
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "description": "List all creative-deal associations.",
                  "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations",
                  "response": {
                    "$ref": "ListDealAssociationsResponse"
                  },
                  "id": "adexchangebuyer2.accounts.creatives.dealAssociations.list",
                  "parameterOrder": [
                    "accountId",
                    "creativeId"
                  ],
                  "path": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations",
                  "httpMethod": "GET",
                  "parameters": {
                    "creativeId": {
                      "description": "The creative ID to list the associations from. Specify \"-\" to list all creatives under the above account.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    },
                    "query": {
                      "description": "An optional query string to filter deal associations. If no filter is specified, all associations will be returned. Supported queries are: - accountId=*account_id_string* - creativeId=*creative_id_string* - dealsId=*deals_id_string* - dealsStatus:{approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus:{approved, conditionally_approved, disapproved, not_checked} Example: 'dealsId=12345 AND dealsStatus:disapproved'",
                      "type": "string",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListDealAssociationsResponse.next_page_token returned from the previous call to 'ListDealAssociations' method.",
                      "type": "string",
                      "location": "query"
                    },
                    "accountId": {
                      "description": "The account to list the associations from. Specify \"-\" to list all creatives the current user has access to.",
                      "location": "path",
                      "type": "string",
                      "required": true
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Requested page size. Server may return fewer associations than requested. If unspecified, server will pick an appropriate default.",
                      "format": "int32",
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "create": {
              "flatPath": "v2beta1/accounts/{accountId}/creatives",
              "path": "v2beta1/accounts/{accountId}/creatives",
              "description": "Creates a creative.",
              "id": "adexchangebuyer2.accounts.creatives.create",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameterOrder": [
                "accountId"
              ],
              "request": {
                "$ref": "Creative"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Creative"
              },
              "parameters": {
                "accountId": {
                  "type": "string",
                  "description": "The account that this creative belongs to. Can be used to filter the response of the creatives.list method.",
                  "required": true,
                  "location": "path"
                },
                "duplicateIdMode": {
                  "enumDescriptions": [
                    "Recommended. This means that an ID will be unique to a single creative. Multiple creatives will not share an ID.",
                    "Not recommended. Using this option will allow multiple creatives to share the same ID. Get and Update requests will not be possible for any ID that has more than one creative associated. (List will still function.) This is only intended for backwards compatibility in cases where a single ID is already shared by multiple creatives from previous APIs."
                  ],
                  "location": "query",
                  "enum": [
                    "NO_DUPLICATES",
                    "FORCE_ENABLE_DUPLICATE_IDS"
                  ],
                  "description": "Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative).",
                  "type": "string"
                }
              }
            },
            "get": {
              "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}",
              "id": "adexchangebuyer2.accounts.creatives.get",
              "response": {
                "$ref": "Creative"
              },
              "parameterOrder": [
                "accountId",
                "creativeId"
              ],
              "path": "v2beta1/accounts/{accountId}/creatives/{creativeId}",
              "description": "Gets a creative.",
              "httpMethod": "GET",
              "parameters": {
                "accountId": {
                  "location": "path",
                  "type": "string",
                  "description": "The account the creative belongs to.",
                  "required": true
                },
                "creativeId": {
                  "required": true,
                  "type": "string",
                  "description": "The ID of the creative to retrieve.",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ]
            },
            "stopWatching": {
              "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching",
              "id": "adexchangebuyer2.accounts.creatives.stopWatching",
              "parameterOrder": [
                "accountId",
                "creativeId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "creativeId": {
                  "location": "path",
                  "description": "The creative ID of the creative to stop notifications for. Specify \"-\" to specify stopping account level notifications.",
                  "required": true,
                  "type": "string"
                },
                "accountId": {
                  "required": true,
                  "description": "The account of the creative to stop notifications for.",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching",
              "response": {
                "$ref": "Empty"
              },
              "description": "Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "request": {
                "$ref": "StopWatchingCreativeRequest"
              }
            },
            "watch": {
              "httpMethod": "POST",
              "parameterOrder": [
                "accountId",
                "creativeId"
              ],
              "parameters": {
                "accountId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The account of the creative to watch."
                },
                "creativeId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The creative ID to watch for status changes. Specify \"-\" to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a single notification will be sent to the creative-level notification topic."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "path": "v2beta1/accounts/{accountId}/creatives/{creativeId}:watch",
              "request": {
                "$ref": "WatchCreativeRequest"
              },
              "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}:watch",
              "id": "adexchangebuyer2.accounts.creatives.watch",
              "description": "Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.",
              "response": {
                "$ref": "Empty"
              }
            },
            "update": {
              "path": "v2beta1/accounts/{accountId}/creatives/{creativeId}",
              "parameterOrder": [
                "accountId",
                "creativeId"
              ],
              "response": {
                "$ref": "Creative"
              },
              "parameters": {
                "accountId": {
                  "required": true,
                  "description": "The account that this creative belongs to. Can be used to filter the response of the creatives.list method.",
                  "type": "string",
                  "location": "path"
                },
                "creativeId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method."
                }
              },
              "request": {
                "$ref": "Creative"
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}",
              "description": "Updates a creative.",
              "id": "adexchangebuyer2.accounts.creatives.update",
              "httpMethod": "PUT"
            },
            "list": {
              "id": "adexchangebuyer2.accounts.creatives.list",
              "parameters": {
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "type": "integer",
                  "description": "Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available through another call. If unspecified, server will pick an appropriate default. Acceptable values are 1 to 1000, inclusive."
                },
                "accountId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The account to list the creatives from. Specify \"-\" to list all creatives the current user has access to."
                },
                "query": {
                  "location": "query",
                  "description": "An optional query string to filter creatives. If no filter is specified, all active creatives will be returned. Supported queries are: - accountId=*account_id_string* - creativeId=*creative_id_string* - dealsStatus: {approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus: {approved, conditionally_approved, disapproved, not_checked} - attribute: {a numeric attribute from the list of attributes} - disapprovalReason: {a reason from DisapprovalReason} Example: 'accountId=12345 AND (dealsStatus:disapproved AND disapprovalReason:unacceptable_content) OR attribute:47'",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.next_page_token returned from the previous call to 'ListCreatives' method.",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "accountId"
              ],
              "response": {
                "$ref": "ListCreativesResponse"
              },
              "description": "Lists creatives.",
              "path": "v2beta1/accounts/{accountId}/creatives",
              "flatPath": "v2beta1/accounts/{accountId}/creatives",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ]
            }
          }
        },
        "finalizedProposals": {
          "methods": {
            "resume": {
              "httpMethod": "POST",
              "request": {
                "$ref": "ResumeProposalDealsRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "description": "Update given deals to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.resume endpoint. It is a no-op to resume running deals or deals paused by the other party. It is an error to call ResumeProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.",
              "parameters": {
                "accountId": {
                  "location": "path",
                  "required": true,
                  "description": "Account ID of the buyer.",
                  "type": "string"
                },
                "proposalId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The proposal_id of the proposal containing the deals."
                }
              },
              "flatPath": "v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume",
              "id": "adexchangebuyer2.accounts.finalizedProposals.resume",
              "path": "v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume",
              "response": {
                "$ref": "Proposal"
              },
              "parameterOrder": [
                "accountId",
                "proposalId"
              ]
            },
            "pause": {
              "request": {
                "$ref": "PauseProposalDealsRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "description": "Update given deals to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.pause endpoint. It is a no-op to pause already-paused deals. It is an error to call PauseProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.",
              "httpMethod": "POST",
              "parameters": {
                "proposalId": {
                  "required": true,
                  "location": "path",
                  "description": "The proposal_id of the proposal containing the deals.",
                  "type": "string"
                },
                "accountId": {
                  "required": true,
                  "description": "Account ID of the buyer.",
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "accountId",
                "proposalId"
              ],
              "flatPath": "v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause",
              "id": "adexchangebuyer2.accounts.finalizedProposals.pause",
              "path": "v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause",
              "response": {
                "$ref": "Proposal"
              }
            },
            "list": {
              "parameters": {
                "filterSyntax": {
                  "description": "Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER.",
                  "location": "query",
                  "enumDescriptions": [
                    "A placeholder for an undefined filter syntax.",
                    "PQL query syntax. Visit https://developers.google.com/ad-manager/api/pqlreference for PQL documentation and examples.",
                    "API list filtering syntax. Read about syntax and usage at https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters."
                  ],
                  "enum": [
                    "FILTER_SYNTAX_UNSPECIFIED",
                    "PQL",
                    "LIST_FILTER"
                  ],
                  "type": "string"
                },
                "accountId": {
                  "description": "Account ID of the buyer.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "pageToken": {
                  "description": "The page token as returned from ListProposalsResponse.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                  "location": "query"
                },
                "filter": {
                  "type": "string",
                  "description": "An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered.",
                  "location": "query"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "response": {
                "$ref": "ListProposalsResponse"
              },
              "description": "List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned.",
              "path": "v2beta1/accounts/{accountId}/finalizedProposals",
              "flatPath": "v2beta1/accounts/{accountId}/finalizedProposals",
              "httpMethod": "GET",
              "id": "adexchangebuyer2.accounts.finalizedProposals.list",
              "parameterOrder": [
                "accountId"
              ]
            }
          }
        }
      }
    },
    "bidders": {
      "resources": {
        "accounts": {
          "resources": {
            "filterSets": {
              "methods": {
                "create": {
                  "parameterOrder": [
                    "ownerName"
                  ],
                  "id": "adexchangebuyer2.bidders.accounts.filterSets.create",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "request": {
                    "$ref": "FilterSet"
                  },
                  "description": "Creates the specified filter set for the account with the given account ID.",
                  "httpMethod": "POST",
                  "path": "v2beta1/{+ownerName}/filterSets",
                  "parameters": {
                    "isTransient": {
                      "description": "Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after creation.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "ownerName": {
                      "description": "Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`",
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^bidders/[^/]+/accounts/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "FilterSet"
                  },
                  "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets"
                },
                "list": {
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "ownerName": {
                      "type": "string",
                      "description": "Name of the owner (bidder or account) of the filter sets to be listed. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`",
                      "required": true,
                      "pattern": "^bidders/[^/]+/accounts/[^/]+$",
                      "location": "path"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                      "type": "integer"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListFilterSetsResponse.nextPageToken returned from the previous call to the accounts.filterSets.list method."
                    }
                  },
                  "description": "Lists all filter sets for the account with the given account ID.",
                  "response": {
                    "$ref": "ListFilterSetsResponse"
                  },
                  "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets",
                  "path": "v2beta1/{+ownerName}/filterSets",
                  "id": "adexchangebuyer2.bidders.accounts.filterSets.list",
                  "parameterOrder": [
                    "ownerName"
                  ]
                },
                "get": {
                  "path": "v2beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}",
                  "description": "Retrieves the requested filter set for the account with the given account ID.",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "adexchangebuyer2.bidders.accounts.filterSets.get",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "Full name of the resource being requested. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                      "location": "path"
                    }
                  },
                  "response": {
                    "$ref": "FilterSet"
                  }
                },
                "delete": {
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                      "description": "Full name of the resource to delete. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "adexchangebuyer2.bidders.accounts.filterSets.delete",
                  "httpMethod": "DELETE",
                  "path": "v2beta1/{+name}",
                  "description": "Deletes the requested filter set from the account with the given account ID."
                }
              },
              "resources": {
                "impressionMetrics": {
                  "methods": {
                    "list": {
                      "description": "Lists all metrics that are measured in terms of number of impressions.",
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "parameterOrder": [
                        "filterSetName"
                      ],
                      "path": "v2beta1/{+filterSetName}/impressionMetrics",
                      "httpMethod": "GET",
                      "parameters": {
                        "pageSize": {
                          "type": "integer",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query",
                          "format": "int32"
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to the impressionMetrics.list method.",
                          "location": "query"
                        },
                        "filterSetName": {
                          "location": "path",
                          "type": "string",
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                          "required": true
                        }
                      },
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/impressionMetrics",
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.impressionMetrics.list",
                      "response": {
                        "$ref": "ListImpressionMetricsResponse"
                      }
                    }
                  }
                },
                "losingBids": {
                  "methods": {
                    "list": {
                      "parameterOrder": [
                        "filterSetName"
                      ],
                      "description": "List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.",
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the losingBids.list method."
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "location": "query",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default."
                        },
                        "filterSetName": {
                          "location": "path",
                          "type": "string",
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                          "required": true,
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "response": {
                        "$ref": "ListLosingBidsResponse"
                      },
                      "httpMethod": "GET",
                      "path": "v2beta1/{+filterSetName}/losingBids",
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/losingBids",
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.losingBids.list"
                    }
                  }
                },
                "filteredBidRequests": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "filterSetName": {
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$"
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to the filteredBidRequests.list method."
                        },
                        "pageSize": {
                          "format": "int32",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "type": "integer",
                          "location": "query"
                        }
                      },
                      "description": "List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.",
                      "httpMethod": "GET",
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBidRequests",
                      "parameterOrder": [
                        "filterSetName"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.filteredBidRequests.list",
                      "path": "v2beta1/{+filterSetName}/filteredBidRequests",
                      "response": {
                        "$ref": "ListFilteredBidRequestsResponse"
                      }
                    }
                  }
                },
                "bidResponsesWithoutBids": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "filterSetName": {
                          "type": "string",
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "required": true,
                          "location": "path",
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$"
                        },
                        "pageToken": {
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call to the bidResponsesWithoutBids.list method.",
                          "type": "string",
                          "location": "query"
                        },
                        "pageSize": {
                          "format": "int32",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query",
                          "type": "integer"
                        }
                      },
                      "parameterOrder": [
                        "filterSetName"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "ListBidResponsesWithoutBidsResponse"
                      },
                      "path": "v2beta1/{+filterSetName}/bidResponsesWithoutBids",
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/bidResponsesWithoutBids",
                      "description": "List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.",
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.bidResponsesWithoutBids.list"
                    }
                  }
                },
                "bidMetrics": {
                  "methods": {
                    "list": {
                      "httpMethod": "GET",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the bidMetrics.list method."
                        },
                        "filterSetName": {
                          "required": true,
                          "location": "path",
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                          "type": "string",
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "format": "int32",
                          "location": "query"
                        }
                      },
                      "description": "Lists all metrics that are measured in terms of number of bids.",
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/bidMetrics",
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.bidMetrics.list",
                      "parameterOrder": [
                        "filterSetName"
                      ],
                      "response": {
                        "$ref": "ListBidMetricsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "path": "v2beta1/{+filterSetName}/bidMetrics"
                    }
                  }
                },
                "bidResponseErrors": {
                  "methods": {
                    "list": {
                      "httpMethod": "GET",
                      "path": "v2beta1/{+filterSetName}/bidResponseErrors",
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "description": "List all errors that occurred in bid responses, with the number of bid responses affected for each reason.",
                      "parameters": {
                        "filterSetName": {
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                          "type": "string",
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "location": "path",
                          "required": true
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "format": "int32",
                          "location": "query"
                        },
                        "pageToken": {
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to the bidResponseErrors.list method.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "ListBidResponseErrorsResponse"
                      },
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/bidResponseErrors",
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.bidResponseErrors.list",
                      "parameterOrder": [
                        "filterSetName"
                      ]
                    }
                  }
                },
                "filteredBids": {
                  "methods": {
                    "list": {
                      "path": "v2beta1/{+filterSetName}/filteredBids",
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBids",
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.filteredBids.list",
                      "httpMethod": "GET",
                      "parameters": {
                        "pageToken": {
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the filteredBids.list method.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "location": "query",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default."
                        },
                        "filterSetName": {
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                          "type": "string",
                          "required": true,
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "location": "path"
                        }
                      },
                      "parameterOrder": [
                        "filterSetName"
                      ],
                      "response": {
                        "$ref": "ListFilteredBidsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "description": "List all reasons for which bids were filtered, with the number of bids filtered for each reason."
                    }
                  },
                  "resources": {
                    "creatives": {
                      "methods": {
                        "list": {
                          "response": {
                            "$ref": "ListCreativeStatusBreakdownByCreativeResponse"
                          },
                          "parameters": {
                            "filterSetName": {
                              "type": "string",
                              "location": "path",
                              "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                              "required": true,
                              "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$"
                            },
                            "pageToken": {
                              "type": "string",
                              "location": "query",
                              "description": "A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the previous call to the filteredBids.creatives.list method."
                            },
                            "creativeStatusId": {
                              "type": "integer",
                              "description": "The ID of the creative status for which to retrieve a breakdown by creative. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).",
                              "required": true,
                              "location": "path",
                              "format": "int32"
                            },
                            "pageSize": {
                              "format": "int32",
                              "type": "integer",
                              "location": "query",
                              "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default."
                            }
                          },
                          "description": "List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.",
                          "httpMethod": "GET",
                          "parameterOrder": [
                            "filterSetName",
                            "creativeStatusId"
                          ],
                          "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/creatives",
                          "id": "adexchangebuyer2.bidders.accounts.filterSets.filteredBids.creatives.list",
                          "path": "v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives",
                          "scopes": [
                            "https://www.googleapis.com/auth/adexchange.buyer"
                          ]
                        }
                      }
                    },
                    "details": {
                      "methods": {
                        "list": {
                          "parameters": {
                            "pageSize": {
                              "location": "query",
                              "format": "int32",
                              "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                              "type": "integer"
                            },
                            "pageToken": {
                              "type": "string",
                              "location": "query",
                              "description": "A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the previous call to the filteredBids.details.list method."
                            },
                            "creativeStatusId": {
                              "required": true,
                              "description": "The ID of the creative status for which to retrieve a breakdown by detail. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.",
                              "type": "integer",
                              "format": "int32",
                              "location": "path"
                            },
                            "filterSetName": {
                              "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                              "required": true,
                              "type": "string",
                              "location": "path",
                              "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                            }
                          },
                          "path": "v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details",
                          "parameterOrder": [
                            "filterSetName",
                            "creativeStatusId"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/adexchange.buyer"
                          ],
                          "httpMethod": "GET",
                          "description": "List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.",
                          "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/details",
                          "id": "adexchangebuyer2.bidders.accounts.filterSets.filteredBids.details.list",
                          "response": {
                            "$ref": "ListCreativeStatusBreakdownByDetailResponse"
                          }
                        }
                      }
                    }
                  }
                },
                "nonBillableWinningBids": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "filterSetName": {
                          "location": "path",
                          "pattern": "^bidders/[^/]+/accounts/[^/]+/filterSets/[^/]+$",
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "required": true,
                          "type": "string"
                        },
                        "pageToken": {
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call to the nonBillableWinningBids.list method.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "format": "int32"
                        }
                      },
                      "path": "v2beta1/{+filterSetName}/nonBillableWinningBids",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "ListNonBillableWinningBidsResponse"
                      },
                      "parameterOrder": [
                        "filterSetName"
                      ],
                      "description": "List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.",
                      "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/nonBillableWinningBids",
                      "id": "adexchangebuyer2.bidders.accounts.filterSets.nonBillableWinningBids.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "filterSets": {
          "resources": {
            "filteredBidRequests": {
              "methods": {
                "list": {
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBidRequests",
                  "httpMethod": "GET",
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to the filteredBidRequests.list method."
                    },
                    "pageSize": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                      "location": "query"
                    },
                    "filterSetName": {
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                      "required": true
                    }
                  },
                  "id": "adexchangebuyer2.bidders.filterSets.filteredBidRequests.list",
                  "response": {
                    "$ref": "ListFilteredBidRequestsResponse"
                  },
                  "description": "List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "path": "v2beta1/{+filterSetName}/filteredBidRequests"
                }
              }
            },
            "nonBillableWinningBids": {
              "methods": {
                "list": {
                  "response": {
                    "$ref": "ListNonBillableWinningBidsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "parameters": {
                    "filterSetName": {
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                    },
                    "pageSize": {
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call to the nonBillableWinningBids.list method.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "httpMethod": "GET",
                  "path": "v2beta1/{+filterSetName}/nonBillableWinningBids",
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "description": "List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.",
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/nonBillableWinningBids",
                  "id": "adexchangebuyer2.bidders.filterSets.nonBillableWinningBids.list"
                }
              }
            },
            "bidMetrics": {
              "methods": {
                "list": {
                  "parameters": {
                    "filterSetName": {
                      "required": true,
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                    },
                    "pageToken": {
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the bidMetrics.list method.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                      "location": "query"
                    }
                  },
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/bidMetrics",
                  "description": "Lists all metrics that are measured in terms of number of bids.",
                  "id": "adexchangebuyer2.bidders.filterSets.bidMetrics.list",
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "response": {
                    "$ref": "ListBidMetricsResponse"
                  },
                  "path": "v2beta1/{+filterSetName}/bidMetrics",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "httpMethod": "GET"
                }
              }
            },
            "losingBids": {
              "methods": {
                "list": {
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/losingBids",
                  "httpMethod": "GET",
                  "id": "adexchangebuyer2.bidders.filterSets.losingBids.list",
                  "parameters": {
                    "pageSize": {
                      "location": "query",
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the losingBids.list method.",
                      "location": "query",
                      "type": "string"
                    },
                    "filterSetName": {
                      "location": "path",
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                      "required": true,
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                      "type": "string"
                    }
                  },
                  "description": "List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.",
                  "path": "v2beta1/{+filterSetName}/losingBids",
                  "response": {
                    "$ref": "ListLosingBidsResponse"
                  },
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ]
                }
              }
            },
            "impressionMetrics": {
              "methods": {
                "list": {
                  "path": "v2beta1/{+filterSetName}/impressionMetrics",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "description": "Lists all metrics that are measured in terms of number of impressions.",
                  "response": {
                    "$ref": "ListImpressionMetricsResponse"
                  },
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/impressionMetrics",
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to the impressionMetrics.list method.",
                      "location": "query"
                    },
                    "filterSetName": {
                      "type": "string",
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "id": "adexchangebuyer2.bidders.filterSets.impressionMetrics.list"
                }
              }
            },
            "filteredBids": {
              "resources": {
                "creatives": {
                  "methods": {
                    "list": {
                      "parameterOrder": [
                        "filterSetName",
                        "creativeStatusId"
                      ],
                      "path": "v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives",
                      "id": "adexchangebuyer2.bidders.filterSets.filteredBids.creatives.list",
                      "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/creatives",
                      "response": {
                        "$ref": "ListCreativeStatusBreakdownByCreativeResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ],
                      "description": "List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.",
                      "httpMethod": "GET",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the previous call to the filteredBids.creatives.list method."
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query"
                        },
                        "creativeStatusId": {
                          "required": true,
                          "location": "path",
                          "type": "integer",
                          "description": "The ID of the creative status for which to retrieve a breakdown by creative. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).",
                          "format": "int32"
                        },
                        "filterSetName": {
                          "type": "string",
                          "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                          "required": true,
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "location": "path"
                        }
                      }
                    }
                  }
                },
                "details": {
                  "methods": {
                    "list": {
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "ListCreativeStatusBreakdownByDetailResponse"
                      },
                      "path": "v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details",
                      "parameterOrder": [
                        "filterSetName",
                        "creativeStatusId"
                      ],
                      "description": "List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.",
                      "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/details",
                      "id": "adexchangebuyer2.bidders.filterSets.filteredBids.details.list",
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the previous call to the filteredBids.details.list method.",
                          "type": "string"
                        },
                        "filterSetName": {
                          "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "pattern": "^bidders/[^/]+/filterSets/[^/]+$"
                        },
                        "creativeStatusId": {
                          "required": true,
                          "description": "The ID of the creative status for which to retrieve a breakdown by detail. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.",
                          "location": "path",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/adexchange.buyer"
                      ]
                    }
                  }
                }
              },
              "methods": {
                "list": {
                  "description": "List all reasons for which bids were filtered, with the number of bids filtered for each reason.",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "response": {
                    "$ref": "ListFilteredBidsResponse"
                  },
                  "httpMethod": "GET",
                  "parameters": {
                    "filterSetName": {
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`"
                    },
                    "pageSize": {
                      "format": "int32",
                      "location": "query",
                      "type": "integer",
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default."
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the filteredBids.list method."
                    }
                  },
                  "path": "v2beta1/{+filterSetName}/filteredBids",
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBids",
                  "id": "adexchangebuyer2.bidders.filterSets.filteredBids.list"
                }
              }
            },
            "bidResponsesWithoutBids": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call to the bidResponsesWithoutBids.list method.",
                      "location": "query"
                    },
                    "filterSetName": {
                      "required": true,
                      "location": "path",
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                      "type": "string",
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$"
                    },
                    "pageSize": {
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "ListBidResponsesWithoutBidsResponse"
                  },
                  "description": "List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.",
                  "httpMethod": "GET",
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/bidResponsesWithoutBids",
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "id": "adexchangebuyer2.bidders.filterSets.bidResponsesWithoutBids.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "path": "v2beta1/{+filterSetName}/bidResponsesWithoutBids"
                }
              }
            },
            "bidResponseErrors": {
              "methods": {
                "list": {
                  "parameterOrder": [
                    "filterSetName"
                  ],
                  "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/bidResponseErrors",
                  "path": "v2beta1/{+filterSetName}/bidResponseErrors",
                  "id": "adexchangebuyer2.bidders.filterSets.bidResponseErrors.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/adexchange.buyer"
                  ],
                  "description": "List all errors that occurred in bid responses, with the number of bid responses affected for each reason.",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListBidResponseErrorsResponse"
                  },
                  "parameters": {
                    "filterSetName": {
                      "description": "Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                      "location": "path",
                      "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                      "type": "string",
                      "required": true
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to the bidResponseErrors.list method.",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default."
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "list": {
              "path": "v2beta1/{+ownerName}/filterSets",
              "httpMethod": "GET",
              "id": "adexchangebuyer2.bidders.filterSets.list",
              "flatPath": "v2beta1/bidders/{biddersId}/filterSets",
              "response": {
                "$ref": "ListFilterSetsResponse"
              },
              "parameters": {
                "ownerName": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^bidders/[^/]+$",
                  "description": "Name of the owner (bidder or account) of the filter sets to be listed. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`"
                },
                "pageToken": {
                  "description": "A token identifying a page of results the server should return. Typically, this is the value of ListFilterSetsResponse.nextPageToken returned from the previous call to the accounts.filterSets.list method.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.",
                  "location": "query",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "description": "Lists all filter sets for the account with the given account ID.",
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameterOrder": [
                "ownerName"
              ]
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                  "description": "Full name of the resource to delete. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                  "type": "string"
                }
              },
              "description": "Deletes the requested filter set from the account with the given account ID.",
              "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}",
              "id": "adexchangebuyer2.bidders.filterSets.delete",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "path": "v2beta1/{+name}",
              "response": {
                "$ref": "Empty"
              }
            },
            "get": {
              "path": "v2beta1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "id": "adexchangebuyer2.bidders.filterSets.get",
              "parameters": {
                "name": {
                  "description": "Full name of the resource being requested. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`",
                  "pattern": "^bidders/[^/]+/filterSets/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Retrieves the requested filter set for the account with the given account ID.",
              "response": {
                "$ref": "FilterSet"
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "httpMethod": "GET",
              "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}"
            },
            "create": {
              "description": "Creates the specified filter set for the account with the given account ID.",
              "id": "adexchangebuyer2.bidders.filterSets.create",
              "parameters": {
                "isTransient": {
                  "description": "Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after creation.",
                  "type": "boolean",
                  "location": "query"
                },
                "ownerName": {
                  "description": "Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`",
                  "type": "string",
                  "location": "path",
                  "pattern": "^bidders/[^/]+$",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/adexchange.buyer"
              ],
              "parameterOrder": [
                "ownerName"
              ],
              "request": {
                "$ref": "FilterSet"
              },
              "httpMethod": "POST",
              "path": "v2beta1/{+ownerName}/filterSets",
              "flatPath": "v2beta1/bidders/{biddersId}/filterSets",
              "response": {
                "$ref": "FilterSet"
              }
            }
          }
        }
      }
    }
  },
  "revision": "20230705"
}

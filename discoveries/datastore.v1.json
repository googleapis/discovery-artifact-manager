{
  "documentationLink": "https://cloud.google.com/datastore/",
  "name": "datastore",
  "ownerName": "Google",
  "revision": "20230307",
  "id": "datastore:v1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        },
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        }
      }
    }
  },
  "description": "Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. ",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "rootUrl": "https://datastore.googleapis.com/",
  "basePath": "",
  "resources": {
    "projects": {
      "resources": {
        "operations": {
          "methods": {
            "delete": {
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "location": "path",
                  "description": "The name of the operation resource to be deleted."
                }
              },
              "id": "datastore.projects.operations.delete",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              }
            },
            "cancel": {
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:cancel",
              "id": "datastore.projects.operations.cancel",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}:cancel",
              "httpMethod": "POST",
              "response": {
                "$ref": "Empty"
              },
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "type": "string",
                  "description": "The name of the operation resource to be cancelled."
                }
              },
              "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
            },
            "get": {
              "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "id": "datastore.projects.operations.get",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "required": true,
                  "description": "The name of the operation resource.",
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "list": {
              "response": {
                "$ref": "GoogleLongrunningListOperationsResponse"
              },
              "flatPath": "v1/projects/{projectsId}/operations",
              "path": "v1/{+name}/operations",
              "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
              "parameters": {
                "filter": {
                  "type": "string",
                  "description": "The standard list filter.",
                  "location": "query"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "The standard list page token.",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "description": "The name of the operation's parent resource.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "id": "datastore.projects.operations.list"
            }
          }
        },
        "indexes": {
          "methods": {
            "delete": {
              "id": "datastore.projects.indexes.delete",
              "description": "Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.",
              "flatPath": "v1/projects/{projectId}/indexes/{indexId}",
              "parameterOrder": [
                "projectId",
                "indexId"
              ],
              "parameters": {
                "indexId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The resource ID of the index to delete."
                },
                "projectId": {
                  "location": "path",
                  "description": "Project ID against which to make the request.",
                  "type": "string",
                  "required": true
                }
              },
              "path": "v1/projects/{projectId}/indexes/{indexId}",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "get": {
              "path": "v1/projects/{projectId}/indexes/{indexId}",
              "httpMethod": "GET",
              "id": "datastore.projects.indexes.get",
              "response": {
                "$ref": "GoogleDatastoreAdminV1Index"
              },
              "description": "Gets an index.",
              "parameterOrder": [
                "projectId",
                "indexId"
              ],
              "flatPath": "v1/projects/{projectId}/indexes/{indexId}",
              "parameters": {
                "projectId": {
                  "type": "string",
                  "required": true,
                  "description": "Project ID against which to make the request.",
                  "location": "path"
                },
                "indexId": {
                  "location": "path",
                  "required": true,
                  "description": "The resource ID of the index to get.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "list": {
              "id": "datastore.projects.indexes.list",
              "description": "Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results.",
              "path": "v1/projects/{projectId}/indexes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "response": {
                "$ref": "GoogleDatastoreAdminV1ListIndexesResponse"
              },
              "flatPath": "v1/projects/{projectId}/indexes",
              "httpMethod": "GET",
              "parameterOrder": [
                "projectId"
              ],
              "parameters": {
                "pageSize": {
                  "description": "The maximum number of items to return. If zero, then all results will be returned.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous List request, if any.",
                  "type": "string",
                  "location": "query"
                },
                "filter": {
                  "type": "string",
                  "location": "query"
                },
                "projectId": {
                  "type": "string",
                  "location": "path",
                  "description": "Project ID against which to make the request.",
                  "required": true
                }
              }
            },
            "create": {
              "parameters": {
                "projectId": {
                  "description": "Project ID against which to make the request.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "v1/projects/{projectId}/indexes",
              "id": "datastore.projects.indexes.create",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ],
              "parameterOrder": [
                "projectId"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "request": {
                "$ref": "GoogleDatastoreAdminV1Index"
              },
              "description": "Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.",
              "flatPath": "v1/projects/{projectId}/indexes"
            }
          }
        }
      },
      "methods": {
        "commit": {
          "description": "Commits a transaction, optionally creating, deleting or modifying some entities.",
          "flatPath": "v1/projects/{projectId}:commit",
          "parameterOrder": [
            "projectId"
          ],
          "response": {
            "$ref": "CommitResponse"
          },
          "request": {
            "$ref": "CommitRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "parameters": {
            "projectId": {
              "location": "path",
              "type": "string",
              "description": "Required. The ID of the project against which to make the request.",
              "required": true
            }
          },
          "path": "v1/projects/{projectId}:commit",
          "httpMethod": "POST",
          "id": "datastore.projects.commit"
        },
        "runAggregationQuery": {
          "response": {
            "$ref": "RunAggregationQueryResponse"
          },
          "request": {
            "$ref": "RunAggregationQueryRequest"
          },
          "httpMethod": "POST",
          "path": "v1/projects/{projectId}:runAggregationQuery",
          "description": "Runs an aggregation query.",
          "flatPath": "v1/projects/{projectId}:runAggregationQuery",
          "id": "datastore.projects.runAggregationQuery",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "parameters": {
            "projectId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Required. The ID of the project against which to make the request."
            }
          },
          "parameterOrder": [
            "projectId"
          ]
        },
        "reserveIds": {
          "parameters": {
            "projectId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Required. The ID of the project against which to make the request."
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "projectId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "path": "v1/projects/{projectId}:reserveIds",
          "id": "datastore.projects.reserveIds",
          "description": "Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.",
          "response": {
            "$ref": "ReserveIdsResponse"
          },
          "flatPath": "v1/projects/{projectId}:reserveIds",
          "request": {
            "$ref": "ReserveIdsRequest"
          }
        },
        "import": {
          "parameters": {
            "projectId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Required. Project ID against which to make the request."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "parameterOrder": [
            "projectId"
          ],
          "response": {
            "$ref": "GoogleLongrunningOperation"
          },
          "httpMethod": "POST",
          "path": "v1/projects/{projectId}:import",
          "id": "datastore.projects.import",
          "description": "Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.",
          "flatPath": "v1/projects/{projectId}:import",
          "request": {
            "$ref": "GoogleDatastoreAdminV1ImportEntitiesRequest"
          }
        },
        "rollback": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "projectId"
          ],
          "id": "datastore.projects.rollback",
          "request": {
            "$ref": "RollbackRequest"
          },
          "parameters": {
            "projectId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Required. The ID of the project against which to make the request."
            }
          },
          "path": "v1/projects/{projectId}:rollback",
          "description": "Rolls back a transaction.",
          "response": {
            "$ref": "RollbackResponse"
          },
          "flatPath": "v1/projects/{projectId}:rollback"
        },
        "allocateIds": {
          "httpMethod": "POST",
          "response": {
            "$ref": "AllocateIdsResponse"
          },
          "path": "v1/projects/{projectId}:allocateIds",
          "id": "datastore.projects.allocateIds",
          "request": {
            "$ref": "AllocateIdsRequest"
          },
          "description": "Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.",
          "flatPath": "v1/projects/{projectId}:allocateIds",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "parameters": {
            "projectId": {
              "type": "string",
              "description": "Required. The ID of the project against which to make the request.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "projectId"
          ]
        },
        "runQuery": {
          "request": {
            "$ref": "RunQueryRequest"
          },
          "response": {
            "$ref": "RunQueryResponse"
          },
          "parameterOrder": [
            "projectId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "projectId": {
              "required": true,
              "description": "Required. The ID of the project against which to make the request.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "datastore.projects.runQuery",
          "path": "v1/projects/{projectId}:runQuery",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "description": "Queries for entities.",
          "flatPath": "v1/projects/{projectId}:runQuery"
        },
        "export": {
          "parameterOrder": [
            "projectId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "httpMethod": "POST",
          "id": "datastore.projects.export",
          "flatPath": "v1/projects/{projectId}:export",
          "parameters": {
            "projectId": {
              "required": true,
              "description": "Required. Project ID against which to make the request.",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "GoogleLongrunningOperation"
          },
          "request": {
            "$ref": "GoogleDatastoreAdminV1ExportEntitiesRequest"
          },
          "path": "v1/projects/{projectId}:export",
          "description": "Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage."
        },
        "beginTransaction": {
          "parameters": {
            "projectId": {
              "type": "string",
              "location": "path",
              "description": "Required. The ID of the project against which to make the request.",
              "required": true
            }
          },
          "flatPath": "v1/projects/{projectId}:beginTransaction",
          "path": "v1/projects/{projectId}:beginTransaction",
          "httpMethod": "POST",
          "response": {
            "$ref": "BeginTransactionResponse"
          },
          "request": {
            "$ref": "BeginTransactionRequest"
          },
          "parameterOrder": [
            "projectId"
          ],
          "description": "Begins a new transaction.",
          "id": "datastore.projects.beginTransaction",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "lookup": {
          "httpMethod": "POST",
          "description": "Looks up entities by key.",
          "id": "datastore.projects.lookup",
          "flatPath": "v1/projects/{projectId}:lookup",
          "request": {
            "$ref": "LookupRequest"
          },
          "path": "v1/projects/{projectId}:lookup",
          "parameters": {
            "projectId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Required. The ID of the project against which to make the request."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ],
          "response": {
            "$ref": "LookupResponse"
          },
          "parameterOrder": [
            "projectId"
          ]
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "location": "query",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    }
  },
  "servicePath": "",
  "title": "Cloud Datastore API",
  "version_module": true,
  "protocol": "rest",
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://datastore.mtls.googleapis.com/",
  "schemas": {
    "Key": {
      "id": "Key",
      "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.",
      "properties": {
        "path": {
          "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements.",
          "type": "array",
          "items": {
            "$ref": "PathElement"
          }
        },
        "partitionId": {
          "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition.",
          "$ref": "PartitionId"
        }
      },
      "type": "object"
    },
    "Mutation": {
      "type": "object",
      "id": "Mutation",
      "description": "A mutation to apply to an entity.",
      "properties": {
        "insert": {
          "description": "The entity to insert. The entity must not already exist. The entity key's final path element may be incomplete.",
          "$ref": "Entity"
        },
        "update": {
          "$ref": "Entity",
          "description": "The entity to update. The entity must already exist. Must have a complete key path."
        },
        "updateTime": {
          "description": "The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.",
          "type": "string",
          "format": "google-datetime"
        },
        "baseVersion": {
          "description": "The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.",
          "format": "int64",
          "type": "string"
        },
        "upsert": {
          "$ref": "Entity",
          "description": "The entity to upsert. The entity may or may not already exist. The entity key's final path element may be incomplete."
        },
        "delete": {
          "description": "The key of the entity to delete. The entity may or may not already exist. Must have a complete key path and must not be reserved/read-only.",
          "$ref": "Key"
        }
      }
    },
    "GoogleDatastoreAdminV1RedirectWritesStepDetails": {
      "description": "Details for the `REDIRECT_WRITES` step.",
      "id": "GoogleDatastoreAdminV1RedirectWritesStepDetails",
      "properties": {
        "concurrencyMode": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Pessimistic concurrency.",
            "Optimistic concurrency.",
            "Optimistic concurrency with entity groups."
          ],
          "enum": [
            "CONCURRENCY_MODE_UNSPECIFIED",
            "PESSIMISTIC",
            "OPTIMISTIC",
            "OPTIMISTIC_WITH_ENTITY_GROUPS"
          ],
          "description": "Ths concurrency mode for this database."
        }
      },
      "type": "object"
    },
    "Aggregation": {
      "id": "Aggregation",
      "properties": {
        "alias": {
          "description": "Optional. Optional name of the property to store the result of the aggregation. If not provided, Datastore will pick a default name following the format `property_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT_UP_TO(4) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS property_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT_UP_TO(4) AS property_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to entity property name limitations.",
          "type": "string"
        },
        "count": {
          "$ref": "Count",
          "description": "Count aggregator."
        }
      },
      "type": "object",
      "description": "Defines a aggregation that produces a single result."
    },
    "CompositeFilter": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "AND",
            "OR"
          ],
          "description": "The operator for combining multiple filters.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The results are required to satisfy each of the combined filters.",
            "Documents are required to satisfy at least one of the combined filters."
          ]
        },
        "filters": {
          "description": "The list of filters to combine. Requires: * At least one filter is present.",
          "items": {
            "$ref": "Filter"
          },
          "type": "array"
        }
      },
      "id": "CompositeFilter",
      "description": "A filter that merges multiple other filters using the given operator."
    },
    "CommitResponse": {
      "type": "object",
      "properties": {
        "commitTime": {
          "description": "The transaction commit timestamp. Not set for non-transactional commits.",
          "format": "google-datetime",
          "type": "string"
        },
        "indexUpdates": {
          "type": "integer",
          "format": "int32",
          "description": "The number of index entries updated during the commit, or zero if none were updated."
        },
        "mutationResults": {
          "type": "array",
          "items": {
            "$ref": "MutationResult"
          },
          "description": "The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request."
        }
      },
      "description": "The response for Datastore.Commit.",
      "id": "CommitResponse"
    },
    "AggregationResult": {
      "type": "object",
      "description": "The result of a single bucket from a Datastore aggregation query. The keys of `aggregate_properties` are the same for all results in an aggregation query, unlike entity queries which can have different fields present for each result.",
      "id": "AggregationResult",
      "properties": {
        "aggregateProperties": {
          "type": "object",
          "description": "The result of the aggregation functions, ex: `COUNT(*) AS total_entities`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.",
          "additionalProperties": {
            "$ref": "Value"
          }
        }
      }
    },
    "GoogleLongrunningOperation": {
      "id": "GoogleLongrunningOperation",
      "type": "object",
      "properties": {
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "GoogleDatastoreAdminV1ExportEntitiesRequest": {
      "id": "GoogleDatastoreAdminV1ExportEntitiesRequest",
      "type": "object",
      "properties": {
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Description of what data from the project is included in the export."
        },
        "outputUrlPrefix": {
          "type": "string",
          "description": "Required. Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict."
        },
        "labels": {
          "type": "object",
          "description": "Client-assigned labels.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "The request for google.datastore.admin.v1.DatastoreAdmin.ExportEntities."
    },
    "ReserveIdsResponse": {
      "properties": {},
      "id": "ReserveIdsResponse",
      "type": "object",
      "description": "The response for Datastore.ReserveIds."
    },
    "PropertyOrder": {
      "id": "PropertyOrder",
      "type": "object",
      "description": "The desired order for a specific property.",
      "properties": {
        "direction": {
          "description": "The direction to order by. Defaults to `ASCENDING`.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Ascending.",
            "Descending."
          ],
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ]
        },
        "property": {
          "$ref": "PropertyReference",
          "description": "The property to order by."
        }
      }
    },
    "GoogleDatastoreAdminV1Progress": {
      "properties": {
        "workCompleted": {
          "type": "string",
          "description": "The amount of work that has been completed. Note that this may be greater than work_estimated.",
          "format": "int64"
        },
        "workEstimated": {
          "type": "string",
          "format": "int64",
          "description": "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable."
        }
      },
      "description": "Measures the progress of a particular metric.",
      "type": "object",
      "id": "GoogleDatastoreAdminV1Progress"
    },
    "GoogleDatastoreAdminV1ImportEntitiesMetadata": {
      "type": "object",
      "description": "Metadata for ImportEntities operations.",
      "properties": {
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Description of which entities are being imported."
        },
        "inputUrl": {
          "description": "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.",
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of bytes processed."
        },
        "common": {
          "$ref": "GoogleDatastoreAdminV1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        }
      },
      "id": "GoogleDatastoreAdminV1ImportEntitiesMetadata"
    },
    "Value": {
      "properties": {
        "stringValue": {
          "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.",
          "type": "string"
        },
        "meaning": {
          "description": "The `meaning` field should only be populated for backwards compatibility.",
          "format": "int32",
          "type": "integer"
        },
        "nullValue": {
          "type": "string",
          "description": "A null value.",
          "enum": [
            "NULL_VALUE"
          ],
          "enumDescriptions": [
            "Null value."
          ]
        },
        "integerValue": {
          "description": "An integer value.",
          "format": "int64",
          "type": "string"
        },
        "excludeFromIndexes": {
          "type": "boolean",
          "description": "If the value should be excluded from all indexes including those defined explicitly."
        },
        "geoPointValue": {
          "description": "A geo point value representing a point on the surface of Earth.",
          "$ref": "LatLng"
        },
        "booleanValue": {
          "type": "boolean",
          "description": "A boolean value."
        },
        "blobValue": {
          "format": "byte",
          "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.",
          "type": "string"
        },
        "arrayValue": {
          "description": "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`.",
          "$ref": "ArrayValue"
        },
        "doubleValue": {
          "format": "double",
          "description": "A double value.",
          "type": "number"
        },
        "timestampValue": {
          "format": "google-datetime",
          "type": "string",
          "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down."
        },
        "entityValue": {
          "$ref": "Entity",
          "description": "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key."
        },
        "keyValue": {
          "$ref": "Key",
          "description": "A key value."
        }
      },
      "id": "Value",
      "type": "object",
      "description": "A message that can hold any of the supported value types and associated metadata."
    },
    "RollbackResponse": {
      "properties": {},
      "description": "The response for Datastore.Rollback. (an empty message).",
      "id": "RollbackResponse",
      "type": "object"
    },
    "ReserveIdsRequest": {
      "description": "The request for Datastore.ReserveIds.",
      "properties": {
        "keys": {
          "items": {
            "$ref": "Key"
          },
          "description": "Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated.",
          "type": "array"
        },
        "databaseId": {
          "type": "string",
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."
        }
      },
      "id": "ReserveIdsRequest",
      "type": "object"
    },
    "AllocateIdsResponse": {
      "id": "AllocateIdsResponse",
      "type": "object",
      "properties": {
        "keys": {
          "description": "The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      },
      "description": "The response for Datastore.AllocateIds."
    },
    "GoogleDatastoreAdminV1ImportEntitiesRequest": {
      "description": "The request for google.datastore.admin.v1.DatastoreAdmin.ImportEntities.",
      "id": "GoogleDatastoreAdminV1ImportEntitiesRequest",
      "properties": {
        "inputUrl": {
          "type": "string",
          "description": "Required. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1.ExportEntitiesResponse.output_url."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Client-assigned labels."
        },
        "entityFilter": {
          "description": "Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error will be returned. If no filter is specified then all entities from the export are imported.",
          "$ref": "GoogleDatastoreAdminV1EntityFilter"
        }
      },
      "type": "object"
    },
    "CommitRequest": {
      "id": "CommitRequest",
      "type": "object",
      "description": "The request for Datastore.Commit.",
      "properties": {
        "singleUseTransaction": {
          "$ref": "TransactionOptions",
          "description": "Options for beginning a new transaction for this request. The transaction is committed when the request completes. If specified, TransactionOptions.mode must be TransactionOptions.ReadWrite."
        },
        "databaseId": {
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.",
          "type": "string"
        },
        "transaction": {
          "description": "The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.",
          "type": "string",
          "format": "byte"
        },
        "mode": {
          "type": "string",
          "enum": [
            "MODE_UNSPECIFIED",
            "TRANSACTIONAL",
            "NON_TRANSACTIONAL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Transactional: The mutations are either all applied, or none are applied. Learn about transactions [here](https://cloud.google.com/datastore/docs/concepts/transactions).",
            "Non-transactional: The mutations may not apply as all or none."
          ],
          "description": "The type of commit to perform. Defaults to `TRANSACTIONAL`."
        },
        "mutations": {
          "items": {
            "$ref": "Mutation"
          },
          "description": "The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.",
          "type": "array"
        }
      }
    },
    "GoogleDatastoreAdminV1PrepareStepDetails": {
      "id": "GoogleDatastoreAdminV1PrepareStepDetails",
      "type": "object",
      "description": "Details for the `PREPARE` step.",
      "properties": {
        "concurrencyMode": {
          "description": "The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Pessimistic concurrency.",
            "Optimistic concurrency.",
            "Optimistic concurrency with entity groups."
          ],
          "enum": [
            "CONCURRENCY_MODE_UNSPECIFIED",
            "PESSIMISTIC",
            "OPTIMISTIC",
            "OPTIMISTIC_WITH_ENTITY_GROUPS"
          ]
        }
      }
    },
    "GoogleDatastoreAdminV1CommonMetadata": {
      "type": "object",
      "description": "Metadata common to all Datastore Admin operations.",
      "properties": {
        "labels": {
          "description": "The client-assigned labels which were provided when the operation was created. May also include additional labels.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "operationType": {
          "type": "string",
          "description": "The type of the operation. Can be used as a filter in ListOperationsRequest.",
          "enum": [
            "OPERATION_TYPE_UNSPECIFIED",
            "EXPORT_ENTITIES",
            "IMPORT_ENTITIES",
            "CREATE_INDEX",
            "DELETE_INDEX"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "ExportEntities.",
            "ImportEntities.",
            "CreateIndex.",
            "DeleteIndex."
          ]
        },
        "startTime": {
          "description": "The time that work began on the operation.",
          "type": "string",
          "format": "google-datetime"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ],
          "description": "The current state of the Operation.",
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time the operation ended, either successfully or otherwise."
        }
      },
      "id": "GoogleDatastoreAdminV1CommonMetadata"
    },
    "Query": {
      "properties": {
        "offset": {
          "description": "The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be \u003e= 0 if specified.",
          "format": "int32",
          "type": "integer"
        },
        "order": {
          "items": {
            "$ref": "PropertyOrder"
          },
          "description": "The order to apply to the query results (if empty, order is unspecified).",
          "type": "array"
        },
        "distinctOn": {
          "description": "The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned).",
          "items": {
            "$ref": "PropertyReference"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be \u003e= 0 if specified.",
          "type": "integer",
          "format": "int32"
        },
        "projection": {
          "type": "array",
          "description": "The projection to return. Defaults to returning all properties.",
          "items": {
            "$ref": "Projection"
          }
        },
        "endCursor": {
          "description": "An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).",
          "type": "string",
          "format": "byte"
        },
        "kind": {
          "type": "array",
          "description": "The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.",
          "items": {
            "$ref": "KindExpression"
          }
        },
        "filter": {
          "$ref": "Filter",
          "description": "The filter to apply."
        },
        "startCursor": {
          "description": "A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "Query",
      "description": "A query for entities.",
      "type": "object"
    },
    "Entity": {
      "type": "object",
      "id": "Entity",
      "description": "A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.",
      "properties": {
        "key": {
          "$ref": "Key",
          "description": "The entity's key. An entity must have a key, unless otherwise documented (for example, an entity in `Value.entity_value` may have no key). An entity's kind is its key path's last element's kind, or null if it has no key."
        },
        "properties": {
          "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Value"
          }
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "Filter": {
      "id": "Filter",
      "properties": {
        "compositeFilter": {
          "$ref": "CompositeFilter",
          "description": "A composite filter."
        },
        "propertyFilter": {
          "$ref": "PropertyFilter",
          "description": "A filter on a property."
        }
      },
      "description": "A holder for any type of filter.",
      "type": "object"
    },
    "EntityResult": {
      "type": "object",
      "properties": {
        "cursor": {
          "format": "byte",
          "description": "A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message.",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "The time at which the entity was last changed. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.",
          "type": "string"
        },
        "createTime": {
          "description": "The time at which the entity was created. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.",
          "type": "string",
          "format": "google-datetime"
        },
        "version": {
          "format": "int64",
          "type": "string",
          "description": "The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads."
        },
        "entity": {
          "$ref": "Entity",
          "description": "The resulting entity."
        }
      },
      "description": "The result of fetching an entity from Datastore.",
      "id": "EntityResult"
    },
    "RunQueryResponse": {
      "description": "The response for Datastore.RunQuery.",
      "properties": {
        "query": {
          "description": "The parsed form of the `GqlQuery` from the request, if it was set.",
          "$ref": "Query"
        },
        "batch": {
          "description": "A batch of query results (always present).",
          "$ref": "QueryResultBatch"
        },
        "transaction": {
          "type": "string",
          "format": "byte",
          "description": "The identifier of the transaction that was started as part of this RunQuery request. Set only when ReadOptions.new_transaction was set in RunQueryRequest.read_options."
        }
      },
      "type": "object",
      "id": "RunQueryResponse"
    },
    "PathElement": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes."
        },
        "kind": {
          "type": "string",
          "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes."
        },
        "id": {
          "format": "int64",
          "type": "string",
          "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
        }
      },
      "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete.",
      "id": "PathElement",
      "type": "object"
    },
    "RunAggregationQueryRequest": {
      "type": "object",
      "description": "The request for Datastore.RunAggregationQuery.",
      "properties": {
        "gqlQuery": {
          "description": "The GQL query to run. This query must be an aggregation query.",
          "$ref": "GqlQuery"
        },
        "databaseId": {
          "type": "string",
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."
        },
        "readOptions": {
          "description": "The options for this query.",
          "$ref": "ReadOptions"
        },
        "aggregationQuery": {
          "$ref": "AggregationQuery",
          "description": "The query to run."
        },
        "partitionId": {
          "description": "Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID.",
          "$ref": "PartitionId"
        }
      },
      "id": "RunAggregationQueryRequest"
    },
    "GoogleDatastoreAdminV1IndexOperationMetadata": {
      "type": "object",
      "description": "Metadata for Index operations.",
      "id": "GoogleDatastoreAdminV1IndexOperationMetadata",
      "properties": {
        "common": {
          "$ref": "GoogleDatastoreAdminV1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "indexId": {
          "description": "The index resource ID that this operation is acting on.",
          "type": "string"
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        }
      }
    },
    "TransactionOptions": {
      "type": "object",
      "description": "Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.",
      "properties": {
        "readWrite": {
          "$ref": "ReadWrite",
          "description": "The transaction should allow both reads and writes."
        },
        "readOnly": {
          "$ref": "ReadOnly",
          "description": "The transaction should only allow reads."
        }
      },
      "id": "TransactionOptions"
    },
    "QueryResultBatch": {
      "type": "object",
      "description": "A batch of results produced by a query.",
      "properties": {
        "snapshotVersion": {
          "type": "string",
          "format": "int64",
          "description": "The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries."
        },
        "entityResultType": {
          "description": "The result type for every entity in `entity_results`.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "The key and properties.",
            "A projected subset of properties. The entity may have no key.",
            "Only the key."
          ],
          "enum": [
            "RESULT_TYPE_UNSPECIFIED",
            "FULL",
            "PROJECTION",
            "KEY_ONLY"
          ]
        },
        "entityResults": {
          "description": "The results for this batch.",
          "items": {
            "$ref": "EntityResult"
          },
          "type": "array"
        },
        "moreResults": {
          "enum": [
            "MORE_RESULTS_TYPE_UNSPECIFIED",
            "NOT_FINISHED",
            "MORE_RESULTS_AFTER_LIMIT",
            "MORE_RESULTS_AFTER_CURSOR",
            "NO_MORE_RESULTS"
          ],
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "There may be additional batches to fetch from this query.",
            "The query is finished, but there may be more results after the limit.",
            "The query is finished, but there may be more results after the end cursor.",
            "The query is finished, and there are no more results."
          ],
          "description": "The state of the query after the current batch.",
          "type": "string"
        },
        "skippedResults": {
          "format": "int32",
          "description": "The number of results skipped, typically because of an offset.",
          "type": "integer"
        },
        "readTime": {
          "description": "Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.",
          "format": "google-datetime",
          "type": "string"
        },
        "endCursor": {
          "type": "string",
          "format": "byte",
          "description": "A cursor that points to the position after the last result in the batch."
        },
        "skippedCursor": {
          "description": "A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "QueryResultBatch"
    },
    "MutationResult": {
      "id": "MutationResult",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "The create time of the entity. This field will not be set after a 'delete'.",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "string",
          "description": "The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity."
        },
        "key": {
          "$ref": "Key",
          "description": "The automatically allocated key. Set only when the mutation allocated a key."
        },
        "updateTime": {
          "description": "The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'.",
          "type": "string",
          "format": "google-datetime"
        },
        "conflictDetected": {
          "description": "Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.",
          "type": "boolean"
        }
      },
      "description": "The result of applying a mutation.",
      "type": "object"
    },
    "GoogleDatastoreAdminV1MigrationStateEvent": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "The migration is running.",
            "The migration is paused.",
            "The migration is complete."
          ],
          "description": "The new state of the migration.",
          "enum": [
            "MIGRATION_STATE_UNSPECIFIED",
            "RUNNING",
            "PAUSED",
            "COMPLETE"
          ]
        }
      },
      "description": "An event signifying a change in state of a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).",
      "id": "GoogleDatastoreAdminV1MigrationStateEvent"
    },
    "PropertyFilter": {
      "description": "A filter on a specific property.",
      "properties": {
        "value": {
          "$ref": "Value",
          "description": "The value to compare the property to."
        },
        "op": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The given `property` is less than the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is less than or equal to the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is greater than the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is greater than or equal to the given `value`. Requires: * That `property` comes first in `order_by`.",
            "The given `property` is equal to the given `value`.",
            "The given `property` is equal to at least one value in the given array. Requires: * That `value` is a non-empty `ArrayValue` with at most 10 values. * No other `IN` or `NOT_IN` is in the same query.",
            "The given `property` is not equal to the given `value`. Requires: * No other `NOT_EQUAL` or `NOT_IN` is in the same query. * That `property` comes first in the `order_by`.",
            "Limit the result set to the given entity and its descendants. Requires: * That `value` is an entity key. * No other `HAS_ANCESTOR` is in the same query.",
            "The value of the `property` is not in the given array. Requires: * That `value` is a non-empty `ArrayValue` with at most 10 values. * No other `IN`, `NOT_IN`, `NOT_EQUAL` is in the same query. * That `field` comes first in the `order_by`."
          ],
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "EQUAL",
            "IN",
            "NOT_EQUAL",
            "HAS_ANCESTOR",
            "NOT_IN"
          ],
          "description": "The operator to filter by."
        },
        "property": {
          "description": "The property to filter by.",
          "$ref": "PropertyReference"
        }
      },
      "id": "PropertyFilter",
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1ExportEntitiesResponse": {
      "type": "object",
      "description": "The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.",
      "properties": {
        "outputUrl": {
          "type": "string",
          "description": "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully."
        }
      },
      "id": "GoogleDatastoreAdminV1beta1ExportEntitiesResponse"
    },
    "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata": {
      "id": "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata",
      "properties": {
        "progressEntities": {
          "description": "An estimate of the number of entities processed.",
          "$ref": "GoogleDatastoreAdminV1beta1Progress"
        },
        "common": {
          "$ref": "GoogleDatastoreAdminV1beta1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "outputUrlPrefix": {
          "type": "string",
          "description": "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url."
        },
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1beta1EntityFilter",
          "description": "Description of which entities are being exported."
        },
        "progressBytes": {
          "description": "An estimate of the number of bytes processed.",
          "$ref": "GoogleDatastoreAdminV1beta1Progress"
        }
      },
      "type": "object",
      "description": "Metadata for ExportEntities operations."
    },
    "GoogleDatastoreAdminV1IndexedProperty": {
      "properties": {
        "name": {
          "description": "Required. The property name to index.",
          "type": "string"
        },
        "direction": {
          "enumDescriptions": [
            "The direction is unspecified.",
            "The property's values are indexed so as to support sequencing in ascending order and also query by \u003c, \u003e, \u003c=, \u003e=, and =.",
            "The property's values are indexed so as to support sequencing in descending order and also query by \u003c, \u003e, \u003c=, \u003e=, and =."
          ],
          "description": "Required. The indexed property's direction. Must not be DIRECTION_UNSPECIFIED.",
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "type": "string"
        }
      },
      "id": "GoogleDatastoreAdminV1IndexedProperty",
      "description": "A property of an index.",
      "type": "object"
    },
    "GqlQuery": {
      "id": "GqlQuery",
      "properties": {
        "positionalBindings": {
          "description": "Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.",
          "type": "array",
          "items": {
            "$ref": "GqlQueryParameter"
          }
        },
        "allowLiterals": {
          "type": "boolean",
          "description": "When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is."
        },
        "namedBindings": {
          "additionalProperties": {
            "$ref": "GqlQueryParameter"
          },
          "description": "For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `\"\"`.",
          "type": "object"
        },
        "queryString": {
          "type": "string",
          "description": "A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference)."
        }
      },
      "description": "A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).",
      "type": "object"
    },
    "AggregationResultBatch": {
      "properties": {
        "aggregationResults": {
          "description": "The aggregation results for this batch.",
          "items": {
            "$ref": "AggregationResult"
          },
          "type": "array"
        },
        "moreResults": {
          "type": "string",
          "enum": [
            "MORE_RESULTS_TYPE_UNSPECIFIED",
            "NOT_FINISHED",
            "MORE_RESULTS_AFTER_LIMIT",
            "MORE_RESULTS_AFTER_CURSOR",
            "NO_MORE_RESULTS"
          ],
          "description": "The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.",
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "There may be additional batches to fetch from this query.",
            "The query is finished, but there may be more results after the limit.",
            "The query is finished, but there may be more results after the end cursor.",
            "The query is finished, and there are no more results."
          ]
        },
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches."
        }
      },
      "description": "A batch of aggregation results produced by an aggregation query.",
      "id": "AggregationResultBatch",
      "type": "object"
    },
    "GoogleDatastoreAdminV1MigrationProgressEvent": {
      "type": "object",
      "id": "GoogleDatastoreAdminV1MigrationProgressEvent",
      "properties": {
        "prepareStepDetails": {
          "description": "Details for the `PREPARE` step.",
          "$ref": "GoogleDatastoreAdminV1PrepareStepDetails"
        },
        "redirectWritesStepDetails": {
          "description": "Details for the `REDIRECT_WRITES` step.",
          "$ref": "GoogleDatastoreAdminV1RedirectWritesStepDetails"
        },
        "step": {
          "enum": [
            "MIGRATION_STEP_UNSPECIFIED",
            "PREPARE",
            "START",
            "APPLY_WRITES_SYNCHRONOUSLY",
            "COPY_AND_VERIFY",
            "REDIRECT_EVENTUALLY_CONSISTENT_READS",
            "REDIRECT_STRONGLY_CONSISTENT_READS",
            "REDIRECT_WRITES"
          ],
          "type": "string",
          "description": "The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state.",
          "enumDescriptions": [
            "Unspecified.",
            "Pre-migration: the database is prepared for migration.",
            "Start of migration.",
            "Writes are applied synchronously to at least one replica.",
            "Data is copied to Cloud Firestore and then verified to match the data in Cloud Datastore.",
            "Eventually-consistent reads are redirected to Cloud Firestore.",
            "Strongly-consistent reads are redirected to Cloud Firestore.",
            "Writes are redirected to Cloud Firestore."
          ]
        }
      },
      "description": "An event signifying the start of a new step in a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore)."
    },
    "GqlQueryParameter": {
      "type": "object",
      "id": "GqlQueryParameter",
      "description": "A binding parameter for a GQL query.",
      "properties": {
        "cursor": {
          "format": "byte",
          "description": "A query cursor. Query cursors are returned in query result batches.",
          "type": "string"
        },
        "value": {
          "$ref": "Value",
          "description": "A value parameter."
        }
      }
    },
    "ReadOnly": {
      "type": "object",
      "id": "ReadOnly",
      "description": "Options specific to read-only transactions.",
      "properties": {
        "readTime": {
          "type": "string",
          "description": "Reads entities at the given time. This may not be older than 60 seconds.",
          "format": "google-datetime"
        }
      }
    },
    "RunAggregationQueryResponse": {
      "id": "RunAggregationQueryResponse",
      "properties": {
        "batch": {
          "description": "A batch of aggregation results. Always present.",
          "$ref": "AggregationResultBatch"
        },
        "transaction": {
          "format": "byte",
          "description": "The identifier of the transaction that was started as part of this RunAggregationQuery request. Set only when ReadOptions.new_transaction was set in RunAggregationQueryRequest.read_options.",
          "type": "string"
        },
        "query": {
          "$ref": "AggregationQuery",
          "description": "The parsed form of the `GqlQuery` from the request, if it was set."
        }
      },
      "type": "object",
      "description": "The response for Datastore.RunAggregationQuery."
    },
    "KindExpression": {
      "id": "KindExpression",
      "type": "object",
      "description": "A representation of a kind.",
      "properties": {
        "name": {
          "description": "The name of the kind.",
          "type": "string"
        }
      }
    },
    "LatLng": {
      "properties": {
        "longitude": {
          "format": "double",
          "type": "number",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
        },
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
        }
      },
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "id": "LatLng",
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1Progress": {
      "id": "GoogleDatastoreAdminV1beta1Progress",
      "type": "object",
      "description": "Measures the progress of a particular metric.",
      "properties": {
        "workCompleted": {
          "description": "The amount of work that has been completed. Note that this may be greater than work_estimated.",
          "type": "string",
          "format": "int64"
        },
        "workEstimated": {
          "format": "int64",
          "type": "string",
          "description": "An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable."
        }
      }
    },
    "GoogleDatastoreAdminV1ListIndexesResponse": {
      "description": "The response for google.datastore.admin.v1.DatastoreAdmin.ListIndexes.",
      "type": "object",
      "id": "GoogleDatastoreAdminV1ListIndexesResponse",
      "properties": {
        "indexes": {
          "items": {
            "$ref": "GoogleDatastoreAdminV1Index"
          },
          "description": "The indexes.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "AggregationQuery": {
      "type": "object",
      "id": "AggregationQuery",
      "description": "Datastore query for running an aggregation over a Query.",
      "properties": {
        "nestedQuery": {
          "$ref": "Query",
          "description": "Nested query for aggregation"
        },
        "aggregations": {
          "description": "Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query.",
          "items": {
            "$ref": "Aggregation"
          },
          "type": "array"
        }
      }
    },
    "PropertyReference": {
      "type": "object",
      "description": "A reference to a property relative to the kind expressions.",
      "id": "PropertyReference",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the property. If name includes \".\"s, it may be interpreted as a property name path."
        }
      }
    },
    "BeginTransactionRequest": {
      "id": "BeginTransactionRequest",
      "type": "object",
      "properties": {
        "transactionOptions": {
          "description": "Options for a new transaction.",
          "$ref": "TransactionOptions"
        },
        "databaseId": {
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.",
          "type": "string"
        }
      },
      "description": "The request for Datastore.BeginTransaction."
    },
    "LookupResponse": {
      "id": "LookupResponse",
      "type": "object",
      "properties": {
        "readTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which these entities were read or found missing."
        },
        "deferred": {
          "description": "A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.",
          "items": {
            "$ref": "Key"
          },
          "type": "array"
        },
        "found": {
          "items": {
            "$ref": "EntityResult"
          },
          "description": "Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.",
          "type": "array"
        },
        "missing": {
          "description": "Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.",
          "items": {
            "$ref": "EntityResult"
          },
          "type": "array"
        },
        "transaction": {
          "type": "string",
          "format": "byte",
          "description": "The identifier of the transaction that was started as part of this Lookup request. Set only when ReadOptions.new_transaction was set in LookupRequest.read_options."
        }
      },
      "description": "The response for Datastore.Lookup."
    },
    "LookupRequest": {
      "id": "LookupRequest",
      "description": "The request for Datastore.Lookup.",
      "properties": {
        "keys": {
          "description": "Required. Keys of entities to look up.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        },
        "databaseId": {
          "type": "string",
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."
        },
        "readOptions": {
          "$ref": "ReadOptions",
          "description": "The options for this lookup request."
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata": {
      "id": "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata",
      "type": "object",
      "description": "Metadata for ImportEntities operations.",
      "properties": {
        "progressBytes": {
          "description": "An estimate of the number of bytes processed.",
          "$ref": "GoogleDatastoreAdminV1beta1Progress"
        },
        "entityFilter": {
          "description": "Description of which entities are being imported.",
          "$ref": "GoogleDatastoreAdminV1beta1EntityFilter"
        },
        "inputUrl": {
          "description": "The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.",
          "type": "string"
        },
        "common": {
          "$ref": "GoogleDatastoreAdminV1beta1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1beta1Progress",
          "description": "An estimate of the number of entities processed."
        }
      }
    },
    "BeginTransactionResponse": {
      "id": "BeginTransactionResponse",
      "type": "object",
      "description": "The response for Datastore.BeginTransaction.",
      "properties": {
        "transaction": {
          "description": "The transaction identifier (always present).",
          "format": "byte",
          "type": "string"
        }
      }
    },
    "GoogleLongrunningListOperationsResponse": {
      "id": "GoogleLongrunningListOperationsResponse",
      "properties": {
        "operations": {
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "GoogleLongrunningOperation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The response message for Operations.ListOperations."
    },
    "RollbackRequest": {
      "properties": {
        "transaction": {
          "type": "string",
          "description": "Required. The transaction identifier, returned by a call to Datastore.BeginTransaction.",
          "format": "byte"
        },
        "databaseId": {
          "type": "string",
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."
        }
      },
      "description": "The request for Datastore.Rollback.",
      "type": "object",
      "id": "RollbackRequest"
    },
    "Count": {
      "description": "Count of entities that match the query. The `COUNT(*)` aggregation function operates on the entire entity so it does not require a field reference.",
      "type": "object",
      "properties": {
        "upTo": {
          "type": "string",
          "format": "int64",
          "description": "Optional. Optional constraint on the maximum number of entities to count. This provides a way to set an upper bound on the number of entities to scan, limiting latency and cost. Unspecified is interpreted as no bound. If a zero value is provided, a count result of zero should always be expected. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be non-negative when present."
        }
      },
      "id": "Count"
    },
    "AllocateIdsRequest": {
      "description": "The request for Datastore.AllocateIds.",
      "id": "AllocateIdsRequest",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "Key"
          },
          "description": "Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only."
        },
        "databaseId": {
          "type": "string",
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."
        }
      },
      "type": "object"
    },
    "ArrayValue": {
      "id": "ArrayValue",
      "properties": {
        "values": {
          "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'.",
          "items": {
            "$ref": "Value"
          },
          "type": "array"
        }
      },
      "description": "An array value.",
      "type": "object"
    },
    "RunQueryRequest": {
      "id": "RunQueryRequest",
      "type": "object",
      "properties": {
        "databaseId": {
          "type": "string",
          "description": "The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."
        },
        "query": {
          "description": "The query to run.",
          "$ref": "Query"
        },
        "partitionId": {
          "description": "Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID.",
          "$ref": "PartitionId"
        },
        "gqlQuery": {
          "description": "The GQL query to run. This query must be a non-aggregation query.",
          "$ref": "GqlQuery"
        },
        "readOptions": {
          "description": "The options for this query.",
          "$ref": "ReadOptions"
        }
      },
      "description": "The request for Datastore.RunQuery."
    },
    "GoogleDatastoreAdminV1ExportEntitiesMetadata": {
      "id": "GoogleDatastoreAdminV1ExportEntitiesMetadata",
      "type": "object",
      "description": "Metadata for ExportEntities operations.",
      "properties": {
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Description of which entities are being exported."
        },
        "outputUrlPrefix": {
          "description": "Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url.",
          "type": "string"
        },
        "progressBytes": {
          "description": "An estimate of the number of bytes processed.",
          "$ref": "GoogleDatastoreAdminV1Progress"
        },
        "common": {
          "description": "Metadata common to all Datastore Admin operations.",
          "$ref": "GoogleDatastoreAdminV1CommonMetadata"
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        }
      }
    },
    "GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata": {
      "id": "GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata",
      "properties": {
        "migrationStep": {
          "enumDescriptions": [
            "Unspecified.",
            "Pre-migration: the database is prepared for migration.",
            "Start of migration.",
            "Writes are applied synchronously to at least one replica.",
            "Data is copied to Cloud Firestore and then verified to match the data in Cloud Datastore.",
            "Eventually-consistent reads are redirected to Cloud Firestore.",
            "Strongly-consistent reads are redirected to Cloud Firestore.",
            "Writes are redirected to Cloud Firestore."
          ],
          "enum": [
            "MIGRATION_STEP_UNSPECIFIED",
            "PREPARE",
            "START",
            "APPLY_WRITES_SYNCHRONOUSLY",
            "COPY_AND_VERIFY",
            "REDIRECT_EVENTUALLY_CONSISTENT_READS",
            "REDIRECT_STRONGLY_CONSISTENT_READS",
            "REDIRECT_WRITES"
          ],
          "type": "string",
          "description": "The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode."
        },
        "migrationState": {
          "enum": [
            "MIGRATION_STATE_UNSPECIFIED",
            "RUNNING",
            "PAUSED",
            "COMPLETE"
          ],
          "description": "The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "The migration is running.",
            "The migration is paused.",
            "The migration is complete."
          ]
        }
      },
      "description": "Metadata for Datastore to Firestore migration operations. The DatastoreFirestoreMigration operation is not started by the end-user via an explicit \"creation\" method. This is an intentional deviation from the LRO design pattern. This singleton resource can be accessed at: \"projects/{project_id}/operations/datastore-firestore-migration\"",
      "type": "object"
    },
    "ReadWrite": {
      "properties": {
        "previousTransaction": {
          "type": "string",
          "format": "byte",
          "description": "The transaction identifier of the transaction being retried."
        }
      },
      "type": "object",
      "description": "Options specific to read / write transactions.",
      "id": "ReadWrite"
    },
    "GoogleDatastoreAdminV1ExportEntitiesResponse": {
      "properties": {
        "outputUrl": {
          "description": "Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.",
          "type": "string"
        }
      },
      "id": "GoogleDatastoreAdminV1ExportEntitiesResponse",
      "description": "The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.",
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1EntityFilter": {
      "description": "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']",
      "type": "object",
      "id": "GoogleDatastoreAdminV1beta1EntityFilter",
      "properties": {
        "namespaceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique."
        },
        "kinds": {
          "description": "If empty, then this represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleDatastoreAdminV1Index": {
      "id": "GoogleDatastoreAdminV1Index",
      "description": "Datastore composite index definition.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Required. The entity kind to which this index applies."
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "GoogleDatastoreAdminV1IndexedProperty"
          },
          "description": "Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties."
        },
        "ancestor": {
          "description": "Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.",
          "type": "string",
          "enum": [
            "ANCESTOR_MODE_UNSPECIFIED",
            "NONE",
            "ALL_ANCESTORS"
          ],
          "enumDescriptions": [
            "The ancestor mode is unspecified.",
            "Do not include the entity's ancestors in the index.",
            "Include all the entity's ancestors in the index."
          ]
        },
        "indexId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The resource ID of the index."
        },
        "projectId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Project ID."
        },
        "state": {
          "enumDescriptions": [
            "The state is unspecified.",
            "The index is being created, and cannot be used by queries. There is an active long-running operation for the index. The index is updated when writing an entity. Some index data may exist.",
            "The index is ready to be used. The index is updated when writing an entity. The index is fully populated from all stored entities it applies to.",
            "The index is being deleted, and cannot be used by queries. There is an active long-running operation for the index. The index is not updated when writing an entity. Some index data may exist.",
            "The index was being created or deleted, but something went wrong. The index cannot by used by queries. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing an entity. Some index data may exist."
          ],
          "description": "Output only. The state of the index.",
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "DELETING",
            "ERROR"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1CommonMetadata": {
      "properties": {
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time the operation ended, either successfully or otherwise."
        },
        "operationType": {
          "enumDescriptions": [
            "Unspecified.",
            "ExportEntities.",
            "ImportEntities."
          ],
          "description": "The type of the operation. Can be used as a filter in ListOperationsRequest.",
          "type": "string",
          "enum": [
            "OPERATION_TYPE_UNSPECIFIED",
            "EXPORT_ENTITIES",
            "IMPORT_ENTITIES"
          ]
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "The client-assigned labels which were provided when the operation was created. May also include additional labels."
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time that work began on the operation."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation."
          ],
          "description": "The current state of the Operation.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Metadata common to all Datastore Admin operations.",
      "id": "GoogleDatastoreAdminV1beta1CommonMetadata"
    },
    "ReadOptions": {
      "type": "object",
      "description": "The options shared by read requests.",
      "properties": {
        "newTransaction": {
          "description": "Options for beginning a new transaction for this request. The new transaction identifier will be returned in the corresponding response as either LookupResponse.transaction or RunQueryResponse.transaction.",
          "$ref": "TransactionOptions"
        },
        "readTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Reads entities as they were at the given time. This may not be older than 270 seconds. This value is only supported for Cloud Firestore in Datastore mode."
        },
        "readConsistency": {
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Strong consistency.",
            "Eventual consistency."
          ],
          "description": "The non-transactional read consistency to use.",
          "type": "string",
          "enum": [
            "READ_CONSISTENCY_UNSPECIFIED",
            "STRONG",
            "EVENTUAL"
          ]
        },
        "transaction": {
          "description": "The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "ReadOptions"
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "properties": {
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "PartitionId": {
      "type": "object",
      "id": "PartitionId",
      "properties": {
        "projectId": {
          "description": "The ID of the project to which the entities belong.",
          "type": "string"
        },
        "databaseId": {
          "description": "If not empty, the ID of the database to which the entities belong.",
          "type": "string"
        },
        "namespaceId": {
          "description": "If not empty, the ID of the namespace to which the entities belong.",
          "type": "string"
        }
      },
      "description": "A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `\"\"`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state."
    },
    "GoogleDatastoreAdminV1EntityFilter": {
      "properties": {
        "namespaceIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique."
        },
        "kinds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "If empty, then this represents all kinds."
        }
      },
      "id": "GoogleDatastoreAdminV1EntityFilter",
      "type": "object",
      "description": "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']"
    },
    "Projection": {
      "properties": {
        "property": {
          "$ref": "PropertyReference",
          "description": "The property to project."
        }
      },
      "description": "A representation of a property in a projection.",
      "type": "object",
      "id": "Projection"
    }
  },
  "version": "v1",
  "batchPath": "batch",
  "baseUrl": "https://datastore.googleapis.com/",
  "discoveryVersion": "v1"
}

{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "resources": {
    "operations": {
      "methods": {
        "cancel": {
          "response": {
            "$ref": "Empty"
          },
          "path": "v1/{+name}:cancel",
          "parameters": {
            "name": {
              "description": "The name of the operation resource to be cancelled.",
              "required": true,
              "location": "path",
              "pattern": "^operations/.*$",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "flatPath": "v1/operations/{operationsId}:cancel",
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "parameterOrder": [
            "name"
          ],
          "id": "accesscontextmanager.operations.cancel"
        },
        "get": {
          "parameters": {
            "name": {
              "type": "string",
              "location": "path",
              "required": true,
              "pattern": "^operations/.*$",
              "description": "The name of the operation resource."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Operation"
          },
          "flatPath": "v1/operations/{operationsId}",
          "parameterOrder": [
            "name"
          ],
          "id": "accesscontextmanager.operations.get",
          "httpMethod": "GET",
          "path": "v1/{+name}",
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
        },
        "list": {
          "flatPath": "v1/operations",
          "id": "accesscontextmanager.operations.list",
          "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "ListOperationsResponse"
          },
          "parameters": {
            "filter": {
              "type": "string",
              "description": "The standard list filter.",
              "location": "query"
            },
            "pageToken": {
              "description": "The standard list page token.",
              "location": "query",
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "The name of the operation's parent resource.",
              "required": true,
              "pattern": "^operations$",
              "location": "path"
            },
            "pageSize": {
              "location": "query",
              "description": "The standard list page size.",
              "format": "int32",
              "type": "integer"
            }
          },
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET"
        },
        "delete": {
          "path": "v1/{+name}",
          "response": {
            "$ref": "Empty"
          },
          "flatPath": "v1/operations/{operationsId}",
          "parameters": {
            "name": {
              "description": "The name of the operation resource to be deleted.",
              "type": "string",
              "location": "path",
              "pattern": "^operations/.*$",
              "required": true
            }
          },
          "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
          "id": "accesscontextmanager.operations.delete",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "DELETE",
          "parameterOrder": [
            "name"
          ]
        }
      }
    },
    "accessPolicies": {
      "methods": {
        "delete": {
          "path": "v1/{+name}",
          "flatPath": "v1/accessPolicies/{accessPoliciesId}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "required": true,
              "location": "path",
              "pattern": "^accessPolicies/[^/]+$",
              "type": "string",
              "description": "Required. Resource name for the access policy to delete. Format `accessPolicies/{policy_id}`"
            }
          },
          "id": "accesscontextmanager.accessPolicies.delete",
          "httpMethod": "DELETE",
          "response": {
            "$ref": "Operation"
          },
          "description": "Deletes an access policy based on the resource name. The long-running operation has a successful status after the access policy is removed from long-lasting storage."
        },
        "get": {
          "response": {
            "$ref": "AccessPolicy"
          },
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Required. Resource name for the access policy to get. Format `accessPolicies/{policy_id}`",
              "pattern": "^accessPolicies/[^/]+$"
            }
          },
          "flatPath": "v1/accessPolicies/{accessPoliciesId}",
          "id": "accesscontextmanager.accessPolicies.get",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v1/{+name}",
          "httpMethod": "GET",
          "description": "Returns an access policy based on the name."
        },
        "patch": {
          "flatPath": "v1/accessPolicies/{accessPoliciesId}",
          "response": {
            "$ref": "Operation"
          },
          "httpMethod": "PATCH",
          "path": "v1/{+name}",
          "parameters": {
            "name": {
              "pattern": "^accessPolicies/[^/]+$",
              "type": "string",
              "description": "Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{access_policy}`",
              "required": true,
              "location": "path"
            },
            "updateMask": {
              "format": "google-fieldmask",
              "description": "Required. Mask to control which fields get updated. Must be non-empty.",
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "AccessPolicy"
          },
          "parameterOrder": [
            "name"
          ],
          "description": "Updates an access policy. The long-running operation from this RPC has a successful status after the changes to the access policy propagate to long-lasting storage.",
          "id": "accesscontextmanager.accessPolicies.patch"
        },
        "getIamPolicy": {
          "httpMethod": "POST",
          "parameters": {
            "resource": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
              "pattern": "^accessPolicies/[^/]+$"
            }
          },
          "path": "v1/{+resource}:getIamPolicy",
          "request": {
            "$ref": "GetIamPolicyRequest"
          },
          "response": {
            "$ref": "Policy"
          },
          "description": "Gets the IAM policy for the specified Access Context Manager access policy.",
          "flatPath": "v1/accessPolicies/{accessPoliciesId}:getIamPolicy",
          "id": "accesscontextmanager.accessPolicies.getIamPolicy",
          "parameterOrder": [
            "resource"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "testIamPermissions": {
          "parameterOrder": [
            "resource"
          ],
          "request": {
            "$ref": "TestIamPermissionsRequest"
          },
          "id": "accesscontextmanager.accessPolicies.testIamPermissions",
          "httpMethod": "POST",
          "response": {
            "$ref": "TestIamPermissionsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "resource": {
              "required": true,
              "pattern": "^accessPolicies/[^/]+$",
              "type": "string",
              "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
              "location": "path"
            }
          },
          "description": "Returns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does not support other resources.",
          "path": "v1/{+resource}:testIamPermissions",
          "flatPath": "v1/accessPolicies/{accessPoliciesId}:testIamPermissions"
        },
        "create": {
          "response": {
            "$ref": "Operation"
          },
          "flatPath": "v1/accessPolicies",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {},
          "id": "accesscontextmanager.accessPolicies.create",
          "description": "Creates an access policy. This method fails if the organization already has an access policy. The long-running operation has a successful status after the access policy propagates to long-lasting storage. Syntactic and basic semantic errors are returned in `metadata` as a BadRequest proto.",
          "path": "v1/accessPolicies",
          "request": {
            "$ref": "AccessPolicy"
          },
          "parameterOrder": []
        },
        "setIamPolicy": {
          "parameters": {
            "resource": {
              "pattern": "^accessPolicies/[^/]+$",
              "type": "string",
              "location": "path",
              "required": true,
              "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "flatPath": "v1/accessPolicies/{accessPoliciesId}:setIamPolicy",
          "request": {
            "$ref": "SetIamPolicyRequest"
          },
          "description": "Sets the IAM policy for the specified Access Context Manager access policy. This method replaces the existing IAM policy on the access policy. The IAM policy controls the set of users who can perform specific operations on the Access Context Manager access policy.",
          "path": "v1/{+resource}:setIamPolicy",
          "parameterOrder": [
            "resource"
          ],
          "id": "accesscontextmanager.accessPolicies.setIamPolicy",
          "response": {
            "$ref": "Policy"
          }
        },
        "list": {
          "description": "Lists all access policies in an organization.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "ListAccessPoliciesResponse"
          },
          "flatPath": "v1/accessPolicies",
          "parameterOrder": [],
          "path": "v1/accessPolicies",
          "parameters": {
            "parent": {
              "location": "query",
              "type": "string",
              "description": "Required. Resource name for the container to list AccessPolicy instances from. Format: `organizations/{org_id}`"
            },
            "pageToken": {
              "location": "query",
              "description": "Next page token for the next batch of AccessPolicy instances. Defaults to the first page of results.",
              "type": "string"
            },
            "pageSize": {
              "type": "integer",
              "format": "int32",
              "description": "Number of AccessPolicy instances to include in the list. Default 100.",
              "location": "query"
            }
          },
          "id": "accesscontextmanager.accessPolicies.list",
          "httpMethod": "GET"
        }
      },
      "resources": {
        "accessLevels": {
          "methods": {
            "delete": {
              "parameters": {
                "name": {
                  "pattern": "^accessPolicies/[^/]+/accessLevels/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. Resource name for the Access Level. Format: `accessPolicies/{policy_id}/accessLevels/{access_level_id}`",
                  "type": "string"
                }
              },
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels/{accessLevelsId}",
              "parameterOrder": [
                "name"
              ],
              "id": "accesscontextmanager.accessPolicies.accessLevels.delete",
              "path": "v1/{+name}",
              "description": "Deletes an access level based on the resource name. The long-running operation from this RPC has a successful status after the access level has been removed from long-lasting storage.",
              "response": {
                "$ref": "Operation"
              }
            },
            "create": {
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/{+parent}/accessLevels",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels",
              "request": {
                "$ref": "AccessLevel"
              },
              "parameters": {
                "parent": {
                  "pattern": "^accessPolicies/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. Resource name for the access policy which owns this Access Level. Format: `accessPolicies/{policy_id}`"
                }
              },
              "description": "Creates an access level. The long-running operation from this RPC has a successful status after the access level propagates to long-lasting storage. If access levels contain errors, an error response is returned for the first error encountered.",
              "httpMethod": "POST",
              "id": "accesscontextmanager.accessPolicies.accessLevels.create",
              "parameterOrder": [
                "parent"
              ]
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists all access levels for an access policy.",
              "path": "v1/{+parent}/accessLevels",
              "parameters": {
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of Access Levels to include in the list. Default 100.",
                  "location": "query"
                },
                "pageToken": {
                  "description": "Next page token for the next batch of Access Level instances. Defaults to the first page of results.",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. Resource name for the access policy to list Access Levels from. Format: `accessPolicies/{policy_id}`",
                  "pattern": "^accessPolicies/[^/]+$"
                },
                "accessLevelFormat": {
                  "enumDescriptions": [
                    "The format was not specified.",
                    "Uses the format the resource was defined in. BasicLevels are returned as BasicLevels, CustomLevels are returned as CustomLevels.",
                    "Use Cloud Common Expression Language when returning the resource. Both BasicLevels and CustomLevels are returned as CustomLevels."
                  ],
                  "type": "string",
                  "description": "Whether to return `BasicLevels` in the Cloud Common Expression language, as `CustomLevels`, rather than as `BasicLevels`. Defaults to returning `AccessLevels` in the format they were defined.",
                  "enum": [
                    "LEVEL_FORMAT_UNSPECIFIED",
                    "AS_DEFINED",
                    "CEL"
                  ],
                  "location": "query"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "ListAccessLevelsResponse"
              },
              "id": "accesscontextmanager.accessPolicies.accessLevels.list",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels"
            },
            "testIamPermissions": {
              "parameterOrder": [
                "resource"
              ],
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^accessPolicies/[^/]+/accessLevels/[^/]+$"
                }
              },
              "description": "Returns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does not support other resources.",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels/{accessLevelsId}:testIamPermissions",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "accesscontextmanager.accessPolicies.accessLevels.testIamPermissions",
              "path": "v1/{+resource}:testIamPermissions",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              }
            },
            "replaceAll": {
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels:replaceAll",
              "path": "v1/{+parent}/accessLevels:replaceAll",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "description": "Required. Resource name for the access policy which owns these Access Levels. Format: `accessPolicies/{policy_id}`",
                  "required": true,
                  "type": "string",
                  "pattern": "^accessPolicies/[^/]+$",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "accesscontextmanager.accessPolicies.accessLevels.replaceAll",
              "request": {
                "$ref": "ReplaceAccessLevelsRequest"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Operation"
              },
              "description": "Replaces all existing access levels in an access policy with the access levels provided. This is done atomically. The long-running operation from this RPC has a successful status after all replacements propagate to long-lasting storage. If the replacement contains errors, an error response is returned for the first error encountered. Upon error, the replacement is cancelled, and existing access levels are not affected. The Operation.response field contains ReplaceAccessLevelsResponse. Removing access levels contained in existing service perimeters result in an error."
            },
            "get": {
              "parameters": {
                "accessLevelFormat": {
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "LEVEL_FORMAT_UNSPECIFIED",
                    "AS_DEFINED",
                    "CEL"
                  ],
                  "description": "Whether to return `BasicLevels` in the Cloud Common Expression Language rather than as `BasicLevels`. Defaults to AS_DEFINED, where Access Levels are returned as `BasicLevels` or `CustomLevels` based on how they were created. If set to CEL, all Access Levels are returned as `CustomLevels`. In the CEL case, `BasicLevels` are translated to equivalent `CustomLevels`.",
                  "enumDescriptions": [
                    "The format was not specified.",
                    "Uses the format the resource was defined in. BasicLevels are returned as BasicLevels, CustomLevels are returned as CustomLevels.",
                    "Use Cloud Common Expression Language when returning the resource. Both BasicLevels and CustomLevels are returned as CustomLevels."
                  ]
                },
                "name": {
                  "required": true,
                  "type": "string",
                  "description": "Required. Resource name for the Access Level. Format: `accessPolicies/{policy_id}/accessLevels/{access_level_id}`",
                  "location": "path",
                  "pattern": "^accessPolicies/[^/]+/accessLevels/[^/]+$"
                }
              },
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels/{accessLevelsId}",
              "description": "Gets an access level based on the resource name.",
              "response": {
                "$ref": "AccessLevel"
              },
              "httpMethod": "GET",
              "id": "accesscontextmanager.accessPolicies.accessLevels.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ]
            },
            "patch": {
              "parameters": {
                "updateMask": {
                  "description": "Required. Mask to control which fields get updated. Must be non-empty.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                },
                "name": {
                  "pattern": "^accessPolicies/[^/]+/accessLevels/[^/]+$",
                  "location": "path",
                  "description": "Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.",
                  "type": "string",
                  "required": true
                }
              },
              "request": {
                "$ref": "AccessLevel"
              },
              "description": "Updates an access level. The long-running operation from this RPC has a successful status after the changes to the access level propagate to long-lasting storage. If access levels contain errors, an error response is returned for the first error encountered.",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "PATCH",
              "id": "accesscontextmanager.accessPolicies.accessLevels.patch",
              "path": "v1/{+name}",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels/{accessLevelsId}",
              "response": {
                "$ref": "Operation"
              }
            }
          }
        },
        "authorizedOrgsDescs": {
          "methods": {
            "create": {
              "parameters": {
                "parent": {
                  "description": "Required. Resource name for the access policy which owns this Authorized Orgs Desc. Format: `accessPolicies/{policy_id}`",
                  "type": "string",
                  "pattern": "^accessPolicies/[^/]+$",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "id": "accesscontextmanager.accessPolicies.authorizedOrgsDescs.create",
              "description": "Creates an authorized orgs desc. The long-running operation from this RPC has a successful status after the authorized orgs desc propagates to long-lasting storage. If a authorized orgs desc contains errors, an error response is returned for the first error encountered. The name of this `AuthorizedOrgsDesc` will be assigned during creation.",
              "response": {
                "$ref": "Operation"
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "AuthorizedOrgsDesc"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/authorizedOrgsDescs",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/authorizedOrgsDescs"
            },
            "get": {
              "path": "v1/{+name}",
              "id": "accesscontextmanager.accessPolicies.authorizedOrgsDescs.get",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/authorizedOrgsDescs/{authorizedOrgsDescsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^accessPolicies/[^/]+/authorizedOrgsDescs/[^/]+$",
                  "required": true,
                  "description": "Required. Resource name for the Authorized Orgs Desc. Format: `accessPolicies/{policy_id}/authorizedOrgsDescs/{authorized_orgs_descs_id}`",
                  "type": "string"
                }
              },
              "description": "Gets an authorized orgs desc based on the resource name.",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "AuthorizedOrgsDesc"
              },
              "httpMethod": "GET"
            },
            "list": {
              "path": "v1/{+parent}/authorizedOrgsDescs",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/authorizedOrgsDescs",
              "description": "Lists all authorized orgs descs for an access policy.",
              "parameters": {
                "pageToken": {
                  "description": "Next page token for the next batch of Authorized Orgs Desc instances. Defaults to the first page of results.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "location": "query",
                  "description": "Number of Authorized Orgs Descs to include in the list. Default 100."
                },
                "parent": {
                  "description": "Required. Resource name for the access policy to list Authorized Orgs Desc from. Format: `accessPolicies/{policy_id}`",
                  "type": "string",
                  "location": "path",
                  "pattern": "^accessPolicies/[^/]+$",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "id": "accesscontextmanager.accessPolicies.authorizedOrgsDescs.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListAuthorizedOrgsDescsResponse"
              }
            },
            "patch": {
              "request": {
                "$ref": "AuthorizedOrgsDesc"
              },
              "path": "v1/{+name}",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/authorizedOrgsDescs/{authorizedOrgsDescsId}",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "updateMask": {
                  "description": "Required. Mask to control which fields get updated. Must be non-empty.",
                  "type": "string",
                  "format": "google-fieldmask",
                  "location": "query"
                },
                "name": {
                  "description": "Resource name for the `AuthorizedOrgsDesc`. Format: `accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`. The `authorized_orgs_desc` component must begin with a letter, followed by alphanumeric characters or `_`. After you create an `AuthorizedOrgsDesc`, you cannot change its `name`.",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^accessPolicies/[^/]+/authorizedOrgsDescs/[^/]+$"
                }
              },
              "id": "accesscontextmanager.accessPolicies.authorizedOrgsDescs.patch",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "PATCH",
              "description": "Updates an authorized orgs desc. The long-running operation from this RPC has a successful status after the authorized orgs desc propagates to long-lasting storage. If a authorized orgs desc contains errors, an error response is returned for the first error encountered. Only the organization list in `AuthorizedOrgsDesc` can be updated. The name, authorization_type, asset_type and authorization_direction cannot be updated.",
              "parameterOrder": [
                "name"
              ]
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes an authorized orgs desc based on the resource name. The long-running operation from this RPC has a successful status after the authorized orgs desc is removed from long-lasting storage.",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Operation"
              },
              "id": "accesscontextmanager.accessPolicies.authorizedOrgsDescs.delete",
              "parameters": {
                "name": {
                  "pattern": "^accessPolicies/[^/]+/authorizedOrgsDescs/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. Resource name for the Authorized Orgs Desc. Format: `accessPolicies/{policy_id}/authorizedOrgsDesc/{authorized_orgs_desc_id}`"
                }
              },
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/authorizedOrgsDescs/{authorizedOrgsDescsId}",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}"
            }
          }
        },
        "servicePerimeters": {
          "methods": {
            "testIamPermissions": {
              "description": "Returns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does not support other resources.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "parameterOrder": [
                "resource"
              ],
              "path": "v1/{+resource}:testIamPermissions",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters/{servicePerimetersId}:testIamPermissions",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^accessPolicies/[^/]+/servicePerimeters/[^/]+$"
                }
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.testIamPermissions"
            },
            "replaceAll": {
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/servicePerimeters:replaceAll",
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.replaceAll",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "type": "string",
                  "required": true,
                  "pattern": "^accessPolicies/[^/]+$",
                  "description": "Required. Resource name for the access policy which owns these Service Perimeters. Format: `accessPolicies/{policy_id}`",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "ReplaceServicePerimetersRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters:replaceAll",
              "description": "Replace all existing service perimeters in an access policy with the service perimeters provided. This is done atomically. The long-running operation from this RPC has a successful status after all replacements propagate to long-lasting storage. Replacements containing errors result in an error response for the first error encountered. Upon an error, replacement are cancelled and existing service perimeters are not affected. The Operation.response field contains ReplaceServicePerimetersResponse."
            },
            "list": {
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.list",
              "path": "v1/{+parent}/servicePerimeters",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Next page token for the next batch of Service Perimeter instances. Defaults to the first page of results."
                },
                "parent": {
                  "location": "path",
                  "pattern": "^accessPolicies/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "Required. Resource name for the access policy to list Service Perimeters from. Format: `accessPolicies/{policy_id}`"
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "description": "Number of Service Perimeters to include in the list. Default 100."
                }
              },
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters",
              "response": {
                "$ref": "ListServicePerimetersResponse"
              },
              "httpMethod": "GET",
              "description": "Lists all service perimeters for an access policy.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "parent"
              ]
            },
            "commit": {
              "path": "v1/{+parent}/servicePerimeters:commit",
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.commit",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters:commit",
              "request": {
                "$ref": "CommitServicePerimetersRequest"
              },
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "parent": {
                  "pattern": "^accessPolicies/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "Required. Resource name for the parent Access Policy which owns all Service Perimeters in scope for the commit operation. Format: `accessPolicies/{policy_id}`",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "description": "Commits the dry-run specification for all the service perimeters in an access policy. A commit operation on a service perimeter involves copying its `spec` field to the `status` field of the service perimeter. Only service perimeters with `use_explicit_dry_run_spec` field set to true are affected by a commit operation. The long-running operation from this RPC has a successful status after the dry-run specifications for all the service perimeters have been committed. If a commit fails, it causes the long-running operation to return an error response and the entire commit operation is cancelled. When successful, the Operation.response field contains CommitServicePerimetersResponse. The `dry_run` and the `spec` fields are cleared after a successful commit operation."
            },
            "patch": {
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "Required. Mask to control which fields get updated. Must be non-empty.",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.",
                  "pattern": "^accessPolicies/[^/]+/servicePerimeters/[^/]+$",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/{+name}",
              "description": "Updates a service perimeter. The long-running operation from this RPC has a successful status after the service perimeter propagates to long-lasting storage. If a service perimeter contains errors, an error response is returned for the first error encountered.",
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.patch",
              "request": {
                "$ref": "ServicePerimeter"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters/{servicePerimetersId}",
              "httpMethod": "PATCH"
            },
            "create": {
              "httpMethod": "POST",
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/{+parent}/servicePerimeters",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "description": "Required. Resource name for the access policy which owns this Service Perimeter. Format: `accessPolicies/{policy_id}`",
                  "pattern": "^accessPolicies/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Creates a service perimeter. The long-running operation from this RPC has a successful status after the service perimeter propagates to long-lasting storage. If a service perimeter contains errors, an error response is returned for the first error encountered.",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters",
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.create",
              "request": {
                "$ref": "ServicePerimeter"
              }
            },
            "delete": {
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Required. Resource name for the Service Perimeter. Format: `accessPolicies/{policy_id}/servicePerimeters/{service_perimeter_id}`",
                  "location": "path",
                  "pattern": "^accessPolicies/[^/]+/servicePerimeters/[^/]+$"
                }
              },
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.delete",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters/{servicePerimetersId}",
              "description": "Deletes a service perimeter based on the resource name. The long-running operation from this RPC has a successful status after the service perimeter is removed from long-lasting storage.",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+name}",
              "response": {
                "$ref": "Operation"
              }
            },
            "get": {
              "response": {
                "$ref": "ServicePerimeter"
              },
              "path": "v1/{+name}",
              "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters/{servicePerimetersId}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "accesscontextmanager.accessPolicies.servicePerimeters.get",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "pattern": "^accessPolicies/[^/]+/servicePerimeters/[^/]+$",
                  "type": "string",
                  "description": "Required. Resource name for the Service Perimeter. Format: `accessPolicies/{policy_id}/servicePerimeters/{service_perimeters_id}`",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Gets a service perimeter based on the resource name."
            }
          }
        }
      }
    },
    "organizations": {
      "resources": {
        "gcpUserAccessBindings": {
          "methods": {
            "create": {
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "GcpUserAccessBinding"
              },
              "httpMethod": "POST",
              "id": "accesscontextmanager.organizations.gcpUserAccessBindings.create",
              "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings",
              "path": "v1/{+parent}/gcpUserAccessBindings",
              "parameters": {
                "parent": {
                  "location": "path",
                  "required": true,
                  "pattern": "^organizations/[^/]+$",
                  "description": "Required. Example: \"organizations/256\"",
                  "type": "string"
                }
              },
              "description": "Creates a GcpUserAccessBinding. If the client specifies a name, the server ignores it. Fails if a resource already exists with the same group_key. Completion of this long-running operation does not necessarily signify that the new binding is deployed onto all affected users, which may take more time.",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "patch": {
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings/{gcpUserAccessBindingsId}",
              "request": {
                "$ref": "GcpUserAccessBinding"
              },
              "parameters": {
                "updateMask": {
                  "type": "string",
                  "format": "google-fieldmask",
                  "description": "Required. Only the fields specified in this mask are updated. Because name and group_key cannot be changed, update_mask is required and may only contain the following fields: `access_levels`, `dry_run_access_levels`. update_mask { paths: \"access_levels\" }",
                  "location": "query"
                },
                "name": {
                  "description": "Immutable. Assigned by the server during creation. The last segment has an arbitrary length and has only URI unreserved characters (as defined by [RFC 3986 Section 2.3](https://tools.ietf.org/html/rfc3986#section-2.3)). Should not be specified by the client during creation. Example: \"organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N\"",
                  "type": "string",
                  "pattern": "^organizations/[^/]+/gcpUserAccessBindings/[^/]+$",
                  "location": "path",
                  "required": true
                }
              },
              "id": "accesscontextmanager.organizations.gcpUserAccessBindings.patch",
              "httpMethod": "PATCH",
              "description": "Updates a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the changed binding is deployed onto all affected users, which may take more time.",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "delete": {
              "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings/{gcpUserAccessBindingsId}",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "httpMethod": "DELETE",
              "description": "Deletes a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the binding deletion is deployed onto all affected users, which may take more time.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^organizations/[^/]+/gcpUserAccessBindings/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. Example: \"organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N\""
                }
              },
              "id": "accesscontextmanager.organizations.gcpUserAccessBindings.delete"
            },
            "get": {
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. Example: \"organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N\"",
                  "pattern": "^organizations/[^/]+/gcpUserAccessBindings/[^/]+$"
                }
              },
              "id": "accesscontextmanager.organizations.gcpUserAccessBindings.get",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GcpUserAccessBinding"
              },
              "httpMethod": "GET",
              "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings/{gcpUserAccessBindingsId}",
              "description": "Gets the GcpUserAccessBinding with the given name."
            },
            "list": {
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists all GcpUserAccessBindings for a Google Cloud organization.",
              "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings",
              "response": {
                "$ref": "ListGcpUserAccessBindingsResponse"
              },
              "id": "accesscontextmanager.organizations.gcpUserAccessBindings.list",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "Optional. If left blank, returns the first page. To enumerate all items, use the next_page_token from your previous list operation.",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Optional. Maximum number of items to return. The server may return fewer items. If left blank, the server may return any number of items.",
                  "format": "int32",
                  "location": "query"
                },
                "parent": {
                  "description": "Required. Example: \"organizations/256\"",
                  "location": "path",
                  "pattern": "^organizations/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/{+parent}/gcpUserAccessBindings",
              "parameterOrder": [
                "parent"
              ]
            }
          }
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "batchPath": "batch",
  "ownerDomain": "google.com",
  "version": "v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "description": "An API for setting attribute based access control to requests to Google Cloud services.",
  "baseUrl": "https://accesscontextmanager.googleapis.com/",
  "discoveryVersion": "v1",
  "canonicalName": "Access Context Manager",
  "schemas": {
    "ListGcpUserAccessBindingsResponse": {
      "description": "Response of ListGcpUserAccessBindings.",
      "id": "ListGcpUserAccessBindingsResponse",
      "properties": {
        "gcpUserAccessBindings": {
          "description": "GcpUserAccessBinding",
          "items": {
            "$ref": "GcpUserAccessBinding"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to get the next page of items. If blank, there are no more items."
        }
      },
      "type": "object"
    },
    "CancelOperationRequest": {
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "id": "CancelOperationRequest"
    },
    "ReplaceAccessLevelsResponse": {
      "id": "ReplaceAccessLevelsResponse",
      "type": "object",
      "description": "A response to ReplaceAccessLevelsRequest. This will be put inside of Operation.response field.",
      "properties": {
        "accessLevels": {
          "type": "array",
          "description": "List of the Access Level instances.",
          "items": {
            "$ref": "AccessLevel"
          }
        }
      }
    },
    "TestIamPermissionsResponse": {
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
        }
      },
      "type": "object",
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse"
    },
    "CommitServicePerimetersResponse": {
      "description": "A response to CommitServicePerimetersRequest. This will be put inside of Operation.response field.",
      "properties": {
        "servicePerimeters": {
          "items": {
            "$ref": "ServicePerimeter"
          },
          "description": "List of all the Service Perimeter instances in the Access Policy.",
          "type": "array"
        }
      },
      "id": "CommitServicePerimetersResponse",
      "type": "object"
    },
    "ReplaceAccessLevelsRequest": {
      "type": "object",
      "description": "A request to replace all existing Access Levels in an Access Policy with the Access Levels provided. This is done atomically.",
      "id": "ReplaceAccessLevelsRequest",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided."
        },
        "accessLevels": {
          "description": "Required. The desired Access Levels that should replace all existing Access Levels in the Access Policy.",
          "items": {
            "$ref": "AccessLevel"
          },
          "type": "array"
        }
      }
    },
    "BasicLevel": {
      "type": "object",
      "description": "`BasicLevel` is an `AccessLevel` using a set of recommended features.",
      "id": "BasicLevel",
      "properties": {
        "conditions": {
          "description": "Required. A list of requirements for the `AccessLevel` to be granted.",
          "type": "array",
          "items": {
            "$ref": "Condition"
          }
        },
        "combiningFunction": {
          "enumDescriptions": [
            "All `Conditions` must be true for the `BasicLevel` to be true.",
            "If at least one `Condition` is true, then the `BasicLevel` is true."
          ],
          "enum": [
            "AND",
            "OR"
          ],
          "type": "string",
          "description": "How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND."
        }
      }
    },
    "IngressTo": {
      "description": "Defines the conditions under which an IngressPolicy matches a request. Conditions are based on information about the ApiOperation intended to be performed on the target resource of the request. The request must satisfy what is defined in `operations` AND `resources` in order to match.",
      "id": "IngressTo",
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "ApiOperation"
          },
          "description": "A list of ApiOperations allowed to be performed by the sources specified in corresponding IngressFrom in this ServicePerimeter."
        },
        "resources": {
          "description": "A list of resources, currently only projects in the form `projects/`, protected by this ServicePerimeter that are allowed to be accessed by sources defined in the corresponding IngressFrom. If a single `*` is specified, then access to all resources inside the perimeter are allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Condition": {
      "type": "object",
      "id": "Condition",
      "description": "A condition necessary for an `AccessLevel` to be granted. The Condition is an AND over its fields. So a Condition is true if: 1) the request IP is from one of the listed subnetworks AND 2) the originating device complies with the listed device policy AND 3) all listed access levels are granted AND 4) the request was sent at a time allowed by the DateTimeRestriction.",
      "properties": {
        "devicePolicy": {
          "$ref": "DevicePolicy",
          "description": "Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed."
        },
        "negate": {
          "type": "boolean",
          "description": "Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields. Any non-empty field criteria evaluating to false will result in the Condition to be satisfied. Defaults to false."
        },
        "requiredAccessLevels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: \"`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME\"`"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "description": "The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.",
          "type": "array"
        },
        "ipSubnetworks": {
          "type": "array",
          "description": "CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.",
          "items": {
            "type": "string"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user."
        }
      }
    },
    "IngressSource": {
      "description": "The source that IngressPolicy authorizes access from.",
      "id": "IngressSource",
      "type": "object",
      "properties": {
        "resource": {
          "type": "string",
          "description": "A Google Cloud resource that is allowed to ingress the perimeter. Requests from these resources will be allowed to access perimeter data. Currently only projects and VPCs are allowed. Project format: `projects/{project_number}` VPC network format: `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`. The project may be in any Google Cloud organization, not just the organization that the perimeter is defined in. `*` is not allowed, the case of allowing all Google Cloud resources only is not supported."
        },
        "accessLevel": {
          "type": "string",
          "description": "An AccessLevel resource name that allow resources within the ServicePerimeters to be accessed from the internet. AccessLevels listed must be in the same policy as this ServicePerimeter. Referencing a nonexistent AccessLevel will cause an error. If no AccessLevel names are listed, resources within the perimeter can only be accessed via Google Cloud calls with request origins within the perimeter. Example: `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL`. If a single `*` is specified for `access_level`, then all IngressSources will be allowed."
        }
      }
    },
    "CommitServicePerimetersRequest": {
      "properties": {
        "etag": {
          "description": "Optional. The etag for the version of the Access Policy that this commit operation is to be performed on. If, at the time of commit, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the commit operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A request to commit dry-run specs in all Service Perimeters belonging to an Access Policy.",
      "id": "CommitServicePerimetersRequest"
    },
    "ListOperationsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse"
    },
    "CustomLevel": {
      "type": "object",
      "description": "`CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request. See CEL spec at: https://github.com/google/cel-spec",
      "properties": {
        "expr": {
          "$ref": "Expr",
          "description": "Required. A Cloud CEL expression evaluating to a boolean."
        }
      },
      "id": "CustomLevel"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "id": "Status",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GetPolicyOptions": {
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "id": "GetPolicyOptions",
      "properties": {
        "requestedPolicyVersion": {
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "Binding": {
      "description": "Associates `members`, or principals, with a `role`.",
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "role": {
          "type": "string",
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "Binding"
    },
    "ListAccessLevelsResponse": {
      "id": "ListAccessLevelsResponse",
      "description": "A response to `ListAccessLevelsRequest`.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token to retrieve the next page of results. If the value is empty, no further results remain."
        },
        "accessLevels": {
          "description": "List of the Access Level instances.",
          "items": {
            "$ref": "AccessLevel"
          },
          "type": "array"
        }
      }
    },
    "GcpUserAccessBindingOperationMetadata": {
      "type": "object",
      "id": "GcpUserAccessBindingOperationMetadata",
      "properties": {},
      "description": "Currently, a completed operation means nothing. In the future, this metadata and a completed operation may indicate that the binding has taken effect and is affecting access decisions for all users."
    },
    "GcpUserAccessBinding": {
      "description": "Restricts access to Cloud Console and Google Cloud APIs for a set of users using Context-Aware Access.",
      "properties": {
        "groupKey": {
          "description": "Required. Immutable. Google Group id whose members are subject to this binding's restrictions. See \"id\" in the [G Suite Directory API's Groups resource] (https://developers.google.com/admin-sdk/directory/v1/reference/groups#resource). If a group's email address/alias is changed, this resource will continue to point at the changed group. This field does not accept group email addresses or aliases. Example: \"01d520gv4vjcrht\"",
          "type": "string"
        },
        "accessLevels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. Access level that a user must have to be granted access. Only one access level is supported, not multiple. This repeated field must have exactly one element. Example: \"accessPolicies/9522/accessLevels/device_trusted\""
        },
        "dryRunAccessLevels": {
          "description": "Optional. Dry run access level that will be evaluated but will not be enforced. The access denial based on dry run policy will be logged. Only one access level is supported, not multiple. This list must have exactly one element. Example: \"accessPolicies/9522/accessLevels/device_trusted\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "Immutable. Assigned by the server during creation. The last segment has an arbitrary length and has only URI unreserved characters (as defined by [RFC 3986 Section 2.3](https://tools.ietf.org/html/rfc3986#section-2.3)). Should not be specified by the client during creation. Example: \"organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N\""
        }
      },
      "type": "object",
      "id": "GcpUserAccessBinding"
    },
    "ServicePerimeter": {
      "properties": {
        "useExplicitDryRunSpec": {
          "type": "boolean",
          "description": "Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the implicit spec, thereby allowing the user to explicitly provide a configuration (\"spec\") to use in a dry-run version of the Service Perimeter. This allows the user to test changes to the enforced config (\"status\") without actually enforcing them. This testing is done through analyzing the differences between currently enforced and suggested restrictions. use_explicit_dry_run_spec must bet set to True if any of the fields in the spec are set to non-default values."
        },
        "description": {
          "type": "string",
          "description": "Description of the `ServicePerimeter` and its use. Does not affect behavior."
        },
        "status": {
          "description": "Current ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine perimeter content and boundaries.",
          "$ref": "ServicePerimeterConfig"
        },
        "perimeterType": {
          "enum": [
            "PERIMETER_TYPE_REGULAR",
            "PERIMETER_TYPE_BRIDGE"
          ],
          "type": "string",
          "description": "Perimeter type indicator. A single project or VPC network is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.",
          "enumDescriptions": [
            "Regular Perimeter. When no value is specified, the perimeter uses this type.",
            "Perimeter Bridge."
          ]
        },
        "title": {
          "type": "string",
          "description": "Human readable title. Must be unique within the Policy."
        },
        "name": {
          "type": "string",
          "description": "Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`."
        },
        "spec": {
          "$ref": "ServicePerimeterConfig",
          "description": "Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter configuration without enforcing actual access restrictions. Only allowed to be set when the \"use_explicit_dry_run_spec\" flag is set."
        }
      },
      "id": "ServicePerimeter",
      "type": "object",
      "description": "`ServicePerimeter` describes a set of Google Cloud resources which can freely import and export data amongst themselves, but not export outside of the `ServicePerimeter`. If a request with a source within this `ServicePerimeter` has a target outside of the `ServicePerimeter`, the request will be blocked. Otherwise the request is allowed. There are two types of Service Perimeter - Regular and Bridge. Regular Service Perimeters cannot overlap, a single Google Cloud project or VPC network can only belong to a single regular Service Perimeter. Service Perimeter Bridges can contain only Google Cloud projects as members, a single Google Cloud project may belong to multiple Service Perimeter Bridges."
    },
    "AuditConfig": {
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "properties": {
        "auditLogConfigs": {
          "items": {
            "$ref": "AuditLogConfig"
          },
          "description": "The configuration for logging of each type of permission.",
          "type": "array"
        },
        "service": {
          "type": "string",
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services."
        }
      },
      "id": "AuditConfig",
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "id": "Empty",
      "properties": {}
    },
    "EgressPolicy": {
      "properties": {
        "egressFrom": {
          "$ref": "EgressFrom",
          "description": "Defines conditions on the source of a request causing this EgressPolicy to apply."
        },
        "egressTo": {
          "$ref": "EgressTo",
          "description": "Defines the conditions on the ApiOperation and destination resources that cause this EgressPolicy to apply."
        }
      },
      "type": "object",
      "id": "EgressPolicy",
      "description": "Policy for egress from perimeter. EgressPolicies match requests based on `egress_from` and `egress_to` stanzas. For an EgressPolicy to match, both `egress_from` and `egress_to` stanzas must be matched. If an EgressPolicy matches a request, the request is allowed to span the ServicePerimeter boundary. For example, an EgressPolicy can be used to allow VMs on networks within the ServicePerimeter to access a defined set of projects outside the perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket or query against a BigQuery dataset). EgressPolicies are concerned with the *resources* that a request relates as well as the API services and API actions being used. They do not related to the direction of data movement. More detailed documentation for this concept can be found in the descriptions of EgressFrom and EgressTo."
    },
    "ServicePerimeterConfig": {
      "properties": {
        "ingressPolicies": {
          "description": "List of IngressPolicies to apply to the perimeter. A perimeter may have multiple IngressPolicies, each of which is evaluated separately. Access is granted if any Ingress Policy grants it. Must be empty for a perimeter bridge.",
          "type": "array",
          "items": {
            "$ref": "IngressPolicy"
          }
        },
        "resources": {
          "items": {
            "type": "string"
          },
          "description": "A list of Google Cloud resources that are inside of the service perimeter. Currently only projects and VPCs are allowed. Project format: `projects/{project_number}` VPC network format: `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.",
          "type": "array"
        },
        "egressPolicies": {
          "type": "array",
          "description": "List of EgressPolicies to apply to the perimeter. A perimeter may have multiple EgressPolicies, each of which is evaluated separately. Access is granted if any EgressPolicy grants it. Must be empty for a perimeter bridge.",
          "items": {
            "$ref": "EgressPolicy"
          }
        },
        "vpcAccessibleServices": {
          "$ref": "VpcAccessibleServices",
          "description": "Configuration for APIs allowed within Perimeter."
        },
        "restrictedServices": {
          "type": "array",
          "description": "Google Cloud services that are subject to the Service Perimeter restrictions. For example, if `storage.googleapis.com` is specified, access to the storage buckets inside the perimeter must meet the perimeter's access restrictions.",
          "items": {
            "type": "string"
          }
        },
        "accessLevels": {
          "type": "array",
          "description": "A list of `AccessLevel` resource names that allow resources within the `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are listed, resources within the perimeter can only be accessed via Google Cloud calls with request origins within the perimeter. Example: `\"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL\"`. For Service Perimeter Bridge, must be empty.",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "ServicePerimeterConfig",
      "type": "object",
      "description": "`ServicePerimeterConfig` specifies a set of Google Cloud resources that describe specific Service Perimeter configuration."
    },
    "Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "id": "Policy",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "AuditConfig"
          }
        },
        "etag": {
          "type": "string",
          "format": "byte",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
        },
        "bindings": {
          "type": "array",
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "items": {
            "$ref": "Binding"
          }
        }
      }
    },
    "DevicePolicy": {
      "type": "object",
      "id": "DevicePolicy",
      "properties": {
        "requireAdminApproval": {
          "type": "boolean",
          "description": "Whether the device needs to be approved by the customer admin."
        },
        "allowedDeviceManagementLevels": {
          "type": "array",
          "description": "Allowed device management levels, an empty list allows all management levels.",
          "items": {
            "type": "string",
            "enum": [
              "MANAGEMENT_UNSPECIFIED",
              "NONE",
              "BASIC",
              "COMPLETE"
            ],
            "enumDescriptions": [
              "The device's management level is not specified or not known.",
              "The device is not managed.",
              "Basic management is enabled, which is generally limited to monitoring and wiping the corporate account.",
              "Complete device management. This includes more thorough monitoring and the ability to directly manage the device (such as remote wiping). This can be enabled through the Android Enterprise Platform."
            ]
          }
        },
        "requireCorpOwned": {
          "type": "boolean",
          "description": "Whether the device needs to be corp owned."
        },
        "requireScreenlock": {
          "type": "boolean",
          "description": "Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`."
        },
        "allowedEncryptionStatuses": {
          "type": "array",
          "description": "Allowed encryptions statuses, an empty list allows all statuses.",
          "items": {
            "type": "string",
            "enum": [
              "ENCRYPTION_UNSPECIFIED",
              "ENCRYPTION_UNSUPPORTED",
              "UNENCRYPTED",
              "ENCRYPTED"
            ],
            "enumDescriptions": [
              "The encryption status of the device is not specified or not known.",
              "The device does not support encryption.",
              "The device supports encryption, but is currently unencrypted.",
              "The device is encrypted."
            ]
          }
        },
        "osConstraints": {
          "type": "array",
          "items": {
            "$ref": "OsConstraint"
          },
          "description": "Allowed OS versions, an empty list allows all types and all versions."
        }
      },
      "description": "`DevicePolicy` specifies device specific restrictions necessary to acquire a given access level. A `DevicePolicy` specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. `DevicePolicy` acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops."
    },
    "AuthorizedOrgsDesc": {
      "description": "`AuthorizedOrgsDesc` contains data for an organization's authorization policy.",
      "type": "object",
      "properties": {
        "assetType": {
          "enumDescriptions": [
            "No asset type specified.",
            "Device asset type.",
            "Credential strength asset type."
          ],
          "enum": [
            "ASSET_TYPE_UNSPECIFIED",
            "ASSET_TYPE_DEVICE",
            "ASSET_TYPE_CREDENTIAL_STRENGTH"
          ],
          "type": "string",
          "description": "The asset type of this authorized orgs desc. Valid values are `ASSET_TYPE_DEVICE`, and `ASSET_TYPE_CREDENTIAL_STRENGTH`."
        },
        "orgs": {
          "type": "array",
          "description": "The list of organization ids in this AuthorizedOrgsDesc. Format: `organizations/` Example: `organizations/123456`",
          "items": {
            "type": "string"
          }
        },
        "authorizationType": {
          "description": "A granular control type for authorization levels. Valid value is `AUTHORIZATION_TYPE_TRUST`.",
          "enumDescriptions": [
            "No authorization type specified.",
            "This authorization relationship is \"trust\"."
          ],
          "type": "string",
          "enum": [
            "AUTHORIZATION_TYPE_UNSPECIFIED",
            "AUTHORIZATION_TYPE_TRUST"
          ]
        },
        "name": {
          "description": "Resource name for the `AuthorizedOrgsDesc`. Format: `accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`. The `authorized_orgs_desc` component must begin with a letter, followed by alphanumeric characters or `_`. After you create an `AuthorizedOrgsDesc`, you cannot change its `name`.",
          "type": "string"
        },
        "authorizationDirection": {
          "type": "string",
          "enumDescriptions": [
            "No direction specified.",
            "The specified organizations are authorized to evaluate traffic in this organization.",
            "The traffic of the specified organizations can be evaluated by this organization."
          ],
          "description": "The direction of the authorization relationship between this organization and the organizations listed in the `orgs` field. The valid values for this field include the following: `AUTHORIZATION_DIRECTION_FROM`: Allows this organization to evaluate traffic in the organizations listed in the `orgs` field. `AUTHORIZATION_DIRECTION_TO`: Allows the organizations listed in the `orgs` field to evaluate the traffic in this organization. For the authorization relationship to take effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if organization A authorized organization B and C to evaluate its traffic, by specifying `AUTHORIZATION_DIRECTION_TO` as the authorization direction, organizations B and C must specify `AUTHORIZATION_DIRECTION_FROM` as the authorization direction in their `AuthorizedOrgsDesc` resource.",
          "enum": [
            "AUTHORIZATION_DIRECTION_UNSPECIFIED",
            "AUTHORIZATION_DIRECTION_TO",
            "AUTHORIZATION_DIRECTION_FROM"
          ]
        }
      },
      "id": "AuthorizedOrgsDesc"
    },
    "EgressTo": {
      "description": "Defines the conditions under which an EgressPolicy matches a request. Conditions are based on information about the ApiOperation intended to be performed on the `resources` specified. Note that if the destination of the request is also protected by a ServicePerimeter, then that ServicePerimeter must have an IngressPolicy which allows access in order for this request to succeed. The request must match `operations` AND `resources` fields in order to be allowed egress out of the perimeter.",
      "id": "EgressTo",
      "properties": {
        "operations": {
          "description": "A list of ApiOperations allowed to be performed by the sources specified in the corresponding EgressFrom. A request matches if it uses an operation/service in this list.",
          "items": {
            "$ref": "ApiOperation"
          },
          "type": "array"
        },
        "externalResources": {
          "description": "A list of external resources that are allowed to be accessed. Only AWS and Azure resources are supported. For Amazon S3, the supported format is s3://BUCKET_NAME. For Azure Storage, the supported format is azure://myaccount.blob.core.windows.net/CONTAINER_NAME. A request matches if it contains an external resource in this list (Example: s3://bucket/path). Currently '*' is not allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of resources, currently only projects in the form `projects/`, that are allowed to be accessed by sources defined in the corresponding EgressFrom. A request matches if it contains a resource in this list. If `*` is specified for `resources`, then this EgressTo rule will authorize access to all resources outside the perimeter."
        }
      },
      "type": "object"
    },
    "AccessLevel": {
      "type": "object",
      "id": "AccessLevel",
      "description": "An `AccessLevel` is a label that can be applied to requests to Google Cloud services, along with a list of requirements necessary for the label to be applied.",
      "properties": {
        "name": {
          "description": "Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Human readable title. Must be unique within the Policy."
        },
        "description": {
          "type": "string",
          "description": "Description of the `AccessLevel` and its use. Does not affect behavior."
        },
        "basic": {
          "description": "A `BasicLevel` composed of `Conditions`.",
          "$ref": "BasicLevel"
        },
        "custom": {
          "description": "A `CustomLevel` written in the Common Expression Language.",
          "$ref": "CustomLevel"
        }
      }
    },
    "ListServicePerimetersResponse": {
      "properties": {
        "servicePerimeters": {
          "type": "array",
          "description": "List of the Service Perimeter instances.",
          "items": {
            "$ref": "ServicePerimeter"
          }
        },
        "nextPageToken": {
          "description": "The pagination token to retrieve the next page of results. If the value is empty, no further results remain.",
          "type": "string"
        }
      },
      "description": "A response to `ListServicePerimetersRequest`.",
      "type": "object",
      "id": "ListServicePerimetersResponse"
    },
    "ReplaceServicePerimetersResponse": {
      "type": "object",
      "description": "A response to ReplaceServicePerimetersRequest. This will be put inside of Operation.response field.",
      "properties": {
        "servicePerimeters": {
          "items": {
            "$ref": "ServicePerimeter"
          },
          "type": "array",
          "description": "List of the Service Perimeter instances."
        }
      },
      "id": "ReplaceServicePerimetersResponse"
    },
    "VpcAccessibleServices": {
      "id": "VpcAccessibleServices",
      "description": "Specifies how APIs are allowed to communicate within the Service Perimeter.",
      "properties": {
        "allowedServices": {
          "description": "The list of APIs usable within the Service Perimeter. Must be empty unless 'enable_restriction' is True. You can specify a list of individual services, as well as include the 'RESTRICTED-SERVICES' value, which automatically includes all of the services protected by the perimeter.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "enableRestriction": {
          "type": "boolean",
          "description": "Whether to restrict API calls within the Service Perimeter to the list of APIs specified in 'allowed_services'."
        }
      },
      "type": "object"
    },
    "IngressFrom": {
      "type": "object",
      "id": "IngressFrom",
      "description": "Defines the conditions under which an IngressPolicy matches a request. Conditions are based on information about the source of the request. The request must satisfy what is defined in `sources` AND identity related fields in order to match.",
      "properties": {
        "identities": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of identities that are allowed access through this ingress policy. Should be in the format of email address. The email address should represent individual user or service account only."
        },
        "sources": {
          "items": {
            "$ref": "IngressSource"
          },
          "description": "Sources that this IngressPolicy authorizes access from.",
          "type": "array"
        },
        "identityType": {
          "enumDescriptions": [
            "No blanket identity group specified.",
            "Authorize access from all identities outside the perimeter.",
            "Authorize access from all human users outside the perimeter.",
            "Authorize access from all service accounts outside the perimeter."
          ],
          "type": "string",
          "description": "Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.",
          "enum": [
            "IDENTITY_TYPE_UNSPECIFIED",
            "ANY_IDENTITY",
            "ANY_USER_ACCOUNT",
            "ANY_SERVICE_ACCOUNT"
          ]
        }
      }
    },
    "TestIamPermissionsRequest": {
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "Request message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsRequest",
      "type": "object"
    },
    "ListAccessPoliciesResponse": {
      "type": "object",
      "description": "A response to `ListAccessPoliciesRequest`.",
      "id": "ListAccessPoliciesResponse",
      "properties": {
        "accessPolicies": {
          "description": "List of the AccessPolicy instances.",
          "type": "array",
          "items": {
            "$ref": "AccessPolicy"
          }
        },
        "nextPageToken": {
          "description": "The pagination token to retrieve the next page of results. If the value is empty, no further results remain.",
          "type": "string"
        }
      }
    },
    "AuditLogConfig": {
      "properties": {
        "logType": {
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ],
          "description": "The log type that this config enables.",
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "type": "string"
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "id": "AuditLogConfig",
      "type": "object"
    },
    "OsConstraint": {
      "properties": {
        "minimumVersion": {
          "type": "string",
          "description": "The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `\"major.minor.patch\"`. Examples: `\"10.5.301\"`, `\"9.2.1\"`."
        },
        "osType": {
          "enum": [
            "OS_UNSPECIFIED",
            "DESKTOP_MAC",
            "DESKTOP_WINDOWS",
            "DESKTOP_LINUX",
            "DESKTOP_CHROME_OS",
            "ANDROID",
            "IOS"
          ],
          "enumDescriptions": [
            "The operating system of the device is not specified or not known.",
            "A desktop Mac operating system.",
            "A desktop Windows operating system.",
            "A desktop Linux operating system.",
            "A desktop ChromeOS operating system.",
            "An Android operating system.",
            "An iOS operating system."
          ],
          "description": "Required. The allowed OS type.",
          "type": "string"
        },
        "requireVerifiedChromeOs": {
          "type": "boolean",
          "description": "Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request."
        }
      },
      "type": "object",
      "id": "OsConstraint",
      "description": "A restriction on the OS type and version of devices making requests."
    },
    "MethodSelector": {
      "description": "An allowed method or permission of a service specified in ApiOperation.",
      "id": "MethodSelector",
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "description": "Value for `method` should be a valid method name for the corresponding `service_name` in ApiOperation. If `*` used as value for `method`, then ALL methods and permissions are allowed."
        },
        "permission": {
          "type": "string",
          "description": "Value for `permission` should be a valid Cloud IAM permission for the corresponding `service_name` in ApiOperation."
        }
      }
    },
    "ListAuthorizedOrgsDescsResponse": {
      "id": "ListAuthorizedOrgsDescsResponse",
      "description": "A response to `ListAuthorizedOrgsDescsRequest`.",
      "type": "object",
      "properties": {
        "authorizedOrgsDescs": {
          "items": {
            "$ref": "AuthorizedOrgsDesc"
          },
          "type": "array",
          "description": "List of all the Authorized Orgs Desc instances."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token to retrieve the next page of results. If the value is empty, no further results remain."
        }
      }
    },
    "ApiOperation": {
      "description": "Identification for an API Operation.",
      "type": "object",
      "id": "ApiOperation",
      "properties": {
        "serviceName": {
          "description": "The name of the API whose methods or permissions the IngressPolicy or EgressPolicy want to allow. A single ApiOperation with `service_name` field set to `*` will allow all methods AND permissions for all services.",
          "type": "string"
        },
        "methodSelectors": {
          "type": "array",
          "items": {
            "$ref": "MethodSelector"
          },
          "description": "API methods or permissions to allow. Method or permission must belong to the service specified by `service_name` field. A single MethodSelector entry with `*` specified for the `method` field will allow all methods AND permissions for the service specified in `service_name`."
        }
      }
    },
    "ReplaceServicePerimetersRequest": {
      "properties": {
        "servicePerimeters": {
          "type": "array",
          "description": "Required. The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.",
          "items": {
            "$ref": "ServicePerimeter"
          }
        },
        "etag": {
          "type": "string",
          "description": "Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided."
        }
      },
      "id": "ReplaceServicePerimetersRequest",
      "description": "A request to replace all existing Service Perimeters in an Access Policy with the Service Perimeters provided. This is done atomically.",
      "type": "object"
    },
    "EgressFrom": {
      "description": "Defines the conditions under which an EgressPolicy matches a request. Conditions based on information about the source of the request. Note that if the destination of the request is also protected by a ServicePerimeter, then that ServicePerimeter must have an IngressPolicy which allows access in order for this request to succeed.",
      "id": "EgressFrom",
      "properties": {
        "identityType": {
          "description": "Specifies the type of identities that are allowed access to outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.",
          "type": "string",
          "enumDescriptions": [
            "No blanket identity group specified.",
            "Authorize access from all identities outside the perimeter.",
            "Authorize access from all human users outside the perimeter.",
            "Authorize access from all service accounts outside the perimeter."
          ],
          "enum": [
            "IDENTITY_TYPE_UNSPECIFIED",
            "ANY_IDENTITY",
            "ANY_USER_ACCOUNT",
            "ANY_SERVICE_ACCOUNT"
          ]
        },
        "identities": {
          "description": "A list of identities that are allowed access through this [EgressPolicy]. Should be in the format of email address. The email address should represent individual user or service account only.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "Operation": {
      "properties": {
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        }
      },
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object"
    },
    "AccessContextManagerOperationMetadata": {
      "type": "object",
      "properties": {},
      "description": "Metadata of Access Context Manager's Long Running Operations.",
      "id": "AccessContextManagerOperationMetadata"
    },
    "GetIamPolicyRequest": {
      "properties": {
        "options": {
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.",
          "$ref": "GetPolicyOptions"
        }
      },
      "id": "GetIamPolicyRequest",
      "type": "object",
      "description": "Request message for `GetIamPolicy` method."
    },
    "Expr": {
      "id": "Expr",
      "properties": {
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        }
      },
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object"
    },
    "SetIamPolicyRequest": {
      "type": "object",
      "id": "SetIamPolicyRequest",
      "properties": {
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "type": "string",
          "format": "google-fieldmask"
        },
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them."
        }
      },
      "description": "Request message for `SetIamPolicy` method."
    },
    "AccessPolicy": {
      "id": "AccessPolicy",
      "description": "`AccessPolicy` is a container for `AccessLevels` (which define the necessary attributes to use Google Cloud services) and `ServicePerimeters` (which define regions of services able to freely pass data within a perimeter). An access policy is globally visible within an organization, and the restrictions it specifies apply to all projects within an organization.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{access_policy}`"
        },
        "scopes": {
          "description": "The scopes of the AccessPolicy. Scopes define which resources a policy can restrict and where its resources can be referenced. For example, policy A with `scopes=[\"folders/123\"]` has the following behavior: - ServicePerimeter can only restrict projects within `folders/123`. - ServicePerimeter within policy A can only reference access levels defined within policy A. - Only one policy can include a given scope; thus, attempting to create a second policy which includes `folders/123` will result in an error. If no scopes are provided, then any resource within the organization can be restricted. Scopes cannot be modified after a policy is created. Policies can only have a single scope. Format: list of `folders/{folder_number}` or `projects/{project_number}`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "description": "Required. Human readable title. Does not affect behavior.",
          "type": "string"
        },
        "parent": {
          "description": "Required. The parent of this `AccessPolicy` in the Cloud Resource Hierarchy. Currently immutable once created. Format: `organizations/{organization_id}`",
          "type": "string"
        },
        "etag": {
          "description": "Output only. An opaque identifier for the current version of the `AccessPolicy`. This will always be a strongly validated etag, meaning that two Access Polices will be identical if and only if their etags are identical. Clients should not expect this to be in any specific format.",
          "type": "string"
        }
      }
    },
    "IngressPolicy": {
      "id": "IngressPolicy",
      "properties": {
        "ingressFrom": {
          "$ref": "IngressFrom",
          "description": "Defines the conditions on the source of a request causing this IngressPolicy to apply."
        },
        "ingressTo": {
          "$ref": "IngressTo",
          "description": "Defines the conditions on the ApiOperation and request destination that cause this IngressPolicy to apply."
        }
      },
      "type": "object",
      "description": "Policy for ingress into ServicePerimeter. IngressPolicies match requests based on `ingress_from` and `ingress_to` stanzas. For an ingress policy to match, both the `ingress_from` and `ingress_to` stanzas must be matched. If an IngressPolicy matches a request, the request is allowed through the perimeter boundary from outside the perimeter. For example, access from the internet can be allowed either based on an AccessLevel or, for traffic hosted on Google Cloud, the project of the source network. For access from private networks, using the project of the hosting network is required. Individual ingress policies can be limited by restricting which services and/or actions they match using the `ingress_to` field."
    }
  },
  "mtlsRootUrl": "https://accesscontextmanager.mtls.googleapis.com/",
  "revision": "20230903",
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "servicePath": "",
  "parameters": {
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format."
    },
    "alt": {
      "location": "query",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "description": "Data format for response."
    }
  },
  "protocol": "rest",
  "title": "Access Context Manager API",
  "basePath": "",
  "rootUrl": "https://accesscontextmanager.googleapis.com/",
  "version_module": true,
  "name": "accesscontextmanager",
  "documentationLink": "https://cloud.google.com/access-context-manager/docs/reference/rest/",
  "id": "accesscontextmanager:v1"
}

{
  "protocol": "rest",
  "basePath": "",
  "ownerName": "Google",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-language": {
          "description": "Apply machine learning models to reveal the structure and meaning of text"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "revision": "20230812",
  "version_module": true,
  "baseUrl": "https://language.googleapis.com/",
  "description": "Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.",
  "version": "v2",
  "mtlsRootUrl": "https://language.mtls.googleapis.com/",
  "canonicalName": "Cloud Natural Language",
  "ownerDomain": "google.com",
  "batchPath": "batch",
  "id": "language:v2",
  "resources": {
    "documents": {
      "methods": {
        "annotateText": {
          "id": "language.documents.annotateText",
          "flatPath": "v2/documents:annotateText",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "AnnotateTextResponse"
          },
          "path": "v2/documents:annotateText",
          "parameters": {},
          "parameterOrder": [],
          "description": "A convenience method that provides all features in one call.",
          "request": {
            "$ref": "AnnotateTextRequest"
          }
        },
        "analyzeEntities": {
          "response": {
            "$ref": "AnalyzeEntitiesResponse"
          },
          "httpMethod": "POST",
          "path": "v2/documents:analyzeEntities",
          "request": {
            "$ref": "AnalyzeEntitiesRequest"
          },
          "parameterOrder": [],
          "id": "language.documents.analyzeEntities",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Finds named entities (currently proper names and common nouns) in the text along with entity types, probability, mentions for each entity, and other properties.",
          "parameters": {},
          "flatPath": "v2/documents:analyzeEntities"
        },
        "analyzeSentiment": {
          "flatPath": "v2/documents:analyzeSentiment",
          "response": {
            "$ref": "AnalyzeSentimentResponse"
          },
          "id": "language.documents.analyzeSentiment",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameterOrder": [],
          "parameters": {},
          "httpMethod": "POST",
          "path": "v2/documents:analyzeSentiment",
          "description": "Analyzes the sentiment of the provided text.",
          "request": {
            "$ref": "AnalyzeSentimentRequest"
          }
        },
        "classifyText": {
          "httpMethod": "POST",
          "id": "language.documents.classifyText",
          "path": "v2/documents:classifyText",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "ClassifyTextRequest"
          },
          "flatPath": "v2/documents:classifyText",
          "parameters": {},
          "parameterOrder": [],
          "description": "Classifies a document into categories.",
          "response": {
            "$ref": "ClassifyTextResponse"
          }
        },
        "moderateText": {
          "description": "Moderates a document for harmful and sensitive categories.",
          "flatPath": "v2/documents:moderateText",
          "id": "language.documents.moderateText",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "ModerateTextRequest"
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "ModerateTextResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v2/documents:moderateText"
        }
      }
    }
  },
  "rootUrl": "https://language.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "documentationLink": "https://cloud.google.com/natural-language/",
  "kind": "discovery#restDescription",
  "name": "language",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "schemas": {
    "ClassifyTextResponse": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "description": "Categories representing the input document.",
          "items": {
            "$ref": "ClassificationCategory"
          }
        },
        "languageSupported": {
          "description": "Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.",
          "type": "boolean"
        },
        "languageCode": {
          "type": "string",
          "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
        }
      },
      "id": "ClassifyTextResponse",
      "description": "The document classification response message."
    },
    "Entity": {
      "description": "Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as probability and mentions, with entities.",
      "id": "Entity",
      "type": "object",
      "properties": {
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.",
          "type": "object"
        },
        "mentions": {
          "description": "The mentions of this entity in the input document. The API currently supports proper noun mentions.",
          "type": "array",
          "items": {
            "$ref": "EntityMention"
          }
        },
        "name": {
          "description": "The representative name for the entity.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Unknown",
            "Person",
            "Location",
            "Organization",
            "Event",
            "Artwork",
            "Consumer product",
            "Other types of entities",
            "Phone number The metadata lists the phone number, formatted according to local convention, plus whichever additional elements appear in the text: * `number` - the actual number, broken down into sections as per local convention * `national_prefix` - country code, if detected * `area_code` - region or area code, if detected * `extension` - phone extension (to be dialed after connection), if detected",
            "Address The metadata identifies the street number and locality plus whichever additional elements appear in the text: * `street_number` - street number * `locality` - city or town * `street_name` - street/route name, if detected * `postal_code` - postal code, if detected * `country` - country, if detected\u003c * `broad_region` - administrative area, such as the state, if detected * `narrow_region` - smaller administrative area, such as county, if detected * `sublocality` - used in Asian addresses to demark a district within a city, if detected",
            "Date The metadata identifies the components of the date: * `year` - four digit year, if detected * `month` - two digit month number, if detected * `day` - two digit day number, if detected",
            "Number The metadata is the number itself.",
            "Price The metadata identifies the `value` and `currency`."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "PERSON",
            "LOCATION",
            "ORGANIZATION",
            "EVENT",
            "WORK_OF_ART",
            "CONSUMER_GOOD",
            "OTHER",
            "PHONE_NUMBER",
            "ADDRESS",
            "DATE",
            "NUMBER",
            "PRICE"
          ],
          "description": "The entity type."
        },
        "sentiment": {
          "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document.",
          "$ref": "Sentiment"
        }
      }
    },
    "AnalyzeEntitiesResponse": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "The recognized entities in the input document.",
          "items": {
            "$ref": "Entity"
          }
        },
        "languageSupported": {
          "type": "boolean",
          "description": "Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis."
        },
        "languageCode": {
          "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.",
          "type": "string"
        }
      },
      "id": "AnalyzeEntitiesResponse",
      "description": "The entity analysis response message."
    },
    "EntityMention": {
      "properties": {
        "probability": {
          "description": "Probability score associated with the entity. The score shows the probability of the entity mention being the entity type. The score is in (0, 1] range.",
          "format": "float",
          "type": "number"
        },
        "text": {
          "$ref": "TextSpan",
          "description": "The mention text."
        },
        "sentiment": {
          "$ref": "Sentiment",
          "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document."
        },
        "type": {
          "enum": [
            "TYPE_UNKNOWN",
            "PROPER",
            "COMMON"
          ],
          "type": "string",
          "description": "The type of the entity mention.",
          "enumDescriptions": [
            "Unknown",
            "Proper name",
            "Common noun (or noun compound)"
          ]
        }
      },
      "id": "EntityMention",
      "type": "object",
      "description": "Represents a mention for an entity in the text. Currently, proper noun mentions are supported."
    },
    "Features": {
      "properties": {
        "classifyText": {
          "type": "boolean",
          "description": "Optional. Classify the full document into categories."
        },
        "extractEntities": {
          "type": "boolean",
          "description": "Optional. Extract entities."
        },
        "extractDocumentSentiment": {
          "type": "boolean",
          "description": "Optional. Extract document-level sentiment."
        },
        "moderateText": {
          "description": "Optional. Moderate the document for harmful and sensitive categories.",
          "type": "boolean"
        }
      },
      "description": "All available features. Setting each one to true will enable that specific analysis for the input.",
      "id": "Features",
      "type": "object"
    },
    "AnalyzeSentimentResponse": {
      "description": "The sentiment analysis response message.",
      "properties": {
        "languageSupported": {
          "description": "Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.",
          "type": "boolean"
        },
        "documentSentiment": {
          "$ref": "Sentiment",
          "description": "The overall sentiment of the input document."
        },
        "languageCode": {
          "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.",
          "type": "string"
        },
        "sentences": {
          "type": "array",
          "items": {
            "$ref": "Sentence"
          },
          "description": "The sentiment for all the sentences in the document."
        }
      },
      "id": "AnalyzeSentimentResponse",
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "Status"
    },
    "ClassifyTextRequest": {
      "description": "The document classification request message.",
      "id": "ClassifyTextRequest",
      "type": "object",
      "properties": {
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        }
      }
    },
    "Sentence": {
      "description": "Represents a sentence in the input document.",
      "properties": {
        "text": {
          "description": "The sentence text.",
          "$ref": "TextSpan"
        },
        "sentiment": {
          "description": "For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence.",
          "$ref": "Sentiment"
        }
      },
      "type": "object",
      "id": "Sentence"
    },
    "Document": {
      "id": "Document",
      "description": "Represents the input to API methods.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
          "enumDescriptions": [
            "The content type is not specified.",
            "Plain text",
            "HTML"
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "PLAIN_TEXT",
            "HTML"
          ]
        },
        "gcsContentUri": {
          "type": "string",
          "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
        },
        "languageCode": {
          "description": "Optional. The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.",
          "type": "string"
        },
        "content": {
          "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data.",
          "type": "string"
        }
      }
    },
    "Sentiment": {
      "properties": {
        "magnitude": {
          "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).",
          "format": "float",
          "type": "number"
        },
        "score": {
          "type": "number",
          "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).",
          "format": "float"
        }
      },
      "description": "Represents the feeling associated with the entire text or entities in the text.",
      "id": "Sentiment",
      "type": "object"
    },
    "AnnotateTextRequest": {
      "properties": {
        "document": {
          "$ref": "Document",
          "description": "Required. Input document."
        },
        "features": {
          "description": "Required. The enabled features.",
          "$ref": "Features"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate offsets.",
          "type": "string",
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
          ],
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ]
        }
      },
      "type": "object",
      "description": "The request message for the text annotation API, which can perform multiple analysis types in one call.",
      "id": "AnnotateTextRequest"
    },
    "AnnotateTextResponse": {
      "description": "The text annotations response message.",
      "id": "AnnotateTextResponse",
      "properties": {
        "sentences": {
          "description": "Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment.",
          "type": "array",
          "items": {
            "$ref": "Sentence"
          }
        },
        "entities": {
          "items": {
            "$ref": "Entity"
          },
          "description": "Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities or AnnotateTextRequest.Features.extract_entity_sentiment.",
          "type": "array"
        },
        "languageCode": {
          "type": "string",
          "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
        },
        "moderationCategories": {
          "items": {
            "$ref": "ClassificationCategory"
          },
          "type": "array",
          "description": "Harmful and sensitive categories identified in the input document."
        },
        "categories": {
          "type": "array",
          "description": "Categories identified in the input document.",
          "items": {
            "$ref": "ClassificationCategory"
          }
        },
        "languageSupported": {
          "description": "Whether the language is officially supported by all requested features. The API may still return a response when the language is not supported, but it is on a best effort basis.",
          "type": "boolean"
        },
        "documentSentiment": {
          "$ref": "Sentiment",
          "description": "The overall sentiment for the document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment."
        }
      },
      "type": "object"
    },
    "ModerateTextResponse": {
      "id": "ModerateTextResponse",
      "properties": {
        "languageSupported": {
          "description": "Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.",
          "type": "boolean"
        },
        "moderationCategories": {
          "type": "array",
          "description": "Harmful and sensitive categories representing the input document.",
          "items": {
            "$ref": "ClassificationCategory"
          }
        },
        "languageCode": {
          "type": "string",
          "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
        }
      },
      "description": "The document moderation response message.",
      "type": "object"
    },
    "AnalyzeEntitiesRequest": {
      "id": "AnalyzeEntitiesRequest",
      "description": "The entity analysis request message.",
      "properties": {
        "encodingType": {
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
          ],
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ],
          "type": "string",
          "description": "The encoding type used by the API to calculate offsets."
        },
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        }
      },
      "type": "object"
    },
    "AnalyzeSentimentRequest": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "Document",
          "description": "Required. Input document."
        },
        "encodingType": {
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
          ],
          "description": "The encoding type used by the API to calculate sentence offsets.",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ],
          "type": "string"
        }
      },
      "id": "AnalyzeSentimentRequest",
      "description": "The sentiment analysis request message."
    },
    "TextSpan": {
      "id": "TextSpan",
      "type": "object",
      "description": "Represents a text span in the input document.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The content of the text span, which is a substring of the document."
        },
        "beginOffset": {
          "type": "integer",
          "format": "int32",
          "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
        }
      }
    },
    "ClassificationCategory": {
      "type": "object",
      "properties": {
        "confidence": {
          "description": "The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text.",
          "type": "number",
          "format": "float"
        },
        "name": {
          "type": "string",
          "description": "The name of the category representing the document."
        }
      },
      "id": "ClassificationCategory",
      "description": "Represents a category returned from the text classifier."
    },
    "ModerateTextRequest": {
      "description": "The document moderation request message.",
      "properties": {
        "document": {
          "$ref": "Document",
          "description": "Required. Input document."
        }
      },
      "id": "ModerateTextRequest",
      "type": "object"
    }
  },
  "discoveryVersion": "v1",
  "title": "Cloud Natural Language API",
  "parameters": {
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "location": "query",
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string"
    }
  },
  "servicePath": ""
}

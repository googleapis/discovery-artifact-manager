{
  "version_module": true,
  "canonicalName": "Transcoder",
  "name": "transcoder",
  "revision": "20210731",
  "documentationLink": "https://cloud.google.com/transcoder/docs/",
  "protocol": "rest",
  "ownerName": "Google",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "servicePath": "",
  "version": "v1beta1",
  "id": "transcoder:v1beta1",
  "ownerDomain": "google.com",
  "description": "This API converts video files into formats suitable for consumer distribution. ",
  "title": "Transcoder API",
  "rootUrl": "https://transcoder.googleapis.com/",
  "discoveryVersion": "v1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        }
      }
    }
  },
  "baseUrl": "https://transcoder.googleapis.com/",
  "kind": "discovery#restDescription",
  "basePath": "",
  "mtlsRootUrl": "https://transcoder.mtls.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "schemas": {
    "AnimationEnd": {
      "id": "AnimationEnd",
      "properties": {
        "startTimeOffset": {
          "description": "The time to end overlay object, in seconds. Default: 0",
          "type": "string",
          "format": "google-duration"
        }
      },
      "type": "object",
      "description": "End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video."
    },
    "AudioChannel": {
      "description": "The audio channel.",
      "type": "object",
      "id": "AudioChannel",
      "properties": {
        "inputs": {
          "description": "List of `Job.inputs` for this audio channel.",
          "items": {
            "$ref": "AudioChannelInput"
          },
          "type": "array"
        }
      }
    },
    "Audio": {
      "description": "Audio preprocessing configuration.",
      "id": "Audio",
      "properties": {
        "lowBoost": {
          "type": "boolean",
          "description": "Enable boosting low frequency components. The default is `false`."
        },
        "lufs": {
          "description": "Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization",
          "type": "number",
          "format": "double"
        },
        "highBoost": {
          "type": "boolean",
          "description": "Enable boosting high frequency components. The default is `false`."
        }
      },
      "type": "object"
    },
    "SpriteSheet": {
      "id": "SpriteSheet",
      "description": "Sprite sheet configuration.",
      "type": "object",
      "properties": {
        "quality": {
          "format": "int32",
          "type": "integer",
          "description": "The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio."
        },
        "rowCount": {
          "format": "int32",
          "description": "The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.",
          "type": "integer"
        },
        "spriteHeightPixels": {
          "format": "int32",
          "description": "Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).",
          "type": "integer"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100."
        },
        "format": {
          "description": "Format type. The default is `\"jpeg\"`. Supported formats: - 'jpeg'",
          "type": "string"
        },
        "filePrefix": {
          "type": "string",
          "description": "Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"sprite_sheet0000000123.jpeg\"`."
        },
        "columnCount": {
          "format": "int32",
          "description": "The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.",
          "type": "integer"
        },
        "spriteWidthPixels": {
          "format": "int32",
          "type": "integer",
          "description": "Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field)."
        },
        "interval": {
          "type": "string",
          "format": "google-duration",
          "description": "Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds."
        },
        "startTimeOffset": {
          "format": "google-duration",
          "description": "Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.",
          "type": "string"
        },
        "endTimeOffset": {
          "format": "google-duration",
          "description": "End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.",
          "type": "string"
        }
      }
    },
    "EditAtom": {
      "description": "Edit atom.",
      "type": "object",
      "id": "EditAtom",
      "properties": {
        "endTimeOffset": {
          "type": "string",
          "format": "google-duration",
          "description": "End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom."
        },
        "inputs": {
          "type": "array",
          "description": "List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.",
          "items": {
            "type": "string"
          }
        },
        "startTimeOffset": {
          "type": "string",
          "description": "Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.",
          "format": "google-duration"
        },
        "key": {
          "type": "string",
          "description": "A unique key for this atom. Must be specified when using advanced mapping."
        }
      }
    },
    "AdBreak": {
      "properties": {
        "startTimeOffset": {
          "format": "google-duration",
          "description": "Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.",
          "type": "string"
        }
      },
      "id": "AdBreak",
      "description": "Ad break.",
      "type": "object"
    },
    "TextAtom": {
      "id": "TextAtom",
      "type": "object",
      "description": "The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.",
      "properties": {
        "inputs": {
          "type": "array",
          "description": "List of `Job.inputs` that should be embedded in this atom. Only one input is supported.",
          "items": {
            "$ref": "TextInput"
          }
        },
        "key": {
          "type": "string",
          "description": "Required. The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`."
        }
      }
    },
    "Color": {
      "description": "Color preprocessing configuration.",
      "type": "object",
      "properties": {
        "contrast": {
          "type": "number",
          "format": "double",
          "description": "Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0."
        },
        "saturation": {
          "format": "double",
          "description": "Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.",
          "type": "number"
        },
        "brightness": {
          "type": "number",
          "format": "double",
          "description": "Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0."
        }
      },
      "id": "Color"
    },
    "SegmentSettings": {
      "type": "object",
      "properties": {
        "individualSegments": {
          "description": "Required. Create an individual segment file. The default is `false`.",
          "type": "boolean"
        },
        "segmentDuration": {
          "format": "google-duration",
          "description": "Duration of the segments in seconds. The default is `\"6.0s\"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).",
          "type": "string"
        }
      },
      "description": "Segment settings for `\"ts\"`, `\"fmp4\"` and `\"vtt\"`.",
      "id": "SegmentSettings"
    },
    "OriginUri": {
      "properties": {
        "hls": {
          "type": "string",
          "description": "HLS manifest URI per https://tools.ietf.org/html/rfc8216#section-4.3.4. If multiple HLS manifests are created, only the first one is listed."
        },
        "dash": {
          "description": "Dash manifest URI. If multiple Dash manifests are created, only the first one is listed.",
          "type": "string"
        }
      },
      "description": "The origin URI.",
      "type": "object",
      "id": "OriginUri"
    },
    "Deblock": {
      "description": "Deblock preprocessing configuration.",
      "id": "Deblock",
      "properties": {
        "strength": {
          "format": "double",
          "type": "number",
          "description": "Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enable deblocker. The default is `false`."
        }
      },
      "type": "object"
    },
    "PubsubDestination": {
      "description": "A Pub/Sub destination.",
      "id": "PubsubDestination",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`."
        }
      },
      "type": "object"
    },
    "MpegCommonEncryption": {
      "description": "Configuration for MPEG Common Encryption (MPEG-CENC).",
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string",
          "description": "Required. 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption."
        },
        "scheme": {
          "type": "string",
          "description": "Required. Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'"
        }
      },
      "id": "MpegCommonEncryption"
    },
    "Output": {
      "properties": {
        "uri": {
          "description": "URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.",
          "type": "string"
        }
      },
      "id": "Output",
      "description": "Location of output file(s) in a Cloud Storage bucket.",
      "type": "object"
    },
    "AudioChannelInput": {
      "description": "Identifies which input file, track, and channel should be used.",
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Required. The `Input.key` that identifies the input file."
        },
        "gainDb": {
          "type": "number",
          "description": "Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.",
          "format": "double"
        },
        "channel": {
          "format": "int32",
          "description": "Required. The zero-based index of the channel in the input file.",
          "type": "integer"
        },
        "track": {
          "format": "int32",
          "description": "Required. The zero-based index of the track in the input file.",
          "type": "integer"
        }
      },
      "id": "AudioChannelInput"
    },
    "Progress": {
      "type": "object",
      "properties": {
        "notified": {
          "description": "Estimated fractional progress for `notifying` step.",
          "type": "number",
          "format": "double"
        },
        "analyzed": {
          "format": "double",
          "type": "number",
          "description": "Estimated fractional progress for `analyzing` step."
        },
        "encoded": {
          "type": "number",
          "description": "Estimated fractional progress for `encoding` step.",
          "format": "double"
        },
        "uploaded": {
          "type": "number",
          "format": "double",
          "description": "Estimated fractional progress for `uploading` step."
        }
      },
      "description": "Estimated fractional progress for each step, from `0` to `1`.",
      "id": "Progress"
    },
    "FailureDetail": {
      "id": "FailureDetail",
      "type": "object",
      "description": "Additional information about the reasons for the failure.",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the failure."
        }
      }
    },
    "Crop": {
      "properties": {
        "rightPixels": {
          "format": "int32",
          "description": "The number of pixels to crop from the right. The default is 0.",
          "type": "integer"
        },
        "topPixels": {
          "format": "int32",
          "description": "The number of pixels to crop from the top. The default is 0.",
          "type": "integer"
        },
        "leftPixels": {
          "description": "The number of pixels to crop from the left. The default is 0.",
          "format": "int32",
          "type": "integer"
        },
        "bottomPixels": {
          "format": "int32",
          "description": "The number of pixels to crop from the bottom. The default is 0.",
          "type": "integer"
        }
      },
      "description": "Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.",
      "type": "object",
      "id": "Crop"
    },
    "AudioAtom": {
      "description": "The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.",
      "properties": {
        "key": {
          "description": "Required. The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "description": "List of `Channel`s for this audio stream. for in-depth explanation.",
          "items": {
            "$ref": "AudioChannel"
          }
        }
      },
      "id": "AudioAtom",
      "type": "object"
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "type": "object",
      "description": "Represents the metadata of the long-running operation.",
      "properties": {
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean",
          "readOnly": true
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "verb": {
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        },
        "target": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Server-defined resource path for the target of the operation."
        },
        "statusDetail": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string",
          "readOnly": true
        },
        "apiVersion": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. API version used to start the operation."
        },
        "createTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time the operation was created."
        }
      }
    },
    "PreprocessingConfig": {
      "type": "object",
      "description": "Preprocessing configurations.",
      "id": "PreprocessingConfig",
      "properties": {
        "crop": {
          "$ref": "Crop",
          "description": "Specify the video cropping configuration."
        },
        "denoise": {
          "$ref": "Denoise",
          "description": "Denoise preprocessing configuration."
        },
        "color": {
          "description": "Color preprocessing configuration.",
          "$ref": "Color"
        },
        "deblock": {
          "$ref": "Deblock",
          "description": "Deblock preprocessing configuration."
        },
        "pad": {
          "$ref": "Pad",
          "description": "Specify the video pad filter configuration."
        },
        "audio": {
          "description": "Audio preprocessing configuration.",
          "$ref": "Audio"
        }
      }
    },
    "ElementaryStream": {
      "type": "object",
      "properties": {
        "textStream": {
          "description": "Encoding of a text stream. For example, closed captions or subtitles.",
          "$ref": "TextStream"
        },
        "audioStream": {
          "$ref": "AudioStream",
          "description": "Encoding of an audio stream."
        },
        "videoStream": {
          "description": "Encoding of a video stream.",
          "$ref": "VideoStream"
        },
        "key": {
          "type": "string",
          "description": "A unique key for this elementary stream."
        }
      },
      "id": "ElementaryStream",
      "description": "Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats."
    },
    "Encryption": {
      "properties": {
        "iv": {
          "type": "string",
          "description": "Required. 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits."
        },
        "aes128": {
          "$ref": "Aes128Encryption",
          "description": "Configuration for AES-128 encryption."
        },
        "key": {
          "description": "Required. 128 bit encryption key represented as lowercase hexadecimal digits.",
          "type": "string"
        },
        "mpegCenc": {
          "$ref": "MpegCommonEncryption",
          "description": "Configuration for MPEG Common Encryption (MPEG-CENC)."
        },
        "sampleAes": {
          "$ref": "SampleAesEncryption",
          "description": "Configuration for SAMPLE-AES encryption."
        }
      },
      "type": "object",
      "description": "Encryption settings.",
      "id": "Encryption"
    },
    "NormalizedCoordinate": {
      "id": "NormalizedCoordinate",
      "description": "2D normalized coordinates. Default: `{0.0, 0.0}`",
      "properties": {
        "y": {
          "description": "Normalized y coordinate.",
          "type": "number",
          "format": "double"
        },
        "x": {
          "description": "Normalized x coordinate.",
          "type": "number",
          "format": "double"
        }
      },
      "type": "object"
    },
    "MuxStream": {
      "id": "MuxStream",
      "properties": {
        "container": {
          "description": "The container format. The default is `\"mp4\"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `\".m4s\"` - 'mp4' - 'vtt'",
          "type": "string"
        },
        "elementaryStreams": {
          "type": "array",
          "description": "List of `ElementaryStream.key`s multiplexed in this stream.",
          "items": {
            "type": "string"
          }
        },
        "fileName": {
          "description": "The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"mux_stream0000000123.ts\"`.",
          "type": "string"
        },
        "segmentSettings": {
          "description": "Segment settings for `\"ts\"`, `\"fmp4\"` and `\"vtt\"`.",
          "$ref": "SegmentSettings"
        },
        "encryption": {
          "description": "Encryption settings.",
          "$ref": "Encryption"
        },
        "key": {
          "description": "A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `\".m3u8\"` extension suffix.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Multiplexing settings for output stream."
    },
    "Manifest": {
      "properties": {
        "fileName": {
          "description": "The name of the generated file. The default is `\"manifest\"` with the extension suffix corresponding to the `Manifest.type`.",
          "type": "string"
        },
        "muxStreams": {
          "description": "Required. List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "MANIFEST_TYPE_UNSPECIFIED",
            "HLS",
            "DASH"
          ],
          "description": "Required. Type of the manifest, can be \"HLS\" or \"DASH\".",
          "enumDescriptions": [
            "The manifest type is not specified.",
            "Create `\"HLS\"` manifest. The corresponding file extension is `\".m3u8\"`.",
            "Create `\"DASH\"` manifest. The corresponding file extension is `\".mpd\"`."
          ]
        }
      },
      "type": "object",
      "id": "Manifest",
      "description": "Manifest configuration."
    },
    "SampleAesEncryption": {
      "id": "SampleAesEncryption",
      "type": "object",
      "properties": {
        "keyUri": {
          "description": "Required. URI of the key delivery service. This URI is inserted into the M3U8 header.",
          "type": "string"
        }
      },
      "description": "Configuration for SAMPLE-AES encryption."
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "AnimationFade": {
      "type": "object",
      "description": "Display overlay object with fade animation.",
      "id": "AnimationFade",
      "properties": {
        "startTimeOffset": {
          "format": "google-duration",
          "description": "The time to start the fade animation, in seconds. Default: 0",
          "type": "string"
        },
        "xy": {
          "description": "Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.",
          "$ref": "NormalizedCoordinate"
        },
        "endTimeOffset": {
          "description": "The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s",
          "type": "string",
          "format": "google-duration"
        },
        "fadeType": {
          "description": "Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.",
          "enum": [
            "FADE_TYPE_UNSPECIFIED",
            "FADE_IN",
            "FADE_OUT"
          ],
          "type": "string",
          "enumDescriptions": [
            "The fade type is not specified.",
            "Fade the overlay object into view.",
            "Fade the overlay object out of view."
          ]
        }
      }
    },
    "Overlay": {
      "type": "object",
      "properties": {
        "image": {
          "description": "Image overlay.",
          "$ref": "Image"
        },
        "animations": {
          "description": "List of Animations. The list should be chronological, without any time overlap.",
          "type": "array",
          "items": {
            "$ref": "Animation"
          }
        }
      },
      "id": "Overlay",
      "description": "Overlay configuration."
    },
    "JobTemplate": {
      "properties": {
        "config": {
          "description": "The configuration for this template.",
          "$ref": "JobConfig"
        },
        "name": {
          "description": "The resource name of the job template. Format: `projects/{project}/locations/{location}/jobTemplates/{job_template}`",
          "type": "string"
        }
      },
      "type": "object",
      "id": "JobTemplate",
      "description": "Transcoding job template resource."
    },
    "AnimationStatic": {
      "properties": {
        "xy": {
          "$ref": "NormalizedCoordinate",
          "description": "Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video."
        },
        "startTimeOffset": {
          "format": "google-duration",
          "type": "string",
          "description": "The time to start displaying the overlay object, in seconds. Default: 0"
        }
      },
      "description": "Display static overlay object.",
      "id": "AnimationStatic",
      "type": "object"
    },
    "JobConfig": {
      "type": "object",
      "properties": {
        "muxStreams": {
          "description": "List of multiplexing settings for output streams.",
          "type": "array",
          "items": {
            "$ref": "MuxStream"
          }
        },
        "inputs": {
          "items": {
            "$ref": "Input"
          },
          "type": "array",
          "description": "List of input assets stored in Cloud Storage."
        },
        "overlays": {
          "description": "List of overlays on the output video, in descending Z-order.",
          "type": "array",
          "items": {
            "$ref": "Overlay"
          }
        },
        "elementaryStreams": {
          "items": {
            "$ref": "ElementaryStream"
          },
          "type": "array",
          "description": "List of elementary streams."
        },
        "adBreaks": {
          "type": "array",
          "items": {
            "$ref": "AdBreak"
          },
          "description": "List of ad breaks. Specifies where to insert ad break tags in the output manifests."
        },
        "output": {
          "description": "Output configuration.",
          "$ref": "Output"
        },
        "spriteSheets": {
          "description": "List of output sprite sheets.",
          "type": "array",
          "items": {
            "$ref": "SpriteSheet"
          }
        },
        "pubsubDestination": {
          "description": "Destination on Pub/Sub.",
          "$ref": "PubsubDestination"
        },
        "editList": {
          "description": "List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.",
          "type": "array",
          "items": {
            "$ref": "EditAtom"
          }
        },
        "manifests": {
          "items": {
            "$ref": "Manifest"
          },
          "description": "List of output manifests.",
          "type": "array"
        }
      },
      "description": "Job configuration",
      "id": "JobConfig"
    },
    "Aes128Encryption": {
      "description": "Configuration for AES-128 encryption.",
      "type": "object",
      "id": "Aes128Encryption",
      "properties": {
        "keyUri": {
          "description": "Required. URI of the key delivery service. This URI is inserted into the M3U8 header.",
          "type": "string"
        }
      }
    },
    "AudioStream": {
      "id": "AudioStream",
      "description": "Audio stream resource.",
      "type": "object",
      "properties": {
        "mapping": {
          "description": "The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.",
          "type": "array",
          "items": {
            "$ref": "AudioAtom"
          }
        },
        "codec": {
          "type": "string",
          "description": "The codec for this audio stream. The default is `\"aac\"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'"
        },
        "sampleRateHertz": {
          "description": "The audio sample rate in Hertz. The default is 48000 Hertz.",
          "format": "int32",
          "type": "integer"
        },
        "channelLayout": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[\"fl\", \"fr\"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency"
        },
        "bitrateBps": {
          "type": "integer",
          "format": "int32",
          "description": "Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000."
        },
        "channelCount": {
          "type": "integer",
          "description": "Number of audio channels. Must be between 1 and 6. The default is 2.",
          "format": "int32"
        }
      }
    },
    "Image": {
      "id": "Image",
      "type": "object",
      "properties": {
        "resolution": {
          "$ref": "NormalizedCoordinate",
          "description": "Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`."
        },
        "uri": {
          "type": "string",
          "description": "Required. URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type."
        },
        "alpha": {
          "type": "number",
          "format": "double",
          "description": "Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`."
        }
      },
      "description": "Overlaid jpeg image."
    },
    "TextStream": {
      "properties": {
        "mapping": {
          "description": "The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.",
          "items": {
            "$ref": "TextAtom"
          },
          "type": "array"
        },
        "codec": {
          "type": "string",
          "description": "The codec for this text stream. The default is `\"webvtt\"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'"
        },
        "languageCode": {
          "description": "Required. The BCP-47 language code, such as `\"en-US\"` or `\"sr-Latn\"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      },
      "id": "TextStream",
      "description": "Encoding of a text stream. For example, closed captions or subtitles.",
      "type": "object"
    },
    "ListJobsResponse": {
      "description": "Response message for `TranscoderService.ListJobs`.",
      "type": "object",
      "id": "ListJobsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token."
        },
        "jobs": {
          "items": {
            "$ref": "Job"
          },
          "description": "List of jobs in the specified region.",
          "type": "array"
        }
      }
    },
    "Pad": {
      "description": "Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.",
      "properties": {
        "rightPixels": {
          "format": "int32",
          "description": "The number of pixels to add to the right. The default is 0.",
          "type": "integer"
        },
        "bottomPixels": {
          "format": "int32",
          "type": "integer",
          "description": "The number of pixels to add to the bottom. The default is 0."
        },
        "leftPixels": {
          "format": "int32",
          "description": "The number of pixels to add to the left. The default is 0.",
          "type": "integer"
        },
        "topPixels": {
          "format": "int32",
          "description": "The number of pixels to add to the top. The default is 0.",
          "type": "integer"
        }
      },
      "type": "object",
      "id": "Pad"
    },
    "ListJobTemplatesResponse": {
      "type": "object",
      "id": "ListJobTemplatesResponse",
      "properties": {
        "jobTemplates": {
          "items": {
            "$ref": "JobTemplate"
          },
          "type": "array",
          "description": "List of job templates in the specified region."
        },
        "nextPageToken": {
          "description": "The pagination token.",
          "type": "string"
        }
      },
      "description": "Response message for `TranscoderService.ListJobTemplates`."
    },
    "Input": {
      "description": "Input asset.",
      "id": "Input",
      "type": "object",
      "properties": {
        "preprocessingConfig": {
          "description": "Preprocessing configurations.",
          "$ref": "PreprocessingConfig"
        },
        "uri": {
          "description": "URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`.",
          "type": "string"
        },
        "key": {
          "description": "A unique key for this input. Must be specified when using advanced mapping and edit lists.",
          "type": "string"
        }
      }
    },
    "Job": {
      "id": "Job",
      "type": "object",
      "description": "Transcoding job resource.",
      "properties": {
        "name": {
          "description": "The resource name of the job. Format: `projects/{project}/locations/{location}/jobs/{job}`",
          "type": "string"
        },
        "ttlAfterCompletionDays": {
          "description": "Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.",
          "type": "integer",
          "format": "int32"
        },
        "failureReason": {
          "description": "Output only. A description of the reason for the failure. This property is always present when `state` is `FAILED`.",
          "readOnly": true,
          "type": "string"
        },
        "config": {
          "description": "The configuration for this job.",
          "$ref": "JobConfig"
        },
        "state": {
          "description": "Output only. The current state of the job.",
          "readOnly": true,
          "enumDescriptions": [
            "The processing state is not specified.",
            "The job is enqueued and will be picked up for processing soon.",
            "The job is being processed.",
            "The job has been completed successfully.",
            "The job has failed. For additional information, see `failure_reason` and `failure_details`"
          ],
          "enum": [
            "PROCESSING_STATE_UNSPECIFIED",
            "PENDING",
            "RUNNING",
            "SUCCEEDED",
            "FAILED"
          ],
          "type": "string"
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time the transcoding started."
        },
        "priority": {
          "format": "int32",
          "type": "integer",
          "description": "Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0."
        },
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time the job was created.",
          "type": "string"
        },
        "outputUri": {
          "type": "string",
          "description": "Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`."
        },
        "endTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time the transcoding finished."
        },
        "failureDetails": {
          "readOnly": true,
          "items": {
            "$ref": "FailureDetail"
          },
          "type": "array",
          "description": "Output only. List of failure details. This property may contain additional information about the failure when `failure_reason` is present. *Note*: This feature is not yet available."
        },
        "inputUri": {
          "description": "Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).",
          "type": "string"
        },
        "templateId": {
          "type": "string",
          "description": "Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`"
        },
        "progress": {
          "description": "Output only. Estimated fractional progress, from `0` to `1` for each step. *Note*: This feature is not yet available.",
          "readOnly": true,
          "$ref": "Progress"
        },
        "originUri": {
          "readOnly": true,
          "description": "Output only. The origin URI. *Note*: This feature is not yet available.",
          "$ref": "OriginUri"
        }
      }
    },
    "TextInput": {
      "properties": {
        "track": {
          "format": "int32",
          "type": "integer",
          "description": "Required. The zero-based index of the track in the input file."
        },
        "key": {
          "type": "string",
          "description": "Required. The `Input.key` that identifies the input file."
        }
      },
      "type": "object",
      "description": "Identifies which input file and track should be used.",
      "id": "TextInput"
    },
    "Animation": {
      "id": "Animation",
      "type": "object",
      "properties": {
        "animationStatic": {
          "description": "Display static overlay object.",
          "$ref": "AnimationStatic"
        },
        "animationFade": {
          "$ref": "AnimationFade",
          "description": "Display overlay object with fade animation."
        },
        "animationEnd": {
          "$ref": "AnimationEnd",
          "description": "End previous animation."
        }
      },
      "description": "Animation types."
    },
    "VideoStream": {
      "properties": {
        "codec": {
          "description": "Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`",
          "type": "string"
        },
        "vbvSizeBits": {
          "format": "int32",
          "description": "Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.",
          "type": "integer"
        },
        "allowOpenGop": {
          "description": "Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.",
          "type": "boolean"
        },
        "crfLevel": {
          "type": "integer",
          "description": "Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.",
          "format": "int32"
        },
        "tune": {
          "description": "Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.",
          "type": "string"
        },
        "vbvFullnessBits": {
          "description": "Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.",
          "format": "int32",
          "type": "integer"
        },
        "aqStrength": {
          "format": "double",
          "type": "number",
          "description": "Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0."
        },
        "profile": {
          "type": "string",
          "description": "Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message."
        },
        "bPyramid": {
          "type": "boolean",
          "description": "Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`."
        },
        "frameRate": {
          "format": "double",
          "description": "Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.",
          "type": "number"
        },
        "widthPixels": {
          "type": "integer",
          "description": "The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.",
          "format": "int32"
        },
        "bitrateBps": {
          "type": "integer",
          "description": "Required. The video bitrate in bits per second. Must be between 1 and 1,000,000,000.",
          "format": "int32"
        },
        "gopFrameCount": {
          "format": "int32",
          "type": "integer",
          "description": "Select the GOP size based on the specified frame count. Must be greater than zero."
        },
        "entropyCoder": {
          "description": "The entropy coder to use. The default is `\"cabac\"`. Supported entropy coders: - 'cavlc' - 'cabac'",
          "type": "string"
        },
        "enableTwoPass": {
          "description": "Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `\"vbr\"`. The default is `false`.",
          "type": "boolean"
        },
        "bFrameCount": {
          "format": "int32",
          "description": "The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.",
          "type": "integer"
        },
        "heightPixels": {
          "description": "The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.",
          "format": "int32",
          "type": "integer"
        },
        "pixelFormat": {
          "description": "Pixel format to use. The default is `\"yuv420p\"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.",
          "type": "string"
        },
        "gopDuration": {
          "format": "google-duration",
          "description": "Select the GOP size based on the specified duration. The default is `\"3s\"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.",
          "type": "string"
        },
        "rateControlMode": {
          "type": "string",
          "description": "Specify the `rate_control_mode`. The default is `\"vbr\"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor"
        },
        "preset": {
          "type": "string",
          "description": "Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message."
        }
      },
      "id": "VideoStream",
      "type": "object",
      "description": "Video stream resource."
    },
    "Denoise": {
      "properties": {
        "tune": {
          "type": "string",
          "description": "Set the denoiser mode. The default is `\"standard\"`. Supported denoiser modes: - 'standard' - 'grain'"
        },
        "strength": {
          "format": "double",
          "type": "number",
          "description": "Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0."
        }
      },
      "id": "Denoise",
      "description": "Denoise preprocessing configuration.",
      "type": "object"
    }
  },
  "batchPath": "batch",
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "alt": {
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "jobTemplates": {
              "methods": {
                "delete": {
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates/{jobTemplatesId}",
                  "description": "Deletes a job template.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "DELETE",
                  "id": "transcoder.projects.locations.jobTemplates.delete",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobTemplates/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the job template to delete. `projects/{project}/locations/{location}/jobTemplates/{job_template}`",
                      "required": true
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta1/{+name}"
                },
                "list": {
                  "response": {
                    "$ref": "ListJobTemplatesResponse"
                  },
                  "description": "Lists job templates in the specified region.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "transcoder.projects.locations.jobTemplates.list",
                  "path": "v1beta1/{+parent}/jobTemplates",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "format": "int32",
                      "description": "The maximum number of items to return."
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The `next_page_token` value returned from a previous List request, if any.",
                      "location": "query"
                    },
                    "parent": {
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. The parent location from which to retrieve the collection of job templates. Format: `projects/{project}/locations/{location}`",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates"
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates/{jobTemplatesId}",
                  "id": "transcoder.projects.locations.jobTemplates.get",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "JobTemplate"
                  },
                  "path": "v1beta1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the job template to retrieve. Format: `projects/{project}/locations/{location}/jobTemplates/{job_template}`",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobTemplates/[^/]+$",
                      "type": "string"
                    }
                  },
                  "description": "Returns the job template data."
                },
                "create": {
                  "id": "transcoder.projects.locations.jobTemplates.create",
                  "request": {
                    "$ref": "JobTemplate"
                  },
                  "response": {
                    "$ref": "JobTemplate"
                  },
                  "description": "Creates a job template in the specified region.",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "description": "Required. The parent location to create this job template. Format: `projects/{project}/locations/{location}`",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "jobTemplateId": {
                      "description": "Required. The ID to use for the job template, which will become the final component of the job template's resource name. This value should be 4-63 characters, and valid characters must match the regular expression `a-zA-Z*`.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates",
                  "path": "v1beta1/{+parent}/jobTemplates",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST"
                }
              }
            },
            "jobs": {
              "methods": {
                "get": {
                  "path": "v1beta1/{+name}",
                  "id": "transcoder.projects.locations.jobs.get",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns the job data.",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+$",
                      "description": "Required. The name of the job to retrieve. Format: `projects/{project}/locations/{location}/jobs/{job}`",
                      "location": "path",
                      "type": "string",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Job"
                  },
                  "httpMethod": "GET"
                },
                "list": {
                  "httpMethod": "GET",
                  "parameters": {
                    "pageToken": {
                      "description": "The `next_page_token` value returned from a previous List request, if any.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Format: `projects/{project}/locations/{location}`",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "id": "transcoder.projects.locations.jobs.list",
                  "path": "v1beta1/{+parent}/jobs",
                  "description": "Lists jobs in the specified region.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListJobsResponse"
                  }
                },
                "create": {
                  "path": "v1beta1/{+parent}/jobs",
                  "response": {
                    "$ref": "Job"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a job in the specified region.",
                  "httpMethod": "POST",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Job"
                  },
                  "id": "transcoder.projects.locations.jobs.create",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Required. The parent location to create and process this job. Format: `projects/{project}/locations/{location}`"
                    }
                  }
                },
                "delete": {
                  "id": "transcoder.projects.locations.jobs.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta1/{+name}",
                  "httpMethod": "DELETE",
                  "description": "Deletes a job.",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "Required. The name of the job to delete. Format: `projects/{project}/locations/{location}/jobs/{job}`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+$"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}

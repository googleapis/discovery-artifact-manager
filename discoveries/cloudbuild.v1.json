{
  "canonicalName": "Cloud Build",
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "basePath": "",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "description": "V1 error format."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "default": "json",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "servicePath": "",
  "ownerName": "Google",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "id": "cloudbuild:v1",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "schemas": {
    "DeleteWorkerPoolOperationMetadata": {
      "description": "Metadata for the `DeleteWorkerPool` operation.",
      "id": "DeleteWorkerPoolOperationMetadata",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        }
      },
      "type": "object"
    },
    "RetryBuildRequest": {
      "id": "RetryBuildRequest",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Required. Build ID of the original build."
        }
      },
      "type": "object",
      "description": "Specifies a build to retry."
    },
    "SourceProvenance": {
      "type": "object",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "id": "SourceProvenance",
      "properties": {
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        },
        "fileHashes": {
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "type": "object",
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "readOnly": true
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "resolvedStorageSourceManifest": {
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
          "$ref": "StorageSourceManifest"
        }
      }
    },
    "ProcessAppManifestCallbackOperationMetadata": {
      "id": "ProcessAppManifestCallbackOperationMetadata",
      "type": "object",
      "description": "Metadata for `ProcessAppManifestCallback` operation.",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      }
    },
    "ReceiveTriggerWebhookResponse": {
      "properties": {},
      "description": "ReceiveTriggerWebhookResponse [Experimental] is the response object for the ReceiveTriggerWebhook method.",
      "type": "object",
      "id": "ReceiveTriggerWebhookResponse"
    },
    "Hash": {
      "id": "Hash",
      "properties": {
        "value": {
          "format": "byte",
          "description": "The hash value.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of hash that was performed.",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ]
        }
      },
      "type": "object",
      "description": "Container message for hash values."
    },
    "NotifierSpec": {
      "properties": {
        "notification": {
          "$ref": "Notification",
          "description": "The configuration of this particular notifier."
        },
        "secrets": {
          "description": "Configurations for secret resources used by this particular notifier.",
          "type": "array",
          "items": {
            "$ref": "NotifierSecret"
          }
        }
      },
      "description": "NotifierSpec is the configuration container for notifications.",
      "id": "NotifierSpec",
      "type": "object"
    },
    "Secrets": {
      "properties": {
        "secretManager": {
          "type": "array",
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "items": {
            "$ref": "SecretManagerSecret"
          }
        },
        "inline": {
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "type": "array",
          "items": {
            "$ref": "InlineSecret"
          }
        }
      },
      "id": "Secrets",
      "description": "Secrets and secret environment variables.",
      "type": "object"
    },
    "BuildApproval": {
      "type": "object",
      "id": "BuildApproval",
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "type": "string",
          "readOnly": true,
          "description": "Output only. The state of this build's approval."
        },
        "config": {
          "readOnly": true,
          "description": "Output only. Configuration for manual approval of this build.",
          "$ref": "ApprovalConfig"
        },
        "result": {
          "description": "Output only. Result of manual approval for this Build.",
          "readOnly": true,
          "$ref": "ApprovalResult"
        }
      },
      "description": "BuildApproval describes a build's approval configuration, state, and result."
    },
    "Empty": {
      "id": "Empty",
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "StorageSourceManifest": {
      "description": "Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "properties": {
        "generation": {
          "format": "int64",
          "type": "string",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used."
        },
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source manifest. This object must be a JSON file."
        }
      },
      "type": "object",
      "id": "StorageSourceManifest"
    },
    "TimeSpan": {
      "properties": {
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "End of time span."
        },
        "startTime": {
          "format": "google-datetime",
          "description": "Start of time span.",
          "type": "string"
        }
      },
      "id": "TimeSpan",
      "type": "object",
      "description": "Start and end times for a build execution phase."
    },
    "Build": {
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "properties": {
        "projectId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ID of the project."
        },
        "artifacts": {
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
          "$ref": "Artifacts"
        },
        "failureInfo": {
          "description": "Output only. Contains information about the build when status=FAILURE.",
          "readOnly": true,
          "$ref": "FailureInfo"
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
          "type": "string"
        },
        "buildTriggerId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically."
        },
        "results": {
          "$ref": "Results",
          "description": "Output only. Results of the build.",
          "readOnly": true
        },
        "finishTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "type": "string"
        },
        "status": {
          "description": "Output only. Status of the build.",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "items": {
            "type": "string"
          }
        },
        "warnings": {
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "type": "array",
          "items": {
            "$ref": "Warning"
          },
          "readOnly": true
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time at which the request to create the build was received.",
          "type": "string",
          "format": "google-datetime"
        },
        "source": {
          "$ref": "Source",
          "description": "The location of the source files to build."
        },
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ",
          "type": "string"
        },
        "queueTtl": {
          "type": "string",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "format": "google-duration"
        },
        "name": {
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
          "readOnly": true,
          "type": "string"
        },
        "availableSecrets": {
          "$ref": "Secrets",
          "description": "Secrets and secret environment variables."
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true,
          "type": "string"
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "statusDetail": {
          "type": "string",
          "description": "Output only. Customer-readable message about the current status.",
          "readOnly": true
        },
        "options": {
          "description": "Special options for this build.",
          "$ref": "BuildOptions"
        },
        "steps": {
          "items": {
            "$ref": "BuildStep"
          },
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array"
        },
        "approval": {
          "readOnly": true,
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "$ref": "BuildApproval"
        },
        "logUrl": {
          "readOnly": true,
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "type": "string"
        },
        "timing": {
          "additionalProperties": {
            "$ref": "TimeSpan"
          },
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "type": "object",
          "readOnly": true
        },
        "secrets": {
          "type": "array",
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
          "items": {
            "$ref": "Secret"
          }
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "type": "string",
          "format": "google-duration"
        },
        "substitutions": {
          "type": "object",
          "description": "Substitutions data for `Build` resource.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceProvenance": {
          "$ref": "SourceProvenance",
          "readOnly": true,
          "description": "Output only. A permanent fixed identifier for source."
        }
      },
      "id": "Build",
      "type": "object"
    },
    "GitHubEventsConfig": {
      "id": "GitHubEventsConfig",
      "type": "object",
      "properties": {
        "installationId": {
          "type": "string",
          "description": "The installationID that emits the GitHub event.",
          "format": "int64"
        },
        "name": {
          "description": "Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\".",
          "type": "string"
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "filter to match changes in pull requests."
        },
        "enterpriseConfigResourceName": {
          "description": "Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\"",
          "type": "string"
        },
        "owner": {
          "description": "Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\".",
          "type": "string"
        },
        "push": {
          "$ref": "PushFilter",
          "description": "filter to match changes in refs like branches, tags."
        }
      },
      "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received."
    },
    "ApprovalResult": {
      "properties": {
        "decision": {
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ],
          "description": "Required. The decision of this manual approval.",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "type": "string"
        },
        "approverAccount": {
          "type": "string",
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called (the user's actual email that is tied to their GAIA ID may have changed). This field is not stored, rather, it is calculated on the fly using approver_id.",
          "readOnly": true
        },
        "url": {
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.",
          "type": "string"
        },
        "approvalTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time when the approval decision was made.",
          "type": "string"
        },
        "comment": {
          "type": "string",
          "description": "Optional. An optional comment for this manual approval result."
        }
      },
      "id": "ApprovalResult",
      "type": "object",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build."
    },
    "NotifierMetadata": {
      "type": "object",
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier.",
      "properties": {
        "notifier": {
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"/:\". For example: \"gcr.io/my-project/notifiers/smtp:1.2.34\".",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\"."
        }
      },
      "id": "NotifierMetadata"
    },
    "UpdateGitHubEnterpriseConfigOperationMetadata": {
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "id": "UpdateGitHubEnterpriseConfigOperationMetadata",
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        },
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        }
      },
      "type": "object"
    },
    "ArtifactObjects": {
      "id": "ArtifactObjects",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "timing": {
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "$ref": "TimeSpan"
        },
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        },
        "paths": {
          "description": "Path globs used to match files in the build's workspace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "UpdateWorkerPoolOperationMetadata": {
      "id": "UpdateWorkerPoolOperationMetadata",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "Metadata for the `UpdateWorkerPool` operation.",
      "type": "object"
    },
    "PullRequestFilter": {
      "properties": {
        "invertRegex": {
          "type": "boolean",
          "description": "If true, branches that do NOT match the git_ref will trigger a build."
        },
        "commentControl": {
          "enum": [
            "COMMENTS_DISABLED",
            "COMMENTS_ENABLED",
            "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
          ],
          "enumDescriptions": [
            "Do not require comments on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on external contributors' Pull Requests before builds are triggered."
          ],
          "description": "Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.",
          "type": "string"
        },
        "branch": {
          "type": "string",
          "description": "Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        }
      },
      "id": "PullRequestFilter",
      "description": "PullRequestFilter contains filter properties for matching GitHub Pull Requests.",
      "type": "object"
    },
    "SMTPDelivery": {
      "id": "SMTPDelivery",
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification.",
      "properties": {
        "recipientAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email)."
        },
        "fromAddress": {
          "type": "string",
          "description": "This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender."
        },
        "senderAddress": {
          "type": "string",
          "description": "This is the SMTP account/email that is used to send the message."
        },
        "server": {
          "type": "string",
          "description": "The address of the SMTP server."
        },
        "port": {
          "type": "string",
          "description": "The SMTP port of the server."
        },
        "password": {
          "description": "The SMTP sender's password.",
          "$ref": "NotifierSecretRef"
        }
      },
      "type": "object"
    },
    "NotifierSecretRef": {
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.",
      "properties": {
        "secretRef": {
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.",
          "type": "string"
        }
      },
      "id": "NotifierSecretRef",
      "type": "object"
    },
    "StorageSource": {
      "properties": {
        "generation": {
          "type": "string",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64"
        },
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build."
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "type": "object",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "id": "StorageSource"
    },
    "ApprovalConfig": {
      "id": "ApprovalConfig",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "ApprovalConfig describes configuration for manual approval of a build."
    },
    "RunBuildTriggerRequest": {
      "id": "RunBuildTriggerRequest",
      "properties": {
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "source": {
          "$ref": "RepoSource",
          "description": "Source to build against this trigger."
        },
        "triggerId": {
          "description": "Required. ID of the trigger.",
          "type": "string"
        }
      },
      "description": "Specifies a build trigger to run and the source to use.",
      "type": "object"
    },
    "CreateGitHubEnterpriseConfigOperationMetadata": {
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation.",
      "type": "object",
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "CreateGitHubEnterpriseConfigOperationMetadata"
    },
    "FileHashes": {
      "type": "object",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "items": {
            "$ref": "Hash"
          },
          "type": "array"
        }
      }
    },
    "NotifierSecret": {
      "type": "object",
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.",
      "properties": {
        "name": {
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\".",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects/my-project/secrets/my-secret/versions/latest\"."
        }
      },
      "id": "NotifierSecret"
    },
    "Results": {
      "properties": {
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "images": {
          "items": {
            "$ref": "BuiltImage"
          },
          "type": "array",
          "description": "Container images that were built as a part of the build."
        },
        "artifactManifest": {
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded.",
          "type": "string"
        },
        "numArtifacts": {
          "type": "string",
          "format": "int64",
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded."
        },
        "artifactTiming": {
          "$ref": "TimeSpan",
          "description": "Time to push all non-container artifacts."
        },
        "buildStepOutputs": {
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "type": "array"
        }
      },
      "id": "Results",
      "type": "object",
      "description": "Artifacts created by the build pipeline."
    },
    "Volume": {
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        },
        "path": {
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Volume"
    },
    "NotifierConfig": {
      "type": "object",
      "id": "NotifierConfig",
      "description": "NotifierConfig is the top-level configuration message.",
      "properties": {
        "metadata": {
          "description": "Metadata for referring to/handling/deploying this notifier.",
          "$ref": "NotifierMetadata"
        },
        "kind": {
          "type": "string",
          "description": "The type of notifier to use (e.g. SMTPNotifier)."
        },
        "spec": {
          "description": "The actual configuration for this notifier.",
          "$ref": "NotifierSpec"
        },
        "apiVersion": {
          "type": "string",
          "description": "The API version of this configuration format."
        }
      }
    },
    "PrivatePoolV1Config": {
      "type": "object",
      "description": "Configuration for a V1 `PrivatePool`.",
      "id": "PrivatePoolV1Config",
      "properties": {
        "workerConfig": {
          "description": "Machine configuration for the workers in the pool.",
          "$ref": "WorkerConfig"
        },
        "networkConfig": {
          "$ref": "NetworkConfig",
          "description": "Network configuration for the pool."
        }
      }
    },
    "FailureInfo": {
      "description": "A fatal problem encountered during the execution of the build.",
      "id": "FailureInfo",
      "type": "object",
      "properties": {
        "detail": {
          "description": "Explains the failure issue in more detail using hard-coded text.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The name of the failure.",
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ]
        }
      }
    },
    "BuildStep": {
      "properties": {
        "script": {
          "type": "string",
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args."
        },
        "env": {
          "type": "array",
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "items": {
            "type": "string"
          }
        },
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`."
        },
        "args": {
          "items": {
            "type": "string"
          },
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array"
        },
        "waitFor": {
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "type": "array"
        },
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        },
        "status": {
          "readOnly": true,
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "type": "string",
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses."
        },
        "timeout": {
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string",
          "format": "google-duration"
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "$ref": "TimeSpan",
          "readOnly": true
        },
        "timing": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true
        },
        "entrypoint": {
          "type": "string",
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used."
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency."
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        }
      },
      "id": "BuildStep",
      "description": "A step in the build pipeline.",
      "type": "object"
    },
    "WorkerPool": {
      "id": "WorkerPool",
      "description": "Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).",
      "type": "object",
      "properties": {
        "privatePoolV1Config": {
          "$ref": "PrivatePoolV1Config",
          "description": "Private Pool using a v1 configuration."
        },
        "annotations": {
          "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uid": {
          "description": "Output only. A unique identifier for the `WorkerPool`.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
          "type": "string"
        },
        "deleteTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
          "type": "string"
        },
        "createTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
          "format": "google-datetime"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding."
        },
        "updateTime": {
          "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "description": "Output only. `WorkerPool` state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED"
          ],
          "enumDescriptions": [
            "State of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted."
          ],
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
          "readOnly": true
        }
      }
    },
    "ApproveBuildRequest": {
      "id": "ApproveBuildRequest",
      "properties": {
        "approvalResult": {
          "$ref": "ApprovalResult",
          "description": "Approval decision and metadata."
        }
      },
      "type": "object",
      "description": "Request to approve or reject a pending build."
    },
    "Source": {
      "id": "Source",
      "type": "object",
      "properties": {
        "storageSourceManifest": {
          "description": "If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
          "$ref": "StorageSourceManifest"
        },
        "storageSource": {
          "description": "If provided, get the source from this location in Google Cloud Storage.",
          "$ref": "StorageSource"
        },
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        }
      },
      "description": "Location of the source in a supported storage service."
    },
    "ListBuildsResponse": {
      "id": "ListBuildsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token to receive the next page of results. This will be absent if the end of the response list has been reached.",
          "type": "string"
        },
        "builds": {
          "type": "array",
          "description": "Builds will be sorted by `create_time`, descending.",
          "items": {
            "$ref": "Build"
          }
        }
      },
      "description": "Response including listed builds."
    },
    "ListWorkerPoolsResponse": {
      "id": "ListWorkerPoolsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results."
        },
        "workerPools": {
          "description": "`WorkerPools` for the specified project.",
          "items": {
            "$ref": "WorkerPool"
          },
          "type": "array"
        }
      },
      "description": "Response containing existing `WorkerPools`.",
      "type": "object"
    },
    "NetworkConfig": {
      "type": "object",
      "id": "NetworkConfig",
      "description": "Defines the network configuration for the pool.",
      "properties": {
        "peeredNetwork": {
          "type": "string",
          "description": "Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)"
        },
        "egressOption": {
          "description": "Option to configure network egress for the workers.",
          "type": "string",
          "enumDescriptions": [
            "If set, defaults to PUBLIC_EGRESS.",
            "If set, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured.",
            "If set, workers are created with a public address which allows for public internet egress."
          ],
          "enum": [
            "EGRESS_OPTION_UNSPECIFIED",
            "NO_PUBLIC_EGRESS",
            "PUBLIC_EGRESS"
          ]
        }
      }
    },
    "SecretManagerSecret": {
      "type": "object",
      "properties": {
        "versionName": {
          "type": "string",
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*"
        },
        "env": {
          "type": "string",
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step."
        }
      },
      "id": "SecretManagerSecret",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager."
    },
    "HTTPDelivery": {
      "id": "HTTPDelivery",
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "properties": {
        "uri": {
          "description": "The URI to which JSON-containing HTTP POST requests should be sent.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GitHubEnterpriseSecrets": {
      "properties": {
        "oauthSecretVersionName": {
          "type": "string",
          "description": "The resource name for the OAuth secret secret version in Secret Manager."
        },
        "privateKeyVersionName": {
          "description": "The resource name for the private key secret version.",
          "type": "string"
        },
        "webhookSecretVersionName": {
          "type": "string",
          "description": "The resource name for the webhook secret secret version in Secret Manager."
        },
        "webhookSecretName": {
          "type": "string",
          "description": "The resource name for the webhook secret in Secret Manager."
        },
        "oauthClientIdName": {
          "description": "The resource name for the OAuth client ID secret in Secret Manager.",
          "type": "string"
        },
        "oauthClientIdVersionName": {
          "description": "The resource name for the OAuth client ID secret version in Secret Manager.",
          "type": "string"
        },
        "privateKeyName": {
          "type": "string",
          "description": "The resource name for the private key secret."
        },
        "oauthSecretName": {
          "type": "string",
          "description": "The resource name for the OAuth secret in Secret Manager."
        }
      },
      "description": "GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.",
      "id": "GitHubEnterpriseSecrets",
      "type": "object"
    },
    "RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "id": "RepoSource",
      "properties": {
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision regex.",
          "type": "boolean"
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed."
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "Name of the Cloud Source Repository."
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        }
      }
    },
    "BuildOptions": {
      "properties": {
        "secretEnv": {
          "type": "array",
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "items": {
            "type": "string"
          }
        },
        "logging": {
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "type": "string",
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Cloud Logging and Cloud Storage logging are enabled.",
            "Only Cloud Storage logging is enabled.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Only Cloud Logging is enabled. Note that logs for both the Cloud Console UI and Cloud SDK are based on Cloud Storage logs, so neither will provide logs if this option is chosen.",
            "Turn off all logging. No build logs will be captured."
          ]
        },
        "pool": {
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
          "$ref": "PoolOption"
        },
        "sourceProvenanceHash": {
          "type": "array",
          "items": {
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ],
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ],
            "type": "string"
          },
          "description": "Requested hash for SourceProvenance."
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "logStreamingOption": {
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "type": "string",
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "machineType": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ],
          "description": "Compute Engine machine type on which to run the build.",
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ]
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workerPool": {
          "description": "This field deprecated; please use `pool.name` instead.",
          "type": "string"
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "substitutionOption": {
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "type": "string"
        },
        "diskSizeGb": {
          "format": "int64",
          "type": "string",
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error."
        },
        "requestedVerifyOption": {
          "type": "string",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "description": "Requested verifiability options.",
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ]
        }
      },
      "id": "BuildOptions",
      "description": "Optional arguments to enable specific features of builds.",
      "type": "object"
    },
    "ArtifactResult": {
      "type": "object",
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "FileHashes"
          },
          "description": "The file hash of the artifact."
        },
        "location": {
          "type": "string",
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`."
        }
      },
      "id": "ArtifactResult"
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        }
      }
    },
    "GitRepoSource": {
      "id": "GitRepoSource",
      "description": "GitRepoSource describes a repo and ref of a code repository.",
      "properties": {
        "ref": {
          "type": "string",
          "description": "The branch or tag to use. Must start with \"refs/\" (required)."
        },
        "repoType": {
          "description": "See RepoType below.",
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB"
          ],
          "enumDescriptions": [
            "The default, unknown repo type.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise)."
          ],
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "The URI of the repo (required)."
        }
      },
      "type": "object"
    },
    "SlackDelivery": {
      "id": "SlackDelivery",
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks.",
      "type": "object",
      "properties": {
        "webhookUri": {
          "$ref": "NotifierSecretRef",
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel."
        }
      }
    },
    "PushFilter": {
      "description": "Push contains filter properties for matching GitHub git pushes.",
      "properties": {
        "branch": {
          "description": "Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "invertRegex": {
          "description": "When true, only trigger a build if the revision regex does NOT match the git_ref regex.",
          "type": "boolean"
        },
        "tag": {
          "description": "Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        }
      },
      "type": "object",
      "id": "PushFilter"
    },
    "ListGithubEnterpriseConfigsResponse": {
      "description": "RPC response object returned by ListGithubEnterpriseConfigs RPC method.",
      "type": "object",
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "$ref": "GitHubEnterpriseConfig"
          },
          "description": "A list of GitHubEnterpriseConfigs"
        }
      },
      "id": "ListGithubEnterpriseConfigsResponse"
    },
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest",
      "properties": {},
      "type": "object"
    },
    "BuildTrigger": {
      "type": "object",
      "description": "Configuration for an automated build in response to source repository changes.",
      "id": "BuildTrigger",
      "properties": {
        "includedFiles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build."
        },
        "gitFileSource": {
          "$ref": "GitFileSource",
          "description": "The file source describing the local or remote Build template."
        },
        "github": {
          "$ref": "GitHubEventsConfig",
          "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`."
        },
        "build": {
          "$ref": "Build",
          "description": "Contents of the build template."
        },
        "tags": {
          "description": "Tags for annotation of a `BuildTrigger`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceName": {
          "type": "string",
          "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
        },
        "serviceAccount": {
          "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`",
          "type": "string"
        },
        "sourceToBuild": {
          "$ref": "GitRepoSource",
          "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
        },
        "approvalConfig": {
          "$ref": "ApprovalConfig",
          "description": "Configuration for manual approval to start a build invocation of this BuildTrigger."
        },
        "name": {
          "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of this trigger."
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`."
        },
        "triggerTemplate": {
          "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
          "$ref": "RepoSource"
        },
        "pubsubConfig": {
          "$ref": "PubsubConfig",
          "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
        },
        "webhookConfig": {
          "$ref": "WebhookConfig",
          "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
        },
        "ignoredFiles": {
          "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "createTime": {
          "description": "Output only. Time when the trigger was created.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "description": "If true, the trigger will never automatically execute a build."
        },
        "id": {
          "description": "Output only. Unique identifier of the trigger.",
          "readOnly": true,
          "type": "string"
        },
        "filter": {
          "type": "string",
          "description": "A Common Expression Language string."
        },
        "filename": {
          "type": "string",
          "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml)."
        },
        "autodetect": {
          "type": "boolean",
          "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers."
        }
      }
    },
    "Warning": {
      "description": "A non-fatal problem encountered during the execution of the build.",
      "id": "Warning",
      "type": "object",
      "properties": {
        "priority": {
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "description": "The priority for this warning.",
          "type": "string",
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ]
        },
        "text": {
          "type": "string",
          "description": "Explanation of the warning generated."
        }
      }
    },
    "Status": {
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object"
    },
    "OperationMetadata": {
      "properties": {
        "verb": {
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "cancelRequested": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "statusDetail": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string",
          "readOnly": true
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        },
        "endTime": {
          "format": "google-datetime",
          "description": "Output only. The time the operation finished running.",
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string",
          "readOnly": true
        }
      },
      "id": "OperationMetadata",
      "description": "Represents the metadata of the long-running operation.",
      "type": "object"
    },
    "Artifacts": {
      "id": "Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE."
        },
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        }
      },
      "type": "object"
    },
    "WebhookConfig": {
      "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.",
      "id": "WebhookConfig",
      "properties": {
        "secret": {
          "description": "Required. Resource name for the secret required as a URL parameter.",
          "type": "string"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SECRET_DELETED"
          ],
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.",
          "enumDescriptions": [
            "The webhook auth configuration not been checked.",
            "The auth configuration is properly setup.",
            "The secret provided in auth_method has been deleted."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeleteGitHubEnterpriseConfigOperationMetadata": {
      "id": "DeleteGitHubEnterpriseConfigOperationMetadata",
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        }
      },
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation."
    },
    "BuiltImage": {
      "description": "An image built by the pipeline.",
      "properties": {
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        },
        "name": {
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`.",
          "type": "string"
        },
        "pushTiming": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified image.",
          "readOnly": true
        }
      },
      "id": "BuiltImage",
      "type": "object"
    },
    "Secret": {
      "type": "object",
      "id": "Secret",
      "properties": {
        "secretEnv": {
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "kmsKeyName": {
          "type": "string",
          "description": "Cloud KMS key name to use to decrypt these envs."
        }
      },
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials."
    },
    "BuildOperationMetadata": {
      "description": "Metadata for build operations.",
      "type": "object",
      "id": "BuildOperationMetadata",
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "Build"
        }
      }
    },
    "HttpBody": {
      "id": "HttpBody",
      "properties": {
        "extensions": {
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array",
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        }
      },
      "type": "object",
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."
    },
    "CancelBuildRequest": {
      "id": "CancelBuildRequest",
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. ID of the build."
        },
        "name": {
          "type": "string",
          "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`"
        },
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project."
        }
      },
      "description": "Request to cancel an ongoing build.",
      "type": "object"
    },
    "Notification": {
      "type": "object",
      "properties": {
        "slackDelivery": {
          "description": "Configuration for Slack delivery.",
          "$ref": "SlackDelivery"
        },
        "structDelivery": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "description": "Escape hatch for users to supply custom delivery configs.",
          "type": "object"
        },
        "smtpDelivery": {
          "$ref": "SMTPDelivery",
          "description": "Configuration for SMTP (email) delivery."
        },
        "httpDelivery": {
          "description": "Configuration for HTTP delivery.",
          "$ref": "HTTPDelivery"
        },
        "filter": {
          "type": "string",
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more."
        }
      },
      "id": "Notification",
      "description": "Notification is the container which holds the data that is relevant to this particular notification."
    },
    "WorkerConfig": {
      "description": "Defines the configuration to be used for creating workers in the pool.",
      "type": "object",
      "properties": {
        "machineType": {
          "description": "Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.",
          "type": "string"
        },
        "diskSizeGb": {
          "format": "int64",
          "type": "string",
          "description": "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 1000. If `0` is specified, Cloud Build will use a standard disk size."
        }
      },
      "id": "WorkerConfig"
    },
    "PoolOption": {
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}",
          "type": "string"
        }
      },
      "id": "PoolOption"
    },
    "GitHubEnterpriseConfig": {
      "type": "object",
      "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
      "properties": {
        "appId": {
          "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
          "type": "string",
          "format": "int64"
        },
        "sslCa": {
          "type": "string",
          "description": "Optional. SSL certificate to use for requests to GitHub Enterprise."
        },
        "peeredNetwork": {
          "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
          "type": "string"
        },
        "secrets": {
          "description": "Names of secrets in Secret Manager.",
          "$ref": "GitHubEnterpriseSecrets"
        },
        "webhookKey": {
          "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\""
        },
        "createTime": {
          "description": "Output only. Time when the installation was associated with the project.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "displayName": {
          "type": "string",
          "description": "Name to display for this config."
        },
        "hostUrl": {
          "type": "string",
          "description": "The URL of the github enterprise host the configuration is for."
        }
      },
      "id": "GitHubEnterpriseConfig"
    },
    "PubsubConfig": {
      "id": "PubsubConfig",
      "type": "object",
      "properties": {
        "serviceAccountEmail": {
          "type": "string",
          "description": "Service account that will make the push request."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SUBSCRIPTION_DELETED",
            "TOPIC_DELETED",
            "SUBSCRIPTION_MISCONFIGURED"
          ],
          "enumDescriptions": [
            "The subscription configuration has not been checked.",
            "The Pub/Sub subscription is properly configured.",
            "The subscription has been deleted.",
            "The topic has been deleted.",
            "Some of the subscription's field are misconfigured."
          ],
          "type": "string",
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests."
        },
        "topic": {
          "type": "string",
          "description": "The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`."
        },
        "subscription": {
          "description": "Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.",
          "readOnly": true,
          "type": "string"
        }
      },
      "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
    },
    "InlineSecret": {
      "properties": {
        "envMap": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*",
          "type": "string"
        }
      },
      "id": "InlineSecret",
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object"
    },
    "ListBuildTriggersResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to receive the next page of results."
        },
        "triggers": {
          "type": "array",
          "description": "`BuildTriggers` for the project, sorted by `create_time` descending.",
          "items": {
            "$ref": "BuildTrigger"
          }
        }
      },
      "id": "ListBuildTriggersResponse",
      "description": "Response containing existing `BuildTriggers`.",
      "type": "object"
    },
    "GoogleDevtoolsCloudbuildV2OperationMetadata": {
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string"
        },
        "requestedCancellation": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "statusMessage": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time the operation finished running."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Server-defined resource path for the target of the operation."
        },
        "verb": {
          "type": "string",
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleDevtoolsCloudbuildV2OperationMetadata",
      "description": "Represents the metadata of the long-running operation."
    },
    "CreateWorkerPoolOperationMetadata": {
      "id": "CreateWorkerPoolOperationMetadata",
      "description": "Metadata for the `CreateWorkerPool` operation.",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        }
      },
      "type": "object"
    },
    "GitFileSource": {
      "id": "GitFileSource",
      "description": "GitFileSource describes a file within a (possibly remote) code repository.",
      "properties": {
        "revision": {
          "description": "The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the repo (optional). If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        },
        "path": {
          "description": "The path of the file, with the repo root as the root of the path.",
          "type": "string"
        },
        "repoType": {
          "description": "See RepoType above.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB"
          ],
          "enumDescriptions": [
            "The default, unknown repo type.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise)."
          ]
        }
      },
      "type": "object"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "version_module": true,
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "revision": "20210803",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        }
      }
    }
  },
  "version": "v1",
  "discoveryVersion": "v1",
  "kind": "discovery#restDescription",
  "name": "cloudbuild",
  "protocol": "rest",
  "title": "Cloud Build API",
  "resources": {
    "operations": {
      "methods": {
        "cancel": {
          "flatPath": "v1/operations/{operationsId}:cancel",
          "parameters": {
            "name": {
              "pattern": "^operations/.*$",
              "type": "string",
              "required": true,
              "description": "The name of the operation resource to be cancelled.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v1/{+name}:cancel",
          "httpMethod": "POST",
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "id": "cloudbuild.operations.cancel",
          "response": {
            "$ref": "Empty"
          },
          "parameterOrder": [
            "name"
          ],
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "get": {
          "parameters": {
            "name": {
              "location": "path",
              "pattern": "^operations/.*$",
              "description": "The name of the operation resource.",
              "type": "string",
              "required": true
            }
          },
          "id": "cloudbuild.operations.get",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "flatPath": "v1/operations/{operationsId}",
          "response": {
            "$ref": "Operation"
          },
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET"
        }
      }
    },
    "v1": {
      "methods": {
        "webhook": {
          "parameterOrder": [],
          "description": "ReceiveWebhook is called when the API receives a GitHub webhook.",
          "response": {
            "$ref": "Empty"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "HttpBody"
          },
          "id": "cloudbuild.webhook",
          "parameters": {
            "webhookKey": {
              "type": "string",
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
              "location": "query"
            }
          },
          "path": "v1/webhook",
          "flatPath": "v1/webhook"
        }
      }
    },
    "projects": {
      "resources": {
        "builds": {
          "methods": {
            "approve": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "ApproveBuildRequest"
              },
              "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                  "required": true,
                  "pattern": "^projects/[^/]+/builds/[^/]+$",
                  "location": "path"
                }
              },
              "id": "cloudbuild.projects.builds.approve",
              "httpMethod": "POST",
              "flatPath": "v1/projects/{projectsId}/builds/{buildsId}:approve",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:approve"
            },
            "retry": {
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. Build ID of the original build."
                }
              },
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "request": {
                "$ref": "RetryBuildRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudbuild.projects.builds.retry",
              "path": "v1/projects/{projectId}/builds/{id}:retry",
              "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "flatPath": "v1/projects/{projectId}/builds/{id}:retry"
            },
            "cancel": {
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "request": {
                "$ref": "CancelBuildRequest"
              },
              "httpMethod": "POST",
              "flatPath": "v1/projects/{projectId}/builds/{id}:cancel",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Build"
              },
              "description": "Cancels a build in progress.",
              "id": "cloudbuild.projects.builds.cancel",
              "path": "v1/projects/{projectId}/builds/{id}:cancel",
              "parameters": {
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project.",
                  "required": true
                },
                "id": {
                  "description": "Required. ID of the build.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              }
            },
            "get": {
              "response": {
                "$ref": "Build"
              },
              "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
              "id": "cloudbuild.projects.builds.get",
              "parameters": {
                "name": {
                  "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                  "location": "query",
                  "type": "string"
                },
                "id": {
                  "description": "Required. ID of the build.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "projectId": {
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the project.",
                  "location": "path"
                }
              },
              "path": "v1/projects/{projectId}/builds/{id}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectId}/builds/{id}",
              "parameterOrder": [
                "projectId",
                "id"
              ]
            },
            "list": {
              "flatPath": "v1/projects/{projectId}/builds",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more."
                },
                "parent": {
                  "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`",
                  "type": "string",
                  "location": "query"
                },
                "projectId": {
                  "location": "path",
                  "description": "Required. ID of the project.",
                  "type": "string",
                  "required": true
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "The raw filter text to constrain the results."
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "description": "Number of results to return in the list.",
                  "type": "integer"
                }
              },
              "response": {
                "$ref": "ListBuildsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "id": "cloudbuild.projects.builds.list",
              "parameterOrder": [
                "projectId"
              ],
              "path": "v1/projects/{projectId}/builds",
              "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully."
            },
            "create": {
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/projects/{projectId}/builds",
              "parameters": {
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
                },
                "projectId": {
                  "type": "string",
                  "location": "path",
                  "description": "Required. ID of the project.",
                  "required": true
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "id": "cloudbuild.projects.builds.create",
              "path": "v1/projects/{projectId}/builds",
              "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "Build"
              }
            }
          }
        },
        "locations": {
          "resources": {
            "triggers": {
              "methods": {
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "description": "Returns information about a `BuildTrigger`. This API is experimental.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.get",
                  "httpMethod": "GET",
                  "parameters": {
                    "triggerId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get."
                    },
                    "projectId": {
                      "description": "Required. ID of the project that owns the trigger.",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "type": "string",
                      "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "required": true
                    }
                  },
                  "path": "v1/{+name}"
                },
                "create": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`",
                      "location": "path",
                      "required": true
                    },
                    "projectId": {
                      "description": "Required. ID of the project for which to configure automatic builds.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "httpMethod": "POST",
                  "path": "v1/{+parent}/triggers",
                  "id": "cloudbuild.projects.locations.triggers.create",
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new `BuildTrigger`. This API is experimental."
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.triggers.patch",
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "parameterOrder": [
                    "resourceName"
                  ],
                  "httpMethod": "PATCH",
                  "path": "v1/{+resourceName}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
                  "parameters": {
                    "resourceName": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "required": true,
                      "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
                    },
                    "triggerId": {
                      "description": "Required. ID of the `BuildTrigger` to update.",
                      "type": "string",
                      "location": "query"
                    },
                    "projectId": {
                      "description": "Required. ID of the project that owns the trigger.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "BuildTrigger"
                  }
                },
                "delete": {
                  "path": "v1/{+name}",
                  "httpMethod": "DELETE",
                  "id": "cloudbuild.projects.locations.triggers.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "triggerId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. ID of the `BuildTrigger` to delete."
                    },
                    "projectId": {
                      "description": "Required. ID of the project that owns the trigger.",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "webhook": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:webhook",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "HttpBody"
                  },
                  "path": "v1/{+name}:webhook",
                  "id": "cloudbuild.projects.locations.triggers.webhook",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$"
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Project in which the specified trigger lives"
                    },
                    "trigger": {
                      "description": "Name of the trigger to run the payload against",
                      "location": "query",
                      "type": "string"
                    },
                    "secret": {
                      "description": "Secret token used for authorization if an OAuth token isn't provided.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "ReceiveTriggerWebhookResponse"
                  }
                },
                "run": {
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "RunBuildTriggerRequest"
                  },
                  "id": "cloudbuild.projects.locations.triggers.run",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:run",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Runs a `BuildTrigger` at a particular source revision.",
                  "path": "v1/{+name}:run"
                },
                "list": {
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/triggers",
                  "id": "cloudbuild.projects.locations.triggers.list",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
                  "response": {
                    "$ref": "ListBuildTriggersResponse"
                  },
                  "description": "Lists existing `BuildTrigger`s. This API is experimental.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "type": "string"
                    },
                    "projectId": {
                      "description": "Required. ID of the project for which to list BuildTriggers.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "required": true,
                      "type": "string",
                      "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "description": "Number of results to return in the list.",
                      "format": "int32"
                    }
                  }
                }
              }
            },
            "builds": {
              "methods": {
                "approve": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:approve",
                  "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                      "location": "path"
                    }
                  },
                  "id": "cloudbuild.projects.locations.builds.approve",
                  "request": {
                    "$ref": "ApproveBuildRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}:approve",
                  "httpMethod": "POST"
                },
                "get": {
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$"
                    },
                    "id": {
                      "description": "Required. ID of the build.",
                      "location": "query",
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Required. ID of the project.",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "Build"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}",
                  "id": "cloudbuild.projects.locations.builds.get",
                  "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information."
                },
                "retry": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "cloudbuild.projects.locations.builds.retry",
                  "httpMethod": "POST",
                  "path": "v1/{+name}:retry",
                  "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry",
                  "request": {
                    "$ref": "RetryBuildRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "cancel": {
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel",
                  "path": "v1/{+name}:cancel",
                  "description": "Cancels a build in progress.",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "required": true
                    }
                  },
                  "request": {
                    "$ref": "CancelBuildRequest"
                  },
                  "response": {
                    "$ref": "Build"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.builds.cancel",
                  "httpMethod": "POST"
                },
                "create": {
                  "id": "cloudbuild.projects.locations.builds.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
                    }
                  },
                  "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "Build"
                  },
                  "path": "v1/{+parent}/builds"
                },
                "list": {
                  "response": {
                    "$ref": "ListBuildsResponse"
                  },
                  "path": "v1/{+parent}/builds",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`",
                      "required": true
                    },
                    "pageToken": {
                      "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
                      "location": "query",
                      "type": "string"
                    },
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "location": "query",
                      "description": "The raw filter text to constrain the results.",
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "type": "integer",
                      "description": "Number of results to return in the list."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "cloudbuild.projects.locations.builds.list",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "httpMethod": "GET"
                }
              }
            },
            "operations": {
              "methods": {
                "cancel": {
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "httpMethod": "POST",
                  "path": "v1/{+name}:cancel",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource.",
                      "location": "path"
                    }
                  },
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.operations.get"
                }
              }
            },
            "workerPools": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.get",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "description": "Returns details of a `WorkerPool`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "WorkerPool"
                  }
                },
                "list": {
                  "path": "v1/{+parent}/workerPools",
                  "description": "Lists `WorkerPool`s.",
                  "id": "cloudbuild.projects.locations.workerPools.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "parameters": {
                    "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of `WorkerPool`s to return. The service may return fewer than this value. If omitted, the server will use a sensible default.",
                      "location": "query"
                    },
                    "parent": {
                      "description": "Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/{location}`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    },
                    "pageToken": {
                      "description": "A page token, received from a previous `ListWorkerPools` call. Provide this to retrieve the subsequent page.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "ListWorkerPoolsResponse"
                  },
                  "httpMethod": "GET"
                },
                "delete": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{workerPool}/workerPools/{workerPool}`.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$"
                    },
                    "validateOnly": {
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "type": "boolean",
                      "location": "query"
                    },
                    "allowMissing": {
                      "type": "boolean",
                      "location": "query",
                      "description": "If set to true, and the `WorkerPool` is not found, the request will succeed but no action will be taken on the server."
                    },
                    "etag": {
                      "location": "query",
                      "description": "Optional. If this is provided, it must match the server's etag on the workerpool for the request to be processed.",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a `WorkerPool`.",
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.delete",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "create": {
                  "path": "v1/{+parent}/workerPools",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.create",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "description": "Creates a `WorkerPool`.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "validateOnly": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If set, validate the request and preview the response, but do not actually post it."
                    },
                    "workerPoolId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/."
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "description": "Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`.",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools"
                },
                "patch": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "required": true,
                      "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
                      "location": "path"
                    },
                    "updateMask": {
                      "description": "A mask specifying which fields in `worker_pool` to update.",
                      "format": "google-fieldmask",
                      "type": "string",
                      "location": "query"
                    },
                    "validateOnly": {
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "type": "boolean",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "PATCH",
                  "path": "v1/{+name}",
                  "description": "Updates a `WorkerPool`.",
                  "id": "cloudbuild.projects.locations.workerPools.patch",
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            },
            "githubEnterpriseConfigs": {
              "methods": {
                "create": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.create",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                      "required": true
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "ID of the project."
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "description": "Create an association between a GCP project and a GitHub Enterprise server. This API is experimental.",
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "httpMethod": "POST"
                },
                "list": {
                  "description": "List all GitHubEnterpriseConfigs for a given project. This API is experimental.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "httpMethod": "GET",
                  "parameters": {
                    "projectId": {
                      "description": "ID of the project",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "location": "path",
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "ListGithubEnterpriseConfigsResponse"
                  },
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.list"
                },
                "patch": {
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "parameters": {
                    "updateMask": {
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "type": "string",
                      "format": "google-fieldmask",
                      "location": "query"
                    },
                    "name": {
                      "location": "path",
                      "type": "string",
                      "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\"",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "httpMethod": "PATCH",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Update an association between a GCP project and a GitHub Enterprise server. This API is experimental.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.patch"
                },
                "delete": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\"",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "location": "path",
                      "required": true
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "ID of the project"
                    },
                    "configId": {
                      "type": "string",
                      "location": "query",
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "description": "Delete an association between a GCP project and a GitHub Enterprise server. This API is experimental.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.delete"
                },
                "get": {
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "description": "Retrieve a GitHubEnterpriseConfig. This API is experimental.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "configId": {
                      "type": "string",
                      "location": "query",
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                    },
                    "projectId": {
                      "location": "query",
                      "type": "string",
                      "description": "ID of the project"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\"",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.get"
                }
              }
            }
          }
        },
        "githubEnterpriseConfigs": {
          "methods": {
            "delete": {
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "parameterOrder": [
                "name"
              ],
              "description": "Delete an association between a GCP project and a GitHub Enterprise server. This API is experimental.",
              "httpMethod": "DELETE",
              "parameters": {
                "configId": {
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\"",
                  "required": true
                },
                "projectId": {
                  "type": "string",
                  "description": "ID of the project",
                  "location": "query"
                }
              },
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.githubEnterpriseConfigs.delete",
              "response": {
                "$ref": "Operation"
              }
            },
            "patch": {
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "parameterOrder": [
                "name"
              ],
              "id": "cloudbuild.projects.githubEnterpriseConfigs.patch",
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Update an association between a GCP project and a GitHub Enterprise server. This API is experimental.",
              "parameters": {
                "updateMask": {
                  "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\"",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "required": true
                }
              },
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "path": "v1/{+name}",
              "response": {
                "$ref": "Operation"
              }
            },
            "create": {
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "description": "Create an association between a GCP project and a GitHub Enterprise server. This API is experimental.",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.create",
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "httpMethod": "POST",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "parameters": {
                "projectId": {
                  "location": "query",
                  "type": "string",
                  "description": "ID of the project."
                },
                "parent": {
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "get": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.get",
              "path": "v1/{+name}",
              "description": "Retrieve a GitHubEnterpriseConfig. This API is experimental.",
              "response": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "parameters": {
                "configId": {
                  "location": "query",
                  "type": "string",
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                },
                "name": {
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfig/{$config_id}\"",
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "required": true
                },
                "projectId": {
                  "type": "string",
                  "description": "ID of the project",
                  "location": "query"
                }
              }
            },
            "list": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.list",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "httpMethod": "GET",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "response": {
                "$ref": "ListGithubEnterpriseConfigsResponse"
              },
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}"
                },
                "projectId": {
                  "type": "string",
                  "location": "query",
                  "description": "ID of the project"
                }
              },
              "description": "List all GitHubEnterpriseConfigs for a given project. This API is experimental."
            }
          }
        },
        "triggers": {
          "methods": {
            "patch": {
              "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "response": {
                "$ref": "BuildTrigger"
              },
              "request": {
                "$ref": "BuildTrigger"
              },
              "id": "cloudbuild.projects.triggers.patch",
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "triggerId": {
                  "description": "Required. ID of the `BuildTrigger` to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              }
            },
            "create": {
              "flatPath": "v1/projects/{projectId}/triggers",
              "response": {
                "$ref": "BuildTrigger"
              },
              "parameters": {
                "projectId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Required. ID of the project for which to configure automatic builds."
                },
                "parent": {
                  "location": "query",
                  "type": "string",
                  "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`"
                }
              },
              "id": "cloudbuild.projects.triggers.create",
              "description": "Creates a new `BuildTrigger`. This API is experimental.",
              "parameterOrder": [
                "projectId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "BuildTrigger"
              },
              "path": "v1/projects/{projectId}/triggers",
              "httpMethod": "POST"
            },
            "run": {
              "request": {
                "$ref": "RepoSource"
              },
              "id": "cloudbuild.projects.triggers.run",
              "parameters": {
                "name": {
                  "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "location": "query",
                  "type": "string"
                },
                "triggerId": {
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the trigger.",
                  "type": "string"
                },
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project.",
                  "required": true
                }
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "description": "Runs a `BuildTrigger` at a particular source revision.",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}:run"
            },
            "list": {
              "flatPath": "v1/projects/{projectId}/triggers",
              "parameterOrder": [
                "projectId"
              ],
              "httpMethod": "GET",
              "description": "Lists existing `BuildTrigger`s. This API is experimental.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "parent": {
                  "location": "query",
                  "type": "string",
                  "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`"
                },
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the project for which to list BuildTriggers."
                },
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "type": "integer",
                  "description": "Number of results to return in the list."
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string"
                }
              },
              "id": "cloudbuild.projects.triggers.list",
              "path": "v1/projects/{projectId}/triggers",
              "response": {
                "$ref": "ListBuildTriggersResponse"
              }
            },
            "webhook": {
              "path": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "parameterOrder": [
                "projectId",
                "trigger"
              ],
              "id": "cloudbuild.projects.triggers.webhook",
              "flatPath": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "parameters": {
                "secret": {
                  "type": "string",
                  "description": "Secret token used for authorization if an OAuth token isn't provided.",
                  "location": "query"
                },
                "trigger": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Name of the trigger to run the payload against"
                },
                "name": {
                  "location": "query",
                  "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "type": "string"
                },
                "projectId": {
                  "description": "Project in which the specified trigger lives",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
              "request": {
                "$ref": "HttpBody"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "ReceiveTriggerWebhookResponse"
              }
            },
            "get": {
              "id": "cloudbuild.projects.triggers.get",
              "parameters": {
                "triggerId": {
                  "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "name": {
                  "type": "string",
                  "location": "query",
                  "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns information about a `BuildTrigger`. This API is experimental.",
              "response": {
                "$ref": "BuildTrigger"
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}"
            },
            "delete": {
              "parameters": {
                "triggerId": {
                  "description": "Required. ID of the `BuildTrigger` to delete.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "location": "query",
                  "type": "string"
                },
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project that owns the trigger.",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "httpMethod": "DELETE",
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "id": "cloudbuild.projects.triggers.delete"
            }
          }
        }
      }
    }
  },
  "description": "Creates and manages builds on Google Cloud Platform.",
  "ownerDomain": "google.com",
  "batchPath": "batch"
}

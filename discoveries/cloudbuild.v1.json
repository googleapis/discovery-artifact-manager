{
  "revision": "20240427",
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "id": "cloudbuild:v1",
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "version_module": true,
  "discoveryVersion": "v1",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "protocol": "rest",
  "canonicalName": "Cloud Build",
  "batchPath": "batch",
  "schemas": {
    "BatchCreateBitbucketServerConnectedRepositoriesResponse": {
      "properties": {
        "bitbucketServerConnectedRepositories": {
          "type": "array",
          "description": "The connected Bitbucket Server repositories.",
          "items": {
            "$ref": "BitbucketServerConnectedRepository"
          }
        }
      },
      "description": "Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories.",
      "type": "object",
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponse"
    },
    "Hash": {
      "properties": {
        "type": {
          "enum": [
            "NONE",
            "SHA256",
            "MD5",
            "SHA512"
          ],
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash.",
            "Use a sha512 hash."
          ],
          "description": "The type of hash that was performed.",
          "type": "string"
        },
        "value": {
          "format": "byte",
          "description": "The hash value.",
          "type": "string"
        }
      },
      "description": "Container message for hash values.",
      "type": "object",
      "id": "Hash"
    },
    "GitLabRepositoryId": {
      "description": "GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise",
      "id": "GitLabRepositoryId",
      "type": "object",
      "properties": {
        "webhookId": {
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "Required. Identifier for the repository. example: \"namespace/project-slug\", namespace is usually the username or group ID"
        }
      }
    },
    "ServiceDirectoryConfig": {
      "id": "ServiceDirectoryConfig",
      "properties": {
        "service": {
          "description": "The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.",
          "type": "string"
        }
      },
      "description": "ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.",
      "type": "object"
    },
    "GitLabEnterpriseConfig": {
      "description": "GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.",
      "type": "object",
      "properties": {
        "sslCa": {
          "type": "string",
          "description": "The SSL certificate to use in requests to GitLab Enterprise instances."
        },
        "serviceDirectoryConfig": {
          "$ref": "ServiceDirectoryConfig",
          "description": "The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance."
        },
        "hostUri": {
          "type": "string",
          "description": "Immutable. The URI of the GitlabEnterprise host."
        }
      },
      "id": "GitLabEnterpriseConfig"
    },
    "WorkerConfig": {
      "description": "Defines the configuration to be used for creating workers in the pool.",
      "properties": {
        "diskSizeGb": {
          "format": "int64",
          "type": "string",
          "description": "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size."
        },
        "machineType": {
          "type": "string",
          "description": "Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default."
        }
      },
      "id": "WorkerConfig",
      "type": "object"
    },
    "GitHubEnterpriseSecrets": {
      "description": "GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.",
      "type": "object",
      "id": "GitHubEnterpriseSecrets",
      "properties": {
        "oauthClientIdName": {
          "type": "string",
          "description": "The resource name for the OAuth client ID secret in Secret Manager.",
          "deprecated": true
        },
        "webhookSecretVersionName": {
          "type": "string",
          "description": "The resource name for the webhook secret secret version in Secret Manager."
        },
        "webhookSecretName": {
          "description": "The resource name for the webhook secret in Secret Manager.",
          "deprecated": true,
          "type": "string"
        },
        "privateKeyVersionName": {
          "description": "The resource name for the private key secret version.",
          "type": "string"
        },
        "oauthSecretName": {
          "deprecated": true,
          "type": "string",
          "description": "The resource name for the OAuth secret in Secret Manager."
        },
        "oauthClientIdVersionName": {
          "type": "string",
          "description": "The resource name for the OAuth client ID secret version in Secret Manager."
        },
        "privateKeyName": {
          "deprecated": true,
          "type": "string",
          "description": "The resource name for the private key secret."
        },
        "oauthSecretVersionName": {
          "description": "The resource name for the OAuth secret secret version in Secret Manager.",
          "type": "string"
        }
      }
    },
    "Artifacts": {
      "id": "Artifacts",
      "properties": {
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "npmPackages": {
          "description": "A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "$ref": "NpmPackage"
          }
        },
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        },
        "pythonPackages": {
          "items": {
            "$ref": "PythonPackage"
          },
          "description": "A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.",
          "type": "array"
        },
        "mavenArtifacts": {
          "description": "A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.",
          "items": {
            "$ref": "MavenArtifact"
          },
          "type": "array"
        }
      },
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "type": "object"
    },
    "BuildOptions": {
      "description": "Optional arguments to enable specific features of builds.",
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "PoolOption",
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
        },
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.",
          "type": "string",
          "format": "int64"
        },
        "workerPool": {
          "type": "string",
          "description": "This field deprecated; please use `pool.name` instead.",
          "deprecated": true
        },
        "dynamicSubstitutions": {
          "type": "boolean",
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file."
        },
        "automapSubstitutions": {
          "description": "Option to include built-in and custom substitutions as env variables for all build steps.",
          "type": "boolean"
        },
        "defaultLogsBucketBehavior": {
          "enum": [
            "DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED",
            "REGIONAL_USER_OWNED_BUCKET"
          ],
          "type": "string",
          "description": "Optional. Option to specify how default logs buckets are setup.",
          "enumDescriptions": [
            "Unspecified.",
            "Bucket is located in user-owned project in the same region as the build. The builder service account must have access to create and write to Cloud Storage buckets in the build project."
          ]
        },
        "substitutionOption": {
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "type": "string",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ]
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "logging": {
          "enumDeprecated": [
            false,
            false,
            false,
            true,
            false,
            false
          ],
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).",
            "Turn off all logging. No build logs will be captured."
          ],
          "type": "string",
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ]
        },
        "logStreamingOption": {
          "description": "Option to define build log streaming behavior to Cloud Storage.",
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ],
          "type": "string",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Cloud Storage.",
            "Build logs should not be streamed to Cloud Storage; they will be written when the build is completed."
          ]
        },
        "sourceProvenanceHash": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "NONE",
              "SHA256",
              "MD5",
              "SHA512"
            ],
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash.",
              "Use a sha512 hash."
            ]
          },
          "description": "Requested hash for SourceProvenance."
        },
        "secretEnv": {
          "type": "array",
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "items": {
            "type": "string"
          }
        },
        "requestedVerifyOption": {
          "enumDescriptions": [
            "Not a verifiable build (the default).",
            "Build must be verified."
          ],
          "type": "string",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "description": "Requested verifiability options."
        },
        "volumes": {
          "type": "array",
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "items": {
            "$ref": "Volume"
          }
        },
        "machineType": {
          "type": "string",
          "description": "Compute Engine machine type on which to run the build.",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32",
            "E2_MEDIUM"
          ],
          "enumDeprecated": [
            false,
            true,
            true,
            false,
            false,
            false
          ],
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs.",
            "E2 machine with 1 CPU."
          ]
        }
      },
      "id": "BuildOptions"
    },
    "RepoSource": {
      "id": "RepoSource",
      "description": "Location of the source in a Google Cloud Source Repository.",
      "properties": {
        "branchName": {
          "type": "string",
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "repoName": {
          "description": "Name of the Cloud Source Repository.",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "tagName": {
          "type": "string",
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger"
        }
      },
      "type": "object"
    },
    "FileHashes": {
      "type": "object",
      "properties": {
        "fileHash": {
          "type": "array",
          "description": "Collection of file hashes.",
          "items": {
            "$ref": "Hash"
          }
        }
      },
      "id": "FileHashes",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build."
    },
    "WebhookConfig": {
      "properties": {
        "state": {
          "type": "string",
          "enumDescriptions": [
            "The webhook auth configuration not been checked.",
            "The auth configuration is properly setup.",
            "The secret provided in auth_method has been deleted."
          ],
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.",
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SECRET_DELETED"
          ]
        },
        "secret": {
          "type": "string",
          "description": "Required. Resource name for the secret required as a URL parameter."
        }
      },
      "id": "WebhookConfig",
      "type": "object",
      "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
    },
    "ListWorkerPoolsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results."
        },
        "workerPools": {
          "items": {
            "$ref": "WorkerPool"
          },
          "type": "array",
          "description": "`WorkerPools` for the specified project."
        }
      },
      "description": "Response containing existing `WorkerPools`.",
      "id": "ListWorkerPoolsResponse",
      "type": "object"
    },
    "ListGitLabConfigsResponse": {
      "type": "object",
      "description": "RPC response object returned by ListGitLabConfigs RPC method.",
      "properties": {
        "gitlabConfigs": {
          "description": "A list of GitLabConfigs",
          "type": "array",
          "items": {
            "$ref": "GitLabConfig"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page If this field is omitted, there are no subsequent pages."
        }
      },
      "id": "ListGitLabConfigsResponse"
    },
    "ListBitbucketServerConfigsResponse": {
      "type": "object",
      "id": "ListBitbucketServerConfigsResponse",
      "description": "RPC response object returned by ListBitbucketServerConfigs RPC method.",
      "properties": {
        "bitbucketServerConfigs": {
          "description": "A list of BitbucketServerConfigs",
          "items": {
            "$ref": "BitbucketServerConfig"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      }
    },
    "UploadedPythonPackage": {
      "type": "object",
      "properties": {
        "fileHashes": {
          "$ref": "FileHashes",
          "description": "Hash types and values of the Python Artifact."
        },
        "pushTiming": {
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "$ref": "TimeSpan"
        },
        "uri": {
          "type": "string",
          "description": "URI of the uploaded artifact."
        }
      },
      "id": "UploadedPythonPackage",
      "description": "Artifact uploaded using the PythonPackage directive."
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "statusDetail": {
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true
        },
        "verb": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation."
        },
        "endTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time the operation finished running."
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string",
          "readOnly": true
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean",
          "readOnly": true
        },
        "apiVersion": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. API version used to start the operation."
        }
      },
      "description": "Represents the metadata of the long-running operation."
    },
    "DefaultServiceAccount": {
      "type": "object",
      "description": "The default service account used for `Builds`.",
      "properties": {
        "serviceAccountEmail": {
          "type": "string",
          "description": "Output only. The email address of the service account identity that will be used for a build by default. This is returned in the format `projects/{project}/serviceAccounts/{service_account}` where `{service_account}` could be the legacy Cloud Build SA, in the format [PROJECT_NUMBER]@cloudbuild.gserviceaccount.com or the Compute SA, in the format [PROJECT_NUMBER]-compute@developer.gserviceaccount.com. If no service account will be used by default, this will be empty.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Identifier. Format: `projects/{project}/locations/{location}/defaultServiceAccount"
        }
      },
      "id": "DefaultServiceAccount"
    },
    "CreateGitLabConnectedRepositoryRequest": {
      "id": "CreateGitLabConnectedRepositoryRequest",
      "type": "object",
      "description": "Request to connect a repository from a connected GitLab host.",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Required. The name of the `GitLabConfig` that adds connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
        },
        "gitlabConnectedRepository": {
          "$ref": "GitLabConnectedRepository",
          "description": "Required. The GitLab repository to connect."
        }
      }
    },
    "BatchCreateBitbucketServerConnectedRepositoriesRequest": {
      "id": "BatchCreateBitbucketServerConnectedRepositoriesRequest",
      "properties": {
        "requests": {
          "type": "array",
          "description": "Required. Requests to connect Bitbucket Server repositories.",
          "items": {
            "$ref": "CreateBitbucketServerConnectedRepositoryRequest"
          }
        }
      },
      "type": "object",
      "description": "RPC request object accepted by BatchCreateBitbucketServerConnectedRepositories RPC method."
    },
    "HttpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "id": "HttpBody"
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "type": "object"
    },
    "DeveloperConnectConfig": {
      "properties": {
        "dir": {
          "type": "string",
          "description": "Required. Directory, relative to the source root, in which to run the build."
        },
        "gitRepositoryLink": {
          "description": "Required. The Developer Connect Git repository link, formatted as `projects/*/locations/*/connections/*/gitRepositoryLink/*`.",
          "type": "string"
        },
        "revision": {
          "type": "string",
          "description": "Required. The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref."
        }
      },
      "type": "object",
      "description": "This config defines the location of a source through Developer Connect.",
      "id": "DeveloperConnectConfig"
    },
    "Secret": {
      "properties": {
        "kmsKeyName": {
          "type": "string",
          "description": "Cloud KMS key name to use to decrypt these envs."
        },
        "secretEnv": {
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "id": "Secret",
      "type": "object",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials."
    },
    "NetworkConfig": {
      "id": "NetworkConfig",
      "properties": {
        "peeredNetworkIpRange": {
          "description": "Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.",
          "type": "string"
        },
        "peeredNetwork": {
          "type": "string",
          "description": "Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)"
        },
        "egressOption": {
          "enum": [
            "EGRESS_OPTION_UNSPECIFIED",
            "NO_PUBLIC_EGRESS",
            "PUBLIC_EGRESS"
          ],
          "type": "string",
          "enumDescriptions": [
            "If set, defaults to PUBLIC_EGRESS.",
            "If set, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured.",
            "If set, workers are created with a public address which allows for public internet egress."
          ],
          "description": "Option to configure network egress for the workers."
        }
      },
      "type": "object",
      "description": "Defines the network configuration for the pool."
    },
    "GitLabRepository": {
      "id": "GitLabRepository",
      "properties": {
        "description": {
          "description": "Description of the repository",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the repository"
        },
        "browseUri": {
          "description": "Link to the browse repo page on the GitLab instance",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name of the repository"
        },
        "repositoryId": {
          "$ref": "GitLabRepositoryId",
          "description": "Identifier for a repository"
        }
      },
      "type": "object",
      "description": "Proto Representing a GitLabRepository"
    },
    "ProcessAppManifestCallbackOperationMetadata": {
      "id": "ProcessAppManifestCallbackOperationMetadata",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      },
      "description": "Metadata for `ProcessAppManifestCallback` operation.",
      "type": "object"
    },
    "GitHubEnterpriseConfig": {
      "properties": {
        "name": {
          "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "type": "string"
        },
        "sslCa": {
          "type": "string",
          "description": "Optional. SSL certificate to use for requests to GitHub Enterprise."
        },
        "displayName": {
          "type": "string",
          "description": "Name to display for this config."
        },
        "peeredNetwork": {
          "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
          "type": "string"
        },
        "appId": {
          "type": "string",
          "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
          "format": "int64"
        },
        "hostUrl": {
          "type": "string",
          "description": "The URL of the github enterprise host the configuration is for."
        },
        "webhookKey": {
          "type": "string",
          "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
        },
        "secrets": {
          "description": "Names of secrets in Secret Manager.",
          "$ref": "GitHubEnterpriseSecrets"
        },
        "createTime": {
          "type": "string",
          "description": "Output only. Time when the installation was associated with the project.",
          "readOnly": true,
          "format": "google-datetime"
        }
      },
      "type": "object",
      "id": "GitHubEnterpriseConfig",
      "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server."
    },
    "CreateGitHubEnterpriseConfigOperationMetadata": {
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        }
      },
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation.",
      "type": "object",
      "id": "CreateGitHubEnterpriseConfigOperationMetadata"
    },
    "BitbucketServerConfig": {
      "description": "BitbucketServerConfig represents the configuration for a Bitbucket Server.",
      "properties": {
        "secrets": {
          "$ref": "BitbucketServerSecrets",
          "description": "Required. Secret Manager secrets needed by the config."
        },
        "peeredNetworkIpRange": {
          "type": "string",
          "description": "Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time when the config was created."
        },
        "connectedRepositories": {
          "readOnly": true,
          "description": "Output only. Connected Bitbucket Server repositories for this config.",
          "items": {
            "$ref": "BitbucketServerRepositoryId"
          },
          "type": "array"
        },
        "hostUri": {
          "description": "Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
          "type": "string"
        },
        "webhookKey": {
          "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.",
          "type": "string",
          "readOnly": true
        },
        "peeredNetwork": {
          "description": "Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
          "type": "string"
        },
        "sslCa": {
          "type": "string",
          "description": "Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt."
        },
        "apiKey": {
          "type": "string",
          "description": "Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig."
        },
        "name": {
          "type": "string",
          "description": "The resource name for the config."
        },
        "username": {
          "type": "string",
          "description": "Username of the account Cloud Build will use on Bitbucket Server."
        }
      },
      "id": "BitbucketServerConfig",
      "type": "object"
    },
    "GitFileSource": {
      "properties": {
        "repoType": {
          "enumDescriptions": [
            "The default, unknown repo type. Don't use it, instead use one of the other repo types.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise).",
            "A Bitbucket Server-hosted repo.",
            "A GitLab-hosted repo.",
            "A Bitbucket Cloud-hosted repo."
          ],
          "type": "string",
          "description": "See RepoType above.",
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB",
            "BITBUCKET_SERVER",
            "GITLAB",
            "BITBUCKET_CLOUD"
          ]
        },
        "githubEnterpriseConfig": {
          "description": "The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "path": {
          "description": "The path of the file, with the repo root as the root of the path.",
          "type": "string"
        },
        "repository": {
          "description": "The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path."
        },
        "bitbucketServerConfig": {
          "description": "The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "revision": {
          "description": "The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.",
          "type": "string"
        }
      },
      "description": "GitFileSource describes a file within a (possibly remote) code repository.",
      "type": "object",
      "id": "GitFileSource"
    },
    "GitLabSecrets": {
      "id": "GitLabSecrets",
      "properties": {
        "apiAccessTokenVersion": {
          "type": "string",
          "description": "Required. The resource name for the api access token’s secret version"
        },
        "webhookSecretVersion": {
          "description": "Required. Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.",
          "type": "string"
        },
        "apiKeyVersion": {
          "description": "Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.",
          "type": "string"
        },
        "readAccessTokenVersion": {
          "description": "Required. The resource name for the read access token’s secret version",
          "type": "string"
        }
      },
      "type": "object",
      "description": "GitLabSecrets represents the secrets in Secret Manager for a GitLab integration."
    },
    "UploadedNpmPackage": {
      "properties": {
        "fileHashes": {
          "description": "Hash types and values of the npm package.",
          "$ref": "FileHashes"
        },
        "uri": {
          "type": "string",
          "description": "URI of the uploaded npm package."
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "$ref": "TimeSpan",
          "readOnly": true
        }
      },
      "id": "UploadedNpmPackage",
      "type": "object",
      "description": "An npm package uploaded to Artifact Registry using the NpmPackage directive."
    },
    "PythonPackage": {
      "description": "Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.",
      "properties": {
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY\" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix."
        },
        "paths": {
          "description": "Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "PythonPackage"
    },
    "CancelBuildRequest": {
      "id": "CancelBuildRequest",
      "description": "Request to cancel an ongoing build.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`"
        },
        "id": {
          "type": "string",
          "description": "Required. ID of the build."
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        }
      }
    },
    "RemoveGitLabConnectedRepositoryRequest": {
      "id": "RemoveGitLabConnectedRepositoryRequest",
      "properties": {
        "connectedRepository": {
          "$ref": "GitLabRepositoryId",
          "description": "The connected repository to remove."
        }
      },
      "description": "RPC request object accepted by RemoveGitLabConnectedRepository RPC method.",
      "type": "object"
    },
    "MavenArtifact": {
      "type": "object",
      "id": "MavenArtifact",
      "properties": {
        "artifactId": {
          "type": "string",
          "description": "Maven `artifactId` value used when uploading the artifact to Artifact Registry."
        },
        "path": {
          "type": "string",
          "description": "Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar."
        },
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY\" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix."
        },
        "groupId": {
          "type": "string",
          "description": "Maven `groupId` value used when uploading the artifact to Artifact Registry."
        },
        "version": {
          "description": "Maven `version` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        }
      },
      "description": "A Maven artifact to upload to Artifact Registry upon successful completion of all build steps."
    },
    "StorageSourceManifest": {
      "description": "Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "description": "Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        },
        "generation": {
          "type": "string",
          "description": "Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64"
        }
      },
      "id": "StorageSourceManifest",
      "type": "object"
    },
    "UploadedMavenArtifact": {
      "type": "object",
      "id": "UploadedMavenArtifact",
      "description": "A Maven artifact uploaded using the MavenArtifact directive.",
      "properties": {
        "pushTiming": {
          "readOnly": true,
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified artifact."
        },
        "fileHashes": {
          "$ref": "FileHashes",
          "description": "Hash types and values of the Maven Artifact."
        },
        "uri": {
          "description": "URI of the uploaded artifact.",
          "type": "string"
        }
      }
    },
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest",
      "type": "object",
      "properties": {}
    },
    "Secrets": {
      "description": "Secrets and secret environment variables.",
      "properties": {
        "inline": {
          "type": "array",
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "items": {
            "$ref": "InlineSecret"
          }
        },
        "secretManager": {
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "items": {
            "$ref": "SecretManagerSecret"
          },
          "type": "array"
        }
      },
      "id": "Secrets",
      "type": "object"
    },
    "PrivatePoolV1Config": {
      "type": "object",
      "id": "PrivatePoolV1Config",
      "description": "Configuration for a V1 `PrivatePool`.",
      "properties": {
        "networkConfig": {
          "$ref": "NetworkConfig",
          "description": "Network configuration for the pool."
        },
        "workerConfig": {
          "$ref": "WorkerConfig",
          "description": "Machine configuration for the workers in the pool."
        }
      }
    },
    "BatchCreateGitLabConnectedRepositoriesRequest": {
      "properties": {
        "requests": {
          "items": {
            "$ref": "CreateGitLabConnectedRepositoryRequest"
          },
          "description": "Required. Requests to connect GitLab repositories.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "BatchCreateGitLabConnectedRepositoriesRequest",
      "description": "RPC request object accepted by BatchCreateGitLabConnectedRepositories RPC method."
    },
    "SourceProvenance": {
      "type": "object",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "properties": {
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        },
        "resolvedConnectedRepository": {
          "description": "Output only. A copy of the build's `source.connected_repository`, if exists, with any revisions resolved.",
          "$ref": "ConnectedRepository",
          "readOnly": true
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "fileHashes": {
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "readOnly": true,
          "type": "object"
        },
        "resolvedGitSource": {
          "description": "Output only. A copy of the build's `source.git_source`, if exists, with any revisions resolved.",
          "readOnly": true,
          "$ref": "GitSource"
        },
        "resolvedStorageSourceManifest": {
          "$ref": "StorageSourceManifest",
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview."
        }
      },
      "id": "SourceProvenance"
    },
    "SecretManagerSecret": {
      "properties": {
        "env": {
          "type": "string",
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step."
        },
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*",
          "type": "string"
        }
      },
      "id": "SecretManagerSecret",
      "type": "object",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager."
    },
    "Source": {
      "properties": {
        "storageSource": {
          "description": "If provided, get the source from this location in Cloud Storage.",
          "$ref": "StorageSource"
        },
        "storageSourceManifest": {
          "description": "If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
          "$ref": "StorageSourceManifest"
        },
        "connectedRepository": {
          "$ref": "ConnectedRepository",
          "description": "Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource."
        },
        "developerConnectConfig": {
          "description": "If provided, get the source from this Developer Connect config.",
          "$ref": "DeveloperConnectConfig"
        },
        "gitSource": {
          "description": "If provided, get the source from this Git repository.",
          "$ref": "GitSource"
        },
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        }
      },
      "type": "object",
      "id": "Source",
      "description": "Location of the source in a supported storage service."
    },
    "GitSource": {
      "type": "object",
      "id": "GitSource",
      "description": "Location of the source in any accessible Git repository.",
      "properties": {
        "revision": {
          "description": "The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.",
          "type": "string"
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "url": {
          "description": "Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.",
          "type": "string"
        }
      }
    },
    "StorageSource": {
      "properties": {
        "generation": {
          "type": "string",
          "format": "int64",
          "description": "Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used."
        },
        "sourceFetcher": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified defaults to GSUTIL.",
            "Use the \"gsutil\" tool to download the source file.",
            "Use the Cloud Storage Fetcher tool to download the source file."
          ],
          "description": "Optional. Option to specify the tool to fetch the source file for the build.",
          "enum": [
            "SOURCE_FETCHER_UNSPECIFIED",
            "GSUTIL",
            "GCS_FETCHER"
          ]
        },
        "bucket": {
          "type": "string",
          "description": "Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "type": "string",
          "description": "Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build."
        }
      },
      "id": "StorageSource",
      "description": "Location of the source in an archive file in Cloud Storage.",
      "type": "object"
    },
    "BitbucketServerConnectedRepository": {
      "type": "object",
      "properties": {
        "repo": {
          "description": "The Bitbucket Server repositories to connect.",
          "$ref": "BitbucketServerRepositoryId"
        },
        "parent": {
          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "type": "string"
        },
        "status": {
          "$ref": "Status",
          "readOnly": true,
          "description": "Output only. The status of the repo connection request."
        }
      },
      "id": "BitbucketServerConnectedRepository",
      "description": "/ BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository."
    },
    "ReceiveTriggerWebhookResponse": {
      "id": "ReceiveTriggerWebhookResponse",
      "description": "ReceiveTriggerWebhookResponse [Experimental] is the response object for the ReceiveTriggerWebhook method.",
      "properties": {},
      "type": "object"
    },
    "ListBitbucketServerRepositoriesResponse": {
      "properties": {
        "nextPageToken": {
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "bitbucketServerRepositories": {
          "type": "array",
          "description": "List of Bitbucket Server repositories.",
          "items": {
            "$ref": "BitbucketServerRepository"
          }
        }
      },
      "type": "object",
      "id": "ListBitbucketServerRepositoriesResponse",
      "description": "RPC response object returned by the ListBitbucketServerRepositories RPC method."
    },
    "GitLabEventsConfig": {
      "type": "object",
      "id": "GitLabEventsConfig",
      "description": "GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.",
      "properties": {
        "pullRequest": {
          "description": "Filter to match changes in pull requests.",
          "$ref": "PullRequestFilter"
        },
        "push": {
          "$ref": "PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        },
        "gitlabConfig": {
          "$ref": "GitLabConfig",
          "description": "Output only. The GitLabConfig specified in the gitlab_config_resource field.",
          "readOnly": true
        },
        "gitlabConfigResource": {
          "description": "The GitLab config resource that this trigger config maps to.",
          "type": "string"
        },
        "projectNamespace": {
          "type": "string",
          "description": "Namespace of the GitLab project."
        }
      }
    },
    "CreateBitbucketServerConfigOperationMetadata": {
      "id": "CreateBitbucketServerConfigOperationMetadata",
      "type": "object",
      "description": "Metadata for `CreateBitbucketServerConfig` operation.",
      "properties": {
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "PullRequestFilter": {
      "id": "PullRequestFilter",
      "type": "object",
      "description": "PullRequestFilter contains filter properties for matching GitHub Pull Requests.",
      "properties": {
        "branch": {
          "description": "Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "commentControl": {
          "description": "If CommentControl is enabled, depending on the setting, builds may not fire until a repository writer comments `/gcbrun` on a pull request or `/gcbrun` is in the pull request description. Only PR comments that contain `/gcbrun` will trigger builds. If CommentControl is set to disabled, comments with `/gcbrun` from a user with repository write permission or above will still trigger builds to run.",
          "enum": [
            "COMMENTS_DISABLED",
            "COMMENTS_ENABLED",
            "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
          ],
          "enumDescriptions": [
            "Do not require `/gcbrun` comments from a user with repository write permission or above on pull requests before builds are triggered. Comments that contain `/gcbrun` will still fire builds so this should be thought of as comments not required.",
            "Builds will only fire in response to pull requests if: 1. The pull request author has repository write permission or above and `/gcbrun` is in the PR description. 2. A user with repository writer permissions or above comments `/gcbrun` on a pull request authored by any user.",
            "Builds will only fire in response to pull requests if: 1. The pull request author is a repository writer or above. 2. If the author does not have write permissions, a user with write permissions or above must comment `/gcbrun` in order to fire a build."
          ],
          "type": "string"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "If true, branches that do NOT match the git_ref will trigger a build."
        }
      }
    },
    "RunBuildTriggerRequest": {
      "id": "RunBuildTriggerRequest",
      "description": "Specifies a build trigger to run and the source to use.",
      "type": "object",
      "properties": {
        "triggerId": {
          "type": "string",
          "description": "Required. ID of the trigger."
        },
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project."
        },
        "source": {
          "description": "Source to build against this trigger. Branch and tag names cannot consist of regular expressions.",
          "$ref": "RepoSource"
        }
      }
    },
    "BitbucketServerTriggerConfig": {
      "id": "BitbucketServerTriggerConfig",
      "type": "object",
      "properties": {
        "pullRequest": {
          "description": "Filter to match changes in pull requests.",
          "$ref": "PullRequestFilter"
        },
        "repoSlug": {
          "type": "string",
          "description": "Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo."
        },
        "bitbucketServerConfigResource": {
          "type": "string",
          "description": "Required. The Bitbucket server config resource that this trigger config maps to."
        },
        "bitbucketServerConfig": {
          "description": "Output only. The BitbucketServerConfig specified in the bitbucket_server_config_resource field.",
          "$ref": "BitbucketServerConfig",
          "readOnly": true
        },
        "push": {
          "$ref": "PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        },
        "projectKey": {
          "type": "string",
          "description": "Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\"."
        }
      },
      "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received."
    },
    "ListBuildTriggersResponse": {
      "type": "object",
      "description": "Response containing existing `BuildTriggers`.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to receive the next page of results."
        },
        "triggers": {
          "type": "array",
          "description": "`BuildTriggers` for the project, sorted by `create_time` descending.",
          "items": {
            "$ref": "BuildTrigger"
          }
        }
      },
      "id": "ListBuildTriggersResponse"
    },
    "CreateBitbucketServerConnectedRepositoryRequest": {
      "description": "Request to connect a repository from a connected Bitbucket Server host.",
      "type": "object",
      "id": "CreateBitbucketServerConnectedRepositoryRequest",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Required. The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`"
        },
        "bitbucketServerConnectedRepository": {
          "description": "Required. The Bitbucket Server repository to connect.",
          "$ref": "BitbucketServerConnectedRepository"
        }
      }
    },
    "GitLabConfig": {
      "properties": {
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. Time when the config was created.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name for the config."
        },
        "connectedRepositories": {
          "items": {
            "$ref": "GitLabRepositoryId"
          },
          "description": "Connected GitLab.com or GitLabEnterprise repositories for this config.",
          "type": "array"
        },
        "webhookKey": {
          "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.",
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "Username of the GitLab.com or GitLab Enterprise account Cloud Build will use."
        },
        "secrets": {
          "$ref": "GitLabSecrets",
          "description": "Required. Secret Manager secrets needed by the config."
        },
        "enterpriseConfig": {
          "$ref": "GitLabEnterpriseConfig",
          "description": "Optional. GitLabEnterprise config."
        }
      },
      "description": "GitLabConfig represents the configuration for a GitLab integration.",
      "id": "GitLabConfig",
      "type": "object"
    },
    "RetryBuildRequest": {
      "id": "RetryBuildRequest",
      "description": "Specifies a build to retry.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Required. Build ID of the original build."
        },
        "name": {
          "type": "string",
          "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`"
        }
      }
    },
    "ArtifactResult": {
      "properties": {
        "location": {
          "type": "string",
          "description": "The path of an artifact in a Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`."
        },
        "fileHash": {
          "description": "The file hash of the artifact.",
          "items": {
            "$ref": "FileHashes"
          },
          "type": "array"
        }
      },
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "id": "ArtifactResult",
      "type": "object"
    },
    "TimeSpan": {
      "properties": {
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Start of time span."
        },
        "endTime": {
          "description": "End of time span.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object",
      "id": "TimeSpan",
      "description": "Start and end times for a build execution phase."
    },
    "UpdateBitbucketServerConfigOperationMetadata": {
      "id": "UpdateBitbucketServerConfigOperationMetadata",
      "description": "Metadata for `UpdateBitbucketServerConfig` operation.",
      "type": "object",
      "properties": {
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "BitbucketServerRepositoryId": {
      "description": "BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.",
      "properties": {
        "webhookId": {
          "readOnly": true,
          "format": "int32",
          "type": "integer",
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo."
        },
        "projectKey": {
          "type": "string",
          "description": "Required. Identifier for the project storing the repository."
        },
        "repoSlug": {
          "type": "string",
          "description": "Required. Identifier for the repository."
        }
      },
      "id": "BitbucketServerRepositoryId",
      "type": "object"
    },
    "Warning": {
      "type": "object",
      "description": "A non-fatal problem encountered during the execution of the build.",
      "properties": {
        "priority": {
          "description": "The priority for this warning.",
          "type": "string",
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ]
        },
        "text": {
          "description": "Explanation of the warning generated.",
          "type": "string"
        }
      },
      "id": "Warning"
    },
    "GitLabConnectedRepository": {
      "description": "GitLabConnectedRepository represents a GitLab connected repository request response.",
      "properties": {
        "parent": {
          "description": "The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
          "type": "string"
        },
        "status": {
          "description": "Output only. The status of the repo connection request.",
          "$ref": "Status",
          "readOnly": true
        },
        "repo": {
          "$ref": "GitLabRepositoryId",
          "description": "The GitLab repositories to connect."
        }
      },
      "type": "object",
      "id": "GitLabConnectedRepository"
    },
    "ListGitLabRepositoriesResponse": {
      "type": "object",
      "description": "RPC response object returned by the ListGitLabRepositories RPC method.",
      "id": "ListGitLabRepositoriesResponse",
      "properties": {
        "gitlabRepositories": {
          "items": {
            "$ref": "GitLabRepository"
          },
          "type": "array",
          "description": "List of GitLab repositories"
        },
        "nextPageToken": {
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "UpdateGitLabConfigOperationMetadata": {
      "id": "UpdateGitLabConfigOperationMetadata",
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.",
          "type": "string"
        }
      },
      "description": "Metadata for `UpdateGitLabConfig` operation."
    },
    "GitConfig": {
      "id": "GitConfig",
      "type": "object",
      "properties": {
        "http": {
          "description": "Configuration for HTTP related git operations.",
          "$ref": "HttpConfig"
        }
      },
      "description": "GitConfig is a configuration for git operations."
    },
    "PubsubConfig": {
      "properties": {
        "subscription": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`."
        },
        "topic": {
          "type": "string",
          "description": "The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`."
        },
        "serviceAccountEmail": {
          "description": "Service account that will make the push request.",
          "type": "string"
        },
        "state": {
          "type": "string",
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.",
          "enumDescriptions": [
            "The subscription configuration has not been checked.",
            "The Pub/Sub subscription is properly configured.",
            "The subscription has been deleted.",
            "The topic has been deleted.",
            "Some of the subscription's field are misconfigured."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SUBSCRIPTION_DELETED",
            "TOPIC_DELETED",
            "SUBSCRIPTION_MISCONFIGURED"
          ]
        }
      },
      "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.",
      "type": "object",
      "id": "PubsubConfig"
    },
    "RemoveBitbucketServerConnectedRepositoryRequest": {
      "type": "object",
      "id": "RemoveBitbucketServerConnectedRepositoryRequest",
      "properties": {
        "connectedRepository": {
          "$ref": "BitbucketServerRepositoryId",
          "description": "The connected repository to remove."
        }
      },
      "description": "RPC request object accepted by RemoveBitbucketServerConnectedRepository RPC method."
    },
    "PoolOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}"
        }
      },
      "id": "PoolOption",
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
    },
    "DeleteBitbucketServerConfigOperationMetadata": {
      "description": "Metadata for `DeleteBitbucketServerConfig` operation.",
      "id": "DeleteBitbucketServerConfigOperationMetadata",
      "properties": {
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BatchCreateGitLabConnectedRepositoriesResponse": {
      "description": "Response of BatchCreateGitLabConnectedRepositories RPC method.",
      "properties": {
        "gitlabConnectedRepositories": {
          "description": "The GitLab connected repository requests' responses.",
          "type": "array",
          "items": {
            "$ref": "GitLabConnectedRepository"
          }
        }
      },
      "type": "object",
      "id": "BatchCreateGitLabConnectedRepositoriesResponse"
    },
    "DeleteWorkerPoolOperationMetadata": {
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "workerPool": {
          "type": "string",
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        }
      },
      "id": "DeleteWorkerPoolOperationMetadata",
      "description": "Metadata for the `DeleteWorkerPool` operation."
    },
    "BuildTrigger": {
      "description": "Configuration for an automated build in response to source repository changes.",
      "type": "object",
      "id": "BuildTrigger",
      "properties": {
        "filter": {
          "description": "A Common Expression Language string.",
          "type": "string"
        },
        "includedFiles": {
          "items": {
            "type": "string"
          },
          "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.",
          "type": "array"
        },
        "disabled": {
          "description": "If true, the trigger will never automatically execute a build.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character."
        },
        "substitutions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`."
        },
        "build": {
          "description": "Contents of the build template.",
          "$ref": "Build"
        },
        "tags": {
          "description": "Tags for annotation of a `BuildTrigger`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "autodetect": {
          "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of this trigger."
        },
        "serviceAccount": {
          "type": "string",
          "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`"
        },
        "gitFileSource": {
          "description": "The file source describing the local or remote Build template.",
          "$ref": "GitFileSource"
        },
        "bitbucketServerTriggerConfig": {
          "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
          "$ref": "BitbucketServerTriggerConfig"
        },
        "id": {
          "description": "Output only. Unique identifier of the trigger.",
          "readOnly": true,
          "type": "string"
        },
        "sourceToBuild": {
          "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.",
          "$ref": "GitRepoSource"
        },
        "approvalConfig": {
          "$ref": "ApprovalConfig",
          "description": "Configuration for manual approval to start a build invocation of this BuildTrigger."
        },
        "filename": {
          "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).",
          "type": "string"
        },
        "triggerTemplate": {
          "$ref": "RepoSource",
          "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`."
        },
        "ignoredFiles": {
          "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "repositoryEventConfig": {
          "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received.",
          "$ref": "RepositoryEventConfig"
        },
        "webhookConfig": {
          "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.",
          "$ref": "WebhookConfig"
        },
        "resourceName": {
          "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Time when the trigger was created.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "includeBuildLogs": {
          "enum": [
            "INCLUDE_BUILD_LOGS_UNSPECIFIED",
            "INCLUDE_BUILD_LOGS_WITH_STATUS"
          ],
          "enumDescriptions": [
            "Build logs will not be shown on GitHub.",
            "Build logs will be shown on GitHub."
          ],
          "type": "string",
          "description": "If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error."
        },
        "github": {
          "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
          "$ref": "GitHubEventsConfig"
        },
        "pubsubConfig": {
          "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.",
          "$ref": "PubsubConfig"
        },
        "eventType": {
          "description": "EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.",
          "enum": [
            "EVENT_TYPE_UNSPECIFIED",
            "REPO",
            "WEBHOOK",
            "PUBSUB",
            "MANUAL"
          ],
          "enumDescriptions": [
            "EVENT_TYPE_UNSPECIFIED event_types are ignored.",
            "REPO corresponds to the supported VCS integrations.",
            "WEBHOOK corresponds to webhook triggers.",
            "PUBSUB corresponds to pubsub triggers.",
            "MANUAL corresponds to manual-only invoked triggers."
          ],
          "type": "string"
        },
        "gitlabEnterpriseEventsConfig": {
          "description": "GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.",
          "$ref": "GitLabEventsConfig"
        }
      }
    },
    "BuildStep": {
      "description": "A step in the build pipeline.",
      "type": "object",
      "id": "BuildStep",
      "properties": {
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "type": "array",
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration."
        },
        "script": {
          "type": "string",
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args."
        },
        "automapSubstitutions": {
          "description": "Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step."
        },
        "exitCode": {
          "type": "integer",
          "readOnly": true,
          "description": "Output only. Return code from running the step.",
          "format": "int32"
        },
        "waitFor": {
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        },
        "args": {
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        },
        "secretEnv": {
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses."
        },
        "allowFailure": {
          "type": "boolean",
          "description": "Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field."
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "$ref": "TimeSpan",
          "readOnly": true
        },
        "timeout": {
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string",
          "format": "google-duration"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency."
        },
        "allowExitCodes": {
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array",
          "description": "Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence."
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "timing": {
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true,
          "$ref": "TimeSpan"
        }
      }
    },
    "CreateGitLabConfigOperationMetadata": {
      "description": "Metadata for `CreateGitLabConfig` operation.",
      "properties": {
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "CreateGitLabConfigOperationMetadata",
      "type": "object"
    },
    "DeleteGitLabConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        }
      },
      "description": "Metadata for `DeleteGitLabConfig` operation.",
      "id": "DeleteGitLabConfigOperationMetadata"
    },
    "DeleteGitHubEnterpriseConfigOperationMetadata": {
      "properties": {
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        }
      },
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation.",
      "type": "object",
      "id": "DeleteGitHubEnterpriseConfigOperationMetadata"
    },
    "BuiltImage": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`.",
          "type": "string"
        },
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        },
        "pushTiming": {
          "readOnly": true,
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified image."
        }
      },
      "id": "BuiltImage",
      "description": "An image built by the pipeline."
    },
    "BatchCreateGitLabConnectedRepositoriesResponseMetadata": {
      "properties": {
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        },
        "config": {
          "description": "The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        }
      },
      "id": "BatchCreateGitLabConnectedRepositoriesResponseMetadata",
      "description": "Metadata for `BatchCreateGitLabConnectedRepositories` operation.",
      "type": "object"
    },
    "Volume": {
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        },
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        }
      },
      "id": "Volume",
      "type": "object"
    },
    "InlineSecret": {
      "properties": {
        "envMap": {
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets."
        },
        "kmsKeyName": {
          "type": "string",
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*"
        }
      },
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object",
      "id": "InlineSecret"
    },
    "NpmPackage": {
      "id": "NpmPackage",
      "properties": {
        "packagePath": {
          "type": "string",
          "description": "Path to the package.json. e.g. workspace/path/to/package"
        },
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY\" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix."
        }
      },
      "type": "object",
      "description": "Npm package to upload to Artifact Registry upon successful completion of all build steps."
    },
    "ApprovalConfig": {
      "type": "object",
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "id": "ApprovalConfig"
    },
    "FailureInfo": {
      "type": "object",
      "description": "A fatal problem encountered during the execution of the build.",
      "id": "FailureInfo",
      "properties": {
        "type": {
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "description": "The name of the failure."
        },
        "detail": {
          "description": "Explains the failure issue in more detail using hard-coded text.",
          "type": "string"
        }
      }
    },
    "Status": {
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "details": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        }
      },
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "ListGithubEnterpriseConfigsResponse": {
      "id": "ListGithubEnterpriseConfigsResponse",
      "properties": {
        "configs": {
          "items": {
            "$ref": "GitHubEnterpriseConfig"
          },
          "type": "array",
          "description": "A list of GitHubEnterpriseConfigs"
        }
      },
      "type": "object",
      "description": "RPC response object returned by ListGithubEnterpriseConfigs RPC method."
    },
    "UpdateWorkerPoolOperationMetadata": {
      "description": "Metadata for the `UpdateWorkerPool` operation.",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "workerPool": {
          "type": "string",
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        }
      },
      "id": "UpdateWorkerPoolOperationMetadata",
      "type": "object"
    },
    "Results": {
      "properties": {
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "numArtifacts": {
          "description": "Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "type": "string",
          "format": "int64"
        },
        "mavenArtifacts": {
          "description": "Maven artifacts uploaded to Artifact Registry at the end of the build.",
          "items": {
            "$ref": "UploadedMavenArtifact"
          },
          "type": "array"
        },
        "artifactManifest": {
          "description": "Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "type": "string"
        },
        "artifactTiming": {
          "$ref": "TimeSpan",
          "description": "Time to push all non-container artifacts to Cloud Storage."
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "images": {
          "description": "Container images that were built as a part of the build.",
          "items": {
            "$ref": "BuiltImage"
          },
          "type": "array"
        },
        "pythonPackages": {
          "description": "Python artifacts uploaded to Artifact Registry at the end of the build.",
          "type": "array",
          "items": {
            "$ref": "UploadedPythonPackage"
          }
        },
        "npmPackages": {
          "items": {
            "$ref": "UploadedNpmPackage"
          },
          "description": "Npm packages uploaded to Artifact Registry at the end of the build.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "Results",
      "description": "Artifacts created by the build pipeline."
    },
    "ApproveBuildRequest": {
      "type": "object",
      "description": "Request to approve or reject a pending build.",
      "properties": {
        "approvalResult": {
          "$ref": "ApprovalResult",
          "description": "Approval decision and metadata."
        }
      },
      "id": "ApproveBuildRequest"
    },
    "BuildOperationMetadata": {
      "id": "BuildOperationMetadata",
      "description": "Metadata for build operations.",
      "type": "object",
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "Build"
        }
      }
    },
    "Build": {
      "type": "object",
      "properties": {
        "failureInfo": {
          "readOnly": true,
          "$ref": "FailureInfo",
          "description": "Output only. Contains information about the build when status=FAILURE."
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "description": "Output only. Status of the build.",
          "readOnly": true
        },
        "logUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. URL to logs for this build in Google Cloud Console."
        },
        "source": {
          "$ref": "Source",
          "description": "The location of the source files to build."
        },
        "logsBucket": {
          "description": "Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
          "type": "string"
        },
        "gitConfig": {
          "$ref": "GitConfig",
          "description": "Optional. Configuration for git operations."
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Time at which the request to create the build was received.",
          "format": "google-datetime"
        },
        "buildTriggerId": {
          "type": "string",
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Time at which execution of the build was started.",
          "readOnly": true
        },
        "timing": {
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "TimeSpan"
          }
        },
        "warnings": {
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "items": {
            "$ref": "Warning"
          },
          "readOnly": true,
          "type": "array"
        },
        "availableSecrets": {
          "$ref": "Secrets",
          "description": "Secrets and secret environment variables."
        },
        "options": {
          "$ref": "BuildOptions",
          "description": "Special options for this build."
        },
        "name": {
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
          "type": "string",
          "readOnly": true
        },
        "approval": {
          "readOnly": true,
          "$ref": "BuildApproval",
          "description": "Output only. Describes this build's approval configuration, status, and result."
        },
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Unique identifier of the build."
        },
        "queueTtl": {
          "format": "google-duration",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "type": "string"
        },
        "projectId": {
          "description": "Output only. ID of the project.",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Tags for annotation of a `Build`. These are not docker tags."
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.",
          "type": "string",
          "format": "google-duration"
        },
        "steps": {
          "items": {
            "$ref": "BuildStep"
          },
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array"
        },
        "statusDetail": {
          "description": "Output only. Customer-readable message about the current status.",
          "type": "string",
          "readOnly": true
        },
        "images": {
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "type": "array"
        },
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ",
          "type": "string"
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true,
          "$ref": "SourceProvenance"
        },
        "finishTime": {
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "artifacts": {
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
          "$ref": "Artifacts"
        },
        "substitutions": {
          "type": "object",
          "description": "Substitutions data for `Build` resource.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "secrets": {
          "items": {
            "$ref": "Secret"
          },
          "type": "array",
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets"
        },
        "results": {
          "description": "Output only. Results of the build.",
          "readOnly": true,
          "$ref": "Results"
        }
      },
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "id": "Build"
    },
    "GitHubEventsConfig": {
      "properties": {
        "push": {
          "$ref": "PushFilter",
          "description": "filter to match changes in refs like branches, tags."
        },
        "owner": {
          "type": "string",
          "description": "Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\"."
        },
        "enterpriseConfigResourceName": {
          "type": "string",
          "description": "Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "filter to match changes in pull requests."
        },
        "installationId": {
          "format": "int64",
          "deprecated": true,
          "description": "The installationID that emits the GitHub event.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\"."
        }
      },
      "id": "GitHubEventsConfig",
      "type": "object",
      "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received."
    },
    "GitRepoSource": {
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required."
        },
        "ref": {
          "type": "string",
          "description": "The branch or tag to use. Must start with \"refs/\" (required)."
        },
        "repoType": {
          "description": "See RepoType below.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB",
            "BITBUCKET_SERVER",
            "GITLAB",
            "BITBUCKET_CLOUD"
          ],
          "enumDescriptions": [
            "The default, unknown repo type. Don't use it, instead use one of the other repo types.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise).",
            "A Bitbucket Server-hosted repo.",
            "A GitLab-hosted repo.",
            "A Bitbucket Cloud-hosted repo."
          ]
        },
        "repository": {
          "type": "string",
          "description": "The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`."
        },
        "bitbucketServerConfig": {
          "type": "string",
          "description": "The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`."
        }
      },
      "type": "object",
      "description": "GitRepoSource describes a repo and ref of a code repository.",
      "id": "GitRepoSource"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        }
      },
      "type": "object",
      "id": "Operation"
    },
    "BitbucketServerRepository": {
      "properties": {
        "description": {
          "description": "Description of the repository.",
          "type": "string"
        },
        "name": {
          "description": "The resource name of the repository.",
          "type": "string"
        },
        "repoId": {
          "$ref": "BitbucketServerRepositoryId",
          "description": "Identifier for a repository hosted on a Bitbucket Server."
        },
        "browseUri": {
          "description": "Link to the browse repo page on the Bitbucket Server instance.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of the repository.",
          "type": "string"
        }
      },
      "description": "BitbucketServerRepository represents a repository hosted on a Bitbucket Server.",
      "type": "object",
      "id": "BitbucketServerRepository"
    },
    "CreateWorkerPoolOperationMetadata": {
      "properties": {
        "workerPool": {
          "type": "string",
          "description": "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Metadata for the `CreateWorkerPool` operation.",
      "id": "CreateWorkerPoolOperationMetadata"
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata": {
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata",
      "properties": {
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "config": {
          "type": "string",
          "description": "The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`"
        }
      },
      "description": "Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.",
      "type": "object"
    },
    "ApprovalResult": {
      "properties": {
        "decision": {
          "description": "Required. The decision of this manual approval.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ]
        },
        "url": {
          "type": "string",
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build."
        },
        "approverAccount": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called."
        },
        "approvalTime": {
          "description": "Output only. The time when the approval decision was made.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "comment": {
          "type": "string",
          "description": "Optional. An optional comment for this manual approval result."
        }
      },
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "type": "object",
      "id": "ApprovalResult"
    },
    "HttpConfig": {
      "type": "object",
      "id": "HttpConfig",
      "description": "HttpConfig is a configuration for HTTP related git operations.",
      "properties": {
        "proxySecretVersionName": {
          "type": "string",
          "description": "SecretVersion resource of the HTTP proxy URL. The proxy URL should be in format protocol://@]proxyhost[:port]."
        }
      }
    },
    "ConnectedRepository": {
      "type": "object",
      "properties": {
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build."
        },
        "revision": {
          "description": "The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.",
          "type": "string"
        },
        "repository": {
          "type": "string",
          "description": "Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`."
        }
      },
      "id": "ConnectedRepository",
      "description": "Location of the source in a 2nd-gen Google Cloud Build repository resource."
    },
    "RepositoryEventConfig": {
      "type": "object",
      "properties": {
        "repository": {
          "description": "The resource name of the Repo API resource.",
          "type": "string"
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "Filter to match changes in pull requests."
        },
        "repositoryType": {
          "enum": [
            "REPOSITORY_TYPE_UNSPECIFIED",
            "GITHUB",
            "GITHUB_ENTERPRISE",
            "GITLAB_ENTERPRISE",
            "BITBUCKET_DATA_CENTER",
            "BITBUCKET_CLOUD"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "If unspecified, RepositoryType defaults to GITHUB.",
            "The SCM repo is GITHUB.",
            "The SCM repo is GITHUB Enterprise.",
            "The SCM repo is GITLAB Enterprise.",
            "The SCM repo is BITBUCKET Data Center.",
            "The SCM repo is BITBUCKET Cloud."
          ],
          "description": "Output only. The type of the SCM vendor the repository points to.",
          "type": "string"
        },
        "push": {
          "$ref": "PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        }
      },
      "id": "RepositoryEventConfig",
      "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received."
    },
    "BitbucketServerSecrets": {
      "properties": {
        "webhookSecretVersionName": {
          "type": "string",
          "description": "Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig."
        },
        "readAccessTokenVersionName": {
          "type": "string",
          "description": "Required. The resource name for the read access token's secret version."
        },
        "adminAccessTokenVersionName": {
          "type": "string",
          "description": "Required. The resource name for the admin access token's secret version."
        }
      },
      "id": "BitbucketServerSecrets",
      "type": "object",
      "description": "BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server."
    },
    "UpdateGitHubEnterpriseConfigOperationMetadata": {
      "type": "object",
      "id": "UpdateGitHubEnterpriseConfigOperationMetadata",
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      }
    },
    "PushFilter": {
      "id": "PushFilter",
      "description": "Push contains filter properties for matching GitHub git pushes.",
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "tag": {
          "type": "string",
          "description": "Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "invertRegex": {
          "description": "When true, only trigger a build if the revision regex does NOT match the git_ref regex.",
          "type": "boolean"
        }
      }
    },
    "WorkerPool": {
      "description": "Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).",
      "id": "WorkerPool",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.",
          "type": "object"
        },
        "name": {
          "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
          "readOnly": true,
          "type": "string"
        },
        "etag": {
          "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.",
          "type": "string",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
          "readOnly": true
        },
        "privatePoolV1Config": {
          "description": "Legacy Private Pool configuration.",
          "$ref": "PrivatePoolV1Config"
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
          "format": "google-datetime",
          "type": "string"
        },
        "deleteTime": {
          "format": "google-datetime",
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
          "readOnly": true,
          "type": "string"
        },
        "displayName": {
          "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
          "type": "string"
        },
        "uid": {
          "description": "Output only. A unique identifier for the `WorkerPool`.",
          "type": "string",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. `WorkerPool` state.",
          "enumDescriptions": [
            "State of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted.",
            "`WorkerPool` is being updated; new builds cannot be run."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED",
            "UPDATING"
          ]
        }
      },
      "type": "object"
    },
    "ArtifactObjects": {
      "id": "ArtifactObjects",
      "type": "object",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "properties": {
        "timing": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "readOnly": true
        },
        "paths": {
          "type": "array",
          "description": "Path globs used to match files in the build's workspace.",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        }
      }
    },
    "ListBuildsResponse": {
      "type": "object",
      "description": "Response including listed builds.",
      "id": "ListBuildsResponse",
      "properties": {
        "builds": {
          "items": {
            "$ref": "Build"
          },
          "description": "Builds will be sorted by `create_time`, descending.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to receive the next page of results. This will be absent if the end of the response list has been reached.",
          "type": "string"
        }
      }
    },
    "BuildApproval": {
      "properties": {
        "result": {
          "readOnly": true,
          "description": "Output only. Result of manual approval for this Build.",
          "$ref": "ApprovalResult"
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "readOnly": true,
          "description": "Output only. The state of this build's approval.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ]
        },
        "config": {
          "readOnly": true,
          "description": "Output only. Configuration for manual approval of this build.",
          "$ref": "ApprovalConfig"
        }
      },
      "id": "BuildApproval",
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "type": "object"
    }
  },
  "parameters": {
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "version": "v1",
  "title": "Cloud Build API",
  "name": "cloudbuild",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "resources": {
    "githubDotComWebhook": {
      "methods": {
        "receive": {
          "response": {
            "$ref": "Empty"
          },
          "flatPath": "v1/githubDotComWebhook:receive",
          "parameterOrder": [],
          "path": "v1/githubDotComWebhook:receive",
          "request": {
            "$ref": "HttpBody"
          },
          "id": "cloudbuild.githubDotComWebhook.receive",
          "httpMethod": "POST",
          "description": "ReceiveGitHubDotComWebhook is called when the API receives a github.com webhook.",
          "parameters": {
            "webhookKey": {
              "location": "query",
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
              "type": "string"
            }
          }
        }
      }
    },
    "locations": {
      "methods": {
        "regionalWebhook": {
          "parameterOrder": [
            "location"
          ],
          "description": "ReceiveRegionalWebhook is called when the API receives a regional GitHub webhook.",
          "response": {
            "$ref": "Empty"
          },
          "httpMethod": "POST",
          "flatPath": "v1/locations/{locationsId}/regionalWebhook",
          "path": "v1/{+location}/regionalWebhook",
          "id": "cloudbuild.locations.regionalWebhook",
          "request": {
            "$ref": "HttpBody"
          },
          "parameters": {
            "location": {
              "location": "path",
              "description": "Required. The location where the webhook should be sent.",
              "type": "string",
              "required": true,
              "pattern": "^locations/[^/]+$"
            },
            "webhookKey": {
              "location": "query",
              "type": "string",
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation."
            }
          }
        }
      }
    },
    "projects": {
      "resources": {
        "builds": {
          "methods": {
            "get": {
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "id": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the build."
                },
                "projectId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the project."
                },
                "name": {
                  "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                  "location": "query",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Build"
              },
              "path": "v1/projects/{projectId}/builds/{id}",
              "id": "cloudbuild.projects.builds.get",
              "flatPath": "v1/projects/{projectId}/builds/{id}",
              "httpMethod": "GET",
              "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information."
            },
            "create": {
              "httpMethod": "POST",
              "id": "cloudbuild.projects.builds.create",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/projects/{projectId}/builds",
              "response": {
                "$ref": "Operation"
              },
              "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
              "request": {
                "$ref": "Build"
              },
              "parameterOrder": [
                "projectId"
              ],
              "parameters": {
                "projectId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project."
                },
                "parent": {
                  "type": "string",
                  "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`",
                  "location": "query"
                }
              },
              "flatPath": "v1/projects/{projectId}/builds"
            },
            "list": {
              "path": "v1/projects/{projectId}/builds",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.builds.list",
              "flatPath": "v1/projects/{projectId}/builds",
              "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
              "response": {
                "$ref": "ListBuildsResponse"
              },
              "parameters": {
                "filter": {
                  "description": "The raw filter text to constrain the results.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Number of results to return in the list.",
                  "location": "query",
                  "format": "int32",
                  "type": "integer"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more."
                },
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the project."
                },
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "httpMethod": "GET"
            },
            "cancel": {
              "parameters": {
                "projectId": {
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the project.",
                  "location": "path"
                },
                "id": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the build."
                }
              },
              "request": {
                "$ref": "CancelBuildRequest"
              },
              "description": "Cancels a build in progress.",
              "id": "cloudbuild.projects.builds.cancel",
              "flatPath": "v1/projects/{projectId}/builds/{id}:cancel",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Build"
              },
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "path": "v1/projects/{projectId}/builds/{id}:cancel"
            },
            "approve": {
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/builds/[^/]+$"
                }
              },
              "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
              "request": {
                "$ref": "ApproveBuildRequest"
              },
              "id": "cloudbuild.projects.builds.approve",
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:approve",
              "flatPath": "v1/projects/{projectsId}/builds/{buildsId}:approve",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Operation"
              }
            },
            "retry": {
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "flatPath": "v1/projects/{projectId}/builds/{id}:retry",
              "request": {
                "$ref": "RetryBuildRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.builds.retry",
              "httpMethod": "POST",
              "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
              "path": "v1/projects/{projectId}/builds/{id}:retry",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "id": {
                  "description": "Required. Build ID of the original build.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "projectId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the project."
                }
              }
            }
          }
        },
        "locations": {
          "resources": {
            "builds": {
              "methods": {
                "get": {
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}",
                  "response": {
                    "$ref": "Build"
                  },
                  "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.builds.get",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "required": true
                    },
                    "id": {
                      "description": "Required. ID of the build.",
                      "type": "string",
                      "location": "query"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Required. ID of the project.",
                      "location": "query"
                    }
                  }
                },
                "approve": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "ApproveBuildRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:approve",
                  "id": "cloudbuild.projects.locations.builds.approve",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}:approve"
                },
                "retry": {
                  "path": "v1/{+name}:retry",
                  "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.builds.retry",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$"
                    }
                  },
                  "request": {
                    "$ref": "RetryBuildRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "create": {
                  "httpMethod": "POST",
                  "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
                  "request": {
                    "$ref": "Build"
                  },
                  "id": "cloudbuild.projects.locations.builds.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
                    },
                    "projectId": {
                      "location": "query",
                      "description": "Required. ID of the project.",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+parent}/builds"
                },
                "cancel": {
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CancelBuildRequest"
                  },
                  "httpMethod": "POST",
                  "description": "Cancels a build in progress.",
                  "id": "cloudbuild.projects.locations.builds.cancel",
                  "path": "v1/{+name}:cancel",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "Build"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel"
                },
                "list": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/builds",
                  "response": {
                    "$ref": "ListBuildsResponse"
                  },
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "id": "cloudbuild.projects.locations.builds.list",
                  "parameters": {
                    "pageToken": {
                      "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
                      "type": "string",
                      "location": "query"
                    },
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The raw filter text to constrain the results."
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Number of results to return in the list.",
                      "format": "int32"
                    },
                    "parent": {
                      "location": "path",
                      "required": true,
                      "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "workerPools": {
              "methods": {
                "get": {
                  "httpMethod": "GET",
                  "description": "Returns details of a `WorkerPool`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.get",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "WorkerPool"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "description": "Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`."
                    }
                  }
                },
                "patch": {
                  "parameters": {
                    "validateOnly": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If set, validate the request and preview the response, but do not actually post it."
                    },
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$"
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "type": "string",
                      "description": "A mask specifying which fields in `worker_pool` to update.",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates a `WorkerPool`.",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "PATCH",
                  "id": "cloudbuild.projects.locations.workerPools.patch"
                },
                "create": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "httpMethod": "POST",
                  "description": "Creates a `WorkerPool`.",
                  "path": "v1/{+parent}/workerPools",
                  "id": "cloudbuild.projects.locations.workerPools.create",
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "description": "Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true
                    },
                    "validateOnly": {
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "workerPoolId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/."
                    }
                  }
                },
                "list": {
                  "path": "v1/{+parent}/workerPools",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.list",
                  "description": "Lists `WorkerPool`s.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListWorkerPoolsResponse"
                  },
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "A page token, received from a previous `ListWorkerPools` call. Provide this to retrieve the subsequent page.",
                      "location": "query"
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of `WorkerPool`s to return. The service may return fewer than this value. If omitted, the server will use a sensible default."
                    },
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/{location}`.",
                      "type": "string",
                      "required": true
                    }
                  }
                },
                "delete": {
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "validateOnly": {
                      "type": "boolean",
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "location": "query"
                    },
                    "allowMissing": {
                      "type": "boolean",
                      "description": "If set to true, and the `WorkerPool` is not found, the request will succeed but no action will be taken on the server.",
                      "location": "query"
                    },
                    "etag": {
                      "location": "query",
                      "type": "string",
                      "description": "Optional. If provided, it must match the server's etag on the workerpool for the request to be processed."
                    },
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.",
                      "type": "string"
                    }
                  },
                  "description": "Deletes a `WorkerPool`.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "httpMethod": "DELETE",
                  "id": "cloudbuild.projects.locations.workerPools.delete",
                  "path": "v1/{+name}"
                }
              }
            },
            "bitbucketServerConfigs": {
              "resources": {
                "connectedRepositories": {
                  "methods": {
                    "batchCreate": {
                      "description": "Batch connecting Bitbucket Server repositories to Cloud Build.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/connectedRepositories:batchCreate",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                          "type": "string",
                          "required": true,
                          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1/{+parent}/connectedRepositories:batchCreate",
                      "id": "cloudbuild.projects.locations.bitbucketServerConfigs.connectedRepositories.batchCreate",
                      "request": {
                        "$ref": "BatchCreateBitbucketServerConnectedRepositoriesRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "httpMethod": "POST"
                    }
                  }
                },
                "repos": {
                  "methods": {
                    "list": {
                      "httpMethod": "GET",
                      "parameters": {
                        "pageToken": {
                          "description": "A page token, received from a previous `ListBitbucketServerRepositoriesRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBitbucketServerConfigsRequest` must match the call that provided the page token.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "required": true,
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                          "description": "Required. Name of the parent resource."
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "location": "query",
                          "description": "The maximum number of configs to return. The service may return fewer than this value. The maximum value is 1000; values above 1000 will be coerced to 1000."
                        }
                      },
                      "description": "List all repositories for a given `BitbucketServerConfig`. This API is experimental.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "cloudbuild.projects.locations.bitbucketServerConfigs.repos.list",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/repos",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "ListBitbucketServerRepositoriesResponse"
                      },
                      "path": "v1/{+parent}/repos"
                    }
                  }
                }
              },
              "methods": {
                "removeBitbucketServerConnectedRepository": {
                  "path": "v1/{+config}:removeBitbucketServerConnectedRepository",
                  "httpMethod": "POST",
                  "description": "Remove a Bitbucket Server repository from a given BitbucketServerConfig's connected repositories. This API is experimental.",
                  "parameters": {
                    "config": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                      "description": "Required. The name of the `BitbucketServerConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
                      "type": "string",
                      "required": true
                    }
                  },
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}:removeBitbucketServerConnectedRepository",
                  "parameterOrder": [
                    "config"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "request": {
                    "$ref": "RemoveBitbucketServerConnectedRepositoryRequest"
                  }
                },
                "create": {
                  "parameters": {
                    "bitbucketServerConfigId": {
                      "type": "string",
                      "description": "Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
                      "location": "query"
                    },
                    "parent": {
                      "location": "path",
                      "type": "string",
                      "description": "Required. Name of the parent resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true
                    }
                  },
                  "description": "Creates a new `BitbucketServerConfig`. This API is experimental.",
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.create",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "path": "v1/{+parent}/bitbucketServerConfigs",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs",
                  "request": {
                    "$ref": "BitbucketServerConfig"
                  },
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "get": {
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.get",
                  "description": "Retrieve a `BitbucketServerConfig`. This API is experimental.",
                  "response": {
                    "$ref": "BitbucketServerConfig"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "Required. The config resource name.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$"
                    }
                  },
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListBitbucketServerConfigsResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "List all `BitbucketServerConfigs` for a given project. This API is experimental.",
                  "path": "v1/{+parent}/bitbucketServerConfigs",
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000."
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "A page token, received from a previous `ListBitbucketServerConfigsRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBitbucketServerConfigsRequest` must match the call that provided the page token.",
                      "location": "query"
                    },
                    "parent": {
                      "description": "Required. Name of the parent resource.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string"
                    }
                  }
                },
                "patch": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "BitbucketServerConfig"
                  },
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.patch",
                  "parameters": {
                    "name": {
                      "description": "The resource name for the config.",
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                      "required": true
                    },
                    "updateMask": {
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "type": "string",
                      "format": "google-fieldmask",
                      "location": "query"
                    }
                  },
                  "path": "v1/{+name}",
                  "httpMethod": "PATCH",
                  "description": "Updates an existing `BitbucketServerConfig`. This API is experimental."
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. The config resource name.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                      "type": "string"
                    }
                  },
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.delete",
                  "path": "v1/{+name}",
                  "description": "Delete a `BitbucketServerConfig`. This API is experimental.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}"
                }
              }
            },
            "triggers": {
              "methods": {
                "get": {
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "parameters": {
                    "triggerId": {
                      "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "location": "path"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Required. ID of the project that owns the trigger.",
                      "location": "query"
                    }
                  },
                  "id": "cloudbuild.projects.locations.triggers.get",
                  "description": "Returns information about a `BuildTrigger`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "BuildTrigger"
                  }
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.delete",
                  "path": "v1/{+name}",
                  "description": "Deletes a `BuildTrigger` by its project ID and trigger ID.",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "triggerId": {
                      "location": "query",
                      "description": "Required. ID of the `BuildTrigger` to delete.",
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Required. ID of the project that owns the trigger.",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "run": {
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "RunBuildTriggerRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:run",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "type": "string",
                      "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+name}:run",
                  "httpMethod": "POST",
                  "description": "Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.",
                  "id": "cloudbuild.projects.locations.triggers.run"
                },
                "webhook": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.webhook",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:webhook",
                  "parameters": {
                    "secret": {
                      "description": "Secret token used for authorization if an OAuth token isn't provided.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                    },
                    "trigger": {
                      "description": "Name of the trigger to run the payload against",
                      "location": "query",
                      "type": "string"
                    },
                    "projectId": {
                      "location": "query",
                      "type": "string",
                      "description": "Project in which the specified trigger lives"
                    }
                  },
                  "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
                  "response": {
                    "$ref": "ReceiveTriggerWebhookResponse"
                  },
                  "httpMethod": "POST",
                  "path": "v1/{+name}:webhook",
                  "request": {
                    "$ref": "HttpBody"
                  }
                },
                "patch": {
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "path": "v1/{+resourceName}",
                  "description": "Updates a `BuildTrigger` by its project ID and trigger ID.",
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "parameterOrder": [
                    "resourceName"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.patch",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "projectId": {
                      "type": "string",
                      "description": "Required. ID of the project that owns the trigger.",
                      "location": "query"
                    },
                    "resourceName": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.",
                      "location": "path",
                      "type": "string"
                    },
                    "updateMask": {
                      "location": "query",
                      "type": "string",
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "format": "google-fieldmask"
                    },
                    "triggerId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the `BuildTrigger` to update."
                    }
                  },
                  "httpMethod": "PATCH"
                },
                "list": {
                  "description": "Lists existing `BuildTrigger`s.",
                  "httpMethod": "GET",
                  "parameters": {
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "description": "Number of results to return in the list.",
                      "format": "int32"
                    },
                    "parent": {
                      "type": "string",
                      "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    },
                    "projectId": {
                      "description": "Required. ID of the project for which to list BuildTriggers.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageToken": {
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+parent}/triggers",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListBuildTriggersResponse"
                  },
                  "id": "cloudbuild.projects.locations.triggers.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers"
                },
                "create": {
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "description": "Creates a new `BuildTrigger`.",
                  "id": "cloudbuild.projects.locations.triggers.create",
                  "path": "v1/{+parent}/triggers",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
                  "parameters": {
                    "projectId": {
                      "description": "Required. ID of the project for which to configure automatic builds.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "location": "path",
                      "type": "string",
                      "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "The name of the operation resource."
                    }
                  },
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "id": "cloudbuild.projects.locations.operations.get",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "cancel": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true
                    }
                  },
                  "path": "v1/{+name}:cancel",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  }
                }
              }
            },
            "githubEnterpriseConfigs": {
              "methods": {
                "list": {
                  "response": {
                    "$ref": "ListGithubEnterpriseConfigsResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "description": "List all GitHubEnterpriseConfigs for a given project.",
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "projectId": {
                      "description": "ID of the project",
                      "location": "query",
                      "deprecated": true,
                      "type": "string"
                    },
                    "parent": {
                      "type": "string",
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.list",
                  "httpMethod": "GET"
                },
                "patch": {
                  "description": "Update an association between a GCP project and a GitHub Enterprise server.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.patch",
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "httpMethod": "PATCH",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "updateMask": {
                      "location": "query",
                      "format": "google-fieldmask",
                      "type": "string",
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed."
                    },
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "type": "string"
                    }
                  }
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "projectId": {
                      "location": "query",
                      "deprecated": true,
                      "type": "string",
                      "description": "ID of the project"
                    },
                    "configId": {
                      "location": "query",
                      "deprecated": true,
                      "type": "string",
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
                    }
                  },
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Retrieve a GitHubEnterpriseConfig.",
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "response": {
                    "$ref": "GitHubEnterpriseConfig"
                  }
                },
                "delete": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "parameters": {
                    "projectId": {
                      "type": "string",
                      "deprecated": true,
                      "description": "ID of the project",
                      "location": "query"
                    },
                    "configId": {
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                      "location": "query",
                      "type": "string",
                      "deprecated": true
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "DELETE",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.delete",
                  "path": "v1/{+name}",
                  "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "create": {
                  "description": "Create an association between a GCP project and a GitHub Enterprise server.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                      "location": "path",
                      "type": "string"
                    },
                    "gheConfigId": {
                      "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character",
                      "location": "query",
                      "type": "string"
                    },
                    "projectId": {
                      "location": "query",
                      "type": "string",
                      "description": "ID of the project.",
                      "deprecated": true
                    }
                  },
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.create",
                  "parameterOrder": [
                    "parent"
                  ]
                }
              }
            },
            "gitLabConfigs": {
              "resources": {
                "connectedRepositories": {
                  "methods": {
                    "batchCreate": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "cloudbuild.projects.locations.gitLabConfigs.connectedRepositories.batchCreate",
                      "response": {
                        "$ref": "Operation"
                      },
                      "request": {
                        "$ref": "BatchCreateGitLabConnectedRepositoriesRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Batch connecting GitLab repositories to Cloud Build. This API is experimental.",
                      "path": "v1/{+parent}/connectedRepositories:batchCreate",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the `GitLabConfig` that adds connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/connectedRepositories:batchCreate"
                    }
                  }
                },
                "repos": {
                  "methods": {
                    "list": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/repos",
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1/{+parent}/repos",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "ListGitLabRepositoriesResponse"
                      },
                      "description": "List all repositories for a given `GitLabConfig`. This API is experimental",
                      "id": "cloudbuild.projects.locations.gitLabConfigs.repos.list",
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "description": "The maximum number of repositories to return. The service may return fewer than this value.",
                          "type": "integer",
                          "location": "query"
                        },
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
                          "required": true,
                          "description": "Required. Name of the parent resource."
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "A page token, received from a previous ListGitLabRepositoriesRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListGitLabRepositoriesRequest` must match the call that provided the page token.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "methods": {
                "removeGitLabConnectedRepository": {
                  "description": "Remove a GitLab repository from a given GitLabConfig's connected repositories. This API is experimental.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}:removeGitLabConnectedRepository",
                  "path": "v1/{+config}:removeGitLabConnectedRepository",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "RemoveGitLabConnectedRepositoryRequest"
                  },
                  "parameterOrder": [
                    "config"
                  ],
                  "id": "cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository",
                  "parameters": {
                    "config": {
                      "location": "path",
                      "description": "Required. The name of the `GitLabConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  }
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "DELETE",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "Required. The config resource name."
                    }
                  },
                  "id": "cloudbuild.projects.locations.gitLabConfigs.delete",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Delete a `GitLabConfig`. This API is experimental",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "patch": {
                  "httpMethod": "PATCH",
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.gitLabConfigs.patch",
                  "description": "Updates an existing `GitLabConfig`. This API is experimental",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}",
                  "parameters": {
                    "updateMask": {
                      "type": "string",
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "format": "google-fieldmask",
                      "location": "query"
                    },
                    "name": {
                      "required": true,
                      "description": "The resource name for the config.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "GitLabConfig"
                  }
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}",
                  "description": "Retrieves a `GitLabConfig`. This API is experimental",
                  "response": {
                    "$ref": "GitLabConfig"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. The config resource name.",
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.gitLabConfigs.get"
                },
                "list": {
                  "path": "v1/{+parent}/gitLabConfigs",
                  "id": "cloudbuild.projects.locations.gitLabConfigs.list",
                  "response": {
                    "$ref": "ListGitLabConfigsResponse"
                  },
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000;, values above 1000 will be coerced to 1000.",
                      "type": "integer",
                      "location": "query"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Name of the parent resource",
                      "location": "path",
                      "type": "string",
                      "required": true
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A page token, received from a previous ‘ListGitlabConfigsRequest’ call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ‘ListGitlabConfigsRequest’ must match the call that provided the page token."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "List all `GitLabConfigs` for a given project. This API is experimental",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs"
                },
                "create": {
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+parent}/gitLabConfigs",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "GitLabConfig"
                  },
                  "id": "cloudbuild.projects.locations.gitLabConfigs.create",
                  "description": "Creates a new `GitLabConfig`. This API is experimental",
                  "parameters": {
                    "gitlabConfigId": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character"
                    },
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Name of the parent resource."
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ]
                }
              }
            }
          },
          "methods": {
            "getDefaultServiceAccount": {
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/defaultServiceAccount",
              "description": "Returns the `DefaultServiceAccount` used by the project.",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "id": "cloudbuild.projects.locations.getDefaultServiceAccount",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "description": "Required. The name of the `DefaultServiceAccount` to retrieve. Format: `projects/{project}/locations/{location}/defaultServiceAccount`",
                  "pattern": "^projects/[^/]+/locations/[^/]+/defaultServiceAccount$",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "path": "v1/{+name}",
              "response": {
                "$ref": "DefaultServiceAccount"
              }
            }
          }
        },
        "githubEnterpriseConfigs": {
          "methods": {
            "create": {
              "description": "Create an association between a GCP project and a GitHub Enterprise server.",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "parent": {
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string"
                },
                "gheConfigId": {
                  "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character",
                  "location": "query",
                  "type": "string"
                },
                "projectId": {
                  "deprecated": true,
                  "description": "ID of the project.",
                  "type": "string",
                  "location": "query"
                }
              },
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.githubEnterpriseConfigs.create",
              "httpMethod": "POST",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "parameterOrder": [
                "parent"
              ]
            },
            "delete": {
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "cloudbuild.projects.githubEnterpriseConfigs.delete",
              "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "configId": {
                  "deprecated": true,
                  "type": "string",
                  "location": "query",
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                },
                "name": {
                  "location": "path",
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "type": "string",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "required": true
                },
                "projectId": {
                  "location": "query",
                  "type": "string",
                  "description": "ID of the project",
                  "deprecated": true
                }
              },
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}"
            },
            "list": {
              "response": {
                "$ref": "ListGithubEnterpriseConfigsResponse"
              },
              "id": "cloudbuild.projects.githubEnterpriseConfigs.list",
              "httpMethod": "GET",
              "description": "List all GitHubEnterpriseConfigs for a given project.",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "projectId": {
                  "location": "query",
                  "type": "string",
                  "description": "ID of the project",
                  "deprecated": true
                },
                "parent": {
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/githubEnterpriseConfigs"
            },
            "patch": {
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "description": "Update an association between a GCP project and a GitHub Enterprise server.",
              "parameters": {
                "updateMask": {
                  "location": "query",
                  "type": "string",
                  "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                  "format": "google-fieldmask"
                },
                "name": {
                  "type": "string",
                  "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "location": "path",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "required": true
                }
              },
              "httpMethod": "PATCH",
              "path": "v1/{+name}",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.patch"
            },
            "get": {
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$"
                },
                "configId": {
                  "location": "query",
                  "type": "string",
                  "deprecated": true,
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                },
                "projectId": {
                  "location": "query",
                  "deprecated": true,
                  "description": "ID of the project",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.get",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "description": "Retrieve a GitHubEnterpriseConfig."
            }
          }
        },
        "triggers": {
          "methods": {
            "run": {
              "httpMethod": "POST",
              "description": "Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.",
              "id": "cloudbuild.projects.triggers.run",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "projectId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the project."
                },
                "triggerId": {
                  "description": "Required. ID of the trigger.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "name": {
                  "location": "query",
                  "type": "string",
                  "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                }
              },
              "request": {
                "$ref": "RepoSource"
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ]
            },
            "list": {
              "id": "cloudbuild.projects.triggers.list",
              "flatPath": "v1/projects/{projectId}/triggers",
              "parameterOrder": [
                "projectId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "parent": {
                  "location": "query",
                  "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string"
                },
                "projectId": {
                  "description": "Required. ID of the project for which to list BuildTriggers.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "location": "query",
                  "description": "Number of results to return in the list."
                }
              },
              "httpMethod": "GET",
              "path": "v1/projects/{projectId}/triggers",
              "description": "Lists existing `BuildTrigger`s.",
              "response": {
                "$ref": "ListBuildTriggersResponse"
              }
            },
            "create": {
              "parameterOrder": [
                "projectId"
              ],
              "path": "v1/projects/{projectId}/triggers",
              "flatPath": "v1/projects/{projectId}/triggers",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "BuildTrigger"
              },
              "id": "cloudbuild.projects.triggers.create",
              "response": {
                "$ref": "BuildTrigger"
              },
              "parameters": {
                "parent": {
                  "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`",
                  "type": "string",
                  "location": "query"
                },
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the project for which to configure automatic builds."
                }
              },
              "description": "Creates a new `BuildTrigger`."
            },
            "delete": {
              "response": {
                "$ref": "Empty"
              },
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes a `BuildTrigger` by its project ID and trigger ID.",
              "id": "cloudbuild.projects.triggers.delete",
              "parameters": {
                "triggerId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the `BuildTrigger` to delete."
                },
                "projectId": {
                  "required": true,
                  "description": "Required. ID of the project that owns the trigger.",
                  "type": "string",
                  "location": "path"
                },
                "name": {
                  "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "type": "string",
                  "location": "query"
                }
              },
              "httpMethod": "DELETE",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "path": "v1/projects/{projectId}/triggers/{triggerId}"
            },
            "patch": {
              "parameters": {
                "updateMask": {
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string",
                  "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed."
                },
                "triggerId": {
                  "description": "Required. ID of the `BuildTrigger` to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "projectId": {
                  "type": "string",
                  "location": "path",
                  "description": "Required. ID of the project that owns the trigger.",
                  "required": true
                }
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "httpMethod": "PATCH",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "response": {
                "$ref": "BuildTrigger"
              },
              "request": {
                "$ref": "BuildTrigger"
              },
              "id": "cloudbuild.projects.triggers.patch",
              "description": "Updates a `BuildTrigger` by its project ID and trigger ID.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "get": {
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "id": "cloudbuild.projects.triggers.get",
              "parameters": {
                "name": {
                  "location": "query",
                  "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "type": "string"
                },
                "projectId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the project that owns the trigger."
                },
                "triggerId": {
                  "type": "string",
                  "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "BuildTrigger"
              },
              "description": "Returns information about a `BuildTrigger`.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "webhook": {
              "response": {
                "$ref": "ReceiveTriggerWebhookResponse"
              },
              "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
              "flatPath": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "path": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "location": "query"
                },
                "secret": {
                  "description": "Secret token used for authorization if an OAuth token isn't provided.",
                  "location": "query",
                  "type": "string"
                },
                "trigger": {
                  "description": "Name of the trigger to run the payload against",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "projectId": {
                  "required": true,
                  "description": "Project in which the specified trigger lives",
                  "location": "path",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "HttpBody"
              },
              "parameterOrder": [
                "projectId",
                "trigger"
              ],
              "id": "cloudbuild.projects.triggers.webhook"
            }
          }
        }
      }
    },
    "operations": {
      "methods": {
        "cancel": {
          "flatPath": "v1/operations/{operationsId}:cancel",
          "id": "cloudbuild.operations.cancel",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "path": "v1/{+name}:cancel",
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "pattern": "^operations/.*$",
              "type": "string",
              "description": "The name of the operation resource to be cancelled.",
              "required": true,
              "location": "path"
            }
          },
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "response": {
            "$ref": "Empty"
          },
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "get": {
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "path": "v1/{+name}",
          "flatPath": "v1/operations/{operationsId}",
          "id": "cloudbuild.operations.get",
          "parameters": {
            "name": {
              "required": true,
              "description": "The name of the operation resource.",
              "type": "string",
              "location": "path",
              "pattern": "^operations/.*$"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Operation"
          }
        }
      }
    },
    "v1": {
      "methods": {
        "webhook": {
          "httpMethod": "POST",
          "id": "cloudbuild.webhook",
          "flatPath": "v1/webhook",
          "response": {
            "$ref": "Empty"
          },
          "parameters": {
            "webhookKey": {
              "type": "string",
              "location": "query",
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation."
            }
          },
          "description": "ReceiveWebhook is called when the API receives a GitHub webhook.",
          "path": "v1/webhook",
          "request": {
            "$ref": "HttpBody"
          },
          "parameterOrder": []
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "basePath": "",
  "servicePath": "",
  "ownerDomain": "google.com",
  "description": "Creates and manages builds on Google Cloud Platform."
}

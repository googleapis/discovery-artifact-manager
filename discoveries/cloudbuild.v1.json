{
  "version_module": true,
  "servicePath": "",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "parameters": {
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "location": "query",
      "default": "json"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "discoveryVersion": "v1",
  "batchPath": "batch",
  "ownerName": "Google",
  "protocol": "rest",
  "version": "v1",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "id": "cloudbuild:v1",
  "resources": {
    "projects": {
      "resources": {
        "triggers": {
          "methods": {
            "webhook": {
              "flatPath": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "query",
                  "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                },
                "secret": {
                  "type": "string",
                  "description": "Secret token used for authorization if an OAuth token isn't provided.",
                  "location": "query"
                },
                "projectId": {
                  "description": "Project in which the specified trigger lives",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "trigger": {
                  "required": true,
                  "description": "Name of the trigger to run the payload against",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "request": {
                "$ref": "HttpBody"
              },
              "parameterOrder": [
                "projectId",
                "trigger"
              ],
              "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
              "httpMethod": "POST",
              "id": "cloudbuild.projects.triggers.webhook",
              "response": {
                "$ref": "ReceiveTriggerWebhookResponse"
              }
            },
            "run": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.",
              "httpMethod": "POST",
              "request": {
                "$ref": "RepoSource"
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "parameters": {
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project.",
                  "required": true
                },
                "name": {
                  "type": "string",
                  "location": "query",
                  "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                },
                "triggerId": {
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the trigger.",
                  "type": "string"
                }
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "id": "cloudbuild.projects.triggers.run",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "response": {
                "$ref": "Operation"
              }
            },
            "patch": {
              "response": {
                "$ref": "BuildTrigger"
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "updateMask": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query",
                  "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed."
                },
                "triggerId": {
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the `BuildTrigger` to update.",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "BuildTrigger"
              },
              "id": "cloudbuild.projects.triggers.patch",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "httpMethod": "PATCH"
            },
            "list": {
              "httpMethod": "GET",
              "id": "cloudbuild.projects.triggers.list",
              "response": {
                "$ref": "ListBuildTriggersResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/projects/{projectId}/triggers",
              "parameters": {
                "projectId": {
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the project for which to list BuildTriggers.",
                  "type": "string"
                },
                "parent": {
                  "location": "query",
                  "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Number of results to return in the list.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string",
                  "location": "query"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "flatPath": "v1/projects/{projectId}/triggers",
              "description": "Lists existing `BuildTrigger`s. This API is experimental."
            },
            "get": {
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "description": "Returns information about a `BuildTrigger`. This API is experimental.",
              "response": {
                "$ref": "BuildTrigger"
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "parameters": {
                "name": {
                  "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "type": "string",
                  "location": "query"
                },
                "triggerId": {
                  "required": true,
                  "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                  "location": "path",
                  "type": "string"
                },
                "projectId": {
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the project that owns the trigger.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "httpMethod": "GET",
              "id": "cloudbuild.projects.triggers.get"
            },
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "parent": {
                  "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`",
                  "location": "query",
                  "type": "string"
                },
                "projectId": {
                  "required": true,
                  "description": "Required. ID of the project for which to configure automatic builds.",
                  "type": "string",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "httpMethod": "POST",
              "id": "cloudbuild.projects.triggers.create",
              "description": "Creates a new `BuildTrigger`. This API is experimental.",
              "flatPath": "v1/projects/{projectId}/triggers",
              "response": {
                "$ref": "BuildTrigger"
              },
              "path": "v1/projects/{projectId}/triggers",
              "request": {
                "$ref": "BuildTrigger"
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project that owns the trigger.",
                  "required": true
                },
                "triggerId": {
                  "type": "string",
                  "description": "Required. ID of the `BuildTrigger` to delete.",
                  "location": "path",
                  "required": true
                },
                "name": {
                  "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "type": "string",
                  "location": "query"
                }
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "id": "cloudbuild.projects.triggers.delete"
            }
          }
        },
        "builds": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "response": {
                "$ref": "ListBuildsResponse"
              },
              "id": "cloudbuild.projects.builds.list",
              "parameters": {
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`"
                },
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "location": "query",
                  "description": "Number of results to return in the list."
                },
                "filter": {
                  "description": "The raw filter text to constrain the results.",
                  "location": "query",
                  "type": "string"
                },
                "projectId": {
                  "required": true,
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "type": "string"
                },
                "pageToken": {
                  "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
              "path": "v1/projects/{projectId}/builds",
              "flatPath": "v1/projects/{projectId}/builds"
            },
            "approve": {
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                  "required": true,
                  "pattern": "^projects/[^/]+/builds/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:approve",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectsId}/builds/{buildsId}:approve",
              "response": {
                "$ref": "Operation"
              },
              "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
              "httpMethod": "POST",
              "id": "cloudbuild.projects.builds.approve",
              "request": {
                "$ref": "ApproveBuildRequest"
              }
            },
            "retry": {
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudbuild.projects.builds.retry",
              "httpMethod": "POST",
              "request": {
                "$ref": "RetryBuildRequest"
              },
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "id": {
                  "description": "Required. Build ID of the original build.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
              "flatPath": "v1/projects/{projectId}/builds/{id}:retry",
              "path": "v1/projects/{projectId}/builds/{id}:retry",
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "get": {
              "path": "v1/projects/{projectId}/builds/{id}",
              "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
              "response": {
                "$ref": "Build"
              },
              "parameters": {
                "name": {
                  "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                  "type": "string",
                  "location": "query"
                },
                "id": {
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the build.",
                  "type": "string"
                },
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the project."
                }
              },
              "id": "cloudbuild.projects.builds.get",
              "flatPath": "v1/projects/{projectId}/builds/{id}",
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "create": {
              "request": {
                "$ref": "Build"
              },
              "path": "v1/projects/{projectId}/builds",
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudbuild.projects.builds.create",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "projectId"
              ],
              "flatPath": "v1/projects/{projectId}/builds",
              "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
              "parameters": {
                "projectId": {
                  "location": "path",
                  "description": "Required. ID of the project.",
                  "required": true,
                  "type": "string"
                },
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
                }
              }
            },
            "cancel": {
              "flatPath": "v1/projects/{projectId}/builds/{id}:cancel",
              "request": {
                "$ref": "CancelBuildRequest"
              },
              "id": "cloudbuild.projects.builds.cancel",
              "parameters": {
                "id": {
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the build.",
                  "location": "path"
                },
                "projectId": {
                  "location": "path",
                  "description": "Required. ID of the project.",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "description": "Cancels a build in progress.",
              "response": {
                "$ref": "Build"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "path": "v1/projects/{projectId}/builds/{id}:cancel"
            }
          }
        },
        "githubEnterpriseConfigs": {
          "methods": {
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "description": "Create an association between a GCP project and a GitHub Enterprise server.",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "parameterOrder": [
                "parent"
              ],
              "id": "cloudbuild.projects.githubEnterpriseConfigs.create",
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "parameters": {
                "projectId": {
                  "type": "string",
                  "deprecated": true,
                  "location": "query",
                  "description": "ID of the project."
                },
                "gheConfigId": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character"
                },
                "parent": {
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Operation"
              }
            },
            "delete": {
              "parameters": {
                "configId": {
                  "location": "query",
                  "deprecated": true,
                  "type": "string",
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                },
                "projectId": {
                  "description": "ID of the project",
                  "location": "query",
                  "type": "string",
                  "deprecated": true
                },
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "type": "string",
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.delete",
              "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "httpMethod": "GET",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.list",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                  "required": true
                },
                "projectId": {
                  "type": "string",
                  "description": "ID of the project",
                  "deprecated": true,
                  "location": "query"
                }
              },
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "response": {
                "$ref": "ListGithubEnterpriseConfigsResponse"
              },
              "description": "List all GitHubEnterpriseConfigs for a given project.",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "required": true
                },
                "updateMask": {
                  "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                  "format": "google-fieldmask",
                  "location": "query",
                  "type": "string"
                }
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "description": "Update an association between a GCP project and a GitHub Enterprise server.",
              "path": "v1/{+name}",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.patch",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "get": {
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "type": "string",
                  "required": true
                },
                "projectId": {
                  "type": "string",
                  "description": "ID of the project",
                  "deprecated": true,
                  "location": "query"
                },
                "configId": {
                  "type": "string",
                  "location": "query",
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                  "deprecated": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Retrieve a GitHubEnterpriseConfig.",
              "httpMethod": "GET",
              "response": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+name}",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.get"
            }
          }
        },
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.operations.get",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource.",
                      "location": "path"
                    }
                  }
                },
                "cancel": {
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "path": "v1/{+name}:cancel",
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "The name of the operation resource to be cancelled."
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            },
            "githubEnterpriseConfigs": {
              "methods": {
                "list": {
                  "parameters": {
                    "projectId": {
                      "location": "query",
                      "deprecated": true,
                      "type": "string",
                      "description": "ID of the project"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}"
                    }
                  },
                  "httpMethod": "GET",
                  "description": "List all GitHubEnterpriseConfigs for a given project.",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "response": {
                    "$ref": "ListGithubEnterpriseConfigsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.delete",
                  "parameters": {
                    "configId": {
                      "location": "query",
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                      "type": "string",
                      "deprecated": true
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                      "required": true
                    },
                    "projectId": {
                      "description": "ID of the project",
                      "location": "query",
                      "type": "string",
                      "deprecated": true
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
                  "httpMethod": "DELETE"
                },
                "get": {
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.get",
                  "parameters": {
                    "configId": {
                      "location": "query",
                      "type": "string",
                      "deprecated": true,
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                    },
                    "name": {
                      "location": "path",
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "type": "string",
                      "required": true
                    },
                    "projectId": {
                      "description": "ID of the project",
                      "type": "string",
                      "location": "query",
                      "deprecated": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Retrieve a GitHubEnterpriseConfig.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "response": {
                    "$ref": "GitHubEnterpriseConfig"
                  }
                },
                "patch": {
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Update an association between a GCP project and a GitHub Enterprise server.",
                  "path": "v1/{+name}",
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "PATCH",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.patch"
                },
                "create": {
                  "httpMethod": "POST",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.create",
                  "parameters": {
                    "projectId": {
                      "type": "string",
                      "description": "ID of the project.",
                      "deprecated": true,
                      "location": "query"
                    },
                    "gheConfigId": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character"
                    },
                    "parent": {
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Create an association between a GCP project and a GitHub Enterprise server.",
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "parameterOrder": [
                    "parent"
                  ]
                }
              }
            },
            "bitbucketServerConfigs": {
              "resources": {
                "connectedRepositories": {
                  "methods": {
                    "batchCreate": {
                      "path": "v1/{+parent}/connectedRepositories:batchCreate",
                      "response": {
                        "$ref": "Operation"
                      },
                      "id": "cloudbuild.projects.locations.bitbucketServerConfigs.connectedRepositories.batchCreate",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                          "required": true
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/connectedRepositories:batchCreate",
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "BatchCreateBitbucketServerConnectedRepositoriesRequest"
                      },
                      "description": "Batch connecting Bitbucket Server repositories to Cloud Build."
                    }
                  }
                },
                "repos": {
                  "methods": {
                    "list": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/repos",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "description": "The maximum number of configs to return. The service may return fewer than this value. The maximum value is 1000; values above 1000 will be coerced to 1000.",
                          "format": "int32"
                        },
                        "parent": {
                          "required": true,
                          "type": "string",
                          "location": "path",
                          "description": "Required. Name of the parent resource.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "A page token, received from a previous `ListBitbucketServerRepositoriesRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBitbucketServerConfigsRequest` must match the call that provided the page token.",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "ListBitbucketServerRepositoriesResponse"
                      },
                      "description": "List all repositories for a given `BitbucketServerConfig`. This API is experimental.",
                      "path": "v1/{+parent}/repos",
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "id": "cloudbuild.projects.locations.bitbucketServerConfigs.repos.list"
                    }
                  }
                }
              },
              "methods": {
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListBitbucketServerConfigsResponse"
                  },
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.list",
                  "httpMethod": "GET",
                  "parameters": {
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "description": "The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.",
                      "type": "integer"
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "A page token, received from a previous `ListBitbucketServerConfigsRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBitbucketServerConfigsRequest` must match the call that provided the page token.",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. Name of the parent resource.",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string"
                    }
                  },
                  "description": "List all `BitbucketServerConfigs` for a given project. This API is experimental.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs",
                  "path": "v1/{+parent}/bitbucketServerConfigs",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.patch",
                  "request": {
                    "$ref": "BitbucketServerConfig"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Updates an existing `BitbucketServerConfig`. This API is experimental.",
                  "parameters": {
                    "updateMask": {
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string",
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed."
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                      "description": "The resource name for the config.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "httpMethod": "PATCH",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ]
                },
                "delete": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Delete a `BitbucketServerConfig`. This API is experimental.",
                  "path": "v1/{+name}",
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                      "description": "Required. The config resource name.",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.delete",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}"
                },
                "create": {
                  "request": {
                    "$ref": "BitbucketServerConfig"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/bitbucketServerConfigs",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.create",
                  "description": "Creates a new `BitbucketServerConfig`. This API is experimental.",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Name of the parent resource.",
                      "required": true,
                      "location": "path"
                    },
                    "bitbucketServerConfigId": {
                      "location": "query",
                      "type": "string",
                      "description": "Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character."
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs"
                },
                "removeBitbucketServerConnectedRepository": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "config"
                  ],
                  "request": {
                    "$ref": "RemoveBitbucketServerConnectedRepositoryRequest"
                  },
                  "httpMethod": "POST",
                  "parameters": {
                    "config": {
                      "location": "path",
                      "description": "Required. The name of the `BitbucketServerConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Remove a Bitbucket Server repository from a given BitbucketServerConfig's connected repositories. This API is experimental.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}:removeBitbucketServerConnectedRepository",
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository",
                  "path": "v1/{+config}:removeBitbucketServerConnectedRepository"
                },
                "get": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
                      "required": true,
                      "location": "path",
                      "description": "Required. The config resource name.",
                      "type": "string"
                    }
                  },
                  "id": "cloudbuild.projects.locations.bitbucketServerConfigs.get",
                  "description": "Retrieve a `BitbucketServerConfig`. This API is experimental.",
                  "response": {
                    "$ref": "BitbucketServerConfig"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            },
            "builds": {
              "methods": {
                "approve": {
                  "path": "v1/{+name}:approve",
                  "request": {
                    "$ref": "ApproveBuildRequest"
                  },
                  "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "cloudbuild.projects.locations.builds.approve",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:approve",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST"
                },
                "create": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "Build"
                  },
                  "parameters": {
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
                    }
                  },
                  "path": "v1/{+parent}/builds",
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "id": "cloudbuild.projects.locations.builds.create",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`)."
                },
                "get": {
                  "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
                  "path": "v1/{+name}",
                  "id": "cloudbuild.projects.locations.builds.get",
                  "response": {
                    "$ref": "Build"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the project."
                    },
                    "name": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`"
                    },
                    "id": {
                      "description": "Required. ID of the build.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET"
                },
                "cancel": {
                  "path": "v1/{+name}:cancel",
                  "description": "Cancels a build in progress.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "required": true
                    }
                  },
                  "request": {
                    "$ref": "CancelBuildRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Build"
                  },
                  "id": "cloudbuild.projects.locations.builds.cancel"
                },
                "retry": {
                  "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "POST",
                  "path": "v1/{+name}:retry",
                  "request": {
                    "$ref": "RetryBuildRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "type": "string"
                    }
                  },
                  "id": "cloudbuild.projects.locations.builds.retry"
                },
                "list": {
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The raw filter text to constrain the results."
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the project."
                    },
                    "parent": {
                      "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more."
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "Number of results to return in the list.",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListBuildsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/builds",
                  "id": "cloudbuild.projects.locations.builds.list",
                  "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
                  "parameterOrder": [
                    "parent"
                  ]
                }
              }
            },
            "workerPools": {
              "methods": {
                "list": {
                  "response": {
                    "$ref": "ListWorkerPoolsResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.list",
                  "path": "v1/{+parent}/workerPools",
                  "description": "Lists `WorkerPool`s.",
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "A page token, received from a previous `ListWorkerPools` call. Provide this to retrieve the subsequent page.",
                      "location": "query"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "type": "integer",
                      "description": "The maximum number of `WorkerPool`s to return. The service may return fewer than this value. If omitted, the server will use a sensible default."
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/{location}`.",
                      "location": "path"
                    }
                  }
                },
                "get": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`."
                    }
                  },
                  "path": "v1/{+name}",
                  "description": "Returns details of a `WorkerPool`.",
                  "id": "cloudbuild.projects.locations.workerPools.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "WorkerPool"
                  }
                },
                "patch": {
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "location": "path",
                      "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
                      "type": "string"
                    },
                    "updateMask": {
                      "location": "query",
                      "description": "A mask specifying which fields in `worker_pool` to update.",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "validateOnly": {
                      "location": "query",
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "type": "boolean"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "id": "cloudbuild.projects.locations.workerPools.patch",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+name}",
                  "httpMethod": "PATCH",
                  "description": "Updates a `WorkerPool`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "create": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.create",
                  "httpMethod": "POST",
                  "path": "v1/{+parent}/workerPools",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a `WorkerPool`.",
                  "parameters": {
                    "workerPoolId": {
                      "description": "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "validateOnly": {
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "type": "boolean",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "request": {
                    "$ref": "WorkerPool"
                  }
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.",
                      "location": "path"
                    },
                    "allowMissing": {
                      "location": "query",
                      "description": "If set to true, and the `WorkerPool` is not found, the request will succeed but no action will be taken on the server.",
                      "type": "boolean"
                    },
                    "etag": {
                      "location": "query",
                      "description": "Optional. If provided, it must match the server's etag on the workerpool for the request to be processed.",
                      "type": "string"
                    },
                    "validateOnly": {
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "type": "boolean",
                      "location": "query"
                    }
                  },
                  "id": "cloudbuild.projects.locations.workerPools.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes a `WorkerPool`.",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}"
                }
              }
            },
            "gitLabConfigs": {
              "methods": {
                "create": {
                  "path": "v1/{+parent}/gitLabConfigs",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs",
                  "httpMethod": "POST",
                  "id": "cloudbuild.projects.locations.gitLabConfigs.create",
                  "description": "Creates a new `GitLabConfig`. This API is experimental",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "Required. Name of the parent resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "gitlabConfigId": {
                      "description": "Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "GitLabConfig"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.gitLabConfigs.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The config resource name.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}",
                  "description": "Delete a `GitLabConfig`. This API is experimental"
                },
                "get": {
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "id": "cloudbuild.projects.locations.gitLabConfigs.get",
                  "parameters": {
                    "name": {
                      "description": "Required. The config resource name.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}",
                  "description": "Retrieves a `GitLabConfig`. This API is experimental",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GitLabConfig"
                  }
                },
                "list": {
                  "path": "v1/{+parent}/gitLabConfigs",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "location": "query",
                      "description": "The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000;, values above 1000 will be coerced to 1000.",
                      "type": "integer"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Name of the parent resource",
                      "type": "string",
                      "location": "path",
                      "required": true
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "A page token, received from a previous ‘ListGitlabConfigsRequest’ call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ‘ListGitlabConfigsRequest’ must match the call that provided the page token."
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs",
                  "id": "cloudbuild.projects.locations.gitLabConfigs.list",
                  "httpMethod": "GET",
                  "description": "List all `GitLabConfigs` for a given project. This API is experimental",
                  "response": {
                    "$ref": "ListGitLabConfigsResponse"
                  }
                },
                "removeGitLabConnectedRepository": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "POST",
                  "id": "cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+config}:removeGitLabConnectedRepository",
                  "description": "Remove a GitLab repository from a given GitLabConfig's connected repositories. This API is experimental.",
                  "request": {
                    "$ref": "RemoveGitLabConnectedRepositoryRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}:removeGitLabConnectedRepository",
                  "parameterOrder": [
                    "config"
                  ],
                  "parameters": {
                    "config": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "Required. The name of the `GitLabConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$"
                    }
                  }
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.gitLabConfigs.patch",
                  "path": "v1/{+name}",
                  "httpMethod": "PATCH",
                  "request": {
                    "$ref": "GitLabConfig"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Updates an existing `GitLabConfig`. This API is experimental",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}",
                  "parameters": {
                    "updateMask": {
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "type": "string",
                      "location": "query",
                      "format": "google-fieldmask"
                    },
                    "name": {
                      "description": "The resource name for the config.",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$"
                    }
                  }
                }
              },
              "resources": {
                "repos": {
                  "methods": {
                    "list": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/repos",
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "description": "The maximum number of repositories to return. The service may return fewer than this value.",
                          "location": "query",
                          "type": "integer"
                        },
                        "parent": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
                          "location": "path",
                          "description": "Required. Name of the parent resource.",
                          "type": "string"
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "A page token, received from a previous ListGitLabRepositoriesRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListGitLabRepositoriesRequest` must match the call that provided the page token.",
                          "location": "query"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "path": "v1/{+parent}/repos",
                      "response": {
                        "$ref": "ListGitLabRepositoriesResponse"
                      },
                      "id": "cloudbuild.projects.locations.gitLabConfigs.repos.list",
                      "description": "List all repositories for a given `GitLabConfig`. This API is experimental",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  }
                },
                "connectedRepositories": {
                  "methods": {
                    "batchCreate": {
                      "path": "v1/{+parent}/connectedRepositories:batchCreate",
                      "description": "Batch connecting GitLab repositories to Cloud Build. This API is experimental.",
                      "httpMethod": "POST",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/connectedRepositories:batchCreate",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
                          "description": "The name of the `GitLabConfig` that adds connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
                        }
                      },
                      "id": "cloudbuild.projects.locations.gitLabConfigs.connectedRepositories.batchCreate",
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "BatchCreateGitLabConnectedRepositoriesRequest"
                      }
                    }
                  }
                }
              }
            },
            "triggers": {
              "methods": {
                "webhook": {
                  "request": {
                    "$ref": "HttpBody"
                  },
                  "id": "cloudbuild.projects.locations.triggers.webhook",
                  "parameters": {
                    "secret": {
                      "description": "Secret token used for authorization if an OAuth token isn't provided.",
                      "location": "query",
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Project in which the specified trigger lives"
                    },
                    "trigger": {
                      "type": "string",
                      "location": "query",
                      "description": "Name of the trigger to run the payload against"
                    },
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ReceiveTriggerWebhookResponse"
                  },
                  "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
                  "path": "v1/{+name}:webhook",
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:webhook"
                },
                "create": {
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "description": "Creates a new `BuildTrigger`. This API is experimental.",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/triggers",
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "parameters": {
                    "projectId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. ID of the project for which to configure automatic builds."
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.create",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers"
                },
                "run": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "RunBuildTriggerRequest"
                  },
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "location": "path"
                    }
                  },
                  "path": "v1/{+name}:run",
                  "id": "cloudbuild.projects.locations.triggers.run",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:run"
                },
                "delete": {
                  "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "triggerId": {
                      "description": "Required. ID of the `BuildTrigger` to delete.",
                      "location": "query",
                      "type": "string"
                    },
                    "projectId": {
                      "location": "query",
                      "description": "Required. ID of the project that owns the trigger.",
                      "type": "string"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                    }
                  },
                  "path": "v1/{+name}",
                  "id": "cloudbuild.projects.locations.triggers.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE"
                },
                "list": {
                  "description": "Lists existing `BuildTrigger`s. This API is experimental.",
                  "parameters": {
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the project for which to list BuildTriggers."
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`",
                      "type": "string",
                      "location": "path",
                      "required": true
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "Token to provide to skip to a particular spot in the list."
                    },
                    "pageSize": {
                      "format": "int32",
                      "type": "integer",
                      "location": "query",
                      "description": "Number of results to return in the list."
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListBuildTriggersResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
                  "path": "v1/{+parent}/triggers",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.list"
                },
                "get": {
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "id": "cloudbuild.projects.locations.triggers.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "path": "v1/{+name}",
                  "parameters": {
                    "triggerId": {
                      "type": "string",
                      "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                      "location": "query"
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "required": true,
                      "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "type": "string"
                    },
                    "projectId": {
                      "description": "Required. ID of the project that owns the trigger.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "description": "Returns information about a `BuildTrigger`. This API is experimental.",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "patch": {
                  "httpMethod": "PATCH",
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "parameterOrder": [
                    "resourceName"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.patch",
                  "parameters": {
                    "projectId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. ID of the project that owns the trigger."
                    },
                    "resourceName": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
                    },
                    "triggerId": {
                      "description": "Required. ID of the `BuildTrigger` to update.",
                      "type": "string",
                      "location": "query"
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "type": "string",
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+resourceName}"
                }
              }
            }
          }
        }
      }
    },
    "githubDotComWebhook": {
      "methods": {
        "receive": {
          "id": "cloudbuild.githubDotComWebhook.receive",
          "path": "v1/githubDotComWebhook:receive",
          "flatPath": "v1/githubDotComWebhook:receive",
          "request": {
            "$ref": "HttpBody"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "response": {
            "$ref": "Empty"
          },
          "description": "ReceiveGitHubDotComWebhook is called when the API receives a github.com webhook.",
          "parameters": {
            "webhookKey": {
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
              "location": "query",
              "type": "string"
            }
          }
        }
      }
    },
    "operations": {
      "methods": {
        "get": {
          "flatPath": "v1/operations/{operationsId}",
          "parameters": {
            "name": {
              "location": "path",
              "description": "The name of the operation resource.",
              "type": "string",
              "required": true,
              "pattern": "^operations/.*$"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "id": "cloudbuild.operations.get",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v1/{+name}",
          "response": {
            "$ref": "Operation"
          },
          "httpMethod": "GET",
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
        },
        "cancel": {
          "path": "v1/{+name}:cancel",
          "id": "cloudbuild.operations.cancel",
          "httpMethod": "POST",
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "flatPath": "v1/operations/{operationsId}:cancel",
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Empty"
          },
          "parameters": {
            "name": {
              "description": "The name of the operation resource to be cancelled.",
              "type": "string",
              "pattern": "^operations/.*$",
              "location": "path",
              "required": true
            }
          }
        }
      }
    },
    "locations": {
      "methods": {
        "regionalWebhook": {
          "flatPath": "v1/locations/{locationsId}/regionalWebhook",
          "response": {
            "$ref": "Empty"
          },
          "request": {
            "$ref": "HttpBody"
          },
          "parameters": {
            "location": {
              "pattern": "^locations/[^/]+$",
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Required. The location where the webhook should be sent."
            },
            "webhookKey": {
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
              "location": "query",
              "type": "string"
            }
          },
          "path": "v1/{+location}/regionalWebhook",
          "httpMethod": "POST",
          "description": "ReceiveRegionalWebhook is called when the API receives a regional GitHub webhook.",
          "parameterOrder": [
            "location"
          ],
          "id": "cloudbuild.locations.regionalWebhook"
        }
      }
    },
    "v1": {
      "methods": {
        "webhook": {
          "parameters": {
            "webhookKey": {
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
              "location": "query",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Empty"
          },
          "description": "ReceiveWebhook is called when the API receives a GitHub webhook.",
          "request": {
            "$ref": "HttpBody"
          },
          "flatPath": "v1/webhook",
          "parameterOrder": [],
          "httpMethod": "POST",
          "id": "cloudbuild.webhook",
          "path": "v1/webhook"
        }
      }
    }
  },
  "name": "cloudbuild",
  "schemas": {
    "PullRequestFilter": {
      "properties": {
        "commentControl": {
          "description": "Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.",
          "enum": [
            "COMMENTS_DISABLED",
            "COMMENTS_ENABLED",
            "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Do not require comments on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on external contributors' Pull Requests before builds are triggered."
          ]
        },
        "branch": {
          "type": "string",
          "description": "Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "If true, branches that do NOT match the git_ref will trigger a build."
        }
      },
      "type": "object",
      "id": "PullRequestFilter",
      "description": "PullRequestFilter contains filter properties for matching GitHub Pull Requests."
    },
    "StorageSource": {
      "type": "object",
      "properties": {
        "generation": {
          "description": "Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        },
        "object": {
          "type": "string",
          "description": "Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build."
        },
        "bucket": {
          "type": "string",
          "description": "Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "description": "Location of the source in an archive file in Cloud Storage.",
      "id": "StorageSource"
    },
    "Warning": {
      "properties": {
        "priority": {
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "description": "The priority for this warning.",
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Explanation of the warning generated."
        }
      },
      "id": "Warning",
      "type": "object",
      "description": "A non-fatal problem encountered during the execution of the build."
    },
    "PythonPackage": {
      "description": "Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.",
      "properties": {
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY\" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix."
        },
        "paths": {
          "description": "Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "PythonPackage"
    },
    "GitFileSource": {
      "type": "object",
      "description": "GitFileSource describes a file within a (possibly remote) code repository.",
      "id": "GitFileSource",
      "properties": {
        "path": {
          "description": "The path of the file, with the repo root as the root of the path.",
          "type": "string"
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`."
        },
        "revision": {
          "description": "The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.",
          "type": "string"
        },
        "bitbucketServerConfig": {
          "type": "string",
          "description": "The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`."
        },
        "repository": {
          "description": "The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        },
        "repoType": {
          "enumDescriptions": [
            "The default, unknown repo type. Don't use it, instead use one of the other repo types.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise).",
            "A Bitbucket Server-hosted repo.",
            "A GitLab-hosted repo."
          ],
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB",
            "BITBUCKET_SERVER",
            "GITLAB"
          ],
          "type": "string",
          "description": "See RepoType above."
        },
        "uri": {
          "description": "The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        }
      }
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "properties": {
        "endTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time the operation finished running.",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "apiVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. API version used to start the operation."
        },
        "statusDetail": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        },
        "cancelRequested": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Server-defined resource path for the target of the operation."
        }
      },
      "description": "Represents the metadata of the long-running operation.",
      "type": "object"
    },
    "ListWorkerPoolsResponse": {
      "id": "ListWorkerPoolsResponse",
      "description": "Response containing existing `WorkerPools`.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results.",
          "type": "string"
        },
        "workerPools": {
          "items": {
            "$ref": "WorkerPool"
          },
          "type": "array",
          "description": "`WorkerPools` for the specified project."
        }
      }
    },
    "PrivatePoolV1Config": {
      "description": "Configuration for a V1 `PrivatePool`.",
      "id": "PrivatePoolV1Config",
      "properties": {
        "networkConfig": {
          "$ref": "NetworkConfig",
          "description": "Network configuration for the pool."
        },
        "workerConfig": {
          "description": "Machine configuration for the workers in the pool.",
          "$ref": "WorkerConfig"
        }
      },
      "type": "object"
    },
    "UpdateWorkerPoolOperationMetadata": {
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "UpdateWorkerPoolOperationMetadata",
      "description": "Metadata for the `UpdateWorkerPool` operation.",
      "type": "object"
    },
    "GitLabConnectedRepository": {
      "properties": {
        "parent": {
          "type": "string",
          "description": "The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
        },
        "repo": {
          "$ref": "GitLabRepositoryId",
          "description": "The GitLab repositories to connect."
        },
        "status": {
          "description": "Output only. The status of the repo connection request.",
          "readOnly": true,
          "$ref": "Status"
        }
      },
      "type": "object",
      "description": "GitLabConnectedRepository represents a GitLab connected repository request response.",
      "id": "GitLabConnectedRepository"
    },
    "ListBuildTriggersResponse": {
      "description": "Response containing existing `BuildTriggers`.",
      "properties": {
        "triggers": {
          "type": "array",
          "description": "`BuildTriggers` for the project, sorted by `create_time` descending.",
          "items": {
            "$ref": "BuildTrigger"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to receive the next page of results."
        }
      },
      "id": "ListBuildTriggersResponse",
      "type": "object"
    },
    "GitRepoSource": {
      "description": "GitRepoSource describes a repo and ref of a code repository.",
      "properties": {
        "repoType": {
          "description": "See RepoType below.",
          "enumDescriptions": [
            "The default, unknown repo type. Don't use it, instead use one of the other repo types.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise).",
            "A Bitbucket Server-hosted repo.",
            "A GitLab-hosted repo."
          ],
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB",
            "BITBUCKET_SERVER",
            "GITLAB"
          ],
          "type": "string"
        },
        "repository": {
          "description": "The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.",
          "type": "string"
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`."
        },
        "bitbucketServerConfig": {
          "description": "The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.",
          "type": "string"
        },
        "ref": {
          "type": "string",
          "description": "The branch or tag to use. Must start with \"refs/\" (required)."
        }
      },
      "id": "GitRepoSource",
      "type": "object"
    },
    "DeleteWorkerPoolOperationMetadata": {
      "properties": {
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        },
        "workerPool": {
          "type": "string",
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
        }
      },
      "description": "Metadata for the `DeleteWorkerPool` operation.",
      "id": "DeleteWorkerPoolOperationMetadata",
      "type": "object"
    },
    "ConnectedRepository": {
      "properties": {
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build.",
          "type": "string"
        },
        "revision": {
          "type": "string",
          "description": "The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref."
        },
        "repository": {
          "type": "string",
          "description": "Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`."
        }
      },
      "description": "Location of the source in a 2nd-gen Google Cloud Build repository resource.",
      "type": "object",
      "id": "ConnectedRepository"
    },
    "CreateWorkerPoolOperationMetadata": {
      "type": "object",
      "description": "Metadata for the `CreateWorkerPool` operation.",
      "id": "CreateWorkerPoolOperationMetadata",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        }
      }
    },
    "Source": {
      "properties": {
        "gitSource": {
          "description": "If provided, get the source from this Git repository.",
          "$ref": "GitSource"
        },
        "storageSourceManifest": {
          "description": "If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
          "$ref": "StorageSourceManifest"
        },
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        },
        "storageSource": {
          "$ref": "StorageSource",
          "description": "If provided, get the source from this location in Cloud Storage."
        },
        "connectedRepository": {
          "$ref": "ConnectedRepository",
          "description": "Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource."
        }
      },
      "id": "Source",
      "type": "object",
      "description": "Location of the source in a supported storage service."
    },
    "Volume": {
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "type": "object",
      "id": "Volume",
      "properties": {
        "name": {
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.",
          "type": "string"
        },
        "path": {
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.",
          "type": "string"
        }
      }
    },
    "CreateBitbucketServerConnectedRepositoryRequest": {
      "properties": {
        "parent": {
          "type": "string",
          "description": "Required. The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`"
        },
        "bitbucketServerConnectedRepository": {
          "description": "Required. The Bitbucket Server repository to connect.",
          "$ref": "BitbucketServerConnectedRepository"
        }
      },
      "description": "Request to connect a repository from a connected Bitbucket Server host.",
      "id": "CreateBitbucketServerConnectedRepositoryRequest",
      "type": "object"
    },
    "UpdateGitLabConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.",
          "type": "string"
        }
      },
      "description": "Metadata for `UpdateGitLabConfig` operation.",
      "id": "UpdateGitLabConfigOperationMetadata"
    },
    "RemoveBitbucketServerConnectedRepositoryRequest": {
      "description": "RPC request object accepted by RemoveBitbucketServerConnectedRepository RPC method.",
      "type": "object",
      "id": "RemoveBitbucketServerConnectedRepositoryRequest",
      "properties": {
        "connectedRepository": {
          "description": "The connected repository to remove.",
          "$ref": "BitbucketServerRepositoryId"
        }
      }
    },
    "ListBitbucketServerConfigsResponse": {
      "type": "object",
      "description": "RPC response object returned by ListBitbucketServerConfigs RPC method.",
      "id": "ListBitbucketServerConfigsResponse",
      "properties": {
        "bitbucketServerConfigs": {
          "items": {
            "$ref": "BitbucketServerConfig"
          },
          "type": "array",
          "description": "A list of BitbucketServerConfigs"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      }
    },
    "BatchCreateGitLabConnectedRepositoriesRequest": {
      "description": "RPC request object accepted by BatchCreateGitLabConnectedRepositories RPC method.",
      "type": "object",
      "properties": {
        "requests": {
          "description": "Required. Requests to connect GitLab repositories.",
          "items": {
            "$ref": "CreateGitLabConnectedRepositoryRequest"
          },
          "type": "array"
        }
      },
      "id": "BatchCreateGitLabConnectedRepositoriesRequest"
    },
    "GitLabRepositoryId": {
      "id": "GitLabRepositoryId",
      "description": "GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise",
      "type": "object",
      "properties": {
        "webhookId": {
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "type": "integer",
          "readOnly": true,
          "format": "int32"
        },
        "id": {
          "type": "string",
          "description": "Required. Identifier for the repository. example: \"namespace/project-slug\", namespace is usually the username or group ID"
        }
      }
    },
    "DeleteGitHubEnterpriseConfigOperationMetadata": {
      "id": "DeleteGitHubEnterpriseConfigOperationMetadata",
      "type": "object",
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      },
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation."
    },
    "UploadedNpmPackage": {
      "description": "An npm package uploaded to Artifact Registry using the NpmPackage directive.",
      "properties": {
        "uri": {
          "description": "URI of the uploaded npm package.",
          "type": "string"
        },
        "fileHashes": {
          "description": "Hash types and values of the npm package.",
          "$ref": "FileHashes"
        },
        "pushTiming": {
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "$ref": "TimeSpan"
        }
      },
      "id": "UploadedNpmPackage",
      "type": "object"
    },
    "CreateGitLabConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        }
      },
      "id": "CreateGitLabConfigOperationMetadata",
      "description": "Metadata for `CreateGitLabConfig` operation."
    },
    "BuildStep": {
      "id": "BuildStep",
      "properties": {
        "timeout": {
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string",
          "format": "google-duration"
        },
        "secretEnv": {
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exitCode": {
          "description": "Output only. Return code from running the step.",
          "readOnly": true,
          "format": "int32",
          "type": "integer"
        },
        "automapSubstitutions": {
          "type": "boolean",
          "description": "Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption."
        },
        "timing": {
          "description": "Output only. Stores timing information for executing this build step.",
          "$ref": "TimeSpan",
          "readOnly": true
        },
        "status": {
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "readOnly": true
        },
        "dir": {
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.",
          "type": "string"
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "args": {
          "type": "array",
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "items": {
            "type": "string"
          }
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "$ref": "TimeSpan",
          "readOnly": true
        },
        "allowFailure": {
          "type": "boolean",
          "description": "Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field."
        },
        "volumes": {
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "items": {
            "$ref": "Volume"
          },
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency."
        },
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        },
        "script": {
          "type": "string",
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args."
        },
        "waitFor": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully."
        },
        "allowExitCodes": {
          "description": "Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A step in the build pipeline."
    },
    "Empty": {
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "id": "Empty"
    },
    "ListBitbucketServerRepositoriesResponse": {
      "id": "ListBitbucketServerRepositoriesResponse",
      "description": "RPC response object returned by the ListBitbucketServerRepositories RPC method.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "bitbucketServerRepositories": {
          "type": "array",
          "description": "List of Bitbucket Server repositories.",
          "items": {
            "$ref": "BitbucketServerRepository"
          }
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "RepositoryEventConfig": {
      "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received.",
      "type": "object",
      "id": "RepositoryEventConfig",
      "properties": {
        "push": {
          "$ref": "PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        },
        "repositoryType": {
          "enumDescriptions": [
            "If unspecified, RepositoryType defaults to GITHUB.",
            "The SCM repo is GITHUB.",
            "The SCM repo is GITHUB Enterprise.",
            "The SCM repo is GITLAB Enterprise."
          ],
          "type": "string",
          "description": "Output only. The type of the SCM vendor the repository points to.",
          "readOnly": true,
          "enum": [
            "REPOSITORY_TYPE_UNSPECIFIED",
            "GITHUB",
            "GITHUB_ENTERPRISE",
            "GITLAB_ENTERPRISE"
          ]
        },
        "repository": {
          "description": "The resource name of the Repo API resource.",
          "type": "string"
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "Filter to match changes in pull requests."
        }
      }
    },
    "GitHubEnterpriseConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
        },
        "hostUrl": {
          "description": "The URL of the github enterprise host the configuration is for.",
          "type": "string"
        },
        "sslCa": {
          "type": "string",
          "description": "Optional. SSL certificate to use for requests to GitHub Enterprise."
        },
        "displayName": {
          "type": "string",
          "description": "Name to display for this config."
        },
        "secrets": {
          "$ref": "GitHubEnterpriseSecrets",
          "description": "Names of secrets in Secret Manager."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Time when the installation was associated with the project.",
          "readOnly": true
        },
        "peeredNetwork": {
          "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
          "type": "string"
        },
        "appId": {
          "format": "int64",
          "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
          "type": "string"
        },
        "webhookKey": {
          "type": "string",
          "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
        }
      },
      "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
      "id": "GitHubEnterpriseConfig"
    },
    "GitLabSecrets": {
      "description": "GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.",
      "id": "GitLabSecrets",
      "type": "object",
      "properties": {
        "apiAccessTokenVersion": {
          "type": "string",
          "description": "Required. The resource name for the api access token’s secret version"
        },
        "webhookSecretVersion": {
          "type": "string",
          "description": "Required. Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig."
        },
        "apiKeyVersion": {
          "description": "Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.",
          "type": "string"
        },
        "readAccessTokenVersion": {
          "type": "string",
          "description": "Required. The resource name for the read access token’s secret version"
        }
      }
    },
    "NpmPackage": {
      "type": "object",
      "id": "NpmPackage",
      "description": "Npm package to upload to Artifact Registry upon successful completion of all build steps.",
      "properties": {
        "repository": {
          "description": "Artifact Registry repository, in the form \"https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY\" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.",
          "type": "string"
        },
        "packagePath": {
          "description": "Path to the package.json. e.g. workspace/path/to/package",
          "type": "string"
        }
      }
    },
    "Build": {
      "id": "Build",
      "properties": {
        "statusDetail": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Customer-readable message about the current status."
        },
        "queueTtl": {
          "type": "string",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "format": "google-duration"
        },
        "warnings": {
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "items": {
            "$ref": "Warning"
          },
          "readOnly": true,
          "type": "array"
        },
        "images": {
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "type": "array"
        },
        "approval": {
          "$ref": "BuildApproval",
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "readOnly": true
        },
        "secrets": {
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
          "items": {
            "$ref": "Secret"
          },
          "type": "array"
        },
        "tags": {
          "type": "array",
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "timing": {
          "readOnly": true,
          "additionalProperties": {
            "$ref": "TimeSpan"
          },
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "type": "object"
        },
        "buildTriggerId": {
          "readOnly": true,
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "type": "string"
        },
        "logsBucket": {
          "type": "string",
          "description": "Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`."
        },
        "finishTime": {
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "type": "string",
          "description": "Output only. Status of the build.",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "readOnly": true
        },
        "failureInfo": {
          "$ref": "FailureInfo",
          "readOnly": true,
          "description": "Output only. Contains information about the build when status=FAILURE."
        },
        "availableSecrets": {
          "$ref": "Secrets",
          "description": "Secrets and secret environment variables."
        },
        "name": {
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
          "readOnly": true,
          "type": "string"
        },
        "logUrl": {
          "readOnly": true,
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "type": "string"
        },
        "options": {
          "$ref": "BuildOptions",
          "description": "Special options for this build."
        },
        "artifacts": {
          "$ref": "Artifacts",
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps."
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions data for `Build` resource."
        },
        "serviceAccount": {
          "type": "string",
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. "
        },
        "sourceProvenance": {
          "$ref": "SourceProvenance",
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "description": "Output only. Time at which the request to create the build was received.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "timeout": {
          "format": "google-duration",
          "type": "string",
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes."
        },
        "results": {
          "description": "Output only. Results of the build.",
          "$ref": "Results",
          "readOnly": true
        },
        "source": {
          "description": "The location of the source files to build.",
          "$ref": "Source"
        },
        "projectId": {
          "type": "string",
          "description": "Output only. ID of the project.",
          "readOnly": true
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array",
          "items": {
            "$ref": "BuildStep"
          }
        }
      },
      "type": "object",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA."
    },
    "ProcessAppManifestCallbackOperationMetadata": {
      "type": "object",
      "id": "ProcessAppManifestCallbackOperationMetadata",
      "properties": {
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        }
      },
      "description": "Metadata for `ProcessAppManifestCallback` operation."
    },
    "RemoveGitLabConnectedRepositoryRequest": {
      "type": "object",
      "id": "RemoveGitLabConnectedRepositoryRequest",
      "description": "RPC request object accepted by RemoveGitLabConnectedRepository RPC method.",
      "properties": {
        "connectedRepository": {
          "$ref": "GitLabRepositoryId",
          "description": "The connected repository to remove."
        }
      }
    },
    "BitbucketServerSecrets": {
      "id": "BitbucketServerSecrets",
      "type": "object",
      "properties": {
        "webhookSecretVersionName": {
          "type": "string",
          "description": "Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig."
        },
        "readAccessTokenVersionName": {
          "type": "string",
          "description": "Required. The resource name for the read access token's secret version."
        },
        "adminAccessTokenVersionName": {
          "type": "string",
          "description": "Required. The resource name for the admin access token's secret version."
        }
      },
      "description": "BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server."
    },
    "CreateGitHubEnterpriseConfigOperationMetadata": {
      "type": "object",
      "id": "CreateGitHubEnterpriseConfigOperationMetadata",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        }
      },
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation."
    },
    "GitLabEventsConfig": {
      "description": "GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.",
      "type": "object",
      "properties": {
        "push": {
          "$ref": "PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        },
        "gitlabConfig": {
          "$ref": "GitLabConfig",
          "description": "Output only. The GitLabConfig specified in the gitlab_config_resource field.",
          "readOnly": true
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "Filter to match changes in pull requests."
        },
        "gitlabConfigResource": {
          "description": "The GitLab config resource that this trigger config maps to.",
          "type": "string"
        },
        "projectNamespace": {
          "description": "Namespace of the GitLab project.",
          "type": "string"
        }
      },
      "id": "GitLabEventsConfig"
    },
    "GitHubEventsConfig": {
      "properties": {
        "name": {
          "description": "Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\".",
          "type": "string"
        },
        "installationId": {
          "type": "string",
          "format": "int64",
          "deprecated": true,
          "description": "The installationID that emits the GitHub event."
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "filter to match changes in pull requests."
        },
        "push": {
          "$ref": "PushFilter",
          "description": "filter to match changes in refs like branches, tags."
        },
        "owner": {
          "description": "Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\".",
          "type": "string"
        },
        "enterpriseConfigResourceName": {
          "type": "string",
          "description": "Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
        }
      },
      "type": "object",
      "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.",
      "id": "GitHubEventsConfig"
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata": {
      "type": "object",
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata",
      "description": "Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "config": {
          "description": "The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "type": "string"
        }
      }
    },
    "ListBuildsResponse": {
      "properties": {
        "builds": {
          "description": "Builds will be sorted by `create_time`, descending.",
          "items": {
            "$ref": "Build"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to receive the next page of results. This will be absent if the end of the response list has been reached.",
          "type": "string"
        }
      },
      "description": "Response including listed builds.",
      "id": "ListBuildsResponse",
      "type": "object"
    },
    "DeleteBitbucketServerConfigOperationMetadata": {
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        }
      },
      "description": "Metadata for `DeleteBitbucketServerConfig` operation.",
      "type": "object",
      "id": "DeleteBitbucketServerConfigOperationMetadata"
    },
    "GitLabConfig": {
      "description": "GitLabConfig represents the configuration for a GitLab integration.",
      "properties": {
        "connectedRepositories": {
          "items": {
            "$ref": "GitLabRepositoryId"
          },
          "description": "Connected GitLab.com or GitLabEnterprise repositories for this config.",
          "type": "array"
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time when the config was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "name": {
          "description": "The resource name for the config.",
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "Username of the GitLab.com or GitLab Enterprise account Cloud Build will use."
        },
        "webhookKey": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config."
        },
        "secrets": {
          "description": "Required. Secret Manager secrets needed by the config.",
          "$ref": "GitLabSecrets"
        },
        "enterpriseConfig": {
          "$ref": "GitLabEnterpriseConfig",
          "description": "Optional. GitLabEnterprise config."
        }
      },
      "id": "GitLabConfig",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "Results": {
      "description": "Artifacts created by the build pipeline.",
      "type": "object",
      "id": "Results",
      "properties": {
        "buildStepOutputs": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored."
        },
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mavenArtifacts": {
          "description": "Maven artifacts uploaded to Artifact Registry at the end of the build.",
          "items": {
            "$ref": "UploadedMavenArtifact"
          },
          "type": "array"
        },
        "artifactManifest": {
          "description": "Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "type": "string"
        },
        "artifactTiming": {
          "$ref": "TimeSpan",
          "description": "Time to push all non-container artifacts to Cloud Storage."
        },
        "npmPackages": {
          "description": "Npm packages uploaded to Artifact Registry at the end of the build.",
          "type": "array",
          "items": {
            "$ref": "UploadedNpmPackage"
          }
        },
        "images": {
          "type": "array",
          "description": "Container images that were built as a part of the build.",
          "items": {
            "$ref": "BuiltImage"
          }
        },
        "pythonPackages": {
          "type": "array",
          "items": {
            "$ref": "UploadedPythonPackage"
          },
          "description": "Python artifacts uploaded to Artifact Registry at the end of the build."
        },
        "numArtifacts": {
          "description": "Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "ArtifactResult": {
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "id": "ArtifactResult",
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "The file hash of the artifact.",
          "items": {
            "$ref": "FileHashes"
          },
          "type": "array"
        },
        "location": {
          "type": "string",
          "description": "The path of an artifact in a Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`."
        }
      }
    },
    "RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "properties": {
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        },
        "repoName": {
          "description": "Name of the Cloud Source Repository.",
          "type": "string"
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "substitutions": {
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "RepoSource"
    },
    "UploadedMavenArtifact": {
      "id": "UploadedMavenArtifact",
      "properties": {
        "pushTiming": {
          "$ref": "TimeSpan",
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing the specified artifact."
        },
        "fileHashes": {
          "description": "Hash types and values of the Maven Artifact.",
          "$ref": "FileHashes"
        },
        "uri": {
          "description": "URI of the uploaded artifact.",
          "type": "string"
        }
      },
      "description": "A Maven artifact uploaded using the MavenArtifact directive.",
      "type": "object"
    },
    "Secrets": {
      "description": "Secrets and secret environment variables.",
      "type": "object",
      "id": "Secrets",
      "properties": {
        "secretManager": {
          "items": {
            "$ref": "SecretManagerSecret"
          },
          "type": "array",
          "description": "Secrets in Secret Manager and associated secret environment variable."
        },
        "inline": {
          "items": {
            "$ref": "InlineSecret"
          },
          "type": "array",
          "description": "Secrets encrypted with KMS key and the associated secret environment variable."
        }
      }
    },
    "DeleteGitLabConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        }
      },
      "id": "DeleteGitLabConfigOperationMetadata",
      "description": "Metadata for `DeleteGitLabConfig` operation."
    },
    "BatchCreateBitbucketServerConnectedRepositoriesRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "items": {
            "$ref": "CreateBitbucketServerConnectedRepositoryRequest"
          },
          "type": "array",
          "description": "Required. Requests to connect Bitbucket Server repositories."
        }
      },
      "description": "RPC request object accepted by BatchCreateBitbucketServerConnectedRepositories RPC method.",
      "id": "BatchCreateBitbucketServerConnectedRepositoriesRequest"
    },
    "BatchCreateGitLabConnectedRepositoriesResponse": {
      "id": "BatchCreateGitLabConnectedRepositoriesResponse",
      "type": "object",
      "properties": {
        "gitlabConnectedRepositories": {
          "description": "The GitLab connected repository requests' responses.",
          "type": "array",
          "items": {
            "$ref": "GitLabConnectedRepository"
          }
        }
      },
      "description": "Response of BatchCreateGitLabConnectedRepositories RPC method."
    },
    "WorkerConfig": {
      "properties": {
        "diskSizeGb": {
          "type": "string",
          "description": "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.",
          "format": "int64"
        },
        "machineType": {
          "type": "string",
          "description": "Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default."
        }
      },
      "id": "WorkerConfig",
      "type": "object",
      "description": "Defines the configuration to be used for creating workers in the pool."
    },
    "ApprovalResult": {
      "type": "object",
      "id": "ApprovalResult",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "properties": {
        "url": {
          "type": "string",
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build."
        },
        "comment": {
          "description": "Optional. An optional comment for this manual approval result.",
          "type": "string"
        },
        "decision": {
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ],
          "type": "string",
          "description": "Required. The decision of this manual approval.",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ]
        },
        "approvalTime": {
          "description": "Output only. The time when the approval decision was made.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "approverAccount": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called."
        }
      }
    },
    "BuildApproval": {
      "properties": {
        "result": {
          "readOnly": true,
          "description": "Output only. Result of manual approval for this Build.",
          "$ref": "ApprovalResult"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "description": "Output only. The state of this build's approval.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ]
        },
        "config": {
          "description": "Output only. Configuration for manual approval of this build.",
          "$ref": "ApprovalConfig",
          "readOnly": true
        }
      },
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "type": "object",
      "id": "BuildApproval"
    },
    "BitbucketServerTriggerConfig": {
      "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
      "type": "object",
      "id": "BitbucketServerTriggerConfig",
      "properties": {
        "push": {
          "description": "Filter to match changes in refs like branches, tags.",
          "$ref": "PushFilter"
        },
        "repoSlug": {
          "type": "string",
          "description": "Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo."
        },
        "bitbucketServerConfig": {
          "$ref": "BitbucketServerConfig",
          "description": "Output only. The BitbucketServerConfig specified in the bitbucket_server_config_resource field.",
          "readOnly": true
        },
        "bitbucketServerConfigResource": {
          "type": "string",
          "description": "Required. The Bitbucket server config resource that this trigger config maps to."
        },
        "projectKey": {
          "description": "Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\".",
          "type": "string"
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "Filter to match changes in pull requests."
        }
      }
    },
    "BitbucketServerConnectedRepository": {
      "id": "BitbucketServerConnectedRepository",
      "description": "/ BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.",
      "type": "object",
      "properties": {
        "parent": {
          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "type": "string"
        },
        "repo": {
          "$ref": "BitbucketServerRepositoryId",
          "description": "The Bitbucket Server repositories to connect."
        },
        "status": {
          "$ref": "Status",
          "readOnly": true,
          "description": "Output only. The status of the repo connection request."
        }
      }
    },
    "StorageSourceManifest": {
      "type": "object",
      "properties": {
        "generation": {
          "type": "string",
          "description": "Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64"
        },
        "bucket": {
          "type": "string",
          "description": "Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "type": "string",
          "description": "Cloud Storage object containing the source manifest. This object must be a JSON file."
        }
      },
      "description": "Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "id": "StorageSourceManifest"
    },
    "ReceiveTriggerWebhookResponse": {
      "description": "ReceiveTriggerWebhookResponse [Experimental] is the response object for the ReceiveTriggerWebhook method.",
      "properties": {},
      "id": "ReceiveTriggerWebhookResponse",
      "type": "object"
    },
    "BitbucketServerRepository": {
      "description": "BitbucketServerRepository represents a repository hosted on a Bitbucket Server.",
      "properties": {
        "displayName": {
          "description": "Display name of the repository.",
          "type": "string"
        },
        "description": {
          "description": "Description of the repository.",
          "type": "string"
        },
        "browseUri": {
          "description": "Link to the browse repo page on the Bitbucket Server instance.",
          "type": "string"
        },
        "name": {
          "description": "The resource name of the repository.",
          "type": "string"
        },
        "repoId": {
          "$ref": "BitbucketServerRepositoryId",
          "description": "Identifier for a repository hosted on a Bitbucket Server."
        }
      },
      "type": "object",
      "id": "BitbucketServerRepository"
    },
    "PushFilter": {
      "description": "Push contains filter properties for matching GitHub git pushes.",
      "type": "object",
      "id": "PushFilter",
      "properties": {
        "tag": {
          "type": "string",
          "description": "Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "When true, only trigger a build if the revision regex does NOT match the git_ref regex."
        },
        "branch": {
          "type": "string",
          "description": "Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        }
      }
    },
    "GitLabEnterpriseConfig": {
      "type": "object",
      "properties": {
        "hostUri": {
          "description": "Immutable. The URI of the GitlabEnterprise host.",
          "type": "string"
        },
        "sslCa": {
          "type": "string",
          "description": "The SSL certificate to use in requests to GitLab Enterprise instances."
        },
        "serviceDirectoryConfig": {
          "description": "The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.",
          "$ref": "ServiceDirectoryConfig"
        }
      },
      "description": "GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.",
      "id": "GitLabEnterpriseConfig"
    },
    "FailureInfo": {
      "id": "FailureInfo",
      "type": "object",
      "description": "A fatal problem encountered during the execution of the build.",
      "properties": {
        "type": {
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "description": "The name of the failure."
        },
        "detail": {
          "type": "string",
          "description": "Explains the failure issue in more detail using hard-coded text."
        }
      }
    },
    "ApproveBuildRequest": {
      "id": "ApproveBuildRequest",
      "description": "Request to approve or reject a pending build.",
      "type": "object",
      "properties": {
        "approvalResult": {
          "$ref": "ApprovalResult",
          "description": "Approval decision and metadata."
        }
      }
    },
    "CreateBitbucketServerConfigOperationMetadata": {
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "bitbucketServerConfig": {
          "type": "string",
          "description": "The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`."
        }
      },
      "description": "Metadata for `CreateBitbucketServerConfig` operation.",
      "type": "object",
      "id": "CreateBitbucketServerConfigOperationMetadata"
    },
    "Secret": {
      "id": "Secret",
      "type": "object",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.",
      "properties": {
        "secretEnv": {
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          }
        },
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        }
      }
    },
    "ListGithubEnterpriseConfigsResponse": {
      "properties": {
        "configs": {
          "type": "array",
          "description": "A list of GitHubEnterpriseConfigs",
          "items": {
            "$ref": "GitHubEnterpriseConfig"
          }
        }
      },
      "type": "object",
      "description": "RPC response object returned by ListGithubEnterpriseConfigs RPC method.",
      "id": "ListGithubEnterpriseConfigsResponse"
    },
    "UploadedPythonPackage": {
      "properties": {
        "fileHashes": {
          "description": "Hash types and values of the Python Artifact.",
          "$ref": "FileHashes"
        },
        "pushTiming": {
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "$ref": "TimeSpan"
        },
        "uri": {
          "description": "URI of the uploaded artifact.",
          "type": "string"
        }
      },
      "description": "Artifact uploaded using the PythonPackage directive.",
      "id": "UploadedPythonPackage",
      "type": "object"
    },
    "ListGitLabRepositoriesResponse": {
      "id": "ListGitLabRepositoriesResponse",
      "properties": {
        "gitlabRepositories": {
          "type": "array",
          "items": {
            "$ref": "GitLabRepository"
          },
          "description": "List of GitLab repositories"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "type": "object",
      "description": "RPC response object returned by the ListGitLabRepositories RPC method."
    },
    "FileHashes": {
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "Hash"
          },
          "description": "Collection of file hashes."
        }
      },
      "type": "object"
    },
    "BitbucketServerConfig": {
      "id": "BitbucketServerConfig",
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the account Cloud Build will use on Bitbucket Server."
        },
        "sslCa": {
          "type": "string",
          "description": "Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt."
        },
        "connectedRepositories": {
          "type": "array",
          "description": "Output only. Connected Bitbucket Server repositories for this config.",
          "readOnly": true,
          "items": {
            "$ref": "BitbucketServerRepositoryId"
          }
        },
        "hostUri": {
          "type": "string",
          "description": "Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig."
        },
        "createTime": {
          "description": "Time when the config was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "apiKey": {
          "description": "Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
          "type": "string"
        },
        "peeredNetwork": {
          "type": "string",
          "description": "Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project."
        },
        "webhookKey": {
          "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The resource name for the config.",
          "type": "string"
        },
        "secrets": {
          "$ref": "BitbucketServerSecrets",
          "description": "Required. Secret Manager secrets needed by the config."
        }
      },
      "description": "BitbucketServerConfig represents the configuration for a Bitbucket Server."
    },
    "ApprovalConfig": {
      "type": "object",
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "id": "ApprovalConfig"
    },
    "SecretManagerSecret": {
      "properties": {
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*",
          "type": "string"
        },
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "id": "SecretManagerSecret"
    },
    "GitHubEnterpriseSecrets": {
      "type": "object",
      "properties": {
        "privateKeyName": {
          "description": "The resource name for the private key secret.",
          "deprecated": true,
          "type": "string"
        },
        "oauthSecretName": {
          "type": "string",
          "deprecated": true,
          "description": "The resource name for the OAuth secret in Secret Manager."
        },
        "oauthSecretVersionName": {
          "type": "string",
          "description": "The resource name for the OAuth secret secret version in Secret Manager."
        },
        "oauthClientIdVersionName": {
          "type": "string",
          "description": "The resource name for the OAuth client ID secret version in Secret Manager."
        },
        "privateKeyVersionName": {
          "type": "string",
          "description": "The resource name for the private key secret version."
        },
        "webhookSecretName": {
          "deprecated": true,
          "type": "string",
          "description": "The resource name for the webhook secret in Secret Manager."
        },
        "webhookSecretVersionName": {
          "type": "string",
          "description": "The resource name for the webhook secret secret version in Secret Manager."
        },
        "oauthClientIdName": {
          "type": "string",
          "deprecated": true,
          "description": "The resource name for the OAuth client ID secret in Secret Manager."
        }
      },
      "description": "GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.",
      "id": "GitHubEnterpriseSecrets"
    },
    "ListGitLabConfigsResponse": {
      "id": "ListGitLabConfigsResponse",
      "properties": {
        "nextPageToken": {
          "description": "A token that can be sent as `page_token` to retrieve the next page If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "gitlabConfigs": {
          "items": {
            "$ref": "GitLabConfig"
          },
          "type": "array",
          "description": "A list of GitLabConfigs"
        }
      },
      "description": "RPC response object returned by ListGitLabConfigs RPC method.",
      "type": "object"
    },
    "PubsubConfig": {
      "type": "object",
      "id": "PubsubConfig",
      "properties": {
        "state": {
          "enumDescriptions": [
            "The subscription configuration has not been checked.",
            "The Pub/Sub subscription is properly configured.",
            "The subscription has been deleted.",
            "The topic has been deleted.",
            "Some of the subscription's field are misconfigured."
          ],
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SUBSCRIPTION_DELETED",
            "TOPIC_DELETED",
            "SUBSCRIPTION_MISCONFIGURED"
          ]
        },
        "serviceAccountEmail": {
          "type": "string",
          "description": "Service account that will make the push request."
        },
        "topic": {
          "description": "The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.",
          "type": "string"
        },
        "subscription": {
          "readOnly": true,
          "description": "Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.",
          "type": "string"
        }
      },
      "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
    },
    "RunBuildTriggerRequest": {
      "description": "Specifies a build trigger to run and the source to use.",
      "properties": {
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "source": {
          "$ref": "RepoSource",
          "description": "Source to build against this trigger. Branch and tag names cannot consist of regular expressions."
        },
        "triggerId": {
          "type": "string",
          "description": "Required. ID of the trigger."
        }
      },
      "id": "RunBuildTriggerRequest",
      "type": "object"
    },
    "BuildOperationMetadata": {
      "properties": {
        "build": {
          "$ref": "Build",
          "description": "The build that the operation is tracking."
        }
      },
      "id": "BuildOperationMetadata",
      "type": "object",
      "description": "Metadata for build operations."
    },
    "BitbucketServerRepositoryId": {
      "description": "BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.",
      "id": "BitbucketServerRepositoryId",
      "properties": {
        "webhookId": {
          "readOnly": true,
          "type": "integer",
          "format": "int32",
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo."
        },
        "projectKey": {
          "description": "Required. Identifier for the project storing the repository.",
          "type": "string"
        },
        "repoSlug": {
          "type": "string",
          "description": "Required. Identifier for the repository."
        }
      },
      "type": "object"
    },
    "InlineSecret": {
      "id": "InlineSecret",
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "properties": {
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*",
          "type": "string"
        },
        "envMap": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "GitSource": {
      "type": "object",
      "id": "GitSource",
      "description": "Location of the source in any accessible Git repository.",
      "properties": {
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "revision": {
          "type": "string",
          "description": "The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch."
        },
        "url": {
          "type": "string",
          "description": "Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote."
        }
      }
    },
    "CreateGitLabConnectedRepositoryRequest": {
      "type": "object",
      "id": "CreateGitLabConnectedRepositoryRequest",
      "description": "Request to connect a repository from a connected GitLab host.",
      "properties": {
        "gitlabConnectedRepository": {
          "$ref": "GitLabConnectedRepository",
          "description": "Required. The GitLab repository to connect."
        },
        "parent": {
          "description": "Required. The name of the `GitLabConfig` that adds connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
          "type": "string"
        }
      }
    },
    "WorkerPool": {
      "description": "Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).",
      "id": "WorkerPool",
      "properties": {
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
          "readOnly": true
        },
        "privatePoolV1Config": {
          "$ref": "PrivatePoolV1Config",
          "description": "Legacy Private Pool configuration."
        },
        "state": {
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "State of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted.",
            "`WorkerPool` is being updated; new builds cannot be run."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED",
            "UPDATING"
          ],
          "description": "Output only. `WorkerPool` state."
        },
        "uid": {
          "description": "Output only. A unique identifier for the `WorkerPool`.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
          "type": "string"
        },
        "name": {
          "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
          "readOnly": true,
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations."
        },
        "deleteTime": {
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.",
          "readOnly": true
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        }
      },
      "type": "object"
    },
    "NetworkConfig": {
      "type": "object",
      "properties": {
        "peeredNetworkIpRange": {
          "description": "Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.",
          "type": "string"
        },
        "egressOption": {
          "type": "string",
          "enum": [
            "EGRESS_OPTION_UNSPECIFIED",
            "NO_PUBLIC_EGRESS",
            "PUBLIC_EGRESS"
          ],
          "description": "Option to configure network egress for the workers.",
          "enumDescriptions": [
            "If set, defaults to PUBLIC_EGRESS.",
            "If set, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured.",
            "If set, workers are created with a public address which allows for public internet egress."
          ]
        },
        "peeredNetwork": {
          "description": "Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)",
          "type": "string"
        }
      },
      "id": "NetworkConfig",
      "description": "Defines the network configuration for the pool."
    },
    "TimeSpan": {
      "properties": {
        "startTime": {
          "format": "google-datetime",
          "description": "Start of time span.",
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "End of time span."
        }
      },
      "type": "object",
      "id": "TimeSpan",
      "description": "Start and end times for a build execution phase."
    },
    "BuildOptions": {
      "type": "object",
      "description": "Optional arguments to enable specific features of builds.",
      "id": "BuildOptions",
      "properties": {
        "substitutionOption": {
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ]
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "type": "array",
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration."
        },
        "workerPool": {
          "deprecated": true,
          "description": "This field deprecated; please use `pool.name` instead.",
          "type": "string"
        },
        "secretEnv": {
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "diskSizeGb": {
          "type": "string",
          "format": "int64",
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error."
        },
        "requestedVerifyOption": {
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "type": "string",
          "description": "Requested verifiability options.",
          "enumDescriptions": [
            "Not a verifiable build (the default).",
            "Build must be verified."
          ]
        },
        "automapSubstitutions": {
          "description": "Option to include built-in and custom substitutions as env variables for all build steps.",
          "type": "boolean"
        },
        "defaultLogsBucketBehavior": {
          "description": "Optional. Option to specify how default logs buckets are setup.",
          "enumDescriptions": [
            "Unspecified.",
            "Bucket is located in user-owned project in the same region as the build. The builder service account must have access to create and write to Cloud Storage buckets in the build project."
          ],
          "enum": [
            "DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED",
            "REGIONAL_USER_OWNED_BUCKET"
          ],
          "type": "string"
        },
        "env": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        },
        "logging": {
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).",
            "Turn off all logging. No build logs will be captured."
          ],
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "enumDeprecated": [
            false,
            false,
            false,
            true,
            false,
            false
          ],
          "type": "string"
        },
        "sourceProvenanceHash": {
          "items": {
            "enum": [
              "NONE",
              "SHA256",
              "MD5",
              "SHA512"
            ],
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash.",
              "Use a sha512 hash."
            ],
            "type": "string"
          },
          "description": "Requested hash for SourceProvenance.",
          "type": "array"
        },
        "machineType": {
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32",
            "E2_MEDIUM"
          ],
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs.",
            "E2 machine with 1 CPU."
          ]
        },
        "logStreamingOption": {
          "description": "Option to define build log streaming behavior to Cloud Storage.",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Cloud Storage.",
            "Build logs should not be streamed to Cloud Storage; they will be written when the build is completed."
          ],
          "type": "string",
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "pool": {
          "$ref": "PoolOption",
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
        }
      }
    },
    "UpdateGitHubEnterpriseConfigOperationMetadata": {
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UpdateGitHubEnterpriseConfigOperationMetadata"
    },
    "Hash": {
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash.",
            "Use a sha512 hash."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "SHA256",
            "MD5",
            "SHA512"
          ],
          "description": "The type of hash that was performed."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "The hash value."
        }
      },
      "description": "Container message for hash values.",
      "id": "Hash"
    },
    "ArtifactObjects": {
      "properties": {
        "timing": {
          "readOnly": true,
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing all artifact objects."
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Path globs used to match files in the build's workspace."
        },
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ArtifactObjects",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps."
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponse": {
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponse",
      "properties": {
        "bitbucketServerConnectedRepositories": {
          "items": {
            "$ref": "BitbucketServerConnectedRepository"
          },
          "description": "The connected Bitbucket Server repositories.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories."
    },
    "UpdateBitbucketServerConfigOperationMetadata": {
      "id": "UpdateBitbucketServerConfigOperationMetadata",
      "description": "Metadata for `UpdateBitbucketServerConfig` operation.",
      "type": "object",
      "properties": {
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        }
      }
    },
    "WebhookConfig": {
      "properties": {
        "secret": {
          "description": "Required. Resource name for the secret required as a URL parameter.",
          "type": "string"
        },
        "state": {
          "enumDescriptions": [
            "The webhook auth configuration not been checked.",
            "The auth configuration is properly setup.",
            "The secret provided in auth_method has been deleted."
          ],
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SECRET_DELETED"
          ]
        }
      },
      "id": "WebhookConfig",
      "type": "object",
      "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
    },
    "BuiltImage": {
      "id": "BuiltImage",
      "description": "An image built by the pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`."
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified image.",
          "readOnly": true,
          "$ref": "TimeSpan"
        },
        "digest": {
          "description": "Docker Registry 2.0 digest.",
          "type": "string"
        }
      }
    },
    "BatchCreateGitLabConnectedRepositoriesResponseMetadata": {
      "id": "BatchCreateGitLabConnectedRepositoriesResponseMetadata",
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        },
        "config": {
          "type": "string",
          "description": "The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        }
      },
      "type": "object",
      "description": "Metadata for `BatchCreateGitLabConnectedRepositories` operation."
    },
    "Artifacts": {
      "id": "Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "pythonPackages": {
          "description": "A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "$ref": "PythonPackage"
          }
        },
        "objects": {
          "$ref": "ArtifactObjects",
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE."
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE."
        },
        "mavenArtifacts": {
          "type": "array",
          "items": {
            "$ref": "MavenArtifact"
          },
          "description": "A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE."
        },
        "npmPackages": {
          "description": "A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "$ref": "NpmPackage"
          }
        }
      },
      "type": "object"
    },
    "SourceProvenance": {
      "properties": {
        "resolvedStorageSourceManifest": {
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
          "$ref": "StorageSourceManifest"
        },
        "fileHashes": {
          "readOnly": true,
          "type": "object",
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "additionalProperties": {
            "$ref": "FileHashes"
          }
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "resolvedStorageSource": {
          "$ref": "StorageSource",
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved."
        }
      },
      "id": "SourceProvenance",
      "type": "object",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build."
    },
    "PoolOption": {
      "properties": {
        "name": {
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}",
          "type": "string"
        }
      },
      "type": "object",
      "id": "PoolOption",
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
    },
    "HttpBody": {
      "properties": {
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        },
        "extensions": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
          "type": "array"
        },
        "data": {
          "description": "The HTTP request/response body as raw binary.",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "HttpBody",
      "type": "object",
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."
    },
    "MavenArtifact": {
      "properties": {
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY\" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix."
        },
        "path": {
          "type": "string",
          "description": "Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar."
        },
        "groupId": {
          "type": "string",
          "description": "Maven `groupId` value used when uploading the artifact to Artifact Registry."
        },
        "artifactId": {
          "description": "Maven `artifactId` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "Maven `version` value used when uploading the artifact to Artifact Registry."
        }
      },
      "description": "A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.",
      "id": "MavenArtifact",
      "type": "object"
    },
    "GitLabRepository": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of the repository"
        },
        "repositoryId": {
          "$ref": "GitLabRepositoryId",
          "description": "Identifier for a repository"
        },
        "displayName": {
          "description": "Display name of the repository",
          "type": "string"
        },
        "browseUri": {
          "type": "string",
          "description": "Link to the browse repo page on the GitLab instance"
        },
        "description": {
          "type": "string",
          "description": "Description of the repository"
        }
      },
      "description": "Proto Representing a GitLabRepository",
      "id": "GitLabRepository",
      "type": "object"
    },
    "BuildTrigger": {
      "description": "Configuration for an automated build in response to source repository changes.",
      "type": "object",
      "id": "BuildTrigger",
      "properties": {
        "serviceAccount": {
          "type": "string",
          "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`"
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`."
        },
        "gitFileSource": {
          "$ref": "GitFileSource",
          "description": "The file source describing the local or remote Build template."
        },
        "name": {
          "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
          "type": "string"
        },
        "build": {
          "description": "Contents of the build template.",
          "$ref": "Build"
        },
        "ignoredFiles": {
          "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "github": {
          "$ref": "GitHubEventsConfig",
          "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`."
        },
        "filename": {
          "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).",
          "type": "string"
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time when the trigger was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "pubsubConfig": {
          "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.",
          "$ref": "PubsubConfig"
        },
        "bitbucketServerTriggerConfig": {
          "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
          "$ref": "BitbucketServerTriggerConfig"
        },
        "webhookConfig": {
          "$ref": "WebhookConfig",
          "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
        },
        "autodetect": {
          "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
          "type": "boolean"
        },
        "resourceName": {
          "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.",
          "type": "string"
        },
        "disabled": {
          "description": "If true, the trigger will never automatically execute a build.",
          "type": "boolean"
        },
        "triggerTemplate": {
          "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
          "$ref": "RepoSource"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags for annotation of a `BuildTrigger`",
          "type": "array"
        },
        "includeBuildLogs": {
          "enumDescriptions": [
            "Build logs will not be shown on GitHub.",
            "Build logs will be shown on GitHub."
          ],
          "enum": [
            "INCLUDE_BUILD_LOGS_UNSPECIFIED",
            "INCLUDE_BUILD_LOGS_WITH_STATUS"
          ],
          "type": "string",
          "description": "If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error."
        },
        "includedFiles": {
          "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sourceToBuild": {
          "$ref": "GitRepoSource",
          "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
        },
        "filter": {
          "type": "string",
          "description": "A Common Expression Language string."
        },
        "description": {
          "description": "Human-readable description of this trigger.",
          "type": "string"
        },
        "repositoryEventConfig": {
          "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received.",
          "$ref": "RepositoryEventConfig"
        },
        "gitlabEnterpriseEventsConfig": {
          "description": "GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.",
          "$ref": "GitLabEventsConfig"
        },
        "id": {
          "readOnly": true,
          "description": "Output only. Unique identifier of the trigger.",
          "type": "string"
        },
        "approvalConfig": {
          "$ref": "ApprovalConfig",
          "description": "Configuration for manual approval to start a build invocation of this BuildTrigger."
        },
        "eventType": {
          "enumDescriptions": [
            "EVENT_TYPE_UNSPECIFIED event_types are ignored.",
            "REPO corresponds to the supported VCS integrations.",
            "WEBHOOK corresponds to webhook triggers.",
            "PUBSUB corresponds to pubsub triggers.",
            "MANUAL corresponds to manual-only invoked triggers."
          ],
          "type": "string",
          "enum": [
            "EVENT_TYPE_UNSPECIFIED",
            "REPO",
            "WEBHOOK",
            "PUBSUB",
            "MANUAL"
          ],
          "description": "EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set."
        }
      }
    },
    "ServiceDirectoryConfig": {
      "properties": {
        "service": {
          "type": "string",
          "description": "The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}."
        }
      },
      "description": "ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.",
      "type": "object",
      "id": "ServiceDirectoryConfig"
    },
    "CancelBuildRequest": {
      "type": "object",
      "id": "CancelBuildRequest",
      "description": "Request to cancel an ongoing build.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Required. ID of the build."
        }
      }
    },
    "RetryBuildRequest": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. Build ID of the original build."
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "name": {
          "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
          "type": "string"
        }
      },
      "description": "Specifies a build to retry.",
      "id": "RetryBuildRequest",
      "type": "object"
    },
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "properties": {},
      "type": "object",
      "id": "CancelOperationRequest"
    }
  },
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "canonicalName": "Cloud Build",
  "revision": "20230811",
  "title": "Cloud Build API",
  "kind": "discovery#restDescription",
  "basePath": ""
}

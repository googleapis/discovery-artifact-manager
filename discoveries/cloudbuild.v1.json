{
  "fullyEncodeReservedExpansion": true,
  "version_module": true,
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "servicePath": "",
  "id": "cloudbuild:v1",
  "schemas": {
    "NotifierSecretRef": {
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.",
      "type": "object",
      "id": "NotifierSecretRef",
      "properties": {
        "secretRef": {
          "type": "string",
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`."
        }
      }
    },
    "PrivatePoolV1Config": {
      "type": "object",
      "id": "PrivatePoolV1Config",
      "properties": {
        "workerConfig": {
          "description": "Machine configuration for the workers in the pool.",
          "$ref": "WorkerConfig"
        },
        "networkConfig": {
          "$ref": "NetworkConfig",
          "description": "Network configuration for the pool."
        }
      },
      "description": "Configuration for a V1 `PrivatePool`."
    },
    "Volume": {
      "properties": {
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        },
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        }
      },
      "id": "Volume",
      "type": "object",
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution."
    },
    "InlineSecret": {
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "id": "InlineSecret",
      "type": "object",
      "properties": {
        "envMap": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          }
        },
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*",
          "type": "string"
        }
      }
    },
    "StorageSource": {
      "type": "object",
      "id": "StorageSource",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "properties": {
        "generation": {
          "type": "string",
          "format": "int64",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used."
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build."
        }
      }
    },
    "BuiltImage": {
      "description": "An image built by the pipeline.",
      "properties": {
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified image.",
          "$ref": "TimeSpan",
          "readOnly": true
        },
        "name": {
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "BuiltImage"
    },
    "Status": {
      "properties": {
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "CancelBuildRequest": {
      "id": "CancelBuildRequest",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. ID of the build."
        },
        "name": {
          "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
          "type": "string"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        }
      },
      "description": "Request to cancel an ongoing build."
    },
    "ListBuildTriggersResponse": {
      "description": "Response containing existing `BuildTriggers`.",
      "id": "ListBuildTriggersResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to receive the next page of results.",
          "type": "string"
        },
        "triggers": {
          "items": {
            "$ref": "BuildTrigger"
          },
          "description": "`BuildTriggers` for the project, sorted by `create_time` descending.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "ArtifactObjects": {
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "type": "object",
      "id": "ArtifactObjects",
      "properties": {
        "paths": {
          "description": "Path globs used to match files in the build's workspace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "location": {
          "type": "string",
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix."
        },
        "timing": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "readOnly": true
        }
      }
    },
    "HttpBody": {
      "id": "HttpBody",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "extensions": {
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "type": "object"
    },
    "DeleteWorkerPoolOperationMetadata": {
      "description": "Metadata for the `DeleteWorkerPool` operation.",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DeleteWorkerPoolOperationMetadata"
    },
    "NotifierConfig": {
      "description": "NotifierConfig is the top-level configuration message.",
      "type": "object",
      "id": "NotifierConfig",
      "properties": {
        "spec": {
          "$ref": "NotifierSpec",
          "description": "The actual configuration for this notifier."
        },
        "apiVersion": {
          "description": "The API version of this configuration format.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of notifier to use (e.g. SMTPNotifier)."
        },
        "metadata": {
          "description": "Metadata for referring to/handling/deploying this notifier.",
          "$ref": "NotifierMetadata"
        }
      }
    },
    "CreateGitHubEnterpriseConfigOperationMetadata": {
      "type": "object",
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation.",
      "id": "CreateGitHubEnterpriseConfigOperationMetadata",
      "properties": {
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "GitHubEnterpriseSecrets": {
      "type": "object",
      "description": "GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.",
      "properties": {
        "privateKeyVersionName": {
          "description": "The resource name for the private key secret version.",
          "type": "string"
        },
        "oauthSecretVersionName": {
          "description": "The resource name for the OAuth secret secret version in Secret Manager.",
          "type": "string"
        },
        "oauthClientIdVersionName": {
          "type": "string",
          "description": "The resource name for the OAuth client ID secret version in Secret Manager."
        },
        "webhookSecretVersionName": {
          "type": "string",
          "description": "The resource name for the webhook secret secret version in Secret Manager."
        },
        "privateKeyName": {
          "type": "string",
          "description": "The resource name for the private key secret."
        },
        "oauthSecretName": {
          "type": "string",
          "description": "The resource name for the OAuth secret in Secret Manager."
        },
        "oauthClientIdName": {
          "type": "string",
          "description": "The resource name for the OAuth client ID secret in Secret Manager."
        },
        "webhookSecretName": {
          "description": "The resource name for the webhook secret in Secret Manager.",
          "type": "string"
        }
      },
      "id": "GitHubEnterpriseSecrets"
    },
    "TimeSpan": {
      "properties": {
        "startTime": {
          "description": "Start of time span.",
          "format": "google-datetime",
          "type": "string"
        },
        "endTime": {
          "description": "End of time span.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "Start and end times for a build execution phase.",
      "type": "object",
      "id": "TimeSpan"
    },
    "Secrets": {
      "type": "object",
      "id": "Secrets",
      "description": "Secrets and secret environment variables.",
      "properties": {
        "inline": {
          "items": {
            "$ref": "InlineSecret"
          },
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "type": "array"
        },
        "secretManager": {
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "type": "array",
          "items": {
            "$ref": "SecretManagerSecret"
          }
        }
      }
    },
    "FileHashes": {
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "items": {
            "$ref": "Hash"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BuildOperationMetadata": {
      "description": "Metadata for build operations.",
      "id": "BuildOperationMetadata",
      "type": "object",
      "properties": {
        "build": {
          "$ref": "Build",
          "description": "The build that the operation is tracking."
        }
      }
    },
    "Notification": {
      "type": "object",
      "description": "Notification is the container which holds the data that is relevant to this particular notification.",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more."
        },
        "slackDelivery": {
          "$ref": "SlackDelivery",
          "description": "Configuration for Slack delivery."
        },
        "smtpDelivery": {
          "description": "Configuration for SMTP (email) delivery.",
          "$ref": "SMTPDelivery"
        },
        "structDelivery": {
          "type": "object",
          "description": "Escape hatch for users to supply custom delivery configs.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "httpDelivery": {
          "$ref": "HTTPDelivery",
          "description": "Configuration for HTTP delivery."
        }
      },
      "id": "Notification"
    },
    "PullRequestFilter": {
      "type": "object",
      "properties": {
        "invertRegex": {
          "type": "boolean",
          "description": "If true, branches that do NOT match the git_ref will trigger a build."
        },
        "commentControl": {
          "enum": [
            "COMMENTS_DISABLED",
            "COMMENTS_ENABLED",
            "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
          ],
          "description": "Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.",
          "type": "string",
          "enumDescriptions": [
            "Do not require comments on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on external contributors' Pull Requests before builds are triggered."
          ]
        },
        "branch": {
          "description": "Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        }
      },
      "description": "PullRequestFilter contains filter properties for matching GitHub Pull Requests.",
      "id": "PullRequestFilter"
    },
    "UpdateWorkerPoolOperationMetadata": {
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        }
      },
      "id": "UpdateWorkerPoolOperationMetadata",
      "type": "object",
      "description": "Metadata for the `UpdateWorkerPool` operation."
    },
    "NetworkConfig": {
      "properties": {
        "peeredNetwork": {
          "type": "string",
          "description": "Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)"
        },
        "egressOption": {
          "description": "Option to configure network egress for the workers.",
          "enumDescriptions": [
            "If set, defaults to PUBLIC_EGRESS.",
            "If set, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured.",
            "If set, workers are created with a public address which allows for public internet egress."
          ],
          "enum": [
            "EGRESS_OPTION_UNSPECIFIED",
            "NO_PUBLIC_EGRESS",
            "PUBLIC_EGRESS"
          ],
          "type": "string"
        }
      },
      "id": "NetworkConfig",
      "description": "Defines the network configuration for the pool.",
      "type": "object"
    },
    "BuildOptions": {
      "properties": {
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build."
        },
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.",
          "type": "string",
          "format": "int64"
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "sourceProvenanceHash": {
          "items": {
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ],
            "type": "string",
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ]
          },
          "type": "array",
          "description": "Requested hash for SourceProvenance."
        },
        "logStreamingOption": {
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ],
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "type": "string",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ]
        },
        "substitutionOption": {
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "type": "string"
        },
        "requestedVerifyOption": {
          "description": "Requested verifiability options.",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ],
          "type": "string"
        },
        "workerPool": {
          "type": "string",
          "description": "This field deprecated; please use `pool.name` instead."
        },
        "logging": {
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "type": "string",
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).",
            "Turn off all logging. No build logs will be captured."
          ]
        },
        "pool": {
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
          "$ref": "PoolOption"
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "machineType": {
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ],
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string",
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ]
        }
      },
      "id": "BuildOptions",
      "type": "object",
      "description": "Optional arguments to enable specific features of builds."
    },
    "Artifacts": {
      "id": "Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        }
      }
    },
    "HTTPDelivery": {
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "id": "HTTPDelivery",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI to which JSON-containing HTTP POST requests should be sent."
        }
      },
      "type": "object"
    },
    "PubsubConfig": {
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SUBSCRIPTION_DELETED",
            "TOPIC_DELETED",
            "SUBSCRIPTION_MISCONFIGURED"
          ],
          "enumDescriptions": [
            "The subscription configuration has not been checked.",
            "The Pub/Sub subscription is properly configured.",
            "The subscription has been deleted.",
            "The topic has been deleted.",
            "Some of the subscription's field are misconfigured."
          ],
          "type": "string",
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests."
        },
        "topic": {
          "description": "The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.",
          "type": "string"
        },
        "subscription": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`."
        },
        "serviceAccountEmail": {
          "description": "Service account that will make the push request.",
          "type": "string"
        }
      },
      "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.",
      "type": "object",
      "id": "PubsubConfig"
    },
    "WorkerPool": {
      "properties": {
        "etag": {
          "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.",
          "type": "string",
          "readOnly": true
        },
        "uid": {
          "description": "Output only. A unique identifier for the `WorkerPool`.",
          "readOnly": true,
          "type": "string"
        },
        "deleteTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
          "type": "string"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations."
        },
        "privatePoolV1Config": {
          "$ref": "PrivatePoolV1Config",
          "description": "Private Pool using a v1 configuration."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
          "readOnly": true
        },
        "displayName": {
          "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
          "readOnly": true
        },
        "updateTime": {
          "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "state": {
          "description": "Output only. `WorkerPool` state.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "State of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED"
          ]
        }
      },
      "description": "Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).",
      "type": "object",
      "id": "WorkerPool"
    },
    "WebhookConfig": {
      "type": "object",
      "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.",
      "properties": {
        "secret": {
          "description": "Required. Resource name for the secret required as a URL parameter.",
          "type": "string"
        },
        "state": {
          "enumDescriptions": [
            "The webhook auth configuration not been checked.",
            "The auth configuration is properly setup.",
            "The secret provided in auth_method has been deleted."
          ],
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SECRET_DELETED"
          ]
        }
      },
      "id": "WebhookConfig"
    },
    "ApprovalConfig": {
      "type": "object",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "id": "ApprovalConfig"
    },
    "PushFilter": {
      "type": "object",
      "id": "PushFilter",
      "description": "Push contains filter properties for matching GitHub git pushes.",
      "properties": {
        "branch": {
          "type": "string",
          "description": "Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "tag": {
          "description": "Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "When true, only trigger a build if the revision regex does NOT match the git_ref regex."
        }
      }
    },
    "Results": {
      "type": "object",
      "properties": {
        "artifactTiming": {
          "$ref": "TimeSpan",
          "description": "Time to push all non-container artifacts."
        },
        "buildStepOutputs": {
          "items": {
            "type": "string",
            "format": "byte"
          },
          "type": "array",
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored."
        },
        "buildStepImages": {
          "items": {
            "type": "string"
          },
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array"
        },
        "numArtifacts": {
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded.",
          "type": "string",
          "format": "int64"
        },
        "images": {
          "type": "array",
          "description": "Container images that were built as a part of the build.",
          "items": {
            "$ref": "BuiltImage"
          }
        },
        "artifactManifest": {
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded.",
          "type": "string"
        }
      },
      "id": "Results",
      "description": "Artifacts created by the build pipeline."
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "Hash": {
      "description": "Container message for hash values.",
      "type": "object",
      "id": "Hash",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ],
          "description": "The type of hash that was performed."
        },
        "value": {
          "format": "byte",
          "type": "string",
          "description": "The hash value."
        }
      }
    },
    "StorageSourceManifest": {
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "generation": {
          "format": "int64",
          "type": "string",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used."
        },
        "object": {
          "description": "Google Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        }
      },
      "description": "Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "type": "object",
      "id": "StorageSourceManifest"
    },
    "SourceProvenance": {
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "properties": {
        "resolvedStorageSourceManifest": {
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
          "$ref": "StorageSourceManifest"
        },
        "fileHashes": {
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "FileHashes"
          }
        },
        "resolvedStorageSource": {
          "$ref": "StorageSource",
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved."
        },
        "resolvedRepoSource": {
          "$ref": "RepoSource",
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved."
        }
      },
      "type": "object",
      "id": "SourceProvenance"
    },
    "PoolOption": {
      "id": "PoolOption",
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}"
        }
      }
    },
    "CancelOperationRequest": {
      "type": "object",
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest",
      "properties": {}
    },
    "GitHubEventsConfig": {
      "type": "object",
      "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.",
      "properties": {
        "installationId": {
          "format": "int64",
          "description": "The installationID that emits the GitHub event.",
          "type": "string"
        },
        "enterpriseConfigResourceName": {
          "type": "string",
          "description": "Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\""
        },
        "name": {
          "description": "Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\".",
          "type": "string"
        },
        "push": {
          "description": "filter to match changes in refs like branches, tags.",
          "$ref": "PushFilter"
        },
        "owner": {
          "description": "Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\".",
          "type": "string"
        },
        "pullRequest": {
          "description": "filter to match changes in pull requests.",
          "$ref": "PullRequestFilter"
        }
      },
      "id": "GitHubEventsConfig"
    },
    "ApproveBuildRequest": {
      "description": "Request to approve or reject a pending build.",
      "id": "ApproveBuildRequest",
      "properties": {
        "approvalResult": {
          "description": "Approval decision and metadata.",
          "$ref": "ApprovalResult"
        }
      },
      "type": "object"
    },
    "NotifierSpec": {
      "type": "object",
      "description": "NotifierSpec is the configuration container for notifications.",
      "id": "NotifierSpec",
      "properties": {
        "notification": {
          "$ref": "Notification",
          "description": "The configuration of this particular notifier."
        },
        "secrets": {
          "type": "array",
          "description": "Configurations for secret resources used by this particular notifier.",
          "items": {
            "$ref": "NotifierSecret"
          }
        }
      }
    },
    "BuildApproval": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "ApprovalResult",
          "readOnly": true,
          "description": "Output only. Result of manual approval for this Build."
        },
        "config": {
          "readOnly": true,
          "description": "Output only. Configuration for manual approval of this build.",
          "$ref": "ApprovalConfig"
        },
        "state": {
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "description": "Output only. The state of this build's approval.",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "type": "string"
        }
      },
      "id": "BuildApproval",
      "description": "BuildApproval describes a build's approval configuration, state, and result."
    },
    "FailureInfo": {
      "id": "FailureInfo",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "description": "The name of the failure.",
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "type": "string"
        },
        "detail": {
          "description": "Explains the failure issue in more detail using hard-coded text.",
          "type": "string"
        }
      },
      "description": "A fatal problem encountered during the execution of the build."
    },
    "ListWorkerPoolsResponse": {
      "description": "Response containing existing `WorkerPools`.",
      "type": "object",
      "id": "ListWorkerPoolsResponse",
      "properties": {
        "nextPageToken": {
          "description": "Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results.",
          "type": "string"
        },
        "workerPools": {
          "items": {
            "$ref": "WorkerPool"
          },
          "type": "array",
          "description": "`WorkerPools` for the specified project."
        }
      }
    },
    "RunBuildTriggerRequest": {
      "description": "Specifies a build trigger to run and the source to use.",
      "id": "RunBuildTriggerRequest",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project."
        },
        "source": {
          "$ref": "RepoSource",
          "description": "Source to build against this trigger."
        },
        "triggerId": {
          "description": "Required. ID of the trigger.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GitHubEnterpriseConfig": {
      "type": "object",
      "id": "GitHubEnterpriseConfig",
      "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
      "properties": {
        "sslCa": {
          "description": "Optional. SSL certificate to use for requests to GitHub Enterprise.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time when the installation was associated with the project.",
          "type": "string"
        },
        "secrets": {
          "$ref": "GitHubEnterpriseSecrets",
          "description": "Names of secrets in Secret Manager."
        },
        "appId": {
          "type": "string",
          "format": "int64",
          "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server."
        },
        "peeredNetwork": {
          "type": "string",
          "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project."
        },
        "webhookKey": {
          "type": "string",
          "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
        },
        "displayName": {
          "description": "Name to display for this config.",
          "type": "string"
        },
        "name": {
          "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\"",
          "type": "string"
        },
        "hostUrl": {
          "type": "string",
          "description": "The URL of the github enterprise host the configuration is for."
        }
      }
    },
    "Warning": {
      "id": "Warning",
      "properties": {
        "priority": {
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "description": "The priority for this warning.",
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Explanation of the warning generated."
        }
      },
      "type": "object",
      "description": "A non-fatal problem encountered during the execution of the build."
    },
    "ProcessAppManifestCallbackOperationMetadata": {
      "id": "ProcessAppManifestCallbackOperationMetadata",
      "description": "Metadata for `ProcessAppManifestCallback` operation.",
      "type": "object",
      "properties": {
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      }
    },
    "OperationMetadata": {
      "type": "object",
      "description": "Represents the metadata of the long-running operation.",
      "id": "OperationMetadata",
      "properties": {
        "endTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time the operation finished running."
        },
        "statusDetail": {
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true
        },
        "target": {
          "readOnly": true,
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation."
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time the operation was created."
        },
        "apiVersion": {
          "type": "string",
          "description": "Output only. API version used to start the operation.",
          "readOnly": true
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        }
      }
    },
    "Operation": {
      "type": "object",
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        }
      }
    },
    "Secret": {
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "type": "string",
          "description": "Cloud KMS key name to use to decrypt these envs."
        },
        "secretEnv": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          }
        }
      },
      "id": "Secret",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials."
    },
    "ReceiveTriggerWebhookResponse": {
      "properties": {},
      "description": "ReceiveTriggerWebhookResponse [Experimental] is the response object for the ReceiveTriggerWebhook method.",
      "type": "object",
      "id": "ReceiveTriggerWebhookResponse"
    },
    "ListGithubEnterpriseConfigsResponse": {
      "description": "RPC response object returned by ListGithubEnterpriseConfigs RPC method.",
      "type": "object",
      "properties": {
        "configs": {
          "description": "A list of GitHubEnterpriseConfigs",
          "type": "array",
          "items": {
            "$ref": "GitHubEnterpriseConfig"
          }
        }
      },
      "id": "ListGithubEnterpriseConfigsResponse"
    },
    "RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "id": "RepoSource",
      "type": "object",
      "properties": {
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed."
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "Name of the Cloud Source Repository."
        },
        "substitutions": {
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        }
      }
    },
    "SMTPDelivery": {
      "type": "object",
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification.",
      "id": "SMTPDelivery",
      "properties": {
        "server": {
          "description": "The address of the SMTP server.",
          "type": "string"
        },
        "fromAddress": {
          "description": "This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender.",
          "type": "string"
        },
        "port": {
          "description": "The SMTP port of the server.",
          "type": "string"
        },
        "password": {
          "$ref": "NotifierSecretRef",
          "description": "The SMTP sender's password."
        },
        "senderAddress": {
          "type": "string",
          "description": "This is the SMTP account/email that is used to send the message."
        },
        "recipientAddresses": {
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NotifierMetadata": {
      "properties": {
        "notifier": {
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"/:\". For example: \"gcr.io/my-project/notifiers/smtp:1.2.34\".",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\"."
        }
      },
      "id": "NotifierMetadata",
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier.",
      "type": "object"
    },
    "UpdateGitHubEnterpriseConfigOperationMetadata": {
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "id": "UpdateGitHubEnterpriseConfigOperationMetadata"
    },
    "SecretManagerSecret": {
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "properties": {
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*",
          "type": "string"
        },
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        }
      },
      "id": "SecretManagerSecret",
      "type": "object"
    },
    "Source": {
      "type": "object",
      "properties": {
        "storageSourceManifest": {
          "$ref": "StorageSourceManifest",
          "description": "If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher)."
        },
        "storageSource": {
          "$ref": "StorageSource",
          "description": "If provided, get the source from this location in Google Cloud Storage."
        },
        "repoSource": {
          "description": "If provided, get the source from this location in a Cloud Source Repository.",
          "$ref": "RepoSource"
        }
      },
      "id": "Source",
      "description": "Location of the source in a supported storage service."
    },
    "SlackDelivery": {
      "id": "SlackDelivery",
      "properties": {
        "webhookUri": {
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel.",
          "$ref": "NotifierSecretRef"
        }
      },
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks.",
      "type": "object"
    },
    "ListBuildsResponse": {
      "id": "ListBuildsResponse",
      "description": "Response including listed builds.",
      "properties": {
        "builds": {
          "description": "Builds will be sorted by `create_time`, descending.",
          "items": {
            "$ref": "Build"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to receive the next page of results. This will be absent if the end of the response list has been reached.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArtifactResult": {
      "id": "ArtifactResult",
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "FileHashes"
          },
          "description": "The file hash of the artifact."
        },
        "location": {
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeleteGitHubEnterpriseConfigOperationMetadata": {
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation.",
      "type": "object",
      "properties": {
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        }
      },
      "id": "DeleteGitHubEnterpriseConfigOperationMetadata"
    },
    "GitFileSource": {
      "id": "GitFileSource",
      "description": "GitFileSource describes a file within a (possibly remote) code repository.",
      "properties": {
        "revision": {
          "type": "string",
          "description": "The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path."
        },
        "uri": {
          "description": "The URI of the repo (optional). If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        },
        "repoType": {
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB"
          ],
          "type": "string",
          "enumDescriptions": [
            "The default, unknown repo type.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise)."
          ],
          "description": "See RepoType above."
        },
        "path": {
          "description": "The path of the file, with the repo root as the root of the path.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GitRepoSource": {
      "properties": {
        "uri": {
          "description": "The URI of the repo (required).",
          "type": "string"
        },
        "repoType": {
          "enumDescriptions": [
            "The default, unknown repo type.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise)."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB"
          ],
          "description": "See RepoType below."
        },
        "ref": {
          "description": "The branch or tag to use. Must start with \"refs/\" (required).",
          "type": "string"
        }
      },
      "id": "GitRepoSource",
      "description": "GitRepoSource describes a repo and ref of a code repository.",
      "type": "object"
    },
    "RetryBuildRequest": {
      "type": "object",
      "id": "RetryBuildRequest",
      "properties": {
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`"
        },
        "id": {
          "type": "string",
          "description": "Required. Build ID of the original build."
        }
      },
      "description": "Specifies a build to retry."
    },
    "CreateWorkerPoolOperationMetadata": {
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "workerPool": {
          "type": "string",
          "description": "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`."
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "type": "object",
      "id": "CreateWorkerPoolOperationMetadata",
      "description": "Metadata for the `CreateWorkerPool` operation."
    },
    "ApprovalResult": {
      "properties": {
        "comment": {
          "description": "Optional. An optional comment for this manual approval result.",
          "type": "string"
        },
        "approverAccount": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called."
        },
        "url": {
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.",
          "type": "string"
        },
        "approvalTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time when the approval decision was made.",
          "format": "google-datetime"
        },
        "decision": {
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ],
          "description": "Required. The decision of this manual approval.",
          "type": "string"
        }
      },
      "id": "ApprovalResult",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "type": "object"
    },
    "BuildTrigger": {
      "type": "object",
      "id": "BuildTrigger",
      "description": "Configuration for an automated build in response to source repository changes.",
      "properties": {
        "triggerTemplate": {
          "$ref": "RepoSource",
          "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`."
        },
        "description": {
          "description": "Human-readable description of this trigger.",
          "type": "string"
        },
        "approvalConfig": {
          "$ref": "ApprovalConfig",
          "description": "Configuration for manual approval to start a build invocation of this BuildTrigger."
        },
        "filename": {
          "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).",
          "type": "string"
        },
        "github": {
          "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
          "$ref": "GitHubEventsConfig"
        },
        "gitFileSource": {
          "description": "The file source describing the local or remote Build template.",
          "$ref": "GitFileSource"
        },
        "name": {
          "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
          "type": "string"
        },
        "includedFiles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build."
        },
        "tags": {
          "description": "Tags for annotation of a `BuildTrigger`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "substitutions": {
          "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "disabled": {
          "description": "If true, the trigger will never automatically execute a build.",
          "type": "boolean"
        },
        "build": {
          "description": "Contents of the build template.",
          "$ref": "Build"
        },
        "resourceName": {
          "type": "string",
          "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
        },
        "eventType": {
          "enum": [
            "EVENT_TYPE_UNSPECIFIED",
            "REPO",
            "WEBHOOK",
            "PUBSUB",
            "MANUAL"
          ],
          "description": "Optional. EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field is optional but will be validated against the rest of the configuration if it is set.",
          "enumDescriptions": [
            "EVENT_TYPE_UNSPECIFIED event_types are ignored.",
            "REPO corresponds to the supported VCS integrations.",
            "WEBHOOK corresponds to webhook triggers.",
            "PUBSUB corresponds to pubsub triggers.",
            "MANUAL corresponds to manual-only invoked triggers."
          ],
          "type": "string"
        },
        "sourceToBuild": {
          "$ref": "GitRepoSource",
          "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
        },
        "webhookConfig": {
          "$ref": "WebhookConfig",
          "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
        },
        "serviceAccount": {
          "type": "string",
          "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`"
        },
        "ignoredFiles": {
          "items": {
            "type": "string"
          },
          "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Output only. Unique identifier of the trigger.",
          "readOnly": true
        },
        "autodetect": {
          "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
          "type": "boolean"
        },
        "pubsubConfig": {
          "$ref": "PubsubConfig",
          "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
        },
        "filter": {
          "type": "string",
          "description": "A Common Expression Language string."
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time when the trigger was created."
        }
      }
    },
    "WorkerConfig": {
      "description": "Defines the configuration to be used for creating workers in the pool.",
      "type": "object",
      "properties": {
        "machineType": {
          "description": "Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.",
          "type": "string"
        },
        "diskSizeGb": {
          "type": "string",
          "format": "int64",
          "description": "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 1000. If `0` is specified, Cloud Build will use a standard disk size."
        }
      },
      "id": "WorkerConfig"
    },
    "GoogleDevtoolsCloudbuildV2OperationMetadata": {
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "requestedCancellation": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "target": {
          "readOnly": true,
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "statusMessage": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "endTime": {
          "readOnly": true,
          "description": "Output only. The time the operation finished running.",
          "format": "google-datetime",
          "type": "string"
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        }
      },
      "description": "Represents the metadata of the long-running operation.",
      "id": "GoogleDevtoolsCloudbuildV2OperationMetadata",
      "type": "object"
    },
    "Build": {
      "properties": {
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ",
          "type": "string"
        },
        "results": {
          "readOnly": true,
          "$ref": "Results",
          "description": "Output only. Results of the build."
        },
        "queueTtl": {
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "format": "google-duration",
          "type": "string"
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "Warning"
          },
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "readOnly": true
        },
        "statusDetail": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Customer-readable message about the current status."
        },
        "logUrl": {
          "readOnly": true,
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "type": "string"
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions data for `Build` resource."
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`."
        },
        "artifacts": {
          "$ref": "Artifacts",
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps."
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "description": "Output only. Status of the build.",
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "readOnly": true
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
          "type": "string",
          "readOnly": true
        },
        "approval": {
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "readOnly": true,
          "$ref": "BuildApproval"
        },
        "finishTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution."
        },
        "availableSecrets": {
          "$ref": "Secrets",
          "description": "Secrets and secret environment variables."
        },
        "secrets": {
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
          "items": {
            "$ref": "Secret"
          },
          "type": "array"
        },
        "timing": {
          "additionalProperties": {
            "$ref": "TimeSpan"
          },
          "type": "object",
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "readOnly": true
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time at which the request to create the build was received.",
          "type": "string",
          "format": "google-datetime"
        },
        "sourceProvenance": {
          "readOnly": true,
          "$ref": "SourceProvenance",
          "description": "Output only. A permanent fixed identifier for source."
        },
        "failureInfo": {
          "description": "Output only. Contains information about the build when status=FAILURE.",
          "$ref": "FailureInfo",
          "readOnly": true
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`."
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ID of the project."
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array"
        },
        "source": {
          "$ref": "Source",
          "description": "The location of the source files to build."
        },
        "options": {
          "$ref": "BuildOptions",
          "description": "Special options for this build."
        },
        "steps": {
          "items": {
            "$ref": "BuildStep"
          },
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array"
        },
        "timeout": {
          "type": "string",
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "format": "google-duration"
        }
      },
      "id": "Build",
      "type": "object",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA."
    },
    "BuildStep": {
      "id": "BuildStep",
      "type": "object",
      "properties": {
        "volumes": {
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "items": {
            "$ref": "Volume"
          },
          "type": "array"
        },
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "format": "google-duration"
        },
        "status": {
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "readOnly": true
        },
        "args": {
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`."
        },
        "script": {
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pullTiming": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "readOnly": true
        },
        "env": {
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "timing": {
          "$ref": "TimeSpan",
          "readOnly": true,
          "description": "Output only. Stores timing information for executing this build step."
        },
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.",
          "type": "string"
        }
      },
      "description": "A step in the build pipeline."
    },
    "NotifierSecret": {
      "properties": {
        "name": {
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\".",
          "type": "string"
        },
        "value": {
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects/my-project/secrets/my-secret/versions/latest\".",
          "type": "string"
        }
      },
      "type": "object",
      "id": "NotifierSecret",
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path."
    }
  },
  "batchPath": "batch",
  "revision": "20211029",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "title": "Cloud Build API",
  "ownerDomain": "google.com",
  "resources": {
    "projects": {
      "resources": {
        "builds": {
          "methods": {
            "create": {
              "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
              "id": "cloudbuild.projects.builds.create",
              "path": "v1/projects/{projectId}/builds",
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "Build"
              },
              "parameterOrder": [
                "projectId"
              ],
              "flatPath": "v1/projects/{projectId}/builds",
              "parameters": {
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
                },
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST"
            },
            "approve": {
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/builds/[^/]+$",
                  "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "cloudbuild.projects.builds.approve",
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/projects/{projectsId}/builds/{buildsId}:approve",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "ApproveBuildRequest"
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
              "path": "v1/{+name}:approve"
            },
            "retry": {
              "parameters": {
                "id": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. Build ID of the original build."
                },
                "projectId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the project."
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/projects/{projectId}/builds/{id}:retry",
              "flatPath": "v1/projects/{projectId}/builds/{id}:retry",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "RetryBuildRequest"
              },
              "httpMethod": "POST",
              "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
              "id": "cloudbuild.projects.builds.retry",
              "parameterOrder": [
                "projectId",
                "id"
              ]
            },
            "get": {
              "id": "cloudbuild.projects.builds.get",
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
              "path": "v1/projects/{projectId}/builds/{id}",
              "flatPath": "v1/projects/{projectId}/builds/{id}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Build"
              },
              "httpMethod": "GET",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "id": {
                  "description": "Required. ID of the build.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                  "location": "query"
                }
              }
            },
            "list": {
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Number of results to return in the list.",
                  "type": "integer",
                  "format": "int32",
                  "location": "query"
                },
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`"
                },
                "projectId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the project."
                },
                "filter": {
                  "description": "The raw filter text to constrain the results.",
                  "location": "query",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "path": "v1/projects/{projectId}/builds",
              "parameterOrder": [
                "projectId"
              ],
              "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
              "response": {
                "$ref": "ListBuildsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectId}/builds",
              "id": "cloudbuild.projects.builds.list"
            },
            "cancel": {
              "description": "Cancels a build in progress.",
              "httpMethod": "POST",
              "request": {
                "$ref": "CancelBuildRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "id": {
                  "description": "Required. ID of the build.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "response": {
                "$ref": "Build"
              },
              "flatPath": "v1/projects/{projectId}/builds/{id}:cancel",
              "path": "v1/projects/{projectId}/builds/{id}:cancel",
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "id": "cloudbuild.projects.builds.cancel"
            }
          }
        },
        "githubEnterpriseConfigs": {
          "methods": {
            "create": {
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "description": "Create an association between a GCP project and a GitHub Enterprise server.",
              "parameters": {
                "projectId": {
                  "description": "ID of the project.",
                  "type": "string",
                  "location": "query"
                },
                "gheConfigId": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig’s resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character"
                },
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.create",
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "parameterOrder": [
                "parent"
              ]
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "List all GitHubEnterpriseConfigs for a given project.",
              "parameters": {
                "projectId": {
                  "location": "query",
                  "type": "string",
                  "description": "ID of the project"
                },
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}"
                }
              },
              "httpMethod": "GET",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.list",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "response": {
                "$ref": "ListGithubEnterpriseConfigsResponse"
              },
              "parameterOrder": [
                "parent"
              ]
            },
            "delete": {
              "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.githubEnterpriseConfigs.delete",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "httpMethod": "DELETE",
              "parameters": {
                "configId": {
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                  "type": "string",
                  "location": "query"
                },
                "projectId": {
                  "description": "ID of the project",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "required": true,
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$"
                }
              },
              "path": "v1/{+name}"
            },
            "patch": {
              "httpMethod": "PATCH",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query",
                  "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed."
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "location": "path",
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$"
                }
              },
              "path": "v1/{+name}",
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "id": "cloudbuild.projects.githubEnterpriseConfigs.patch",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "description": "Update an association between a GCP project and a GitHub Enterprise server."
            },
            "get": {
              "path": "v1/{+name}",
              "response": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "description": "Retrieve a GitHubEnterpriseConfig.",
              "httpMethod": "GET",
              "id": "cloudbuild.projects.githubEnterpriseConfigs.get",
              "parameters": {
                "configId": {
                  "type": "string",
                  "location": "query",
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                },
                "projectId": {
                  "description": "ID of the project",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\"",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}"
            }
          }
        },
        "locations": {
          "resources": {
            "triggers": {
              "methods": {
                "run": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$"
                    }
                  },
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Runs a `BuildTrigger` at a particular source revision.",
                  "path": "v1/{+name}:run",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:run",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "RunBuildTriggerRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.run"
                },
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListBuildTriggersResponse"
                  },
                  "id": "cloudbuild.projects.locations.triggers.list",
                  "description": "Lists existing `BuildTrigger`s. This API is experimental.",
                  "parameters": {
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Number of results to return in the list.",
                      "format": "int32"
                    },
                    "projectId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. ID of the project for which to list BuildTriggers."
                    },
                    "parent": {
                      "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string"
                    },
                    "pageToken": {
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
                  "path": "v1/{+parent}/triggers"
                },
                "patch": {
                  "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.patch",
                  "parameterOrder": [
                    "resourceName"
                  ],
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "parameters": {
                    "triggerId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the `BuildTrigger` to update."
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the project that owns the trigger."
                    },
                    "resourceName": {
                      "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "path": "v1/{+resourceName}",
                  "httpMethod": "PATCH"
                },
                "get": {
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.triggers.get",
                  "parameters": {
                    "triggerId": {
                      "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                      "location": "query",
                      "type": "string"
                    },
                    "projectId": {
                      "location": "query",
                      "description": "Required. ID of the project that owns the trigger.",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                    }
                  },
                  "description": "Returns information about a `BuildTrigger`. This API is experimental."
                },
                "create": {
                  "path": "v1/{+parent}/triggers",
                  "id": "cloudbuild.projects.locations.triggers.create",
                  "response": {
                    "$ref": "BuildTrigger"
                  },
                  "description": "Creates a new `BuildTrigger`. This API is experimental.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`",
                      "location": "path"
                    },
                    "projectId": {
                      "description": "Required. ID of the project for which to configure automatic builds.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "BuildTrigger"
                  },
                  "httpMethod": "POST"
                },
                "delete": {
                  "path": "v1/{+name}",
                  "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "location": "path"
                    },
                    "triggerId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. ID of the `BuildTrigger` to delete."
                    },
                    "projectId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. ID of the project that owns the trigger."
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "cloudbuild.projects.locations.triggers.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "webhook": {
                  "path": "v1/{+name}:webhook",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:webhook",
                  "httpMethod": "POST",
                  "id": "cloudbuild.projects.locations.triggers.webhook",
                  "parameters": {
                    "secret": {
                      "location": "query",
                      "description": "Secret token used for authorization if an OAuth token isn't provided.",
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Project in which the specified trigger lives"
                    },
                    "trigger": {
                      "location": "query",
                      "type": "string",
                      "description": "Name of the trigger to run the payload against"
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
                      "location": "path",
                      "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ReceiveTriggerWebhookResponse"
                  },
                  "request": {
                    "$ref": "HttpBody"
                  },
                  "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger."
                }
              }
            },
            "workerPools": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "A page token, received from a previous `ListWorkerPools` call. Provide this to retrieve the subsequent page.",
                      "location": "query"
                    },
                    "parent": {
                      "required": true,
                      "description": "Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/{location}`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string"
                    },
                    "pageSize": {
                      "format": "int32",
                      "type": "integer",
                      "description": "The maximum number of `WorkerPool`s to return. The service may return fewer than this value. If omitted, the server will use a sensible default.",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "ListWorkerPoolsResponse"
                  },
                  "id": "cloudbuild.projects.locations.workerPools.list",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "path": "v1/{+parent}/workerPools",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Lists `WorkerPool`s.",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "create": {
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "workerPoolId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/."
                    },
                    "validateOnly": {
                      "type": "boolean",
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "location": "query"
                    },
                    "parent": {
                      "description": "Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "description": "Creates a `WorkerPool`.",
                  "id": "cloudbuild.projects.locations.workerPools.create",
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "path": "v1/{+parent}/workerPools",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST"
                },
                "get": {
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "WorkerPool"
                  },
                  "id": "cloudbuild.projects.locations.workerPools.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Returns details of a `WorkerPool`.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}"
                },
                "delete": {
                  "description": "Deletes a `WorkerPool`.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "parameters": {
                    "validateOnly": {
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "type": "boolean",
                      "location": "query"
                    },
                    "allowMissing": {
                      "type": "boolean",
                      "description": "If set to true, and the `WorkerPool` is not found, the request will succeed but no action will be taken on the server.",
                      "location": "query"
                    },
                    "etag": {
                      "type": "string",
                      "description": "Optional. If provided, it must match the server's etag on the workerpool for the request to be processed.",
                      "location": "query"
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{workerPool}/workerPools/{workerPool}`."
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "DELETE",
                  "id": "cloudbuild.projects.locations.workerPools.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.workerPools.patch",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
                      "type": "string",
                      "location": "path"
                    },
                    "validateOnly": {
                      "location": "query",
                      "description": "If set, validate the request and preview the response, but do not actually post it.",
                      "type": "boolean"
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "type": "string",
                      "description": "A mask specifying which fields in `worker_pool` to update.",
                      "location": "query"
                    }
                  },
                  "httpMethod": "PATCH",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "description": "Updates a `WorkerPool`.",
                  "request": {
                    "$ref": "WorkerPool"
                  }
                }
              }
            },
            "githubEnterpriseConfigs": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Retrieve a GitHubEnterpriseConfig.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "path": "v1/{+name}",
                  "parameters": {
                    "configId": {
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\"",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$"
                    },
                    "projectId": {
                      "location": "query",
                      "description": "ID of the project",
                      "type": "string"
                    }
                  },
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.get"
                },
                "create": {
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "ID of the project.",
                      "location": "query"
                    },
                    "gheConfigId": {
                      "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig’s resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.create",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Create an association between a GCP project and a GitHub Enterprise server.",
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "list": {
                  "response": {
                    "$ref": "ListGithubEnterpriseConfigsResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/githubEnterpriseConfigs",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.list",
                  "description": "List all GitHubEnterpriseConfigs for a given project.",
                  "parameters": {
                    "projectId": {
                      "type": "string",
                      "description": "ID of the project",
                      "location": "query"
                    },
                    "parent": {
                      "required": true,
                      "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET"
                },
                "patch": {
                  "parameters": {
                    "name": {
                      "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\"",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "location": "path"
                    },
                    "updateMask": {
                      "type": "string",
                      "location": "query",
                      "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.patch",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+name}",
                  "httpMethod": "PATCH",
                  "description": "Update an association between a GCP project and a GitHub Enterprise server.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "GitHubEnterpriseConfig"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}"
                },
                "delete": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
                  "id": "cloudbuild.projects.locations.githubEnterpriseConfigs.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/githubEnterpriseConfigs/{$config_id}\"",
                      "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    },
                    "configId": {
                      "location": "query",
                      "type": "string",
                      "description": "Unique identifier of the `GitHubEnterpriseConfig`"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "ID of the project",
                      "location": "query"
                    }
                  },
                  "path": "v1/{+name}",
                  "description": "Delete an association between a GCP project and a GitHub Enterprise server."
                }
              }
            },
            "builds": {
              "methods": {
                "create": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "cloudbuild.projects.locations.builds.create",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+parent}/builds",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "Build"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "httpMethod": "POST",
                  "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`",
                      "type": "string",
                      "required": true
                    },
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "location": "query",
                      "type": "string"
                    }
                  }
                },
                "get": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}",
                  "response": {
                    "$ref": "Build"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "id": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the build."
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Required. ID of the project.",
                      "location": "query"
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`"
                    }
                  },
                  "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
                  "path": "v1/{+name}",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.builds.get"
                },
                "list": {
                  "id": "cloudbuild.projects.locations.builds.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more."
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the project."
                    },
                    "filter": {
                      "type": "string",
                      "description": "The raw filter text to constrain the results.",
                      "location": "query"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Number of results to return in the list.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "parent": {
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`",
                      "location": "path"
                    }
                  },
                  "path": "v1/{+parent}/builds",
                  "response": {
                    "$ref": "ListBuildsResponse"
                  },
                  "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "approve": {
                  "path": "v1/{+name}:approve",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "id": "cloudbuild.projects.locations.builds.approve",
                  "parameters": {
                    "name": {
                      "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ApproveBuildRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:approve",
                  "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "retry": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry",
                  "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
                  "request": {
                    "$ref": "RetryBuildRequest"
                  },
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}:retry",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "cloudbuild.projects.locations.builds.retry",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`"
                    }
                  }
                },
                "cancel": {
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel",
                  "httpMethod": "POST",
                  "description": "Cancels a build in progress.",
                  "id": "cloudbuild.projects.locations.builds.cancel",
                  "response": {
                    "$ref": "Build"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CancelBuildRequest"
                  },
                  "path": "v1/{+name}:cancel",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.operations.get",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource.",
                      "location": "path"
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}"
                },
                "cancel": {
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "response": {
                    "$ref": "Empty"
                  },
                  "path": "v1/{+name}:cancel",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "The name of the operation resource to be cancelled.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
                }
              }
            }
          }
        },
        "triggers": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Empty"
              },
              "id": "cloudbuild.projects.triggers.delete",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "parameters": {
                "name": {
                  "location": "query",
                  "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "type": "string"
                },
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "triggerId": {
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the `BuildTrigger` to delete.",
                  "location": "path"
                }
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "httpMethod": "DELETE"
            },
            "list": {
              "path": "v1/projects/{projectId}/triggers",
              "response": {
                "$ref": "ListBuildTriggersResponse"
              },
              "httpMethod": "GET",
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "description": "Number of results to return in the list.",
                  "location": "query",
                  "type": "integer"
                },
                "parent": {
                  "location": "query",
                  "type": "string",
                  "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`"
                },
                "projectId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the project for which to list BuildTriggers."
                },
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string",
                  "location": "query"
                }
              },
              "flatPath": "v1/projects/{projectId}/triggers",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.triggers.list",
              "description": "Lists existing `BuildTrigger`s. This API is experimental.",
              "parameterOrder": [
                "projectId"
              ]
            },
            "webhook": {
              "parameterOrder": [
                "projectId",
                "trigger"
              ],
              "request": {
                "$ref": "HttpBody"
              },
              "flatPath": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "path": "v1/projects/{projectId}/triggers/{trigger}:webhook",
              "id": "cloudbuild.projects.triggers.webhook",
              "parameters": {
                "secret": {
                  "type": "string",
                  "description": "Secret token used for authorization if an OAuth token isn't provided.",
                  "location": "query"
                },
                "projectId": {
                  "description": "Project in which the specified trigger lives",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "trigger": {
                  "description": "Name of the trigger to run the payload against",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "name": {
                  "type": "string",
                  "location": "query",
                  "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                }
              },
              "response": {
                "$ref": "ReceiveTriggerWebhookResponse"
              },
              "httpMethod": "POST",
              "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger."
            },
            "patch": {
              "httpMethod": "PATCH",
              "parameters": {
                "projectId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the project that owns the trigger."
                },
                "triggerId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the `BuildTrigger` to update."
                }
              },
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "id": "cloudbuild.projects.triggers.patch",
              "response": {
                "$ref": "BuildTrigger"
              },
              "request": {
                "$ref": "BuildTrigger"
              },
              "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "run": {
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "id": "cloudbuild.projects.triggers.run",
              "description": "Runs a `BuildTrigger` at a particular source revision.",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "parameters": {
                "projectId": {
                  "location": "path",
                  "required": true,
                  "description": "Required. ID of the project.",
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "location": "query",
                  "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
                },
                "triggerId": {
                  "description": "Required. ID of the trigger.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "request": {
                "$ref": "RepoSource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "path": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "response": {
                "$ref": "Operation"
              }
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.triggers.get",
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "description": "Returns information about a `BuildTrigger`. This API is experimental.",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
                  "location": "query"
                },
                "projectId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the project that owns the trigger."
                },
                "triggerId": {
                  "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "BuildTrigger"
              },
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}"
            },
            "create": {
              "request": {
                "$ref": "BuildTrigger"
              },
              "httpMethod": "POST",
              "id": "cloudbuild.projects.triggers.create",
              "flatPath": "v1/projects/{projectId}/triggers",
              "description": "Creates a new `BuildTrigger`. This API is experimental.",
              "response": {
                "$ref": "BuildTrigger"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/projects/{projectId}/triggers",
              "parameterOrder": [
                "projectId"
              ],
              "parameters": {
                "parent": {
                  "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`",
                  "type": "string",
                  "location": "query"
                },
                "projectId": {
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the project for which to configure automatic builds.",
                  "location": "path"
                }
              }
            }
          }
        }
      }
    },
    "v1": {
      "methods": {
        "webhook": {
          "description": "ReceiveWebhook is called when the API receives a GitHub webhook.",
          "response": {
            "$ref": "Empty"
          },
          "id": "cloudbuild.webhook",
          "parameters": {
            "webhookKey": {
              "location": "query",
              "type": "string",
              "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation."
            }
          },
          "path": "v1/webhook",
          "httpMethod": "POST",
          "flatPath": "v1/webhook",
          "parameterOrder": [],
          "request": {
            "$ref": "HttpBody"
          }
        }
      }
    },
    "operations": {
      "methods": {
        "cancel": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Empty"
          },
          "id": "cloudbuild.operations.cancel",
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "description": "The name of the operation resource to be cancelled.",
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^operations/.*$"
            }
          },
          "flatPath": "v1/operations/{operationsId}:cancel",
          "path": "v1/{+name}:cancel",
          "httpMethod": "POST",
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "get": {
          "parameters": {
            "name": {
              "pattern": "^operations/.*$",
              "required": true,
              "description": "The name of the operation resource.",
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/{+name}",
          "id": "cloudbuild.operations.get",
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/operations/{operationsId}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Operation"
          },
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
        }
      }
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "name": "cloudbuild",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "discoveryVersion": "v1",
  "protocol": "rest",
  "version": "v1",
  "basePath": "",
  "parameters": {
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "alt": {
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "type": "string",
      "default": "json"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    }
  },
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "canonicalName": "Cloud Build"
}

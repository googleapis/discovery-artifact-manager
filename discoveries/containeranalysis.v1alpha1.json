{
  "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.",
  "kind": "discovery#restDescription",
  "batchPath": "batch",
  "servicePath": "",
  "revision": "20220805",
  "title": "Container Analysis API",
  "name": "containeranalysis",
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "$.xgafv": {
      "type": "string",
      "location": "query",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    }
  },
  "ownerName": "Google",
  "protocol": "rest",
  "id": "containeranalysis:v1alpha1",
  "discoveryVersion": "v1",
  "resources": {
    "providers": {
      "resources": {
        "notes": {
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1alpha1/{+name}/occurrences",
                  "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}/occurrences",
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "httpMethod": "GET",
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "description": "The filter expression.",
                      "location": "query"
                    },
                    "name": {
                      "required": true,
                      "pattern": "^providers/[^/]+/notes/[^/]+$",
                      "location": "path",
                      "description": "The name field will contain the note name for example: \"provider/{provider_id}/notes/{note_id}\"",
                      "type": "string"
                    },
                    "pageToken": {
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Number of notes to return in the list.",
                      "format": "int32"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
                  "id": "containeranalysis.providers.notes.occurrences.list"
                }
              }
            }
          },
          "methods": {
            "get": {
              "path": "v1alpha1/{+name}",
              "description": "Returns the requested `Note`.",
              "id": "containeranalysis.providers.notes.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "required": true
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET"
            },
            "setIamPolicy": {
              "parameters": {
                "resource": {
                  "type": "string",
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy",
              "httpMethod": "POST",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "id": "containeranalysis.providers.notes.setIamPolicy"
            },
            "testIamPermissions": {
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions",
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "id": "containeranalysis.providers.notes.testIamPermissions",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "location": "path",
                  "type": "string",
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                }
              }
            },
            "create": {
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "path": "v1alpha1/{+name}/notes",
              "request": {
                "$ref": "Note"
              },
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated",
                  "pattern": "^providers/[^/]+$",
                  "required": true,
                  "location": "path"
                },
                "noteId": {
                  "description": "The ID to use for this note.",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "location": "query",
                  "description": "This field contains the project Id for example: \"projects/{project_id}",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.providers.notes.create",
              "description": "Creates a new `Note`."
            },
            "patch": {
              "id": "containeranalysis.providers.notes.patch",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "location": "path"
                },
                "updateMask": {
                  "description": "The fields to update.",
                  "format": "google-fieldmask",
                  "location": "query",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Note"
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}",
              "description": "Updates an existing `Note`."
            },
            "delete": {
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "path": "v1alpha1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "required": true
                }
              },
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "description": "Deletes the given `Note` from the system.",
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.providers.notes.delete"
            },
            "getIamPolicy": {
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^providers/[^/]+/notes/[^/]+$"
                }
              },
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "id": "containeranalysis.providers.notes.getIamPolicy",
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "path": "v1alpha1/{+resource}:getIamPolicy"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists all `Notes` for a given project.",
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "id": "containeranalysis.providers.notes.list",
              "parameters": {
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "The filter expression."
                },
                "pageSize": {
                  "description": "Number of notes to return in the list.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to provide to skip to a particular spot in the list."
                },
                "name": {
                  "location": "path",
                  "pattern": "^providers/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated"
                },
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\"."
                }
              },
              "path": "v1alpha1/{+name}/notes",
              "response": {
                "$ref": "ListNotesResponse"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ]
            }
          }
        }
      }
    },
    "projects": {
      "resources": {
        "scanConfigs": {
          "methods": {
            "patch": {
              "description": "Updates the scan configuration to a new value.",
              "id": "containeranalysis.projects.scanConfigs.patch",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$",
                  "location": "path",
                  "description": "The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}.",
                  "type": "string"
                },
                "updateMask": {
                  "location": "query",
                  "type": "string",
                  "description": "The fields to update.",
                  "format": "google-fieldmask"
                }
              },
              "request": {
                "$ref": "ScanConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ScanConfig"
              },
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}"
            },
            "list": {
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListScanConfigsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.scanConfigs.list",
              "httpMethod": "GET",
              "path": "v1alpha1/{+parent}/scanConfigs",
              "description": "Lists scan configurations for a project.",
              "parameters": {
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "The number of items to return.",
                  "format": "int32"
                },
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "description": "This containers the project Id i.e.: projects/{project_id}",
                  "location": "path",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "The page token to use for the next request."
                },
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "The filter expression."
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs"
            },
            "get": {
              "id": "containeranalysis.projects.scanConfigs.get",
              "path": "v1alpha1/{+name}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$",
                  "description": "The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id}",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ScanConfig"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "parameterOrder": [
                "name"
              ],
              "description": "Gets a specific scan configuration for a project."
            }
          }
        },
        "operations": {
          "methods": {
            "patch": {
              "id": "containeranalysis.projects.operations.patch",
              "path": "v1alpha1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "required": true,
                  "description": "The name of the Operation. Should be of the form \"projects/{provider_id}/operations/{operation_id}\"."
                }
              },
              "request": {
                "$ref": "UpdateOperationRequest"
              },
              "httpMethod": "PATCH",
              "description": "Updates an existing operation returns an error if operation does not exist. The only valid operations are to update mark the done bit change the result.",
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/operations/{operationsId}"
            },
            "create": {
              "description": "Creates a new `Operation`.",
              "httpMethod": "POST",
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "CreateOperationRequest"
              },
              "path": "v1alpha1/{+parent}/operations",
              "flatPath": "v1alpha1/projects/{projectsId}/operations",
              "parameters": {
                "parent": {
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "The project Id that this operation should be created under."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.operations.create",
              "parameterOrder": [
                "parent"
              ]
            }
          }
        },
        "notes": {
          "methods": {
            "delete": {
              "id": "containeranalysis.projects.notes.delete",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "required": true,
                  "location": "path",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "type": "string"
                }
              },
              "httpMethod": "DELETE",
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "description": "Deletes the given `Note` from the system.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Empty"
              },
              "path": "v1alpha1/{+name}",
              "parameterOrder": [
                "name"
              ]
            },
            "getIamPolicy": {
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:getIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "id": "containeranalysis.projects.notes.getIamPolicy",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "parameters": {
                "resource": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/notes/[^/]+$"
                }
              }
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "parameterOrder": [
                "name"
              ],
              "description": "Returns the requested `Note`.",
              "response": {
                "$ref": "Note"
              },
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\""
                }
              },
              "path": "v1alpha1/{+name}",
              "httpMethod": "GET",
              "id": "containeranalysis.projects.notes.get"
            },
            "list": {
              "response": {
                "$ref": "ListNotesResponse"
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.notes.list",
              "flatPath": "v1alpha1/projects/{projectsId}/notes",
              "parameters": {
                "name": {
                  "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "description": "Number of notes to return in the list.",
                  "type": "integer",
                  "location": "query",
                  "format": "int32"
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "parent": {
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\".",
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string"
                }
              },
              "description": "Lists all `Notes` for a given project.",
              "path": "v1alpha1/{+parent}/notes",
              "parameterOrder": [
                "parent"
              ]
            },
            "testIamPermissions": {
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:testIamPermissions",
              "parameterOrder": [
                "resource"
              ],
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "id": "containeranalysis.projects.notes.testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "parameters": {
                "resource": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                }
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              }
            },
            "create": {
              "httpMethod": "POST",
              "parameters": {
                "noteId": {
                  "description": "The ID to use for this note.",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "description": "This field contains the project Id for example: \"projects/{project_id}",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "name": {
                  "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated",
                  "location": "query",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Note"
              },
              "path": "v1alpha1/{+parent}/notes",
              "id": "containeranalysis.projects.notes.create",
              "request": {
                "$ref": "Note"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes",
              "description": "Creates a new `Note`.",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "setIamPolicy": {
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "Policy"
              },
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "id": "containeranalysis.projects.notes.setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:setIamPolicy",
              "request": {
                "$ref": "SetIamPolicyRequest"
              }
            },
            "patch": {
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "required": true,
                  "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "location": "path"
                },
                "updateMask": {
                  "location": "query",
                  "description": "The fields to update.",
                  "format": "google-fieldmask",
                  "type": "string"
                }
              },
              "description": "Updates an existing `Note`.",
              "path": "v1alpha1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.projects.notes.patch",
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "Note"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "httpMethod": "PATCH"
            }
          },
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "type": "string"
                    },
                    "filter": {
                      "location": "query",
                      "description": "The filter expression.",
                      "type": "string"
                    },
                    "name": {
                      "location": "path",
                      "description": "The name field will contain the note name for example: \"provider/{provider_id}/notes/{note_id}\"",
                      "pattern": "^projects/[^/]+/notes/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Number of notes to return in the list.",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "path": "v1alpha1/{+name}/occurrences",
                  "httpMethod": "GET",
                  "id": "containeranalysis.projects.notes.occurrences.list"
                }
              }
            }
          }
        },
        "occurrences": {
          "methods": {
            "getIamPolicy": {
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "parameters": {
                "resource": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Policy"
              },
              "id": "containeranalysis.projects.occurrences.getIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy"
            },
            "create": {
              "description": "Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.",
              "httpMethod": "POST",
              "id": "containeranalysis.projects.occurrences.create",
              "response": {
                "$ref": "Occurrence"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/occurrences",
              "parameters": {
                "name": {
                  "description": "The name of the project. Should be of the form \"projects/{project_id}\". @Deprecated",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "description": "This field contains the project Id for example: \"projects/{project_id}\"",
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "request": {
                "$ref": "Occurrence"
              }
            },
            "setIamPolicy": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "id": "containeranalysis.projects.occurrences.setIamPolicy",
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "parameters": {
                "resource": {
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "Policy"
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy"
            },
            "get": {
              "response": {
                "$ref": "Occurrence"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "description": "The name of the occurrence of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "required": true,
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.occurrences.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "description": "Returns the requested `Occurrence`.",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET"
            },
            "delete": {
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.projects.occurrences.delete",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Empty"
              },
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "The name of the occurrence in the form of \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "required": true
                }
              },
              "description": "Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource.",
              "path": "v1alpha1/{+name}",
              "httpMethod": "DELETE"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/occurrences",
              "id": "containeranalysis.projects.occurrences.list",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to provide to skip to a particular spot in the list."
                },
                "kind": {
                  "type": "string",
                  "enum": [
                    "KIND_UNSPECIFIED",
                    "PACKAGE_VULNERABILITY",
                    "BUILD_DETAILS",
                    "IMAGE_BASIS",
                    "PACKAGE_MANAGER",
                    "DEPLOYABLE",
                    "DISCOVERY",
                    "ATTESTATION_AUTHORITY",
                    "UPGRADE",
                    "COMPLIANCE",
                    "SBOM",
                    "SPDX_PACKAGE",
                    "SPDX_FILE",
                    "SPDX_RELATIONSHIP",
                    "DSSE_ATTESTATION"
                  ],
                  "enumDescriptions": [
                    "Unknown",
                    "The note and occurrence represent a package vulnerability.",
                    "The note and occurrence assert build provenance.",
                    "This represents an image basis relationship.",
                    "This represents a package installed via a package manager.",
                    "The note and occurrence track deployment events.",
                    "The note and occurrence track the initial discovery status of a resource.",
                    "This represents a logical \"role\" that can attest to artifacts.",
                    "This represents an available software upgrade.",
                    "This represents a compliance check that can be applied to a resource.",
                    "This represents a software bill of materials.",
                    "This represents an SPDX Package.",
                    "This represents an SPDX File.",
                    "This represents an SPDX Relationship.",
                    "This represents a DSSE attestation Note"
                  ],
                  "description": "The kind of occurrences to filter on.",
                  "location": "query"
                },
                "pageSize": {
                  "description": "Number of occurrences to return in the list.",
                  "type": "integer",
                  "location": "query",
                  "format": "int32"
                },
                "filter": {
                  "description": "The filter expression.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "location": "query",
                  "description": "The name field contains the project Id. For example: \"projects/{project_id} @Deprecated",
                  "type": "string"
                },
                "parent": {
                  "description": "This contains the project Id for example: projects/{project_id}.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "response": {
                "$ref": "ListOccurrencesResponse"
              },
              "description": "Lists active `Occurrences` for a given project matching the filters."
            },
            "getVulnerabilitySummary": {
              "parameters": {
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "The filter expression."
                },
                "parent": {
                  "required": true,
                  "location": "path",
                  "description": "This contains the project Id for example: projects/{project_id}",
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences:vulnerabilitySummary",
              "response": {
                "$ref": "GetVulnzOccurrencesSummaryResponse"
              },
              "path": "v1alpha1/{+parent}/occurrences:vulnerabilitySummary",
              "id": "containeranalysis.projects.occurrences.getVulnerabilitySummary",
              "description": "Gets a summary of the number and severity of occurrences.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "testIamPermissions": {
              "id": "containeranalysis.projects.occurrences.testIamPermissions",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
              "httpMethod": "POST",
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "parameters": {
                "resource": {
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameterOrder": [
                "resource"
              ]
            },
            "patch": {
              "id": "containeranalysis.projects.occurrences.patch",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Occurrence"
              },
              "description": "Updates an existing occurrence.",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "parameters": {
                "updateMask": {
                  "description": "The fields to update.",
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string"
                },
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true,
                  "description": "The name of the occurrence. Should be of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\".",
                  "type": "string",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Occurrence"
              }
            },
            "getNotes": {
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}/notes",
              "response": {
                "$ref": "Note"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "The name of the occurrence in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "location": "path",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "id": "containeranalysis.projects.occurrences.getNotes",
              "parameterOrder": [
                "name"
              ],
              "description": "Gets the `Note` attached to the given `Occurrence`.",
              "httpMethod": "GET"
            }
          }
        }
      }
    }
  },
  "baseUrl": "https://containeranalysis.googleapis.com/",
  "schemas": {
    "GoogleDevtoolsContaineranalysisV1alpha1AliasContext": {
      "description": "An alias to a repo revision.",
      "type": "object",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
      "properties": {
        "kind": {
          "description": "The alias kind.",
          "type": "string",
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a ref named \"refs/foo/bar\"."
          ]
        },
        "name": {
          "type": "string",
          "description": "The alias name."
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId": {
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
      "type": "object",
      "properties": {
        "repoName": {
          "type": "string",
          "description": "The name of the repo. Leave empty for the default repo."
        },
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId"
    },
    "GetPolicyOptions": {
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "type": "object",
      "properties": {
        "requestedPolicyVersion": {
          "type": "integer",
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32"
        }
      },
      "id": "GetPolicyOptions"
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
        }
      },
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object"
    },
    "UpdateOperationRequest": {
      "properties": {
        "updateMask": {
          "type": "string",
          "description": "The fields to update.",
          "format": "google-fieldmask"
        },
        "operation": {
          "$ref": "Operation",
          "description": "The operation to create."
        }
      },
      "type": "object",
      "id": "UpdateOperationRequest",
      "description": "Request for updating an existing operation"
    },
    "Attestation": {
      "properties": {
        "pgpSignedAttestation": {
          "$ref": "PgpSignedAttestation"
        }
      },
      "type": "object",
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
      "id": "Attestation"
    },
    "Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "id": "Policy",
      "type": "object",
      "properties": {
        "etag": {
          "format": "byte",
          "type": "string",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "items": {
            "$ref": "Binding"
          },
          "type": "array"
        },
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ComplianceNote": {
      "description": "ComplianceNote encapsulates all information about a specific compliance check.",
      "properties": {
        "title": {
          "description": "The title that identifies this compliance check.",
          "type": "string"
        },
        "scanInstructions": {
          "description": "Serialized scan instructions with a predefined format.",
          "type": "string",
          "format": "byte"
        },
        "cisBenchmark": {
          "description": "Right now we only have one compliance type, but we may add additional types in the future.",
          "$ref": "CisBenchmark"
        },
        "description": {
          "description": "A description about this compliance check.",
          "type": "string"
        },
        "version": {
          "items": {
            "$ref": "ComplianceVersion"
          },
          "type": "array",
          "description": "The OS and config versions the benchmark applies to."
        },
        "remediation": {
          "type": "string",
          "description": "A description of remediation steps if the compliance check fails."
        },
        "rationale": {
          "description": "A rationale for the existence of this compliance check.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ComplianceNote"
    },
    "Version": {
      "properties": {
        "epoch": {
          "description": "Used to correct mistakes in the version numbering scheme.",
          "format": "int32",
          "type": "integer"
        },
        "revision": {
          "type": "string",
          "description": "The iteration of the package build from the above version."
        },
        "name": {
          "description": "The main part of the version name.",
          "type": "string"
        },
        "kind": {
          "enumDescriptions": [
            "A standard package version, defined by the other fields.",
            "A special version representing negative infinity, other fields are ignored.",
            "A special version representing positive infinity, other fields are ignored."
          ],
          "description": "Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
          "enum": [
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ],
          "type": "string"
        },
        "inclusive": {
          "type": "boolean",
          "description": "Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not"
        }
      },
      "id": "Version",
      "description": "Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
      "type": "object"
    },
    "FileHashes": {
      "type": "object",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "Hash"
          },
          "description": "Collection of file hashes."
        }
      },
      "description": "Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.",
      "id": "FileHashes"
    },
    "PgpSignedAttestation": {
      "properties": {
        "pgpKeyId": {
          "description": "The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "SIMPLE_SIGNING_JSON"
          ],
          "enumDescriptions": [
            "`ContentType` is not set.",
            "Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted from `signature` is a JSON blob conforming to the linked schema."
          ]
        },
        "signature": {
          "description": "The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.",
          "type": "string"
        }
      },
      "id": "PgpSignedAttestation",
      "description": "An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
      "type": "object"
    },
    "RelatedUrl": {
      "properties": {
        "label": {
          "type": "string",
          "description": "Label to describe usage of the URL"
        },
        "url": {
          "type": "string",
          "description": "Specific URL to associate with the note"
        }
      },
      "id": "RelatedUrl",
      "type": "object",
      "description": "Metadata for any related URL information"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects": {
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "properties": {
        "timing": {
          "readOnly": true,
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
          "description": "Output only. Stores timing information for pushing all artifact objects."
        },
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "description": "Path globs used to match files in the build's workspace.",
          "type": "array"
        }
      }
    },
    "GetIamPolicyRequest": {
      "type": "object",
      "description": "Request message for `GetIamPolicy` method.",
      "id": "GetIamPolicyRequest",
      "properties": {
        "options": {
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.",
          "$ref": "GetPolicyOptions"
        }
      }
    },
    "Discovery": {
      "properties": {
        "analysisKind": {
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE",
            "SBOM",
            "SPDX_PACKAGE",
            "SPDX_FILE",
            "SPDX_RELATIONSHIP",
            "DSSE_ATTESTATION"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource.",
            "This represents a software bill of materials.",
            "This represents an SPDX Package.",
            "This represents an SPDX File.",
            "This represents an SPDX Relationship.",
            "This represents a DSSE attestation Note"
          ],
          "description": "The kind of analysis that is handled by this discovery."
        }
      },
      "description": "A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.",
      "id": "Discovery",
      "type": "object"
    },
    "VulnerabilityLocation": {
      "type": "object",
      "id": "VulnerabilityLocation",
      "properties": {
        "package": {
          "type": "string",
          "description": "The package being described."
        },
        "fileLocation": {
          "items": {
            "$ref": "FileLocation"
          },
          "description": "The file location at which this package was found.",
          "type": "array"
        },
        "version": {
          "$ref": "Version",
          "description": "The version of the package being described. This field can be used as a filter in list requests."
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
          "type": "string"
        }
      },
      "description": "The location of the vulnerability"
    },
    "GetVulnzOccurrencesSummaryResponse": {
      "properties": {
        "counts": {
          "type": "array",
          "description": "A map of how many occurrences were found for each severity.",
          "items": {
            "$ref": "SeverityCount"
          }
        }
      },
      "description": "A summary of how many vulnz occurrences there are per severity type. counts by groups, or if we should have different summary messages like this.",
      "type": "object",
      "id": "GetVulnzOccurrencesSummaryResponse"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext": {
      "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
      "type": "object",
      "properties": {
        "revisionId": {
          "description": "Required. Git commit hash.",
          "type": "string"
        },
        "url": {
          "description": "Git repository URL.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext"
    },
    "Package": {
      "properties": {
        "cpeUri": {
          "type": "string",
          "description": "The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages."
        },
        "architecture": {
          "description": "The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
          "type": "string",
          "enumDescriptions": [
            "Unknown architecture",
            "X86 architecture",
            "X64 architecture"
          ],
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ]
        },
        "distribution": {
          "description": "The various channels by which a package is distributed.",
          "items": {
            "$ref": "Distribution"
          },
          "type": "array"
        },
        "digest": {
          "type": "array",
          "items": {
            "$ref": "Digest"
          },
          "description": "Hash value, typically a file digest, that allows unique identification a specific package."
        },
        "version": {
          "$ref": "Version",
          "description": "The version of the package."
        },
        "license": {
          "$ref": "License",
          "description": "Licenses that have been declared by the authors of the package."
        },
        "maintainer": {
          "type": "string",
          "description": "A freeform text denoting the maintainer of this package."
        },
        "packageType": {
          "description": "The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the package."
        },
        "url": {
          "type": "string",
          "description": "The homepage for this package."
        },
        "description": {
          "description": "The description of this package.",
          "type": "string"
        }
      },
      "description": "This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.",
      "type": "object",
      "id": "Package"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1RepoId": {
      "properties": {
        "uid": {
          "description": "A server-assigned, globally unique identifier.",
          "type": "string"
        },
        "projectRepoId": {
          "description": "A combination of a project ID and a repo name.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId"
        }
      },
      "description": "A unique identifier for a Cloud Repo.",
      "type": "object",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1RepoId"
    },
    "PackageInfoOccurrence": {
      "id": "PackageInfoOccurrence",
      "description": "PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Output only. Identify the full name of the package as given by the Package Originator",
          "readOnly": true
        },
        "version": {
          "description": "Output only. Identify the version of the package",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "description": "Provide the actual file name of the package, or path of the directory being treated as a package"
        },
        "id": {
          "type": "string",
          "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements"
        },
        "licenseConcluded": {
          "description": "package or alternative values, if the governing license cannot be determined",
          "$ref": "License"
        },
        "homePage": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page"
        },
        "summaryDescription": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. A short description of the package"
        },
        "sourceInfo": {
          "type": "string",
          "description": "Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package"
        },
        "comment": {
          "description": "A place for the SPDX file creator to record any general comments about the package being described",
          "type": "string"
        },
        "packageType": {
          "type": "string",
          "description": "Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.",
          "readOnly": true
        }
      }
    },
    "RelationshipOccurrence": {
      "description": "RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
      "id": "RelationshipOccurrence",
      "properties": {
        "comment": {
          "description": "A place for the SPDX file creator to record any general comments about the relationship",
          "type": "string"
        },
        "type": {
          "description": "Output only. The type of relationship between the source and target SPDX elements",
          "enum": [
            "RELATIONSHIP_TYPE_UNSPECIFIED",
            "DESCRIBES",
            "DESCRIBED_BY",
            "CONTAINS",
            "CONTAINED_BY",
            "DEPENDS_ON",
            "DEPENDENCY_OF",
            "DEPENDENCY_MANIFEST_OF",
            "BUILD_DEPENDENCY_OF",
            "DEV_DEPENDENCY_OF",
            "OPTIONAL_DEPENDENCY_OF",
            "PROVIDED_DEPENDENCY_OF",
            "TEST_DEPENDENCY_OF",
            "RUNTIME_DEPENDENCY_OF",
            "EXAMPLE_OF",
            "GENERATES",
            "GENERATED_FROM",
            "ANCESTOR_OF",
            "DESCENDANT_OF",
            "VARIANT_OF",
            "DISTRIBUTION_ARTIFACT",
            "PATCH_FOR",
            "PATCH_APPLIED",
            "COPY_OF",
            "FILE_ADDED",
            "FILE_DELETED",
            "FILE_MODIFIED",
            "EXPANDED_FROM_ARCHIVE",
            "DYNAMIC_LINK",
            "STATIC_LINK",
            "DATA_FILE_OF",
            "TEST_CASE_OF",
            "BUILD_TOOL_OF",
            "DEV_TOOL_OF",
            "TEST_OF",
            "TEST_TOOL_OF",
            "DOCUMENTATION_OF",
            "OPTIONAL_COMPONENT_OF",
            "METAFILE_OF",
            "PACKAGE_OF",
            "AMENDS",
            "PREREQUISITE_FOR",
            "HAS_PREREQUISITE",
            "OTHER"
          ],
          "enumDescriptions": [
            "Unspecified",
            "Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A",
            "Is to be used when SPDXRef-A is described by SPDXREF-Document",
            "Is to be used when SPDXRef-A contains SPDXRef-B",
            "Is to be used when SPDXRef-A is contained by SPDXRef-B",
            "Is to be used when SPDXRef-A depends on SPDXRef-B",
            "Is to be used when SPDXRef-A is dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a manifest file that lists a set of dependencies for SPDXRef-B",
            "Is to be used when SPDXRef-A is a build dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a development dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is an optional dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a to be provided dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a test dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a dependency required for the execution of SPDXRef-B",
            "Is to be used when SPDXRef-A is an example of SPDXRef-B",
            "Is to be used when SPDXRef-A generates SPDXRef-B",
            "Is to be used when SPDXRef-A was generated from SPDXRef-B",
            "Is to be used when SPDXRef-A is an ancestor (same lineage but pre-dates) SPDXRef-B",
            "Is to be used when SPDXRef-A is a descendant of (same lineage but postdates) SPDXRef-B",
            "Is to be used when SPDXRef-A is a variant of (same lineage but not clear which came first) SPDXRef-B",
            "Is to be used when distributing SPDXRef-A requires that SPDXRef-B also be distributed",
            "Is to be used when SPDXRef-A is a patch file for (to be applied to) SPDXRef-B",
            "Is to be used when SPDXRef-A is a patch file that has been applied to SPDXRef-B",
            "Is to be used when SPDXRef-A is an exact copy of SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was added to SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was deleted from SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was modified from SPDXRef-B",
            "Is to be used when SPDXRef-A is expanded from the archive SPDXRef-B",
            "Is to be used when SPDXRef-A dynamically links to SPDXRef-B",
            "Is to be used when SPDXRef-A statically links to SPDXRef-B",
            "Is to be used when SPDXRef-A is a data file used in SPDXRef-B",
            "Is to be used when SPDXRef-A is a test case used in testing SPDXRef-B",
            "Is to be used when SPDXRef-A is used to build SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a development tool for SPDXRef-B",
            "Is to be used when SPDXRef-A is used for testing SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B",
            "Is to be used when SPDXRef-A provides documentation of SPDXRef-B",
            "Is to be used when SPDXRef-A is an optional component of SPDXRef-B",
            "Is to be used when SPDXRef-A is a metafile of SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a package as part of SPDXRef-B",
            "Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX information in SPDXRef-B",
            "Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B",
            "Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B",
            "Is to be used for a relationship which has not been defined in the formal SPDX specification. A description of the relationship should be included in the Relationship comments field"
          ],
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "type": "string",
          "description": "Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it"
        },
        "source": {
          "description": "Also referred to as SPDXRef-A The source SPDX element (file, package, etc)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ComplianceVersion": {
      "properties": {
        "benchmarkDocument": {
          "type": "string",
          "description": "The name of the document that defines this benchmark, e.g. \"CIS Container-Optimized OS\"."
        },
        "cpeUri": {
          "type": "string",
          "description": "The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to."
        },
        "version": {
          "description": "The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.",
          "type": "string"
        }
      },
      "id": "ComplianceVersion",
      "type": "object",
      "description": "Describes the CIS benchmark version that is applicable to a given OS and os version."
    },
    "Resource": {
      "type": "object",
      "id": "Resource",
      "properties": {
        "contentHash": {
          "$ref": "Hash",
          "description": "The hash of the resource content. E.g., the Docker digest."
        },
        "uri": {
          "type": "string",
          "description": "The unique URI of the resource. E.g., \"https://gcr.io/project/image@sha256:foo\" for a Docker image."
        },
        "name": {
          "description": "The name of the resource. E.g., the name of a Docker image - \"Debian\".",
          "type": "string"
        }
      },
      "description": " Resource is an entity that can have metadata. E.g., a Docker image."
    },
    "FileOccurrence": {
      "properties": {
        "filesLicenseInfo": {
          "items": {
            "type": "string"
          },
          "description": "This field contains the license information actually found in the file, if any",
          "type": "array"
        },
        "id": {
          "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements",
          "type": "string"
        },
        "licenseConcluded": {
          "description": "This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined",
          "$ref": "License"
        },
        "copyright": {
          "type": "string",
          "description": "Identify the copyright holder of the file, as well as any dates present"
        },
        "comment": {
          "description": "This field provides a place for the SPDX file creator to record any general comments about the file",
          "type": "string"
        },
        "contributors": {
          "description": "This field provides a place for the SPDX file creator to record file contributors",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "attributions": {
          "type": "array",
          "description": "This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts",
          "items": {
            "type": "string"
          }
        },
        "notice": {
          "type": "string",
          "description": "This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file"
        }
      },
      "type": "object",
      "description": "FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
      "id": "FileOccurrence"
    },
    "CVSS": {
      "description": "Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
      "id": "CVSS",
      "properties": {
        "scope": {
          "type": "string",
          "enum": [
            "SCOPE_UNSPECIFIED",
            "SCOPE_UNCHANGED",
            "SCOPE_CHANGED"
          ],
          "description": "Defined in CVSS v3",
          "enumDescriptions": [
            "Defined in CVSS v3",
            "Defined in CVSS v3",
            "Defined in CVSS v3"
          ]
        },
        "integrityImpact": {
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE",
            "IMPACT_PARTIAL",
            "IMPACT_COMPLETE"
          ],
          "enumDescriptions": [
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3",
            "Defined in CVSS v3",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v2",
            "Defined in CVSS v2"
          ],
          "type": "string",
          "description": "Defined in CVSS v3, CVSS v2"
        },
        "availabilityImpact": {
          "type": "string",
          "description": "Defined in CVSS v3, CVSS v2",
          "enumDescriptions": [
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3",
            "Defined in CVSS v3",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v2",
            "Defined in CVSS v2"
          ],
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE",
            "IMPACT_PARTIAL",
            "IMPACT_COMPLETE"
          ]
        },
        "impactScore": {
          "format": "float",
          "type": "number"
        },
        "baseScore": {
          "type": "number",
          "format": "float",
          "description": "The base score is a function of the base metric scores."
        },
        "exploitabilityScore": {
          "format": "float",
          "type": "number"
        },
        "authentication": {
          "type": "string",
          "description": "Defined in CVSS v2",
          "enumDescriptions": [
            "Defined in CVSS v2",
            "Defined in CVSS v2",
            "Defined in CVSS v2",
            "Defined in CVSS v2"
          ],
          "enum": [
            "AUTHENTICATION_UNSPECIFIED",
            "AUTHENTICATION_MULTIPLE",
            "AUTHENTICATION_SINGLE",
            "AUTHENTICATION_NONE"
          ]
        },
        "attackVector": {
          "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
          "enumDescriptions": [
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3"
          ],
          "enum": [
            "ATTACK_VECTOR_UNSPECIFIED",
            "ATTACK_VECTOR_NETWORK",
            "ATTACK_VECTOR_ADJACENT",
            "ATTACK_VECTOR_LOCAL",
            "ATTACK_VECTOR_PHYSICAL"
          ],
          "type": "string"
        },
        "privilegesRequired": {
          "type": "string",
          "enum": [
            "PRIVILEGES_REQUIRED_UNSPECIFIED",
            "PRIVILEGES_REQUIRED_NONE",
            "PRIVILEGES_REQUIRED_LOW",
            "PRIVILEGES_REQUIRED_HIGH"
          ],
          "description": "Defined in CVSS v3",
          "enumDescriptions": [
            "Defined in CVSS v3",
            "Defined in CVSS v3",
            "Defined in CVSS v3",
            "Defined in CVSS v3"
          ]
        },
        "userInteraction": {
          "type": "string",
          "description": "Defined in CVSS v3",
          "enum": [
            "USER_INTERACTION_UNSPECIFIED",
            "USER_INTERACTION_NONE",
            "USER_INTERACTION_REQUIRED"
          ],
          "enumDescriptions": [
            "Defined in CVSS v3",
            "Defined in CVSS v3",
            "Defined in CVSS v3"
          ]
        },
        "confidentialityImpact": {
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE",
            "IMPACT_PARTIAL",
            "IMPACT_COMPLETE"
          ],
          "description": "Defined in CVSS v3, CVSS v2",
          "type": "string",
          "enumDescriptions": [
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3",
            "Defined in CVSS v3",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v2",
            "Defined in CVSS v2"
          ]
        },
        "attackComplexity": {
          "enumDescriptions": [
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v3, CVSS v2",
            "Defined in CVSS v2"
          ],
          "type": "string",
          "description": "Defined in CVSS v3, CVSS v2",
          "enum": [
            "ATTACK_COMPLEXITY_UNSPECIFIED",
            "ATTACK_COMPLEXITY_LOW",
            "ATTACK_COMPLEXITY_HIGH",
            "ATTACK_COMPLEXITY_MEDIUM"
          ]
        }
      },
      "type": "object"
    },
    "Subject": {
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the Subject used here"
        },
        "digest": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "\"\": \"\" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet"
        }
      },
      "type": "object",
      "description": "Subject refers to the subject of the intoto statement",
      "id": "Subject"
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them."
        }
      },
      "type": "object",
      "description": "Request message for `SetIamPolicy` method."
    },
    "Source": {
      "id": "Source",
      "properties": {
        "repoSource": {
          "description": "If provided, get source from this location in a Cloud Repo.",
          "$ref": "RepoSource"
        },
        "fileHashes": {
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.",
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "type": "object"
        },
        "storageSource": {
          "description": "If provided, get the source from this location in in Google Cloud Storage.",
          "$ref": "StorageSource"
        },
        "additionalContexts": {
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
          },
          "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field."
        },
        "context": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
          "description": "If provided, the source code used for the build came from this location."
        },
        "artifactStorageSource": {
          "$ref": "StorageSource",
          "description": "If provided, the input binary artifacts for the build came from this location."
        }
      },
      "type": "object",
      "description": "Source describes the location of the source used for the build."
    },
    "ScanConfig": {
      "type": "object",
      "id": "ScanConfig",
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Output only. The time this scan config was created.",
          "format": "google-datetime"
        },
        "enabled": {
          "description": "Indicates whether the Scan is enabled.",
          "type": "boolean"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this scan config was last updated."
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}\"."
        },
        "description": {
          "description": "Output only. A human-readable description of what the `ScanConfig` does.",
          "type": "string"
        }
      },
      "description": "Indicates various scans and whether they are turned on or off."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret",
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*",
          "type": "string"
        },
        "envMap": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          }
        }
      }
    },
    "SlsaMetadata": {
      "id": "SlsaMetadata",
      "description": "Other properties of the build.",
      "type": "object",
      "properties": {
        "buildFinishedOn": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp of when the build completed."
        },
        "reproducible": {
          "type": "boolean",
          "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
        },
        "buildInvocationId": {
          "type": "string",
          "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec."
        },
        "buildStartedOn": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp of when the build started."
        },
        "completeness": {
          "$ref": "SlsaCompleteness",
          "description": "Indicates that the builder claims certain fields in this message to be complete."
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval": {
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval",
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "properties": {
        "result": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult",
          "readOnly": true,
          "description": "Output only. Result of manual approval for this Build."
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "description": "Output only. The state of this build's approval.",
          "readOnly": true
        },
        "config": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig",
          "readOnly": true,
          "description": "Output only. Configuration for manual approval of this build."
        }
      }
    },
    "DSSEAttestationNote": {
      "type": "object",
      "properties": {
        "hint": {
          "$ref": "DSSEHint",
          "description": "DSSEHint hints at the purpose of the attestation authority."
        }
      },
      "id": "DSSEAttestationNote",
      "description": "A note describing an attestation"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult",
      "type": "object",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "properties": {
        "comment": {
          "type": "string",
          "description": "Optional. An optional comment for this manual approval result."
        },
        "approvalTime": {
          "description": "Output only. The time when the approval decision was made.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "url": {
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.",
          "type": "string"
        },
        "decision": {
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "description": "Required. The decision of this manual approval.",
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ]
        },
        "approverAccount": {
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DocumentOccurrence": {
      "id": "DocumentOccurrence",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard"
        },
        "externalDocumentRefs": {
          "description": "Identify any external SPDX documents referenced within this SPDX document",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "description": "Identify name of this document as designated by creator",
          "type": "string"
        },
        "creators": {
          "type": "array",
          "description": "Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name",
          "items": {
            "type": "string"
          }
        },
        "licenseListVersion": {
          "type": "string",
          "description": "A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created"
        },
        "namespace": {
          "description": "Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter",
          "type": "string"
        },
        "creatorComment": {
          "description": "A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields",
          "type": "string"
        },
        "id": {
          "description": "Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally",
          "type": "string"
        },
        "documentComment": {
          "description": "A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document",
          "type": "string"
        }
      },
      "type": "object",
      "description": "DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/"
    },
    "UpgradeDistribution": {
      "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
      "properties": {
        "cve": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The cve that would be resolved by this upgrade."
        },
        "classification": {
          "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.",
          "type": "string"
        },
        "cpeUri": {
          "type": "string",
          "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/."
        },
        "severity": {
          "description": "The severity as specified by the upstream operating system.",
          "type": "string"
        }
      },
      "id": "UpgradeDistribution",
      "type": "object"
    },
    "SlsaBuilder": {
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the id of the slsa provenance builder"
        }
      },
      "id": "SlsaBuilder",
      "type": "object",
      "description": "SlsaBuilder encapsulates the identity of the builder of this provenance."
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response message for `TestIamPermissions` method."
    },
    "VulnerabilityType": {
      "type": "object",
      "description": "VulnerabilityType provides metadata about a security vulnerability.",
      "id": "VulnerabilityType",
      "properties": {
        "cvssV2": {
          "description": "The full description of the CVSS for version 2.",
          "$ref": "CVSS"
        },
        "details": {
          "type": "array",
          "description": "All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.",
          "items": {
            "$ref": "Detail"
          }
        },
        "cvssScore": {
          "type": "number",
          "format": "float",
          "description": "The CVSS score for this Vulnerability."
        },
        "severity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "description": "Note provider assigned impact of the vulnerability"
        },
        "cwe": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html"
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata": {
      "properties": {
        "buildFinishedOn": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp of when the build completed."
        },
        "completeness": {
          "description": "Indicates that the builder claims certain fields in this message to be complete.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness"
        },
        "buildStartedOn": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp of when the build started."
        },
        "reproducible": {
          "type": "boolean",
          "description": "If true, the builder claims that running invocation on materials will produce bit-for-bit identical output."
        },
        "buildInvocationId": {
          "description": "Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata",
      "description": "Other properties of the build.",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts": {
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "images": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE."
        },
        "objects": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects",
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE."
        }
      }
    },
    "SlsaRecipe": {
      "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
      "id": "SlsaRecipe",
      "properties": {
        "environment": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object",
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different."
        },
        "type": {
          "type": "string",
          "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
        },
        "definedInMaterial": {
          "format": "int64",
          "type": "string",
          "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64."
        },
        "arguments": {
          "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "entryPoint": {
          "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FileLocation": {
      "type": "object",
      "id": "FileLocation",
      "description": "Indicates the location at which a package was found.",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file."
        }
      }
    },
    "NonCompliantFile": {
      "properties": {
        "reason": {
          "type": "string",
          "description": "Explains why a file is non compliant for a CIS check."
        },
        "displayCommand": {
          "type": "string",
          "description": "Command to display the non-compliant files."
        },
        "path": {
          "description": "display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.",
          "type": "string"
        }
      },
      "id": "NonCompliantFile",
      "description": "Details about files that caused a compliance check to fail.",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep": {
      "properties": {
        "env": {
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        },
        "timeout": {
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string",
          "format": "google-duration"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume"
          },
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration."
        },
        "secretEnv": {
          "type": "array",
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "items": {
            "type": "string"
          }
        },
        "waitFor": {
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array"
        },
        "timing": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true
        },
        "pullTiming": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "readOnly": true
        },
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        },
        "status": {
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "readOnly": true
        },
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.",
          "type": "string"
        },
        "script": {
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.",
          "type": "string"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep",
      "type": "object",
      "description": "A step in the build pipeline."
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "id": "Empty",
      "type": "object"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder",
      "description": "Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.",
      "type": "object",
      "properties": {
        "id": {
          "description": "URI indicating the builder’s identity.",
          "type": "string"
        }
      }
    },
    "UpgradeNote": {
      "description": "An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.",
      "properties": {
        "package": {
          "description": "Required - The package this Upgrade is for.",
          "type": "string"
        },
        "distributions": {
          "items": {
            "$ref": "UpgradeDistribution"
          },
          "type": "array",
          "description": "Metadata about the upgrade for each specific operating system."
        },
        "version": {
          "description": "Required - The version of the package in machine + human readable form.",
          "$ref": "Version"
        }
      },
      "id": "UpgradeNote",
      "type": "object"
    },
    "Completeness": {
      "id": "Completeness",
      "description": "Indicates that the builder claims certain fields in this message to be complete.",
      "properties": {
        "environment": {
          "type": "boolean",
          "description": "If true, the builder claims that recipe.environment is claimed to be complete."
        },
        "materials": {
          "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".",
          "type": "boolean"
        },
        "arguments": {
          "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SeverityCount": {
      "id": "SeverityCount",
      "properties": {
        "severity": {
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "description": "The severity of the occurrences.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "count": {
          "format": "int64",
          "type": "string",
          "description": "The number of occurrences with the severity."
        }
      },
      "description": "The number of occurrences created for a specific severity.",
      "type": "object"
    },
    "AttestationAuthorityHint": {
      "type": "object",
      "properties": {
        "humanReadableName": {
          "type": "string",
          "description": "The human readable name of this Attestation Authority, for example \"qa\"."
        }
      },
      "description": "This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.",
      "id": "AttestationAuthorityHint"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption": {
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption",
      "properties": {
        "name": {
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExternalRef": {
      "properties": {
        "locator": {
          "description": "The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location",
          "type": "string"
        },
        "category": {
          "enumDescriptions": [
            "Unspecified",
            "Security (e.g. cpe22Type, cpe23Type)",
            "Package Manager (e.g. maven-central, npm, nuget, bower, purl)",
            "Persistent-Id (e.g. swh)",
            "Other"
          ],
          "type": "string",
          "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package",
          "enum": [
            "CATEGORY_UNSPECIFIED",
            "SECURITY",
            "PACKAGE_MANAGER",
            "PERSISTENT_ID",
            "OTHER"
          ]
        },
        "type": {
          "description": "Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)",
          "type": "string"
        },
        "comment": {
          "description": "Human-readable information about the purpose and target of the reference",
          "type": "string"
        }
      },
      "id": "ExternalRef",
      "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package",
      "type": "object"
    },
    "BuildProvenance": {
      "id": "BuildProvenance",
      "properties": {
        "finishTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time at which execution of the build was finished."
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs were written."
        },
        "creator": {
          "type": "string",
          "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time."
        },
        "createTime": {
          "description": "Time at which the build was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "builtArtifacts": {
          "type": "array",
          "items": {
            "$ref": "Artifact"
          },
          "description": "Output of the build."
        },
        "projectId": {
          "description": "ID of the project.",
          "type": "string"
        },
        "startTime": {
          "format": "google-datetime",
          "description": "Time at which execution of the build was started.",
          "type": "string"
        },
        "triggerId": {
          "description": "Trigger identifier if the build was triggered automatically; empty if not.",
          "type": "string"
        },
        "sourceProvenance": {
          "$ref": "Source",
          "description": "Details of the Source input to the build."
        },
        "commands": {
          "description": "Commands requested by the build.",
          "items": {
            "$ref": "Command"
          },
          "type": "array"
        },
        "builderVersion": {
          "description": "Version string of the builder at the time this build was executed.",
          "type": "string"
        },
        "buildOptions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
          "type": "object"
        },
        "id": {
          "description": "Unique identifier of the build.",
          "type": "string"
        }
      },
      "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
      "type": "object"
    },
    "Operation": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation"
    },
    "ListNotesResponse": {
      "type": "object",
      "description": "Response including listed notes.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as page_token for the following request. An empty value means no more result."
        },
        "notes": {
          "description": "The occurrences requested",
          "items": {
            "$ref": "Note"
          },
          "type": "array"
        }
      },
      "id": "ListNotesResponse"
    },
    "DSSEAttestationOccurrence": {
      "properties": {
        "statement": {
          "$ref": "InTotoStatement"
        },
        "envelope": {
          "description": "If doing something security critical, make sure to verify the signatures in this metadata.",
          "$ref": "Envelope"
        }
      },
      "id": "DSSEAttestationOccurrence",
      "description": "An occurrence describing an attestation on a resource",
      "type": "object"
    },
    "ListNoteOccurrencesResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token to receive the next page of notes.",
          "type": "string"
        },
        "occurrences": {
          "description": "The occurrences attached to the specified note.",
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array"
        }
      },
      "description": "Response including listed occurrences for a note.",
      "type": "object",
      "id": "ListNoteOccurrencesResponse"
    },
    "ComplianceOccurrence": {
      "description": "An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.",
      "properties": {
        "nonComplianceReason": {
          "description": "The reason for non compliance of these files.",
          "type": "string"
        },
        "nonCompliantFiles": {
          "description": "A list of files which are violating compliance checks.",
          "items": {
            "$ref": "NonCompliantFile"
          },
          "type": "array"
        }
      },
      "id": "ComplianceOccurrence",
      "type": "object"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial": {
      "type": "object",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial",
      "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.",
      "properties": {
        "digest": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Collection of cryptographic digests for the contents of this artifact."
        },
        "uri": {
          "type": "string",
          "description": "The method by which this artifact was referenced during the build."
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance": {
      "type": "object",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "properties": {
        "resolvedStorageSourceManifest": {
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest"
        },
        "resolvedRepoSource": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource",
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved."
        },
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource"
        },
        "fileHashes": {
          "type": "object",
          "readOnly": true,
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "additionalProperties": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes"
          }
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance"
    },
    "Deployment": {
      "description": "The period during which some deployable was active in a runtime.",
      "properties": {
        "address": {
          "description": "Address of the runtime element hosting this deployment.",
          "type": "string"
        },
        "resourceUri": {
          "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "undeployTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "End of the lifetime of this deployment."
        },
        "deployTime": {
          "type": "string",
          "description": "Beginning of the lifetime of this deployment.",
          "format": "google-datetime"
        },
        "userEmail": {
          "description": "Identity of the user that triggered this deployment.",
          "type": "string"
        },
        "platform": {
          "enumDescriptions": [
            "Unknown",
            "Google Container Engine",
            "Google App Engine: Flexible Environment",
            "Custom user-defined platform"
          ],
          "description": "Platform hosting this deployment.",
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ],
          "type": "string"
        },
        "config": {
          "description": "Configuration used to create this deployment.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Deployment"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan": {
      "description": "Start and end times for a build execution phase.",
      "properties": {
        "endTime": {
          "type": "string",
          "description": "End of time span.",
          "format": "google-datetime"
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Start of time span."
        }
      },
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
    },
    "Metadata": {
      "description": "Other properties of the build.",
      "id": "Metadata",
      "type": "object",
      "properties": {
        "buildFinishedOn": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp of when the build completed."
        },
        "completeness": {
          "description": "Indicates that the builder claims certain fields in this message to be complete.",
          "$ref": "Completeness"
        },
        "reproducible": {
          "type": "boolean",
          "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
        },
        "buildStartedOn": {
          "description": "The timestamp of when the build started.",
          "type": "string",
          "format": "google-datetime"
        },
        "buildInvocationId": {
          "type": "string",
          "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec."
        }
      }
    },
    "DSSEHint": {
      "properties": {
        "humanReadableName": {
          "type": "string",
          "description": "Required. The human readable name of this attestation authority, for example \"cloudbuild-prod\"."
        }
      },
      "type": "object",
      "description": "This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
      "id": "DSSEHint"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Secret": {
      "properties": {
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        },
        "secretEnv": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secret",
      "type": "object",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials."
    },
    "Deployable": {
      "properties": {
        "resourceUri": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Resource URI for the artifact being deployed."
        }
      },
      "description": "An artifact that can be deployed in some runtime.",
      "type": "object",
      "id": "Deployable"
    },
    "RelationshipNote": {
      "description": "RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
      "id": "RelationshipNote",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "RELATIONSHIP_TYPE_UNSPECIFIED",
            "DESCRIBES",
            "DESCRIBED_BY",
            "CONTAINS",
            "CONTAINED_BY",
            "DEPENDS_ON",
            "DEPENDENCY_OF",
            "DEPENDENCY_MANIFEST_OF",
            "BUILD_DEPENDENCY_OF",
            "DEV_DEPENDENCY_OF",
            "OPTIONAL_DEPENDENCY_OF",
            "PROVIDED_DEPENDENCY_OF",
            "TEST_DEPENDENCY_OF",
            "RUNTIME_DEPENDENCY_OF",
            "EXAMPLE_OF",
            "GENERATES",
            "GENERATED_FROM",
            "ANCESTOR_OF",
            "DESCENDANT_OF",
            "VARIANT_OF",
            "DISTRIBUTION_ARTIFACT",
            "PATCH_FOR",
            "PATCH_APPLIED",
            "COPY_OF",
            "FILE_ADDED",
            "FILE_DELETED",
            "FILE_MODIFIED",
            "EXPANDED_FROM_ARCHIVE",
            "DYNAMIC_LINK",
            "STATIC_LINK",
            "DATA_FILE_OF",
            "TEST_CASE_OF",
            "BUILD_TOOL_OF",
            "DEV_TOOL_OF",
            "TEST_OF",
            "TEST_TOOL_OF",
            "DOCUMENTATION_OF",
            "OPTIONAL_COMPONENT_OF",
            "METAFILE_OF",
            "PACKAGE_OF",
            "AMENDS",
            "PREREQUISITE_FOR",
            "HAS_PREREQUISITE",
            "OTHER"
          ],
          "type": "string",
          "description": "The type of relationship between the source and target SPDX elements",
          "enumDescriptions": [
            "Unspecified",
            "Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A",
            "Is to be used when SPDXRef-A is described by SPDXREF-Document",
            "Is to be used when SPDXRef-A contains SPDXRef-B",
            "Is to be used when SPDXRef-A is contained by SPDXRef-B",
            "Is to be used when SPDXRef-A depends on SPDXRef-B",
            "Is to be used when SPDXRef-A is dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a manifest file that lists a set of dependencies for SPDXRef-B",
            "Is to be used when SPDXRef-A is a build dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a development dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is an optional dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a to be provided dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a test dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a dependency required for the execution of SPDXRef-B",
            "Is to be used when SPDXRef-A is an example of SPDXRef-B",
            "Is to be used when SPDXRef-A generates SPDXRef-B",
            "Is to be used when SPDXRef-A was generated from SPDXRef-B",
            "Is to be used when SPDXRef-A is an ancestor (same lineage but pre-dates) SPDXRef-B",
            "Is to be used when SPDXRef-A is a descendant of (same lineage but postdates) SPDXRef-B",
            "Is to be used when SPDXRef-A is a variant of (same lineage but not clear which came first) SPDXRef-B",
            "Is to be used when distributing SPDXRef-A requires that SPDXRef-B also be distributed",
            "Is to be used when SPDXRef-A is a patch file for (to be applied to) SPDXRef-B",
            "Is to be used when SPDXRef-A is a patch file that has been applied to SPDXRef-B",
            "Is to be used when SPDXRef-A is an exact copy of SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was added to SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was deleted from SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was modified from SPDXRef-B",
            "Is to be used when SPDXRef-A is expanded from the archive SPDXRef-B",
            "Is to be used when SPDXRef-A dynamically links to SPDXRef-B",
            "Is to be used when SPDXRef-A statically links to SPDXRef-B",
            "Is to be used when SPDXRef-A is a data file used in SPDXRef-B",
            "Is to be used when SPDXRef-A is a test case used in testing SPDXRef-B",
            "Is to be used when SPDXRef-A is used to build SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a development tool for SPDXRef-B",
            "Is to be used when SPDXRef-A is used for testing SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B",
            "Is to be used when SPDXRef-A provides documentation of SPDXRef-B",
            "Is to be used when SPDXRef-A is an optional component of SPDXRef-B",
            "Is to be used when SPDXRef-A is a metafile of SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a package as part of SPDXRef-B",
            "Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX information in SPDXRef-B",
            "Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B",
            "Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B",
            "Is to be used for a relationship which has not been defined in the formal SPDX specification. A description of the relationship should be included in the Relationship comments field"
          ]
        }
      }
    },
    "Recipe": {
      "properties": {
        "entryPoint": {
          "type": "string",
          "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use."
        },
        "environment": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy."
        },
        "definedInMaterial": {
          "format": "int64",
          "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        },
        "type": {
          "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.",
          "type": "string"
        }
      },
      "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
      "type": "object",
      "id": "Recipe"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource",
      "type": "object",
      "properties": {
        "digest": {
          "type": "object",
          "description": "Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uri": {
          "type": "string",
          "description": "URI indicating the identity of the source of the config."
        },
        "entryPoint": {
          "type": "string",
          "description": "String identifying the entry point into the build."
        }
      },
      "description": "Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from."
    },
    "SlsaCompleteness": {
      "type": "object",
      "description": "Indicates that the builder claims certain fields in this message to be complete.",
      "properties": {
        "materials": {
          "type": "boolean",
          "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
        },
        "arguments": {
          "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
          "type": "boolean"
        },
        "environment": {
          "type": "boolean",
          "description": "If true, the builder claims that recipe.environment is claimed to be complete."
        }
      },
      "id": "SlsaCompleteness"
    },
    "VulnerabilityDetails": {
      "description": "Used by Occurrence to point to where the vulnerability exists and how to fix it.",
      "properties": {
        "cvssV3": {
          "$ref": "CVSS",
          "description": "The CVSS v3 score of this vulnerability."
        },
        "packageIssue": {
          "description": "The set of affected locations and their fixes (if available) within the associated resource.",
          "items": {
            "$ref": "PackageIssue"
          },
          "type": "array"
        },
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types."
        },
        "effectiveSeverity": {
          "description": "The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "type": "string"
        },
        "cvssScore": {
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
          "format": "float",
          "type": "number"
        },
        "severity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "description": "Output only. The note provider assigned Severity of the vulnerability."
        }
      },
      "id": "VulnerabilityDetails",
      "type": "object"
    },
    "InTotoStatement": {
      "description": "Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".",
      "type": "object",
      "id": "InTotoStatement",
      "properties": {
        "subject": {
          "description": "subject is the subjects of the intoto statement",
          "type": "array",
          "items": {
            "$ref": "Subject"
          }
        },
        "slsaProvenanceZeroTwo": {
          "description": "SLSA 0.2 provenance.",
          "$ref": "SlsaProvenanceZeroTwo"
        },
        "provenance": {
          "description": "Generic Grafeas provenance.",
          "$ref": "InTotoProvenance"
        },
        "slsaProvenance": {
          "$ref": "SlsaProvenance",
          "description": "SLSA 0.1 provenance."
        },
        "predicateType": {
          "type": "string",
          "description": "\"https://slsa.dev/provenance/v0.1\" for SlsaProvenance."
        },
        "_type": {
          "type": "string",
          "description": "Always \"https://in-toto.io/Statement/v0.1\"."
        }
      }
    },
    "Command": {
      "id": "Command",
      "type": "object",
      "description": "Command describes a step performed as part of the build pipeline.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency."
        },
        "waitFor": {
          "type": "array",
          "description": "The ID(s) of the Command(s) that this Command depends on.",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "items": {
            "type": "string"
          },
          "description": "Command-line arguments used when executing this Command.",
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`."
        },
        "dir": {
          "type": "string",
          "description": "Working directory (relative to project source root) used when running this Command."
        },
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Environment variables set before running this Command."
        }
      }
    },
    "Installation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The name of the installed package."
        },
        "cpeUri": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages."
        },
        "version": {
          "description": "Output only. The version of the package.",
          "readOnly": true,
          "$ref": "Version"
        },
        "packageType": {
          "readOnly": true,
          "description": "Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
          "type": "string"
        },
        "license": {
          "description": "Licenses that have been declared by the authors of the package.",
          "$ref": "License"
        },
        "architecture": {
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ],
          "type": "string",
          "description": "Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
          "readOnly": true,
          "enumDescriptions": [
            "Unknown architecture",
            "X86 architecture",
            "X64 architecture"
          ]
        },
        "location": {
          "description": "All of the places within the filesystem versions of this package have been found.",
          "items": {
            "$ref": "Location"
          },
          "type": "array"
        }
      },
      "id": "Installation",
      "description": "This represents how a particular software package may be installed on a system."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource": {
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "type": "object",
      "properties": {
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        },
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
          "type": "string"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource"
    },
    "Detail": {
      "id": "Detail",
      "properties": {
        "fixedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The fix for this specific package version."
        },
        "packageType": {
          "type": "string",
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)"
        },
        "description": {
          "type": "string",
          "description": "A vendor-specific description of this note."
        },
        "isObsolete": {
          "type": "boolean",
          "description": "Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details."
        },
        "minAffectedVersion": {
          "$ref": "Version",
          "description": "The min version of the package in which the vulnerability exists."
        },
        "source": {
          "type": "string",
          "description": "The source from which the information in this Detail was obtained."
        },
        "severityName": {
          "description": "The severity (eg: distro assigned severity) for this vulnerability.",
          "type": "string"
        },
        "vendor": {
          "description": "The vendor of the product. e.g. \"google\"",
          "type": "string"
        },
        "cpeUri": {
          "type": "string",
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests."
        },
        "package": {
          "type": "string",
          "description": "The name of the package where the vulnerability was found. This field can be used as a filter in list requests."
        },
        "maxAffectedVersion": {
          "description": "The max version of the package in which the vulnerability exists.",
          "$ref": "Version"
        }
      },
      "type": "object",
      "description": "Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2"
    },
    "SlsaProvenance": {
      "type": "object",
      "description": "SlsaProvenance is the slsa provenance as defined by the slsa spec.",
      "properties": {
        "metadata": {
          "description": "metadata is the metadata of the provenance",
          "$ref": "SlsaMetadata"
        },
        "builder": {
          "$ref": "SlsaBuilder",
          "description": "builder is the builder of this provenance"
        },
        "recipe": {
          "$ref": "SlsaRecipe",
          "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible)."
        },
        "materials": {
          "type": "array",
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
          "items": {
            "$ref": "Material"
          }
        }
      },
      "id": "SlsaProvenance"
    },
    "ListScanConfigsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "A page token to pass in order to get more scan configs.",
          "type": "string"
        },
        "scanConfigs": {
          "type": "array",
          "items": {
            "$ref": "ScanConfig"
          },
          "description": "The set of scan configs."
        }
      },
      "id": "ListScanConfigsResponse",
      "description": "A list of scan configs for the project.",
      "type": "object"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness": {
      "type": "object",
      "description": "Indicates that the builder claims certain fields in this message to be complete.",
      "properties": {
        "environment": {
          "description": "If true, the builder claims that invocation.environment is complete.",
          "type": "boolean"
        },
        "parameters": {
          "type": "boolean",
          "description": "If true, the builder claims that invocation.parameters is complete."
        },
        "materials": {
          "type": "boolean",
          "description": "If true, the builder claims that materials is complete."
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness"
    },
    "Material": {
      "description": "Material is a material used in the generation of the provenance",
      "type": "object",
      "id": "Material",
      "properties": {
        "uri": {
          "type": "string",
          "description": "uri is the uri of the material"
        },
        "digest": {
          "type": "object",
          "description": "digest is a map from a hash algorithm (e.g. sha256) to the value in the material",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Location": {
      "description": "An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status",
      "id": "Location",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path from which we gathered that this package/version is installed."
        },
        "cpeUri": {
          "type": "string",
          "description": "Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package."
        },
        "version": {
          "$ref": "Version",
          "description": "Deprecated. The version installed at this location."
        }
      },
      "type": "object"
    },
    "Binding": {
      "properties": {
        "role": {
          "type": "string",
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "members": {
          "type": "array",
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Binding",
      "type": "object",
      "description": "Associates `members`, or principals, with a `role`."
    },
    "AnalysisCompleted": {
      "type": "object",
      "properties": {
        "analysisType": {
          "description": "type of analysis that were completed on a resource.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "AnalysisCompleted",
      "description": "Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Results": {
      "type": "object",
      "description": "Artifacts created by the build pipeline.",
      "properties": {
        "numArtifacts": {
          "type": "string",
          "format": "int64",
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded."
        },
        "images": {
          "description": "Container images that were built as a part of the build.",
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage"
          }
        },
        "buildStepImages": {
          "items": {
            "type": "string"
          },
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "type": "array",
          "items": {
            "format": "byte",
            "type": "string"
          }
        },
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded."
        },
        "artifactTiming": {
          "description": "Time to push all non-container artifacts.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Results"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes": {
      "type": "object",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes",
      "properties": {
        "fileHash": {
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Hash"
          },
          "description": "Collection of file hashes.",
          "type": "array"
        }
      }
    },
    "BuildType": {
      "type": "object",
      "description": "Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.",
      "id": "BuildType",
      "properties": {
        "signature": {
          "description": "Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.",
          "$ref": "BuildSignature"
        },
        "builderVersion": {
          "type": "string",
          "description": "Version of the builder which produced this Note."
        }
      }
    },
    "Distribution": {
      "properties": {
        "architecture": {
          "type": "string",
          "description": "The CPU architecture for which packages in this distribution channel were built",
          "enumDescriptions": [
            "Unknown architecture",
            "X86 architecture",
            "X64 architecture"
          ],
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ]
        },
        "description": {
          "type": "string",
          "description": "The distribution channel-specific description of this package."
        },
        "url": {
          "type": "string",
          "description": "The distribution channel-specific homepage for this package."
        },
        "maintainer": {
          "type": "string",
          "description": "A freeform string denoting the maintainer of this package."
        },
        "latestVersion": {
          "$ref": "Version",
          "description": "The latest available version of this package in this distribution channel."
        },
        "cpeUri": {
          "type": "string",
          "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package."
        }
      },
      "description": "This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror",
      "type": "object",
      "id": "Distribution"
    },
    "Envelope": {
      "type": "object",
      "id": "Envelope",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The bytes being signed",
          "format": "byte"
        },
        "payloadType": {
          "description": "The type of payload being signed",
          "type": "string"
        },
        "signatures": {
          "description": "The signatures over the payload",
          "items": {
            "$ref": "EnvelopeSignature"
          },
          "type": "array"
        }
      },
      "description": "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type."
    },
    "Discovered": {
      "description": "Provides information about the scan status of a discovered resource.",
      "properties": {
        "continuousAnalysis": {
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ],
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "description": "Whether the resource is continuously analyzed."
        },
        "analysisStatus": {
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has completed",
            "Analysis has finished successfully.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad state.",
            "The resource is known not to be supported."
          ],
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "COMPLETE",
            "FINISHED_SUCCESS",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ],
          "description": "The status of discovery for the resource."
        },
        "analysisStatusError": {
          "$ref": "Status",
          "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API."
        },
        "cpe": {
          "description": "The CPE of the resource being scanned.",
          "type": "string"
        },
        "analysisError": {
          "items": {
            "$ref": "Status"
          },
          "type": "array",
          "description": "Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors."
        },
        "lastScanTime": {
          "type": "string",
          "description": "The last time this resource was scanned.",
          "format": "google-datetime"
        },
        "archiveTime": {
          "description": "The time occurrences related to this discovery occurrence were archived.",
          "type": "string",
          "format": "google-datetime"
        },
        "analysisCompleted": {
          "$ref": "AnalysisCompleted",
          "description": "The list of analysis that were completed for a resource."
        },
        "operation": {
          "description": "Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.",
          "$ref": "Operation"
        }
      },
      "id": "Discovered",
      "type": "object"
    },
    "SlsaProvenanceZeroTwo": {
      "properties": {
        "builder": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder",
          "description": "Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance."
        },
        "metadata": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata",
          "description": "Other properties of the build."
        },
        "buildType": {
          "type": "string",
          "description": "URI indicating what type of build was performed."
        },
        "invocation": {
          "description": "Identifies the event that kicked off the build.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation"
        },
        "materials": {
          "items": {
            "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial"
          },
          "type": "array",
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on."
        },
        "buildConfig": {
          "description": "Lists the steps in the build.",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "type": "object"
        }
      },
      "id": "SlsaProvenanceZeroTwo",
      "description": "SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.",
      "type": "object"
    },
    "CreateOperationRequest": {
      "type": "object",
      "id": "CreateOperationRequest",
      "properties": {
        "operationId": {
          "description": "The ID to use for this operation.",
          "type": "string"
        },
        "operation": {
          "$ref": "Operation",
          "description": "The operation to create."
        }
      },
      "description": "Request for creating an operation"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Build": {
      "properties": {
        "status": {
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "readOnly": true,
          "description": "Output only. Status of the build.",
          "type": "string"
        },
        "name": {
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
          "readOnly": true,
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep"
          },
          "description": "Required. The operations to be performed on the workspace."
        },
        "queueTtl": {
          "format": "google-duration",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "type": "string"
        },
        "serviceAccount": {
          "type": "string",
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. "
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "type": "string",
          "format": "google-duration"
        },
        "substitutions": {
          "type": "object",
          "description": "Substitutions data for `Build` resource.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "options": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions",
          "description": "Special options for this build."
        },
        "statusDetail": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Customer-readable message about the current status."
        },
        "warnings": {
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning"
          },
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "readOnly": true,
          "type": "array"
        },
        "source": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Source",
          "description": "The location of the source files to build."
        },
        "failureInfo": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo",
          "readOnly": true,
          "description": "Output only. Contains information about the build when status=FAILURE."
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the build was received.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "logUrl": {
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "readOnly": true,
          "type": "string"
        },
        "approval": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval",
          "readOnly": true,
          "description": "Output only. Describes this build's approval configuration, status, and result."
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
          "type": "string"
        },
        "secrets": {
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secret"
          },
          "type": "array"
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true,
          "type": "string"
        },
        "sourceProvenance": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance",
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true
        },
        "results": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Results",
          "description": "Output only. Results of the build.",
          "readOnly": true
        },
        "timing": {
          "additionalProperties": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          },
          "type": "object",
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "readOnly": true
        },
        "finishTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution."
        },
        "availableSecrets": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets",
          "description": "Secrets and secret environment variables."
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array"
        },
        "startTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time at which execution of the build was started.",
          "type": "string"
        },
        "projectId": {
          "description": "Output only. ID of the project.",
          "type": "string",
          "readOnly": true
        },
        "buildTriggerId": {
          "type": "string",
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "readOnly": true
        },
        "artifacts": {
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts"
        }
      },
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Build",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA."
    },
    "BuildSignature": {
      "properties": {
        "signature": {
          "description": "Signature of the related `BuildProvenance`, encoded in a base64 string.",
          "type": "string"
        },
        "publicKey": {
          "description": "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`",
          "type": "string"
        },
        "keyId": {
          "type": "string",
          "description": "An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service)."
        },
        "keyType": {
          "enum": [
            "KEY_TYPE_UNSPECIFIED",
            "PGP_ASCII_ARMORED",
            "PKIX_PEM"
          ],
          "description": "The type of the key, either stored in `public_key` or referenced in `key_id`",
          "enumDescriptions": [
            "`KeyType` is not set.",
            "`PGP ASCII Armored` public key.",
            "`PKIX PEM` public key."
          ],
          "type": "string"
        }
      },
      "type": "object",
      "description": "Message encapsulating the signature of the verified build.",
      "id": "BuildSignature"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning": {
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning",
      "description": "A non-fatal problem encountered during the execution of the build.",
      "properties": {
        "priority": {
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "description": "The priority for this warning.",
          "type": "string"
        },
        "text": {
          "description": "Explanation of the warning generated.",
          "type": "string"
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions": {
      "type": "object",
      "description": "Optional arguments to enable specific features of builds.",
      "properties": {
        "logging": {
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).",
            "Turn off all logging. No build logs will be captured."
          ],
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "type": "string",
          "description": "Option to specify the logging mode, which determines if and where build logs are stored."
        },
        "logStreamingOption": {
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ],
          "type": "string",
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ]
        },
        "sourceProvenanceHash": {
          "description": "Requested hash for SourceProvenance.",
          "items": {
            "type": "string",
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ],
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ]
          },
          "type": "array"
        },
        "substitutionOption": {
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "type": "string",
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ]
        },
        "pool": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption",
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
        },
        "env": {
          "type": "array",
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "items": {
            "type": "string"
          }
        },
        "diskSizeGb": {
          "format": "int64",
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.",
          "type": "string"
        },
        "workerPool": {
          "type": "string",
          "description": "This field deprecated; please use `pool.name` instead."
        },
        "requestedVerifyOption": {
          "description": "Requested verifiability options.",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ],
          "type": "string"
        },
        "secretEnv": {
          "type": "array",
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "items": {
            "type": "string"
          }
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "machineType": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ],
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ],
          "description": "Compute Engine machine type on which to run the build."
        },
        "volumes": {
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume"
          }
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        },
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        }
      },
      "type": "object",
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Source": {
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Source",
      "description": "Location of the source in a supported storage service.",
      "properties": {
        "repoSource": {
          "description": "If provided, get the source from this location in a Cloud Source Repository.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource"
        },
        "storageSourceManifest": {
          "description": "If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest"
        },
        "storageSource": {
          "description": "If provided, get the source from this location in Google Cloud Storage.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource"
        }
      }
    },
    "InTotoProvenance": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "Metadata"
        },
        "materials": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty."
        },
        "recipe": {
          "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required",
          "$ref": "Recipe"
        },
        "builderConfig": {
          "description": "required",
          "$ref": "BuilderConfig"
        }
      },
      "id": "InTotoProvenance"
    },
    "ListOccurrencesResponse": {
      "description": "Response including listed active occurrences.",
      "type": "object",
      "properties": {
        "occurrences": {
          "description": "The occurrences requested.",
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results."
        }
      },
      "id": "ListOccurrencesResponse"
    },
    "Digest": {
      "properties": {
        "digestBytes": {
          "type": "string",
          "description": "Value of the digest.",
          "format": "byte"
        },
        "algo": {
          "type": "string",
          "description": "`SHA1`, `SHA512` etc."
        }
      },
      "id": "Digest",
      "type": "object",
      "description": "Digest information."
    },
    "Layer": {
      "description": "Layer holds metadata specific to a layer of a Docker image.",
      "type": "object",
      "properties": {
        "directive": {
          "enumDescriptions": [
            "Default value for unsupported/missing directive",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/reference/builder/#copy",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/"
          ],
          "type": "string",
          "description": "The recovered Dockerfile directive used to construct this layer.",
          "enum": [
            "DIRECTIVE_UNSPECIFIED",
            "MAINTAINER",
            "RUN",
            "CMD",
            "LABEL",
            "EXPOSE",
            "ENV",
            "ADD",
            "COPY",
            "ENTRYPOINT",
            "VOLUME",
            "USER",
            "WORKDIR",
            "ARG",
            "ONBUILD",
            "STOPSIGNAL",
            "HEALTHCHECK",
            "SHELL"
          ]
        },
        "arguments": {
          "description": "The recovered arguments to the Dockerfile directive.",
          "type": "string"
        }
      },
      "id": "Layer"
    },
    "DocumentNote": {
      "type": "object",
      "description": "DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
      "id": "DocumentNote",
      "properties": {
        "spdxVersion": {
          "description": "Provide a reference number that can be used to understand how to parse and interpret the rest of the file",
          "type": "string"
        },
        "dataLicence": {
          "description": "Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields (\"SPDX-Metadata\")",
          "type": "string"
        }
      }
    },
    "CisBenchmark": {
      "description": "A compliance check that is a CIS benchmark.",
      "type": "object",
      "id": "CisBenchmark",
      "properties": {
        "profileLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The profile level of this CIS benchmark check."
        },
        "severity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "The severity level of this CIS benchmark check.",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ]
        }
      }
    },
    "BuilderConfig": {
      "type": "object",
      "id": "BuilderConfig",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation",
      "description": "Identifies the event that kicked off the build.",
      "properties": {
        "configSource": {
          "description": "Describes where the config file that kicked off the build came from.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource"
        },
        "environment": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          },
          "type": "object",
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the build."
        },
        "parameters": {
          "type": "object",
          "description": "Collection of all external inputs that influenced the build on top of invocation.configSource.",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          }
        }
      },
      "type": "object"
    },
    "RepoSource": {
      "description": "RepoSource describes the location of the source in a Google Cloud Source Repository.",
      "id": "RepoSource",
      "properties": {
        "repoName": {
          "type": "string",
          "description": "Name of the repo."
        },
        "branchName": {
          "description": "Name of the branch to build.",
          "type": "string"
        },
        "tagName": {
          "type": "string",
          "description": "Name of the tag to build."
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "projectId": {
          "description": "ID of the project that owns the repo.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PackageInfoNote": {
      "type": "object",
      "id": "PackageInfoNote",
      "description": "PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
      "properties": {
        "licenseDeclared": {
          "$ref": "License",
          "description": "List the licenses that have been declared by the authors of the package"
        },
        "title": {
          "type": "string",
          "description": "Identify the full name of the package as given by the Package Originator"
        },
        "packageType": {
          "type": "string",
          "description": "The type of package: OS, MAVEN, GO, GO_STDLIB, etc."
        },
        "filesLicenseInfo": {
          "items": {
            "type": "string"
          },
          "description": "Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found",
          "type": "array"
        },
        "externalRefs": {
          "description": "ExternalRef",
          "items": {
            "$ref": "ExternalRef"
          },
          "type": "array"
        },
        "attribution": {
          "description": "A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts",
          "type": "string"
        },
        "supplier": {
          "description": "Identify the actual distribution source for the package/directory identified in the SPDX file",
          "type": "string"
        },
        "summaryDescription": {
          "type": "string",
          "description": "A short description of the package"
        },
        "analyzed": {
          "description": "Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document",
          "type": "boolean"
        },
        "copyright": {
          "description": "Identify the copyright holders of the package, as well as any dates present",
          "type": "string"
        },
        "checksum": {
          "type": "string",
          "description": "Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file"
        },
        "downloadLocation": {
          "type": "string",
          "description": "This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created"
        },
        "verificationCode": {
          "description": "This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file",
          "type": "string"
        },
        "detailedDescription": {
          "type": "string",
          "description": "A more detailed description of the package"
        },
        "homePage": {
          "description": "Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "Identify the version of the package"
        },
        "originator": {
          "description": "If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came",
          "type": "string"
        }
      }
    },
    "PackageIssue": {
      "id": "PackageIssue",
      "properties": {
        "severityName": {
          "type": "string"
        },
        "fixedLocation": {
          "description": "The location of the available fix for vulnerability.",
          "$ref": "VulnerabilityLocation"
        },
        "effectiveSeverity": {
          "description": "Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "readOnly": true
        },
        "packageType": {
          "type": "string",
          "description": "The type of package (e.g. OS, MAVEN, GO)."
        },
        "affectedLocation": {
          "description": "The location of the vulnerability.",
          "$ref": "VulnerabilityLocation"
        }
      },
      "description": "This message wraps a location affected by a vulnerability and its associated fix (if one is available).",
      "type": "object"
    },
    "Hash": {
      "description": "Container message for hash values.",
      "properties": {
        "type": {
          "enumDescriptions": [
            "No hash requested.",
            "A sha256 hash."
          ],
          "type": "string",
          "description": "The type of hash that was performed.",
          "enum": [
            "NONE",
            "SHA256"
          ]
        },
        "value": {
          "format": "byte",
          "description": "The hash value.",
          "type": "string"
        }
      },
      "id": "Hash",
      "type": "object"
    },
    "UpgradeOccurrence": {
      "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).",
      "type": "object",
      "id": "UpgradeOccurrence",
      "properties": {
        "distribution": {
          "$ref": "UpgradeDistribution",
          "description": "Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence."
        },
        "parsedVersion": {
          "$ref": "Version",
          "description": "Required - The version of the package in a machine + human readable form."
        },
        "package": {
          "description": "Required - The package this Upgrade is for.",
          "type": "string"
        }
      }
    },
    "License": {
      "id": "License",
      "properties": {
        "comments": {
          "description": "Comments",
          "type": "string"
        },
        "expression": {
          "type": "string",
          "description": "Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
        }
      },
      "type": "object",
      "description": "License information."
    },
    "Occurrence": {
      "type": "object",
      "description": "`Occurrence` includes information about analysis occurrences for an image.",
      "id": "Occurrence",
      "properties": {
        "noteName": {
          "type": "string",
          "description": "An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests."
        },
        "derivedImage": {
          "$ref": "Derived",
          "description": "Describes how this resource derives from the basis in the associated note."
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\""
        },
        "spdxRelationship": {
          "$ref": "RelationshipOccurrence",
          "description": "Describes a specific relationship between SPDX elements."
        },
        "upgrade": {
          "$ref": "UpgradeOccurrence",
          "description": "Describes an upgrade."
        },
        "deployment": {
          "$ref": "Deployment",
          "description": "Describes the deployment of an artifact on a runtime."
        },
        "resource": {
          "$ref": "Resource",
          "description": " The resource for which the `Occurrence` applies."
        },
        "updateTime": {
          "description": "Output only. The time this `Occurrence` was last updated.",
          "format": "google-datetime",
          "type": "string"
        },
        "spdxFile": {
          "$ref": "FileOccurrence",
          "description": "Describes a specific SPDX File."
        },
        "sbom": {
          "description": "Describes a specific software bill of materials document.",
          "$ref": "DocumentOccurrence"
        },
        "buildDetails": {
          "description": "Build details for a verifiable build.",
          "$ref": "BuildDetails"
        },
        "vulnerabilityDetails": {
          "description": "Details of a security vulnerability note.",
          "$ref": "VulnerabilityDetails"
        },
        "spdxPackage": {
          "$ref": "PackageInfoOccurrence",
          "description": "Describes a specific SPDX Package."
        },
        "discovered": {
          "$ref": "Discovered",
          "description": "Describes the initial scan status for this resource."
        },
        "createTime": {
          "description": "Output only. The time this `Occurrence` was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "envelope": {
          "$ref": "Envelope",
          "description": "https://github.com/secure-systems-lab/dsse"
        },
        "attestation": {
          "$ref": "Attestation",
          "description": "Describes an attestation of an artifact."
        },
        "compliance": {
          "$ref": "ComplianceOccurrence",
          "description": "Describes whether or not a resource passes compliance checks."
        },
        "installation": {
          "description": "Describes the installation of a package on the linked resource.",
          "$ref": "Installation"
        },
        "kind": {
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource.",
            "This represents a software bill of materials.",
            "This represents an SPDX Package.",
            "This represents an SPDX File.",
            "This represents an SPDX Relationship.",
            "This represents a DSSE attestation Note"
          ],
          "description": "Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.",
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE",
            "SBOM",
            "SPDX_PACKAGE",
            "SPDX_FILE",
            "SPDX_RELATIONSHIP",
            "DSSE_ATTESTATION"
          ]
        },
        "remediation": {
          "description": "A description of actions that can be taken to remedy the `Note`",
          "type": "string"
        },
        "dsseAttestation": {
          "description": "This represents a DSSE attestation occurrence",
          "$ref": "DSSEAttestationOccurrence"
        },
        "resourceUrl": {
          "description": "The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.",
          "type": "string"
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Hash": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The hash value.",
          "format": "byte"
        },
        "type": {
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ],
          "description": "The type of hash that was performed."
        }
      },
      "description": "Container message for hash values.",
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Hash"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets": {
      "properties": {
        "secretManager": {
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret"
          },
          "type": "array"
        },
        "inline": {
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret"
          }
        }
      },
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets",
      "description": "Secrets and secret environment variables."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext": {
      "properties": {
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext"
        },
        "repoId": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1RepoId",
          "description": "The ID of the repo."
        },
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext"
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata",
      "properties": {
        "endTime": {
          "description": "Output only. The time that this operation was marked completed or failed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this operation was created."
        }
      },
      "description": "Metadata for all operations used and required for all operations that created by Container Analysis Providers",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "type": "object",
      "properties": {
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*",
          "type": "string"
        },
        "env": {
          "type": "string",
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step."
        }
      }
    },
    "Note": {
      "properties": {
        "baseImage": {
          "$ref": "Basis",
          "description": "A note describing a base image."
        },
        "buildType": {
          "description": "Build provenance type for a verifiable build.",
          "$ref": "BuildType"
        },
        "dsseAttestation": {
          "description": "A note describing a dsse attestation note.",
          "$ref": "DSSEAttestationNote"
        },
        "discovery": {
          "$ref": "Discovery",
          "description": "A note describing a provider/analysis type."
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time this note was last updated. This field can be used as a filter in list requests.",
          "format": "google-datetime"
        },
        "relatedUrl": {
          "items": {
            "$ref": "RelatedUrl"
          },
          "type": "array",
          "description": "URLs associated with this note"
        },
        "package": {
          "description": "A note describing a package hosted by various package managers.",
          "$ref": "Package"
        },
        "createTime": {
          "description": "Output only. The time this note was created. This field can be used as a filter in list requests.",
          "type": "string",
          "format": "google-datetime"
        },
        "expirationTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time of expiration for this note, null if note does not expire."
        },
        "compliance": {
          "$ref": "ComplianceNote",
          "description": "A note describing a compliance check."
        },
        "sbom": {
          "$ref": "DocumentNote",
          "description": "A note describing a software bill of materials."
        },
        "name": {
          "description": "The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"",
          "type": "string"
        },
        "spdxRelationship": {
          "description": "A note describing a relationship between SPDX elements.",
          "$ref": "RelationshipNote"
        },
        "spdxPackage": {
          "$ref": "PackageInfoNote",
          "description": "A note describing an SPDX Package."
        },
        "longDescription": {
          "type": "string",
          "description": "A detailed description of this `Note`."
        },
        "spdxFile": {
          "description": "A note describing an SPDX File.",
          "$ref": "FileNote"
        },
        "shortDescription": {
          "type": "string",
          "description": "A one sentence description of this `Note`."
        },
        "upgrade": {
          "$ref": "UpgradeNote",
          "description": "A note describing an upgrade."
        },
        "deployable": {
          "description": "A note describing something that can be deployed.",
          "$ref": "Deployable"
        },
        "attestationAuthority": {
          "$ref": "AttestationAuthority",
          "description": "A note describing an attestation role."
        },
        "kind": {
          "type": "string",
          "description": "Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource.",
            "This represents a software bill of materials.",
            "This represents an SPDX Package.",
            "This represents an SPDX File.",
            "This represents an SPDX Relationship.",
            "This represents a DSSE attestation Note"
          ],
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE",
            "SBOM",
            "SPDX_PACKAGE",
            "SPDX_FILE",
            "SPDX_RELATIONSHIP",
            "DSSE_ATTESTATION"
          ]
        },
        "vulnerabilityType": {
          "$ref": "VulnerabilityType",
          "description": "A package vulnerability type of note."
        }
      },
      "type": "object",
      "description": "Provides a detailed description of a `Note`.",
      "id": "Note"
    },
    "Artifact": {
      "properties": {
        "checksum": {
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456"
        },
        "names": {
          "type": "array",
          "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto."
        }
      },
      "description": "Artifact describes a build product.",
      "id": "Artifact",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource": {
      "properties": {
        "branchName": {
          "type": "string",
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "repoName": {
          "description": "Name of the Cloud Source Repository.",
          "type": "string"
        },
        "substitutions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource",
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object"
    },
    "EnvelopeSignature": {
      "properties": {
        "sig": {
          "description": "The signature itself",
          "format": "byte",
          "type": "string"
        },
        "keyid": {
          "description": "A reference id to the key being used for signing",
          "type": "string"
        }
      },
      "type": "object",
      "id": "EnvelopeSignature",
      "description": "A DSSE signature"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest": {
      "type": "object",
      "description": "Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        },
        "pushTiming": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified image.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`."
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage",
      "description": "An image built by the pipeline."
    },
    "BuildDetails": {
      "type": "object",
      "id": "BuildDetails",
      "properties": {
        "provenance": {
          "$ref": "BuildProvenance",
          "description": "The actual provenance"
        },
        "intotoProvenance": {
          "description": "Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.",
          "$ref": "InTotoProvenance"
        },
        "intotoStatement": {
          "$ref": "InTotoStatement",
          "description": "In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope."
        },
        "provenanceBytes": {
          "description": "Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.",
          "type": "string"
        }
      },
      "description": "Message encapsulating build provenance details."
    },
    "AttestationAuthority": {
      "type": "object",
      "id": "AttestationAuthority",
      "properties": {
        "hint": {
          "$ref": "AttestationAuthorityHint"
        }
      },
      "description": "Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `AttestationAuthority` for \"QA\" and one for \"build\". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project."
    },
    "StorageSource": {
      "properties": {
        "object": {
          "description": "Google Cloud Storage object containing source.",
          "type": "string"
        },
        "generation": {
          "type": "string",
          "description": "Google Cloud Storage generation for the object.",
          "format": "int64"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "id": "StorageSource",
      "type": "object",
      "description": "StorageSource describes the location of the source in an archive file in Google Cloud Storage."
    },
    "Basis": {
      "type": "object",
      "properties": {
        "resourceUrl": {
          "type": "string",
          "description": "The resource_url for the resource representing the basis of associated occurrence images."
        },
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "The fingerprint of the base image."
        }
      },
      "description": "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.",
      "id": "Basis"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SourceContext": {
      "properties": {
        "gerrit": {
          "description": "A SourceContext referring to a Gerrit project.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext"
        },
        "cloudRepo": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext",
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo."
        },
        "git": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext",
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub)."
        },
        "labels": {
          "description": "Labels with user defined metadata.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory."
    },
    "Expr": {
      "properties": {
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        },
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        }
      },
      "type": "object",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "id": "Expr"
    },
    "Fingerprint": {
      "description": "A set of properties that uniquely identify a given Docker image.",
      "type": "object",
      "properties": {
        "v1Name": {
          "description": "The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "v2Blob": {
          "type": "array",
          "description": "The ordered list of v2 blobs that represent a given image.",
          "items": {
            "type": "string"
          }
        },
        "v2Name": {
          "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.",
          "type": "string"
        }
      },
      "id": "Fingerprint"
    },
    "Derived": {
      "type": "object",
      "description": "Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
      "properties": {
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "The fingerprint of the derived image."
        },
        "baseResourceUrl": {
          "description": "Output only. This contains the base image URL for the derived image occurrence.",
          "type": "string"
        },
        "layerInfo": {
          "type": "array",
          "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.",
          "items": {
            "$ref": "Layer"
          }
        },
        "distance": {
          "description": "Output only. The number of layers by which this image differs from the associated image basis.",
          "type": "integer",
          "format": "uint32"
        }
      },
      "id": "Derived"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext": {
      "properties": {
        "revisionId": {
          "description": "A revision (commit) ID.",
          "type": "string"
        },
        "aliasContext": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "hostUri": {
          "type": "string",
          "description": "The URI of a running Gerrit instance."
        },
        "gerritProject": {
          "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
          "type": "string"
        }
      },
      "description": "A SourceContext referring to a Gerrit project.",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig": {
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig",
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "type": "object"
    },
    "FileNote": {
      "type": "object",
      "id": "FileNote",
      "description": "FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
      "properties": {
        "checksum": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Provide a unique identifier to match analysis information on each specific file in a package"
        },
        "fileType": {
          "description": "This field provides information about the type of file identified",
          "enum": [
            "FILE_TYPE_UNSPECIFIED",
            "SOURCE",
            "BINARY",
            "ARCHIVE",
            "APPLICATION",
            "AUDIO",
            "IMAGE",
            "TEXT",
            "VIDEO",
            "DOCUMENTATION",
            "SPDX",
            "OTHER"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "The file is human readable source code (.c, .html, etc.)",
            "The file is a compiled object, target image or binary executable (.o, .a, etc.)",
            "The file represents an archive (.tar, .jar, etc.)",
            "The file is associated with a specific application type (MIME type of application/*)",
            "The file is associated with an audio file (MIME type of audio/* , e.g. .mp3)",
            "The file is associated with an picture image file (MIME type of image/*, e.g., .jpg, .gif)",
            "The file is human readable text file (MIME type of text/*)",
            "The file is associated with a video file type (MIME type of video/*)",
            "The file serves as documentation",
            "The file is an SPDX document",
            "The file doesn't fit into the above categories (generated artifacts, data files, etc.)"
          ]
        },
        "title": {
          "type": "string",
          "description": "Identify the full path and filename that corresponds to the file information in this section"
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo": {
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "type": "string",
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "description": "The name of the failure."
        },
        "detail": {
          "type": "string",
          "description": "Explains the failure issue in more detail using hard-coded text."
        }
      },
      "description": "A fatal problem encountered during the execution of the build."
    }
  },
  "fullyEncodeReservedExpansion": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "version": "v1alpha1",
  "basePath": "",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "documentationLink": "https://cloud.google.com/container-analysis/api/reference/rest/",
  "rootUrl": "https://containeranalysis.googleapis.com/",
  "mtlsRootUrl": "https://containeranalysis.mtls.googleapis.com/",
  "ownerDomain": "google.com",
  "canonicalName": "Container Analysis",
  "version_module": true
}

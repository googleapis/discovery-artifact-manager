{
  "schemas": {
    "GetVulnzOccurrencesSummaryResponse": {
      "type": "object",
      "description": "A summary of how many vulnz occurrences there are per severity type. counts by groups, or if we should have different summary messages like this.",
      "properties": {
        "counts": {
          "items": {
            "$ref": "SeverityCount"
          },
          "description": "A map of how many occurrences were found for each severity.",
          "type": "array"
        }
      },
      "id": "GetVulnzOccurrencesSummaryResponse"
    },
    "Distribution": {
      "id": "Distribution",
      "description": "This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
          "type": "string"
        },
        "maintainer": {
          "description": "A freeform string denoting the maintainer of this package.",
          "type": "string"
        },
        "latestVersion": {
          "description": "The latest available version of this package in this distribution channel.",
          "$ref": "Version"
        },
        "architecture": {
          "enumDescriptions": [
            "Unknown architecture",
            "X86 architecture",
            "X64 architecture"
          ],
          "description": "The CPU architecture for which packages in this distribution channel were built",
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ],
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The distribution channel-specific homepage for this package."
        },
        "description": {
          "description": "The distribution channel-specific description of this package.",
          "type": "string"
        }
      }
    },
    "Command": {
      "type": "object",
      "properties": {
        "waitFor": {
          "type": "array",
          "description": "The ID(s) of the Command(s) that this Command depends on.",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "description": "Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency."
        },
        "name": {
          "description": "Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.",
          "type": "string"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "description": "Command-line arguments used when executing this Command.",
          "type": "array"
        },
        "env": {
          "type": "array",
          "description": "Environment variables set before running this Command.",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running this Command.",
          "type": "string"
        }
      },
      "id": "Command",
      "description": "Command describes a step performed as part of the build pipeline."
    },
    "GetIamPolicyRequest": {
      "properties": {
        "options": {
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.",
          "$ref": "GetPolicyOptions"
        }
      },
      "id": "GetIamPolicyRequest",
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object"
    },
    "AttestationAuthority": {
      "id": "AttestationAuthority",
      "properties": {
        "hint": {
          "$ref": "AttestationAuthorityHint"
        }
      },
      "description": "Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `AttestationAuthority` for \"QA\" and one for \"build\". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.",
      "type": "object"
    },
    "BuildDetails": {
      "id": "BuildDetails",
      "type": "object",
      "properties": {
        "provenanceBytes": {
          "type": "string",
          "description": "Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes."
        },
        "provenance": {
          "$ref": "BuildProvenance",
          "description": "The actual provenance"
        }
      },
      "description": "Message encapsulating build provenance details."
    },
    "PgpSignedAttestation": {
      "id": "PgpSignedAttestation",
      "properties": {
        "contentType": {
          "enumDescriptions": [
            "`ContentType` is not set.",
            "Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted from `signature` is a JSON blob conforming to the linked schema."
          ],
          "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
          "type": "string",
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "SIMPLE_SIGNING_JSON"
          ]
        },
        "signature": {
          "type": "string",
          "description": "The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload."
        },
        "pgpKeyId": {
          "description": "The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
          "type": "string"
        }
      },
      "description": "An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
      "type": "object"
    },
    "FileHashes": {
      "description": "Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.",
      "id": "FileHashes",
      "type": "object",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "Hash"
          },
          "description": "Collection of file hashes."
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId": {
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
      "type": "object",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId",
      "properties": {
        "repoName": {
          "type": "string",
          "description": "The name of the repo. Leave empty for the default repo."
        },
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        }
      }
    },
    "ListScanConfigsResponse": {
      "id": "ListScanConfigsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A page token to pass in order to get more scan configs."
        },
        "scanConfigs": {
          "type": "array",
          "items": {
            "$ref": "ScanConfig"
          },
          "description": "The set of scan configs."
        }
      },
      "description": "A list of scan configs for the project.",
      "type": "object"
    },
    "Discovery": {
      "id": "Discovery",
      "description": "A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.",
      "type": "object",
      "properties": {
        "analysisKind": {
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource."
          ],
          "type": "string",
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE"
          ],
          "description": "The kind of analysis that is handled by this discovery."
        }
      }
    },
    "Detail": {
      "id": "Detail",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "The vendor of the product. e.g. \"google\""
        },
        "source": {
          "type": "string",
          "description": "The source from which the information in this Detail was obtained."
        },
        "packageType": {
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)",
          "type": "string"
        },
        "minAffectedVersion": {
          "$ref": "Version",
          "description": "The min version of the package in which the vulnerability exists."
        },
        "maxAffectedVersion": {
          "$ref": "Version",
          "description": "The max version of the package in which the vulnerability exists."
        },
        "description": {
          "description": "A vendor-specific description of this note.",
          "type": "string"
        },
        "isObsolete": {
          "description": "Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.",
          "type": "boolean"
        },
        "severityName": {
          "description": "The severity (eg: distro assigned severity) for this vulnerability.",
          "type": "string"
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "fixedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The fix for this specific package version."
        },
        "package": {
          "type": "string",
          "description": "The name of the package where the vulnerability was found. This field can be used as a filter in list requests."
        }
      },
      "type": "object",
      "description": "Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata": {
      "type": "object",
      "description": "Metadata for all operations used and required for all operations that created by Container Analysis Providers",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata",
      "properties": {
        "endTime": {
          "format": "google-datetime",
          "description": "Output only. The time that this operation was marked completed or failed.",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time this operation was created.",
          "format": "google-datetime"
        }
      }
    },
    "Package": {
      "id": "Package",
      "type": "object",
      "description": "This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.",
      "properties": {
        "distribution": {
          "type": "array",
          "items": {
            "$ref": "Distribution"
          },
          "description": "The various channels by which a package is distributed."
        },
        "name": {
          "description": "The name of the package.",
          "type": "string"
        }
      }
    },
    "Deployment": {
      "description": "The period during which some deployable was active in a runtime.",
      "properties": {
        "undeployTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "End of the lifetime of this deployment."
        },
        "config": {
          "type": "string",
          "description": "Configuration used to create this deployment."
        },
        "resourceUri": {
          "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deployTime": {
          "description": "Beginning of the lifetime of this deployment.",
          "format": "google-datetime",
          "type": "string"
        },
        "address": {
          "description": "Address of the runtime element hosting this deployment.",
          "type": "string"
        },
        "platform": {
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ],
          "description": "Platform hosting this deployment.",
          "enumDescriptions": [
            "Unknown",
            "Google Container Engine",
            "Google App Engine: Flexible Environment",
            "Custom user-defined platform"
          ],
          "type": "string"
        },
        "userEmail": {
          "description": "Identity of the user that triggered this deployment.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Deployment"
    },
    "UpgradeOccurrence": {
      "properties": {
        "package": {
          "type": "string",
          "description": "Required - The package this Upgrade is for."
        },
        "parsedVersion": {
          "$ref": "Version",
          "description": "Required - The version of the package in a machine + human readable form."
        },
        "distribution": {
          "description": "Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.",
          "$ref": "UpgradeDistribution"
        }
      },
      "type": "object",
      "id": "UpgradeOccurrence",
      "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability)."
    },
    "ComplianceVersion": {
      "id": "ComplianceVersion",
      "properties": {
        "version": {
          "description": "The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.",
          "type": "string"
        },
        "cpeUri": {
          "type": "string",
          "description": "The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to."
        }
      },
      "description": "Describes the CIS benchmark version that is applicable to a given OS and os version.",
      "type": "object"
    },
    "TestIamPermissionsRequest": {
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array"
        }
      },
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "id": "TestIamPermissionsRequest"
    },
    "Note": {
      "type": "object",
      "id": "Note",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\""
        },
        "package": {
          "$ref": "Package",
          "description": "A note describing a package hosted by various package managers."
        },
        "deployable": {
          "description": "A note describing something that can be deployed.",
          "$ref": "Deployable"
        },
        "upgrade": {
          "$ref": "UpgradeNote",
          "description": "A note describing an upgrade."
        },
        "relatedUrl": {
          "type": "array",
          "items": {
            "$ref": "RelatedUrl"
          },
          "description": "URLs associated with this note"
        },
        "updateTime": {
          "description": "Output only. The time this note was last updated. This field can be used as a filter in list requests.",
          "format": "google-datetime",
          "type": "string"
        },
        "kind": {
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource."
          ],
          "description": "Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.",
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE"
          ],
          "type": "string"
        },
        "baseImage": {
          "$ref": "Basis",
          "description": "A note describing a base image."
        },
        "attestationAuthority": {
          "description": "A note describing an attestation role.",
          "$ref": "AttestationAuthority"
        },
        "buildType": {
          "description": "Build provenance type for a verifiable build.",
          "$ref": "BuildType"
        },
        "shortDescription": {
          "type": "string",
          "description": "A one sentence description of this `Note`."
        },
        "longDescription": {
          "description": "A detailed description of this `Note`.",
          "type": "string"
        },
        "compliance": {
          "description": "A note describing a compliance check.",
          "$ref": "ComplianceNote"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time this note was created. This field can be used as a filter in list requests."
        },
        "expirationTime": {
          "format": "google-datetime",
          "description": "Time of expiration for this note, null if note does not expire.",
          "type": "string"
        },
        "discovery": {
          "$ref": "Discovery",
          "description": "A note describing a provider/analysis type."
        },
        "vulnerabilityType": {
          "$ref": "VulnerabilityType",
          "description": "A package vulnerability type of note."
        }
      },
      "description": "Provides a detailed description of a `Note`."
    },
    "SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "id": "SetIamPolicyRequest",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      }
    },
    "BuildProvenance": {
      "id": "BuildProvenance",
      "properties": {
        "startTime": {
          "description": "Time at which execution of the build was started.",
          "format": "google-datetime",
          "type": "string"
        },
        "finishTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time at which execution of the build was finished."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time at which the build was created."
        },
        "commands": {
          "type": "array",
          "items": {
            "$ref": "Command"
          },
          "description": "Commands requested by the build."
        },
        "sourceProvenance": {
          "description": "Details of the Source input to the build.",
          "$ref": "Source"
        },
        "builtArtifacts": {
          "description": "Output of the build.",
          "type": "array",
          "items": {
            "$ref": "Artifact"
          }
        },
        "builderVersion": {
          "type": "string",
          "description": "Version string of the builder at the time this build was executed."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the build."
        },
        "projectId": {
          "description": "ID of the project.",
          "type": "string"
        },
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
          "type": "string"
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs were written."
        },
        "triggerId": {
          "description": "Trigger identifier if the build was triggered automatically; empty if not.",
          "type": "string"
        },
        "buildOptions": {
          "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion."
    },
    "BuildSignature": {
      "type": "object",
      "properties": {
        "publicKey": {
          "description": "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`",
          "type": "string"
        },
        "keyId": {
          "description": "An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).",
          "type": "string"
        },
        "signature": {
          "description": "Signature of the related `BuildProvenance`, encoded in a base64 string.",
          "type": "string"
        },
        "keyType": {
          "enum": [
            "KEY_TYPE_UNSPECIFIED",
            "PGP_ASCII_ARMORED",
            "PKIX_PEM"
          ],
          "description": "The type of the key, either stored in `public_key` or referenced in `key_id`",
          "enumDescriptions": [
            "`KeyType` is not set.",
            "`PGP ASCII Armored` public key.",
            "`PKIX PEM` public key."
          ],
          "type": "string"
        }
      },
      "description": "Message encapsulating the signature of the verified build.",
      "id": "BuildSignature"
    },
    "Resource": {
      "properties": {
        "contentHash": {
          "description": "The hash of the resource content. E.g., the Docker digest.",
          "$ref": "Hash"
        },
        "uri": {
          "description": "The unique URI of the resource. E.g., \"https://gcr.io/project/image@sha256:foo\" for a Docker image.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the resource. E.g., the name of a Docker image - \"Debian\"."
        }
      },
      "id": "Resource",
      "type": "object",
      "description": " Resource is an entity that can have metadata. E.g., a Docker image."
    },
    "Deployable": {
      "id": "Deployable",
      "description": "An artifact that can be deployed in some runtime.",
      "properties": {
        "resourceUri": {
          "type": "array",
          "description": "Resource URI for the artifact being deployed.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "Policy": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32",
          "type": "integer"
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        },
        "bindings": {
          "items": {
            "$ref": "Binding"
          },
          "type": "array",
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
        }
      },
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "id": "Policy"
    },
    "ListOccurrencesResponse": {
      "description": "Response including listed active occurrences.",
      "id": "ListOccurrencesResponse",
      "type": "object",
      "properties": {
        "occurrences": {
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array",
          "description": "The occurrences requested."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results."
        }
      }
    },
    "Installation": {
      "properties": {
        "location": {
          "items": {
            "$ref": "Location"
          },
          "type": "array",
          "description": "All of the places within the filesystem versions of this package have been found."
        },
        "name": {
          "description": "Output only. The name of the installed package.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "This represents how a particular software package may be installed on a system.",
      "id": "Installation"
    },
    "Fingerprint": {
      "type": "object",
      "description": "A set of properties that uniquely identify a given Docker image.",
      "id": "Fingerprint",
      "properties": {
        "v2Blob": {
          "description": "The ordered list of v2 blobs that represent a given image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "v2Name": {
          "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "v1Name": {
          "type": "string",
          "description": "The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests."
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext": {
      "properties": {
        "revisionId": {
          "type": "string",
          "description": "Required. Git commit hash."
        },
        "url": {
          "description": "Git repository URL.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext",
      "type": "object",
      "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub)."
    },
    "Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "properties": {
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        },
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        },
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        }
      },
      "id": "Expr",
      "type": "object"
    },
    "ListNotesResponse": {
      "description": "Response including listed notes.",
      "type": "object",
      "id": "ListNotesResponse",
      "properties": {
        "notes": {
          "description": "The occurrences requested",
          "items": {
            "$ref": "Note"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The next pagination token in the list response. It should be used as page_token for the following request. An empty value means no more result.",
          "type": "string"
        }
      }
    },
    "CisBenchmark": {
      "properties": {
        "severity": {
          "description": "The severity level of this CIS benchmark check.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ]
        },
        "profileLevel": {
          "format": "int32",
          "type": "integer",
          "description": "The profile level of this CIS benchmark check."
        }
      },
      "id": "CisBenchmark",
      "type": "object",
      "description": "A compliance check that is a CIS benchmark."
    },
    "UpdateOperationRequest": {
      "id": "UpdateOperationRequest",
      "description": "Request for updating an existing operation",
      "properties": {
        "updateMask": {
          "description": "The fields to update.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "operation": {
          "description": "The operation to create.",
          "$ref": "Operation"
        }
      },
      "type": "object"
    },
    "Occurrence": {
      "description": "`Occurrence` includes information about analysis occurrences for an image.",
      "properties": {
        "kind": {
          "description": "Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource."
          ],
          "type": "string",
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE"
          ]
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\""
        },
        "createTime": {
          "description": "Output only. The time this `Occurrence` was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time this `Occurrence` was last updated."
        },
        "noteName": {
          "description": "An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests.",
          "type": "string"
        },
        "resourceUrl": {
          "type": "string",
          "description": "The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests."
        },
        "installation": {
          "description": "Describes the installation of a package on the linked resource.",
          "$ref": "Installation"
        },
        "compliance": {
          "description": "Describes whether or not a resource passes compliance checks.",
          "$ref": "ComplianceOccurrence"
        },
        "upgrade": {
          "$ref": "UpgradeOccurrence",
          "description": "Describes an upgrade."
        },
        "remediation": {
          "type": "string",
          "description": "A description of actions that can be taken to remedy the `Note`"
        },
        "resource": {
          "description": " The resource for which the `Occurrence` applies.",
          "$ref": "Resource"
        },
        "discovered": {
          "$ref": "Discovered",
          "description": "Describes the initial scan status for this resource."
        },
        "deployment": {
          "$ref": "Deployment",
          "description": "Describes the deployment of an artifact on a runtime."
        },
        "buildDetails": {
          "description": "Build details for a verifiable build.",
          "$ref": "BuildDetails"
        },
        "derivedImage": {
          "description": "Describes how this resource derives from the basis in the associated note.",
          "$ref": "Derived"
        },
        "vulnerabilityDetails": {
          "description": "Details of a security vulnerability note.",
          "$ref": "VulnerabilityDetails"
        },
        "attestation": {
          "$ref": "Attestation",
          "description": "Describes an attestation of an artifact."
        }
      },
      "type": "object",
      "id": "Occurrence"
    },
    "Source": {
      "type": "object",
      "description": "Source describes the location of the source used for the build.",
      "properties": {
        "fileHashes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file."
        },
        "artifactStorageSource": {
          "description": "If provided, the input binary artifacts for the build came from this location.",
          "$ref": "StorageSource"
        },
        "context": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
          "description": "If provided, the source code used for the build came from this location."
        },
        "storageSource": {
          "description": "If provided, get the source from this location in in Google Cloud Storage.",
          "$ref": "StorageSource"
        },
        "repoSource": {
          "description": "If provided, get source from this location in a Cloud Repo.",
          "$ref": "RepoSource"
        },
        "additionalContexts": {
          "type": "array",
          "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.",
          "items": {
            "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
          }
        }
      },
      "id": "Source"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext": {
      "type": "object",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext",
      "description": "A SourceContext referring to a Gerrit project.",
      "properties": {
        "revisionId": {
          "description": "A revision (commit) ID.",
          "type": "string"
        },
        "hostUri": {
          "type": "string",
          "description": "The URI of a running Gerrit instance."
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext"
        },
        "gerritProject": {
          "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
          "type": "string"
        }
      }
    },
    "Hash": {
      "type": "object",
      "id": "Hash",
      "properties": {
        "value": {
          "type": "string",
          "description": "The hash value.",
          "format": "byte"
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "SHA256"
          ],
          "description": "The type of hash that was performed.",
          "enumDescriptions": [
            "No hash requested.",
            "A sha256 hash."
          ]
        }
      },
      "description": "Container message for hash values."
    },
    "NonCompliantFile": {
      "id": "NonCompliantFile",
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "description": "Explains why a file is non compliant for a CIS check."
        },
        "path": {
          "description": "display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.",
          "type": "string"
        },
        "displayCommand": {
          "description": "Command to display the non-compliant files.",
          "type": "string"
        }
      },
      "description": "Details about files that caused a compliance check to fail."
    },
    "Location": {
      "properties": {
        "path": {
          "type": "string",
          "description": "The path from which we gathered that this package/version is installed."
        },
        "version": {
          "$ref": "Version",
          "description": "The version installed at this location."
        },
        "cpeUri": {
          "type": "string",
          "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package."
        }
      },
      "description": "An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status",
      "id": "Location",
      "type": "object"
    },
    "Basis": {
      "properties": {
        "fingerprint": {
          "description": "The fingerprint of the base image.",
          "$ref": "Fingerprint"
        },
        "resourceUrl": {
          "type": "string",
          "description": "The resource_url for the resource representing the basis of associated occurrence images."
        }
      },
      "description": "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.",
      "id": "Basis",
      "type": "object"
    },
    "Artifact": {
      "description": "Artifact describes a build product.",
      "id": "Artifact",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto."
        },
        "id": {
          "type": "string",
          "description": "Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456"
        },
        "checksum": {
          "type": "string",
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container."
        },
        "names": {
          "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ComplianceNote": {
      "properties": {
        "cisBenchmark": {
          "description": "Right now we only have one compliance type, but we may add additional types in the future.",
          "$ref": "CisBenchmark"
        },
        "version": {
          "type": "array",
          "items": {
            "$ref": "ComplianceVersion"
          },
          "description": "The OS and config versions the benchmark applies to."
        },
        "title": {
          "description": "The title that identifies this compliance check.",
          "type": "string"
        },
        "rationale": {
          "type": "string",
          "description": "A rationale for the existence of this compliance check."
        },
        "scanInstructions": {
          "description": "Serialized scan instructions with a predefined format.",
          "format": "byte",
          "type": "string"
        },
        "remediation": {
          "description": "A description of remediation steps if the compliance check fails.",
          "type": "string"
        },
        "description": {
          "description": "A description about this compliance check.",
          "type": "string"
        }
      },
      "description": "ComplianceNote encapsulates all information about a specific compliance check.",
      "id": "ComplianceNote",
      "type": "object"
    },
    "StorageSource": {
      "properties": {
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing source."
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "generation": {
          "format": "int64",
          "description": "Google Cloud Storage generation for the object.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "StorageSource describes the location of the source in an archive file in Google Cloud Storage.",
      "id": "StorageSource"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      },
      "id": "Operation"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SourceContext": {
      "properties": {
        "git": {
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub).",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext"
        },
        "cloudRepo": {
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext"
        },
        "gerrit": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext",
          "description": "A SourceContext referring to a Gerrit project."
        },
        "labels": {
          "type": "object",
          "description": "Labels with user defined metadata.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
      "type": "object",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory."
    },
    "VulnerabilityLocation": {
      "properties": {
        "package": {
          "type": "string",
          "description": "The package being described."
        },
        "version": {
          "description": "The version of the package being described. This field can be used as a filter in list requests.",
          "$ref": "Version"
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The location of the vulnerability",
      "id": "VulnerabilityLocation"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext": {
      "type": "object",
      "properties": {
        "repoId": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1RepoId",
          "description": "The ID of the repo."
        },
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext",
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo."
    },
    "PackageIssue": {
      "type": "object",
      "description": "This message wraps a location affected by a vulnerability and its associated fix (if one is available).",
      "id": "PackageIssue",
      "properties": {
        "fixedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The location of the available fix for vulnerability."
        },
        "severityName": {
          "type": "string"
        },
        "affectedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The location of the vulnerability."
        }
      }
    },
    "RelatedUrl": {
      "description": "Metadata for any related URL information",
      "properties": {
        "url": {
          "type": "string",
          "description": "Specific URL to associate with the note"
        },
        "label": {
          "description": "Label to describe usage of the URL",
          "type": "string"
        }
      },
      "type": "object",
      "id": "RelatedUrl"
    },
    "VulnerabilityDetails": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)"
        },
        "cvssScore": {
          "type": "number",
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
          "format": "float"
        },
        "effectiveSeverity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "description": "The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability."
        },
        "packageIssue": {
          "type": "array",
          "description": "The set of affected locations and their fixes (if available) within the associated resource.",
          "items": {
            "$ref": "PackageIssue"
          }
        },
        "severity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "Output only. The note provider assigned Severity of the vulnerability.",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ]
        }
      },
      "description": "Used by Occurrence to point to where the vulnerability exists and how to fix it.",
      "id": "VulnerabilityDetails",
      "type": "object"
    },
    "BuildType": {
      "description": "Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.",
      "id": "BuildType",
      "type": "object",
      "properties": {
        "signature": {
          "$ref": "BuildSignature",
          "description": "Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`."
        },
        "builderVersion": {
          "type": "string",
          "description": "Version of the builder which produced this Note."
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1AliasContext": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The alias kind.",
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a ref named \"refs/foo/bar\"."
          ]
        },
        "name": {
          "type": "string",
          "description": "The alias name."
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
      "description": "An alias to a repo revision.",
      "type": "object"
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty"
    },
    "VulnerabilityType": {
      "properties": {
        "severity": {
          "type": "string",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "Note provider assigned impact of the vulnerability"
        },
        "cvssScore": {
          "description": "The CVSS score for this Vulnerability.",
          "type": "number",
          "format": "float"
        },
        "details": {
          "items": {
            "$ref": "Detail"
          },
          "type": "array",
          "description": "All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in."
        }
      },
      "type": "object",
      "description": "VulnerabilityType provides metadata about a security vulnerability.",
      "id": "VulnerabilityType"
    },
    "UpgradeNote": {
      "description": "An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.",
      "properties": {
        "version": {
          "description": "Required - The version of the package in machine + human readable form.",
          "$ref": "Version"
        },
        "package": {
          "description": "Required - The package this Upgrade is for.",
          "type": "string"
        },
        "distributions": {
          "items": {
            "$ref": "UpgradeDistribution"
          },
          "type": "array",
          "description": "Metadata about the upgrade for each specific operating system."
        }
      },
      "id": "UpgradeNote",
      "type": "object"
    },
    "SeverityCount": {
      "id": "SeverityCount",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The number of occurrences with the severity."
        },
        "severity": {
          "type": "string",
          "description": "The severity of the occurrences.",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        }
      },
      "description": "The number of occurrences created for a specific severity.",
      "type": "object"
    },
    "ScanConfig": {
      "description": "Indicates various scans and whether they are turned on or off.",
      "id": "ScanConfig",
      "type": "object",
      "properties": {
        "updateTime": {
          "type": "string",
          "description": "Output only. The time this scan config was last updated.",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this scan config was created."
        },
        "description": {
          "description": "Output only. A human-readable description of what the `ScanConfig` does.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}\"."
        },
        "enabled": {
          "description": "Indicates whether the Scan is enabled.",
          "type": "boolean"
        }
      }
    },
    "CreateOperationRequest": {
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "The operation to create."
        },
        "operationId": {
          "description": "The ID to use for this operation.",
          "type": "string"
        }
      },
      "description": "Request for creating an operation",
      "type": "object",
      "id": "CreateOperationRequest"
    },
    "GetPolicyOptions": {
      "type": "object",
      "properties": {
        "requestedPolicyVersion": {
          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "GetPolicyOptions",
      "description": "Encapsulates settings provided to GetIamPolicy."
    },
    "Version": {
      "description": "Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
      "id": "Version",
      "type": "object",
      "properties": {
        "inclusive": {
          "description": "Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
          "enum": [
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ],
          "enumDescriptions": [
            "A standard package version, defined by the other fields.",
            "A special version representing negative infinity, other fields are ignored.",
            "A special version representing positive infinity, other fields are ignored."
          ]
        },
        "revision": {
          "description": "The iteration of the package build from the above version.",
          "type": "string"
        },
        "name": {
          "description": "The main part of the version name.",
          "type": "string"
        },
        "epoch": {
          "format": "int32",
          "type": "integer",
          "description": "Used to correct mistakes in the version numbering scheme."
        }
      }
    },
    "Attestation": {
      "properties": {
        "pgpSignedAttestation": {
          "$ref": "PgpSignedAttestation"
        }
      },
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
      "type": "object",
      "id": "Attestation"
    },
    "Binding": {
      "id": "Binding",
      "type": "object",
      "description": "Associates `members` with a `role`.",
      "properties": {
        "members": {
          "type": "array",
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        },
        "role": {
          "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        }
      }
    },
    "UpgradeDistribution": {
      "properties": {
        "classification": {
          "type": "string",
          "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed."
        },
        "cve": {
          "description": "The cve that would be resolved by this upgrade.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "severity": {
          "description": "The severity as specified by the upstream operating system.",
          "type": "string"
        },
        "cpeUri": {
          "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
      "id": "UpgradeDistribution"
    },
    "ListNoteOccurrencesResponse": {
      "description": "Response including listed occurrences for a note.",
      "id": "ListNoteOccurrencesResponse",
      "properties": {
        "occurrences": {
          "description": "The occurrences attached to the specified note.",
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          }
        },
        "nextPageToken": {
          "description": "Token to receive the next page of notes.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoSource": {
      "description": "RepoSource describes the location of the source in a Google Cloud Source Repository.",
      "id": "RepoSource",
      "properties": {
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "branchName": {
          "description": "Name of the branch to build.",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "Name of the repo."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the repo."
        },
        "tagName": {
          "type": "string",
          "description": "Name of the tag to build."
        }
      },
      "type": "object"
    },
    "Status": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "Discovered": {
      "id": "Discovered",
      "type": "object",
      "description": "Provides information about the scan status of a discovered resource.",
      "properties": {
        "operation": {
          "description": "Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.",
          "$ref": "Operation"
        },
        "cpe": {
          "description": "The CPE of the resource being scanned.",
          "type": "string"
        },
        "analysisStatusError": {
          "$ref": "Status",
          "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API."
        },
        "continuousAnalysis": {
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "description": "Whether the resource is continuously analyzed.",
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ]
        },
        "analysisStatus": {
          "description": "The status of discovery for the resource.",
          "enumDescriptions": [
            "Unknown",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has finished successfully.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad state.",
            "The resource is known not to be supported."
          ],
          "type": "string",
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "FINISHED_SUCCESS",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ]
        }
      }
    },
    "AttestationAuthorityHint": {
      "properties": {
        "humanReadableName": {
          "description": "The human readable name of this Attestation Authority, for example \"qa\".",
          "type": "string"
        }
      },
      "id": "AttestationAuthorityHint",
      "type": "object",
      "description": "This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify."
    },
    "ComplianceOccurrence": {
      "type": "object",
      "properties": {
        "nonCompliantFiles": {
          "items": {
            "$ref": "NonCompliantFile"
          },
          "type": "array",
          "description": "A list of files which are violating compliance checks."
        },
        "nonComplianceReason": {
          "description": "The reason for non compliance of these files.",
          "type": "string"
        }
      },
      "id": "ComplianceOccurrence",
      "description": "An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason."
    },
    "Derived": {
      "description": "Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
      "id": "Derived",
      "properties": {
        "layerInfo": {
          "items": {
            "$ref": "Layer"
          },
          "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.",
          "type": "array"
        },
        "fingerprint": {
          "description": "The fingerprint of the derived image.",
          "$ref": "Fingerprint"
        },
        "distance": {
          "format": "uint32",
          "type": "integer",
          "description": "Output only. The number of layers by which this image differs from the associated image basis."
        },
        "baseResourceUrl": {
          "type": "string",
          "description": "Output only. This contains the base image URL for the derived image occurrence."
        }
      },
      "type": "object"
    },
    "Layer": {
      "id": "Layer",
      "description": "Layer holds metadata specific to a layer of a Docker image.",
      "type": "object",
      "properties": {
        "directive": {
          "type": "string",
          "enum": [
            "DIRECTIVE_UNSPECIFIED",
            "MAINTAINER",
            "RUN",
            "CMD",
            "LABEL",
            "EXPOSE",
            "ENV",
            "ADD",
            "COPY",
            "ENTRYPOINT",
            "VOLUME",
            "USER",
            "WORKDIR",
            "ARG",
            "ONBUILD",
            "STOPSIGNAL",
            "HEALTHCHECK",
            "SHELL"
          ],
          "description": "The recovered Dockerfile directive used to construct this layer.",
          "enumDescriptions": [
            "Default value for unsupported/missing directive",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/reference/builder/#copy",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/"
          ]
        },
        "arguments": {
          "type": "string",
          "description": "The recovered arguments to the Dockerfile directive."
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1RepoId": {
      "description": "A unique identifier for a Cloud Repo.",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1RepoId",
      "properties": {
        "projectRepoId": {
          "description": "A combination of a project ID and a repo name.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId"
        },
        "uid": {
          "type": "string",
          "description": "A server-assigned, globally unique identifier."
        }
      },
      "type": "object"
    },
    "TestIamPermissionsResponse": {
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method."
    }
  },
  "version": "v1alpha1",
  "batchPath": "batch",
  "ownerName": "Google",
  "version_module": true,
  "ownerDomain": "google.com",
  "id": "containeranalysis:v1alpha1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        }
      }
    }
  },
  "name": "containeranalysis",
  "mtlsRootUrl": "https://containeranalysis.mtls.googleapis.com/",
  "title": "Container Analysis API",
  "parameters": {
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    }
  },
  "rootUrl": "https://containeranalysis.googleapis.com/",
  "kind": "discovery#restDescription",
  "basePath": "",
  "discoveryVersion": "v1",
  "revision": "20210604",
  "baseUrl": "https://containeranalysis.googleapis.com/",
  "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.",
  "protocol": "rest",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "canonicalName": "Container Analysis",
  "documentationLink": "https://cloud.google.com/container-analysis/api/reference/rest/",
  "fullyEncodeReservedExpansion": true,
  "resources": {
    "projects": {
      "resources": {
        "operations": {
          "methods": {
            "create": {
              "response": {
                "$ref": "Operation"
              },
              "description": "Creates a new `Operation`.",
              "flatPath": "v1alpha1/projects/{projectsId}/operations",
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "description": "The project Id that this operation should be created under.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "containeranalysis.projects.operations.create",
              "request": {
                "$ref": "CreateOperationRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "path": "v1alpha1/{+parent}/operations",
              "parameterOrder": [
                "parent"
              ]
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "id": "containeranalysis.projects.operations.patch",
              "flatPath": "v1alpha1/projects/{projectsId}/operations/{operationsId}",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The name of the Operation. Should be of the form \"projects/{provider_id}/operations/{operation_id}\".",
                  "pattern": "^projects/[^/]+/operations/[^/]+$"
                }
              },
              "request": {
                "$ref": "UpdateOperationRequest"
              },
              "httpMethod": "PATCH",
              "path": "v1alpha1/{+name}",
              "description": "Updates an existing operation returns an error if operation does not exist. The only valid operations are to update mark the done bit change the result."
            }
          }
        },
        "notes": {
          "methods": {
            "delete": {
              "response": {
                "$ref": "Empty"
              },
              "id": "containeranalysis.projects.notes.delete",
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "description": "Deletes the given `Note` from the system."
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListNotesResponse"
              },
              "path": "v1alpha1/{+parent}/notes",
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/notes",
              "description": "Lists all `Notes` for a given project.",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated",
                  "location": "query"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list."
                },
                "parent": {
                  "required": true,
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\".",
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Number of notes to return in the list.",
                  "format": "int32",
                  "location": "query"
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                }
              },
              "id": "containeranalysis.projects.notes.list"
            },
            "testIamPermissions": {
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:testIamPermissions",
              "parameterOrder": [
                "resource"
              ],
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.notes.testIamPermissions",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "parameters": {
                "resource": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "required": true
                }
              }
            },
            "patch": {
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "updateMask": {
                  "type": "string",
                  "format": "google-fieldmask",
                  "location": "query",
                  "description": "The fields to update."
                }
              },
              "response": {
                "$ref": "Note"
              },
              "id": "containeranalysis.projects.notes.patch",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}",
              "request": {
                "$ref": "Note"
              },
              "description": "Updates an existing `Note`."
            },
            "create": {
              "path": "v1alpha1/{+parent}/notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Note"
              },
              "id": "containeranalysis.projects.notes.create",
              "parameters": {
                "parent": {
                  "description": "This field contains the project Id for example: \"projects/{project_id}",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+$"
                },
                "name": {
                  "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated",
                  "location": "query",
                  "type": "string"
                },
                "noteId": {
                  "description": "The ID to use for this note.",
                  "location": "query",
                  "type": "string"
                }
              },
              "httpMethod": "POST",
              "description": "Creates a new `Note`.",
              "flatPath": "v1alpha1/projects/{projectsId}/notes"
            },
            "setIamPolicy": {
              "id": "containeranalysis.projects.notes.setIamPolicy",
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:setIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "path": "v1alpha1/{+resource}:setIamPolicy"
            },
            "get": {
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "description": "Returns the requested `Note`.",
              "id": "containeranalysis.projects.notes.get",
              "path": "v1alpha1/{+name}"
            },
            "getIamPolicy": {
              "parameters": {
                "resource": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string"
                }
              },
              "id": "containeranalysis.projects.notes.getIamPolicy",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Policy"
              },
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "parameterOrder": [
                "resource"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:getIamPolicy",
              "httpMethod": "POST",
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes"
            }
          },
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
                  "path": "v1alpha1/{+name}/occurrences",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences",
                  "id": "containeranalysis.projects.notes.occurrences.list",
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/notes/[^/]+$",
                      "description": "The name field will contain the note name for example: \"provider/{provider_id}/notes/{note_id}\"",
                      "type": "string",
                      "location": "path"
                    },
                    "pageSize": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Number of notes to return in the list.",
                      "location": "query"
                    },
                    "filter": {
                      "location": "query",
                      "description": "The filter expression.",
                      "type": "string"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "Token to provide to skip to a particular spot in the list."
                    }
                  }
                }
              }
            }
          }
        },
        "scanConfigs": {
          "methods": {
            "get": {
              "description": "Gets a specific scan configuration for a project.",
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "description": "The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id}",
                  "type": "string",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ScanConfig"
              },
              "id": "containeranalysis.projects.scanConfigs.get",
              "path": "v1alpha1/{+name}",
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "parameterOrder": [
                "name"
              ]
            },
            "patch": {
              "description": "Updates the scan configuration to a new value.",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PATCH",
              "response": {
                "$ref": "ScanConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "ScanConfig"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "id": "containeranalysis.projects.scanConfigs.patch",
              "path": "v1alpha1/{+name}",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "location": "query",
                  "description": "The fields to update.",
                  "type": "string"
                },
                "name": {
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}.",
                  "location": "path"
                }
              }
            },
            "list": {
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/scanConfigs",
              "id": "containeranalysis.projects.scanConfigs.list",
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "description": "The number of items to return.",
                  "location": "query",
                  "type": "integer"
                },
                "parent": {
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "This containers the project Id i.e.: projects/{project_id}"
                },
                "filter": {
                  "type": "string",
                  "description": "The filter expression.",
                  "location": "query"
                },
                "pageToken": {
                  "description": "The page token to use for the next request.",
                  "location": "query",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs",
              "description": "Lists scan configurations for a project.",
              "response": {
                "$ref": "ListScanConfigsResponse"
              }
            }
          }
        },
        "occurrences": {
          "methods": {
            "getNotes": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}/notes",
              "description": "Gets the `Note` attached to the given `Occurrence`.",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "id": "containeranalysis.projects.occurrences.getNotes",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "The name of the occurrence in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\""
                }
              },
              "httpMethod": "GET"
            },
            "delete": {
              "response": {
                "$ref": "Empty"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "id": "containeranalysis.projects.occurrences.delete",
              "path": "v1alpha1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The name of the occurrence in the form of \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "description": "Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource."
            },
            "getIamPolicy": {
              "id": "containeranalysis.projects.occurrences.getIamPolicy",
              "httpMethod": "POST",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy",
              "parameters": {
                "resource": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "location": "path"
                }
              },
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "parameterOrder": [
                "resource"
              ]
            },
            "setIamPolicy": {
              "id": "containeranalysis.projects.occurrences.setIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes"
            },
            "getVulnerabilitySummary": {
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences:vulnerabilitySummary",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets a summary of the number and severity of occurrences.",
              "id": "containeranalysis.projects.occurrences.getVulnerabilitySummary",
              "response": {
                "$ref": "GetVulnzOccurrencesSummaryResponse"
              },
              "parameters": {
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "The filter expression."
                },
                "parent": {
                  "description": "This contains the project Id for example: projects/{project_id}",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                }
              },
              "path": "v1alpha1/{+parent}/occurrences:vulnerabilitySummary",
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ]
            },
            "get": {
              "path": "v1alpha1/{+name}",
              "httpMethod": "GET",
              "id": "containeranalysis.projects.occurrences.get",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the requested `Occurrence`.",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "description": "The name of the occurrence of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "required": true,
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Occurrence"
              }
            },
            "testIamPermissions": {
              "id": "containeranalysis.projects.occurrences.testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameters": {
                "resource": {
                  "required": true,
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "TestIamPermissionsRequest"
              }
            },
            "list": {
              "path": "v1alpha1/{+parent}/occurrences",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "This contains the project Id for example: projects/{project_id}.",
                  "required": true,
                  "location": "path"
                },
                "pageSize": {
                  "location": "query",
                  "description": "Number of occurrences to return in the list.",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "The name field contains the project Id. For example: \"projects/{project_id} @Deprecated",
                  "location": "query",
                  "type": "string"
                },
                "kind": {
                  "description": "The kind of occurrences to filter on.",
                  "enumDescriptions": [
                    "Unknown",
                    "The note and occurrence represent a package vulnerability.",
                    "The note and occurrence assert build provenance.",
                    "This represents an image basis relationship.",
                    "This represents a package installed via a package manager.",
                    "The note and occurrence track deployment events.",
                    "The note and occurrence track the initial discovery status of a resource.",
                    "This represents a logical \"role\" that can attest to artifacts.",
                    "This represents an available software upgrade.",
                    "This represents a compliance check that can be applied to a resource."
                  ],
                  "type": "string",
                  "enum": [
                    "KIND_UNSPECIFIED",
                    "PACKAGE_VULNERABILITY",
                    "BUILD_DETAILS",
                    "IMAGE_BASIS",
                    "PACKAGE_MANAGER",
                    "DEPLOYABLE",
                    "DISCOVERY",
                    "ATTESTATION_AUTHORITY",
                    "UPGRADE",
                    "COMPLIANCE"
                  ],
                  "location": "query"
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListOccurrencesResponse"
              },
              "description": "Lists active `Occurrences` for a given project matching the filters.",
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "id": "containeranalysis.projects.occurrences.list"
            },
            "create": {
              "response": {
                "$ref": "Occurrence"
              },
              "request": {
                "$ref": "Occurrence"
              },
              "description": "Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.",
              "parameters": {
                "name": {
                  "location": "query",
                  "type": "string",
                  "description": "The name of the project. Should be of the form \"projects/{project_id}\". @Deprecated"
                },
                "parent": {
                  "location": "path",
                  "required": true,
                  "description": "This field contains the project Id for example: \"projects/{project_id}\"",
                  "type": "string",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "httpMethod": "POST",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.create",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/occurrences"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PATCH",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query",
                  "description": "The fields to update."
                },
                "name": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The name of the occurrence. Should be of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\".",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "path": "v1alpha1/{+name}",
              "response": {
                "$ref": "Occurrence"
              },
              "request": {
                "$ref": "Occurrence"
              },
              "description": "Updates an existing occurrence.",
              "id": "containeranalysis.projects.occurrences.patch"
            }
          }
        }
      }
    },
    "providers": {
      "resources": {
        "notes": {
          "methods": {
            "setIamPolicy": {
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "id": "containeranalysis.providers.notes.setIamPolicy",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "parameters": {
                "resource": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^providers/[^/]+/notes/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy"
            },
            "delete": {
              "path": "v1alpha1/{+name}",
              "httpMethod": "DELETE",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "description": "Deletes the given `Note` from the system.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.providers.notes.delete",
              "parameters": {
                "name": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "required": true
                }
              },
              "response": {
                "$ref": "Empty"
              }
            },
            "patch": {
              "httpMethod": "PATCH",
              "description": "Updates an existing `Note`.",
              "path": "v1alpha1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "Note"
              },
              "id": "containeranalysis.providers.notes.patch",
              "parameters": {
                "name": {
                  "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "type": "string",
                  "required": true,
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "location": "path"
                },
                "updateMask": {
                  "type": "string",
                  "format": "google-fieldmask",
                  "location": "query",
                  "description": "The fields to update."
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "response": {
                "$ref": "Note"
              }
            },
            "get": {
              "httpMethod": "GET",
              "description": "Returns the requested `Note`.",
              "id": "containeranalysis.providers.notes.get",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "pattern": "^providers/[^/]+/notes/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}"
            },
            "testIamPermissions": {
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "id": "containeranalysis.providers.notes.testIamPermissions",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameters": {
                "resource": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "httpMethod": "POST",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^providers/[^/]+$",
                  "location": "path",
                  "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "Number of notes to return in the list.",
                  "format": "int32"
                },
                "parent": {
                  "location": "query",
                  "type": "string",
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\"."
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to provide to skip to a particular spot in the list."
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListNotesResponse"
              },
              "path": "v1alpha1/{+name}/notes",
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.providers.notes.list",
              "description": "Lists all `Notes` for a given project."
            },
            "getIamPolicy": {
              "response": {
                "$ref": "Policy"
              },
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy",
              "parameters": {
                "resource": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "id": "containeranalysis.providers.notes.getIamPolicy",
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST"
            },
            "create": {
              "parameters": {
                "parent": {
                  "description": "This field contains the project Id for example: \"projects/{project_id}",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "required": true,
                  "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated",
                  "type": "string",
                  "pattern": "^providers/[^/]+$",
                  "location": "path"
                },
                "noteId": {
                  "location": "query",
                  "description": "The ID to use for this note.",
                  "type": "string"
                }
              },
              "httpMethod": "POST",
              "path": "v1alpha1/{+name}/notes",
              "request": {
                "$ref": "Note"
              },
              "response": {
                "$ref": "Note"
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "parameterOrder": [
                "name"
              ],
              "description": "Creates a new `Note`.",
              "id": "containeranalysis.providers.notes.create",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          },
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of notes to return in the list."
                    },
                    "filter": {
                      "description": "The filter expression.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "Token to provide to skip to a particular spot in the list."
                    },
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^providers/[^/]+/notes/[^/]+$",
                      "description": "The name field will contain the note name for example: \"provider/{provider_id}/notes/{note_id}\"",
                      "required": true
                    }
                  },
                  "path": "v1alpha1/{+name}/occurrences",
                  "httpMethod": "GET",
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "containeranalysis.providers.notes.occurrences.list",
                  "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}/occurrences"
                }
              }
            }
          }
        }
      }
    }
  },
  "servicePath": ""
}

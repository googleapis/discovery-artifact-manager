{
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "ownerName": "Google",
  "kind": "discovery#restDescription",
  "resources": {
    "projects": {
      "resources": {
        "scanConfigs": {
          "methods": {
            "patch": {
              "description": "Updates the scan configuration to a new value.",
              "id": "containeranalysis.projects.scanConfigs.patch",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "ScanConfig"
              },
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}.",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$"
                },
                "updateMask": {
                  "type": "string",
                  "description": "The fields to update.",
                  "location": "query",
                  "format": "google-fieldmask"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}",
              "response": {
                "$ref": "ScanConfig"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "id": "containeranalysis.projects.scanConfigs.list",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/scanConfigs",
              "description": "Lists scan configurations for a project.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "The page token to use for the next request.",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "description": "The number of items to return.",
                  "format": "int32"
                },
                "filter": {
                  "type": "string",
                  "description": "The filter expression.",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "description": "This containers the project Id i.e.: projects/{project_id}",
                  "location": "path",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "response": {
                "$ref": "ListScanConfigsResponse"
              },
              "httpMethod": "GET"
            },
            "get": {
              "description": "Gets a specific scan configuration for a project.",
              "response": {
                "$ref": "ScanConfig"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "description": "The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id}",
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$"
                }
              },
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.scanConfigs.get"
            }
          }
        },
        "operations": {
          "methods": {
            "patch": {
              "path": "v1alpha1/{+name}",
              "request": {
                "$ref": "UpdateOperationRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The name of the Operation. Should be of the form \"projects/{provider_id}/operations/{operation_id}\".",
                  "pattern": "^projects/[^/]+/operations/[^/]+$"
                }
              },
              "id": "containeranalysis.projects.operations.patch",
              "response": {
                "$ref": "Operation"
              },
              "httpMethod": "PATCH",
              "description": "Updates an existing operation returns an error if operation does not exist. The only valid operations are to update mark the done bit change the result.",
              "flatPath": "v1alpha1/projects/{projectsId}/operations/{operationsId}",
              "parameterOrder": [
                "name"
              ]
            },
            "create": {
              "id": "containeranalysis.projects.operations.create",
              "description": "Creates a new `Operation`.",
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "CreateOperationRequest"
              },
              "path": "v1alpha1/{+parent}/operations",
              "flatPath": "v1alpha1/projects/{projectsId}/operations",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "description": "The project Id that this operation should be created under.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Operation"
              }
            }
          }
        },
        "occurrences": {
          "methods": {
            "getVulnerabilitySummary": {
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/occurrences:vulnerabilitySummary",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences:vulnerabilitySummary",
              "response": {
                "$ref": "GetVulnzOccurrencesSummaryResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets a summary of the number and severity of occurrences.",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "This contains the project Id for example: projects/{project_id}",
                  "type": "string",
                  "location": "path"
                },
                "filter": {
                  "description": "The filter expression.",
                  "location": "query",
                  "type": "string"
                }
              },
              "id": "containeranalysis.projects.occurrences.getVulnerabilitySummary"
            },
            "patch": {
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "parameters": {
                "updateMask": {
                  "type": "string",
                  "format": "google-fieldmask",
                  "description": "The fields to update.",
                  "location": "query"
                },
                "name": {
                  "description": "The name of the occurrence. Should be of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\".",
                  "required": true,
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "containeranalysis.projects.occurrences.patch",
              "path": "v1alpha1/{+name}",
              "response": {
                "$ref": "Occurrence"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "Occurrence"
              },
              "description": "Updates an existing occurrence."
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "path": "v1alpha1/{+parent}/occurrences",
              "id": "containeranalysis.projects.occurrences.list",
              "parameters": {
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string",
                  "location": "query"
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "description": "The name field contains the project Id. For example: \"projects/{project_id} @Deprecated",
                  "location": "query"
                },
                "parent": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "This contains the project Id for example: projects/{project_id}.",
                  "pattern": "^projects/[^/]+$"
                },
                "kind": {
                  "type": "string",
                  "description": "The kind of occurrences to filter on.",
                  "location": "query",
                  "enumDescriptions": [
                    "Unknown",
                    "The note and occurrence represent a package vulnerability.",
                    "The note and occurrence assert build provenance.",
                    "This represents an image basis relationship.",
                    "This represents a package installed via a package manager.",
                    "The note and occurrence track deployment events.",
                    "The note and occurrence track the initial discovery status of a resource.",
                    "This represents a logical \"role\" that can attest to artifacts.",
                    "This represents an available software upgrade.",
                    "This represents a compliance check that can be applied to a resource.",
                    "This represents a software bill of materials.",
                    "This represents an SPDX Package.",
                    "This represents an SPDX File.",
                    "This represents an SPDX Relationship.",
                    "This represents a DSSE attestation Note"
                  ],
                  "enum": [
                    "KIND_UNSPECIFIED",
                    "PACKAGE_VULNERABILITY",
                    "BUILD_DETAILS",
                    "IMAGE_BASIS",
                    "PACKAGE_MANAGER",
                    "DEPLOYABLE",
                    "DISCOVERY",
                    "ATTESTATION_AUTHORITY",
                    "UPGRADE",
                    "COMPLIANCE",
                    "SBOM",
                    "SPDX_PACKAGE",
                    "SPDX_FILE",
                    "SPDX_RELATIONSHIP",
                    "DSSE_ATTESTATION"
                  ]
                },
                "pageSize": {
                  "description": "Number of occurrences to return in the list.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListOccurrencesResponse"
              },
              "description": "Lists active `Occurrences` for a given project matching the filters.",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences"
            },
            "delete": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "description": "Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource.",
              "httpMethod": "DELETE",
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.occurrences.delete",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "The name of the occurrence in the form of \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "location": "path",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "getNotes": {
              "path": "v1alpha1/{+name}/notes",
              "id": "containeranalysis.projects.occurrences.getNotes",
              "description": "Gets the `Note` attached to the given `Occurrence`.",
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "The name of the occurrence in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "location": "path"
                }
              }
            },
            "setIamPolicy": {
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "id": "containeranalysis.projects.occurrences.setIamPolicy",
              "parameters": {
                "resource": {
                  "location": "path",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "type": "string"
                }
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Policy"
              }
            },
            "get": {
              "id": "containeranalysis.projects.occurrences.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Occurrence"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "path": "v1alpha1/{+name}",
              "description": "Returns the requested `Occurrence`.",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "description": "The name of the occurrence of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "type": "string"
                }
              }
            },
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The name of the project. Should be of the form \"projects/{project_id}\". @Deprecated",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "location": "path",
                  "description": "This field contains the project Id for example: \"projects/{project_id}\"",
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                }
              },
              "id": "containeranalysis.projects.occurrences.create",
              "response": {
                "$ref": "Occurrence"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Occurrence"
              },
              "description": "Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.",
              "path": "v1alpha1/{+parent}/occurrences"
            },
            "testIamPermissions": {
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "parameterOrder": [
                "resource"
              ],
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "id": "containeranalysis.projects.occurrences.testIamPermissions",
              "httpMethod": "POST",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              }
            },
            "getIamPolicy": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "id": "containeranalysis.projects.occurrences.getIamPolicy",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "location": "path",
                  "type": "string",
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "GetIamPolicyRequest"
              }
            }
          }
        },
        "notes": {
          "methods": {
            "testIamPermissions": {
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "required": true
                }
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameterOrder": [
                "resource"
              ],
              "id": "containeranalysis.projects.notes.testIamPermissions",
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:testIamPermissions",
              "httpMethod": "POST",
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "response": {
                "$ref": "ListNotesResponse"
              },
              "id": "containeranalysis.projects.notes.list",
              "parameterOrder": [
                "parent"
              ],
              "description": "Lists all `Notes` for a given project.",
              "httpMethod": "GET",
              "path": "v1alpha1/{+parent}/notes",
              "parameters": {
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "description": "Number of notes to return in the list.",
                  "format": "int32"
                },
                "name": {
                  "type": "string",
                  "location": "query",
                  "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\"."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes"
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "response": {
                "$ref": "Note"
              },
              "path": "v1alpha1/{+name}",
              "description": "Returns the requested `Note`.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.notes.get",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "required": true
                }
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "required": true
                }
              },
              "path": "v1alpha1/{+name}",
              "response": {
                "$ref": "Empty"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "description": "Deletes the given `Note` from the system.",
              "id": "containeranalysis.projects.notes.delete",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE"
            },
            "create": {
              "request": {
                "$ref": "Note"
              },
              "httpMethod": "POST",
              "flatPath": "v1alpha1/projects/{projectsId}/notes",
              "description": "Creates a new `Note`.",
              "response": {
                "$ref": "Note"
              },
              "id": "containeranalysis.projects.notes.create",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+parent}/notes",
              "parameters": {
                "name": {
                  "location": "query",
                  "type": "string",
                  "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated"
                },
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "This field contains the project Id for example: \"projects/{project_id}"
                },
                "noteId": {
                  "description": "The ID to use for this note.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ]
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Note"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "httpMethod": "PATCH",
              "description": "Updates an existing `Note`.",
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.notes.patch",
              "request": {
                "$ref": "Note"
              },
              "parameters": {
                "updateMask": {
                  "description": "The fields to update.",
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string"
                },
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "type": "string",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "name"
              ]
            },
            "getIamPolicy": {
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Policy"
              },
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:getIamPolicy",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "id": "containeranalysis.projects.notes.getIamPolicy",
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ]
            },
            "setIamPolicy": {
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "parameters": {
                "resource": {
                  "type": "string",
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$"
                }
              },
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "id": "containeranalysis.projects.notes.setIamPolicy",
              "httpMethod": "POST"
            }
          },
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "location": "query"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The filter expression."
                    },
                    "pageSize": {
                      "description": "Number of notes to return in the list.",
                      "location": "query",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/notes/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "The name field will contain the note name for example: \"provider/{provider_id}/notes/{note_id}\""
                    }
                  },
                  "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences",
                  "httpMethod": "GET",
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
                  "path": "v1alpha1/{+name}/occurrences",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "containeranalysis.projects.notes.occurrences.list"
                }
              }
            }
          }
        }
      }
    },
    "providers": {
      "resources": {
        "notes": {
          "methods": {
            "patch": {
              "request": {
                "$ref": "Note"
              },
              "id": "containeranalysis.providers.notes.patch",
              "path": "v1alpha1/{+name}",
              "description": "Updates an existing `Note`.",
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "parameters": {
                "name": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "updateMask": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query",
                  "description": "The fields to update."
                }
              },
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "Note"
              },
              "response": {
                "$ref": "Note"
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "description": "Creates a new `Note`.",
              "path": "v1alpha1/{+name}/notes",
              "parameters": {
                "noteId": {
                  "type": "string",
                  "description": "The ID to use for this note.",
                  "location": "query"
                },
                "name": {
                  "pattern": "^providers/[^/]+$",
                  "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "parent": {
                  "description": "This field contains the project Id for example: \"projects/{project_id}",
                  "type": "string",
                  "location": "query"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.providers.notes.create"
            },
            "get": {
              "id": "containeranalysis.providers.notes.get",
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "pattern": "^providers/[^/]+/notes/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Returns the requested `Note`.",
              "httpMethod": "GET",
              "response": {
                "$ref": "Note"
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to provide to skip to a particular spot in the list."
                },
                "pageSize": {
                  "format": "int32",
                  "description": "Number of notes to return in the list.",
                  "location": "query",
                  "type": "integer"
                },
                "name": {
                  "location": "path",
                  "pattern": "^providers/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated"
                },
                "parent": {
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\".",
                  "location": "query",
                  "type": "string"
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "The filter expression."
                }
              },
              "path": "v1alpha1/{+name}/notes",
              "response": {
                "$ref": "ListNotesResponse"
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Lists all `Notes` for a given project.",
              "httpMethod": "GET",
              "id": "containeranalysis.providers.notes.list"
            },
            "delete": {
              "httpMethod": "DELETE",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "parameters": {
                "name": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\""
                }
              },
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes the given `Note` from the system.",
              "path": "v1alpha1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.providers.notes.delete"
            },
            "getIamPolicy": {
              "id": "containeranalysis.providers.notes.getIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy",
              "parameters": {
                "resource": {
                  "location": "path",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "type": "string"
                }
              },
              "httpMethod": "POST",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "testIamPermissions": {
              "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "id": "containeranalysis.providers.notes.testIamPermissions",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field."
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              }
            },
            "setIamPolicy": {
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "parameterOrder": [
                "resource"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "httpMethod": "POST",
              "id": "containeranalysis.providers.notes.setIamPolicy",
              "parameters": {
                "resource": {
                  "location": "path",
                  "type": "string",
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "required": true
                }
              },
              "response": {
                "$ref": "Policy"
              }
            }
          },
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "path": "v1alpha1/{+name}/occurrences",
                  "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}/occurrences",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "The name field will contain the note name for example: \"provider/{provider_id}/notes/{note_id}\"",
                      "location": "path",
                      "type": "string",
                      "pattern": "^providers/[^/]+/notes/[^/]+$"
                    },
                    "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "Number of notes to return in the list."
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "location": "query"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The filter expression."
                    }
                  },
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "containeranalysis.providers.notes.occurrences.list"
                }
              }
            }
          }
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "protocol": "rest",
  "batchPath": "batch",
  "mtlsRootUrl": "https://containeranalysis.mtls.googleapis.com/",
  "schemas": {
    "InTotoStatement": {
      "properties": {
        "subject": {
          "items": {
            "$ref": "Subject"
          },
          "type": "array"
        },
        "type": {
          "description": "Always \"https://in-toto.io/Statement/v0.1\".",
          "type": "string"
        },
        "predicateType": {
          "type": "string",
          "description": "\"https://in-toto.io/Provenance/v0.1\" for InTotoProvenance."
        },
        "provenance": {
          "$ref": "InTotoProvenance"
        }
      },
      "id": "InTotoStatement",
      "description": "Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".",
      "type": "object"
    },
    "ListNoteOccurrencesResponse": {
      "type": "object",
      "id": "ListNoteOccurrencesResponse",
      "description": "Response including listed occurrences for a note.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to receive the next page of notes."
        },
        "occurrences": {
          "description": "The occurrences attached to the specified note.",
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          }
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata",
      "description": "Metadata for all operations used and required for all operations that created by Container Analysis Providers",
      "properties": {
        "endTime": {
          "description": "Output only. The time that this operation was marked completed or failed.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time this operation was created.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "type": "object"
    },
    "Completeness": {
      "properties": {
        "arguments": {
          "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
          "type": "boolean"
        },
        "materials": {
          "type": "boolean",
          "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
        },
        "environment": {
          "description": "If true, the builder claims that recipe.environment is claimed to be complete.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "Completeness",
      "description": "Indicates that the builder claims certain fields in this message to be complete."
    },
    "Subject": {
      "type": "object",
      "id": "Subject",
      "properties": {
        "name": {
          "type": "string"
        },
        "digest": {
          "description": "\"\": \"\"",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Metadata": {
      "description": "Other properties of the build.",
      "properties": {
        "buildStartedOn": {
          "description": "The timestamp of when the build started.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeness": {
          "$ref": "Completeness",
          "description": "Indicates that the builder claims certain fields in this message to be complete."
        },
        "buildFinishedOn": {
          "description": "The timestamp of when the build completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "buildInvocationId": {
          "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
          "type": "string"
        },
        "reproducible": {
          "type": "boolean",
          "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
        }
      },
      "id": "Metadata",
      "type": "object"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext": {
      "type": "object",
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
      "properties": {
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        },
        "repoId": {
          "description": "The ID of the repo.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1RepoId"
        },
        "aliasContext": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
          "description": "An alias, which may be a branch or tag."
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext"
    },
    "FileHashes": {
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "items": {
            "$ref": "Hash"
          },
          "type": "array"
        }
      },
      "description": "Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.",
      "id": "FileHashes"
    },
    "EnvelopeSignature": {
      "description": "A DSSE signature",
      "id": "EnvelopeSignature",
      "type": "object",
      "properties": {
        "sig": {
          "description": "The signature itself",
          "format": "byte",
          "type": "string"
        },
        "keyid": {
          "description": "A reference id to the key being used for signing",
          "type": "string"
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DocumentOccurrence": {
      "properties": {
        "namespace": {
          "description": "Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter",
          "type": "string"
        },
        "documentComment": {
          "type": "string",
          "description": "A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document"
        },
        "id": {
          "description": "Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally",
          "type": "string"
        },
        "createTime": {
          "description": "Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard",
          "format": "google-datetime",
          "type": "string"
        },
        "creators": {
          "description": "Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "type": "string",
          "description": "Identify name of this document as designated by creator"
        },
        "licenseListVersion": {
          "description": "A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created",
          "type": "string"
        },
        "externalDocumentRefs": {
          "description": "Identify any external SPDX documents referenced within this SPDX document",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creatorComment": {
          "type": "string",
          "description": "A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields"
        }
      },
      "description": "DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
      "type": "object",
      "id": "DocumentOccurrence"
    },
    "BuildSignature": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "description": "Signature of the related `BuildProvenance`, encoded in a base64 string."
        },
        "publicKey": {
          "description": "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`",
          "type": "string"
        },
        "keyType": {
          "type": "string",
          "enumDescriptions": [
            "`KeyType` is not set.",
            "`PGP ASCII Armored` public key.",
            "`PKIX PEM` public key."
          ],
          "description": "The type of the key, either stored in `public_key` or referenced in `key_id`",
          "enum": [
            "KEY_TYPE_UNSPECIFIED",
            "PGP_ASCII_ARMORED",
            "PKIX_PEM"
          ]
        },
        "keyId": {
          "description": "An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).",
          "type": "string"
        }
      },
      "id": "BuildSignature",
      "description": "Message encapsulating the signature of the verified build."
    },
    "RepoSource": {
      "properties": {
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the repo."
        },
        "tagName": {
          "description": "Name of the tag to build.",
          "type": "string"
        },
        "repoName": {
          "description": "Name of the repo.",
          "type": "string"
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "branchName": {
          "description": "Name of the branch to build.",
          "type": "string"
        }
      },
      "description": "RepoSource describes the location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "id": "RepoSource"
    },
    "Resource": {
      "properties": {
        "uri": {
          "description": "The unique URI of the resource. E.g., \"https://gcr.io/project/image@sha256:foo\" for a Docker image.",
          "type": "string"
        },
        "contentHash": {
          "$ref": "Hash",
          "description": "The hash of the resource content. E.g., the Docker digest."
        },
        "name": {
          "type": "string",
          "description": "The name of the resource. E.g., the name of a Docker image - \"Debian\"."
        }
      },
      "type": "object",
      "description": " Resource is an entity that can have metadata. E.g., a Docker image.",
      "id": "Resource"
    },
    "Basis": {
      "properties": {
        "resourceUrl": {
          "description": "The resource_url for the resource representing the basis of associated occurrence images.",
          "type": "string"
        },
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "The fingerprint of the base image."
        }
      },
      "id": "Basis",
      "type": "object",
      "description": "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url."
    },
    "SeverityCount": {
      "type": "object",
      "id": "SeverityCount",
      "properties": {
        "severity": {
          "type": "string",
          "description": "The severity of the occurrences.",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "count": {
          "description": "The number of occurrences with the severity.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "The number of occurrences created for a specific severity."
    },
    "Hash": {
      "properties": {
        "value": {
          "type": "string",
          "format": "byte",
          "description": "The hash value."
        },
        "type": {
          "enumDescriptions": [
            "No hash requested.",
            "A sha256 hash."
          ],
          "type": "string",
          "description": "The type of hash that was performed.",
          "enum": [
            "NONE",
            "SHA256"
          ]
        }
      },
      "type": "object",
      "description": "Container message for hash values.",
      "id": "Hash"
    },
    "Derived": {
      "description": "Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
      "type": "object",
      "properties": {
        "fingerprint": {
          "description": "The fingerprint of the derived image.",
          "$ref": "Fingerprint"
        },
        "baseResourceUrl": {
          "type": "string",
          "description": "Output only. This contains the base image URL for the derived image occurrence."
        },
        "layerInfo": {
          "items": {
            "$ref": "Layer"
          },
          "type": "array",
          "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer."
        },
        "distance": {
          "format": "uint32",
          "description": "Output only. The number of layers by which this image differs from the associated image basis.",
          "type": "integer"
        }
      },
      "id": "Derived"
    },
    "Deployment": {
      "properties": {
        "config": {
          "type": "string",
          "description": "Configuration used to create this deployment."
        },
        "undeployTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "End of the lifetime of this deployment."
        },
        "address": {
          "description": "Address of the runtime element hosting this deployment.",
          "type": "string"
        },
        "deployTime": {
          "description": "Beginning of the lifetime of this deployment.",
          "format": "google-datetime",
          "type": "string"
        },
        "userEmail": {
          "type": "string",
          "description": "Identity of the user that triggered this deployment."
        },
        "platform": {
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "Google Container Engine",
            "Google App Engine: Flexible Environment",
            "Custom user-defined platform"
          ],
          "description": "Platform hosting this deployment.",
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ]
        },
        "resourceUri": {
          "type": "array",
          "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Deployment",
      "description": "The period during which some deployable was active in a runtime.",
      "type": "object"
    },
    "RelationshipNote": {
      "id": "RelationshipNote",
      "properties": {},
      "type": "object",
      "description": "RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/"
    },
    "Version": {
      "type": "object",
      "description": "Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
      "properties": {
        "epoch": {
          "format": "int32",
          "description": "Used to correct mistakes in the version numbering scheme.",
          "type": "integer"
        },
        "inclusive": {
          "type": "boolean",
          "description": "Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not"
        },
        "kind": {
          "enumDescriptions": [
            "A standard package version, defined by the other fields.",
            "A special version representing negative infinity, other fields are ignored.",
            "A special version representing positive infinity, other fields are ignored."
          ],
          "type": "string",
          "description": "Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
          "enum": [
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ]
        },
        "name": {
          "type": "string",
          "description": "The main part of the version name."
        },
        "revision": {
          "type": "string",
          "description": "The iteration of the package build from the above version."
        }
      },
      "id": "Version"
    },
    "GetVulnzOccurrencesSummaryResponse": {
      "type": "object",
      "description": "A summary of how many vulnz occurrences there are per severity type. counts by groups, or if we should have different summary messages like this.",
      "properties": {
        "counts": {
          "type": "array",
          "description": "A map of how many occurrences were found for each severity.",
          "items": {
            "$ref": "SeverityCount"
          }
        }
      },
      "id": "GetVulnzOccurrencesSummaryResponse"
    },
    "Note": {
      "type": "object",
      "description": "Provides a detailed description of a `Note`.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\""
        },
        "compliance": {
          "$ref": "ComplianceNote",
          "description": "A note describing a compliance check."
        },
        "shortDescription": {
          "description": "A one sentence description of this `Note`.",
          "type": "string"
        },
        "dsseAttestation": {
          "description": "A note describing a dsse attestation note.",
          "$ref": "DSSEAttestationNote"
        },
        "attestationAuthority": {
          "description": "A note describing an attestation role.",
          "$ref": "AttestationAuthority"
        },
        "discovery": {
          "description": "A note describing a provider/analysis type.",
          "$ref": "Discovery"
        },
        "spdxFile": {
          "description": "A note describing an SPDX File.",
          "$ref": "FileNote"
        },
        "longDescription": {
          "type": "string",
          "description": "A detailed description of this `Note`."
        },
        "sbom": {
          "$ref": "DocumentNote",
          "description": "A note describing a software bill of materials."
        },
        "deployable": {
          "$ref": "Deployable",
          "description": "A note describing something that can be deployed."
        },
        "spdxPackage": {
          "description": "A note describing an SPDX Package.",
          "$ref": "PackageNote"
        },
        "vulnerabilityType": {
          "$ref": "VulnerabilityType",
          "description": "A package vulnerability type of note."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this note was created. This field can be used as a filter in list requests."
        },
        "expirationTime": {
          "type": "string",
          "description": "Time of expiration for this note, null if note does not expire.",
          "format": "google-datetime"
        },
        "spdxRelationship": {
          "description": "A note describing a relationship between SPDX elements.",
          "$ref": "RelationshipNote"
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time this note was last updated. This field can be used as a filter in list requests."
        },
        "kind": {
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE",
            "SBOM",
            "SPDX_PACKAGE",
            "SPDX_FILE",
            "SPDX_RELATIONSHIP",
            "DSSE_ATTESTATION"
          ],
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource.",
            "This represents a software bill of materials.",
            "This represents an SPDX Package.",
            "This represents an SPDX File.",
            "This represents an SPDX Relationship.",
            "This represents a DSSE attestation Note"
          ],
          "type": "string",
          "description": "Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests."
        },
        "package": {
          "$ref": "Package",
          "description": "A note describing a package hosted by various package managers."
        },
        "buildType": {
          "description": "Build provenance type for a verifiable build.",
          "$ref": "BuildType"
        },
        "baseImage": {
          "$ref": "Basis",
          "description": "A note describing a base image."
        },
        "upgrade": {
          "$ref": "UpgradeNote",
          "description": "A note describing an upgrade."
        },
        "relatedUrl": {
          "type": "array",
          "description": "URLs associated with this note",
          "items": {
            "$ref": "RelatedUrl"
          }
        }
      },
      "id": "Note"
    },
    "VulnerabilityLocation": {
      "description": "The location of the vulnerability",
      "id": "VulnerabilityLocation",
      "type": "object",
      "properties": {
        "package": {
          "description": "The package being described.",
          "type": "string"
        },
        "version": {
          "$ref": "Version",
          "description": "The version of the package being described. This field can be used as a filter in list requests."
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
          "type": "string"
        }
      }
    },
    "UpgradeNote": {
      "description": "An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.",
      "id": "UpgradeNote",
      "properties": {
        "package": {
          "type": "string",
          "description": "Required - The package this Upgrade is for."
        },
        "version": {
          "$ref": "Version",
          "description": "Required - The version of the package in machine + human readable form."
        },
        "distributions": {
          "description": "Metadata about the upgrade for each specific operating system.",
          "items": {
            "$ref": "UpgradeDistribution"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpgradeOccurrence": {
      "id": "UpgradeOccurrence",
      "type": "object",
      "properties": {
        "distribution": {
          "description": "Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.",
          "$ref": "UpgradeDistribution"
        },
        "package": {
          "type": "string",
          "description": "Required - The package this Upgrade is for."
        },
        "parsedVersion": {
          "$ref": "Version",
          "description": "Required - The version of the package in a machine + human readable form."
        }
      },
      "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability)."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext",
      "properties": {
        "url": {
          "type": "string",
          "description": "Git repository URL."
        },
        "revisionId": {
          "description": "Required. Git commit hash.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub)."
    },
    "ComplianceOccurrence": {
      "id": "ComplianceOccurrence",
      "properties": {
        "nonCompliantFiles": {
          "type": "array",
          "items": {
            "$ref": "NonCompliantFile"
          },
          "description": "A list of files which are violating compliance checks."
        },
        "nonComplianceReason": {
          "type": "string",
          "description": "The reason for non compliance of these files."
        }
      },
      "description": "An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.",
      "type": "object"
    },
    "ExternalRef": {
      "properties": {
        "locator": {
          "description": "The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location",
          "type": "string"
        },
        "category": {
          "enumDescriptions": [
            "Unspecified",
            "Security (e.g. cpe22Type, cpe23Type)",
            "Package Manager (e.g. maven-central, npm, nuget, bower, purl)",
            "Persistent-Id (e.g. swh)",
            "Other"
          ],
          "enum": [
            "CATEGORY_UNSPECIFIED",
            "SECURITY",
            "PACKAGE_MANAGER",
            "PERSISTENT_ID",
            "OTHER"
          ],
          "type": "string",
          "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package"
        },
        "type": {
          "type": "string",
          "description": "Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)"
        },
        "comment": {
          "description": "Human-readable information about the purpose and target of the reference",
          "type": "string"
        }
      },
      "id": "ExternalRef",
      "type": "object",
      "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package"
    },
    "GetIamPolicyRequest": {
      "properties": {
        "options": {
          "$ref": "GetPolicyOptions",
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
        }
      },
      "id": "GetIamPolicyRequest",
      "type": "object",
      "description": "Request message for `GetIamPolicy` method."
    },
    "PackageOccurrence": {
      "id": "PackageOccurrence",
      "properties": {
        "licenseComments": {
          "type": "string",
          "description": "This field provides a place for the SPDX file creator to record any relevant background information or analysis that went in to arriving at the Concluded License for a package"
        },
        "id": {
          "type": "string",
          "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements"
        },
        "comment": {
          "type": "string",
          "description": "A place for the SPDX file creator to record any general comments about the package being described"
        },
        "filename": {
          "type": "string",
          "description": "Provide the actual file name of the package, or path of the directory being treated as a package"
        },
        "licenseConcluded": {
          "description": "package or alternative values, if the governing license cannot be determined",
          "type": "string"
        },
        "sourceInfo": {
          "description": "Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package",
          "type": "string"
        }
      },
      "description": "PackageOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
      "type": "object"
    },
    "Distribution": {
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
          "type": "string"
        },
        "architecture": {
          "type": "string",
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ],
          "enumDescriptions": [
            "Unknown architecture",
            "X86 architecture",
            "X64 architecture"
          ],
          "description": "The CPU architecture for which packages in this distribution channel were built"
        },
        "url": {
          "description": "The distribution channel-specific homepage for this package.",
          "type": "string"
        },
        "maintainer": {
          "type": "string",
          "description": "A freeform string denoting the maintainer of this package."
        },
        "latestVersion": {
          "description": "The latest available version of this package in this distribution channel.",
          "$ref": "Version"
        },
        "description": {
          "description": "The distribution channel-specific description of this package.",
          "type": "string"
        }
      },
      "id": "Distribution",
      "description": "This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror"
    },
    "DSSEHint": {
      "id": "DSSEHint",
      "description": "This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
      "type": "object",
      "properties": {
        "humanReadableName": {
          "type": "string",
          "description": "Required. The human readable name of this attestation authority, for example \"cloudbuild-prod\"."
        }
      }
    },
    "NonCompliantFile": {
      "properties": {
        "reason": {
          "type": "string",
          "description": "Explains why a file is non compliant for a CIS check."
        },
        "displayCommand": {
          "description": "Command to display the non-compliant files.",
          "type": "string"
        },
        "path": {
          "description": "display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.",
          "type": "string"
        }
      },
      "description": "Details about files that caused a compliance check to fail.",
      "type": "object",
      "id": "NonCompliantFile"
    },
    "Attestation": {
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
      "id": "Attestation",
      "properties": {
        "pgpSignedAttestation": {
          "$ref": "PgpSignedAttestation"
        }
      },
      "type": "object"
    },
    "Deployable": {
      "description": "An artifact that can be deployed in some runtime.",
      "properties": {
        "resourceUri": {
          "description": "Resource URI for the artifact being deployed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Deployable",
      "type": "object"
    },
    "FileOccurrence": {
      "type": "object",
      "properties": {
        "attributions": {
          "description": "This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "comment": {
          "type": "string",
          "description": "This field provides a place for the SPDX file creator to record any general comments about the file"
        },
        "filesLicenseInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "This field contains the license information actually found in the file, if any"
        },
        "licenseComments": {
          "description": "This field provides a place for the SPDX file creator to record any relevant background references or analysis that went in to arriving at the Concluded License for a file",
          "type": "string"
        },
        "licenseConcluded": {
          "type": "string",
          "description": "This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined"
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This field provides a place for the SPDX file creator to record file contributors"
        },
        "id": {
          "type": "string",
          "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements"
        },
        "copyright": {
          "description": "Identify the copyright holder of the file, as well as any dates present",
          "type": "string"
        },
        "notice": {
          "description": "This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file",
          "type": "string"
        }
      },
      "id": "FileOccurrence",
      "description": "FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/"
    },
    "Detail": {
      "id": "Detail",
      "properties": {
        "vendor": {
          "description": "The vendor of the product. e.g. \"google\"",
          "type": "string"
        },
        "description": {
          "description": "A vendor-specific description of this note.",
          "type": "string"
        },
        "isObsolete": {
          "type": "boolean",
          "description": "Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details."
        },
        "package": {
          "description": "The name of the package where the vulnerability was found. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "source": {
          "type": "string",
          "description": "The source from which the information in this Detail was obtained."
        },
        "severityName": {
          "description": "The severity (eg: distro assigned severity) for this vulnerability.",
          "type": "string"
        },
        "minAffectedVersion": {
          "description": "The min version of the package in which the vulnerability exists.",
          "$ref": "Version"
        },
        "cpeUri": {
          "type": "string",
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests."
        },
        "fixedLocation": {
          "description": "The fix for this specific package version.",
          "$ref": "VulnerabilityLocation"
        },
        "packageType": {
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)",
          "type": "string"
        },
        "maxAffectedVersion": {
          "description": "The max version of the package in which the vulnerability exists.",
          "$ref": "Version"
        }
      },
      "description": "Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2",
      "type": "object"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId": {
      "type": "object",
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId",
      "properties": {
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        },
        "repoName": {
          "description": "The name of the repo. Leave empty for the default repo.",
          "type": "string"
        }
      }
    },
    "Artifact": {
      "id": "Artifact",
      "type": "object",
      "properties": {
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image."
        },
        "name": {
          "description": "Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456"
        },
        "checksum": {
          "type": "string",
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container."
        }
      },
      "description": "Artifact describes a build product."
    },
    "Policy": {
      "id": "Policy",
      "type": "object",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "properties": {
        "bindings": {
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32",
          "type": "integer"
        },
        "etag": {
          "type": "string",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte"
        }
      }
    },
    "AttestationAuthorityHint": {
      "properties": {
        "humanReadableName": {
          "description": "The human readable name of this Attestation Authority, for example \"qa\".",
          "type": "string"
        }
      },
      "type": "object",
      "description": "This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.",
      "id": "AttestationAuthorityHint"
    },
    "SetIamPolicyRequest": {
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      },
      "description": "Request message for `SetIamPolicy` method.",
      "id": "SetIamPolicyRequest",
      "type": "object"
    },
    "Expr": {
      "id": "Expr",
      "properties": {
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."
    },
    "Recipe": {
      "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
      "type": "object",
      "properties": {
        "environment": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy."
        },
        "entryPoint": {
          "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
        },
        "arguments": {
          "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "definedInMaterial": {
          "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "Recipe"
    },
    "UpdateOperationRequest": {
      "properties": {
        "operation": {
          "description": "The operation to create.",
          "$ref": "Operation"
        },
        "updateMask": {
          "format": "google-fieldmask",
          "type": "string",
          "description": "The fields to update."
        }
      },
      "id": "UpdateOperationRequest",
      "type": "object",
      "description": "Request for updating an existing operation"
    },
    "Layer": {
      "description": "Layer holds metadata specific to a layer of a Docker image.",
      "properties": {
        "directive": {
          "type": "string",
          "enumDescriptions": [
            "Default value for unsupported/missing directive",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/reference/builder/#copy",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/"
          ],
          "enum": [
            "DIRECTIVE_UNSPECIFIED",
            "MAINTAINER",
            "RUN",
            "CMD",
            "LABEL",
            "EXPOSE",
            "ENV",
            "ADD",
            "COPY",
            "ENTRYPOINT",
            "VOLUME",
            "USER",
            "WORKDIR",
            "ARG",
            "ONBUILD",
            "STOPSIGNAL",
            "HEALTHCHECK",
            "SHELL"
          ],
          "description": "The recovered Dockerfile directive used to construct this layer."
        },
        "arguments": {
          "description": "The recovered arguments to the Dockerfile directive.",
          "type": "string"
        }
      },
      "id": "Layer",
      "type": "object"
    },
    "TestIamPermissionsResponse": {
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
        }
      },
      "id": "TestIamPermissionsResponse",
      "type": "object",
      "description": "Response message for `TestIamPermissions` method."
    },
    "Discovered": {
      "id": "Discovered",
      "description": "Provides information about the scan status of a discovered resource.",
      "type": "object",
      "properties": {
        "continuousAnalysis": {
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "enumDescriptions": [
            "Unknown",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ],
          "description": "Whether the resource is continuously analyzed.",
          "type": "string"
        },
        "cpe": {
          "type": "string",
          "description": "The CPE of the resource being scanned."
        },
        "analysisStatus": {
          "enumDescriptions": [
            "Unknown",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has finished successfully.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad state.",
            "The resource is known not to be supported."
          ],
          "type": "string",
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "FINISHED_SUCCESS",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ],
          "description": "The status of discovery for the resource."
        },
        "operation": {
          "description": "Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.",
          "$ref": "Operation"
        },
        "analysisStatusError": {
          "$ref": "Status",
          "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API."
        }
      }
    },
    "ComplianceVersion": {
      "properties": {
        "version": {
          "description": "The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.",
          "type": "string"
        },
        "cpeUri": {
          "description": "The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.",
          "type": "string"
        }
      },
      "id": "ComplianceVersion",
      "type": "object",
      "description": "Describes the CIS benchmark version that is applicable to a given OS and os version."
    },
    "DSSEAttestationOccurrence": {
      "type": "object",
      "properties": {
        "envelope": {
          "$ref": "Envelope",
          "description": "If doing something security critical, make sure to verify the signatures in this metadata."
        },
        "statement": {
          "$ref": "InTotoStatement"
        }
      },
      "description": "An occurrence describing an attestation on a resource",
      "id": "DSSEAttestationOccurrence"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty",
      "type": "object",
      "properties": {}
    },
    "FileNote": {
      "properties": {
        "checksum": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Provide a unique identifier to match analysis information on each specific file in a package"
        },
        "fileType": {
          "enum": [
            "FILE_TYPE_UNSPECIFIED",
            "SOURCE",
            "BINARY",
            "ARCHIVE",
            "APPLICATION",
            "AUDIO",
            "IMAGE",
            "TEXT",
            "VIDEO",
            "DOCUMENTATION",
            "SPDX",
            "OTHER"
          ],
          "type": "string",
          "description": "This field provides information about the type of file identified",
          "enumDescriptions": [
            "Unspecified",
            "The file is human readable source code (.c, .html, etc.)",
            "The file is a compiled object, target image or binary executable (.o, .a, etc.)",
            "The file represents an archive (.tar, .jar, etc.)",
            "The file is associated with a specific application type (MIME type of application/*)",
            "The file is associated with an audio file (MIME type of audio/* , e.g. .mp3)",
            "The file is associated with an picture image file (MIME type of image/*, e.g., .jpg, .gif)",
            "The file is human readable text file (MIME type of text/*)",
            "The file is associated with a video file type (MIME type of video/*)",
            "The file serves as documentation",
            "The file is an SPDX document",
            "The file doesn't fit into the above categories (generated artifacts, data files, etc.)"
          ]
        },
        "title": {
          "description": "Identify the full path and filename that corresponds to the file information in this section",
          "type": "string"
        }
      },
      "description": "FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
      "id": "FileNote",
      "type": "object"
    },
    "CreateOperationRequest": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "description": "The ID to use for this operation."
        },
        "operation": {
          "description": "The operation to create.",
          "$ref": "Operation"
        }
      },
      "description": "Request for creating an operation",
      "id": "CreateOperationRequest"
    },
    "Fingerprint": {
      "description": "A set of properties that uniquely identify a given Docker image.",
      "type": "object",
      "id": "Fingerprint",
      "properties": {
        "v2Name": {
          "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "v1Name": {
          "type": "string",
          "description": "The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests."
        },
        "v2Blob": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ordered list of v2 blobs that represent a given image."
        }
      }
    },
    "Occurrence": {
      "description": "`Occurrence` includes information about analysis occurrences for an image.",
      "id": "Occurrence",
      "properties": {
        "noteName": {
          "type": "string",
          "description": "An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests."
        },
        "remediation": {
          "type": "string",
          "description": "A description of actions that can be taken to remedy the `Note`"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time this `Occurrence` was created."
        },
        "resourceUrl": {
          "description": "The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.",
          "type": "string"
        },
        "spdxRelationship": {
          "$ref": "RelationshipOccurrence",
          "description": "Describes a specific relationship between SPDX elements."
        },
        "kind": {
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource.",
            "This represents a software bill of materials.",
            "This represents an SPDX Package.",
            "This represents an SPDX File.",
            "This represents an SPDX Relationship.",
            "This represents a DSSE attestation Note"
          ],
          "type": "string",
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE",
            "SBOM",
            "SPDX_PACKAGE",
            "SPDX_FILE",
            "SPDX_RELATIONSHIP",
            "DSSE_ATTESTATION"
          ],
          "description": "Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests."
        },
        "derivedImage": {
          "$ref": "Derived",
          "description": "Describes how this resource derives from the basis in the associated note."
        },
        "sbom": {
          "$ref": "DocumentOccurrence",
          "description": "Describes a specific software bill of materials document."
        },
        "buildDetails": {
          "description": "Build details for a verifiable build.",
          "$ref": "BuildDetails"
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\""
        },
        "resource": {
          "$ref": "Resource",
          "description": " The resource for which the `Occurrence` applies."
        },
        "dsseAttestation": {
          "$ref": "DSSEAttestationOccurrence",
          "description": "This represents a DSSE attestation occurrence"
        },
        "spdxFile": {
          "description": "Describes a specific SPDX File.",
          "$ref": "FileOccurrence"
        },
        "envelope": {
          "$ref": "Envelope",
          "description": "https://github.com/secure-systems-lab/dsse"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time this `Occurrence` was last updated."
        },
        "discovered": {
          "description": "Describes the initial scan status for this resource.",
          "$ref": "Discovered"
        },
        "upgrade": {
          "$ref": "UpgradeOccurrence",
          "description": "Describes an upgrade."
        },
        "spdxPackage": {
          "$ref": "PackageOccurrence",
          "description": "Describes a specific SPDX Package."
        },
        "deployment": {
          "description": "Describes the deployment of an artifact on a runtime.",
          "$ref": "Deployment"
        },
        "compliance": {
          "description": "Describes whether or not a resource passes compliance checks.",
          "$ref": "ComplianceOccurrence"
        },
        "attestation": {
          "description": "Describes an attestation of an artifact.",
          "$ref": "Attestation"
        },
        "vulnerabilityDetails": {
          "description": "Details of a security vulnerability note.",
          "$ref": "VulnerabilityDetails"
        },
        "installation": {
          "description": "Describes the installation of a package on the linked resource.",
          "$ref": "Installation"
        }
      },
      "type": "object"
    },
    "ListScanConfigsResponse": {
      "properties": {
        "scanConfigs": {
          "description": "The set of scan configs.",
          "type": "array",
          "items": {
            "$ref": "ScanConfig"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A page token to pass in order to get more scan configs."
        }
      },
      "description": "A list of scan configs for the project.",
      "id": "ListScanConfigsResponse",
      "type": "object"
    },
    "DSSEAttestationNote": {
      "id": "DSSEAttestationNote",
      "type": "object",
      "properties": {
        "hint": {
          "description": "DSSEHint hints at the purpose of the attestation authority.",
          "$ref": "DSSEHint"
        }
      },
      "description": "A note describing an attestation"
    },
    "RelatedUrl": {
      "id": "RelatedUrl",
      "description": "Metadata for any related URL information",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Specific URL to associate with the note"
        },
        "label": {
          "type": "string",
          "description": "Label to describe usage of the URL"
        }
      }
    },
    "RelationshipOccurrence": {
      "type": "object",
      "id": "RelationshipOccurrence",
      "description": "RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "DESCRIBES",
            "DESCRIBED_BY",
            "CONTAINS",
            "CONTAINED_BY",
            "DEPENDS_ON",
            "DEPENDENCY_OF",
            "DEPENDENCY_MANIFEST_OF",
            "BUILD_DEPENDENCY_OF",
            "DEV_DEPENDENCY_OF",
            "OPTIONAL_DEPENDENCY_OF",
            "PROVIDED_DEPENDENCY_OF",
            "TEST_DEPENDENCY_OF",
            "RUNTIME_DEPENDENCY_OF",
            "EXAMPLE_OF",
            "GENERATES",
            "GENERATED_FROM",
            "ANCESTOR_OF",
            "DESCENDANT_OF",
            "VARIANT_OF",
            "DISTRIBUTION_ARTIFACT",
            "PATCH_FOR",
            "PATCH_APPLIED",
            "COPY_OF",
            "FILE_ADDED",
            "FILE_DELETED",
            "FILE_MODIFIED",
            "EXPANDED_FROM_ARCHIVE",
            "DYNAMIC_LINK",
            "STATIC_LINK",
            "DATA_FILE_OF",
            "TEST_CASE_OF",
            "BUILD_TOOL_OF",
            "DEV_TOOL_OF",
            "TEST_OF",
            "TEST_TOOL_OF",
            "DOCUMENTATION_OF",
            "OPTIONAL_COMPONENT_OF",
            "METAFILE_OF",
            "PACKAGE_OF",
            "AMENDS",
            "PREREQUISITE_FOR",
            "HAS_PREREQUISITE",
            "OTHER"
          ],
          "description": "The type of relationship between the source and target SPDX elements",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A",
            "Is to be used when SPDXRef-A is described by SPDXREF-Document",
            "Is to be used when SPDXRef-A contains SPDXRef-B",
            "Is to be used when SPDXRef-A is contained by SPDXRef-B",
            "Is to be used when SPDXRef-A depends on SPDXRef-B",
            "Is to be used when SPDXRef-A is dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a manifest file that lists a set of dependencies for SPDXRef-B",
            "Is to be used when SPDXRef-A is a build dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a development dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is an optional dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a to be provided dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a test dependency of SPDXRef-B",
            "Is to be used when SPDXRef-A is a dependency required for the execution of SPDXRef-B",
            "Is to be used when SPDXRef-A is an example of SPDXRef-B",
            "Is to be used when SPDXRef-A generates SPDXRef-B",
            "Is to be used when SPDXRef-A was generated from SPDXRef-B",
            "Is to be used when SPDXRef-A is an ancestor (same lineage but pre-dates) SPDXRef-B",
            "Is to be used when SPDXRef-A is a descendant of (same lineage but postdates) SPDXRef-B",
            "Is to be used when SPDXRef-A is a variant of (same lineage but not clear which came first) SPDXRef-B",
            "Is to be used when distributing SPDXRef-A requires that SPDXRef-B also be distributed",
            "Is to be used when SPDXRef-A is a patch file for (to be applied to) SPDXRef-B",
            "Is to be used when SPDXRef-A is a patch file that has been applied to SPDXRef-B",
            "Is to be used when SPDXRef-A is an exact copy of SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was added to SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was deleted from SPDXRef-B",
            "Is to be used when SPDXRef-A is a file that was modified from SPDXRef-B",
            "Is to be used when SPDXRef-A is expanded from the archive SPDXRef-B",
            "Is to be used when SPDXRef-A dynamically links to SPDXRef-B",
            "Is to be used when SPDXRef-A statically links to SPDXRef-B",
            "Is to be used when SPDXRef-A is a data file used in SPDXRef-B",
            "Is to be used when SPDXRef-A is a test case used in testing SPDXRef-B",
            "Is to be used when SPDXRef-A is used to build SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a development tool for SPDXRef-B",
            "Is to be used when SPDXRef-A is used for testing SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B",
            "Is to be used when SPDXRef-A provides documentation of SPDXRef-B",
            "Is to be used when SPDXRef-A is an optional component of SPDXRef-B",
            "Is to be used when SPDXRef-A is a metafile of SPDXRef-B",
            "Is to be used when SPDXRef-A is used as a package as part of SPDXRef-B",
            "Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX information in SPDXRef-B",
            "Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B",
            "Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B",
            "Is to be used for a relationship which has not been defined in the formal SPDX specification. A description of the relationship should be included in the Relationship comments field"
          ]
        },
        "source": {
          "type": "string",
          "description": "Also referred to as SPDXRef-A The source SPDX element (file, package, etc)"
        },
        "comment": {
          "type": "string",
          "description": "A place for the SPDX file creator to record any general comments about the relationship"
        },
        "target": {
          "description": "Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it",
          "type": "string"
        }
      }
    },
    "Binding": {
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "role": {
          "type": "string",
          "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "members": {
          "items": {
            "type": "string"
          },
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array"
        }
      },
      "description": "Associates `members` with a `role`.",
      "id": "Binding",
      "type": "object"
    },
    "Discovery": {
      "type": "object",
      "description": "A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.",
      "properties": {
        "analysisKind": {
          "description": "The kind of analysis that is handled by this discovery.",
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY",
            "UPGRADE",
            "COMPLIANCE",
            "SBOM",
            "SPDX_PACKAGE",
            "SPDX_FILE",
            "SPDX_RELATIONSHIP",
            "DSSE_ATTESTATION"
          ],
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available software upgrade.",
            "This represents a compliance check that can be applied to a resource.",
            "This represents a software bill of materials.",
            "This represents an SPDX Package.",
            "This represents an SPDX File.",
            "This represents an SPDX Relationship.",
            "This represents a DSSE attestation Note"
          ],
          "type": "string"
        }
      },
      "id": "Discovery"
    },
    "Command": {
      "id": "Command",
      "description": "Command describes a step performed as part of the build pipeline.",
      "type": "object",
      "properties": {
        "waitFor": {
          "type": "array",
          "description": "The ID(s) of the Command(s) that this Command depends on.",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Command-line arguments used when executing this Command."
        },
        "name": {
          "type": "string",
          "description": "Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`."
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running this Command.",
          "type": "string"
        },
        "env": {
          "description": "Environment variables set before running this Command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "description": "Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency."
        }
      }
    },
    "DocumentNote": {
      "type": "object",
      "id": "DocumentNote",
      "description": "DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
      "properties": {
        "spdxVersion": {
          "type": "string",
          "description": "Provide a reference number that can be used to understand how to parse and interpret the rest of the file"
        },
        "dataLicence": {
          "description": "Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields (\"SPDX-Metadata\")",
          "type": "string"
        }
      }
    },
    "CisBenchmark": {
      "properties": {
        "severity": {
          "description": "The severity level of this CIS benchmark check.",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string"
        },
        "profileLevel": {
          "description": "The profile level of this CIS benchmark check.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "CisBenchmark",
      "description": "A compliance check that is a CIS benchmark.",
      "type": "object"
    },
    "VulnerabilityDetails": {
      "description": "Used by Occurrence to point to where the vulnerability exists and how to fix it.",
      "id": "VulnerabilityDetails",
      "properties": {
        "effectiveSeverity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "type": "string",
          "description": "The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues."
        },
        "severity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "description": "Output only. The note provider assigned Severity of the vulnerability.",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ]
        },
        "packageIssue": {
          "items": {
            "$ref": "PackageIssue"
          },
          "description": "The set of affected locations and their fixes (if available) within the associated resource.",
          "type": "array"
        },
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types."
        },
        "cvssScore": {
          "type": "number",
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
          "format": "float"
        }
      },
      "type": "object"
    },
    "Location": {
      "properties": {
        "version": {
          "$ref": "Version",
          "description": "The version installed at this location."
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "The path from which we gathered that this package/version is installed."
        }
      },
      "id": "Location",
      "type": "object",
      "description": "An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status"
    },
    "Source": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
          "description": "If provided, the source code used for the build came from this location."
        },
        "additionalContexts": {
          "items": {
            "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
          },
          "type": "array",
          "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field."
        },
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get source from this location in a Cloud Repo."
        },
        "artifactStorageSource": {
          "$ref": "StorageSource",
          "description": "If provided, the input binary artifacts for the build came from this location."
        },
        "fileHashes": {
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "type": "object",
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file."
        },
        "storageSource": {
          "$ref": "StorageSource",
          "description": "If provided, get the source from this location in in Google Cloud Storage."
        }
      },
      "description": "Source describes the location of the source used for the build.",
      "id": "Source"
    },
    "Installation": {
      "description": "This represents how a particular software package may be installed on a system.",
      "properties": {
        "location": {
          "items": {
            "$ref": "Location"
          },
          "type": "array",
          "description": "All of the places within the filesystem versions of this package have been found."
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the installed package."
        }
      },
      "id": "Installation",
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        },
        "details": {
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        }
      },
      "type": "object"
    },
    "UpgradeDistribution": {
      "id": "UpgradeDistribution",
      "type": "object",
      "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
      "properties": {
        "cpeUri": {
          "type": "string",
          "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/."
        },
        "classification": {
          "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.",
          "type": "string"
        },
        "cve": {
          "description": "The cve that would be resolved by this upgrade.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "severity": {
          "description": "The severity as specified by the upstream operating system.",
          "type": "string"
        }
      }
    },
    "BuilderConfig": {
      "id": "BuilderConfig",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildType": {
      "id": "BuildType",
      "type": "object",
      "properties": {
        "signature": {
          "$ref": "BuildSignature",
          "description": "Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`."
        },
        "builderVersion": {
          "description": "Version of the builder which produced this Note.",
          "type": "string"
        }
      },
      "description": "Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails."
    },
    "VulnerabilityType": {
      "id": "VulnerabilityType",
      "type": "object",
      "description": "VulnerabilityType provides metadata about a security vulnerability.",
      "properties": {
        "severity": {
          "type": "string",
          "description": "Note provider assigned impact of the vulnerability",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ]
        },
        "cvssScore": {
          "format": "float",
          "description": "The CVSS score for this Vulnerability.",
          "type": "number"
        },
        "details": {
          "type": "array",
          "description": "All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.",
          "items": {
            "$ref": "Detail"
          }
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1RepoId": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1RepoId",
      "properties": {
        "projectRepoId": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId",
          "description": "A combination of a project ID and a repo name."
        },
        "uid": {
          "type": "string",
          "description": "A server-assigned, globally unique identifier."
        }
      },
      "description": "A unique identifier for a Cloud Repo.",
      "type": "object"
    },
    "InTotoProvenance": {
      "properties": {
        "recipe": {
          "$ref": "Recipe",
          "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required"
        },
        "builderConfig": {
          "$ref": "BuilderConfig",
          "description": "required"
        },
        "materials": {
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "Metadata"
        }
      },
      "type": "object",
      "id": "InTotoProvenance"
    },
    "ScanConfig": {
      "description": "Indicates various scans and whether they are turned on or off.",
      "id": "ScanConfig",
      "properties": {
        "enabled": {
          "description": "Indicates whether the Scan is enabled.",
          "type": "boolean"
        },
        "updateTime": {
          "description": "Output only. The time this scan config was last updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "name": {
          "description": "Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}\".",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Output only. A human-readable description of what the `ScanConfig` does."
        },
        "createTime": {
          "description": "Output only. The time this scan config was created.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListNotesResponse": {
      "properties": {
        "notes": {
          "items": {
            "$ref": "Note"
          },
          "description": "The occurrences requested",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as page_token for the following request. An empty value means no more result."
        }
      },
      "id": "ListNotesResponse",
      "type": "object",
      "description": "Response including listed notes."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SourceContext": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
      "properties": {
        "gerrit": {
          "description": "A SourceContext referring to a Gerrit project.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels with user defined metadata."
        },
        "cloudRepo": {
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext"
        },
        "git": {
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub).",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext"
        }
      },
      "type": "object",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory."
    },
    "Operation": {
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object"
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "id": "Operation"
    },
    "StorageSource": {
      "description": "StorageSource describes the location of the source in an archive file in Google Cloud Storage.",
      "type": "object",
      "properties": {
        "generation": {
          "type": "string",
          "description": "Google Cloud Storage generation for the object.",
          "format": "int64"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "description": "Google Cloud Storage object containing source.",
          "type": "string"
        }
      },
      "id": "StorageSource"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1AliasContext": {
      "type": "object",
      "description": "An alias to a repo revision.",
      "id": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
      "properties": {
        "kind": {
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ],
          "description": "The alias kind.",
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a ref named \"refs/foo/bar\"."
          ]
        },
        "name": {
          "type": "string",
          "description": "The alias name."
        }
      }
    },
    "ComplianceNote": {
      "type": "object",
      "description": "ComplianceNote encapsulates all information about a specific compliance check.",
      "properties": {
        "remediation": {
          "description": "A description of remediation steps if the compliance check fails.",
          "type": "string"
        },
        "cisBenchmark": {
          "description": "Right now we only have one compliance type, but we may add additional types in the future.",
          "$ref": "CisBenchmark"
        },
        "version": {
          "type": "array",
          "description": "The OS and config versions the benchmark applies to.",
          "items": {
            "$ref": "ComplianceVersion"
          }
        },
        "description": {
          "description": "A description about this compliance check.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "The title that identifies this compliance check."
        },
        "scanInstructions": {
          "description": "Serialized scan instructions with a predefined format.",
          "type": "string",
          "format": "byte"
        },
        "rationale": {
          "description": "A rationale for the existence of this compliance check.",
          "type": "string"
        }
      },
      "id": "ComplianceNote"
    },
    "BuildProvenance": {
      "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
      "type": "object",
      "id": "BuildProvenance",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the build."
        },
        "sourceProvenance": {
          "$ref": "Source",
          "description": "Details of the Source input to the build."
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs were written."
        },
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
          "type": "string"
        },
        "commands": {
          "items": {
            "$ref": "Command"
          },
          "description": "Commands requested by the build.",
          "type": "array"
        },
        "buildOptions": {
          "type": "object",
          "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "type": "string",
          "description": "Time at which the build was created.",
          "format": "google-datetime"
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project."
        },
        "triggerId": {
          "description": "Trigger identifier if the build was triggered automatically; empty if not.",
          "type": "string"
        },
        "finishTime": {
          "description": "Time at which execution of the build was finished.",
          "type": "string",
          "format": "google-datetime"
        },
        "startTime": {
          "description": "Time at which execution of the build was started.",
          "type": "string",
          "format": "google-datetime"
        },
        "builderVersion": {
          "type": "string",
          "description": "Version string of the builder at the time this build was executed."
        },
        "builtArtifacts": {
          "items": {
            "$ref": "Artifact"
          },
          "type": "array",
          "description": "Output of the build."
        }
      }
    },
    "Package": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the package.",
          "type": "string"
        },
        "distribution": {
          "items": {
            "$ref": "Distribution"
          },
          "description": "The various channels by which a package is distributed.",
          "type": "array"
        }
      },
      "id": "Package",
      "description": "This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions."
    },
    "PgpSignedAttestation": {
      "description": "An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
      "type": "object",
      "properties": {
        "contentType": {
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "SIMPLE_SIGNING_JSON"
          ],
          "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
          "enumDescriptions": [
            "`ContentType` is not set.",
            "Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted from `signature` is a JSON blob conforming to the linked schema."
          ],
          "type": "string"
        },
        "pgpKeyId": {
          "type": "string",
          "description": "The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`."
        },
        "signature": {
          "type": "string",
          "description": "The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload."
        }
      },
      "id": "PgpSignedAttestation"
    },
    "Envelope": {
      "description": "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
      "id": "Envelope",
      "properties": {
        "signatures": {
          "items": {
            "$ref": "EnvelopeSignature"
          },
          "description": "The signatures over the payload",
          "type": "array"
        },
        "payload": {
          "format": "byte",
          "type": "string",
          "description": "The bytes being signed"
        },
        "payloadType": {
          "type": "string",
          "description": "The type of payload being signed"
        }
      },
      "type": "object"
    },
    "AttestationAuthority": {
      "type": "object",
      "description": "Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `AttestationAuthority` for \"QA\" and one for \"build\". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.",
      "id": "AttestationAuthority",
      "properties": {
        "hint": {
          "$ref": "AttestationAuthorityHint"
        }
      }
    },
    "GetPolicyOptions": {
      "properties": {
        "requestedPolicyVersion": {
          "type": "integer",
          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32"
        }
      },
      "id": "GetPolicyOptions",
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "type": "object"
    },
    "PackageIssue": {
      "properties": {
        "effectiveSeverity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "description": "Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.",
          "readOnly": true
        },
        "packageType": {
          "type": "string",
          "description": "The type of package (e.g. OS, MAVEN, GO)."
        },
        "severityName": {
          "type": "string"
        },
        "fixedLocation": {
          "description": "The location of the available fix for vulnerability.",
          "$ref": "VulnerabilityLocation"
        },
        "affectedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The location of the vulnerability."
        }
      },
      "type": "object",
      "id": "PackageIssue",
      "description": "This message wraps a location affected by a vulnerability and its associated fix (if one is available)."
    },
    "BuildDetails": {
      "type": "object",
      "description": "Message encapsulating build provenance details.",
      "properties": {
        "intotoProvenance": {
          "description": "In-toto Provenance representation as defined in spec.",
          "$ref": "InTotoProvenance"
        },
        "provenanceBytes": {
          "description": "Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.",
          "type": "string"
        },
        "provenance": {
          "$ref": "BuildProvenance",
          "description": "The actual provenance"
        }
      },
      "id": "BuildDetails"
    },
    "ListOccurrencesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results."
        },
        "occurrences": {
          "type": "array",
          "description": "The occurrences requested.",
          "items": {
            "$ref": "Occurrence"
          }
        }
      },
      "description": "Response including listed active occurrences.",
      "id": "ListOccurrencesResponse",
      "type": "object"
    },
    "PackageNote": {
      "description": "PackageNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
      "id": "PackageNote",
      "properties": {
        "analyzed": {
          "description": "Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document",
          "type": "boolean"
        },
        "summaryDescription": {
          "description": "A short description of the package",
          "type": "string"
        },
        "filesLicenseInfo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found"
        },
        "verificationCode": {
          "description": "This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file",
          "type": "string"
        },
        "originator": {
          "description": "If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came",
          "type": "string"
        },
        "externalRefs": {
          "items": {
            "$ref": "ExternalRef"
          },
          "description": "ExternalRef",
          "type": "array"
        },
        "supplier": {
          "type": "string",
          "description": "Identify the actual distribution source for the package/directory identified in the SPDX file"
        },
        "homePage": {
          "description": "Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
          "type": "string"
        },
        "detailedDescription": {
          "type": "string",
          "description": "A more detailed description of the package"
        },
        "copyright": {
          "description": "Identify the copyright holders of the package, as well as any dates present",
          "type": "string"
        },
        "checksum": {
          "type": "string",
          "description": "Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file"
        },
        "attribution": {
          "type": "string",
          "description": "A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts"
        },
        "licenseDeclared": {
          "description": "List the licenses that have been declared by the authors of the package",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Identify the full name of the package as given by the Package Originator"
        },
        "version": {
          "description": "Identify the version of the package",
          "type": "string"
        },
        "downloadLocation": {
          "type": "string",
          "description": "This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created"
        }
      },
      "type": "object"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext": {
      "type": "object",
      "description": "A SourceContext referring to a Gerrit project.",
      "properties": {
        "gerritProject": {
          "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
          "type": "string"
        },
        "aliasContext": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "revisionId": {
          "description": "A revision (commit) ID.",
          "type": "string"
        },
        "hostUri": {
          "type": "string",
          "description": "The URI of a running Gerrit instance."
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext"
    }
  },
  "version_module": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "name": "containeranalysis",
  "rootUrl": "https://containeranalysis.googleapis.com/",
  "documentationLink": "https://cloud.google.com/container-analysis/api/reference/rest/",
  "version": "v1alpha1",
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "Container Analysis",
  "title": "Container Analysis API",
  "servicePath": "",
  "discoveryVersion": "v1",
  "basePath": "",
  "parameters": {
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "default": "json",
      "description": "Data format for response."
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format."
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "id": "containeranalysis:v1alpha1",
  "revision": "20210825",
  "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.",
  "baseUrl": "https://containeranalysis.googleapis.com/"
}

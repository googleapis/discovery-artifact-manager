{
  "discoveryVersion": "v1",
  "canonicalName": "Cloud Identity",
  "protocol": "rest",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "mtlsRootUrl": "https://cloudidentity.mtls.googleapis.com/",
  "rootUrl": "https://cloudidentity.googleapis.com/",
  "version_module": true,
  "schemas": {
    "GoogleAppsCloudidentityDevicesV1BlockDeviceUserResponse": {
      "id": "GoogleAppsCloudidentityDevicesV1BlockDeviceUserResponse",
      "type": "object",
      "description": "Response message for blocking the device from accessing user data.",
      "properties": {
        "deviceUser": {
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser",
          "description": "Resultant DeviceUser object for the action."
        }
      }
    },
    "GoogleAppsCloudidentityDevicesV1AndroidAttributes": {
      "id": "GoogleAppsCloudidentityDevicesV1AndroidAttributes",
      "properties": {
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the \"Enforce Work Profile\" policy."
        },
        "ownershipPrivilege": {
          "type": "string",
          "description": "Ownership privileges on device.",
          "enum": [
            "OWNERSHIP_PRIVILEGE_UNSPECIFIED",
            "DEVICE_ADMINISTRATOR",
            "PROFILE_OWNER",
            "DEVICE_OWNER"
          ],
          "enumDescriptions": [
            "Ownership privilege is not set.",
            "Active device administrator privileges on the device.",
            "Profile Owner privileges. The account is in a managed corporate profile.",
            "Device Owner privileges on the device."
          ]
        },
        "ownerProfileAccount": {
          "description": "Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.",
          "type": "boolean"
        },
        "enabledUnknownSources": {
          "description": "Whether applications from unknown sources can be installed on device.",
          "type": "boolean"
        }
      },
      "description": "Resource representing the Android specific attributes of a Device.",
      "type": "object"
    },
    "CancelUserInvitationRequest": {
      "properties": {},
      "id": "CancelUserInvitationRequest",
      "description": "Request to cancel sent invitation for target email in UserInvitation.",
      "type": "object"
    },
    "SearchGroupsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A continuation token to retrieve the next page of results, or empty if there are no more results available."
        },
        "groups": {
          "type": "array",
          "description": "The `Group` resources that match the search query.",
          "items": {
            "$ref": "Group"
          }
        }
      },
      "description": "The response message for GroupsService.SearchGroups.",
      "id": "SearchGroupsResponse"
    },
    "ModifyMembershipRolesResponse": {
      "id": "ModifyMembershipRolesResponse",
      "properties": {
        "membership": {
          "description": "The `Membership` resource after modifying its `MembershipRole`s.",
          "$ref": "Membership"
        }
      },
      "type": "object",
      "description": "The response message for MembershipsService.ModifyMembershipRoles."
    },
    "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserResponse": {
      "description": "Response message for approving the device to access user data.",
      "id": "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserResponse",
      "properties": {
        "deviceUser": {
          "description": "Resultant DeviceUser object for the action.",
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser"
        }
      },
      "type": "object"
    },
    "AddIdpCredentialRequest": {
      "type": "object",
      "description": "The request for creating an IdpCredential with its associated payload. An InboundSamlSsoProfile can own up to 2 credentials.",
      "id": "AddIdpCredentialRequest",
      "properties": {
        "pemData": {
          "description": "PEM encoded x509 certificate containing the public key for verifying IdP signatures.",
          "type": "string"
        }
      }
    },
    "GroupRelation": {
      "properties": {
        "displayName": {
          "description": "Display name for this group.",
          "type": "string"
        },
        "relationType": {
          "enumDescriptions": [
            "The relation type is undefined or undetermined.",
            "The two entities have only a direct membership with each other.",
            "The two entities have only an indirect membership with each other.",
            "The two entities have both a direct and an indirect membership with each other."
          ],
          "description": "The relation between the member and the transitive group.",
          "type": "string",
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "DIRECT",
            "INDIRECT",
            "DIRECT_AND_INDIRECT"
          ]
        },
        "group": {
          "description": "Resource name for this group.",
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels for Group resource."
        },
        "roles": {
          "items": {
            "$ref": "TransitiveMembershipRole"
          },
          "type": "array",
          "description": "Membership roles of the member for the group."
        },
        "groupKey": {
          "$ref": "EntityKey",
          "description": "Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace."
        }
      },
      "id": "GroupRelation",
      "description": "Message representing a transitive group of a user or a group.",
      "type": "object"
    },
    "InboundSamlSsoProfile": {
      "description": "A [SAML 2.0](https://www.oasis-open.org/standards#samlv2.0) federation between a Google enterprise customer and a SAML identity provider.",
      "id": "InboundSamlSsoProfile",
      "type": "object",
      "properties": {
        "idpConfig": {
          "description": "SAML identity provider configuration.",
          "$ref": "SamlIdpConfig"
        },
        "name": {
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the SAML SSO profile.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name of the SAML SSO profile."
        },
        "customer": {
          "description": "Immutable. The customer. For example: `customers/C0123abc`.",
          "type": "string"
        },
        "spConfig": {
          "description": "SAML service provider configuration for this SAML SSO profile. These are the service provider details provided by Google that should be configured on the corresponding identity provider.",
          "$ref": "SamlSpConfig"
        }
      }
    },
    "GoogleAppsCloudidentityDevicesV1UpdateDeviceMetadata": {
      "description": "Metadata for UpdateDevice LRO.",
      "properties": {},
      "id": "GoogleAppsCloudidentityDevicesV1UpdateDeviceMetadata",
      "type": "object"
    },
    "RsaPublicKeyInfo": {
      "properties": {
        "keySize": {
          "format": "int32",
          "type": "integer",
          "description": "Key size in bits (size of the modulus)."
        }
      },
      "type": "object",
      "id": "RsaPublicKeyInfo",
      "description": "Information of a RSA public key."
    },
    "SignInBehavior": {
      "properties": {
        "redirectCondition": {
          "enumDescriptions": [
            "Default and means \"always\"",
            "Sign-in flows where the user is prompted for their identity will not redirect to the IdP (so the user will most likely be prompted by Google for a password), but special flows like IdP-initiated SAML and sign-in following automatic redirection to the IdP by domain-specific service URLs will accept the IdP's assertion of the user's identity."
          ],
          "type": "string",
          "enum": [
            "REDIRECT_CONDITION_UNSPECIFIED",
            "NEVER"
          ],
          "description": "When to redirect sign-ins to the IdP."
        }
      },
      "type": "object",
      "description": "Controls sign-in behavior.",
      "id": "SignInBehavior"
    },
    "CreateMembershipMetadata": {
      "description": "Metadata for CreateMembership LRO.",
      "type": "object",
      "id": "CreateMembershipMetadata",
      "properties": {}
    },
    "IsInvitableUserResponse": {
      "description": "Response for IsInvitableUser RPC.",
      "properties": {
        "isInvitableUser": {
          "type": "boolean",
          "description": "Returns true if the email address is invitable."
        }
      },
      "id": "IsInvitableUserResponse",
      "type": "object"
    },
    "UpdateInboundSsoAssignmentOperationMetadata": {
      "description": "LRO response metadata for InboundSsoAssignmentsService.UpdateInboundSsoAssignment.",
      "properties": {},
      "id": "UpdateInboundSsoAssignmentOperationMetadata",
      "type": "object"
    },
    "SamlIdpConfig": {
      "description": "SAML IDP (identity provider) configuration.",
      "type": "object",
      "properties": {
        "entityId": {
          "description": "Required. The SAML **Entity ID** of the identity provider.",
          "type": "string"
        },
        "singleSignOnServiceUri": {
          "description": "Required. The `SingleSignOnService` endpoint location (sign-in page URL) of the identity provider. This is the URL where the `AuthnRequest` will be sent. Must use `HTTPS`. Assumed to accept the `HTTP-Redirect` binding.",
          "type": "string"
        },
        "changePasswordUri": {
          "type": "string",
          "description": "The **Change Password URL** of the identity provider. Users will be sent to this URL when changing their passwords at `myaccount.google.com`. This takes precedence over the change password URL configured at customer-level. Must use `HTTPS`."
        },
        "logoutRedirectUri": {
          "type": "string",
          "description": "The **Logout Redirect URL** (sign-out page URL) of the identity provider. When a user clicks the sign-out link on a Google page, they will be redirected to this URL. This is a pure redirect with no attached SAML `LogoutRequest` i.e. SAML single logout is not supported. Must use `HTTPS`."
        }
      },
      "id": "SamlIdpConfig"
    },
    "Operation": {
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest": {
      "type": "object",
      "properties": {
        "customer": {
          "type": "string",
          "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest",
      "description": "Request message for cancelling an unfinished user account wipe."
    },
    "MembershipRole": {
      "type": "object",
      "id": "MembershipRole",
      "properties": {
        "restrictionEvaluations": {
          "description": "Evaluations of restrictions applied to parent group on this membership.",
          "$ref": "RestrictionEvaluations"
        },
        "expiryDetail": {
          "description": "The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.",
          "$ref": "ExpiryDetail"
        },
        "name": {
          "type": "string",
          "description": "The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`."
        }
      },
      "description": "A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`."
    },
    "GetMembershipGraphResponse": {
      "id": "GetMembershipGraphResponse",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "The resources representing each group in the adjacency list. Each group in this list can be correlated to a 'group' of the MembershipAdjacencyList using the 'name' of the Group resource."
        },
        "adjacencyList": {
          "type": "array",
          "items": {
            "$ref": "MembershipAdjacencyList"
          },
          "description": "The membership graph's path information represented as an adjacency list."
        }
      },
      "type": "object",
      "description": "The response message for MembershipsService.GetMembershipGraph."
    },
    "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest": {
      "properties": {
        "customer": {
          "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs.",
          "type": "string"
        }
      },
      "description": "Request message for approving the device to access user data.",
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest"
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceUserMetadata": {
      "properties": {},
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceUserMetadata",
      "description": "Metadata for WipeDeviceUser LRO.",
      "type": "object"
    },
    "LookupMembershipNameResponse": {
      "properties": {
        "name": {
          "description": "The [resource name](https://cloud.google.com/apis/design/resource_names) of the looked-up `Membership`. Must be of the form `groups/{group}/memberships/{membership}`.",
          "type": "string"
        }
      },
      "id": "LookupMembershipNameResponse",
      "description": "The response message for MembershipsService.LookupMembershipName.",
      "type": "object"
    },
    "CreateInboundSsoAssignmentOperationMetadata": {
      "id": "CreateInboundSsoAssignmentOperationMetadata",
      "properties": {},
      "type": "object",
      "description": "LRO response metadata for InboundSsoAssignmentsService.CreateInboundSsoAssignment."
    },
    "GoogleAppsCloudidentityDevicesV1CustomAttributeValue": {
      "properties": {
        "boolValue": {
          "type": "boolean",
          "description": "Represents a boolean value."
        },
        "numberValue": {
          "description": "Represents a double value.",
          "type": "number",
          "format": "double"
        },
        "stringValue": {
          "description": "Represents a string value.",
          "type": "string"
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1CustomAttributeValue",
      "type": "object",
      "description": "Additional custom attribute values may be one of these types"
    },
    "GoogleAppsCloudidentityDevicesV1ListClientStatesResponse": {
      "type": "object",
      "properties": {
        "clientStates": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCloudidentityDevicesV1ClientState"
          },
          "description": "Client states meeting the list restrictions."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results. Empty if there are no more results."
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1ListClientStatesResponse",
      "description": "Response message that is returned in ListClientStates."
    },
    "ListIdpCredentialsResponse": {
      "description": "Response of the InboundSamlSsoProfilesService.ListIdpCredentials method.",
      "id": "ListIdpCredentialsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "idpCredentials": {
          "type": "array",
          "items": {
            "$ref": "IdpCredential"
          },
          "description": "The IdpCredentials from the specified InboundSamlSsoProfile."
        }
      }
    },
    "RestrictionEvaluations": {
      "description": "Evaluations of restrictions applied to parent group on this membership.",
      "properties": {
        "memberRestrictionEvaluation": {
          "$ref": "MembershipRoleRestrictionEvaluation",
          "description": "Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation."
        }
      },
      "id": "RestrictionEvaluations",
      "type": "object"
    },
    "EntityKey": {
      "properties": {
        "namespace": {
          "description": "The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`."
        }
      },
      "description": "A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.",
      "type": "object",
      "id": "EntityKey"
    },
    "DsaPublicKeyInfo": {
      "description": "Information of a DSA public key.",
      "id": "DsaPublicKeyInfo",
      "properties": {
        "keySize": {
          "description": "Key size in bits (size of parameter P).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListInboundSsoAssignmentsResponse": {
      "id": "ListInboundSsoAssignmentsResponse",
      "description": "Response of the InboundSsoAssignmentsService.ListInboundSsoAssignments method.",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "inboundSsoAssignments": {
          "type": "array",
          "items": {
            "$ref": "InboundSsoAssignment"
          },
          "description": "The assignments."
        }
      },
      "type": "object"
    },
    "DynamicGroupStatus": {
      "id": "DynamicGroupStatus",
      "properties": {
        "statusTime": {
          "description": "The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "status": {
          "enumDescriptions": [
            "Default.",
            "The dynamic group is up-to-date.",
            "The dynamic group has just been created and memberships are being updated.",
            "Group is in an unrecoverable state and its memberships can't be updated."
          ],
          "enum": [
            "STATUS_UNSPECIFIED",
            "UP_TO_DATE",
            "UPDATING_MEMBERSHIPS",
            "INVALID_QUERY"
          ],
          "description": "Status of the dynamic group.",
          "type": "string"
        }
      },
      "description": "The current status of a dynamic group along with timestamp.",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1SignoutDeviceUserMetadata": {
      "description": "Metadata for SignoutDeviceUser LRO.",
      "id": "GoogleAppsCloudidentityDevicesV1SignoutDeviceUserMetadata",
      "properties": {},
      "type": "object"
    },
    "MemberRestriction": {
      "id": "MemberRestriction",
      "description": "The definition of MemberRestriction",
      "properties": {
        "query": {
          "description": "Member Restriction as defined by CEL expression. Supported restrictions are: `member.customer_id` and `member.type`. Valid values for `member.type` are `1`, `2` and `3`. They correspond to USER, SERVICE_ACCOUNT, and GROUP respectively. The value for `member.customer_id` only supports `groupCustomerId()` currently which means the customer id of the group will be used for restriction. Supported operators are `&&`, `||` and `==`, corresponding to AND, OR, and EQUAL. Examples: Allow only service accounts of given customer to be members. `member.type == 2 && member.customer_id == groupCustomerId()` Allow only users or groups to be members. `member.type == 1 || member.type == 3`",
          "type": "string"
        },
        "evaluation": {
          "description": "The evaluated state of this restriction on a group.",
          "$ref": "RestrictionEvaluation"
        }
      },
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1Device": {
      "properties": {
        "networkOperator": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Mobile or network operator of device, if available."
        },
        "managementState": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Device is approved.",
            "Device is blocked.",
            "Device is pending approval.",
            "The device is not provisioned. Device will start from this state until some action is taken (i.e. a user starts using the device).",
            "Data and settings on the device are being removed.",
            "All data and settings on the device are removed."
          ],
          "readOnly": true,
          "description": "Output only. Management state of the device",
          "type": "string",
          "enum": [
            "MANAGEMENT_STATE_UNSPECIFIED",
            "APPROVED",
            "BLOCKED",
            "PENDING",
            "UNPROVISIONED",
            "WIPING",
            "WIPED"
          ]
        },
        "androidSpecificAttributes": {
          "description": "Output only. Attributes specific to Android devices.",
          "readOnly": true,
          "$ref": "GoogleAppsCloudidentityDevicesV1AndroidAttributes"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.",
          "readOnly": true
        },
        "otherAccounts": {
          "readOnly": true,
          "type": "array",
          "description": "Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: \"com.example\", \"xyz.com\".",
          "items": {
            "type": "string"
          }
        },
        "basebandVersion": {
          "readOnly": true,
          "description": "Output only. Baseband version of the device.",
          "type": "string"
        },
        "wifiMacAddresses": {
          "description": "WiFi MAC addresses of device.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serialNumber": {
          "type": "string",
          "description": "Serial Number of device. Example: HT82V1A01076."
        },
        "buildNumber": {
          "description": "Output only. Build number of the device.",
          "readOnly": true,
          "type": "string"
        },
        "kernelVersion": {
          "readOnly": true,
          "description": "Output only. Kernel version of the device.",
          "type": "string"
        },
        "imei": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. IMEI number of device if GSM device; empty otherwise."
        },
        "releaseVersion": {
          "description": "Output only. OS release version. Example: 6.0.",
          "type": "string",
          "readOnly": true
        },
        "deviceId": {
          "description": "Unique identifier for the device.",
          "type": "string"
        },
        "name": {
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique id assigned to the Device.",
          "type": "string",
          "readOnly": true
        },
        "compromisedState": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Represents whether the Device is compromised.",
          "enum": [
            "COMPROMISED_STATE_UNSPECIFIED",
            "COMPROMISED",
            "UNCOMPROMISED"
          ],
          "enumDescriptions": [
            "Default value.",
            "The device is compromised (currently, this means Android device is rooted).",
            "The device is safe (currently, this means Android device is unrooted)."
          ]
        },
        "model": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Model name of device. Example: Pixel 3."
        },
        "brand": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Device brand. Example: Samsung."
        },
        "deviceType": {
          "enumDescriptions": [
            "Unknown device type",
            "Device is an Android device",
            "Device is an iOS device",
            "Device is a Google Sync device.",
            "Device is a Windows device.",
            "Device is a MacOS device.",
            "Device is a Linux device.",
            "Device is a ChromeOS device."
          ],
          "enum": [
            "DEVICE_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "GOOGLE_SYNC",
            "WINDOWS",
            "MAC_OS",
            "LINUX",
            "CHROME_OS"
          ],
          "readOnly": true,
          "description": "Output only. Type of device.",
          "type": "string"
        },
        "enabledDeveloperOptions": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Whether developer options is enabled on device."
        },
        "lastSyncTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Most recent time when device synced with this service."
        },
        "ownerType": {
          "enumDescriptions": [
            "Default value. The value is unused.",
            "Company owns the device.",
            "Bring Your Own Device (i.e. individual owns the device)"
          ],
          "description": "Output only. Whether the device is owned by the company or an individual",
          "enum": [
            "DEVICE_OWNERSHIP_UNSPECIFIED",
            "COMPANY",
            "BYOD"
          ],
          "type": "string",
          "readOnly": true
        },
        "bootloaderVersion": {
          "description": "Output only. Device bootloader version. Example: 0.6.7.",
          "type": "string",
          "readOnly": true
        },
        "osVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. OS version of the device. Example: Android 8.1.0."
        },
        "securityPatchTime": {
          "readOnly": true,
          "description": "Output only. OS security patch update time on device.",
          "format": "google-datetime",
          "type": "string"
        },
        "encryptionState": {
          "enumDescriptions": [
            "Encryption Status is not set.",
            "Device doesn't support encryption.",
            "Device is encrypted.",
            "Device is not encrypted."
          ],
          "description": "Output only. Device encryption state.",
          "enum": [
            "ENCRYPTION_STATE_UNSPECIFIED",
            "UNSUPPORTED_BY_DEVICE",
            "ENCRYPTED",
            "NOT_ENCRYPTED"
          ],
          "type": "string",
          "readOnly": true
        },
        "meid": {
          "description": "Output only. MEID number of device if CDMA device; empty otherwise.",
          "readOnly": true,
          "type": "string"
        },
        "manufacturer": {
          "type": "string",
          "description": "Output only. Device manufacturer. Example: Motorola.",
          "readOnly": true
        },
        "enabledUsbDebugging": {
          "description": "Output only. Whether USB debugging is enabled on device.",
          "type": "boolean",
          "readOnly": true
        },
        "assetTag": {
          "description": "Asset tag of the device.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1Device",
      "description": " A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user."
    },
    "GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest": {
      "id": "GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest",
      "properties": {
        "customer": {
          "type": "string",
          "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
        }
      },
      "description": "Request message for blocking account on device.",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceRequest": {
      "properties": {
        "removeResetLock": {
          "type": "boolean",
          "description": "Optional. Specifies if a user is able to factory reset a device after a Device Wipe. On iOS, this is called \"Activation Lock\", while on Android, this is known as \"Factory Reset Protection\". If true, this protection will be removed from the device, so that a user can successfully factory reset. If false, the setting is untouched on the device."
        },
        "customer": {
          "type": "string",
          "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceRequest",
      "description": "Request message for wiping all data on the device.",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceResponse": {
      "type": "object",
      "description": "Response message for cancelling an unfinished device wipe.",
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceResponse",
      "properties": {
        "device": {
          "$ref": "GoogleAppsCloudidentityDevicesV1Device",
          "description": "Resultant Device object for the action. Note that asset tags will not be returned in the device object."
        }
      }
    },
    "GoogleAppsCloudidentityDevicesV1ListDeviceUsersResponse": {
      "id": "GoogleAppsCloudidentityDevicesV1ListDeviceUsersResponse",
      "properties": {
        "deviceUsers": {
          "description": "Devices meeting the list restrictions.",
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. Empty if there are no more results.",
          "type": "string"
        }
      },
      "description": "Response message that is returned from the ListDeviceUsers method.",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1ListDevicesResponse": {
      "id": "GoogleAppsCloudidentityDevicesV1ListDevicesResponse",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "GoogleAppsCloudidentityDevicesV1Device"
          },
          "description": "Devices meeting the list restrictions."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results. Empty if there are no more results."
        }
      },
      "description": "Response message that is returned from the ListDevices method.",
      "type": "object"
    },
    "SamlSsoInfo": {
      "properties": {
        "inboundSamlSsoProfile": {
          "type": "string",
          "description": "Required. Name of the `InboundSamlSsoProfile` to use. Must be of the form `inboundSamlSsoProfiles/{inbound_saml_sso_profile}`. "
        }
      },
      "type": "object",
      "description": "Details that are applicable when `sso_mode` == `SAML_SSO`.",
      "id": "SamlSsoInfo"
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest": {
      "description": "Request message for cancelling an unfinished device wipe.",
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest",
      "properties": {
        "customer": {
          "type": "string",
          "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
        }
      },
      "type": "object"
    },
    "SearchTransitiveMembershipsResponse": {
      "description": "The response message for MembershipsService.SearchTransitiveMemberships.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results."
        },
        "memberships": {
          "items": {
            "$ref": "MemberRelation"
          },
          "description": "List of transitive members satisfying the query.",
          "type": "array"
        }
      },
      "id": "SearchTransitiveMembershipsResponse"
    },
    "SearchTransitiveGroupsResponse": {
      "type": "object",
      "id": "SearchTransitiveGroupsResponse",
      "description": "The response message for MembershipsService.SearchTransitiveGroups.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results available for listing."
        },
        "memberships": {
          "type": "array",
          "description": "List of transitive groups satisfying the query.",
          "items": {
            "$ref": "GroupRelation"
          }
        }
      }
    },
    "AddIdpCredentialOperationMetadata": {
      "type": "object",
      "properties": {},
      "description": "LRO response metadata for InboundSamlSsoProfilesService.AddIdpCredential.",
      "id": "AddIdpCredentialOperationMetadata"
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest": {
      "type": "object",
      "properties": {
        "customer": {
          "type": "string",
          "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest",
      "description": "Request message for starting an account wipe on device."
    },
    "ExpiryDetail": {
      "description": "The `MembershipRole` expiry details.",
      "properties": {
        "expireTime": {
          "description": "The time at which the `MembershipRole` will expire.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "id": "ExpiryDetail",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1ListEndpointAppsMetadata": {
      "description": "Metadata for ListEndpointApps LRO.",
      "properties": {},
      "id": "GoogleAppsCloudidentityDevicesV1ListEndpointAppsMetadata",
      "type": "object"
    },
    "ModifyMembershipRolesRequest": {
      "type": "object",
      "properties": {
        "addRoles": {
          "description": "The `MembershipRole`s to be added. Adding or removing roles in the same request as updating roles is not supported. Must not be set if `update_roles_params` is set.",
          "type": "array",
          "items": {
            "$ref": "MembershipRole"
          }
        },
        "updateRolesParams": {
          "items": {
            "$ref": "UpdateMembershipRolesParams"
          },
          "type": "array",
          "description": "The `MembershipRole`s to be updated. Updating roles in the same request as adding or removing roles is not supported. Must not be set if either `add_roles` or `remove_roles` is set."
        },
        "removeRoles": {
          "description": "The `name`s of the `MembershipRole`s to be removed. Adding or removing roles in the same request as updating roles is not supported. It is not possible to remove the `MEMBER` `MembershipRole`. If you wish to delete a `Membership`, call MembershipsService.DeleteMembership instead. Must not contain `MEMBER`. Must not be set if `update_roles_params` is set.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "The request message for MembershipsService.ModifyMembershipRoles.",
      "id": "ModifyMembershipRolesRequest"
    },
    "Status": {
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "type": "object"
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceResponse": {
      "description": "Response message for wiping all data on the device.",
      "type": "object",
      "properties": {
        "device": {
          "description": "Resultant Device object for the action. Note that asset tags will not be returned in the device object.",
          "$ref": "GoogleAppsCloudidentityDevicesV1Device"
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceResponse"
    },
    "UpdateMembershipMetadata": {
      "id": "UpdateMembershipMetadata",
      "type": "object",
      "properties": {},
      "description": "Metadata for UpdateMembership LRO."
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceMetadata": {
      "properties": {},
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceMetadata",
      "description": "Metadata for CancelWipeDevice LRO."
    },
    "GoogleAppsCloudidentityDevicesV1DeleteDeviceUserMetadata": {
      "id": "GoogleAppsCloudidentityDevicesV1DeleteDeviceUserMetadata",
      "type": "object",
      "properties": {},
      "description": "Metadata for DeleteDeviceUser LRO."
    },
    "DynamicGroupQuery": {
      "type": "object",
      "id": "DynamicGroupQuery",
      "description": "Defines a query on a resource.",
      "properties": {
        "resourceType": {
          "enumDescriptions": [
            "Default value (not valid)",
            "For queries on User"
          ],
          "enum": [
            "RESOURCE_TYPE_UNSPECIFIED",
            "USER"
          ],
          "description": "Resource type for the Dynamic Group Query",
          "type": "string"
        },
        "query": {
          "description": "Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`",
          "type": "string"
        }
      }
    },
    "GoogleAppsCloudidentityDevicesV1BlockDeviceUserMetadata": {
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1BlockDeviceUserMetadata",
      "properties": {},
      "description": "Metadata for BlockDeviceUser LRO."
    },
    "SecuritySettings": {
      "type": "object",
      "properties": {
        "memberRestriction": {
          "$ref": "MemberRestriction",
          "description": "The Member Restriction value"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The resource name of the security settings. Shall be of the form `groups/{group_id}/securitySettings`."
        }
      },
      "id": "SecuritySettings",
      "description": "The definition of security settings."
    },
    "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserMetadata": {
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserMetadata",
      "properties": {},
      "description": "Metadata for ApproveDeviceUser LRO."
    },
    "SamlSpConfig": {
      "type": "object",
      "id": "SamlSpConfig",
      "description": "SAML SP (service provider) configuration.",
      "properties": {
        "assertionConsumerServiceUri": {
          "type": "string",
          "description": "Output only. The SAML **Assertion Consumer Service (ACS) URL** to be used for the IDP-initiated login. Assumed to accept response messages via the `HTTP-POST` binding.",
          "readOnly": true
        },
        "entityId": {
          "description": "Output only. The SAML **Entity ID** for this service provider.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Group": {
      "properties": {
        "additionalGroupKeys": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. Additional group keys associated with the Group.",
          "items": {
            "$ref": "EntityKey"
          }
        },
        "description": {
          "type": "string",
          "description": "An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters."
        },
        "dynamicGroupMetadata": {
          "$ref": "DynamicGroupMetadata",
          "description": "Optional. Dynamic group metadata like queries and status."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the `Group`."
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time when the `Group` was created.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group}`."
        },
        "labels": {
          "description": "Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "updateTime": {
          "description": "Output only. The time when the `Group` was last updated.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "groupKey": {
          "description": "Required. The `EntityKey` of the `Group`.",
          "$ref": "EntityKey"
        },
        "parent": {
          "type": "string",
          "description": "Required. Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external [identity-mapped groups](https://support.google.com/a/answer/9039510) or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)"
        }
      },
      "description": "A group within the Cloud Identity Groups API. A `Group` is a collection of entities, where each entity is either a user, another group, or a service account.",
      "type": "object",
      "id": "Group"
    },
    "IdpCredential": {
      "type": "object",
      "id": "IdpCredential",
      "properties": {
        "name": {
          "readOnly": true,
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the credential.",
          "type": "string"
        },
        "dsaKeyInfo": {
          "$ref": "DsaPublicKeyInfo",
          "description": "Output only. Information of a DSA public key.",
          "readOnly": true
        },
        "rsaKeyInfo": {
          "readOnly": true,
          "$ref": "RsaPublicKeyInfo",
          "description": "Output only. Information of a RSA public key."
        },
        "updateTime": {
          "description": "Output only. Time when the `IdpCredential` was last updated.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        }
      },
      "description": "Credential for verifying signatures produced by the Identity Provider."
    },
    "GoogleAppsCloudidentityDevicesV1ClientState": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest",
          "type": "string"
        },
        "keyValuePairs": {
          "description": "The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.",
          "additionalProperties": {
            "$ref": "GoogleAppsCloudidentityDevicesV1CustomAttributeValue"
          },
          "type": "object"
        },
        "ownerType": {
          "enum": [
            "OWNER_TYPE_UNSPECIFIED",
            "OWNER_TYPE_CUSTOMER",
            "OWNER_TYPE_PARTNER"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown owner type",
            "Customer is the owner",
            "Partner is the owner"
          ],
          "description": "Output only. The owner of the ClientState",
          "readOnly": true
        },
        "complianceState": {
          "enum": [
            "COMPLIANCE_STATE_UNSPECIFIED",
            "COMPLIANT",
            "NON_COMPLIANT"
          ],
          "enumDescriptions": [
            "The compliance state of the resource is unknown or unspecified.",
            "Device is compliant with third party policies",
            "Device is not compliant with third party policies"
          ],
          "type": "string",
          "description": "The compliance state of the resource as specified by the API client."
        },
        "healthScore": {
          "enum": [
            "HEALTH_SCORE_UNSPECIFIED",
            "VERY_POOR",
            "POOR",
            "NEUTRAL",
            "GOOD",
            "VERY_GOOD"
          ],
          "type": "string",
          "description": "The Health score of the resource. The Health score is the callers specification of the condition of the device from a usability point of view. For example, a third-party device management provider may specify a health score based on its compliance with organizational policies.",
          "enumDescriptions": [
            "Default value",
            "The object is in very poor health as defined by the caller.",
            "The object is in poor health as defined by the caller.",
            "The object health is neither good nor poor, as defined by the caller.",
            "The object is in good health as defined by the caller.",
            "The object is in very good health as defined by the caller."
          ]
        },
        "lastUpdateTime": {
          "type": "string",
          "description": "Output only. The time the client state data was last updated.",
          "format": "google-datetime",
          "readOnly": true
        },
        "scoreReason": {
          "description": "A descriptive cause of the health score.",
          "type": "string"
        },
        "managed": {
          "enum": [
            "MANAGED_STATE_UNSPECIFIED",
            "MANAGED",
            "UNMANAGED"
          ],
          "type": "string",
          "description": "The management state of the resource as specified by the API client.",
          "enumDescriptions": [
            "The management state of the resource is unknown or unspecified.",
            "The resource is managed.",
            "The resource is not managed."
          ]
        },
        "assetTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The caller can specify asset tags for this resource"
        },
        "customId": {
          "type": "string",
          "description": "This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field."
        },
        "createTime": {
          "description": "Output only. The time the client state data was created.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device}/deviceUsers/{device_user}/clientState/{partner}`, where partner corresponds to the partner storing the data. For partners belonging to the \"BeyondCorp Alliance\", this is the partner ID specified to you by Google. For all other callers, this is a string of the form: `{customer}-suffix`, where `customer` is your customer ID. The *suffix* is any string the caller specifies. This string will be displayed verbatim in the administration console. This suffix is used in setting up Custom Access Levels in Context-Aware Access. Your organization's customer ID can be obtained from the URL: `GET https://www.googleapis.com/admin/directory/v1/customers/my_customer` The `id` field in the response contains the customer ID starting with the letter 'C'. The customer ID to be used in this API is the string after the letter 'C' (not including 'C')",
          "type": "string",
          "readOnly": true
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1ClientState",
      "description": "Represents the state associated with an API client calling the Devices API. Resource representing ClientState and supports updates from API users"
    },
    "UpdateInboundSamlSsoProfileOperationMetadata": {
      "type": "object",
      "properties": {},
      "id": "UpdateInboundSamlSsoProfileOperationMetadata",
      "description": "LRO response metadata for InboundSamlSsoProfilesService.UpdateInboundSamlSsoProfile."
    },
    "SearchDirectGroupsResponse": {
      "type": "object",
      "properties": {
        "memberships": {
          "description": "List of direct groups satisfying the query.",
          "items": {
            "$ref": "MembershipRelation"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results available for listing."
        }
      },
      "id": "SearchDirectGroupsResponse",
      "description": "The response message for MembershipsService.SearchDirectGroups."
    },
    "GoogleAppsCloudidentityDevicesV1DeviceUser": {
      "properties": {
        "languageCode": {
          "description": "Output only. Default locale used on device, in IETF BCP-47 format.",
          "type": "string",
          "readOnly": true
        },
        "passwordState": {
          "enumDescriptions": [
            "Password state not set.",
            "Password set in object.",
            "Password not set in object."
          ],
          "enum": [
            "PASSWORD_STATE_UNSPECIFIED",
            "PASSWORD_SET",
            "PASSWORD_NOT_SET"
          ],
          "type": "string",
          "description": "Password state of the DeviceUser object"
        },
        "userEmail": {
          "type": "string",
          "description": "Email address of the user registered on the device."
        },
        "createTime": {
          "description": "When the user first signed in to the device",
          "type": "string",
          "format": "google-datetime"
        },
        "compromisedState": {
          "enum": [
            "COMPROMISED_STATE_UNSPECIFIED",
            "COMPROMISED",
            "NOT_COMPROMISED"
          ],
          "enumDescriptions": [
            "Compromised state of Device User account is unknown or unspecified.",
            "Device User Account is compromised.",
            "Device User Account is not compromised."
          ],
          "description": "Compromised State of the DeviceUser object",
          "type": "string"
        },
        "lastSyncTime": {
          "description": "Output only. Last time when user synced with policies.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "firstSyncTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Most recent time when user registered with this service.",
          "readOnly": true
        },
        "userAgent": {
          "readOnly": true,
          "description": "Output only. User agent on the device for this specific user",
          "type": "string"
        },
        "managementState": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "This user's data and profile is being removed from the device.",
            "This user's data and profile is removed from the device.",
            "User is approved to access data on the device.",
            "User is blocked from accessing data on the device.",
            "User is awaiting approval.",
            "User is unenrolled from Advanced Windows Management, but the Windows account is still intact."
          ],
          "description": "Output only. Management state of the user on the device.",
          "enum": [
            "MANAGEMENT_STATE_UNSPECIFIED",
            "WIPING",
            "WIPED",
            "APPROVED",
            "BLOCKED",
            "PENDING_APPROVAL",
            "UNENROLLED"
          ],
          "readOnly": true
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device}/deviceUsers/{device_user}`, where `device_user` uniquely identifies a user's use of a device."
        }
      },
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1DeviceUser",
      "description": "Represents a user's use of a Device in the Cloud Identity Devices API. A DeviceUser is a resource representing a user's use of a Device"
    },
    "GoogleAppsCloudidentityDevicesV1DeleteDeviceMetadata": {
      "description": "Metadata for DeleteDevice LRO.",
      "properties": {},
      "id": "GoogleAppsCloudidentityDevicesV1DeleteDeviceMetadata",
      "type": "object"
    },
    "MembershipRelation": {
      "properties": {
        "membership": {
          "type": "string",
          "description": "The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`."
        },
        "roles": {
          "items": {
            "$ref": "MembershipRole"
          },
          "description": "The `MembershipRole`s that apply to the `Membership`.",
          "type": "array"
        },
        "displayName": {
          "description": "The display name of the `Group`.",
          "type": "string"
        },
        "group": {
          "type": "string",
          "description": "The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`."
        },
        "description": {
          "type": "string",
          "description": "An extended description to help users determine the purpose of a `Group`."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value."
        },
        "groupKey": {
          "description": "The `EntityKey` of the `Group`.",
          "$ref": "EntityKey"
        }
      },
      "type": "object",
      "id": "MembershipRelation",
      "description": "Message containing membership relation."
    },
    "UserInvitation": {
      "type": "object",
      "description": "The `UserInvitation` resource represents an email that can be sent to an unmanaged user account inviting them to join the customer's Google Workspace or Cloud Identity account. An unmanaged account shares an email address domain with the Google Workspace or Cloud Identity account but is not managed by it yet. If the user accepts the `UserInvitation`, the user account will become managed.",
      "id": "UserInvitation",
      "properties": {
        "mailsSentCount": {
          "type": "string",
          "format": "int64",
          "description": "Number of invitation emails sent to the user."
        },
        "updateTime": {
          "type": "string",
          "description": "Time when the `UserInvitation` was last updated.",
          "format": "google-datetime"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_YET_SENT",
            "INVITED",
            "ACCEPTED",
            "DECLINED"
          ],
          "type": "string",
          "description": "State of the `UserInvitation`.",
          "enumDescriptions": [
            "The default value. This value is used if the state is omitted.",
            "The `UserInvitation` has been created and is ready for sending as an email.",
            "The user has been invited by email.",
            "The user has accepted the invitation and is part of the organization.",
            "The user declined the invitation."
          ]
        },
        "name": {
          "type": "string",
          "description": "Shall be of the form `customers/{customer}/userinvitations/{user_email_address}`."
        }
      }
    },
    "DeleteInboundSamlSsoProfileOperationMetadata": {
      "id": "DeleteInboundSamlSsoProfileOperationMetadata",
      "properties": {},
      "type": "object",
      "description": "LRO response metadata for InboundSamlSsoProfilesService.DeleteInboundSamlSsoProfile."
    },
    "CheckTransitiveMembershipResponse": {
      "type": "object",
      "properties": {
        "hasMembership": {
          "type": "boolean",
          "description": "Response does not include the possible roles of a member since the behavior of this rpc is not all-or-nothing unlike the other rpcs. So, it may not be possible to list all the roles definitively, due to possible lack of authorization in some of the paths."
        }
      },
      "description": "The response message for MembershipsService.CheckTransitiveMembership.",
      "id": "CheckTransitiveMembershipResponse"
    },
    "CreateInboundSamlSsoProfileOperationMetadata": {
      "type": "object",
      "id": "CreateInboundSamlSsoProfileOperationMetadata",
      "description": "LRO response metadata for InboundSamlSsoProfilesService.CreateInboundSamlSsoProfile.",
      "properties": {}
    },
    "ListMembershipsResponse": {
      "id": "ListMembershipsResponse",
      "type": "object",
      "properties": {
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "Membership"
          },
          "description": "The `Membership`s under the specified `parent`."
        },
        "nextPageToken": {
          "description": "A continuation token to retrieve the next page of results, or empty if there are no more results available.",
          "type": "string"
        }
      },
      "description": "The response message for MembershipsService.ListMemberships."
    },
    "SendUserInvitationRequest": {
      "properties": {},
      "type": "object",
      "description": "A request to send email for inviting target user corresponding to the UserInvitation.",
      "id": "SendUserInvitationRequest"
    },
    "Membership": {
      "properties": {
        "preferredMemberKey": {
          "description": "Required. Immutable. The `EntityKey` of the member.",
          "$ref": "EntityKey"
        },
        "deliverySetting": {
          "readOnly": true,
          "type": "string",
          "enum": [
            "DELIVERY_SETTING_UNSPECIFIED",
            "ALL_MAIL",
            "DIGEST",
            "DAILY",
            "NONE",
            "DISABLED"
          ],
          "enumDescriptions": [
            "Default. Should not be used.",
            "Represents each mail should be delivered",
            "Represents 1 email for every 25 messages.",
            "Represents daily summary of messages.",
            "Represents no delivery.",
            "Represents disabled state."
          ],
          "description": "Output only. Delivery setting associated with the membership."
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "USER",
            "SERVICE_ACCOUNT",
            "GROUP",
            "SHARED_DRIVE",
            "OTHER"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default. Should not be used.",
            "Represents user type.",
            "Represents service account type.",
            "Represents group type.",
            "Represents Shared drive.",
            "Represents other type."
          ],
          "readOnly": true,
          "description": "Output only. The type of the membership."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time when the `Membership` was created.",
          "readOnly": true
        },
        "roles": {
          "description": "The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.",
          "items": {
            "$ref": "MembershipRole"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group}/memberships/{membership}`.",
          "readOnly": true
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "Output only. The time when the `Membership` was last updated.",
          "type": "string",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "Membership",
      "description": "A membership within the Cloud Identity Groups API. A `Membership` defines a relationship between a `Group` and an entity belonging to that `Group`, referred to as a \"member\"."
    },
    "ListUserInvitationsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The token for the next page. If not empty, indicates that there may be more `UserInvitation` resources that match the listing request; this value can be used in a subsequent ListUserInvitationsRequest to get continued results with the current list call."
        },
        "userInvitations": {
          "description": "The list of UserInvitation resources.",
          "items": {
            "$ref": "UserInvitation"
          },
          "type": "array"
        }
      },
      "id": "ListUserInvitationsResponse",
      "type": "object",
      "description": "Response message for UserInvitation listing request."
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserMetadata": {
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserMetadata",
      "description": "Metadata for CancelWipeDeviceUser LRO.",
      "type": "object",
      "properties": {}
    },
    "DeleteInboundSsoAssignmentOperationMetadata": {
      "id": "DeleteInboundSsoAssignmentOperationMetadata",
      "properties": {},
      "type": "object",
      "description": "LRO response metadata for InboundSsoAssignmentsService.DeleteInboundSsoAssignment."
    },
    "GoogleAppsCloudidentityDevicesV1UpdateClientStateMetadata": {
      "description": "Metadata for UpdateClientState LRO.",
      "id": "GoogleAppsCloudidentityDevicesV1UpdateClientStateMetadata",
      "properties": {},
      "type": "object"
    },
    "RestrictionEvaluation": {
      "description": "The evaluated state of this restriction.",
      "type": "object",
      "properties": {
        "state": {
          "description": "Output only. The current state of the restriction",
          "enum": [
            "STATE_UNSPECIFIED",
            "EVALUATING",
            "COMPLIANT",
            "FORWARD_COMPLIANT",
            "NON_COMPLIANT"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default. Should not be used.",
            "The restriction state is currently being evaluated.",
            "All transitive memberships are adhering to restriction.",
            "Some transitive memberships violate the restriction. No new violating memberships can be added.",
            "Some transitive memberships violate the restriction. New violating direct memberships will be denied while indirect memberships may be added."
          ],
          "readOnly": true
        }
      },
      "id": "RestrictionEvaluation"
    },
    "TransitiveMembershipRole": {
      "description": "Message representing the role of a TransitiveMembership.",
      "id": "TransitiveMembershipRole",
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "description": "TransitiveMembershipRole in string format. Currently supported TransitiveMembershipRoles: `\"MEMBER\"`, `\"OWNER\"`, and `\"MANAGER\"`."
        }
      }
    },
    "GoogleAppsCloudidentityDevicesV1CreateDeviceMetadata": {
      "description": "Metadata for CreateDevice LRO.",
      "type": "object",
      "properties": {},
      "id": "GoogleAppsCloudidentityDevicesV1CreateDeviceMetadata"
    },
    "MemberRelation": {
      "id": "MemberRelation",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "TransitiveMembershipRole"
          },
          "description": "The membership role details (i.e name of role and expiry time)."
        },
        "member": {
          "description": "Resource name for this member.",
          "type": "string"
        },
        "relationType": {
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "DIRECT",
            "INDIRECT",
            "DIRECT_AND_INDIRECT"
          ],
          "enumDescriptions": [
            "The relation type is undefined or undetermined.",
            "The two entities have only a direct membership with each other.",
            "The two entities have only an indirect membership with each other.",
            "The two entities have both a direct and an indirect membership with each other."
          ],
          "type": "string",
          "description": "The relation between the group and the transitive member."
        },
        "preferredMemberKey": {
          "type": "array",
          "items": {
            "$ref": "EntityKey"
          },
          "description": "Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace."
        }
      },
      "type": "object",
      "description": "Message representing a transitive membership of a group."
    },
    "GoogleAppsCloudidentityDevicesV1LookupSelfDeviceUsersResponse": {
      "id": "GoogleAppsCloudidentityDevicesV1LookupSelfDeviceUsersResponse",
      "description": "Response containing resource names of the DeviceUsers associated with the caller's credentials.",
      "type": "object",
      "properties": {
        "customer": {
          "description": "The customer resource name that may be passed back to other Devices API methods such as List, Get, etc.",
          "type": "string"
        },
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "[Resource names](https://cloud.google.com/apis/design/resource_names) of the DeviceUsers in the format: `devices/{device}/deviceUsers/{user_resource}`, where device is the unique ID assigned to a Device and user_resource is the unique user ID"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. Empty if there are no more results.",
          "type": "string"
        }
      }
    },
    "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserResponse": {
      "type": "object",
      "id": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserResponse",
      "properties": {
        "deviceUser": {
          "description": "Resultant DeviceUser object for the action.",
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser"
        }
      },
      "description": "Response message for cancelling an unfinished user account wipe."
    },
    "LookupGroupNameResponse": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The [resource name](https://cloud.google.com/apis/design/resource_names) of the looked-up `Group`."
        }
      },
      "id": "LookupGroupNameResponse",
      "description": "The response message for GroupsService.LookupGroupName.",
      "type": "object"
    },
    "MembershipAdjacencyList": {
      "description": "Membership graph's path information as an adjacency list.",
      "properties": {
        "group": {
          "type": "string",
          "description": "Resource name of the group that the members belong to."
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "Membership"
          },
          "description": "Each edge contains information about the member that belongs to this group. Note: Fields returned here will help identify the specific Membership resource (e.g name, preferred_member_key and role), but may not be a comprehensive list of all fields."
        }
      },
      "id": "MembershipAdjacencyList",
      "type": "object"
    },
    "CreateGroupMetadata": {
      "description": "Metadata for CreateGroup LRO.",
      "id": "CreateGroupMetadata",
      "type": "object",
      "properties": {}
    },
    "UpdateGroupMetadata": {
      "id": "UpdateGroupMetadata",
      "properties": {},
      "description": "Metadata for UpdateGroup LRO.",
      "type": "object"
    },
    "DynamicGroupMetadata": {
      "description": "Dynamic group metadata like queries and status.",
      "properties": {
        "status": {
          "description": "Output only. Status of the dynamic group.",
          "readOnly": true,
          "$ref": "DynamicGroupStatus"
        },
        "queries": {
          "type": "array",
          "items": {
            "$ref": "DynamicGroupQuery"
          },
          "description": "Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups."
        }
      },
      "type": "object",
      "id": "DynamicGroupMetadata"
    },
    "GetMembershipGraphMetadata": {
      "type": "object",
      "description": "Metadata of GetMembershipGraphResponse LRO. This is currently empty to permit future extensibility.",
      "id": "GetMembershipGraphMetadata",
      "properties": {}
    },
    "UpdateMembershipRolesParams": {
      "type": "object",
      "properties": {
        "membershipRole": {
          "$ref": "MembershipRole",
          "description": "The `MembershipRole`s to be updated. Only `MEMBER` `MembershipRole` can currently be updated."
        },
        "fieldMask": {
          "description": "The fully-qualified names of fields to update. May only contain the field `expiry_detail.expire_time`.",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "id": "UpdateMembershipRolesParams",
      "description": "The details of an update to a `MembershipRole`."
    },
    "ListGroupsResponse": {
      "description": "Response message for ListGroups operation.",
      "id": "ListGroupsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results available for listing."
        },
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "type": "array",
          "description": "Groups returned in response to list request. The results are not sorted."
        }
      }
    },
    "InboundSsoAssignment": {
      "type": "object",
      "description": "Targets with \"set\" SSO assignments and their respective assignments.",
      "id": "InboundSsoAssignment",
      "properties": {
        "targetGroup": {
          "type": "string",
          "description": "Immutable. Must be of the form `groups/{group}`."
        },
        "samlSsoInfo": {
          "$ref": "SamlSsoInfo",
          "description": "SAML SSO details. Must be set if and only if `sso_mode` is set to `SAML_SSO`."
        },
        "ssoMode": {
          "enumDescriptions": [
            "Not allowed.",
            "Disable SSO for the targeted users.",
            "Use an external SAML Identity Provider for SSO for the targeted users.",
            "Use the domain-wide SAML Identity Provider for the targeted users if one is configured; otherwise, this is equivalent to `SSO_OFF`. Note that this will also be equivalent to `SSO_OFF` if/when support for domain-wide SAML is removed. Google may disallow this mode at that point and existing assignments with this mode may be automatically changed to `SSO_OFF`."
          ],
          "description": "Inbound SSO behavior.",
          "type": "string",
          "enum": [
            "SSO_MODE_UNSPECIFIED",
            "SSO_OFF",
            "SAML_SSO",
            "DOMAIN_WIDE_SAML_IF_ENABLED"
          ]
        },
        "signInBehavior": {
          "$ref": "SignInBehavior",
          "description": "Assertions about users assigned to an IdP will always be accepted from that IdP. This controls whether/when Google should redirect a user to the IdP. Unset (defaults) is the recommended configuration."
        },
        "customer": {
          "type": "string",
          "description": "Immutable. The customer. For example: `customers/C0123abc`."
        },
        "name": {
          "readOnly": true,
          "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Inbound SSO Assignment.",
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "description": "Must be zero (which is the default value so it can be omitted) for assignments with `target_org_unit` set and must be greater-than-or-equal-to one for assignments with `target_group` set.",
          "type": "integer"
        },
        "targetOrgUnit": {
          "description": "Immutable. Must be of the form `orgUnits/{org_unit}`.",
          "type": "string"
        }
      }
    },
    "ListInboundSamlSsoProfilesResponse": {
      "id": "ListInboundSamlSsoProfilesResponse",
      "type": "object",
      "properties": {
        "inboundSamlSsoProfiles": {
          "items": {
            "$ref": "InboundSamlSsoProfile"
          },
          "type": "array",
          "description": "List of InboundSamlSsoProfiles."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "description": "Response of the InboundSamlSsoProfilesService.ListInboundSamlSsoProfiles method."
    },
    "DeleteGroupMetadata": {
      "description": "Metadata for DeleteGroup LRO.",
      "properties": {},
      "type": "object",
      "id": "DeleteGroupMetadata"
    },
    "MembershipRoleRestrictionEvaluation": {
      "id": "MembershipRoleRestrictionEvaluation",
      "description": "The evaluated state of this restriction.",
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "Output only. The current state of the restriction",
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "COMPLIANT",
            "FORWARD_COMPLIANT",
            "NON_COMPLIANT",
            "EVALUATING"
          ],
          "enumDescriptions": [
            "Default. Should not be used.",
            "The member adheres to the parent group's restriction.",
            "The group-group membership might be currently violating some parent group's restriction but in future, it will never allow any new member in the child group which can violate parent group's restriction.",
            "The member violates the parent group's restriction.",
            "The state of the membership is under evaluation."
          ]
        }
      }
    },
    "DeleteMembershipMetadata": {
      "description": "Metadata for DeleteMembership LRO.",
      "id": "DeleteMembershipMetadata",
      "type": "object",
      "properties": {}
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceMetadata": {
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceMetadata",
      "type": "object",
      "properties": {},
      "description": "Metadata for WipeDevice LRO."
    },
    "GoogleAppsCloudidentityDevicesV1WipeDeviceUserResponse": {
      "type": "object",
      "description": "Response message for wiping the user's account from the device.",
      "properties": {
        "deviceUser": {
          "description": "Resultant DeviceUser object for the action.",
          "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser"
        }
      },
      "id": "GoogleAppsCloudidentityDevicesV1WipeDeviceUserResponse"
    },
    "DeleteIdpCredentialOperationMetadata": {
      "id": "DeleteIdpCredentialOperationMetadata",
      "description": "LRO response metadata for InboundSamlSsoProfilesService.DeleteIdpCredential.",
      "type": "object",
      "properties": {}
    }
  },
  "servicePath": "",
  "id": "cloudidentity:v1",
  "baseUrl": "https://cloudidentity.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-identity.groups.readonly": {
          "description": "See any Cloud Identity Groups that you can access, including group members and their emails"
        },
        "https://www.googleapis.com/auth/cloud-identity.devices.readonly": {
          "description": "Private Service: https://www.googleapis.com/auth/cloud-identity.devices.readonly"
        },
        "https://www.googleapis.com/auth/cloud-identity.devices": {
          "description": "Private Service: https://www.googleapis.com/auth/cloud-identity.devices"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        },
        "https://www.googleapis.com/auth/cloud-identity.devices.lookup": {
          "description": "See your device details"
        },
        "https://www.googleapis.com/auth/cloud-identity.groups": {
          "description": "See, change, create, and delete any of the Cloud Identity Groups that you can access, including the members of each group"
        }
      }
    }
  },
  "parameters": {
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "location": "query",
      "type": "string",
      "default": "json"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    }
  },
  "name": "cloudidentity",
  "batchPath": "batch",
  "ownerDomain": "google.com",
  "kind": "discovery#restDescription",
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "version": "v1",
  "title": "Cloud Identity API",
  "basePath": "",
  "description": "API for provisioning and managing identity resources.",
  "resources": {
    "inboundSsoAssignments": {
      "methods": {
        "create": {
          "request": {
            "$ref": "InboundSsoAssignment"
          },
          "parameterOrder": [],
          "id": "cloudidentity.inboundSsoAssignments.create",
          "description": "Creates an InboundSsoAssignment for users and devices in a `Customer` under a given `Group` or `OrgUnit`.",
          "httpMethod": "POST",
          "path": "v1/inboundSsoAssignments",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Operation"
          },
          "flatPath": "v1/inboundSsoAssignments"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "cloudidentity.inboundSsoAssignments.get",
          "path": "v1/{+name}",
          "flatPath": "v1/inboundSsoAssignments/{inboundSsoAssignmentsId}",
          "response": {
            "$ref": "InboundSsoAssignment"
          },
          "description": "Gets an InboundSsoAssignment.",
          "httpMethod": "GET",
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "location": "path",
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the InboundSsoAssignment to fetch. Format: `inboundSsoAssignments/{assignment}`",
              "type": "string",
              "pattern": "^inboundSsoAssignments/[^/]+$",
              "required": true
            }
          }
        },
        "delete": {
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/inboundSsoAssignments/{inboundSsoAssignmentsId}",
          "httpMethod": "DELETE",
          "parameters": {
            "name": {
              "required": true,
              "location": "path",
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the InboundSsoAssignment to delete. Format: `inboundSsoAssignments/{assignment}`",
              "pattern": "^inboundSsoAssignments/[^/]+$",
              "type": "string"
            }
          },
          "path": "v1/{+name}",
          "response": {
            "$ref": "Operation"
          },
          "id": "cloudidentity.inboundSsoAssignments.delete",
          "description": "Deletes an InboundSsoAssignment. To disable SSO, Create (or Update) an assignment that has `sso_mode` == `SSO_OFF`.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "list": {
          "flatPath": "v1/inboundSsoAssignments",
          "path": "v1/inboundSsoAssignments",
          "response": {
            "$ref": "ListInboundSsoAssignmentsResponse"
          },
          "parameters": {
            "filter": {
              "type": "string",
              "location": "query",
              "description": "A CEL expression to filter the results. The only supported filter is filtering by customer. For example: `customer==customers/C0123abc`. Omitting the filter or specifying a filter of `customer==customers/my_customer` will return the assignments for the customer that the caller (authenticated user) belongs to."
            },
            "pageSize": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "The maximum number of assignments to return. The service may return fewer than this value. If omitted (or defaulted to zero) the server will use a sensible default. This default may change over time. The maximum allowed value is 100, though requests with page_size greater than that will be silently interpreted as having this maximum value. This may increase in the futue."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "A page token, received from a previous `ListInboundSsoAssignments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListInboundSsoAssignments` must match the call that provided the page token."
            }
          },
          "description": "Lists the InboundSsoAssignments for a `Customer`.",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "cloudidentity.inboundSsoAssignments.list",
          "httpMethod": "GET"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Operation"
          },
          "request": {
            "$ref": "InboundSsoAssignment"
          },
          "description": "Updates an InboundSsoAssignment. The body of this request is the `inbound_sso_assignment` field and the `update_mask` is relative to that. For example: a PATCH to `/v1/inboundSsoAssignments/0abcdefg1234567&update_mask=rank` with a body of `{ \"rank\": 1 }` moves that (presumably group-targeted) SSO assignment to the highest priority and shifts any other group-targeted assignments down in priority.",
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/inboundSsoAssignments/{inboundSsoAssignmentsId}",
          "httpMethod": "PATCH",
          "path": "v1/{+name}",
          "parameters": {
            "name": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Inbound SSO Assignment.",
              "pattern": "^inboundSsoAssignments/[^/]+$"
            },
            "updateMask": {
              "type": "string",
              "location": "query",
              "description": "Required. The list of fields to be updated.",
              "format": "google-fieldmask"
            }
          },
          "id": "cloudidentity.inboundSsoAssignments.patch"
        }
      }
    },
    "devices": {
      "methods": {
        "cancelWipe": {
          "path": "v1/{+name}:cancelWipe",
          "parameters": {
            "name": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique ID assigned to the Device.",
              "pattern": "^devices/[^/]+$"
            }
          },
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.devices"
          ],
          "flatPath": "v1/devices/{devicesId}:cancelWipe",
          "id": "cloudidentity.devices.cancelWipe",
          "httpMethod": "POST",
          "description": "Cancels an unfinished device wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped. This operation is possible when the device is in a \"pending wipe\" state. The device enters the \"pending wipe\" state when a wipe device command is issued, but has not yet been sent to the device. The cancel wipe will fail if the wipe command has already been issued to the device.",
          "parameterOrder": [
            "name"
          ],
          "request": {
            "$ref": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceRequest"
          }
        },
        "create": {
          "request": {
            "$ref": "GoogleAppsCloudidentityDevicesV1Device"
          },
          "parameters": {
            "customer": {
              "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs.",
              "location": "query",
              "type": "string"
            }
          },
          "id": "cloudidentity.devices.create",
          "flatPath": "v1/devices",
          "path": "v1/devices",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.devices"
          ],
          "response": {
            "$ref": "Operation"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "description": "Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium"
        },
        "delete": {
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/devices/{devicesId}",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
            },
            "name": {
              "pattern": "^devices/[^/]+$",
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique ID assigned to the Device.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "cloudidentity.devices.delete",
          "description": "Deletes the specified device.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.devices"
          ],
          "httpMethod": "DELETE",
          "response": {
            "$ref": "Operation"
          },
          "path": "v1/{+name}"
        },
        "list": {
          "response": {
            "$ref": "GoogleAppsCloudidentityDevicesV1ListDevicesResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.devices",
            "https://www.googleapis.com/auth/cloud-identity.devices.readonly"
          ],
          "id": "cloudidentity.devices.list",
          "parameterOrder": [],
          "flatPath": "v1/devices",
          "parameters": {
            "pageSize": {
              "description": "Optional. The maximum number of Devices to return. If unspecified, at most 20 Devices will be returned. The maximum value is 100; values above 100 will be coerced to 100.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "description": "Optional. Order specification for devices in the response. Only one of the following field names may be used to specify the order: `create_time`, `last_sync_time`, `model`, `os_version`, `device_type` and `serial_number`. `desc` may be specified optionally at the end to specify results to be sorted in descending order. Default order is ascending."
            },
            "pageToken": {
              "location": "query",
              "description": "Optional. A page token, received from a previous `ListDevices` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListDevices` must match the call that provided the page token.",
              "type": "string"
            },
            "customer": {
              "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer in the format: `customers/{customer}`, where customer is the customer to whom the device belongs. If you're using this API for your own organization, use `customers/my_customer`. If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs.",
              "type": "string",
              "location": "query"
            },
            "filter": {
              "description": "Optional. Additional restrictions when fetching list of devices. For a list of search fields, refer to [Mobile device search fields](https://developers.google.com/admin-sdk/directory/v1/search-operators). Multiple search fields are separated by the space character.",
              "type": "string",
              "location": "query"
            },
            "view": {
              "enumDescriptions": [
                "Default value. The value is unused.",
                "This view contains all devices imported by the company admin. Each device in the response contains all information specified by the company admin when importing the device (i.e. asset tags). This includes devices that may be unaassigned or assigned to users.",
                "This view contains all devices with at least one user registered on the device. Each device in the response contains all device information, except for asset tags."
              ],
              "enum": [
                "VIEW_UNSPECIFIED",
                "COMPANY_INVENTORY",
                "USER_ASSIGNED_DEVICES"
              ],
              "location": "query",
              "description": "Optional. The view to use for the List request.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "v1/devices",
          "description": "Lists/Searches devices."
        },
        "get": {
          "flatPath": "v1/devices/{devicesId}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.devices",
            "https://www.googleapis.com/auth/cloud-identity.devices.readonly"
          ],
          "response": {
            "$ref": "GoogleAppsCloudidentityDevicesV1Device"
          },
          "parameters": {
            "name": {
              "required": true,
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in the format: `devices/{device}`, where device is the unique ID assigned to the Device.",
              "type": "string",
              "location": "path",
              "pattern": "^devices/[^/]+$"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Customer in the format: `customers/{customer}`, where customer is the customer to whom the device belongs. If you're using this API for your own organization, use `customers/my_customer`. If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
            }
          },
          "description": "Retrieves the specified device.",
          "id": "cloudidentity.devices.get",
          "path": "v1/{+name}",
          "httpMethod": "GET",
          "parameterOrder": [
            "name"
          ]
        },
        "wipe": {
          "path": "v1/{+name}:wipe",
          "parameters": {
            "name": {
              "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}/deviceUsers/{device_user}`, where device is the unique ID assigned to the Device, and device_user is the unique ID assigned to the User.",
              "pattern": "^devices/[^/]+$",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "POST",
          "flatPath": "v1/devices/{devicesId}:wipe",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.devices"
          ],
          "request": {
            "$ref": "GoogleAppsCloudidentityDevicesV1WipeDeviceRequest"
          },
          "id": "cloudidentity.devices.wipe",
          "response": {
            "$ref": "Operation"
          },
          "description": "Wipes all data on the specified device."
        }
      },
      "resources": {
        "deviceUsers": {
          "resources": {
            "clientStates": {
              "methods": {
                "get": {
                  "id": "cloudidentity.devices.deviceUsers.clientStates.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates/{clientStatesId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-identity.devices",
                    "https://www.googleapis.com/auth/cloud-identity.devices.readonly"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleAppsCloudidentityDevicesV1ClientState"
                  },
                  "description": "Gets the client state for the device user",
                  "parameters": {
                    "customer": {
                      "location": "query",
                      "type": "string",
                      "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
                    },
                    "name": {
                      "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device}/deviceUsers/{device_user}/clientStates/{partner}`, where `device` is the unique ID assigned to the Device, `device_user` is the unique ID assigned to the User and `partner` identifies the partner storing the data. To get the client state for devices belonging to your own organization, the `partnerId` is in the format: `customerId-*anystring*`. Where the `customerId` is your organization's customer ID and `anystring` is any suffix. This suffix is used in setting up Custom Access Levels in Context-Aware Access. You may use `my_customer` instead of the customer ID for devices managed by your own organization. You may specify `-` in place of the `{device}`, so the ClientState resource name can be: `devices/-/deviceUsers/{device_user_resource}/clientStates/{partner}`.",
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^devices/[^/]+/deviceUsers/[^/]+/clientStates/[^/]+$"
                    }
                  },
                  "httpMethod": "GET"
                },
                "list": {
                  "parameters": {
                    "filter": {
                      "description": "Optional. Additional restrictions when fetching list of client states.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                      "description": "Required. To list all ClientStates, set this to \"devices/-/deviceUsers/-\". To list all ClientStates owned by a DeviceUser, set this to the resource name of the DeviceUser. Format: devices/{device}/deviceUsers/{deviceUser}",
                      "required": true
                    },
                    "orderBy": {
                      "description": "Optional. Order specification for client states in the response.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "Optional. A page token, received from a previous `ListClientStates` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListClientStates` must match the call that provided the page token.",
                      "type": "string",
                      "location": "query"
                    },
                    "customer": {
                      "location": "query",
                      "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs.",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates",
                  "path": "v1/{+parent}/clientStates",
                  "httpMethod": "GET",
                  "id": "cloudidentity.devices.deviceUsers.clientStates.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-identity.devices",
                    "https://www.googleapis.com/auth/cloud-identity.devices.readonly"
                  ],
                  "response": {
                    "$ref": "GoogleAppsCloudidentityDevicesV1ListClientStatesResponse"
                  },
                  "description": "Lists the client states for the given search query."
                },
                "patch": {
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Updates the client state for the device user **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium",
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device}/deviceUsers/{device_user}/clientState/{partner}`, where partner corresponds to the partner storing the data. For partners belonging to the \"BeyondCorp Alliance\", this is the partner ID specified to you by Google. For all other callers, this is a string of the form: `{customer}-suffix`, where `customer` is your customer ID. The *suffix* is any string the caller specifies. This string will be displayed verbatim in the administration console. This suffix is used in setting up Custom Access Levels in Context-Aware Access. Your organization's customer ID can be obtained from the URL: `GET https://www.googleapis.com/admin/directory/v1/customers/my_customer` The `id` field in the response contains the customer ID starting with the letter 'C'. The customer ID to be used in this API is the string after the letter 'C' (not including 'C')",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^devices/[^/]+/deviceUsers/[^/]+/clientStates/[^/]+$"
                    },
                    "updateMask": {
                      "description": "Optional. Comma-separated list of fully qualified names of fields to be updated. If not specified, all updatable fields in ClientState are updated.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "customer": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-identity.devices"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "PATCH",
                  "id": "cloudidentity.devices.deviceUsers.clientStates.patch",
                  "request": {
                    "$ref": "GoogleAppsCloudidentityDevicesV1ClientState"
                  },
                  "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates/{clientStatesId}"
                }
              }
            }
          },
          "methods": {
            "get": {
              "parameters": {
                "name": {
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}/deviceUsers/{device_user}`, where device is the unique ID assigned to the Device, and device_user is the unique ID assigned to the User.",
                  "required": true
                },
                "customer": {
                  "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs.",
                  "type": "string",
                  "location": "query"
                }
              },
              "id": "cloudidentity.devices.deviceUsers.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices",
                "https://www.googleapis.com/auth/cloud-identity.devices.readonly"
              ],
              "response": {
                "$ref": "GoogleAppsCloudidentityDevicesV1DeviceUser"
              },
              "path": "v1/{+name}",
              "httpMethod": "GET",
              "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}",
              "description": "Retrieves the specified DeviceUser",
              "parameterOrder": [
                "name"
              ]
            },
            "block": {
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/{+name}:block",
              "request": {
                "$ref": "GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices"
              ],
              "description": "Blocks device from accessing user data",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}/deviceUsers/{device_user}`, where device is the unique ID assigned to the Device, and device_user is the unique ID assigned to the User.",
                  "type": "string",
                  "required": true,
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$"
                }
              },
              "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}:block",
              "id": "cloudidentity.devices.deviceUsers.block",
              "parameterOrder": [
                "name"
              ]
            },
            "approve": {
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}/deviceUsers/{device_user}`, where device is the unique ID assigned to the Device, and device_user is the unique ID assigned to the User.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "id": "cloudidentity.devices.deviceUsers.approve",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices"
              ],
              "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}:approve",
              "request": {
                "$ref": "GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest"
              },
              "description": "Approves device to access user data.",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:approve"
            },
            "cancelWipe": {
              "parameters": {
                "name": {
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}/deviceUsers/{device_user}`, where device is the unique ID assigned to the Device, and device_user is the unique ID assigned to the User.",
                  "type": "string",
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest"
              },
              "description": "Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.",
              "path": "v1/{+name}:cancelWipe",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices"
              ],
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudidentity.devices.deviceUsers.cancelWipe",
              "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}:cancelWipe",
              "httpMethod": "POST"
            },
            "lookup": {
              "flatPath": "v1/devices/{devicesId}/deviceUsers:lookup",
              "parameters": {
                "rawResourceId": {
                  "location": "query",
                  "description": "Raw Resource Id used by Google Endpoint Verification. If the user is enrolled into Google Endpoint Verification, this id will be saved as the 'device_resource_id' field in the following platform dependent files. Mac: ~/.secureConnect/context_aware_config.json Windows: C:\\Users\\%USERPROFILE%\\.secureConnect\\context_aware_config.json Linux: ~/.secureConnect/context_aware_config.json",
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "description": "The maximum number of DeviceUsers to return. If unspecified, at most 20 DeviceUsers will be returned. The maximum value is 20; values above 20 will be coerced to 20.",
                  "type": "integer",
                  "location": "query"
                },
                "androidId": {
                  "description": "Android Id returned by [Settings.Secure#ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID).",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^devices/[^/]+/deviceUsers$",
                  "description": "Must be set to \"devices/-/deviceUsers\" to search across all DeviceUser belonging to the user."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token, received from a previous `LookupDeviceUsers` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `LookupDeviceUsers` must match the call that provided the page token."
                },
                "userId": {
                  "description": "The user whose DeviceUser's resource name will be fetched. Must be set to 'me' to fetch the DeviceUser's resource name for the calling user.",
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "v1/{+parent}:lookup",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices.lookup"
              ],
              "parameterOrder": [
                "parent"
              ],
              "id": "cloudidentity.devices.deviceUsers.lookup",
              "httpMethod": "GET",
              "description": "Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required.",
              "response": {
                "$ref": "GoogleAppsCloudidentityDevicesV1LookupSelfDeviceUsersResponse"
              }
            },
            "list": {
              "flatPath": "v1/devices/{devicesId}/deviceUsers",
              "path": "v1/{+parent}/deviceUsers",
              "description": "Lists/Searches DeviceUsers.",
              "response": {
                "$ref": "GoogleAppsCloudidentityDevicesV1ListDeviceUsersResponse"
              },
              "id": "cloudidentity.devices.deviceUsers.list",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs.",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "description": "Required. To list all DeviceUsers, set this to \"devices/-\". To list all DeviceUsers owned by a device, set this to the resource name of the device. Format: devices/{device}",
                  "location": "path",
                  "pattern": "^devices/[^/]+$"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. A page token, received from a previous `ListDeviceUsers` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBooks` must match the call that provided the page token."
                },
                "pageSize": {
                  "description": "Optional. The maximum number of DeviceUsers to return. If unspecified, at most 5 DeviceUsers will be returned. The maximum value is 20; values above 20 will be coerced to 20.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "filter": {
                  "description": "Optional. Additional restrictions when fetching list of devices. For a list of search fields, refer to [Mobile device search fields](https://developers.google.com/admin-sdk/directory/v1/search-operators). Multiple search fields are separated by the space character.",
                  "location": "query",
                  "type": "string"
                },
                "orderBy": {
                  "description": "Optional. Order specification for devices in the response.",
                  "type": "string",
                  "location": "query"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices",
                "https://www.googleapis.com/auth/cloud-identity.devices.readonly"
              ],
              "parameterOrder": [
                "parent"
              ]
            },
            "wipe": {
              "request": {
                "$ref": "GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest"
              },
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$",
                  "type": "string",
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}/deviceUsers/{device_user}`, where device is the unique ID assigned to the Device, and device_user is the unique ID assigned to the User.",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}:wipe",
              "httpMethod": "POST",
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices"
              ],
              "description": "Wipes the user's account on a device. Other data on the device that is not associated with the user's work account is not affected. For example, if a Gmail app is installed on a device that is used for personal and work purposes, and the user is logged in to the Gmail app with their personal account as well as their work account, wiping the \"deviceUser\" by their work administrator will not affect their personal account within Gmail or other apps such as Photos.",
              "id": "cloudidentity.devices.deviceUsers.wipe",
              "path": "v1/{+name}:wipe"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.devices"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "description": "Deletes the specified DeviceUser. This also revokes the user's access to device data.",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}/deviceUsers/{device_user}`, where device is the unique ID assigned to the Device, and device_user is the unique ID assigned to the User.",
                  "location": "path",
                  "type": "string",
                  "pattern": "^devices/[^/]+/deviceUsers/[^/]+$"
                },
                "customer": {
                  "location": "query",
                  "description": "Optional. [Resource name](https://cloud.google.com/apis/design/resource_names) of the customer. If you're using this API for your own organization, use `customers/my_customer` If you're using this API to manage another organization, use `customers/{customer}`, where customer is the customer to whom the device belongs.",
                  "type": "string"
                }
              },
              "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}",
              "id": "cloudidentity.devices.deviceUsers.delete"
            }
          }
        }
      }
    },
    "groups": {
      "resources": {
        "memberships": {
          "methods": {
            "list": {
              "flatPath": "v1/groups/{groupsId}/memberships",
              "path": "v1/{+parent}/memberships",
              "id": "cloudidentity.groups.memberships.list",
              "parameters": {
                "parent": {
                  "type": "string",
                  "description": "Required. The parent `Group` resource under which to lookup the `Membership` name. Must be of the form `groups/{group}`.",
                  "location": "path",
                  "pattern": "^groups/[^/]+$",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The `next_page_token` value returned from a previous search request, if any."
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "The maximum number of results to return. Note that the number of results returned may be less than this value even if there are more available results. To fetch all results, clients must continue calling this method repeatedly until the response no longer contains a `next_page_token`. If unspecified, defaults to 200 for `GroupView.BASIC` and to 50 for `GroupView.FULL`. Must not be greater than 1000 for `GroupView.BASIC` or 500 for `GroupView.FULL`.",
                  "format": "int32"
                },
                "view": {
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "BASIC",
                    "FULL"
                  ],
                  "type": "string",
                  "location": "query",
                  "description": "The level of detail to be returned. If unspecified, defaults to `View.BASIC`.",
                  "enumDescriptions": [
                    "Default. Should not be used.",
                    "Only basic resource information is returned.",
                    "All resource information is returned."
                  ]
                }
              },
              "description": "Lists the `Membership`s within a `Group`.",
              "response": {
                "$ref": "ListMembershipsResponse"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "checkTransitiveMembership": {
              "parameterOrder": [
                "parent"
              ],
              "id": "cloudidentity.groups.memberships.checkTransitiveMembership",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/memberships:checkTransitiveMembership",
              "flatPath": "v1/groups/{groupsId}/memberships:checkTransitiveMembership",
              "httpMethod": "GET",
              "description": "Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group.",
              "response": {
                "$ref": "CheckTransitiveMembershipResponse"
              },
              "parameters": {
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification. This is a `required` field. Certain groups are uniquely identified by both a 'member_key_id' and a 'member_key_namespace', which requires an additional query input: 'member_key_namespace'. Example query: `member_key_id == 'member_key_id_value'`",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "description": "[Resource name](https://cloud.google.com/apis/design/resource_names) of the group to check the transitive membership in. Format: `groups/{group}`, where `group` is the unique id assigned to the Group to which the Membership belongs to.",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^groups/[^/]+$"
                }
              }
            },
            "create": {
              "description": "Creates a `Membership`.",
              "parameters": {
                "parent": {
                  "location": "path",
                  "description": "Required. The parent `Group` resource under which to create the `Membership`. Must be of the form `groups/{group}`.",
                  "type": "string",
                  "required": true,
                  "pattern": "^groups/[^/]+$"
                }
              },
              "httpMethod": "POST",
              "path": "v1/{+parent}/memberships",
              "request": {
                "$ref": "Membership"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudidentity.groups.memberships.create",
              "flatPath": "v1/groups/{groupsId}/memberships"
            },
            "searchTransitiveMemberships": {
              "description": "Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the group is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.",
              "parameterOrder": [
                "parent"
              ],
              "id": "cloudidentity.groups.memberships.searchTransitiveMemberships",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/memberships:searchTransitiveMemberships",
              "response": {
                "$ref": "SearchTransitiveMembershipsResponse"
              },
              "flatPath": "v1/groups/{groupsId}/memberships:searchTransitiveMemberships",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "The next_page_token value returned from a previous list request, if any."
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "description": "The default page size is 200 (max 1000).",
                  "format": "int32"
                },
                "parent": {
                  "type": "string",
                  "required": true,
                  "pattern": "^groups/[^/]+$",
                  "description": "[Resource name](https://cloud.google.com/apis/design/resource_names) of the group to search transitive memberships in. Format: `groups/{group}`, where `group` is the unique ID assigned to the Group.",
                  "location": "path"
                }
              }
            },
            "modifyMembershipRoles": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/groups/{groupsId}/memberships/{membershipsId}:modifyMembershipRoles",
              "description": "Modifies the `MembershipRole`s of a `Membership`.",
              "request": {
                "$ref": "ModifyMembershipRolesRequest"
              },
              "path": "v1/{+name}:modifyMembershipRoles",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership` whose roles are to be modified. Must be of the form `groups/{group}/memberships/{membership}`.",
                  "required": true,
                  "type": "string",
                  "pattern": "^groups/[^/]+/memberships/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "id": "cloudidentity.groups.memberships.modifyMembershipRoles",
              "response": {
                "$ref": "ModifyMembershipRolesResponse"
              }
            },
            "searchTransitiveGroups": {
              "flatPath": "v1/groups/{groupsId}/memberships:searchTransitiveGroups",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The next_page_token value returned from a previous list request, if any."
                },
                "query": {
                  "type": "string",
                  "description": "Required. A CEL expression that MUST include member specification AND label(s). This is a `required` field. Users can search on label attributes of groups. CONTAINS match ('in') is supported on labels. Identity-mapped groups are uniquely identified by both a `member_key_id` and a `member_key_namespace`, which requires an additional query input: `member_key_namespace`. Example query: `member_key_id == 'member_key_id_value' && in labels` Query may optionally contain equality operators on the parent of the group restricting the search within a particular customer, e.g. `parent == 'customers/{customer_id}'`. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). This filtering is only supported for Admins with groups read permissons on the input customer. Example query: `member_key_id == 'member_key_id_value' && in labels && parent == 'customers/C046psxkn'`",
                  "location": "query"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "The default page size is 200 (max 1000).",
                  "format": "int32",
                  "location": "query"
                },
                "parent": {
                  "type": "string",
                  "required": true,
                  "description": "[Resource name](https://cloud.google.com/apis/design/resource_names) of the group to search transitive memberships in. Format: `groups/{group}`, where `group` is always '-' as this API will search across all groups for a given member.",
                  "pattern": "^groups/[^/]+$",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "SearchTransitiveGroupsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/memberships:searchTransitiveGroups",
              "id": "cloudidentity.groups.memberships.searchTransitiveGroups",
              "httpMethod": "GET",
              "description": "Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups."
            },
            "get": {
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/groups/{groupsId}/memberships/{membershipsId}",
              "parameterOrder": [
                "name"
              ],
              "id": "cloudidentity.groups.memberships.get",
              "description": "Retrieves a `Membership`.",
              "parameters": {
                "name": {
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership` to retrieve. Must be of the form `groups/{group}/memberships/{membership}`.",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^groups/[^/]+/memberships/[^/]+$"
                }
              },
              "response": {
                "$ref": "Membership"
              },
              "path": "v1/{+name}"
            },
            "lookup": {
              "description": "Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.",
              "response": {
                "$ref": "LookupMembershipNameResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/groups/{groupsId}/memberships:lookup",
              "httpMethod": "GET",
              "id": "cloudidentity.groups.memberships.lookup",
              "parameters": {
                "parent": {
                  "pattern": "^groups/[^/]+$",
                  "description": "Required. The parent `Group` resource under which to lookup the `Membership` name. Must be of the form `groups/{group}`.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "memberKey.namespace": {
                  "description": "The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.",
                  "location": "query",
                  "type": "string"
                },
                "memberKey.id": {
                  "description": "The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.",
                  "type": "string",
                  "location": "query"
                }
              },
              "path": "v1/{+parent}/memberships:lookup"
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^groups/[^/]+/memberships/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership` to delete. Must be of the form `groups/{group}/memberships/{membership}`"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/groups/{groupsId}/memberships/{membershipsId}",
              "path": "v1/{+name}",
              "id": "cloudidentity.groups.memberships.delete",
              "description": "Deletes a `Membership`.",
              "response": {
                "$ref": "Operation"
              }
            },
            "getMembershipGraph": {
              "path": "v1/{+parent}/memberships:getMembershipGraph",
              "response": {
                "$ref": "Operation"
              },
              "description": "Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.",
              "parameters": {
                "parent": {
                  "type": "string",
                  "pattern": "^groups/[^/]+$",
                  "description": "Required. [Resource name](https://cloud.google.com/apis/design/resource_names) of the group to search transitive memberships in. Format: `groups/{group}`, where `group` is the unique ID assigned to the Group to which the Membership belongs to. group can be a wildcard collection id \"-\". When a group is specified, the membership graph will be constrained to paths between the member (defined in the query) and the parent. If a wildcard collection is provided, all membership paths connected to the member will be returned.",
                  "location": "path",
                  "required": true
                },
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "Required. A CEL expression that MUST include member specification AND label(s). Certain groups are uniquely identified by both a 'member_key_id' and a 'member_key_namespace', which requires an additional query input: 'member_key_namespace'. Example query: `member_key_id == 'member_key_id_value' && in labels`"
                }
              },
              "httpMethod": "GET",
              "flatPath": "v1/groups/{groupsId}/memberships:getMembershipGraph",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudidentity.groups.memberships.getMembershipGraph"
            },
            "searchDirectGroups": {
              "httpMethod": "GET",
              "description": "Searches direct groups of a member.",
              "parameters": {
                "pageSize": {
                  "description": "The default page size is 200 (max 1000).",
                  "type": "integer",
                  "location": "query",
                  "format": "int32"
                },
                "parent": {
                  "pattern": "^groups/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "[Resource name](https://cloud.google.com/apis/design/resource_names) of the group to search transitive memberships in. Format: groups/{group_id}, where group_id is always '-' as this API will search across all groups for a given member."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The next_page_token value returned from a previous list request, if any"
                },
                "query": {
                  "description": "Required. A CEL expression that MUST include member specification AND label(s). Users can search on label attributes of groups. CONTAINS match ('in') is supported on labels. Identity-mapped groups are uniquely identified by both a `member_key_id` and a `member_key_namespace`, which requires an additional query input: `member_key_namespace`. Example query: `member_key_id == 'member_key_id_value' && 'label_value' in labels`",
                  "location": "query",
                  "type": "string"
                },
                "orderBy": {
                  "location": "query",
                  "type": "string",
                  "description": "The ordering of membership relation for the display name or email in the response. The syntax for this field can be found at https://cloud.google.com/apis/design/design_patterns#sorting_order. Example: Sort by the ascending display name: order_by=\"group_name\" or order_by=\"group_name asc\". Sort by the descending display name: order_by=\"group_name desc\". Sort by the ascending group key: order_by=\"group_key\" or order_by=\"group_key asc\". Sort by the descending group key: order_by=\"group_key desc\"."
                }
              },
              "id": "cloudidentity.groups.memberships.searchDirectGroups",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-identity.groups",
                "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/memberships:searchDirectGroups",
              "flatPath": "v1/groups/{groupsId}/memberships:searchDirectGroups",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "SearchDirectGroupsResponse"
              }
            }
          }
        }
      },
      "methods": {
        "lookup": {
          "description": "Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.",
          "path": "v1/groups:lookup",
          "response": {
            "$ref": "LookupGroupNameResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "cloudidentity.groups.lookup",
          "flatPath": "v1/groups:lookup",
          "parameters": {
            "groupKey.id": {
              "description": "The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.",
              "type": "string",
              "location": "query"
            },
            "groupKey.namespace": {
              "description": "The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.",
              "location": "query",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": []
        },
        "get": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Group"
          },
          "description": "Retrieves a `Group`.",
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group` to retrieve. Must be of the form `groups/{group}`.",
              "location": "path",
              "type": "string",
              "pattern": "^groups/[^/]+$",
              "required": true
            }
          },
          "flatPath": "v1/groups/{groupsId}",
          "id": "cloudidentity.groups.get",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v1/{+name}"
        },
        "getSecuritySettings": {
          "parameters": {
            "readMask": {
              "type": "string",
              "location": "query",
              "description": "Field-level read mask of which fields to return. \"*\" returns all fields. If not specified, all fields will be returned. May only contain the following field: `member_restriction`.",
              "format": "google-fieldmask"
            },
            "name": {
              "required": true,
              "type": "string",
              "pattern": "^groups/[^/]+/securitySettings$",
              "location": "path",
              "description": "Required. The security settings to retrieve. Format: `groups/{group_id}/securitySettings`"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/groups/{groupsId}/securitySettings",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "path": "v1/{+name}",
          "response": {
            "$ref": "SecuritySettings"
          },
          "description": "Get Security Settings",
          "id": "cloudidentity.groups.getSecuritySettings"
        },
        "patch": {
          "id": "cloudidentity.groups.patch",
          "parameters": {
            "updateMask": {
              "format": "google-fieldmask",
              "description": "Required. The names of fields to update. May only contain the following field names: `display_name`, `description`, `labels`.",
              "type": "string",
              "location": "query"
            },
            "name": {
              "pattern": "^groups/[^/]+$",
              "description": "Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group}`.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "PATCH",
          "description": "Updates a `Group`.",
          "request": {
            "$ref": "Group"
          },
          "path": "v1/{+name}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Operation"
          },
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/groups/{groupsId}"
        },
        "updateSecuritySettings": {
          "parameters": {
            "updateMask": {
              "description": "Required. The fully-qualified names of fields to update. May only contain the following field: `member_restriction.query`.",
              "format": "google-fieldmask",
              "location": "query",
              "type": "string"
            },
            "name": {
              "required": true,
              "description": "Output only. The resource name of the security settings. Shall be of the form `groups/{group_id}/securitySettings`.",
              "pattern": "^groups/[^/]+/securitySettings$",
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "PATCH",
          "path": "v1/{+name}",
          "flatPath": "v1/groups/{groupsId}/securitySettings",
          "description": "Update Security Settings",
          "request": {
            "$ref": "SecuritySettings"
          },
          "response": {
            "$ref": "Operation"
          },
          "id": "cloudidentity.groups.updateSecuritySettings",
          "parameterOrder": [
            "name"
          ]
        },
        "delete": {
          "parameters": {
            "name": {
              "required": true,
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group` to retrieve. Must be of the form `groups/{group}`.",
              "location": "path",
              "type": "string",
              "pattern": "^groups/[^/]+$"
            }
          },
          "description": "Deletes a `Group`.",
          "flatPath": "v1/groups/{groupsId}",
          "httpMethod": "DELETE",
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "cloudidentity.groups.delete",
          "parameterOrder": [
            "name"
          ],
          "path": "v1/{+name}"
        },
        "list": {
          "description": "Lists the `Group` resources under a customer or namespace.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "ListGroupsResponse"
          },
          "parameterOrder": [],
          "path": "v1/groups",
          "id": "cloudidentity.groups.list",
          "parameters": {
            "parent": {
              "location": "query",
              "description": "Required. The parent resource under which to list all `Group` resources. Must be of the form `identitysources/{identity_source}` for external- identity-mapped groups or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)",
              "type": "string"
            },
            "view": {
              "enumDescriptions": [
                "Default. Should not be used.",
                "Only basic resource information is returned.",
                "All resource information is returned."
              ],
              "location": "query",
              "enum": [
                "VIEW_UNSPECIFIED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "description": "The level of detail to be returned. If unspecified, defaults to `View.BASIC`."
            },
            "pageSize": {
              "description": "The maximum number of results to return. Note that the number of results returned may be less than this value even if there are more available results. To fetch all results, clients must continue calling this method repeatedly until the response no longer contains a `next_page_token`. If unspecified, defaults to 200 for `View.BASIC` and to 50 for `View.FULL`. Must not be greater than 1000 for `View.BASIC` or 500 for `View.FULL`.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The `next_page_token` value returned from a previous list request, if any."
            }
          },
          "flatPath": "v1/groups"
        },
        "create": {
          "flatPath": "v1/groups",
          "path": "v1/groups",
          "parameters": {
            "initialGroupConfig": {
              "description": "Optional. The initial configuration option for the `Group`.",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Default. Should not be used.",
                "The end user making the request will be added as the initial owner of the `Group`.",
                "An empty group is created without any initial owners. This can only be used by admins of the domain."
              ],
              "enum": [
                "INITIAL_GROUP_CONFIG_UNSPECIFIED",
                "WITH_INITIAL_OWNER",
                "EMPTY"
              ]
            }
          },
          "id": "cloudidentity.groups.create",
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Operation"
          },
          "description": "Creates a Group."
        },
        "search": {
          "path": "v1/groups:search",
          "id": "cloudidentity.groups.search",
          "flatPath": "v1/groups:search",
          "httpMethod": "GET",
          "parameterOrder": [],
          "description": "Searches for `Group` resources matching a specified query.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-identity.groups",
            "https://www.googleapis.com/auth/cloud-identity.groups.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "pageToken": {
              "description": "The `next_page_token` value returned from a previous search request, if any.",
              "type": "string",
              "location": "query"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Required. The search query. * Must be specified in [Common Expression Language](https://opensource.google/projects/cel). * Must contain equality operators on the parent, e.g. `parent == 'customers/{customer_id}'`. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793) * Can contain optional inclusion operators on `labels` such as `'cloudidentity.googleapis.com/groups.discussion_forum' in labels`). * Can contain an optional equality operator on `domain_name`. e.g. `domain_name == 'abc.com'` * Can contain optional `startsWith/contains/equality` operators on `group_key`, e.g. `group_key.startsWith('dev')`, `group_key.contains('dev'), group_key == 'dev@abc.com'` * Can contain optional `startsWith/contains/equality` operators on `display_name`, such as `display_name.startsWith('dev')` , `display_name.contains('dev')`, `display_name == 'dev'`"
            },
            "view": {
              "enum": [
                "VIEW_UNSPECIFIED",
                "BASIC",
                "FULL"
              ],
              "description": "The level of detail to be returned. If unspecified, defaults to `View.BASIC`.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "Default. Should not be used.",
                "Only basic resource information is returned.",
                "All resource information is returned."
              ]
            },
            "pageSize": {
              "type": "integer",
              "location": "query",
              "format": "int32",
              "description": "The maximum number of results to return. Note that the number of results returned may be less than this value even if there are more available results. To fetch all results, clients must continue calling this method repeatedly until the response no longer contains a `next_page_token`. If unspecified, defaults to 200 for `GroupView.BASIC` and 50 for `GroupView.FULL`. Must not be greater than 1000 for `GroupView.BASIC` or 500 for `GroupView.FULL`."
            }
          },
          "response": {
            "$ref": "SearchGroupsResponse"
          }
        }
      }
    },
    "inboundSamlSsoProfiles": {
      "methods": {
        "delete": {
          "id": "cloudidentity.inboundSamlSsoProfiles.delete",
          "parameterOrder": [
            "name"
          ],
          "path": "v1/{+name}",
          "response": {
            "$ref": "Operation"
          },
          "flatPath": "v1/inboundSamlSsoProfiles/{inboundSamlSsoProfilesId}",
          "description": "Deletes an InboundSamlSsoProfile.",
          "parameters": {
            "name": {
              "required": true,
              "location": "path",
              "pattern": "^inboundSamlSsoProfiles/[^/]+$",
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the InboundSamlSsoProfile to delete. Format: `inboundSamlSsoProfiles/{sso_profile_id}`",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "create": {
          "parameters": {},
          "httpMethod": "POST",
          "response": {
            "$ref": "Operation"
          },
          "description": "Creates an InboundSamlSsoProfile for a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v1/inboundSamlSsoProfiles",
          "flatPath": "v1/inboundSamlSsoProfiles",
          "parameterOrder": [],
          "request": {
            "$ref": "InboundSamlSsoProfile"
          },
          "id": "cloudidentity.inboundSamlSsoProfiles.create"
        },
        "patch": {
          "flatPath": "v1/inboundSamlSsoProfiles/{inboundSamlSsoProfilesId}",
          "parameterOrder": [
            "name"
          ],
          "path": "v1/{+name}",
          "response": {
            "$ref": "Operation"
          },
          "id": "cloudidentity.inboundSamlSsoProfiles.patch",
          "httpMethod": "PATCH",
          "description": "Updates an InboundSamlSsoProfile.",
          "parameters": {
            "name": {
              "location": "path",
              "pattern": "^inboundSamlSsoProfiles/[^/]+$",
              "required": true,
              "description": "Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the SAML SSO profile.",
              "type": "string"
            },
            "updateMask": {
              "format": "google-fieldmask",
              "description": "Required. The list of fields to be updated.",
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "InboundSamlSsoProfile"
          }
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^inboundSamlSsoProfiles/[^/]+$",
              "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the InboundSamlSsoProfile to get. Format: `inboundSamlSsoProfiles/{sso_profile_id}`"
            }
          },
          "path": "v1/{+name}",
          "response": {
            "$ref": "InboundSamlSsoProfile"
          },
          "description": "Gets an InboundSamlSsoProfile.",
          "flatPath": "v1/inboundSamlSsoProfiles/{inboundSamlSsoProfilesId}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "cloudidentity.inboundSamlSsoProfiles.get",
          "parameterOrder": [
            "name"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Lists InboundSamlSsoProfiles for a customer.",
          "parameters": {
            "pageToken": {
              "description": "A page token, received from a previous `ListInboundSamlSsoProfiles` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListInboundSamlSsoProfiles` must match the call that provided the page token.",
              "location": "query",
              "type": "string"
            },
            "pageSize": {
              "format": "int32",
              "description": "The maximum number of InboundSamlSsoProfiles to return. The service may return fewer than this value. If omitted (or defaulted to zero) the server will use a sensible default. This default may change over time. The maximum allowed value is 100. Requests with page_size greater than that will be silently interpreted as having this maximum value.",
              "location": "query",
              "type": "integer"
            },
            "filter": {
              "type": "string",
              "description": "A [Common Expression Language](https://github.com/google/cel-spec) expression to filter the results. The only supported filter is filtering by customer. For example: `customer==\"customers/C0123abc\"`. Omitting the filter or specifying a filter of `customer==\"customers/my_customer\"` will return the profiles for the customer that the caller (authenticated user) belongs to.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "ListInboundSamlSsoProfilesResponse"
          },
          "id": "cloudidentity.inboundSamlSsoProfiles.list",
          "path": "v1/inboundSamlSsoProfiles",
          "flatPath": "v1/inboundSamlSsoProfiles",
          "parameterOrder": []
        }
      },
      "resources": {
        "idpCredentials": {
          "methods": {
            "delete": {
              "id": "cloudidentity.inboundSamlSsoProfiles.idpCredentials.delete",
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^inboundSamlSsoProfiles/[^/]+/idpCredentials/[^/]+$",
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the IdpCredential to delete. Format: `inboundSamlSsoProfiles/{sso_profile_id}/idpCredentials/{idp_credential_id}`",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes an IdpCredential.",
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/inboundSamlSsoProfiles/{inboundSamlSsoProfilesId}/idpCredentials/{idpCredentialsId}",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Operation"
              }
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "flatPath": "v1/inboundSamlSsoProfiles/{inboundSamlSsoProfilesId}/idpCredentials/{idpCredentialsId}",
              "id": "cloudidentity.inboundSamlSsoProfiles.idpCredentials.get",
              "httpMethod": "GET",
              "response": {
                "$ref": "IdpCredential"
              },
              "parameters": {
                "name": {
                  "pattern": "^inboundSamlSsoProfiles/[^/]+/idpCredentials/[^/]+$",
                  "description": "Required. The [resource name](https://cloud.google.com/apis/design/resource_names) of the IdpCredential to retrieve. Format: `inboundSamlSsoProfiles/{sso_profile_id}/idpCredentials/{idp_credential_id}`",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Gets an IdpCredential."
            },
            "add": {
              "description": "Adds an IdpCredential. Up to 2 credentials are allowed.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "AddIdpCredentialRequest"
              },
              "parameterOrder": [
                "parent"
              ],
              "id": "cloudidentity.inboundSamlSsoProfiles.idpCredentials.add",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "parent": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "pattern": "^inboundSamlSsoProfiles/[^/]+$",
                  "description": "Required. The InboundSamlSsoProfile that owns the IdpCredential. Format: `inboundSamlSsoProfiles/{sso_profile_id}`"
                }
              },
              "httpMethod": "POST",
              "flatPath": "v1/inboundSamlSsoProfiles/{inboundSamlSsoProfilesId}/idpCredentials:add",
              "path": "v1/{+parent}/idpCredentials:add"
            },
            "list": {
              "path": "v1/{+parent}/idpCredentials",
              "response": {
                "$ref": "ListIdpCredentialsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Returns a list of IdpCredentials in an InboundSamlSsoProfile.",
              "parameters": {
                "pageToken": {
                  "description": "A page token, received from a previous `ListIdpCredentials` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListIdpCredentials` must match the call that provided the page token.",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. The parent, which owns this collection of `IdpCredential`s. Format: `inboundSamlSsoProfiles/{sso_profile_id}`",
                  "pattern": "^inboundSamlSsoProfiles/[^/]+$"
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "description": "The maximum number of `IdpCredential`s to return. The service may return fewer than this value.",
                  "type": "integer"
                }
              },
              "flatPath": "v1/inboundSamlSsoProfiles/{inboundSamlSsoProfilesId}/idpCredentials",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudidentity.inboundSamlSsoProfiles.idpCredentials.list"
            }
          }
        }
      }
    },
    "customers": {
      "resources": {
        "userinvitations": {
          "methods": {
            "list": {
              "path": "v1/{+parent}/userinvitations",
              "response": {
                "$ref": "ListUserInvitationsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Retrieves a list of UserInvitation resources. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.",
              "parameters": {
                "orderBy": {
                  "description": "Optional. The sort order of the list results. You can sort the results in descending order based on either email or last update timestamp but not both, using `order_by=\"email desc\"`. Currently, sorting is supported for `update_time asc`, `update_time desc`, `email asc`, and `email desc`. If not specified, results will be returned based on `email asc` order.",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "pattern": "^customers/[^/]+$",
                  "description": "Required. The customer ID of the Google Workspace or Cloud Identity account the UserInvitation resources are associated with.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "filter": {
                  "description": "Optional. A query string for filtering `UserInvitation` results by their current state, in the format: `\"state=='invited'\"`.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The maximum number of UserInvitation resources to return. If unspecified, at most 100 resources will be returned. The maximum value is 200; values above 200 will be set to 200."
                },
                "pageToken": {
                  "location": "query",
                  "description": "Optional. A page token, received from a previous `ListUserInvitations` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBooks` must match the call that provided the page token.",
                  "type": "string"
                }
              },
              "flatPath": "v1/customers/{customersId}/userinvitations",
              "id": "cloudidentity.customers.userinvitations.list",
              "httpMethod": "GET"
            },
            "send": {
              "path": "v1/{+name}:send",
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "description": "Sends a UserInvitation to email. If the `UserInvitation` does not exist for this request and it is a valid request, the request creates a `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour delay where newly-created consumer accounts will not appear in the results. You can still send a `UserInvitation` to those accounts if you know the unmanaged email address and IsInvitableUser==True.",
              "id": "cloudidentity.customers.userinvitations.send",
              "request": {
                "$ref": "SendUserInvitationRequest"
              },
              "parameters": {
                "name": {
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`",
                  "location": "path",
                  "type": "string",
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "required": true
                }
              },
              "flatPath": "v1/customers/{customersId}/userinvitations/{userinvitationsId}:send",
              "response": {
                "$ref": "Operation"
              }
            },
            "isInvitableUser": {
              "parameterOrder": [
                "name"
              ],
              "id": "cloudidentity.customers.userinvitations.isInvitableUser",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "required": true,
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`"
                }
              },
              "response": {
                "$ref": "IsInvitableUserResponse"
              },
              "description": "Verifies whether a user account is eligible to receive a UserInvitation (is an unmanaged account). Eligibility is based on the following criteria: * the email address is a consumer account and it's the primary email address of the account, and * the domain of the email address matches an existing verified Google Workspace or Cloud Identity domain If both conditions are met, the user is eligible. **Note:** This method is not supported for Workspace Essentials customers.",
              "path": "v1/{+name}:isInvitableUser",
              "flatPath": "v1/customers/{customersId}/userinvitations/{userinvitationsId}:isInvitableUser"
            },
            "get": {
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`"
                }
              },
              "id": "cloudidentity.customers.userinvitations.get",
              "response": {
                "$ref": "UserInvitation"
              },
              "description": "Retrieves a UserInvitation resource. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.",
              "httpMethod": "GET",
              "flatPath": "v1/customers/{customersId}/userinvitations/{userinvitationsId}"
            },
            "cancel": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "name": {
                  "description": "Required. `UserInvitation` name in the format `customers/{customer}/userinvitations/{user_email_address}`",
                  "required": true,
                  "pattern": "^customers/[^/]+/userinvitations/[^/]+$",
                  "type": "string",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "CancelUserInvitationRequest"
              },
              "description": "Cancels a UserInvitation that was already sent.",
              "httpMethod": "POST",
              "path": "v1/{+name}:cancel",
              "flatPath": "v1/customers/{customersId}/userinvitations/{userinvitationsId}:cancel",
              "id": "cloudidentity.customers.userinvitations.cancel"
            }
          }
        }
      }
    }
  },
  "revision": "20230530",
  "documentationLink": "https://cloud.google.com/identity/"
}

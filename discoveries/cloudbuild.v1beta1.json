{
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "title": "Cloud Build API",
  "kind": "discovery#restDescription",
  "revision": "20221110",
  "name": "cloudbuild",
  "basePath": "",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "parameters": {
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "canonicalName": "Cloud Build",
  "ownerName": "Google",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "cancel": {
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "path": "v1beta1/{+name}:cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  }
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "path": "v1beta1/{+name}",
                  "id": "cloudbuild.projects.locations.operations.get",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "The name of the operation resource.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "workerPools": {
              "methods": {
                "delete": {
                  "path": "v1beta1/{+name}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{workerPool}/workerPools/{workerPool}`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$"
                    },
                    "etag": {
                      "description": "Optional. If this is provided, it must match the server's etag on the workerpool for the request to be processed.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "cloudbuild.projects.locations.workerPools.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "description": "Deletes a `WorkerPool`. NOTE: As of now, this method returns an `Operation` that is always complete.",
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "WorkerPool"
                  },
                  "httpMethod": "GET",
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns details of a `WorkerPool`.",
                  "id": "cloudbuild.projects.locations.workerPools.get"
                },
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/location`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.workerPools.list",
                  "description": "Lists `WorkerPool`s in the given project.",
                  "response": {
                    "$ref": "ListWorkerPoolsResponse"
                  },
                  "httpMethod": "GET",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "path": "v1beta1/{+parent}/workerPools"
                },
                "create": {
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`.",
                      "required": true
                    },
                    "workerPoolId": {
                      "location": "query",
                      "description": "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/.",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "httpMethod": "POST",
                  "path": "v1beta1/{+parent}/workerPools",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools",
                  "description": "Creates a `WorkerPool` to run the builds, and returns the new worker pool. NOTE: As of now, this method returns an `Operation` that is always complete.",
                  "id": "cloudbuild.projects.locations.workerPools.create",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
                  "parameters": {
                    "name": {
                      "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
                      "location": "path"
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "description": "A mask specifying which fields in `WorkerPool` to update.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1beta1/{+name}",
                  "request": {
                    "$ref": "WorkerPool"
                  },
                  "description": "Updates a `WorkerPool`. NOTE: As of now, this method returns an `Operation` that is always complete.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "PATCH",
                  "id": "cloudbuild.projects.locations.workerPools.patch"
                }
              }
            }
          }
        }
      }
    }
  },
  "servicePath": "",
  "discoveryVersion": "v1",
  "version": "v1beta1",
  "ownerDomain": "google.com",
  "batchPath": "batch",
  "version_module": true,
  "id": "cloudbuild:v1beta1",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "schemas": {
    "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata": {
      "properties": {
        "config": {
          "description": "The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        }
      },
      "description": "Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.",
      "type": "object",
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata"
    },
    "NotifierConfig": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "NotifierSpec",
          "description": "The actual configuration for this notifier."
        },
        "kind": {
          "type": "string",
          "description": "The type of notifier to use (e.g. SMTPNotifier)."
        },
        "metadata": {
          "description": "Metadata for referring to/handling/deploying this notifier.",
          "$ref": "NotifierMetadata"
        },
        "apiVersion": {
          "description": "The API version of this configuration format.",
          "type": "string"
        }
      },
      "id": "NotifierConfig",
      "description": "NotifierConfig is the top-level configuration message."
    },
    "RunWorkflowCustomOperationMetadata": {
      "description": "Represents the custom metadata of the RunWorkflow long-running operation.",
      "type": "object",
      "properties": {
        "requestedCancellation": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "pipelineRunId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ID of the pipeline run created by RunWorkflow."
        },
        "apiVersion": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. API version used to start the operation."
        },
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time the operation finished running."
        }
      },
      "id": "RunWorkflowCustomOperationMetadata"
    },
    "BatchCreateGitLabConnectedRepositoriesResponse": {
      "properties": {
        "gitlabConnectedRepositories": {
          "description": "The GitLab connected repository requests' responses.",
          "type": "array",
          "items": {
            "$ref": "GitLabConnectedRepository"
          }
        }
      },
      "type": "object",
      "description": "Response of BatchCreateGitLabConnectedRepositories RPC method.",
      "id": "BatchCreateGitLabConnectedRepositoriesResponse"
    },
    "ArtifactResult": {
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "The file hash of the artifact.",
          "items": {
            "$ref": "FileHashes"
          },
          "type": "array"
        },
        "location": {
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.",
          "type": "string"
        }
      },
      "id": "ArtifactResult"
    },
    "BuildApproval": {
      "type": "object",
      "id": "BuildApproval",
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "properties": {
        "config": {
          "$ref": "ApprovalConfig",
          "description": "Output only. Configuration for manual approval of this build.",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "description": "Output only. The state of this build's approval.",
          "readOnly": true
        },
        "result": {
          "$ref": "ApprovalResult",
          "description": "Output only. Result of manual approval for this Build.",
          "readOnly": true
        }
      }
    },
    "BitbucketServerRepositoryId": {
      "properties": {
        "webhookId": {
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "repoSlug": {
          "type": "string",
          "description": "Required. Identifier for the repository."
        },
        "projectKey": {
          "description": "Required. Identifier for the project storing the repository.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.",
      "id": "BitbucketServerRepositoryId"
    },
    "NotifierSpec": {
      "properties": {
        "secrets": {
          "description": "Configurations for secret resources used by this particular notifier.",
          "items": {
            "$ref": "NotifierSecret"
          },
          "type": "array"
        },
        "notification": {
          "$ref": "Notification",
          "description": "The configuration of this particular notifier."
        }
      },
      "description": "NotifierSpec is the configuration container for notifications.",
      "type": "object",
      "id": "NotifierSpec"
    },
    "SMTPDelivery": {
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification.",
      "properties": {
        "password": {
          "$ref": "NotifierSecretRef",
          "description": "The SMTP sender's password."
        },
        "senderAddress": {
          "type": "string",
          "description": "This is the SMTP account/email that is used to send the message."
        },
        "recipientAddresses": {
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "port": {
          "type": "string",
          "description": "The SMTP port of the server."
        },
        "server": {
          "description": "The address of the SMTP server.",
          "type": "string"
        },
        "fromAddress": {
          "description": "This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender.",
          "type": "string"
        }
      },
      "id": "SMTPDelivery",
      "type": "object"
    },
    "PythonPackage": {
      "description": "Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file."
        },
        "repository": {
          "description": "Artifact Registry repository, in the form \"https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY\" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.",
          "type": "string"
        }
      },
      "id": "PythonPackage",
      "type": "object"
    },
    "Build": {
      "id": "Build",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "properties": {
        "timeout": {
          "format": "google-duration",
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service."
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "$ref": "SourceProvenance",
          "readOnly": true
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "readOnly": true,
          "type": "string"
        },
        "failureInfo": {
          "readOnly": true,
          "$ref": "FailureInfo",
          "description": "Output only. Contains information about the build when status=FAILURE."
        },
        "tags": {
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "results": {
          "readOnly": true,
          "description": "Output only. Results of the build.",
          "$ref": "Results"
        },
        "images": {
          "type": "array",
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "$ref": "BuildOptions",
          "description": "Special options for this build."
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`."
        },
        "warnings": {
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "items": {
            "$ref": "Warning"
          },
          "type": "array",
          "readOnly": true
        },
        "logUrl": {
          "type": "string",
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "readOnly": true
        },
        "secrets": {
          "type": "array",
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
          "items": {
            "$ref": "Secret"
          }
        },
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ",
          "type": "string"
        },
        "status": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Status of the build.",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the build was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "projectId": {
          "type": "string",
          "description": "Output only. ID of the project.",
          "readOnly": true
        },
        "statusDetail": {
          "readOnly": true,
          "description": "Output only. Customer-readable message about the current status.",
          "type": "string"
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "finishTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution."
        },
        "artifacts": {
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
          "$ref": "Artifacts"
        },
        "timing": {
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "TimeSpan"
          }
        },
        "approval": {
          "readOnly": true,
          "$ref": "BuildApproval",
          "description": "Output only. Describes this build's approval configuration, status, and result."
        },
        "substitutions": {
          "description": "Substitutions data for `Build` resource.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "availableSecrets": {
          "$ref": "Secrets",
          "description": "Secrets and secret environment variables."
        },
        "queueTtl": {
          "format": "google-duration",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "type": "string"
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "items": {
            "$ref": "BuildStep"
          },
          "type": "array"
        },
        "source": {
          "$ref": "Source",
          "description": "The location of the source files to build."
        }
      },
      "type": "object"
    },
    "BatchCreateRepositoriesResponse": {
      "id": "BatchCreateRepositoriesResponse",
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "Repository"
          },
          "description": "Repository resources created."
        }
      },
      "description": "Message for response of creating repositories in batch."
    },
    "ApprovalResult": {
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "properties": {
        "approverAccount": {
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.",
          "readOnly": true,
          "type": "string"
        },
        "comment": {
          "type": "string",
          "description": "Optional. An optional comment for this manual approval result."
        },
        "approvalTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time when the approval decision was made.",
          "type": "string"
        },
        "decision": {
          "description": "Required. The decision of this manual approval.",
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ]
        },
        "url": {
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.",
          "type": "string"
        }
      },
      "id": "ApprovalResult",
      "type": "object"
    },
    "SlackDelivery": {
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks.",
      "id": "SlackDelivery",
      "properties": {
        "webhookUri": {
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel.",
          "$ref": "NotifierSecretRef"
        }
      },
      "type": "object"
    },
    "BuildOperationMetadata": {
      "id": "BuildOperationMetadata",
      "properties": {
        "build": {
          "$ref": "Build",
          "description": "The build that the operation is tracking."
        }
      },
      "type": "object",
      "description": "Metadata for build operations."
    },
    "UpdateBitbucketServerConfigOperationMetadata": {
      "id": "UpdateBitbucketServerConfigOperationMetadata",
      "properties": {
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        }
      },
      "type": "object",
      "description": "Metadata for `UpdateBitbucketServerConfig` operation."
    },
    "OperationMetadata": {
      "type": "object",
      "description": "Represents the metadata of the long-running operation.",
      "id": "OperationMetadata",
      "properties": {
        "verb": {
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "endTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time the operation finished running."
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string",
          "readOnly": true
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "cancelRequested": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        }
      }
    },
    "CreateBitbucketServerConfigOperationMetadata": {
      "type": "object",
      "id": "CreateBitbucketServerConfigOperationMetadata",
      "properties": {
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "description": "Time the operation was created.",
          "format": "google-datetime"
        }
      },
      "description": "Metadata for `CreateBitbucketServerConfig` operation."
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "type": "object"
    },
    "GoogleDevtoolsCloudbuildV2OperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time the operation finished running.",
          "format": "google-datetime"
        },
        "verb": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation."
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time the operation was created.",
          "format": "google-datetime"
        },
        "statusMessage": {
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true
        },
        "requestedCancellation": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "readOnly": true,
          "description": "Output only. API version used to start the operation.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsCloudbuildV2OperationMetadata"
    },
    "DeleteWorkerPoolOperationMetadata": {
      "description": "Metadata for the `DeleteWorkerPool` operation.",
      "id": "DeleteWorkerPoolOperationMetadata",
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        }
      }
    },
    "CreateGitHubEnterpriseConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was completed."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        }
      },
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation.",
      "id": "CreateGitHubEnterpriseConfigOperationMetadata"
    },
    "GitLabRepositoryId": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. Identifier for the repository. example: \"namespace/project-slug\", namespace is usually the username or group ID"
        },
        "webhookId": {
          "type": "integer",
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "readOnly": true,
          "format": "int32"
        }
      },
      "type": "object",
      "description": "GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise",
      "id": "GitLabRepositoryId"
    },
    "MavenArtifact": {
      "type": "object",
      "description": "A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.",
      "id": "MavenArtifact",
      "properties": {
        "groupId": {
          "type": "string",
          "description": "Maven `groupId` value used when uploading the artifact to Artifact Registry."
        },
        "version": {
          "type": "string",
          "description": "Maven `version` value used when uploading the artifact to Artifact Registry."
        },
        "artifactId": {
          "description": "Maven `artifactId` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar."
        },
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY\" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix."
        }
      }
    },
    "Results": {
      "description": "Artifacts created by the build pipeline.",
      "id": "Results",
      "type": "object",
      "properties": {
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage."
        },
        "pythonPackages": {
          "type": "array",
          "items": {
            "$ref": "UploadedPythonPackage"
          },
          "description": "Python artifacts uploaded to Artifact Registry at the end of the build."
        },
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "numArtifacts": {
          "description": "Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "type": "string",
          "format": "int64"
        },
        "mavenArtifacts": {
          "items": {
            "$ref": "UploadedMavenArtifact"
          },
          "type": "array",
          "description": "Maven artifacts uploaded to Artifact Registry at the end of the build."
        },
        "images": {
          "items": {
            "$ref": "BuiltImage"
          },
          "description": "Container images that were built as a part of the build.",
          "type": "array"
        },
        "buildStepOutputs": {
          "type": "array",
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "items": {
            "format": "byte",
            "type": "string"
          }
        },
        "artifactTiming": {
          "$ref": "TimeSpan",
          "description": "Time to push all non-container artifacts to Cloud Storage."
        }
      }
    },
    "StorageSource": {
      "id": "StorageSource",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "properties": {
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        },
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build."
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "type": "object"
    },
    "UpdateWorkerPoolOperationMetadata": {
      "id": "UpdateWorkerPoolOperationMetadata",
      "type": "object",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        }
      },
      "description": "Metadata for the `UpdateWorkerPool` operation."
    },
    "BitbucketServerConnectedRepository": {
      "id": "BitbucketServerConnectedRepository",
      "type": "object",
      "description": "/ BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.",
      "properties": {
        "status": {
          "$ref": "Status",
          "readOnly": true,
          "description": "Output only. The status of the repo connection request."
        },
        "parent": {
          "type": "string",
          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`"
        },
        "repo": {
          "$ref": "BitbucketServerRepositoryId",
          "description": "The Bitbucket Server repositories to connect."
        }
      }
    },
    "SourceProvenance": {
      "id": "SourceProvenance",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "properties": {
        "fileHashes": {
          "readOnly": true,
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "type": "object",
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file."
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "resolvedStorageSourceManifest": {
          "$ref": "StorageSourceManifest",
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview."
        },
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        }
      },
      "type": "object"
    },
    "FailureInfo": {
      "properties": {
        "detail": {
          "description": "Explains the failure issue in more detail using hard-coded text.",
          "type": "string"
        },
        "type": {
          "description": "The name of the failure.",
          "type": "string",
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ]
        }
      },
      "type": "object",
      "description": "A fatal problem encountered during the execution of the build.",
      "id": "FailureInfo"
    },
    "BatchCreateGitLabConnectedRepositoriesResponseMetadata": {
      "type": "object",
      "description": "Metadata for `BatchCreateGitLabConnectedRepositories` operation.",
      "properties": {
        "config": {
          "type": "string",
          "description": "The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        }
      },
      "id": "BatchCreateGitLabConnectedRepositoriesResponseMetadata"
    },
    "PoolOption": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}"
        }
      },
      "id": "PoolOption",
      "type": "object",
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
    },
    "UploadedMavenArtifact": {
      "id": "UploadedMavenArtifact",
      "type": "object",
      "description": "A Maven artifact uploaded using the MavenArtifact directive.",
      "properties": {
        "fileHashes": {
          "description": "Hash types and values of the Maven Artifact.",
          "$ref": "FileHashes"
        },
        "uri": {
          "type": "string",
          "description": "URI of the uploaded artifact."
        },
        "pushTiming": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "readOnly": true
        }
      }
    },
    "ApprovalConfig": {
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "type": "object",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "id": "ApprovalConfig"
    },
    "DeleteGitLabConfigOperationMetadata": {
      "description": "Metadata for `DeleteGitLabConfig` operation.",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        },
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        }
      },
      "id": "DeleteGitLabConfigOperationMetadata",
      "type": "object"
    },
    "BuildOptions": {
      "properties": {
        "requestedVerifyOption": {
          "type": "string",
          "description": "Requested verifiability options.",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "enumDescriptions": [
            "Not a verifiable build (the default).",
            "Build must be verified."
          ]
        },
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.",
          "type": "string",
          "format": "int64"
        },
        "sourceProvenanceHash": {
          "description": "Requested hash for SourceProvenance.",
          "type": "array",
          "items": {
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ],
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ],
            "type": "string"
          }
        },
        "logStreamingOption": {
          "type": "string",
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "secretEnv": {
          "type": "array",
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "logging": {
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).",
            "Turn off all logging. No build logs will be captured."
          ],
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "type": "string"
        },
        "workerPool": {
          "type": "string",
          "description": "This field deprecated; please use `pool.name` instead."
        },
        "machineType": {
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ],
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ],
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string"
        },
        "pool": {
          "$ref": "PoolOption",
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
        },
        "substitutionOption": {
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "type": "string"
        },
        "env": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        }
      },
      "type": "object",
      "id": "BuildOptions",
      "description": "Optional arguments to enable specific features of builds."
    },
    "Volume": {
      "id": "Volume",
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        },
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        }
      }
    },
    "UpdateGitHubEnterpriseConfigOperationMetadata": {
      "properties": {
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        }
      },
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "id": "UpdateGitHubEnterpriseConfigOperationMetadata",
      "type": "object"
    },
    "Hash": {
      "id": "Hash",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "description": "The type of hash that was performed.",
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ]
        },
        "value": {
          "description": "The hash value.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Container message for hash values.",
      "type": "object"
    },
    "DeleteGitHubEnterpriseConfigOperationMetadata": {
      "properties": {
        "completeTime": {
          "format": "google-datetime",
          "description": "Time the operation was completed.",
          "type": "string"
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time the operation was created."
        }
      },
      "id": "DeleteGitHubEnterpriseConfigOperationMetadata",
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation.",
      "type": "object"
    },
    "NetworkConfig": {
      "id": "NetworkConfig",
      "description": "Network describes the network configuration for a `WorkerPool`.",
      "type": "object",
      "properties": {
        "peeredNetwork": {
          "description": "Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/cloud-build/docs/custom-workers/set-up-custom-worker-pool-environment#understanding_the_network_configuration_options)",
          "type": "string"
        }
      }
    },
    "WorkerConfig": {
      "description": "Defines the configuration to be used for creating workers in the pool.",
      "properties": {
        "diskSizeGb": {
          "format": "int64",
          "description": "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/cloud-build/docs/custom-workers/worker-pool-config-file). Specify a value of up to 1000. If `0` is specified, Cloud Build will use a standard disk size.",
          "type": "string"
        },
        "machineType": {
          "type": "string",
          "description": "Machine type of a worker, such as `n1-standard-1`. See [Worker pool config file](https://cloud.google.com/cloud-build/docs/custom-workers/worker-pool-config-file). If left blank, Cloud Build will use `n1-standard-1`."
        },
        "noExternalIp": {
          "type": "boolean",
          "description": "If true, workers are created without any public address, which prevents network egress to public IPs."
        }
      },
      "id": "WorkerConfig",
      "type": "object"
    },
    "NotifierMetadata": {
      "type": "object",
      "id": "NotifierMetadata",
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\"."
        },
        "notifier": {
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"/:\". For example: \"gcr.io/my-project/notifiers/smtp:1.2.34\".",
          "type": "string"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "ArtifactObjects": {
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "properties": {
        "timing": {
          "readOnly": true,
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing all artifact objects."
        },
        "location": {
          "type": "string",
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix."
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Path globs used to match files in the build's workspace."
        }
      },
      "type": "object",
      "id": "ArtifactObjects"
    },
    "CreateWorkerPoolOperationMetadata": {
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        }
      },
      "id": "CreateWorkerPoolOperationMetadata",
      "type": "object",
      "description": "Metadata for the `CreateWorkerPool` operation."
    },
    "Artifacts": {
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "mavenArtifacts": {
          "type": "array",
          "items": {
            "$ref": "MavenArtifact"
          },
          "description": "A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE."
        },
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pythonPackages": {
          "items": {
            "$ref": "PythonPackage"
          },
          "description": "A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "Artifacts"
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "BuiltImage": {
      "id": "BuiltImage",
      "properties": {
        "name": {
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`.",
          "type": "string"
        },
        "pushTiming": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified image.",
          "readOnly": true
        },
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        }
      },
      "type": "object",
      "description": "An image built by the pipeline."
    },
    "DeleteBitbucketServerConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        }
      },
      "id": "DeleteBitbucketServerConfigOperationMetadata",
      "description": "Metadata for `DeleteBitbucketServerConfig` operation."
    },
    "RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "properties": {
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "tagName": {
          "type": "string",
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "repoName": {
          "type": "string",
          "description": "Name of the Cloud Source Repository."
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "substitutions": {
          "type": "object",
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "id": "RepoSource"
    },
    "Warning": {
      "id": "Warning",
      "type": "object",
      "description": "A non-fatal problem encountered during the execution of the build.",
      "properties": {
        "text": {
          "type": "string",
          "description": "Explanation of the warning generated."
        },
        "priority": {
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "description": "The priority for this warning.",
          "type": "string"
        }
      }
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponse": {
      "type": "object",
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponse",
      "description": "Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories.",
      "properties": {
        "bitbucketServerConnectedRepositories": {
          "description": "The connected Bitbucket Server repositories.",
          "type": "array",
          "items": {
            "$ref": "BitbucketServerConnectedRepository"
          }
        }
      }
    },
    "ListWorkerPoolsResponse": {
      "description": "Response containing existing `WorkerPools`.",
      "id": "ListWorkerPoolsResponse",
      "properties": {
        "workerPools": {
          "description": "`WorkerPools` for the specified project.",
          "type": "array",
          "items": {
            "$ref": "WorkerPool"
          }
        }
      },
      "type": "object"
    },
    "BuildStep": {
      "type": "object",
      "id": "BuildStep",
      "description": "A step in the build pipeline.",
      "properties": {
        "allowFailure": {
          "description": "Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.",
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency."
        },
        "name": {
          "type": "string",
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step."
        },
        "exitCode": {
          "format": "int32",
          "description": "Output only. Return code from running the step.",
          "type": "integer",
          "readOnly": true
        },
        "timeout": {
          "format": "google-duration",
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string"
        },
        "allowExitCodes": {
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array",
          "description": "Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence."
        },
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`."
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "script": {
          "type": "string",
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args."
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "pullTiming": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "readOnly": true
        },
        "waitFor": {
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "type": "array"
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ]
        },
        "dir": {
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.",
          "type": "string"
        },
        "timing": {
          "readOnly": true,
          "description": "Output only. Stores timing information for executing this build step.",
          "$ref": "TimeSpan"
        },
        "args": {
          "type": "array",
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        }
      }
    },
    "NotifierSecretRef": {
      "type": "object",
      "id": "NotifierSecretRef",
      "properties": {
        "secretRef": {
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.",
          "type": "string"
        }
      },
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec."
    },
    "ProcessAppManifestCallbackOperationMetadata": {
      "description": "Metadata for `ProcessAppManifestCallback` operation.",
      "id": "ProcessAppManifestCallbackOperationMetadata",
      "type": "object",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        }
      }
    },
    "Secret": {
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.",
      "type": "object",
      "properties": {
        "secretEnv": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "type": "object"
        },
        "kmsKeyName": {
          "type": "string",
          "description": "Cloud KMS key name to use to decrypt these envs."
        }
      },
      "id": "Secret"
    },
    "UpdateGitLabConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.",
          "type": "string"
        }
      },
      "id": "UpdateGitLabConfigOperationMetadata",
      "description": "Metadata for `UpdateGitLabConfig` operation."
    },
    "Notification": {
      "id": "Notification",
      "type": "object",
      "properties": {
        "structDelivery": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "type": "object",
          "description": "Escape hatch for users to supply custom delivery configs."
        },
        "smtpDelivery": {
          "$ref": "SMTPDelivery",
          "description": "Configuration for SMTP (email) delivery."
        },
        "slackDelivery": {
          "$ref": "SlackDelivery",
          "description": "Configuration for Slack delivery."
        },
        "httpDelivery": {
          "description": "Configuration for HTTP delivery.",
          "$ref": "HTTPDelivery"
        },
        "filter": {
          "type": "string",
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more."
        }
      },
      "description": "Notification is the container which holds the data that is relevant to this particular notification."
    },
    "FileHashes": {
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "items": {
            "$ref": "Hash"
          },
          "description": "Collection of file hashes.",
          "type": "array"
        }
      },
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "type": "object"
    },
    "NotifierSecret": {
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.",
      "id": "NotifierSecret",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\".",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects/my-project/secrets/my-secret/versions/latest\"."
        }
      }
    },
    "Source": {
      "type": "object",
      "description": "Location of the source in a supported storage service.",
      "id": "Source",
      "properties": {
        "storageSourceManifest": {
          "description": "If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
          "$ref": "StorageSourceManifest"
        },
        "storageSource": {
          "description": "If provided, get the source from this location in Google Cloud Storage.",
          "$ref": "StorageSource"
        },
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        }
      }
    },
    "HTTPDelivery": {
      "type": "object",
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "id": "HTTPDelivery",
      "properties": {
        "uri": {
          "description": "The URI to which JSON-containing HTTP POST requests should be sent.",
          "type": "string"
        }
      }
    },
    "TimeSpan": {
      "type": "object",
      "id": "TimeSpan",
      "description": "Start and end times for a build execution phase.",
      "properties": {
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "End of time span."
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Start of time span."
        }
      }
    },
    "CancelOperationRequest": {
      "type": "object",
      "description": "The request message for Operations.CancelOperation.",
      "properties": {},
      "id": "CancelOperationRequest"
    },
    "UploadedPythonPackage": {
      "description": "Artifact uploaded using the PythonPackage directive.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI of the uploaded artifact."
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "$ref": "TimeSpan",
          "readOnly": true
        },
        "fileHashes": {
          "description": "Hash types and values of the Python Artifact.",
          "$ref": "FileHashes"
        }
      },
      "id": "UploadedPythonPackage",
      "type": "object"
    },
    "StorageSourceManifest": {
      "description": "Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        }
      },
      "id": "StorageSourceManifest"
    },
    "GitLabConnectedRepository": {
      "description": "GitLabConnectedRepository represents a GitLab connected repository request response.",
      "properties": {
        "status": {
          "$ref": "Status",
          "description": "Output only. The status of the repo connection request.",
          "readOnly": true
        },
        "parent": {
          "type": "string",
          "description": "The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
        },
        "repo": {
          "description": "The GitLab repositories to connect.",
          "$ref": "GitLabRepositoryId"
        }
      },
      "id": "GitLabConnectedRepository",
      "type": "object"
    },
    "WorkerPool": {
      "type": "object",
      "description": "Configuration for a `WorkerPool` to run the builds. Workers provide a build environment where Cloud Build runs your builds. Cloud Build owns and maintains a pool of workers for general use. By default, when you submit a build, Cloud Build uses one of the workers from this pool. Builds that run in the default worker pool have access to the public internet. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Custom `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of custom worker pools, see [Custom workers overview](https://cloud.google.com/cloud-build/docs/custom-workers/custom-workers-overview).",
      "id": "WorkerPool",
      "properties": {
        "deleteTime": {
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding."
        },
        "uid": {
          "description": "Output only. A unique identifier for the `WorkerPool`.",
          "type": "string",
          "readOnly": true
        },
        "workerConfig": {
          "$ref": "WorkerConfig",
          "description": "Worker configuration for the `WorkerPool`."
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "networkConfig": {
          "description": "Network configuration for the `WorkerPool`.",
          "$ref": "NetworkConfig"
        },
        "name": {
          "readOnly": true,
          "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
          "type": "string"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED"
          ],
          "type": "string",
          "readOnly": true,
          "description": "Output only. `WorkerPool` state.",
          "enumDescriptions": [
            "State of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted."
          ]
        },
        "displayName": {
          "type": "string",
          "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters."
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
          "readOnly": true
        },
        "annotations": {
          "type": "object",
          "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Secrets": {
      "properties": {
        "inline": {
          "items": {
            "$ref": "InlineSecret"
          },
          "type": "array",
          "description": "Secrets encrypted with KMS key and the associated secret environment variable."
        },
        "secretManager": {
          "type": "array",
          "items": {
            "$ref": "SecretManagerSecret"
          },
          "description": "Secrets in Secret Manager and associated secret environment variable."
        }
      },
      "id": "Secrets",
      "type": "object",
      "description": "Secrets and secret environment variables."
    },
    "SecretManagerSecret": {
      "id": "SecretManagerSecret",
      "type": "object",
      "properties": {
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        },
        "versionName": {
          "type": "string",
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*"
        }
      },
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager."
    },
    "InlineSecret": {
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object",
      "properties": {
        "envMap": {
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*",
          "type": "string"
        }
      },
      "id": "InlineSecret"
    },
    "Repository": {
      "properties": {
        "name": {
          "description": "Immutable. Resource name of the repository, in the format `projects/*/locations/*/connections/*/repositories/*`.",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Server assigned timestamp for when the connection was updated."
        },
        "remoteUri": {
          "type": "string",
          "description": "Required. Git Clone HTTPS URI."
        },
        "annotations": {
          "description": "Allows clients to store small amounts of arbitrary data.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string",
          "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding."
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Server assigned timestamp for when the connection was created.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "id": "Repository",
      "description": "A repository associated to a parent connection.",
      "type": "object"
    },
    "CreateGitLabConfigOperationMetadata": {
      "id": "CreateGitLabConfigOperationMetadata",
      "description": "Metadata for `CreateGitLabConfig` operation.",
      "properties": {
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        },
        "completeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time the operation was created.",
          "type": "string"
        }
      },
      "type": "object"
    }
  }
}

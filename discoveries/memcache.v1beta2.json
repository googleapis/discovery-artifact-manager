{
  "title": "Cloud Memorystore for Memcached API",
  "description": "Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.",
  "mtlsRootUrl": "https://memcache.mtls.googleapis.com/",
  "canonicalName": "Cloud Memorystore for Memcached",
  "id": "memcache:v1beta2",
  "ownerName": "Google",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "type": "string"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "type": "string"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "description": "Gets information about a location.",
              "response": {
                "$ref": "Location"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta2/{+name}",
              "id": "memcache.projects.locations.get",
              "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "type": "string",
                  "description": "Resource name for the location.",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "parameterOrder": [
                "name"
              ],
              "id": "memcache.projects.locations.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "flatPath": "v1beta2/projects/{projectsId}/locations",
              "description": "Lists information about the supported locations for this service.",
              "httpMethod": "GET",
              "path": "v1beta2/{+name}/locations",
              "parameters": {
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path"
                },
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "type": "integer"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                }
              }
            }
          },
          "resources": {
            "operations": {
              "methods": {
                "list": {
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "The name of the operation's parent resource."
                    },
                    "filter": {
                      "description": "The standard list filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "memcache.projects.locations.operations.list",
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta2/{+name}/operations",
                  "httpMethod": "GET"
                },
                "delete": {
                  "path": "v1beta2/{+name}",
                  "id": "memcache.projects.locations.operations.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "cancel": {
                  "httpMethod": "POST",
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "id": "memcache.projects.locations.operations.cancel",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true
                    }
                  },
                  "path": "v1beta2/{+name}:cancel"
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "The name of the operation resource."
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "path": "v1beta2/{+name}",
                  "id": "memcache.projects.locations.operations.get",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "response": {
                    "$ref": "Operation"
                  }
                }
              }
            },
            "instances": {
              "methods": {
                "list": {
                  "response": {
                    "$ref": "ListInstancesResponse"
                  },
                  "description": "Lists Instances in a given location.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta2/{+parent}/instances",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "orderBy": {
                      "location": "query",
                      "type": "string",
                      "description": "Sort results. Supported values are \"name\", \"name desc\" or \"\" (unsorted)."
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "List filter. For example, exclude all Memcached instances with name as my-instance by specifying `\"name != my-instance\"`."
                    },
                    "parent": {
                      "description": "Required. The resource name of the instance location using the form: `projects/{project_id}/locations/{location_id}` where `location_id` refers to a GCP region",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path"
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "The `next_page_token` value returned from a previous List request, if any.",
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "The maximum number of items to return. If not specified, a default value of 1000 will be used by the service. Regardless of the `page_size` value, the response may include a partial list and a caller should only rely on response's `next_page_token` to determine if there are more instances left to be queried.",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances",
                  "id": "memcache.projects.locations.instances.list"
                },
                "applySoftwareUpdate": {
                  "request": {
                    "$ref": "ApplySoftwareUpdateRequest"
                  },
                  "path": "v1beta2/{+instance}:applySoftwareUpdate",
                  "parameterOrder": [
                    "instance"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:applySoftwareUpdate",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "instance": {
                      "required": true,
                      "description": "Required. Resource name of the Memcached instance for which software update should be applied.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Updates software on the selected nodes of the Instance.",
                  "id": "memcache.projects.locations.instances.applySoftwareUpdate"
                },
                "get": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "Required. Memcached instance resource name in the format: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` where `location_id` refers to a GCP region",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "httpMethod": "GET",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "description": "Gets details of a single Instance.",
                  "id": "memcache.projects.locations.instances.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Instance"
                  },
                  "path": "v1beta2/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "id": "memcache.projects.locations.instances.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta2/{+name}",
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Deletes a single Instance.",
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Required. Memcached instance resource name in the format: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` where `location_id` refers to a GCP region",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "type": "string"
                    }
                  }
                },
                "updateParameters": {
                  "request": {
                    "$ref": "UpdateParametersRequest"
                  },
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:updateParameters",
                  "path": "v1beta2/{+name}:updateParameters",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "PATCH",
                  "id": "memcache.projects.locations.instances.updateParameters",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "type": "string",
                      "description": "Required. Resource name of the Memcached instance for which the parameters should be updated.",
                      "location": "path"
                    }
                  },
                  "description": "Updates the defined Memcached parameters for an existing instance. This method only stages the parameters, it must be followed by `ApplyParameters` to apply the parameters to nodes of the Memcached instance."
                },
                "applyParameters": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:applyParameters",
                  "description": "`ApplyParameters` restarts the set of specified nodes in order to update them to the current set of parameters for the Memcached Instance.",
                  "id": "memcache.projects.locations.instances.applyParameters",
                  "path": "v1beta2/{+name}:applyParameters",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "ApplyParametersRequest"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "description": "Required. Resource name of the Memcached instance for which parameter group updates should be applied."
                    }
                  }
                },
                "rescheduleMaintenance": {
                  "parameters": {
                    "instance": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "Required. Memcache instance resource name using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` where `location_id` refers to a GCP region.",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "instance"
                  ],
                  "httpMethod": "POST",
                  "description": "Performs the apply phase of the RescheduleMaintenance verb.",
                  "id": "memcache.projects.locations.instances.rescheduleMaintenance",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:rescheduleMaintenance",
                  "path": "v1beta2/{+instance}:rescheduleMaintenance",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "RescheduleMaintenanceRequest"
                  }
                },
                "create": {
                  "httpMethod": "POST",
                  "description": "Creates a new Instance in a given location.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "description": "Required. The resource name of the instance location using the form: `projects/{project_id}/locations/{location_id}` where `location_id` refers to a GCP region",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "instanceId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. The logical name of the Memcached instance in the user project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the user project / location. If any of the above are not met, the API raises an invalid argument error."
                    }
                  },
                  "id": "memcache.projects.locations.instances.create",
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "Instance"
                  },
                  "path": "v1beta2/{+parent}/instances",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances"
                },
                "patch": {
                  "description": "Updates an existing Instance in a given project and location.",
                  "request": {
                    "$ref": "Instance"
                  },
                  "httpMethod": "PATCH",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "path": "v1beta2/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "memcache.projects.locations.instances.patch",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.",
                      "required": true
                    },
                    "updateMask": {
                      "type": "string",
                      "format": "google-fieldmask",
                      "location": "query",
                      "description": "Required. Mask of fields to update. * `displayName`"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "batchPath": "batch",
  "documentationLink": "https://cloud.google.com/memorystore/",
  "basePath": "",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "ownerDomain": "google.com",
  "revision": "20220721",
  "fullyEncodeReservedExpansion": true,
  "rootUrl": "https://memcache.googleapis.com/",
  "name": "memcache",
  "baseUrl": "https://memcache.googleapis.com/",
  "version_module": true,
  "kind": "discovery#restDescription",
  "version": "v1beta2",
  "schemas": {
    "GoogleCloudMemcacheV1beta2LocationMetadata": {
      "type": "object",
      "properties": {
        "availableZones": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "GoogleCloudMemcacheV1beta2ZoneMetadata"
          },
          "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in the `zones` field when creating a Memcached instance."
        }
      },
      "description": "Metadata for the given google.cloud.location.Location.",
      "id": "GoogleCloudMemcacheV1beta2LocationMetadata"
    },
    "Node": {
      "id": "Node",
      "properties": {
        "updateAvailable": {
          "description": "Output only. Returns true if there is an update waiting to be applied",
          "readOnly": true,
          "type": "boolean"
        },
        "state": {
          "readOnly": true,
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "DELETING",
            "UPDATING"
          ],
          "enumDescriptions": [
            "Node state is not set.",
            "Node is being created.",
            "Node has been created and ready to be used.",
            "Node is being deleted.",
            "Node is being updated."
          ],
          "description": "Output only. Current state of the Memcached node."
        },
        "parameters": {
          "$ref": "MemcacheParameters",
          "description": "User defined parameters currently applied to the node."
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Output only. The port number of the Memcached server on this node.",
          "readOnly": true
        },
        "host": {
          "type": "string",
          "description": "Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.",
          "readOnly": true
        },
        "nodeId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name."
        },
        "zone": {
          "type": "string",
          "description": "Output only. Location (GCP Zone) for the Memcached node.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1Instance": {
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1Instance",
      "type": "object",
      "properties": {
        "state": {
          "description": "Output only. Current lifecycle state of the resource (e.g. if it's being created or ready to use).",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "UPDATING",
            "REPAIRING",
            "DELETING",
            "ERROR"
          ],
          "enumDescriptions": [
            "Unspecified state.",
            "Instance is being created.",
            "Instance has been created and is ready to use.",
            "Instance is being updated.",
            "Instance is unheathy and under repair.",
            "Instance is being deleted.",
            "Instance encountered an error and is in indeterministic state."
          ],
          "type": "string",
          "readOnly": true
        },
        "consumerDefinedName": {
          "description": "consumer_defined_name is the name that is set by the consumer. On the other hand Name field represents system-assigned id of an instance so consumers are not necessarily aware of it. consumer_defined_name is used for notification/UI purposes for consumer to recognize their instances.",
          "type": "string"
        },
        "sloMetadata": {
          "description": "Output only. SLO metadata for instance classification in the Standardized dataplane SLO platform. See go/cloud-ssa-standard-slo for feature description.",
          "readOnly": true,
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata"
        },
        "updateTime": {
          "description": "Output only. Timestamp when the resource was last modified.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "maintenanceSettings": {
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings",
          "description": "Optional. The MaintenanceSettings associated with instance."
        },
        "softwareVersions": {
          "description": "Software versions that are used to deploy this instance. This can be mutated by rollout services.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Timestamp when the resource was created."
        },
        "tenantProjectId": {
          "readOnly": true,
          "description": "Output only. ID of the associated GCP tenant project. See go/get-instance-metadata.",
          "type": "string"
        },
        "provisionedResources": {
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource"
          },
          "description": "Output only. The list of data plane resources provisioned for this instance, e.g. compute VMs. See go/get-instance-metadata.",
          "type": "array",
          "readOnly": true
        },
        "instanceType": {
          "description": "Optional. The instance_type of this instance of format: projects/{project_number}/locations/{location_id}/instanceTypes/{instance_type_id}. Instance Type represents a high-level tier or SKU of the service that this instance belong to. When enabled(eg: Maintenance Rollout), Rollout uses 'instance_type' along with 'software_versions' to determine whether instance needs an update or not.",
          "type": "string"
        },
        "slmInstanceTemplate": {
          "description": "Link to the SLM instance template. Only populated when updating SLM instances via SSA's Actuation service adaptor. Service producers with custom control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead they should use software_versions.",
          "type": "string"
        },
        "maintenancePolicyNames": {
          "description": "Optional. Deprecated. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the referenced policy must define the same policy type. For complete details of MaintenancePolicy, please refer to go/cloud-saas-mw-ug.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "notificationParameters": {
          "description": "Optional. notification_parameter are information that service producers may like to include that is not relevant to Rollout. This parameter will only be passed to Gamma and Cloud Logging for notification/logging purpose.",
          "additionalProperties": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter"
          },
          "type": "object"
        },
        "producerMetadata": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Output only. Custom string attributes used primarily to expose producer-specific information in monitoring dashboards. See go/get-instance-metadata.",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the resource. It uses the form: `projects/{project_number}/locations/{location_id}/instances/{instance_id}` Note: This name is passed, stored and logged across the rollout system. So use of consumer project_id or any other consumer PII in the name is strongly discouraged for wipeout (go/wipeout) compliance. See go/elysium/project_ids#storage-guidance for more details.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user."
        },
        "maintenanceSchedules": {
          "description": "The MaintenanceSchedule contains the scheduling information of published maintenance schedule with same key as software_versions.",
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule"
          }
        }
      }
    },
    "DailyCycle": {
      "description": "Time window specified for daily operations.",
      "properties": {
        "duration": {
          "description": "Output only. Duration of the time window, set by service producer.",
          "type": "string",
          "format": "google-duration"
        },
        "startTime": {
          "description": "Time within the day to start the operations.",
          "$ref": "TimeOfDay"
        }
      },
      "type": "object",
      "id": "DailyCycle"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata": {
      "type": "object",
      "description": "Node information for custom per-node SLO implementations. SSA does not support per-node SLO, but producers can populate per-node information in SloMetadata for custom precomputations. SSA Eligibility Exporter will emit per-node metric based on this information.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata",
      "properties": {
        "location": {
          "description": "The location of the node, if different from instance location.",
          "type": "string"
        },
        "perSliEligibility": {
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility",
          "description": "If present, this will override eligibility for the node coming from instance or exclusions for specified SLIs."
        },
        "nodeId": {
          "type": "string",
          "description": "The id of the node. This should be equal to SaasInstanceNode.node_id."
        }
      }
    },
    "MaintenanceSchedule": {
      "id": "MaintenanceSchedule",
      "properties": {
        "endTime": {
          "type": "string",
          "description": "Output only. The end time of any upcoming scheduled maintenance for this instance.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "startTime": {
          "readOnly": true,
          "description": "Output only. The start time of any upcoming scheduled maintenance for this instance.",
          "format": "google-datetime",
          "type": "string"
        },
        "scheduleDeadlineTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule."
        }
      },
      "description": "Upcoming maintenance schedule.",
      "type": "object"
    },
    "ListInstancesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "resources": {
          "items": {
            "$ref": "Instance"
          },
          "description": "A list of Memcached instances in the project in the specified location, or across all locations. If the `location_id` in the parent field of the request is \"-\", all regions available to the project are queried, and the results aggregated.",
          "type": "array"
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached.",
          "type": "array"
        }
      },
      "description": "Response for ListInstances.",
      "type": "object",
      "id": "ListInstancesResponse"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter": {
      "description": "Contains notification related data.",
      "properties": {
        "values": {
          "description": "Optional. Array of string values. e.g. instance's replica information.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter",
      "type": "object"
    },
    "UpdatePolicy": {
      "id": "UpdatePolicy",
      "type": "object",
      "description": "Maintenance policy applicable to instance updates.",
      "properties": {
        "denyMaintenancePeriods": {
          "items": {
            "$ref": "DenyMaintenancePeriod"
          },
          "type": "array",
          "description": "Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. User can specify zero or more non-overlapping deny periods. Maximum number of deny_maintenance_periods expected is one."
        },
        "window": {
          "$ref": "MaintenanceWindow",
          "description": "Optional. Maintenance window that is applied to resources covered by this policy."
        },
        "channel": {
          "description": "Optional. Relative scheduling channel applied to resource.",
          "enumDescriptions": [
            "Unspecified channel.",
            "Early channel within a customer project.",
            "Later channel within a customer project.",
            "! ! The follow channels can ONLY be used if you adopt the new MW system! ! ! NOTE: all WEEK channels are assumed to be under a weekly window. ! There is currently no dedicated channel definitions for Daily windows. ! If you use Daily window, the system will assume a 1d (24Hours) advanced ! notification period b/w EARLY and LATER. ! We may consider support more flexible daily channel specifications in ! the future. WEEK1 == EARLIER with minimum 7d advanced notification. {7d, 14d} The system will treat them equally and will use WEEK1 whenever it can. New customers are encouraged to use this channel annotation.",
            "WEEK2 == LATER with minimum 14d advanced notification {14d, 21d}.",
            "WEEK5 == 40d support. minimum 35d advanced notification {35d, 42d}."
          ],
          "enum": [
            "UPDATE_CHANNEL_UNSPECIFIED",
            "EARLIER",
            "LATER",
            "WEEK1",
            "WEEK2",
            "WEEK5"
          ],
          "type": "string"
        }
      }
    },
    "DenyMaintenancePeriod": {
      "id": "DenyMaintenancePeriod",
      "properties": {
        "startDate": {
          "description": "Deny period start date. This can be: * A full date, with non-zero year, month and day values. * A month and day value, with a zero year. Allows recurring deny periods each year. Date matching this period will have to be the same or after the start.",
          "$ref": "Date"
        },
        "time": {
          "description": "Time in UTC when the Blackout period starts on start_date and ends on end_date. This can be: * Full time. * All zeros for 00:00:00 UTC",
          "$ref": "TimeOfDay"
        },
        "endDate": {
          "description": "Deny period end date. This can be: * A full date, with non-zero year, month and day values. * A month and day value, with a zero year. Allows recurring deny periods each year. Date matching this period will have to be before the end.",
          "$ref": "Date"
        }
      },
      "type": "object",
      "description": "DenyMaintenancePeriod definition. Maintenance is forbidden within the deny period. The start_date must be less than the end_date."
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        }
      }
    },
    "ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "id": "ListLocationsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "locations": {
          "items": {
            "$ref": "Location"
          },
          "type": "array",
          "description": "A list of locations that matches the specified filter in the request."
        }
      }
    },
    "Instance": {
      "properties": {
        "memcacheNodes": {
          "readOnly": true,
          "items": {
            "$ref": "Node"
          },
          "type": "array",
          "description": "Output only. List of Memcached nodes. Refer to Node message for more details."
        },
        "instanceMessages": {
          "items": {
            "$ref": "InstanceMessage"
          },
          "description": "List of messages that describe the current state of the Memcached instance.",
          "type": "array"
        },
        "memcacheFullVersion": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\"."
        },
        "maintenancePolicy": {
          "$ref": "GoogleCloudMemcacheV1beta2MaintenancePolicy",
          "description": "The maintenance policy for the instance. If not provided, the maintenance event will be performed based on Memorystore internal rollout schedule."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
          "type": "object"
        },
        "state": {
          "enumDescriptions": [
            "State not set.",
            "Memcached instance is being created.",
            "Memcached instance has been created and ready to be used.",
            "Memcached instance is updating configuration such as maintenance policy and schedule.",
            "Memcached instance is being deleted.",
            "Memcached instance is going through maintenance, e.g. data plane rollout."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "UPDATING",
            "DELETING",
            "PERFORMING_MAINTENANCE"
          ],
          "description": "Output only. The state of this Memcached instance.",
          "type": "string",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time the instance was updated.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details."
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time the instance was created."
        },
        "nodeCount": {
          "type": "integer",
          "description": "Required. Number of nodes in the Memcached instance.",
          "format": "int32"
        },
        "zones": {
          "items": {
            "type": "string"
          },
          "description": "Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.",
          "type": "array"
        },
        "maintenanceSchedule": {
          "$ref": "MaintenanceSchedule",
          "description": "Output only. Published maintenance schedule.",
          "readOnly": true
        },
        "updateAvailable": {
          "description": "Output only. Returns true if there is an update waiting to be applied",
          "readOnly": true,
          "type": "boolean"
        },
        "parameters": {
          "description": "User defined parameters to apply to the memcached process on each node.",
          "$ref": "MemcacheParameters"
        },
        "displayName": {
          "type": "string",
          "description": "User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters."
        },
        "memcacheVersion": {
          "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.",
          "enumDescriptions": [
            "",
            "Memcached 1.5 version."
          ],
          "enum": [
            "MEMCACHE_VERSION_UNSPECIFIED",
            "MEMCACHE_1_5"
          ],
          "type": "string"
        },
        "authorizedNetwork": {
          "description": "The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.",
          "type": "string"
        },
        "nodeConfig": {
          "$ref": "NodeConfig",
          "description": "Required. Configuration for Memcached nodes."
        },
        "discoveryEndpoint": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Endpoint for the Discovery API."
        }
      },
      "type": "object",
      "description": "A Memorystore for Memcached instance",
      "id": "Instance"
    },
    "Date": {
      "id": "Date",
      "type": "object",
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
      "properties": {
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
        },
        "month": {
          "format": "int32",
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "type": "integer"
        },
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."
        }
      }
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata": {
      "description": "SloMetadata contains resources required for proper SLO classification of the instance.",
      "type": "object",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata",
      "properties": {
        "perSliEligibility": {
          "description": "Optional. Multiple per-instance SLI eligibilities which apply for individual SLIs.",
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility"
        },
        "tier": {
          "description": "Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.",
          "type": "string"
        },
        "nodes": {
          "description": "Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch.",
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata"
          },
          "type": "array"
        }
      }
    },
    "RescheduleMaintenanceRequest": {
      "type": "object",
      "description": "Request for RescheduleMaintenance.",
      "id": "RescheduleMaintenanceRequest",
      "properties": {
        "rescheduleType": {
          "enumDescriptions": [
            "Not set.",
            "If the user wants to schedule the maintenance to happen now.",
            "If the user wants to use the existing maintenance policy to find the next available window.",
            "If the user wants to reschedule the maintenance to a specific time."
          ],
          "enum": [
            "RESCHEDULE_TYPE_UNSPECIFIED",
            "IMMEDIATE",
            "NEXT_AVAILABLE_WINDOW",
            "SPECIFIC_TIME"
          ],
          "description": "Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.",
          "type": "string"
        },
        "scheduleTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example `2012-11-15T16:19:00.094Z`."
        }
      }
    },
    "Location": {
      "properties": {
        "locationId": {
          "type": "string",
          "description": "The canonical id for this location. For example: `\"us-east1\"`."
        },
        "labels": {
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        }
      },
      "description": "A resource that represents Google Cloud Platform location.",
      "type": "object",
      "id": "Location"
    },
    "GoogleCloudMemcacheV1beta2OperationMetadata": {
      "description": "Represents the metadata of a long-running operation.",
      "properties": {
        "endTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Time when the operation finished running."
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string",
          "readOnly": true
        },
        "apiVersion": {
          "readOnly": true,
          "description": "Output only. API version used to start the operation.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Time when the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "statusDetail": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Server-defined resource path for the target of the operation."
        },
        "cancelRequested": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        }
      },
      "type": "object",
      "id": "GoogleCloudMemcacheV1beta2OperationMetadata"
    },
    "MemcacheParameters": {
      "id": "MemcacheParameters",
      "properties": {
        "params": {
          "description": "User defined set of parameters to use in the memcached process.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "Output only. The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.",
          "type": "string",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "Schedule": {
      "type": "object",
      "id": "Schedule",
      "description": "Configure the schedule.",
      "properties": {
        "day": {
          "enumDescriptions": [
            "The day of the week is unspecified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "type": "string",
          "description": "Allows to define schedule that runs specified day of the week.",
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ]
        },
        "duration": {
          "format": "google-duration",
          "type": "string",
          "description": "Output only. Duration of the time window, set by service producer."
        },
        "startTime": {
          "$ref": "TimeOfDay",
          "description": "Time within the window to start the operations."
        }
      }
    },
    "WeeklyMaintenanceWindow": {
      "properties": {
        "day": {
          "enumDescriptions": [
            "The day of the week is unspecified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "type": "string",
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ],
          "description": "Required. Allows to define schedule that runs specified day of the week."
        },
        "startTime": {
          "description": "Required. Start time of the window in UTC.",
          "$ref": "TimeOfDay"
        },
        "duration": {
          "format": "google-duration",
          "type": "string",
          "description": "Required. Duration of the time window."
        }
      },
      "id": "WeeklyMaintenanceWindow",
      "description": "Time window specified for weekly operations.",
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility": {
      "type": "object",
      "properties": {
        "eligible": {
          "type": "boolean",
          "description": "Whether an instance is eligible or ineligible."
        },
        "reason": {
          "description": "User-defined reason for the current value of instance eligibility. Usually, this can be directly mapped to the internal state. An empty reason is allowed.",
          "type": "string"
        }
      },
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility",
      "description": "SloEligibility is a tuple containing eligibility value: true if an instance is eligible for SLO calculation or false if it should be excluded from all SLO-related calculations along with a user-defined reason."
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        }
      }
    },
    "ApplyParametersRequest": {
      "id": "ApplyParametersRequest",
      "properties": {
        "nodeIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Nodes to which the instance-level parameter group is applied."
        },
        "applyAll": {
          "type": "boolean",
          "description": "Whether to apply instance-level parameter group to all nodes. If set to true, users are restricted from specifying individual nodes, and `ApplyParameters` updates all nodes within the instance."
        }
      },
      "type": "object",
      "description": "Request for ApplyParameters."
    },
    "OperationMetadata": {
      "description": "Represents the metadata of a long-running operation.",
      "properties": {
        "statusDetail": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. Time when the operation was created.",
          "type": "string",
          "readOnly": true
        },
        "apiVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. API version used to start the operation."
        },
        "endTime": {
          "format": "google-datetime",
          "description": "Output only. Time when the operation finished running.",
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "type": "string",
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true
        }
      },
      "id": "OperationMetadata",
      "type": "object"
    },
    "WeeklyCycle": {
      "id": "WeeklyCycle",
      "properties": {
        "schedule": {
          "items": {
            "$ref": "Schedule"
          },
          "type": "array",
          "description": "User can specify multiple windows in a week. Minimum of 1 window."
        }
      },
      "type": "object",
      "description": "Time window specified for weekly operations."
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings": {
      "description": "Maintenance settings associated with instance. Allows service producers and end users to assign settings that controls maintenance on this instance.",
      "type": "object",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings",
      "properties": {
        "exclude": {
          "description": "Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted.",
          "type": "boolean"
        },
        "maintenancePolicies": {
          "type": "object",
          "description": "Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the embedded policy must define the same policy type. For complete details of MaintenancePolicy, please refer to go/cloud-saas-mw-ug. If only the name is needed, then only populate MaintenancePolicy.name.",
          "additionalProperties": {
            "$ref": "MaintenancePolicy"
          }
        },
        "isRollback": {
          "description": "Optional. If the update call is triggered from rollback, set the value as true.",
          "type": "boolean"
        }
      }
    },
    "UpdateParametersRequest": {
      "type": "object",
      "properties": {
        "updateMask": {
          "description": "Required. Mask of fields to update.",
          "type": "string",
          "format": "google-fieldmask"
        },
        "parameters": {
          "$ref": "MemcacheParameters",
          "description": "The parameters to apply to the instance."
        }
      },
      "id": "UpdateParametersRequest",
      "description": "Request for UpdateParameters."
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource": {
      "type": "object",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource",
      "properties": {
        "resourceType": {
          "type": "string",
          "description": "Type of the resource. This can be either a GCP resource or a custom one (e.g. another cloud provider's VM). For GCP compute resources use singular form of the names listed in GCP compute API documentation (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with 'compute-', for example: 'compute-instance', 'compute-disk', 'compute-autoscaler'."
        },
        "resourceUrl": {
          "type": "string",
          "description": "URL identifying the resource, e.g. \"https://www.googleapis.com/compute/v1/projects/...)\"."
        }
      },
      "description": "Describes provisioned dataplane resources."
    },
    "CancelOperationRequest": {
      "id": "CancelOperationRequest",
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "type": "object"
    },
    "ZoneMetadata": {
      "type": "object",
      "id": "ZoneMetadata",
      "properties": {}
    },
    "MaintenancePolicy": {
      "type": "object",
      "description": "Defines policies to service maintenance events.",
      "id": "MaintenancePolicy",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time when the resource was created."
        },
        "updatePolicy": {
          "description": "Maintenance policy applicable to instance update.",
          "$ref": "UpdatePolicy"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.",
          "type": "object"
        },
        "state": {
          "description": "Optional. The state of the policy.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified state.",
            "Resource is ready to be used.",
            "Resource is being deleted. It can no longer be attached to instances."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "READY",
            "DELETING"
          ]
        },
        "name": {
          "type": "string",
          "description": "Required. MaintenancePolicy name using the form: `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}` where {project_id} refers to a GCP consumer project ID, {location_id} refers to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`."
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512."
        },
        "updateTime": {
          "description": "Output only. The time when the resource was updated.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "GoogleCloudMemcacheV1beta2ZoneMetadata": {
      "id": "GoogleCloudMemcacheV1beta2ZoneMetadata",
      "type": "object",
      "properties": {}
    },
    "LocationMetadata": {
      "type": "object",
      "description": "Metadata for the given google.cloud.location.Location.",
      "properties": {
        "availableZones": {
          "type": "object",
          "additionalProperties": {
            "$ref": "ZoneMetadata"
          },
          "readOnly": true,
          "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in the `zones` field when creating a Memcached instance."
        }
      },
      "id": "LocationMetadata"
    },
    "GoogleCloudMemcacheV1beta2MaintenancePolicy": {
      "id": "GoogleCloudMemcacheV1beta2MaintenancePolicy",
      "properties": {
        "weeklyMaintenanceWindow": {
          "type": "array",
          "description": "Required. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.",
          "items": {
            "$ref": "WeeklyMaintenanceWindow"
          }
        },
        "updateTime": {
          "readOnly": true,
          "description": "Output only. The time when the policy was updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "description": {
          "description": "Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time when the policy was created.",
          "readOnly": true,
          "type": "string"
        }
      },
      "description": "Maintenance policy per instance.",
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility": {
      "description": "PerSliSloEligibility is a mapping from an SLI name to eligibility.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility",
      "properties": {
        "eligibilities": {
          "additionalProperties": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility"
          },
          "description": "An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "ApplySoftwareUpdateRequest": {
      "type": "object",
      "id": "ApplySoftwareUpdateRequest",
      "description": "Request for ApplySoftwareUpdate.",
      "properties": {
        "nodeIds": {
          "description": "Nodes to which we should apply the update to. Note all the selected nodes are updated in parallel.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "applyAll": {
          "type": "boolean",
          "description": "Whether to apply the update to all nodes. If set to true, will explicitly restrict users from specifying any nodes, and apply software update to all nodes (where applicable) within the instance."
        }
      }
    },
    "TimeOfDay": {
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
      "properties": {
        "seconds": {
          "type": "integer",
          "format": "int32",
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."
        },
        "nanos": {
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
          "type": "integer",
          "format": "int32"
        },
        "hours": {
          "type": "integer",
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
          "format": "int32"
        },
        "minutes": {
          "type": "integer",
          "format": "int32",
          "description": "Minutes of hour of day. Must be from 0 to 59."
        }
      },
      "id": "TimeOfDay",
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule": {
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule",
      "description": "Maintenance schedule which is exposed to customer and potentially end user, indicating published upcoming future maintenance schedule",
      "type": "object",
      "properties": {
        "scheduleDeadlineTime": {
          "type": "string",
          "description": "schedule_deadline_time is the time deadline any schedule start time cannot go beyond, including reschedule. It's normally the initial schedule start time plus maintenance window length (1 day or 1 week). Maintenance cannot be scheduled to start beyond this deadline.",
          "format": "google-datetime"
        },
        "rolloutManagementPolicy": {
          "type": "string",
          "description": "The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy."
        },
        "canReschedule": {
          "description": "This field is deprecated, and will be always set to true since reschedule can happen multiple times now. This field should not be removed until all service producers remove this for their customers.",
          "type": "boolean"
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The scheduled end time for the maintenance."
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The scheduled start time for the maintenance."
        }
      }
    },
    "MaintenanceWindow": {
      "properties": {
        "dailyCycle": {
          "description": "Daily cycle.",
          "$ref": "DailyCycle"
        },
        "weeklyCycle": {
          "description": "Weekly cycle.",
          "$ref": "WeeklyCycle"
        }
      },
      "type": "object",
      "description": "MaintenanceWindow definition.",
      "id": "MaintenanceWindow"
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "Status": {
      "properties": {
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          }
        }
      },
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "InstanceMessage": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Message on memcached instance which will be exposed to users."
        },
        "code": {
          "enum": [
            "CODE_UNSPECIFIED",
            "ZONE_DISTRIBUTION_UNBALANCED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Message Code not set.",
            "Memcached nodes are distributed unevenly."
          ],
          "description": "A code that correspond to one type of user-facing message."
        }
      },
      "type": "object",
      "id": "InstanceMessage"
    },
    "NodeConfig": {
      "description": "Configuration for a Memcached Node.",
      "type": "object",
      "properties": {
        "cpuCount": {
          "description": "Required. Number of cpus per Memcached node.",
          "type": "integer",
          "format": "int32"
        },
        "memorySizeMb": {
          "type": "integer",
          "description": "Required. Memory size in MiB for each Memcached node.",
          "format": "int32"
        }
      },
      "id": "NodeConfig"
    }
  },
  "discoveryVersion": "v1",
  "servicePath": "",
  "protocol": "rest"
}

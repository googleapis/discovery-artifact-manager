{
  "id": "batch:v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "description": "An API to manage the running of batch jobs on Google Cloud Platform.",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "jobs": {
              "resources": {
                "taskGroups": {
                  "resources": {
                    "tasks": {
                      "methods": {
                        "list": {
                          "id": "batch.projects.locations.jobs.taskGroups.tasks.list",
                          "description": "List Tasks associated with a job.",
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListTasksResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "pageToken": {
                              "location": "query",
                              "type": "string",
                              "description": "Page token."
                            },
                            "parent": {
                              "required": true,
                              "description": "Required. Name of a TaskGroup from which Tasks are being requested. Pattern: \"projects/{project}/locations/{location}/jobs/{job}/taskGroups/{task_group}\"",
                              "type": "string",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+/taskGroups/[^/]+$"
                            },
                            "filter": {
                              "description": "Task filter, null filter matches all Tasks. Filter string should be of the format State=TaskStatus.State e.g. State=RUNNING",
                              "type": "string",
                              "location": "query"
                            },
                            "pageSize": {
                              "format": "int32",
                              "description": "Page size.",
                              "type": "integer",
                              "location": "query"
                            }
                          },
                          "path": "v1/{+parent}/tasks",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks",
                          "httpMethod": "GET"
                        },
                        "get": {
                          "id": "batch.projects.locations.jobs.taskGroups.tasks.get",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks/{tasksId}",
                          "parameterOrder": [
                            "name"
                          ],
                          "description": "Return a single Task.",
                          "parameters": {
                            "name": {
                              "type": "string",
                              "location": "path",
                              "description": "Required. Task name.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+/taskGroups/[^/]+/tasks/[^/]+$",
                              "required": true
                            }
                          },
                          "httpMethod": "GET",
                          "response": {
                            "$ref": "Task"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "path": "v1/{+name}"
                        }
                      }
                    }
                  }
                }
              },
              "methods": {
                "get": {
                  "response": {
                    "$ref": "Job"
                  },
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "description": "Get a Job specified by its resource name.",
                  "id": "batch.projects.locations.jobs.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+$",
                      "description": "Required. Job name.",
                      "type": "string"
                    }
                  }
                },
                "list": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/jobs",
                  "id": "batch.projects.locations.jobs.list",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Parent path.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "Page token."
                    },
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "List filter."
                    },
                    "pageSize": {
                      "format": "int32",
                      "location": "query",
                      "type": "integer",
                      "description": "Page size."
                    },
                    "orderBy": {
                      "description": "Optional. Sort results. Supported are \"name\", \"name desc\", \"create_time\", and \"create_time desc\".",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "ListJobsResponse"
                  },
                  "description": "List all Jobs for a project within a region.",
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "create": {
                  "request": {
                    "$ref": "Job"
                  },
                  "parameters": {
                    "requestId": {
                      "location": "query",
                      "type": "string",
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
                    },
                    "jobId": {
                      "description": "ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters and must start with lowercase characters. Only lowercase characters, numbers and '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be \"{parent}/jobs/{job_id}\".",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "description": "Required. The parent resource name where the Job will be created. Pattern: \"projects/{project}/locations/{location}\"",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/jobs",
                  "response": {
                    "$ref": "Job"
                  },
                  "id": "batch.projects.locations.jobs.create",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Create a Job."
                },
                "delete": {
                  "parameters": {
                    "requestId": {
                      "location": "query",
                      "type": "string",
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
                    },
                    "reason": {
                      "description": "Optional. Reason for this deletion.",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+$",
                      "description": "Job name.",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+name}",
                  "description": "Delete a Job.",
                  "id": "batch.projects.locations.jobs.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE"
                }
              }
            },
            "state": {
              "methods": {
                "report": {
                  "response": {
                    "$ref": "ReportAgentStateResponse"
                  },
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "Required. Format: projects/{project}/locations/{location} {project} should be a project number."
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/state:report",
                  "id": "batch.projects.locations.state.report",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "ReportAgentStateRequest"
                  },
                  "httpMethod": "POST",
                  "description": "Report agent's state, e.g. agent status and tasks information",
                  "path": "v1/{+parent}/state:report"
                }
              }
            },
            "operations": {
              "methods": {
                "list": {
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
                  "parameters": {
                    "filter": {
                      "description": "The standard list filter.",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "required": true
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The standard list page token.",
                      "location": "query"
                    },
                    "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The standard list page size.",
                      "location": "query"
                    }
                  },
                  "path": "v1/{+name}/operations",
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "batch.projects.locations.operations.list",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  }
                },
                "delete": {
                  "path": "v1/{+name}",
                  "id": "batch.projects.locations.operations.delete",
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "The name of the operation resource to be deleted.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true
                    }
                  }
                },
                "get": {
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "batch.projects.locations.operations.get",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "required": true
                    }
                  }
                },
                "cancel": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "batch.projects.locations.operations.cancel",
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "response": {
                    "$ref": "Empty"
                  },
                  "path": "v1/{+name}:cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "get": {
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Location"
              },
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Resource name for the location.",
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+/locations/[^/]+$"
                }
              },
              "description": "Gets information about a location.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "batch.projects.locations.get"
            },
            "list": {
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                },
                "pageSize": {
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "type": "integer",
                  "location": "query",
                  "format": "int32"
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160)."
                }
              },
              "path": "v1/{+name}/locations",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "batch.projects.locations.list",
              "flatPath": "v1/projects/{projectsId}/locations",
              "description": "Lists information about the supported locations for this service."
            }
          }
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "revision": "20230914",
  "ownerName": "Google",
  "kind": "discovery#restDescription",
  "documentationLink": "https://cloud.google.com/batch/",
  "rootUrl": "https://batch.googleapis.com/",
  "version": "v1",
  "basePath": "",
  "canonicalName": "Batch",
  "ownerDomain": "google.com",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "mtlsRootUrl": "https://batch.mtls.googleapis.com/",
  "parameters": {
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "alt": {
      "type": "string",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "default": "json"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format."
    }
  },
  "batchPath": "batch",
  "schemas": {
    "AgentContainer": {
      "description": "Container runnable representation on the agent side.",
      "id": "AgentContainer",
      "properties": {
        "commands": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT."
        },
        "imageUri": {
          "description": "The URI to pull the container image from.",
          "type": "string"
        },
        "volumes": {
          "description": "Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "description": "Overrides the `ENTRYPOINT` specified in the container.",
          "type": "string"
        },
        "options": {
          "type": "string",
          "description": "Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\"."
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "A resource that represents a Google Cloud location.",
      "id": "Location",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocationPolicy": {
      "properties": {
        "allowedLocations": {
          "description": "A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, [\"regions/us-central1\"] allow VMs in any zones in region us-central1. [\"zones/us-central1-a\", \"zones/us-central1-c\"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, [\"regions/us-central1\", \"zones/us-central1-a\", \"zones/us-central1-b\", \"zones/us-west1-a\"] contains 2 regions \"us-central1\" and \"us-west1\". An error is expected in this case.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "LocationPolicy",
      "type": "object"
    },
    "AgentTaskRunnable": {
      "properties": {
        "ignoreExitStatus": {
          "type": "boolean",
          "description": "Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead."
        },
        "timeout": {
          "format": "google-duration",
          "description": "Timeout for this Runnable.",
          "type": "string"
        },
        "background": {
          "description": "This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).",
          "type": "boolean"
        },
        "script": {
          "$ref": "AgentScript",
          "description": "Script runnable."
        },
        "alwaysRun": {
          "type": "boolean",
          "description": "By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables."
        },
        "container": {
          "description": "Container runnable.",
          "$ref": "AgentContainer"
        },
        "environment": {
          "$ref": "AgentEnvironment",
          "description": "Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup)."
        }
      },
      "description": "AgentTaskRunnable is the Runnable representation between Agent and CLH communication.",
      "type": "object",
      "id": "AgentTaskRunnable"
    },
    "TaskSpec": {
      "properties": {
        "computeResource": {
          "$ref": "ComputeResource",
          "description": "ComputeResource requirements."
        },
        "environments": {
          "additionalProperties": {
            "type": "string"
          },
          "deprecated": true,
          "description": "Deprecated: please use environment(non-plural) instead.",
          "type": "object"
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "type": "array",
          "description": "Volumes to mount before running Tasks using this TaskSpec."
        },
        "runnables": {
          "items": {
            "$ref": "Runnable"
          },
          "type": "array",
          "description": "The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures."
        },
        "maxRetryCount": {
          "type": "integer",
          "description": "Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].",
          "format": "int32"
        },
        "maxRunDuration": {
          "description": "Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.",
          "format": "google-duration",
          "type": "string"
        },
        "lifecyclePolicies": {
          "type": "array",
          "description": "Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.",
          "items": {
            "$ref": "LifecyclePolicy"
          }
        },
        "environment": {
          "$ref": "Environment",
          "description": "Environment variables to set before running the Task."
        }
      },
      "id": "TaskSpec",
      "type": "object",
      "description": "Spec of a task"
    },
    "AgentTaskSpec": {
      "description": "AgentTaskSpec is the user's TaskSpec representation between Agent and CLH communication.",
      "type": "object",
      "properties": {
        "runnables": {
          "items": {
            "$ref": "AgentTaskRunnable"
          },
          "description": "AgentTaskRunnable is runanbles that will be executed on the agent.",
          "type": "array"
        },
        "environment": {
          "description": "Environment variables to set before running the Task.",
          "$ref": "AgentEnvironment"
        },
        "maxRunDuration": {
          "type": "string",
          "format": "google-duration",
          "description": "Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit."
        }
      },
      "id": "AgentTaskSpec"
    },
    "InstanceStatus": {
      "id": "InstanceStatus",
      "properties": {
        "machineType": {
          "type": "string",
          "description": "The Compute Engine machine type."
        },
        "taskPack": {
          "type": "string",
          "format": "int64",
          "description": "The max number of tasks can be assigned to this instance type."
        },
        "provisioningModel": {
          "description": "The VM instance provisioning model.",
          "enumDescriptions": [
            "Unspecified.",
            "Standard VM.",
            "SPOT VM.",
            "Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported."
          ],
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            "STANDARD",
            "SPOT",
            "PREEMPTIBLE"
          ],
          "type": "string"
        },
        "bootDisk": {
          "description": "The VM boot disk.",
          "$ref": "Disk"
        }
      },
      "type": "object",
      "description": "VM instance status."
    },
    "InstancePolicy": {
      "description": "InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.",
      "properties": {
        "disks": {
          "items": {
            "$ref": "AttachedDisk"
          },
          "description": "Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.",
          "type": "array"
        },
        "reservation": {
          "type": "string",
          "description": "Optional. If specified, VMs will consume only the specified reservation. If not specified (default), VMs will consume any applicable reservation."
        },
        "machineType": {
          "type": "string",
          "description": "The Compute Engine machine type."
        },
        "provisioningModel": {
          "description": "The provisioning model.",
          "enumDescriptions": [
            "Unspecified.",
            "Standard VM.",
            "SPOT VM.",
            "Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported."
          ],
          "type": "string",
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            "STANDARD",
            "SPOT",
            "PREEMPTIBLE"
          ]
        },
        "accelerators": {
          "type": "array",
          "description": "The accelerators attached to each VM instance.",
          "items": {
            "$ref": "Accelerator"
          }
        },
        "bootDisk": {
          "$ref": "Disk",
          "description": "Boot disk to be created and attached to each VM by this InstancePolicy. Boot disk will be deleted when the VM is deleted. Batch API now only supports booting from image."
        },
        "minCpuPlatform": {
          "description": "The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.",
          "type": "string"
        }
      },
      "id": "InstancePolicy",
      "type": "object"
    },
    "Environment": {
      "properties": {
        "secretVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable."
        },
        "variables": {
          "description": "A map of environment variable names to values.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "encryptedVariables": {
          "$ref": "KMSEnvMap",
          "description": "An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values."
        }
      },
      "description": "An Environment describes a collection of environment variables to set when executing Tasks.",
      "id": "Environment",
      "type": "object"
    },
    "Barrier": {
      "properties": {
        "name": {
          "description": "Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.",
          "type": "string"
        }
      },
      "id": "Barrier",
      "type": "object",
      "description": "Barrier runnable blocks until all tasks in a taskgroup reach it."
    },
    "JobStatus": {
      "type": "object",
      "id": "JobStatus",
      "description": "Job status.",
      "properties": {
        "statusEvents": {
          "type": "array",
          "items": {
            "$ref": "StatusEvent"
          },
          "description": "Job status events"
        },
        "runDuration": {
          "type": "string",
          "format": "google-duration",
          "description": "The duration of time that the Job spent in status RUNNING."
        },
        "state": {
          "description": "Job state",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "SCHEDULED",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "DELETION_IN_PROGRESS"
          ],
          "enumDescriptions": [
            "Job state unspecified.",
            "Job is admitted (validated and persisted) and waiting for resources.",
            "Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.",
            "Resource allocation has been successful. At least one Task in the Job is RUNNING.",
            "All Tasks in the Job have finished successfully.",
            "At least one Task in the Job has failed.",
            "The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up."
          ]
        },
        "taskGroups": {
          "description": "Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.",
          "type": "object",
          "additionalProperties": {
            "$ref": "TaskGroupStatus"
          }
        }
      }
    },
    "TaskGroup": {
      "type": "object",
      "id": "TaskGroup",
      "properties": {
        "taskCountPerNode": {
          "format": "int64",
          "description": "Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\"."
        },
        "permissiveSsh": {
          "type": "boolean",
          "description": "When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup."
        },
        "taskEnvironments": {
          "description": "An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).",
          "items": {
            "$ref": "Environment"
          },
          "type": "array"
        },
        "schedulingPolicy": {
          "description": "Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Run Tasks as soon as resources are available. Tasks might be executed in parallel depending on parallelism and task_count values.",
            "Run Tasks sequentially with increased task index."
          ],
          "enum": [
            "SCHEDULING_POLICY_UNSPECIFIED",
            "AS_SOON_AS_POSSIBLE",
            "IN_ORDER"
          ]
        },
        "requireHostsFile": {
          "description": "When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.",
          "type": "boolean"
        },
        "taskCount": {
          "format": "int64",
          "type": "string",
          "description": "Number of Tasks in the TaskGroup. Default is 1."
        },
        "taskSpec": {
          "$ref": "TaskSpec",
          "description": "Required. Tasks in the group share the same task spec."
        },
        "parallelism": {
          "format": "int64",
          "description": "Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.",
          "type": "string"
        }
      },
      "description": "A TaskGroup defines one or more Tasks that all share the same TaskSpec."
    },
    "ReportAgentStateResponse": {
      "id": "ReportAgentStateResponse",
      "description": "Response to ReportAgentStateRequest.",
      "properties": {
        "minReportInterval": {
          "description": "Minimum report interval override",
          "type": "string",
          "format": "google-duration"
        },
        "tasks": {
          "type": "array",
          "description": "Tasks assigned to the agent",
          "items": {
            "$ref": "AgentTask"
          }
        },
        "defaultReportInterval": {
          "description": "Default report interval override",
          "type": "string",
          "format": "google-duration"
        }
      },
      "type": "object"
    },
    "Message": {
      "properties": {
        "newTaskState": {
          "enumDescriptions": [
            "Unknown state.",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded.",
            "The Task has not been executed when the Job finishes."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED",
            "UNEXECUTED"
          ],
          "description": "The new task state.",
          "type": "string"
        },
        "newJobState": {
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "SCHEDULED",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "DELETION_IN_PROGRESS"
          ],
          "type": "string",
          "description": "The new job state.",
          "enumDescriptions": [
            "Job state unspecified.",
            "Job is admitted (validated and persisted) and waiting for resources.",
            "Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.",
            "Resource allocation has been successful. At least one Task in the Job is RUNNING.",
            "All Tasks in the Job have finished successfully.",
            "At least one Task in the Job has failed.",
            "The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up."
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "JOB_STATE_CHANGED",
            "TASK_STATE_CHANGED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Notify users that the job state has changed.",
            "Notify users that the task state has changed."
          ],
          "description": "The message type."
        }
      },
      "type": "object",
      "id": "Message",
      "description": "Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state."
    },
    "Script": {
      "id": "Script",
      "properties": {
        "path": {
          "type": "string",
          "description": "Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`."
        },
        "text": {
          "description": "Shell script text. To specify an interpreter, please add a `#!\\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`.",
          "type": "string"
        }
      },
      "description": "Script runnable.",
      "type": "object"
    },
    "StatusEvent": {
      "type": "object",
      "id": "StatusEvent",
      "description": "Status event",
      "properties": {
        "type": {
          "description": "Type of the event.",
          "type": "string"
        },
        "taskExecution": {
          "$ref": "TaskExecution",
          "description": "Task Execution"
        },
        "description": {
          "description": "Description of the event.",
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The time this event occurred.",
          "format": "google-datetime"
        },
        "taskState": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED",
            "UNEXECUTED"
          ],
          "description": "Task State",
          "enumDescriptions": [
            "Unknown state.",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded.",
            "The Task has not been executed when the Job finishes."
          ]
        }
      }
    },
    "ComputeResource": {
      "id": "ComputeResource",
      "type": "object",
      "description": "Compute resource requirements. ComputeResource defines the amount of resources required for each task. Make sure your tasks have enough resources to successfully run. If you also define the types of resources for a job to use with the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure both fields are compatible with each other.",
      "properties": {
        "memoryMib": {
          "format": "int64",
          "type": "string",
          "description": "Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less."
        },
        "bootDiskMib": {
          "format": "int64",
          "description": "Extra boot disk size in MiB for each task.",
          "type": "string"
        },
        "cpuMilli": {
          "description": "The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "JobNotification": {
      "description": "Notification configurations.",
      "type": "object",
      "properties": {
        "pubsubTopic": {
          "type": "string",
          "description": "The Pub/Sub topic where notifications like the job state changes will be published. The topic must exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`."
        },
        "message": {
          "$ref": "Message",
          "description": "The attribute requirements of messages to be sent to this Pub/Sub topic. Without this field, no message will be sent."
        }
      },
      "id": "JobNotification"
    },
    "AgentTimingInfo": {
      "id": "AgentTimingInfo",
      "description": "VM timing information",
      "type": "object",
      "properties": {
        "scriptStartupTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Startup time of the Batch VM script."
        },
        "bootTime": {
          "description": "Boot timestamp of the VM OS",
          "format": "google-datetime",
          "type": "string"
        },
        "agentStartupTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Agent startup time"
        }
      }
    },
    "TaskGroupStatus": {
      "type": "object",
      "id": "TaskGroupStatus",
      "properties": {
        "instances": {
          "description": "Status of instances allocated for the TaskGroup.",
          "items": {
            "$ref": "InstanceStatus"
          },
          "type": "array"
        },
        "counts": {
          "type": "object",
          "description": "Count of task in each state in the TaskGroup. The map key is task state name.",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          }
        }
      },
      "description": "Aggregated task status for a TaskGroup."
    },
    "AttachedDisk": {
      "description": "A new or an existing persistent disk (PD) or a local ssd attached to a VM instance.",
      "properties": {
        "newDisk": {
          "$ref": "Disk"
        },
        "deviceName": {
          "type": "string",
          "description": "Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes."
        },
        "existingDisk": {
          "description": "Name of an existing PD.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AttachedDisk"
    },
    "Volume": {
      "type": "object",
      "id": "Volume",
      "properties": {
        "mountOptions": {
          "description": "For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mountPath": {
          "type": "string",
          "description": "The mount path for the volume, e.g. /mnt/disks/share."
        },
        "nfs": {
          "description": "A Network File System (NFS) volume. For example, a Filestore file share.",
          "$ref": "NFS"
        },
        "gcs": {
          "description": "A Google Cloud Storage (GCS) volume.",
          "$ref": "GCS"
        },
        "deviceName": {
          "type": "string",
          "description": "Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template."
        }
      },
      "description": "Volume describes a volume and parameters for it to be mounted to a VM."
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "Location"
          },
          "description": "A list of locations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The response message for Locations.ListLocations."
    },
    "CancelOperationRequest": {
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest",
      "type": "object"
    },
    "NetworkPolicy": {
      "id": "NetworkPolicy",
      "properties": {
        "networkInterfaces": {
          "type": "array",
          "description": "Network configurations.",
          "items": {
            "$ref": "NetworkInterface"
          }
        }
      },
      "type": "object",
      "description": "NetworkPolicy describes VM instance network configurations."
    },
    "ListTasksResponse": {
      "type": "object",
      "id": "ListTasksResponse",
      "properties": {
        "nextPageToken": {
          "description": "Next page token.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tasks": {
          "description": "Tasks.",
          "items": {
            "$ref": "Task"
          },
          "type": "array"
        }
      },
      "description": "ListTasks Response."
    },
    "PlacementPolicy": {
      "properties": {
        "collocation": {
          "type": "string",
          "description": "UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED."
        },
        "maxDistance": {
          "type": "string",
          "format": "int64",
          "description": "When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented"
        }
      },
      "description": "PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.",
      "id": "PlacementPolicy",
      "type": "object"
    },
    "AgentEnvironment": {
      "type": "object",
      "id": "AgentEnvironment",
      "description": "AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.",
      "properties": {
        "secretVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.",
          "type": "object"
        },
        "variables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of environment variable names to values.",
          "type": "object"
        },
        "encryptedVariables": {
          "description": "An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values.",
          "$ref": "AgentKMSEnvMap"
        }
      }
    },
    "Operation": {
      "properties": {
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "response": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation"
    },
    "Job": {
      "properties": {
        "status": {
          "readOnly": true,
          "$ref": "JobStatus",
          "description": "Output only. Job status. It is read only for users."
        },
        "allocationPolicy": {
          "description": "Compute resource allocation for all TaskGroups in the Job.",
          "$ref": "AllocationPolicy"
        },
        "priority": {
          "description": "Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.",
          "format": "int64",
          "type": "string"
        },
        "uid": {
          "readOnly": true,
          "description": "Output only. A system generated unique ID (in UUID4 format) for the Job.",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. The last time the Job was updated.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. When the Job was created."
        },
        "labels": {
          "description": "Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": { \"department\": \"finance\", \"environment\": \"test\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "taskGroups": {
          "items": {
            "$ref": "TaskGroup"
          },
          "description": "Required. TaskGroups in the Job. Only one TaskGroup is supported now.",
          "type": "array"
        },
        "name": {
          "description": "Output only. Job name. For example: \"projects/123456/locations/us-central1/jobs/job01\".",
          "readOnly": true,
          "type": "string"
        },
        "logsPolicy": {
          "description": "Log preservation policy for the Job.",
          "$ref": "LogsPolicy"
        },
        "notifications": {
          "type": "array",
          "description": "Notification configurations.",
          "items": {
            "$ref": "JobNotification"
          }
        }
      },
      "description": "The Cloud Batch Job description.",
      "type": "object",
      "id": "Job"
    },
    "ListJobsResponse": {
      "id": "ListJobsResponse",
      "properties": {
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Next page token.",
          "type": "string"
        },
        "jobs": {
          "items": {
            "$ref": "Job"
          },
          "type": "array",
          "description": "Jobs."
        }
      },
      "type": "object",
      "description": "ListJob Response."
    },
    "Runnable": {
      "id": "Runnable",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels for this Runnable.",
          "type": "object"
        },
        "background": {
          "description": "This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).",
          "type": "boolean"
        },
        "timeout": {
          "type": "string",
          "description": "Timeout for this Runnable.",
          "format": "google-duration"
        },
        "script": {
          "$ref": "Script",
          "description": "Script runnable."
        },
        "container": {
          "description": "Container runnable.",
          "$ref": "Container"
        },
        "environment": {
          "$ref": "Environment",
          "description": "Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup)."
        },
        "ignoreExitStatus": {
          "type": "boolean",
          "description": "Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead."
        },
        "barrier": {
          "$ref": "Barrier",
          "description": "Barrier runnable."
        },
        "alwaysRun": {
          "type": "boolean",
          "description": "By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables."
        }
      },
      "type": "object",
      "description": "Runnable describes instructions for executing a specific script or container as part of a Task."
    },
    "AgentMetadata": {
      "id": "AgentMetadata",
      "description": "VM Agent Metadata.",
      "properties": {
        "instance": {
          "description": "GCP instance name (go/instance-name).",
          "type": "string"
        },
        "instanceId": {
          "description": "GCP instance ID (go/instance-id).",
          "format": "uint64",
          "type": "string"
        },
        "instancePreemptionNoticeReceived": {
          "type": "boolean",
          "description": "If the GCP instance has received preemption notice."
        },
        "imageVersion": {
          "description": "image version for the VM that this agent is installed on.",
          "type": "string"
        },
        "zone": {
          "description": "Agent zone.",
          "type": "string"
        },
        "creator": {
          "description": "Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of \"created-by\".",
          "type": "string"
        },
        "creationTime": {
          "deprecated": true,
          "format": "google-datetime",
          "type": "string",
          "description": "When the VM agent started. Use agent_startup_time instead."
        },
        "osRelease": {
          "description": "parsed contents of /etc/os-release",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "description": "agent binary version running on VM",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array"
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "AgentKMSEnvMap": {
      "properties": {
        "cipherText": {
          "type": "string",
          "description": "The value of the cipherText response from the `encrypt` method."
        },
        "keyName": {
          "type": "string",
          "description": "The name of the KMS key that will be used to decrypt the cipher text."
        }
      },
      "id": "AgentKMSEnvMap",
      "description": "AgentKMSEnvMap contains the encrypted key/value pair to be used in the environment on the Agent side.",
      "type": "object"
    },
    "ListOperationsResponse": {
      "type": "object",
      "id": "ListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "Operation"
          },
          "description": "A list of operations that matches the specified filter in the request."
        }
      },
      "description": "The response message for Operations.ListOperations."
    },
    "LifecyclePolicy": {
      "description": "LifecyclePolicy describes how to deal with task failures based on different conditions.",
      "id": "LifecyclePolicy",
      "properties": {
        "actionCondition": {
          "description": "Conditions that decide why a task failure is dealt with a specific action.",
          "$ref": "ActionCondition"
        },
        "action": {
          "enumDescriptions": [
            "Action unspecified.",
            "Action that tasks in the group will be scheduled to re-execute.",
            "Action that tasks in the group will be stopped immediately."
          ],
          "enum": [
            "ACTION_UNSPECIFIED",
            "RETRY_TASK",
            "FAIL_TASK"
          ],
          "type": "string",
          "description": "Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found."
        }
      },
      "type": "object"
    },
    "ReportAgentStateRequest": {
      "properties": {
        "agentTimingInfo": {
          "$ref": "AgentTimingInfo",
          "description": "Agent timing info."
        },
        "metadata": {
          "$ref": "AgentMetadata",
          "description": "Agent metadata."
        },
        "agentInfo": {
          "description": "Agent info.",
          "$ref": "AgentInfo"
        }
      },
      "description": "Request to report agent's state. The Request itself implies the agent is healthy.",
      "type": "object",
      "id": "ReportAgentStateRequest"
    },
    "AgentInfo": {
      "description": "VM Agent Info.",
      "id": "AgentInfo",
      "type": "object",
      "properties": {
        "state": {
          "description": "Agent state.",
          "enum": [
            "AGENT_STATE_UNSPECIFIED",
            "AGENT_STARTING",
            "AGENT_RUNNING",
            "AGENT_STOPPED"
          ],
          "enumDescriptions": [
            "Unspecified state.",
            "The agent is starting on the VM instance.",
            "The agent is running. The agent in the RUNNING state can never go back to the STARTING state.",
            "The agent has stopped, either on request or due to a failure."
          ],
          "type": "string"
        },
        "jobId": {
          "type": "string",
          "description": "Optional. The assigned Job ID"
        },
        "tasks": {
          "description": "Task Info.",
          "items": {
            "$ref": "AgentTaskInfo"
          },
          "type": "array"
        },
        "taskGroupId": {
          "type": "string",
          "description": "The assigned task group ID."
        },
        "reportTime": {
          "description": "When the AgentInfo is generated.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Accelerator": {
      "type": "object",
      "description": "Accelerator describes Compute Engine accelerators to be attached to the VM.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The accelerator type. For example, \"nvidia-tesla-t4\". See `gcloud compute accelerator-types list`."
        },
        "driverVersion": {
          "description": "Optional. The NVIDIA GPU driver version that should be installed for this type. You can define the specific driver version such as \"470.103.01\", following the driver version requirements in https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver. Batch will install the specific accelerator driver if qualified.",
          "type": "string"
        },
        "count": {
          "description": "The number of accelerators of this type.",
          "type": "string",
          "format": "int64"
        },
        "installGpuDrivers": {
          "description": "Deprecated: please use instances[0].install_gpu_drivers instead.",
          "type": "boolean",
          "deprecated": true
        }
      },
      "id": "Accelerator"
    },
    "LogsPolicy": {
      "description": "LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.",
      "id": "LogsPolicy",
      "properties": {
        "logsPath": {
          "type": "string",
          "description": "The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path."
        },
        "destination": {
          "enum": [
            "DESTINATION_UNSPECIFIED",
            "CLOUD_LOGGING",
            "PATH"
          ],
          "description": "Where logs should be saved.",
          "enumDescriptions": [
            "Logs are not preserved.",
            "Logs are streamed to Cloud Logging.",
            "Logs are saved to a file path."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentScript": {
      "id": "AgentScript",
      "properties": {
        "text": {
          "type": "string",
          "description": "Shell script text. To specify an interpreter, please add a `#!\\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`."
        },
        "path": {
          "description": "Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Script runnable representation on the agent side."
    },
    "ActionCondition": {
      "properties": {
        "exitCodes": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "ActionCondition",
      "description": "Conditions for actions to deal with task failures."
    },
    "ServiceAccount": {
      "id": "ServiceAccount",
      "description": "Carries information about a Google Cloud service account.",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.",
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "description": "List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {}
    },
    "AgentTaskInfo": {
      "id": "AgentTaskInfo",
      "description": "Task Info",
      "type": "object",
      "properties": {
        "taskId": {
          "description": "ID of the Task",
          "type": "string"
        },
        "runnable": {
          "type": "string",
          "format": "int64",
          "description": "The highest index of a runnable started by the agent for this task. The runnables are indexed from 1. Value 0 is undefined."
        },
        "taskStatus": {
          "description": "The status of the Task. If we need agent specific fields we should fork the public TaskStatus into an agent specific one. Or add them below.",
          "$ref": "TaskStatus"
        }
      }
    },
    "Disk": {
      "type": "object",
      "description": "A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.",
      "properties": {
        "image": {
          "type": "string",
          "description": "URL for a VM image to use as the data source for this disk. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * `batch-debian`: use Batch Debian images. * `batch-centos`: use Batch CentOS images. * `batch-cos`: use Batch Container-Optimized images. * `batch-hpc-centos`: use Batch HPC CentOS images. * `batch-hpc-rocky`: use Batch HPC Rocky Linux images."
        },
        "type": {
          "description": "Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type \"local-ssd\". Persistent disks and boot disks use \"pd-balanced\", \"pd-extreme\", \"pd-ssd\" or \"pd-standard\".",
          "type": "string"
        },
        "diskInterface": {
          "type": "string",
          "description": "Local SSDs are available through both \"SCSI\" and \"NVMe\" interfaces. If not indicated, \"NVMe\" will be the default one for local ssds. This field is ignored for persistent disks as the interface is chosen automatically. See https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface."
        },
        "snapshot": {
          "type": "string",
          "description": "Name of a snapshot used as the data source. Snapshot is not supported as boot disk now."
        },
        "sizeGb": {
          "description": "Disk size in GB. **Non-Boot Disk**: If the `type` specifies a persistent disk, this field is ignored if `data_source` is set as `image` or `snapshot`. If the `type` specifies a local SSD, this field should be a multiple of 375 GB, otherwise, the final size will be the next greater multiple of 375 GB. **Boot Disk**: Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the `boot_disk_mib` field in task spec's `compute_resource` are defined, Batch will only honor this field. Also, this field should be no smaller than the source disk's size when the `data_source` is set as `snapshot` or `image`. For example, if you set an image as the `data_source` field and the image's default disk size 30 GB, you can only use this field to make the disk larger or equal to 30 GB.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "Disk"
    },
    "Container": {
      "description": "Container runnable.",
      "type": "object",
      "properties": {
        "blockExternalNetwork": {
          "type": "boolean",
          "description": "If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field."
        },
        "imageUri": {
          "description": "The URI to pull the container image from.",
          "type": "string"
        },
        "username": {
          "description": "Optional username for logging in to a docker registry. If username matches `projects/*/secrets/*/versions/*` then Batch will read the username from the Secret Manager.",
          "type": "string"
        },
        "password": {
          "type": "string",
          "description": "Optional password for logging in to a docker registry. If password matches `projects/*/secrets/*/versions/*` then Batch will read the password from the Secret Manager;"
        },
        "commands": {
          "items": {
            "type": "string"
          },
          "description": "Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.",
          "type": "array"
        },
        "volumes": {
          "description": "Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro If the `TaskSpec.Volumes` field is specified but this field is not, Batch will mount each volume from the host machine to the container with the same mount path by default. In this case, the default mount option for containers will be read-only (ro) for existing persistent disks and read-write (rw) for other volume types, regardless of the original mount options specified in `TaskSpec.Volumes`. If you need different mount settings, you can explicitly configure them in this field.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "type": "string",
          "description": "Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\"."
        },
        "entrypoint": {
          "description": "Overrides the `ENTRYPOINT` specified in the container.",
          "type": "string"
        }
      },
      "id": "Container"
    },
    "AllocationPolicy": {
      "type": "object",
      "properties": {
        "network": {
          "$ref": "NetworkPolicy",
          "description": "The network policy."
        },
        "location": {
          "$ref": "LocationPolicy",
          "description": "Location where compute resources should be allocated for the Job."
        },
        "placement": {
          "description": "The placement policy.",
          "$ref": "PlacementPolicy"
        },
        "serviceAccount": {
          "description": "Service account that VMs will run as.",
          "$ref": "ServiceAccount"
        },
        "labels": {
          "description": "Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "instances": {
          "description": "Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.",
          "items": {
            "$ref": "InstancePolicyOrTemplate"
          },
          "type": "array"
        }
      },
      "id": "AllocationPolicy",
      "description": "A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job."
    },
    "Task": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Task name. The name is generated from the parent TaskGroup name and 'id' field. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01\"."
        },
        "status": {
          "$ref": "TaskStatus",
          "description": "Task Status."
        }
      },
      "id": "Task",
      "description": "A Cloud Batch task."
    },
    "NetworkInterface": {
      "type": "object",
      "id": "NetworkInterface",
      "properties": {
        "network": {
          "description": "The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} * projects/{project}/global/networks/{network} * global/networks/{network}",
          "type": "string"
        },
        "noExternalIpAddress": {
          "description": "Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.",
          "type": "boolean"
        },
        "subnetwork": {
          "description": "The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} * projects/{project}/regions/{region}/subnetworks/{subnetwork} * regions/{region}/subnetworks/{subnetwork}",
          "type": "string"
        }
      },
      "description": "A network interface."
    },
    "AgentTask": {
      "type": "object",
      "properties": {
        "task": {
          "type": "string",
          "description": "Task name."
        },
        "status": {
          "description": "Task status.",
          "$ref": "TaskStatus"
        },
        "spec": {
          "description": "Task Spec. This field will be replaced by agent_task_spec below in future.",
          "$ref": "TaskSpec"
        },
        "agentTaskSpec": {
          "$ref": "AgentTaskSpec",
          "description": "AgentTaskSpec is the taskSpec representation between Agent and CLH communication. This field will replace the TaskSpec field above in future to have a better separation between user-facaing API and internal API."
        },
        "taskSource": {
          "type": "string",
          "description": "TaskSource represents the source of the task.",
          "enum": [
            "TASK_SOURCE_UNSPECIFIED",
            "BATCH_INTERNAL",
            "USER"
          ],
          "enumDescriptions": [
            "Unspecified task source.",
            "The AgentTask from this source is generated by Batch server. E.g. all the VMActions are from this source. When Batch Agent execute AgentTask from BATCH_INTERNAL, it will log stdout/err with \"batch_agent_logs\" log name.",
            "The AgentTask from this source is provided by Batch users. When Batch Agent execute AgentTask from USER, it will log stdout/err with \"batch_task_logs\" log name."
          ]
        },
        "intendedState": {
          "description": "The intended state of the task.",
          "enumDescriptions": [
            "Unspecified state.",
            "Assigned state (includes running and finished).",
            "The agent should cancel the execution of this task.",
            "Delete task from agent storage, stop reporting its state."
          ],
          "type": "string",
          "enum": [
            "INTENDED_STATE_UNSPECIFIED",
            "ASSIGNED",
            "CANCELLED",
            "DELETED"
          ]
        },
        "reachedBarrier": {
          "type": "string",
          "format": "int64",
          "description": "The highest barrier reached by all tasks in the task's TaskGroup."
        }
      },
      "id": "AgentTask",
      "description": "TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design."
    },
    "GCS": {
      "description": "Represents a Google Cloud Storage volume.",
      "properties": {
        "remotePath": {
          "description": "Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/",
          "type": "string"
        }
      },
      "id": "GCS",
      "type": "object"
    },
    "TaskStatus": {
      "type": "object",
      "properties": {
        "statusEvents": {
          "items": {
            "$ref": "StatusEvent"
          },
          "description": "Detailed info about why the state is reached.",
          "type": "array"
        },
        "state": {
          "description": "Task state",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED",
            "UNEXECUTED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown state.",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded.",
            "The Task has not been executed when the Job finishes."
          ]
        }
      },
      "description": "Status of a task",
      "id": "TaskStatus"
    },
    "OperationMetadata": {
      "properties": {
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "statusMessage": {
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true
        },
        "apiVersion": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. API version used to start the operation."
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time the operation was created.",
          "type": "string",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Server-defined resource path for the target of the operation."
        },
        "requestedCancellation": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        }
      },
      "id": "OperationMetadata",
      "type": "object",
      "description": "Represents the metadata of the long-running operation."
    },
    "KMSEnvMap": {
      "id": "KMSEnvMap",
      "properties": {
        "cipherText": {
          "type": "string",
          "description": "The value of the cipherText response from the `encrypt` method."
        },
        "keyName": {
          "description": "The name of the KMS key that will be used to decrypt the cipher text.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskExecution": {
      "type": "object",
      "id": "TaskExecution",
      "properties": {
        "exitCode": {
          "format": "int32",
          "type": "integer",
          "description": "When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success."
        }
      },
      "description": "This Task Execution field includes detail information for task execution procedures, based on StatusEvent types."
    },
    "InstancePolicyOrTemplate": {
      "id": "InstancePolicyOrTemplate",
      "properties": {
        "policy": {
          "$ref": "InstancePolicy",
          "description": "InstancePolicy."
        },
        "installGpuDrivers": {
          "type": "boolean",
          "description": "Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false. For Container-Optimized Image cases, Batch will install the accelerator driver following milestones of https://cloud.google.com/container-optimized-os/docs/release-notes. For non Container-Optimized Image cases, following https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py."
        },
        "instanceTemplate": {
          "description": "Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.",
          "type": "string"
        }
      },
      "description": "InstancePolicyOrTemplate lets you define the type of resources to use for this job either with an InstancePolicy or an instance template. If undefined, Batch picks the type of VM to use and doesn't include optional VM resources such as GPUs and extra disks.",
      "type": "object"
    },
    "NFS": {
      "description": "Represents an NFS volume.",
      "properties": {
        "server": {
          "type": "string",
          "description": "The IP address of the NFS."
        },
        "remotePath": {
          "description": "Remote source path exported from the NFS, e.g., \"/share\".",
          "type": "string"
        }
      },
      "id": "NFS",
      "type": "object"
    }
  },
  "baseUrl": "https://batch.googleapis.com/",
  "version_module": true,
  "title": "Batch API",
  "protocol": "rest",
  "name": "batch",
  "discoveryVersion": "v1",
  "servicePath": ""
}

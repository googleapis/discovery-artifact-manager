{
  "servicePath": "",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "list": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "batch.projects.locations.operations.list",
                  "httpMethod": "GET",
                  "path": "v1/{+name}/operations",
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "parameters": {
                    "pageSize": {
                      "description": "The standard list page size.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "The standard list page token.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The standard list filter."
                    }
                  }
                },
                "delete": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "The name of the operation resource to be deleted.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "DELETE",
                  "id": "batch.projects.locations.operations.delete",
                  "path": "v1/{+name}",
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."
                },
                "cancel": {
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "type": "string",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "path": "v1/{+name}:cancel",
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "batch.projects.locations.operations.cancel"
                },
                "get": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "id": "batch.projects.locations.operations.get",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "The name of the operation resource.",
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                }
              }
            },
            "jobs": {
              "methods": {
                "delete": {
                  "id": "batch.projects.locations.jobs.delete",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "requestId": {
                      "location": "query",
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "type": "string"
                    },
                    "name": {
                      "description": "Job name.",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+$"
                    },
                    "reason": {
                      "description": "Optional. Reason for this deletion.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "description": "Delete a Job.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "get": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
                  "description": "Get a Job specified by its resource name.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Job"
                  },
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "id": "batch.projects.locations.jobs.get",
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Required. Job name.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+$"
                    }
                  }
                },
                "create": {
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Required. The parent resource name where the Job will be created. Pattern: \"projects/{project}/locations/{location}\""
                    },
                    "requestId": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
                    },
                    "jobId": {
                      "location": "query",
                      "description": "ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters and must start with lowercase characters. Only lowercase characters, numbers and '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be \"{parent}/jobs/{job_id}\".",
                      "type": "string"
                    }
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "description": "Create a Job.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Job"
                  },
                  "path": "v1/{+parent}/jobs",
                  "id": "batch.projects.locations.jobs.create",
                  "request": {
                    "$ref": "Job"
                  }
                },
                "list": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "orderBy": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. Sort results. Supported are \"name\", \"name desc\", \"create_time\", and \"create_time desc\"."
                    },
                    "pageToken": {
                      "description": "Page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "description": "Page size.",
                      "format": "int32",
                      "location": "query"
                    },
                    "filter": {
                      "description": "List filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "required": true,
                      "type": "string",
                      "description": "Parent path.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListJobsResponse"
                  },
                  "id": "batch.projects.locations.jobs.list",
                  "description": "List all Jobs for a project within a region.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs",
                  "path": "v1/{+parent}/jobs"
                }
              },
              "resources": {
                "taskGroups": {
                  "resources": {
                    "tasks": {
                      "methods": {
                        "list": {
                          "path": "v1/{+parent}/tasks",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "response": {
                            "$ref": "ListTasksResponse"
                          },
                          "parameters": {
                            "pageToken": {
                              "location": "query",
                              "type": "string",
                              "description": "Page token."
                            },
                            "pageSize": {
                              "type": "integer",
                              "description": "Page size.",
                              "location": "query",
                              "format": "int32"
                            },
                            "filter": {
                              "description": "Task filter, null filter matches all Tasks. Filter string should be of the format State=TaskStatus.State e.g. State=RUNNING",
                              "location": "query",
                              "type": "string"
                            },
                            "parent": {
                              "required": true,
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+/taskGroups/[^/]+$",
                              "type": "string",
                              "description": "Required. Name of a TaskGroup from which Tasks are being requested. Pattern: \"projects/{project}/locations/{location}/jobs/{job}/taskGroups/{task_group}\""
                            }
                          },
                          "id": "batch.projects.locations.jobs.taskGroups.tasks.list",
                          "parameterOrder": [
                            "parent"
                          ],
                          "httpMethod": "GET",
                          "description": "List Tasks associated with a job.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks"
                        },
                        "get": {
                          "parameterOrder": [
                            "name"
                          ],
                          "description": "Return a single Task.",
                          "response": {
                            "$ref": "Task"
                          },
                          "httpMethod": "GET",
                          "path": "v1/{+name}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks/{tasksId}",
                          "parameters": {
                            "name": {
                              "type": "string",
                              "location": "path",
                              "required": true,
                              "description": "Required. Task name.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/jobs/[^/]+/taskGroups/[^/]+/tasks/[^/]+$"
                            }
                          },
                          "id": "batch.projects.locations.jobs.taskGroups.tasks.get",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            "state": {
              "methods": {
                "report": {
                  "path": "v1/{+parent}/state:report",
                  "id": "batch.projects.locations.state.report",
                  "response": {
                    "$ref": "ReportAgentStateResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Format: projects/{project}/locations/{location} {project} should be a project number."
                    }
                  },
                  "description": "Report agent's state, e.g. agent status and tasks information",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "ReportAgentStateRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/state:report"
                }
              }
            }
          },
          "methods": {
            "get": {
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets information about a location.",
              "response": {
                "$ref": "Location"
              },
              "httpMethod": "GET",
              "id": "batch.projects.locations.get",
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "required": true,
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}"
            },
            "list": {
              "flatPath": "v1/projects/{projectsId}/locations",
              "path": "v1/{+name}/locations",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "id": "batch.projects.locations.list",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "description": "Lists information about the supported locations for this service.",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160)."
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "location": "query",
                  "description": "The maximum number of results to return. If not set, the service selects a default."
                }
              }
            }
          }
        }
      }
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "version": "v1",
  "fullyEncodeReservedExpansion": true,
  "documentationLink": "https://cloud.google.com/batch/",
  "parameters": {
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    }
  },
  "batchPath": "batch",
  "rootUrl": "https://batch.googleapis.com/",
  "protocol": "rest",
  "schemas": {
    "ReportAgentStateResponse": {
      "id": "ReportAgentStateResponse",
      "properties": {
        "defaultReportInterval": {
          "format": "google-duration",
          "type": "string",
          "description": "Default report interval override"
        },
        "tasks": {
          "type": "array",
          "description": "Tasks assigned to the agent",
          "items": {
            "$ref": "AgentTask"
          }
        },
        "minReportInterval": {
          "description": "Minimum report interval override",
          "format": "google-duration",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response to ReportAgentStateRequest."
    },
    "CancelOperationRequest": {
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "id": "CancelOperationRequest"
    },
    "StatusEvent": {
      "properties": {
        "taskState": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED",
            "UNEXECUTED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown state.",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded.",
            "The Task has not been executed when the Job finishes."
          ],
          "description": "Task State"
        },
        "eventTime": {
          "type": "string",
          "description": "The time this event occurred.",
          "format": "google-datetime"
        },
        "type": {
          "type": "string",
          "description": "Type of the event."
        },
        "description": {
          "description": "Description of the event.",
          "type": "string"
        },
        "taskExecution": {
          "description": "Task Execution",
          "$ref": "TaskExecution"
        }
      },
      "type": "object",
      "id": "StatusEvent",
      "description": "Status event"
    },
    "NetworkPolicy": {
      "properties": {
        "networkInterfaces": {
          "description": "Network configurations.",
          "items": {
            "$ref": "NetworkInterface"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "NetworkPolicy",
      "description": "NetworkPolicy describes VM instance network configurations."
    },
    "AgentTaskRunnable": {
      "properties": {
        "container": {
          "description": "Container runnable.",
          "$ref": "AgentContainer"
        },
        "environment": {
          "description": "Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup).",
          "$ref": "AgentEnvironment"
        },
        "timeout": {
          "description": "Timeout for this Runnable.",
          "type": "string",
          "format": "google-duration"
        },
        "alwaysRun": {
          "type": "boolean",
          "description": "By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables."
        },
        "script": {
          "$ref": "AgentScript",
          "description": "Script runnable."
        },
        "background": {
          "type": "boolean",
          "description": "This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers)."
        },
        "ignoreExitStatus": {
          "description": "Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.",
          "type": "boolean"
        }
      },
      "id": "AgentTaskRunnable",
      "description": "AgentTaskRunnable is the Runnable representation between Agent and CLH communication.",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      },
      "id": "Operation",
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "ListJobsResponse": {
      "description": "ListJob Response.",
      "type": "object",
      "properties": {
        "unreachable": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Locations that could not be reached."
        },
        "jobs": {
          "type": "array",
          "description": "Jobs.",
          "items": {
            "$ref": "Job"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Next page token."
        }
      },
      "id": "ListJobsResponse"
    },
    "TaskSpec": {
      "type": "object",
      "id": "TaskSpec",
      "description": "Spec of a task",
      "properties": {
        "runnables": {
          "items": {
            "$ref": "Runnable"
          },
          "description": "The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.",
          "type": "array"
        },
        "environment": {
          "$ref": "Environment",
          "description": "Environment variables to set before running the Task."
        },
        "environments": {
          "deprecated": true,
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Deprecated: please use environment(non-plural) instead."
        },
        "volumes": {
          "description": "Volumes to mount before running Tasks using this TaskSpec.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        },
        "maxRetryCount": {
          "description": "Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].",
          "format": "int32",
          "type": "integer"
        },
        "computeResource": {
          "description": "ComputeResource requirements.",
          "$ref": "ComputeResource"
        },
        "maxRunDuration": {
          "format": "google-duration",
          "description": "Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.",
          "type": "string"
        },
        "lifecyclePolicies": {
          "items": {
            "$ref": "LifecyclePolicy"
          },
          "description": "Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.",
          "type": "array"
        }
      }
    },
    "Script": {
      "description": "Script runnable.",
      "id": "Script",
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`."
        },
        "text": {
          "description": "Shell script text. To specify an interpreter, please add a `#!\\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`.",
          "type": "string"
        }
      }
    },
    "ListLocationsResponse": {
      "properties": {
        "locations": {
          "items": {
            "$ref": "Location"
          },
          "type": "array",
          "description": "A list of locations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "id": "ListLocationsResponse"
    },
    "AgentTaskSpec": {
      "id": "AgentTaskSpec",
      "properties": {
        "maxRunDuration": {
          "description": "Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.",
          "format": "google-duration",
          "type": "string"
        },
        "environment": {
          "$ref": "AgentEnvironment",
          "description": "Environment variables to set before running the Task."
        },
        "runnables": {
          "items": {
            "$ref": "AgentTaskRunnable"
          },
          "description": "AgentTaskRunnable is runanbles that will be executed on the agent.",
          "type": "array"
        }
      },
      "description": "AgentTaskSpec is the user's TaskSpec representation between Agent and CLH communication.",
      "type": "object"
    },
    "AgentTaskInfo": {
      "type": "object",
      "id": "AgentTaskInfo",
      "description": "Task Info",
      "properties": {
        "taskStatus": {
          "description": "The status of the Task. If we need agent specific fields we should fork the public TaskStatus into an agent specific one. Or add them below.",
          "$ref": "TaskStatus"
        },
        "taskId": {
          "type": "string",
          "description": "ID of the Task"
        },
        "runnable": {
          "type": "string",
          "format": "int64",
          "description": "The highest index of a runnable started by the agent for this task. The runnables are indexed from 1. Value 0 is undefined."
        }
      }
    },
    "Barrier": {
      "properties": {
        "name": {
          "description": "Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.",
          "type": "string"
        }
      },
      "description": "Barrier runnable blocks until all tasks in a taskgroup reach it.",
      "type": "object",
      "id": "Barrier"
    },
    "NFS": {
      "type": "object",
      "id": "NFS",
      "description": "Represents an NFS volume.",
      "properties": {
        "server": {
          "description": "The IP address of the NFS.",
          "type": "string"
        },
        "remotePath": {
          "type": "string",
          "description": "Remote source path exported from the NFS, e.g., \"/share\"."
        }
      }
    },
    "ServiceAccount": {
      "type": "object",
      "properties": {
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default."
        },
        "email": {
          "type": "string",
          "description": "Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here."
        }
      },
      "id": "ServiceAccount",
      "description": "Carries information about a Google Cloud service account."
    },
    "AllocationPolicy": {
      "description": "A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.",
      "type": "object",
      "properties": {
        "placement": {
          "description": "The placement policy.",
          "$ref": "PlacementPolicy"
        },
        "labels": {
          "description": "Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "network": {
          "description": "The network policy.",
          "$ref": "NetworkPolicy"
        },
        "instances": {
          "description": "Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.",
          "type": "array",
          "items": {
            "$ref": "InstancePolicyOrTemplate"
          }
        },
        "serviceAccount": {
          "$ref": "ServiceAccount",
          "description": "Service account that VMs will run as."
        },
        "location": {
          "description": "Location where compute resources should be allocated for the Job.",
          "$ref": "LocationPolicy"
        }
      },
      "id": "AllocationPolicy"
    },
    "ActionCondition": {
      "description": "Conditions for actions to deal with task failures.",
      "properties": {
        "exitCodes": {
          "description": "Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "id": "ActionCondition",
      "type": "object"
    },
    "KMSEnvMap": {
      "id": "KMSEnvMap",
      "type": "object",
      "properties": {
        "keyName": {
          "description": "The name of the KMS key that will be used to decrypt the cipher text.",
          "type": "string"
        },
        "cipherText": {
          "type": "string",
          "description": "The value of the cipherText response from the `encrypt` method."
        }
      }
    },
    "Environment": {
      "type": "object",
      "description": "An Environment describes a collection of environment variables to set when executing Tasks.",
      "properties": {
        "encryptedVariables": {
          "description": "An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values.",
          "$ref": "KMSEnvMap"
        },
        "secretVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable."
        },
        "variables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of environment variable names to values.",
          "type": "object"
        }
      },
      "id": "Environment"
    },
    "InstancePolicy": {
      "type": "object",
      "properties": {
        "minCpuPlatform": {
          "type": "string",
          "description": "The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform."
        },
        "provisioningModel": {
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            "STANDARD",
            "SPOT",
            "PREEMPTIBLE"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Standard VM.",
            "SPOT VM.",
            "Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported."
          ],
          "type": "string",
          "description": "The provisioning model."
        },
        "machineType": {
          "type": "string",
          "description": "The Compute Engine machine type."
        },
        "disks": {
          "type": "array",
          "description": "Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.",
          "items": {
            "$ref": "AttachedDisk"
          }
        },
        "accelerators": {
          "description": "The accelerators attached to each VM instance.",
          "type": "array",
          "items": {
            "$ref": "Accelerator"
          }
        },
        "bootDisk": {
          "description": "Boot disk to be created and attached to each VM by this InstancePolicy. Boot disk will be deleted when the VM is deleted. Batch API now only supports booting from image.",
          "$ref": "Disk"
        }
      },
      "description": "InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.",
      "id": "InstancePolicy"
    },
    "Disk": {
      "description": "A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.",
      "id": "Disk",
      "type": "object",
      "properties": {
        "diskInterface": {
          "description": "Local SSDs are available through both \"SCSI\" and \"NVMe\" interfaces. If not indicated, \"NVMe\" will be the default one for local ssds. This field is ignored for persistent disks as the interface is chosen automatically. See https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface.",
          "type": "string"
        },
        "image": {
          "description": "URL for a VM image to use as the data source for this disk. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * `batch-debian`: use Batch Debian images. * `batch-centos`: use Batch CentOS images. * `batch-cos`: use Batch Container-Optimized images. * `batch-hpc-centos`: use Batch HPC CentOS images.",
          "type": "string"
        },
        "sizeGb": {
          "format": "int64",
          "type": "string",
          "description": "Disk size in GB. **Non-Boot Disk**: If the `type` specifies a persistent disk, this field is ignored if `data_source` is set as `image` or `snapshot`. If the `type` specifies a local SSD, this field should be a multiple of 375 GB, otherwise, the final size will be the next greater multiple of 375 GB. **Boot Disk**: Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the `boot_disk_mib` field in task spec's `compute_resource` are defined, Batch will only honor this field. Also, this field should be no smaller than the source disk's size when the `data_source` is set as `snapshot` or `image`. For example, if you set an image as the `data_source` field and the image's default disk size 30 GB, you can only use this field to make the disk larger or equal to 30 GB."
        },
        "snapshot": {
          "type": "string",
          "description": "Name of a snapshot used as the data source. Snapshot is not supported as boot disk now."
        },
        "type": {
          "description": "Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type \"local-ssd\". Persistent disks and boot disks use \"pd-balanced\", \"pd-extreme\", \"pd-ssd\" or \"pd-standard\".",
          "type": "string"
        }
      }
    },
    "LocationPolicy": {
      "type": "object",
      "properties": {
        "allowedLocations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, [\"regions/us-central1\"] allow VMs in any zones in region us-central1. [\"zones/us-central1-a\", \"zones/us-central1-c\"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, [\"regions/us-central1\", \"zones/us-central1-a\", \"zones/us-central1-b\", \"zones/us-west1-a\"] contains 2 regions \"us-central1\" and \"us-west1\". An error is expected in this case."
        }
      },
      "id": "LocationPolicy"
    },
    "TaskExecution": {
      "description": "This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.",
      "properties": {
        "exitCode": {
          "format": "int32",
          "description": "When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success.",
          "type": "integer"
        }
      },
      "type": "object",
      "id": "TaskExecution"
    },
    "Volume": {
      "id": "Volume",
      "type": "object",
      "properties": {
        "mountPath": {
          "type": "string",
          "description": "The mount path for the volume, e.g. /mnt/disks/share."
        },
        "mountOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html)."
        },
        "deviceName": {
          "description": "Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.",
          "type": "string"
        },
        "nfs": {
          "$ref": "NFS",
          "description": "A Network File System (NFS) volume. For example, a Filestore file share."
        },
        "gcs": {
          "$ref": "GCS",
          "description": "A Google Cloud Storage (GCS) volume."
        }
      },
      "description": "Volume describes a volume and parameters for it to be mounted to a VM."
    },
    "AgentMetadata": {
      "type": "object",
      "description": "VM Agent Metadata.",
      "properties": {
        "creationTime": {
          "deprecated": true,
          "type": "string",
          "description": "When the VM agent started. Use agent_startup_time instead.",
          "format": "google-datetime"
        },
        "creator": {
          "description": "Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of \"created-by\".",
          "type": "string"
        },
        "imageVersion": {
          "description": "image version for the VM that this agent is installed on.",
          "type": "string"
        },
        "version": {
          "description": "agent binary version running on VM",
          "type": "string"
        },
        "instance": {
          "type": "string",
          "description": "GCP instance name (go/instance-name)."
        },
        "zone": {
          "type": "string",
          "description": "Agent zone."
        },
        "instancePreemptionNoticeReceived": {
          "description": "If the GCP instance has received preemption notice.",
          "type": "boolean"
        },
        "instanceId": {
          "format": "uint64",
          "description": "GCP instance ID (go/instance-id).",
          "type": "string"
        },
        "osRelease": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "parsed contents of /etc/os-release"
        }
      },
      "id": "AgentMetadata"
    },
    "TaskStatus": {
      "description": "Status of a task",
      "id": "TaskStatus",
      "type": "object",
      "properties": {
        "statusEvents": {
          "items": {
            "$ref": "StatusEvent"
          },
          "type": "array",
          "description": "Detailed info about why the state is reached."
        },
        "state": {
          "description": "Task state",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED",
            "UNEXECUTED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown state.",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded.",
            "The Task has not been executed when the Job finishes."
          ]
        }
      }
    },
    "Runnable": {
      "id": "Runnable",
      "properties": {
        "timeout": {
          "description": "Timeout for this Runnable.",
          "format": "google-duration",
          "type": "string"
        },
        "alwaysRun": {
          "type": "boolean",
          "description": "By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables."
        },
        "barrier": {
          "description": "Barrier runnable.",
          "$ref": "Barrier"
        },
        "environment": {
          "description": "Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup).",
          "$ref": "Environment"
        },
        "labels": {
          "description": "Labels for this Runnable.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "background": {
          "description": "This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).",
          "type": "boolean"
        },
        "container": {
          "$ref": "Container",
          "description": "Container runnable."
        },
        "script": {
          "$ref": "Script",
          "description": "Script runnable."
        },
        "ignoreExitStatus": {
          "description": "Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Runnable describes instructions for executing a specific script or container as part of a Task."
    },
    "ReportAgentStateRequest": {
      "properties": {
        "agentTimingInfo": {
          "description": "Agent timing info.",
          "$ref": "AgentTimingInfo"
        },
        "metadata": {
          "description": "Agent metadata.",
          "$ref": "AgentMetadata"
        },
        "agentInfo": {
          "description": "Agent info.",
          "$ref": "AgentInfo"
        }
      },
      "id": "ReportAgentStateRequest",
      "type": "object",
      "description": "Request to report agent's state. The Request itself implies the agent is healthy."
    },
    "Job": {
      "type": "object",
      "description": "The Cloud Batch Job description.",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": { \"department\": \"finance\", \"environment\": \"test\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved."
        },
        "taskGroups": {
          "description": "Required. TaskGroups in the Job. Only one TaskGroup is supported now.",
          "items": {
            "$ref": "TaskGroup"
          },
          "type": "array"
        },
        "priority": {
          "type": "string",
          "format": "int64",
          "description": "Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied."
        },
        "updateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. The last time the Job was updated."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. When the Job was created.",
          "readOnly": true
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Job name. For example: \"projects/123456/locations/us-central1/jobs/job01\"."
        },
        "notifications": {
          "items": {
            "$ref": "JobNotification"
          },
          "description": "Notification configurations.",
          "type": "array"
        },
        "logsPolicy": {
          "$ref": "LogsPolicy",
          "description": "Log preservation policy for the Job."
        },
        "status": {
          "readOnly": true,
          "description": "Output only. Job status. It is read only for users.",
          "$ref": "JobStatus"
        },
        "allocationPolicy": {
          "$ref": "AllocationPolicy",
          "description": "Compute resource allocation for all TaskGroups in the Job."
        },
        "uid": {
          "type": "string",
          "description": "Output only. A system generated unique ID (in UUID4 format) for the Job.",
          "readOnly": true
        }
      },
      "id": "Job"
    },
    "LifecyclePolicy": {
      "type": "object",
      "id": "LifecyclePolicy",
      "description": "LifecyclePolicy describes how to deal with task failures based on different conditions.",
      "properties": {
        "actionCondition": {
          "description": "Conditions that decide why a task failure is dealt with a specific action.",
          "$ref": "ActionCondition"
        },
        "action": {
          "enumDescriptions": [
            "Action unspecified.",
            "Action that tasks in the group will be scheduled to re-execute.",
            "Action that tasks in the group will be stopped immediately."
          ],
          "type": "string",
          "enum": [
            "ACTION_UNSPECIFIED",
            "RETRY_TASK",
            "FAIL_TASK"
          ],
          "description": "Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found."
        }
      }
    },
    "AttachedDisk": {
      "properties": {
        "newDisk": {
          "$ref": "Disk"
        },
        "existingDisk": {
          "description": "Name of an existing PD.",
          "type": "string"
        },
        "deviceName": {
          "type": "string",
          "description": "Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes."
        }
      },
      "description": "A new or an existing persistent disk (PD) or a local ssd attached to a VM instance.",
      "type": "object",
      "id": "AttachedDisk"
    },
    "LogsPolicy": {
      "type": "object",
      "description": "LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.",
      "properties": {
        "destination": {
          "enumDescriptions": [
            "Logs are not preserved.",
            "Logs are streamed to Cloud Logging.",
            "Logs are saved to a file path."
          ],
          "type": "string",
          "description": "Where logs should be saved.",
          "enum": [
            "DESTINATION_UNSPECIFIED",
            "CLOUD_LOGGING",
            "PATH"
          ]
        },
        "logsPath": {
          "type": "string",
          "description": "The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path."
        }
      },
      "id": "LogsPolicy"
    },
    "InstanceStatus": {
      "description": "VM instance status.",
      "id": "InstanceStatus",
      "type": "object",
      "properties": {
        "provisioningModel": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Standard VM.",
            "SPOT VM.",
            "Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported."
          ],
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            "STANDARD",
            "SPOT",
            "PREEMPTIBLE"
          ],
          "description": "The VM instance provisioning model."
        },
        "taskPack": {
          "format": "int64",
          "type": "string",
          "description": "The max number of tasks can be assigned to this instance type."
        },
        "bootDisk": {
          "$ref": "Disk",
          "description": "The VM boot disk."
        },
        "machineType": {
          "type": "string",
          "description": "The Compute Engine machine type."
        }
      }
    },
    "AgentInfo": {
      "type": "object",
      "description": "VM Agent Info.",
      "properties": {
        "taskGroupId": {
          "type": "string",
          "description": "The assigned task group ID."
        },
        "state": {
          "enum": [
            "AGENT_STATE_UNSPECIFIED",
            "AGENT_STARTING",
            "AGENT_RUNNING",
            "AGENT_STOPPED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified state.",
            "The agent is starting on the VM instance.",
            "The agent is running. The agent in the RUNNING state can never go back to the STARTING state.",
            "The agent has stopped, either on request or due to a failure."
          ],
          "description": "Agent state."
        },
        "jobId": {
          "description": "Optional. The assigned Job ID",
          "type": "string"
        },
        "tasks": {
          "type": "array",
          "description": "Task Info.",
          "items": {
            "$ref": "AgentTaskInfo"
          }
        },
        "reportTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "When the AgentInfo is generated."
        }
      },
      "id": "AgentInfo"
    },
    "AgentKMSEnvMap": {
      "id": "AgentKMSEnvMap",
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string",
          "description": "The name of the KMS key that will be used to decrypt the cipher text."
        },
        "cipherText": {
          "type": "string",
          "description": "The value of the cipherText response from the `encrypt` method."
        }
      },
      "description": "AgentKMSEnvMap contains the encrypted key/value pair to be used in the environment on the Agent side."
    },
    "Container": {
      "properties": {
        "imageUri": {
          "type": "string",
          "description": "The URI to pull the container image from."
        },
        "options": {
          "type": "string",
          "description": "Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\"."
        },
        "volumes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro"
        },
        "commands": {
          "items": {
            "type": "string"
          },
          "description": "Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.",
          "type": "array"
        },
        "username": {
          "description": "Optional username for logging in to a docker registry. If username matches `projects/*/secrets/*/versions/*` then Batch will read the username from the Secret Manager.",
          "type": "string"
        },
        "password": {
          "type": "string",
          "description": "Optional password for logging in to a docker registry. If password matches `projects/*/secrets/*/versions/*` then Batch will read the password from the Secret Manager;"
        },
        "blockExternalNetwork": {
          "type": "boolean",
          "description": "If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field."
        },
        "entrypoint": {
          "description": "Overrides the `ENTRYPOINT` specified in the container.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Container runnable.",
      "id": "Container"
    },
    "TaskGroupStatus": {
      "id": "TaskGroupStatus",
      "properties": {
        "instances": {
          "items": {
            "$ref": "InstanceStatus"
          },
          "type": "array",
          "description": "Status of instances allocated for the TaskGroup."
        },
        "counts": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Count of task in each state in the TaskGroup. The map key is task state name."
        }
      },
      "type": "object",
      "description": "Aggregated task status for a TaskGroup."
    },
    "OperationMetadata": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time the operation finished running."
        },
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "verb": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Name of the verb executed by the operation."
        },
        "requestedCancellation": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "statusMessage": {
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string"
        },
        "target": {
          "type": "string",
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true
        }
      },
      "description": "Represents the metadata of the long-running operation.",
      "id": "OperationMetadata"
    },
    "ListOperationsResponse": {
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse"
    },
    "TaskGroup": {
      "type": "object",
      "properties": {
        "taskEnvironments": {
          "description": "An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).",
          "type": "array",
          "items": {
            "$ref": "Environment"
          }
        },
        "permissiveSsh": {
          "type": "boolean",
          "description": "When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup."
        },
        "name": {
          "readOnly": true,
          "description": "Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\".",
          "type": "string"
        },
        "requireHostsFile": {
          "type": "boolean",
          "description": "When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false."
        },
        "taskCountPerNode": {
          "type": "string",
          "format": "int64",
          "description": "Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements."
        },
        "taskCount": {
          "format": "int64",
          "type": "string",
          "description": "Number of Tasks in the TaskGroup. Default is 1."
        },
        "parallelism": {
          "format": "int64",
          "description": "Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.",
          "type": "string"
        },
        "schedulingPolicy": {
          "enum": [
            "SCHEDULING_POLICY_UNSPECIFIED",
            "AS_SOON_AS_POSSIBLE",
            "IN_ORDER"
          ],
          "type": "string",
          "description": "Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.",
          "enumDescriptions": [
            "Unspecified.",
            "Run Tasks as soon as resources are available. Tasks might be executed in parallel depending on parallelism and task_count values.",
            "Run Tasks sequentially with increased task index."
          ]
        },
        "taskSpec": {
          "$ref": "TaskSpec",
          "description": "Required. Tasks in the group share the same task spec."
        }
      },
      "description": "A TaskGroup defines one or more Tasks that all share the same TaskSpec.",
      "id": "TaskGroup"
    },
    "ListTasksResponse": {
      "id": "ListTasksResponse",
      "description": "ListTasks Response.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Next page token."
        },
        "tasks": {
          "items": {
            "$ref": "Task"
          },
          "description": "Tasks.",
          "type": "array"
        },
        "unreachable": {
          "type": "array",
          "description": "Locations that could not be reached.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "GCS": {
      "type": "object",
      "properties": {
        "remotePath": {
          "type": "string",
          "description": "Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/"
        }
      },
      "id": "GCS",
      "description": "Represents a Google Cloud Storage volume."
    },
    "NetworkInterface": {
      "description": "A network interface.",
      "type": "object",
      "id": "NetworkInterface",
      "properties": {
        "noExternalIpAddress": {
          "description": "Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.",
          "type": "boolean"
        },
        "subnetwork": {
          "description": "The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} * projects/{project}/regions/{region}/subnetworks/{subnetwork} * regions/{region}/subnetworks/{subnetwork}",
          "type": "string"
        },
        "network": {
          "type": "string",
          "description": "The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} * projects/{project}/global/networks/{network} * global/networks/{network}"
        }
      }
    },
    "JobNotification": {
      "id": "JobNotification",
      "type": "object",
      "description": "Notification configurations.",
      "properties": {
        "pubsubTopic": {
          "description": "The Pub/Sub topic where notifications like the job state changes will be published. The topic must exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.",
          "type": "string"
        },
        "message": {
          "$ref": "Message",
          "description": "The attribute requirements of messages to be sent to this Pub/Sub topic. Without this field, no message will be sent."
        }
      }
    },
    "Accelerator": {
      "id": "Accelerator",
      "description": "Accelerator describes Compute Engine accelerators to be attached to the VM.",
      "properties": {
        "driverVersion": {
          "description": "Optional. The NVIDIA GPU driver version that should be installed for this type. You can define the specific driver version such as \"470.103.01\", following the driver version requirements in https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver. Batch will install the specific accelerator driver if qualified.",
          "type": "string"
        },
        "installGpuDrivers": {
          "deprecated": true,
          "type": "boolean",
          "description": "Deprecated: please use instances[0].install_gpu_drivers instead."
        },
        "count": {
          "description": "The number of accelerators of this type.",
          "format": "int64",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The accelerator type. For example, \"nvidia-tesla-t4\". See `gcloud compute accelerator-types list`."
        }
      },
      "type": "object"
    },
    "PlacementPolicy": {
      "type": "object",
      "id": "PlacementPolicy",
      "description": "PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.",
      "properties": {
        "collocation": {
          "type": "string",
          "description": "UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED."
        },
        "maxDistance": {
          "type": "string",
          "format": "int64",
          "description": "When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented"
        }
      }
    },
    "AgentTask": {
      "id": "AgentTask",
      "description": "TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.",
      "properties": {
        "intendedState": {
          "enum": [
            "INTENDED_STATE_UNSPECIFIED",
            "ASSIGNED",
            "CANCELLED",
            "DELETED"
          ],
          "enumDescriptions": [
            "Unspecified state.",
            "Assigned state (includes running and finished).",
            "The agent should cancel the execution of this task.",
            "Delete task from agent storage, stop reporting its state."
          ],
          "type": "string",
          "description": "The intended state of the task."
        },
        "agentTaskSpec": {
          "description": "AgentTaskSpec is the taskSpec representation between Agent and CLH communication. This field will replace the TaskSpec field above in future to have a better separation between user-facaing API and internal API.",
          "$ref": "AgentTaskSpec"
        },
        "taskSource": {
          "enum": [
            "TASK_SOURCE_UNSPECIFIED",
            "BATCH_INTERNAL",
            "USER"
          ],
          "enumDescriptions": [
            "Unspecified task source.",
            "The AgentTask from this source is generated by Batch server. E.g. all the VMActions are from this source. When Batch Agent execute AgentTask from BATCH_INTERNAL, it will log stdout/err with \"batch_agent_logs\" log name.",
            "The AgentTask from this source is provided by Batch users. When Batch Agent execute AgentTask from USER, it will log stdout/err with \"batch_task_logs\" log name."
          ],
          "type": "string",
          "description": "TaskSource represents the source of the task."
        },
        "spec": {
          "$ref": "TaskSpec",
          "description": "Task Spec. This field will be replaced by agent_task_spec below in future."
        },
        "reachedBarrier": {
          "type": "string",
          "format": "int64",
          "description": "The highest barrier reached by all tasks in the task's TaskGroup."
        },
        "task": {
          "description": "Task name.",
          "type": "string"
        },
        "status": {
          "description": "Task status.",
          "$ref": "TaskStatus"
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "A resource that represents a Google Cloud location.",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "type": "object",
      "id": "Location"
    },
    "ComputeResource": {
      "properties": {
        "bootDiskMib": {
          "description": "Extra boot disk size in MiB for each task.",
          "type": "string",
          "format": "int64"
        },
        "cpuMilli": {
          "type": "string",
          "format": "int64",
          "description": "The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less."
        },
        "memoryMib": {
          "format": "int64",
          "type": "string",
          "description": "Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less."
        }
      },
      "type": "object",
      "id": "ComputeResource",
      "description": "Compute resource requirements. ComputeResource defines the amount of resources required for each task. Make sure your tasks have enough resources to successfully run. If you also define the types of resources for a job to use with the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure both fields are compatible with each other."
    },
    "AgentScript": {
      "type": "object",
      "properties": {
        "path": {
          "description": "Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`.",
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Shell script text. To specify an interpreter, please add a `#!\\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`."
        }
      },
      "description": "Script runnable representation on the agent side.",
      "id": "AgentScript"
    },
    "AgentContainer": {
      "type": "object",
      "id": "AgentContainer",
      "properties": {
        "volumes": {
          "items": {
            "type": "string"
          },
          "description": "Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro",
          "type": "array"
        },
        "options": {
          "type": "string",
          "description": "Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\"."
        },
        "entrypoint": {
          "type": "string",
          "description": "Overrides the `ENTRYPOINT` specified in the container."
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT."
        },
        "imageUri": {
          "type": "string",
          "description": "The URI to pull the container image from."
        }
      },
      "description": "Container runnable representation on the agent side."
    },
    "InstancePolicyOrTemplate": {
      "type": "object",
      "id": "InstancePolicyOrTemplate",
      "properties": {
        "policy": {
          "$ref": "InstancePolicy",
          "description": "InstancePolicy."
        },
        "installGpuDrivers": {
          "type": "boolean",
          "description": "Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false. For Container-Optimized Image cases, Batch will install the accelerator driver following milestones of https://cloud.google.com/container-optimized-os/docs/release-notes. For non Container-Optimized Image cases, following https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py."
        },
        "instanceTemplate": {
          "description": "Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.",
          "type": "string"
        }
      },
      "description": "InstancePolicyOrTemplate lets you define the type of resources to use for this job either with an InstancePolicy or an instance template. If undefined, Batch picks the type of VM to use and doesn't include optional VM resources such as GPUs and extra disks."
    },
    "Task": {
      "description": "A Cloud Batch task.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Task name. The name is generated from the parent TaskGroup name and 'id' field. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01\"."
        },
        "status": {
          "$ref": "TaskStatus",
          "description": "Task Status."
        }
      },
      "id": "Task",
      "type": "object"
    },
    "Empty": {
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty",
      "type": "object"
    },
    "AgentEnvironment": {
      "type": "object",
      "id": "AgentEnvironment",
      "description": "AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.",
      "properties": {
        "variables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "A map of environment variable names to values."
        },
        "encryptedVariables": {
          "$ref": "AgentKMSEnvMap",
          "description": "An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values."
        },
        "secretVariables": {
          "description": "A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      }
    },
    "JobStatus": {
      "type": "object",
      "id": "JobStatus",
      "properties": {
        "state": {
          "enumDescriptions": [
            "Job state unspecified.",
            "Job is admitted (validated and persisted) and waiting for resources.",
            "Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.",
            "Resource allocation has been successful. At least one Task in the Job is RUNNING.",
            "All Tasks in the Job have finished successfully.",
            "At least one Task in the Job has failed.",
            "The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "SCHEDULED",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "DELETION_IN_PROGRESS"
          ],
          "description": "Job state",
          "type": "string"
        },
        "statusEvents": {
          "description": "Job status events",
          "type": "array",
          "items": {
            "$ref": "StatusEvent"
          }
        },
        "runDuration": {
          "type": "string",
          "description": "The duration of time that the Job spent in status RUNNING.",
          "format": "google-duration"
        },
        "taskGroups": {
          "additionalProperties": {
            "$ref": "TaskGroupStatus"
          },
          "description": "Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.",
          "type": "object"
        }
      },
      "description": "Job status."
    },
    "Message": {
      "properties": {
        "type": {
          "enumDescriptions": [
            "Unspecified.",
            "Notify users that the job state has changed.",
            "Notify users that the task state has changed."
          ],
          "description": "The message type.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "JOB_STATE_CHANGED",
            "TASK_STATE_CHANGED"
          ]
        },
        "newTaskState": {
          "description": "The new task state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "ASSIGNED",
            "RUNNING",
            "FAILED",
            "SUCCEEDED",
            "UNEXECUTED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown state.",
            "The Task is created and waiting for resources.",
            "The Task is assigned to at least one VM.",
            "The Task is running.",
            "The Task has failed.",
            "The Task has succeeded.",
            "The Task has not been executed when the Job finishes."
          ]
        },
        "newJobState": {
          "enumDescriptions": [
            "Job state unspecified.",
            "Job is admitted (validated and persisted) and waiting for resources.",
            "Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.",
            "Resource allocation has been successful. At least one Task in the Job is RUNNING.",
            "All Tasks in the Job have finished successfully.",
            "At least one Task in the Job has failed.",
            "The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "SCHEDULED",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "DELETION_IN_PROGRESS"
          ],
          "description": "The new job state.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state.",
      "id": "Message"
    },
    "Status": {
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "id": "Status"
    },
    "AgentTimingInfo": {
      "id": "AgentTimingInfo",
      "description": "VM timing information",
      "type": "object",
      "properties": {
        "bootTime": {
          "format": "google-datetime",
          "description": "Boot timestamp of the VM OS",
          "type": "string"
        },
        "agentStartupTime": {
          "description": "Agent startup time",
          "format": "google-datetime",
          "type": "string"
        },
        "scriptStartupTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Startup time of the Batch VM script."
        }
      }
    }
  },
  "version_module": true,
  "title": "Batch API",
  "kind": "discovery#restDescription",
  "revision": "20230826",
  "ownerDomain": "google.com",
  "baseUrl": "https://batch.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "basePath": "",
  "canonicalName": "Batch",
  "id": "batch:v1",
  "description": "An API to manage the running of batch jobs on Google Cloud Platform.",
  "mtlsRootUrl": "https://batch.mtls.googleapis.com/",
  "name": "batch",
  "ownerName": "Google"
}

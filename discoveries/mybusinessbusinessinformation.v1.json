{
  "parameters": {
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "location": "query",
      "default": "true",
      "description": "Returns response with indentations and line breaks."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "location": "query",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    }
  },
  "mtlsRootUrl": "https://mybusinessbusinessinformation.mtls.googleapis.com/",
  "id": "mybusinessbusinessinformation:v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "version_module": true,
  "revision": "20220215",
  "basePath": "",
  "schemas": {
    "BatchGetCategoriesResponse": {
      "id": "BatchGetCategoriesResponse",
      "description": "Response message for BusinessCategories.BatchGetBusinessCategories.",
      "properties": {
        "categories": {
          "items": {
            "$ref": "Category"
          },
          "description": "Categories that match the GConcept ids provided in the request. They will not come in the same order as category ids in the request.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "TimeOfDay": {
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
      "id": "TimeOfDay",
      "properties": {
        "hours": {
          "format": "int32",
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
          "type": "integer"
        },
        "minutes": {
          "format": "int32",
          "type": "integer",
          "description": "Minutes of hour of day. Must be from 0 to 59."
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."
        },
        "seconds": {
          "format": "int32",
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Profile": {
      "id": "Profile",
      "properties": {
        "description": {
          "description": "Required. Description of the location in your own voice, not editable by anyone else.",
          "type": "string"
        }
      },
      "description": "All information pertaining to the location's profile.",
      "type": "object"
    },
    "BusinessHours": {
      "id": "BusinessHours",
      "description": "Represents the time periods that this location is open for business. Holds a collection of TimePeriod instances.",
      "properties": {
        "periods": {
          "type": "array",
          "description": "Required. A collection of times that this location is open for business. Each period represents a range of hours when the location is open during the week.",
          "items": {
            "$ref": "TimePeriod"
          }
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object",
      "id": "Empty"
    },
    "ListCategoriesResponse": {
      "type": "object",
      "description": "Response message for BusinessCategories.ListCategories.",
      "id": "ListCategoriesResponse",
      "properties": {
        "categories": {
          "items": {
            "$ref": "Category"
          },
          "description": "The matching categories based on the requested parameters.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "If the number of categories exceeded the requested page size, this field will be populated with a token to fetch the next page of categories on a subsequent call to `ListCategories`.",
          "type": "string"
        }
      }
    },
    "Categories": {
      "id": "Categories",
      "properties": {
        "additionalCategories": {
          "type": "array",
          "description": "Optional. Additional categories to describe your business. Categories help your customers find accurate, specific results for services they're interested in. To keep your business information accurate and live, make sure that you use as few categories as possible to describe your overall core business. Choose categories that are as specific as possible, but representative of your main business.",
          "items": {
            "$ref": "Category"
          }
        },
        "primaryCategory": {
          "description": "Required. Category that best describes the core business this location engages in.",
          "$ref": "Category"
        }
      },
      "description": "A collection of categories that describes the business. During updates, both fields must be set. Clients are prohibited from individually updating the primary or additional categories using the update mask.",
      "type": "object"
    },
    "Category": {
      "type": "object",
      "description": "A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see `categories.list`.",
      "properties": {
        "name": {
          "description": "Required. A stable ID (provided by Google) for this category. The value must be specified when modifying the category (when creating or updating a location).",
          "type": "string"
        },
        "displayName": {
          "description": "Output only. The human-readable name of the category. This is set when reading the location. When modifying the location, `category_id` must be set.",
          "readOnly": true,
          "type": "string"
        },
        "serviceTypes": {
          "readOnly": true,
          "items": {
            "$ref": "ServiceType"
          },
          "description": "Output only. A list of all the service types that are available for this business category.",
          "type": "array"
        },
        "moreHoursTypes": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "MoreHoursType"
          },
          "description": "Output only. More hours types that are available for this business category."
        }
      },
      "id": "Category"
    },
    "Date": {
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day, with a zero year (e.g., an anniversary) * A year on its own, with a zero month and a zero day * A year and month, with a zero day (e.g., a credit card expiration date) Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
      "properties": {
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."
        },
        "day": {
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "id": "Date"
    },
    "TimePeriod": {
      "description": "Represents a span of time that the business is open, starting on the specified open day/time and closing on the specified close day/time. The closing time must occur after the opening time, for example later in the same day, or on a subsequent day.",
      "id": "TimePeriod",
      "type": "object",
      "properties": {
        "closeDay": {
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ],
          "description": "Required. Indicates the day of the week this period ends on.",
          "enumDescriptions": [
            "The day of the week is unspecified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "type": "string"
        },
        "openTime": {
          "$ref": "TimeOfDay",
          "description": "Required. Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field."
        },
        "openDay": {
          "type": "string",
          "description": "Required. Indicates the day of the week this period starts on.",
          "enumDescriptions": [
            "The day of the week is unspecified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ]
        },
        "closeTime": {
          "$ref": "TimeOfDay",
          "description": "Required. Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field."
        }
      }
    },
    "SearchGoogleLocationsResponse": {
      "type": "object",
      "id": "SearchGoogleLocationsResponse",
      "properties": {
        "googleLocations": {
          "type": "array",
          "description": "A collection of GoogleLocations that are potential matches to the specified request, listed in order from most to least accuracy.",
          "items": {
            "$ref": "GoogleLocation"
          }
        }
      },
      "description": "Response message for GoogleLocations.SearchGoogleLocations."
    },
    "SpecialHourPeriod": {
      "description": "Represents a single time period when a location's operational hours differ from its normal business hours. A special hour period must represent a range of less than 24 hours. The `open_time` and `start_date` must predate the `close_time` and `end_date`. The `close_time` and `end_date` can extend to 11:59 a.m. on the day after the specified `start_date`. For example, the following inputs are valid: start_date=2015-11-23, open_time=08:00, close_time=18:00 start_date=2015-11-23, end_date=2015-11-23, open_time=08:00, close_time=18:00 start_date=2015-11-23, end_date=2015-11-24, open_time=13:00, close_time=11:59 The following inputs are not valid: start_date=2015-11-23, open_time=13:00, close_time=11:59 start_date=2015-11-23, end_date=2015-11-24, open_time=13:00, close_time=12:00 start_date=2015-11-23, end_date=2015-11-25, open_time=08:00, close_time=18:00",
      "type": "object",
      "properties": {
        "closed": {
          "description": "Optional. If true, `end_date`, `open_time`, and `close_time` are ignored, and the date specified in `start_date` is treated as the location being closed for the entire day.",
          "type": "boolean"
        },
        "startDate": {
          "description": "Required. The calendar date this special hour period starts on.",
          "$ref": "Date"
        },
        "openTime": {
          "description": "Optional. Valid values are 00:00-24:00 where 24:00 represents midnight at the end of the specified day field. Must be specified if `closed` is false.",
          "$ref": "TimeOfDay"
        },
        "closeTime": {
          "$ref": "TimeOfDay",
          "description": "Optional. Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field. Must be specified if `closed` is false."
        },
        "endDate": {
          "description": "Optional. The calendar date this special hour period ends on. If `end_date` field is not set, default to the date specified in `start_date`. If set, this field must be equal to or at most 1 day after `start_date`.",
          "$ref": "Date"
        }
      },
      "id": "SpecialHourPeriod"
    },
    "ServiceType": {
      "type": "object",
      "id": "ServiceType",
      "properties": {
        "serviceTypeId": {
          "readOnly": true,
          "description": "Output only. A stable ID (provided by Google) for this service type.",
          "type": "string"
        },
        "displayName": {
          "description": "Output only. The human-readable display name for the service type.",
          "readOnly": true,
          "type": "string"
        }
      },
      "description": "A message describing a service type that the business offers."
    },
    "ListAttributeMetadataResponse": {
      "description": "Response for AttributesService.ListAttributeMetadata.",
      "id": "ListAttributeMetadataResponse",
      "properties": {
        "attributeMetadata": {
          "items": {
            "$ref": "AttributeMetadata"
          },
          "type": "array",
          "description": "A collection of attribute metadata for the available attributes."
        },
        "nextPageToken": {
          "type": "string",
          "description": "If the number of attributes exceeded the requested page size, this field will be populated with a token to fetch the next page of attributes on a subsequent call to `attributes.list`. If there are no more attributes, this field will not be present in the response."
        }
      },
      "type": "object"
    },
    "ServiceItem": {
      "properties": {
        "price": {
          "$ref": "Money",
          "description": "Optional. Represents the monetary price of the service item. We recommend that currency_code and units should be set when including a price. This will be treated as a fixed price for the service item."
        },
        "structuredServiceItem": {
          "description": "Optional. This field will be set case of structured services data.",
          "$ref": "StructuredServiceItem"
        },
        "freeFormServiceItem": {
          "$ref": "FreeFormServiceItem",
          "description": "Optional. This field will be set case of free-form services data."
        }
      },
      "description": "A message that describes a single service item. It is used to describe the type of service that the merchant provides. For example, haircut can be a service.",
      "type": "object",
      "id": "ServiceItem"
    },
    "Label": {
      "description": "Label to be used when displaying the price list, section, or item.",
      "id": "Label",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Optional. The BCP-47 language code that these strings apply for. Only one set of labels may be set per language."
        },
        "displayName": {
          "type": "string",
          "description": "Required. Display name for the price list, section, or item."
        },
        "description": {
          "description": "Optional. Description of the price list, section, or item.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepeatedEnumAttributeValue": {
      "description": "Values for an attribute with a `value_type` of REPEATED_ENUM. This consists of two lists of value IDs: those that are set (true) and those that are unset (false). Values absent are considered unknown. At least one value must be specified.",
      "id": "RepeatedEnumAttributeValue",
      "properties": {
        "unsetValues": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Enum values that are unset."
        },
        "setValues": {
          "items": {
            "type": "string"
          },
          "description": "Enum values that are set.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "Metadata": {
      "id": "Metadata",
      "description": "Additional non-user-editable information about the location.",
      "properties": {
        "canOperateLocalPost": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if the listing can manage local posts."
        },
        "placeId": {
          "description": "Output only. If this locationappears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. This field can be set during Create calls, but not for Update.",
          "type": "string",
          "readOnly": true
        },
        "newReviewUri": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. A link to the page on Google Search where a customer can leave a review for the location."
        },
        "canHaveFoodMenus": {
          "description": "Output only. Indicates if the listing is eligible for food menu.",
          "type": "boolean",
          "readOnly": true
        },
        "canOperateHealthData": {
          "readOnly": true,
          "description": "Output only. Indicates whether the location can operate on Health data.",
          "type": "boolean"
        },
        "canDelete": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates whether the location can be deleted using the API."
        },
        "canOperateLodgingData": {
          "readOnly": true,
          "description": "Output only. Indicates whether the location can operate on Lodging data.",
          "type": "boolean"
        },
        "canModifyServiceList": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if the listing can modify the service list."
        },
        "canHaveBusinessCalls": {
          "readOnly": true,
          "description": "Output only. Indicates if the listing is eligible for business calls.",
          "type": "boolean"
        },
        "duplicateLocation": {
          "description": "Output only. The location resource that this location duplicates.",
          "readOnly": true,
          "type": "string"
        },
        "hasPendingEdits": {
          "description": "Output only. Indicates whether any of this Location's properties are in the edit pending state.",
          "type": "boolean",
          "readOnly": true
        },
        "mapsUri": {
          "description": "Output only. A link to the location on Maps.",
          "readOnly": true,
          "type": "string"
        },
        "hasGoogleUpdated": {
          "type": "boolean",
          "description": "Output only. Indicates whether the place ID associated with this location has updates that need to be updated or rejected by the client. If this boolean is set, you should call the `getGoogleUpdated` method to lookup information that's needs to be verified.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "OpenInfo": {
      "id": "OpenInfo",
      "properties": {
        "canReopen": {
          "description": "Output only. Indicates whether this business is eligible for re-open.",
          "type": "boolean",
          "readOnly": true
        },
        "status": {
          "enumDescriptions": [
            "Not specified.",
            "Indicates that the location is open.",
            "Indicates that the location has been permanently closed.",
            "Indicates that the location has been temporarily closed."
          ],
          "description": "Required. Indicates whether or not the Location is currently open for business. All locations are open by default, unless updated to be closed.",
          "enum": [
            "OPEN_FOR_BUSINESS_UNSPECIFIED",
            "OPEN",
            "CLOSED_PERMANENTLY",
            "CLOSED_TEMPORARILY"
          ],
          "type": "string"
        },
        "openingDate": {
          "description": "Optional. The date on which the location first opened. If the exact day is not known, month and year only can be provided. The date must be in the past or be no more than one year in the future.",
          "$ref": "Date"
        }
      },
      "type": "object",
      "description": "Information related to the opening state of the business."
    },
    "GoogleUpdatedLocation": {
      "description": "Represents a location that was modified by Google.",
      "id": "GoogleUpdatedLocation",
      "type": "object",
      "properties": {
        "location": {
          "description": "The Google-updated version of this location.",
          "$ref": "Location"
        },
        "diffMask": {
          "type": "string",
          "format": "google-fieldmask",
          "description": "The fields that Google updated."
        },
        "pendingMask": {
          "type": "string",
          "description": "The fields that have pending edits that haven't yet been pushed to Maps and Search.",
          "format": "google-fieldmask"
        }
      }
    },
    "GoogleLocation": {
      "description": "Represents a Location that is present on Google. This can be a location that has been claimed by the user, someone else, or could be unclaimed.",
      "properties": {
        "requestAdminRightsUri": {
          "description": "A URL that will redirect the user to the request admin rights UI. This field is only present if the location has already been claimed by any user, including the current user.",
          "type": "string"
        },
        "location": {
          "$ref": "Location",
          "description": "The sparsely populated Location information. This field can be re-used in CreateLocation if it is not currently claimed by a user."
        },
        "name": {
          "type": "string",
          "description": "Resource name of this GoogleLocation, in the format `googleLocations/{googleLocationId}`."
        }
      },
      "type": "object",
      "id": "GoogleLocation"
    },
    "RelationshipData": {
      "id": "RelationshipData",
      "description": "Information of all parent and children locations related to this one.",
      "properties": {
        "parentChain": {
          "type": "string",
          "description": "The resource name of the Chain that this location is member of. How to find Chain ID"
        },
        "parentLocation": {
          "description": "The parent location that this location has relations with.",
          "$ref": "RelevantLocation"
        },
        "childrenLocations": {
          "description": "The list of children locations that this location has relations with.",
          "type": "array",
          "items": {
            "$ref": "RelevantLocation"
          }
        }
      },
      "type": "object"
    },
    "Attributes": {
      "properties": {
        "name": {
          "description": "Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.",
          "type": "string"
        },
        "attributes": {
          "description": "A collection of attributes that need to be updated.",
          "type": "array",
          "items": {
            "$ref": "Attribute"
          }
        }
      },
      "id": "Attributes",
      "description": "A container for all the attributes for a given location.",
      "type": "object"
    },
    "FreeFormServiceItem": {
      "properties": {
        "category": {
          "type": "string",
          "description": "Required. This field represents the category name (i.e. the category's stable ID). The `category` and `service_type_id` should match the possible combinations provided in the `Category` message."
        },
        "label": {
          "$ref": "Label",
          "description": "Required. Language-tagged labels for the item. We recommend that item names be 140 characters or less, and descriptions 250 characters or less. This field should only be set if the input is a custom service item. Standardized service types should be updated via service_type_id."
        }
      },
      "type": "object",
      "description": "Represents a free-form service offered by the merchant. These are services that are not exposed as part of our structure service data. The merchant manually enters the names for of such services via a geomerchant surface.",
      "id": "FreeFormServiceItem"
    },
    "ServiceAreaBusiness": {
      "properties": {
        "businessType": {
          "enum": [
            "BUSINESS_TYPE_UNSPECIFIED",
            "CUSTOMER_LOCATION_ONLY",
            "CUSTOMER_AND_BUSINESS_LOCATION"
          ],
          "type": "string",
          "description": "Required. Indicates the type of the service area business.",
          "enumDescriptions": [
            "Output only. Not specified.",
            "Offers service only in the surrounding area (not at the business address). If a business is being updated from a CUSTOMER_AND_BUSINESS_LOCATION to a CUSTOMER_LOCATION_ONLY, the location update must include field mask `storefront_address` and set the field to empty.",
            "Offers service at the business address and the surrounding area."
          ]
        },
        "regionCode": {
          "description": "Immutable. CLDR region code of the country/region that this service area business is based in. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland. This field is required for CUSTOMER_LOCATION_ONLY businesses, and is ignored otherwise. The region specified here can be different from regions for the areas that this business serves (e.g. service area businesses that provide services in regions other than the one that they are based in). If this location requires verification after creation, the address provided for verification purposes *must* be located within this region, and the business owner or their authorized representative *must* be able to receive postal mail at the provided verification address.",
          "type": "string"
        },
        "places": {
          "$ref": "Places",
          "description": "The area that this business serves defined through a set of places."
        }
      },
      "id": "ServiceAreaBusiness",
      "type": "object",
      "description": "Service area businesses provide their service at the customer's location (for example, a locksmith or plumber)."
    },
    "StructuredServiceItem": {
      "id": "StructuredServiceItem",
      "properties": {
        "description": {
          "description": "Optional. Description of structured service item. The character limit is 300.",
          "type": "string"
        },
        "serviceTypeId": {
          "description": "Required. The `service_type_id` field is a Google provided unique ID that can be found in `ServiceType`. This information is provided by `BatchGetCategories` rpc service.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents a structured service offered by the merchant. For eg: toilet_installation."
    },
    "Chain": {
      "properties": {
        "name": {
          "description": "Required. The chain's resource name, in the format `chains/{chain_id}`.",
          "type": "string"
        },
        "chainNames": {
          "items": {
            "$ref": "ChainName"
          },
          "type": "array",
          "description": "Names of the chain."
        },
        "locationCount": {
          "format": "int32",
          "type": "integer",
          "description": "Number of locations that are part of this chain."
        },
        "websites": {
          "type": "array",
          "description": "Websites of the chain.",
          "items": {
            "$ref": "ChainUri"
          }
        }
      },
      "id": "Chain",
      "type": "object",
      "description": "A chain is a brand that your business's locations can be affiliated with."
    },
    "LatLng": {
      "id": "LatLng",
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "properties": {
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number",
          "format": "double"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
        }
      },
      "type": "object"
    },
    "Attribute": {
      "type": "object",
      "id": "Attribute",
      "properties": {
        "name": {
          "description": "Required. The resource name for this attribute.",
          "type": "string"
        },
        "uriValues": {
          "items": {
            "$ref": "UriAttributeValue"
          },
          "description": "When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.",
          "type": "array"
        },
        "repeatedEnumValue": {
          "description": "When the attribute value type is REPEATED_ENUM, this contains the attribute value, and the other values fields must be empty.",
          "$ref": "RepeatedEnumAttributeValue"
        },
        "values": {
          "items": {
            "type": "any"
          },
          "type": "array",
          "description": "The values for this attribute. The type of the values supplied must match that expected for that attribute. This is a repeated field where multiple attribute values may be provided. Attribute types only support one value."
        },
        "valueType": {
          "type": "string",
          "description": "Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.",
          "enum": [
            "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED",
            "BOOL",
            "ENUM",
            "URL",
            "REPEATED_ENUM"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "Not specified.",
            "The values for this attribute are boolean values.",
            "The attribute has a predetermined list of available values that can be used. Metadata for this attribute will list these values.",
            "The values for this attribute are URLs.",
            "The attribute value is an enum with multiple possible values that can be explicitly set or unset."
          ]
        }
      },
      "description": "A location attribute. Attributes provide additional information about a location. The attributes that can be set on a location may vary based on the properties of that location (for example, category). Available attributes are determined by Google and may be added and removed without API changes."
    },
    "ChainUri": {
      "id": "ChainUri",
      "type": "object",
      "description": "Url to be used when displaying the chain.",
      "properties": {
        "uri": {
          "description": "The uri for this chain.",
          "type": "string"
        }
      }
    },
    "MoreHours": {
      "properties": {
        "hoursTypeId": {
          "type": "string",
          "description": "Required. Type of hours. Clients should call {#link businessCategories:BatchGet} to get supported hours types for categories of their locations."
        },
        "periods": {
          "type": "array",
          "items": {
            "$ref": "TimePeriod"
          },
          "description": "Required. A collection of times that this location is open. Each period represents a range of hours when the location is open during the week."
        }
      },
      "description": "The time periods during which a location is open for certain types of business.",
      "id": "MoreHours",
      "type": "object"
    },
    "AttributeMetadata": {
      "id": "AttributeMetadata",
      "description": "Metadata for an attribute. Contains display information for the attribute, including a localized name and a heading for grouping related attributes together.",
      "properties": {
        "deprecated": {
          "type": "boolean",
          "description": "If true, the attribute is deprecated and should no longer be used. If deprecated, updating this attribute will not result in an error, but updates will not be saved. At some point after being deprecated, the attribute will be removed entirely and it will become an error."
        },
        "repeatable": {
          "description": "If true, the attribute supports multiple values. If false, only a single value should be provided.",
          "type": "boolean"
        },
        "displayName": {
          "description": "The localized display name for the attribute, if available; otherwise, the English display name.",
          "type": "string"
        },
        "valueType": {
          "description": "The value type for the attribute. Values set and retrieved should be expected to be of this type.",
          "type": "string",
          "enumDescriptions": [
            "Not specified.",
            "The values for this attribute are boolean values.",
            "The attribute has a predetermined list of available values that can be used. Metadata for this attribute will list these values.",
            "The values for this attribute are URLs.",
            "The attribute value is an enum with multiple possible values that can be explicitly set or unset."
          ],
          "enum": [
            "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED",
            "BOOL",
            "ENUM",
            "URL",
            "REPEATED_ENUM"
          ]
        },
        "valueMetadata": {
          "items": {
            "$ref": "AttributeValueMetadata"
          },
          "type": "array",
          "description": "For some types of attributes (for example, enums), a list of supported values and corresponding display names for those values is provided."
        },
        "groupDisplayName": {
          "type": "string",
          "description": "The localized display name of the group that contains this attribute, if available; otherwise, the English group name. Related attributes are collected into a group and should be displayed together under the heading given here."
        },
        "parent": {
          "type": "string",
          "description": "The unique identifier for the attribute."
        }
      },
      "type": "object"
    },
    "ListLocationsResponse": {
      "description": "Response message for Locations.ListLocations.",
      "type": "object",
      "id": "ListLocationsResponse",
      "properties": {
        "totalSize": {
          "description": "The approximate number of Locations in the list irrespective of pagination.",
          "format": "int32",
          "type": "integer"
        },
        "locations": {
          "type": "array",
          "description": "The locations.",
          "items": {
            "$ref": "Location"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "If the number of locations exceeded the requested page size, this field is populated with a token to fetch the next page of locations on a subsequent call to `ListLocations`. If there are no more locations, this field is not present in the response."
        }
      }
    },
    "Location": {
      "id": "Location",
      "type": "object",
      "properties": {
        "specialHours": {
          "$ref": "SpecialHours",
          "description": "Optional. Special hours for the business. This typically includes holiday hours, and other times outside of regular operating hours. These override regular business hours. This field cannot be set without regular hours."
        },
        "serviceItems": {
          "description": "Optional. List of services supported by merchants. A service can be haircut, install water heater, etc. Duplicated service items will be removed automatically.",
          "items": {
            "$ref": "ServiceItem"
          },
          "type": "array"
        },
        "metadata": {
          "description": "Output only. Additional non-user-editable information.",
          "$ref": "Metadata",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "Required. Location name should reflect your business's real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, `Address`, `Categories`). Don't add unnecessary information to your name (for example, prefer \"Google\" over \"Google Inc. - Mountain View Corporate Headquarters\"). Don't include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, \"Chase ATM in Duane Reade\")."
        },
        "languageCode": {
          "description": "Immutable. The language of the location. Set during creation and not updateable.",
          "type": "string"
        },
        "storeCode": {
          "type": "string",
          "description": "Optional. External identifier for this location, which must be unique within a given account. This is a means of associating the location with your own records."
        },
        "openInfo": {
          "description": "Optional. A flag that indicates whether the location is currently open for business.",
          "$ref": "OpenInfo"
        },
        "profile": {
          "$ref": "Profile",
          "description": "Required. Describes your business in your own voice and shares with users the unique story of your business and offerings."
        },
        "phoneNumbers": {
          "$ref": "PhoneNumbers",
          "description": "Optional. The different phone numbers that customers can use to get in touch with the business."
        },
        "adWordsLocationExtensions": {
          "description": "Optional. Additional information that is surfaced in AdWords.",
          "$ref": "AdWordsLocationExtensions"
        },
        "latlng": {
          "description": "Optional. User-provided latitude and longitude. When creating a location, this field is ignored if the provided address geocodes successfully. This field is only returned on get requests if the user-provided `latlng` value was accepted during create, or the `latlng` value was updated through the Google Business Profile website. This field can only be updated by approved clients.",
          "$ref": "LatLng"
        },
        "serviceArea": {
          "description": "Optional. Service area businesses provide their service at the customer's location. If this business is a service area business, this field describes the area(s) serviced by the business.",
          "$ref": "ServiceAreaBusiness"
        },
        "categories": {
          "$ref": "Categories",
          "description": "Optional. The different categories that describe the business."
        },
        "labels": {
          "description": "Optional. A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Must be between 1-255 characters per label.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "moreHours": {
          "description": "Optional. More hours for a business's different departments or specific customers.",
          "type": "array",
          "items": {
            "$ref": "MoreHours"
          }
        },
        "relationshipData": {
          "description": "Output only. All locations and chain related to this one.",
          "$ref": "RelationshipData",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Google identifier for this location in the form: `locations/{location_id}`."
        },
        "websiteUri": {
          "type": "string",
          "description": "Optional. A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand."
        },
        "storefrontAddress": {
          "$ref": "PostalAddress",
          "description": "Optional. A precise, accurate address to describe your business location. PO boxes or mailboxes located at remote locations are not acceptable. At this time, you can specify a maximum of five `address_lines` values in the address. This field should only be set for businesses that have a storefront. This field should not be set for locations of type `CUSTOMER_LOCATION_ONLY`."
        },
        "regularHours": {
          "description": "Optional. Operating hours for the business.",
          "$ref": "BusinessHours"
        }
      },
      "description": "A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories."
    },
    "Places": {
      "type": "object",
      "id": "Places",
      "properties": {
        "placeInfos": {
          "type": "array",
          "description": "The areas represented by place IDs. Limited to a maximum of 20 places.",
          "items": {
            "$ref": "PlaceInfo"
          }
        }
      },
      "description": "Defines the union of areas represented by a set of places."
    },
    "AdWordsLocationExtensions": {
      "properties": {
        "adPhone": {
          "description": "Required. An alternate phone number to display on AdWords location extensions instead of the location's primary phone number.",
          "type": "string"
        }
      },
      "id": "AdWordsLocationExtensions",
      "type": "object",
      "description": "Additional information that is surfaced in AdWords."
    },
    "RelevantLocation": {
      "id": "RelevantLocation",
      "description": "Information about another location that is related to current one. The relation can be any one of DEPARTMENT_OF or INDEPENDENT_ESTABLISHMENT_OF, and the location specified here can be on either side (parent/child) of the location.",
      "properties": {
        "relationType": {
          "enumDescriptions": [
            "Type unspecified.",
            "This represents a relation between 2 locations which share one physical area, same brand/upper management/organization, but with different key attributes like store hours or phone numbers. For example, Costco Pharmacy is a department in Costco Wholesale.",
            "This represents the cases where 2 locations are co-located in the same physical location, but from different companies (e.g. Starbucks in a Safeway, shops in a mall)."
          ],
          "description": "Required. The type of the relationship.",
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "DEPARTMENT_OF",
            "INDEPENDENT_ESTABLISHMENT_IN"
          ],
          "type": "string"
        },
        "placeId": {
          "description": "Required. Specify the location that is on the other side of the relation by its placeID.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Money": {
      "properties": {
        "units": {
          "type": "string",
          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
          "format": "int64"
        },
        "nanos": {
          "format": "int32",
          "type": "integer",
          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
        },
        "currencyCode": {
          "type": "string",
          "description": "The three-letter currency code defined in ISO 4217."
        }
      },
      "description": "Represents an amount of money with its currency type.",
      "id": "Money",
      "type": "object"
    },
    "AttributeValueMetadata": {
      "description": "Metadata for supported attribute values.",
      "id": "AttributeValueMetadata",
      "properties": {
        "value": {
          "type": "any",
          "description": "The attribute value."
        },
        "displayName": {
          "description": "The display name for this value, localized where available; otherwise, in English. The value display name is intended to be used in context with the attribute display name. For example, for a \"WiFi\" enum attribute, this could contain \"Paid\" to represent paid Wi-Fi.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MoreHoursType": {
      "type": "object",
      "properties": {
        "localizedDisplayName": {
          "type": "string",
          "description": "Output only. The human-readable localized display name for the hours type.",
          "readOnly": true
        },
        "hoursTypeId": {
          "description": "Output only. A stable ID provided by Google for this hours type.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "readOnly": true,
          "description": "Output only. The human-readable English display name for the hours type.",
          "type": "string"
        }
      },
      "description": "More hours types that a business can offers, in addition to its regular hours.",
      "id": "MoreHoursType"
    },
    "UriAttributeValue": {
      "id": "UriAttributeValue",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Required. The proposed URI value for this attribute.",
          "type": "string"
        }
      },
      "description": "Values for an attribute with a `value_type` of URL."
    },
    "PostalAddress": {
      "description": "Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478",
      "type": "object",
      "properties": {
        "organization": {
          "description": "Optional. The name of the organization at the address.",
          "type": "string"
        },
        "recipients": {
          "type": "array",
          "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.",
          "items": {
            "type": "string"
          }
        },
        "revision": {
          "format": "int32",
          "type": "integer",
          "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\"."
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).",
          "type": "array"
        },
        "sortingCode": {
          "type": "string",
          "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."
        }
      },
      "id": "PostalAddress"
    },
    "SpecialHours": {
      "description": "Represents a set of time periods when a location's operational hours differ from its normal business hours.",
      "id": "SpecialHours",
      "type": "object",
      "properties": {
        "specialHourPeriods": {
          "description": "Required. A list of exceptions to the business's regular hours.",
          "type": "array",
          "items": {
            "$ref": "SpecialHourPeriod"
          }
        }
      }
    },
    "PlaceInfo": {
      "id": "PlaceInfo",
      "type": "object",
      "properties": {
        "placeName": {
          "type": "string",
          "description": "Required. The localized name of the place. For example, `Scottsdale, AZ`."
        },
        "placeId": {
          "type": "string",
          "description": "Required. The ID of the place. Must correspond to a region. (https://developers.google.com/places/web-service/supported_types#table3)"
        }
      },
      "description": "Defines an area that's represented by a place ID."
    },
    "SearchGoogleLocationsRequest": {
      "description": "Request message for GoogleLocations.SearchGoogleLocations.",
      "type": "object",
      "id": "SearchGoogleLocationsRequest",
      "properties": {
        "query": {
          "description": "Text query to search for. The search results from a query string will be less accurate than if providing an exact location, but can provide more inexact matches.",
          "type": "string"
        },
        "location": {
          "description": "Location to search for. If provided, will find locations which match the provided location details.",
          "$ref": "Location"
        },
        "pageSize": {
          "description": "The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ClearLocationAssociationRequest": {
      "description": "Request message for Locations.ClearLocationAssociationRequest.",
      "id": "ClearLocationAssociationRequest",
      "type": "object",
      "properties": {}
    },
    "AssociateLocationRequest": {
      "description": "Request message for Locations.AssociateLocationRequest.",
      "type": "object",
      "properties": {
        "placeId": {
          "type": "string",
          "description": "The association to establish. If not set, it indicates no match."
        }
      },
      "id": "AssociateLocationRequest"
    },
    "ChainName": {
      "properties": {
        "languageCode": {
          "description": "The BCP 47 code of language of the name.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name for this chain.",
          "type": "string"
        }
      },
      "description": "Name to be used when displaying the chain.",
      "id": "ChainName",
      "type": "object"
    },
    "PhoneNumbers": {
      "type": "object",
      "id": "PhoneNumbers",
      "properties": {
        "additionalPhones": {
          "type": "array",
          "description": "Optional. Up to two phone numbers (mobile or landline, no fax) at which your business can be called, in addition to your primary phone number.",
          "items": {
            "type": "string"
          }
        },
        "primaryPhone": {
          "description": "Required. A phone number that connects to your individual business location as directly as possible. Use a local phone number instead of a central, call center helpline number whenever possible.",
          "type": "string"
        }
      },
      "description": "A collection of phone numbers for the business. During updates, both fields must be set. Clients may not update just the primary or additional phone numbers using the update mask. International phone format is preferred, such as \"+1 415 555 0132\", see more in (https://developers.google.com/style/phone-numbers#international-phone-numbers)."
    },
    "SearchChainsResponse": {
      "type": "object",
      "id": "SearchChainsResponse",
      "description": "Response message for Locations.SearchChains.",
      "properties": {
        "chains": {
          "type": "array",
          "items": {
            "$ref": "Chain"
          },
          "description": "Chains that match the queried chain_display_name in SearchChainsRequest. If there are no matches, this field will be empty. Results are listed in order of relevance."
        }
      }
    }
  },
  "servicePath": "",
  "description": "The My Business Business Information API provides an interface for managing business information on Google.",
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "kind": "discovery#restDescription",
  "ownerDomain": "google.com",
  "title": "My Business Business Information API",
  "version": "v1",
  "batchPath": "batch",
  "protocol": "rest",
  "name": "mybusinessbusinessinformation",
  "discoveryVersion": "v1",
  "resources": {
    "googleLocations": {
      "methods": {
        "search": {
          "flatPath": "v1/googleLocations:search",
          "id": "mybusinessbusinessinformation.googleLocations.search",
          "response": {
            "$ref": "SearchGoogleLocationsResponse"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "SearchGoogleLocationsRequest"
          },
          "path": "v1/googleLocations:search",
          "parameters": {},
          "parameterOrder": [],
          "description": "Search all of the possible locations that are a match to the specified request."
        }
      }
    },
    "locations": {
      "resources": {
        "attributes": {
          "methods": {
            "getGoogleUpdated": {
              "description": "Gets the Google-updated version of the specified location.",
              "response": {
                "$ref": "Attributes"
              },
              "path": "v1/{+name}:getGoogleUpdated",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^locations/[^/]+/attributes$",
                  "location": "path",
                  "description": "Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "flatPath": "v1/locations/{locationsId}/attributes:getGoogleUpdated",
              "id": "mybusinessbusinessinformation.locations.attributes.getGoogleUpdated"
            }
          }
        }
      },
      "methods": {
        "patch": {
          "path": "v1/{+name}",
          "httpMethod": "PATCH",
          "description": "Updates the specified location.",
          "parameters": {
            "name": {
              "type": "string",
              "description": "Google identifier for this location in the form: `locations/{location_id}`.",
              "pattern": "^locations/[^/]+$",
              "location": "path",
              "required": true
            },
            "validateOnly": {
              "location": "query",
              "type": "boolean",
              "description": "Optional. If true, the request is validated without actually updating the location. When this field is set, we will only return validation errors if there were any. The response will be empty if no errors were found."
            },
            "updateMask": {
              "description": "Required. The specific fields to update.",
              "type": "string",
              "location": "query",
              "format": "google-fieldmask"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "id": "mybusinessbusinessinformation.locations.patch",
          "request": {
            "$ref": "Location"
          },
          "response": {
            "$ref": "Location"
          },
          "flatPath": "v1/locations/{locationsId}"
        },
        "getAttributes": {
          "id": "mybusinessbusinessinformation.locations.getAttributes",
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "pattern": "^locations/[^/]+/attributes$",
              "description": "Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Looks up all the attributes set for a given location.",
          "path": "v1/{+name}",
          "flatPath": "v1/locations/{locationsId}/attributes",
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Attributes"
          }
        },
        "updateAttributes": {
          "response": {
            "$ref": "Attributes"
          },
          "flatPath": "v1/locations/{locationsId}/attributes",
          "request": {
            "$ref": "Attributes"
          },
          "httpMethod": "PATCH",
          "id": "mybusinessbusinessinformation.locations.updateAttributes",
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "description": "Update attributes for a given location.",
          "parameters": {
            "name": {
              "type": "string",
              "location": "path",
              "description": "Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.",
              "pattern": "^locations/[^/]+/attributes$",
              "required": true
            },
            "attributeMask": {
              "type": "string",
              "description": "Required. Attribute name of attributes that you'd like to update. Represented by `attributes/{attribute}`. Updates: All attributes provided in the attributes field that you would like to update must be set in the `attribute_mask`. Attributes set in the above list but not in the `attribute_mask` will be ignored. Deletes: If you'd like to delete certain attributes, they must be specified in the `attribute_mask` with no matching entry in the attributes list. If you'd like to delete all attributes set on a location, you should look up all the applicable attributes for the location and then add them to the `attribute_mask` with an empty attributes field.",
              "location": "query",
              "format": "google-fieldmask"
            }
          }
        },
        "get": {
          "flatPath": "v1/locations/{locationsId}",
          "id": "mybusinessbusinessinformation.locations.get",
          "response": {
            "$ref": "Location"
          },
          "parameters": {
            "name": {
              "description": "Required. The name of the location to fetch.",
              "type": "string",
              "pattern": "^locations/[^/]+$",
              "required": true,
              "location": "path"
            },
            "readMask": {
              "location": "query",
              "format": "google-fieldmask",
              "description": "Required. Read mask to specify what fields will be returned in the response.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "description": "Returns the specified location.",
          "httpMethod": "GET",
          "path": "v1/{+name}"
        },
        "associate": {
          "httpMethod": "POST",
          "flatPath": "v1/locations/{locationsId}:associate",
          "parameterOrder": [
            "name"
          ],
          "description": "Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it appears in the list of `SearchGoogleLocations`.",
          "path": "v1/{+name}:associate",
          "response": {
            "$ref": "Empty"
          },
          "parameters": {
            "name": {
              "pattern": "^locations/[^/]+$",
              "location": "path",
              "description": "Required. The resource name of the location to associate.",
              "required": true,
              "type": "string"
            }
          },
          "id": "mybusinessbusinessinformation.locations.associate",
          "request": {
            "$ref": "AssociateLocationRequest"
          }
        },
        "clearLocationAssociation": {
          "path": "v1/{+name}:clearLocationAssociation",
          "httpMethod": "POST",
          "description": "Clears an association between a location and its place ID. This operation is only valid if the location is unverified.",
          "flatPath": "v1/locations/{locationsId}:clearLocationAssociation",
          "parameters": {
            "name": {
              "location": "path",
              "pattern": "^locations/[^/]+$",
              "description": "Required. The resource name of the location to disassociate.",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "ClearLocationAssociationRequest"
          },
          "id": "mybusinessbusinessinformation.locations.clearLocationAssociation",
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Empty"
          }
        },
        "delete": {
          "path": "v1/{+name}",
          "httpMethod": "DELETE",
          "flatPath": "v1/locations/{locationsId}",
          "response": {
            "$ref": "Empty"
          },
          "parameters": {
            "name": {
              "description": "Required. The name of the location to delete.",
              "pattern": "^locations/[^/]+$",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "mybusinessbusinessinformation.locations.delete",
          "description": "Deletes a location. If this location cannot be deleted using the API and it is marked so in the `google.mybusiness.businessinformation.v1.LocationState`, use the [Google Business Profile](https://business.google.com/manage/) website.",
          "parameterOrder": [
            "name"
          ]
        },
        "getGoogleUpdated": {
          "response": {
            "$ref": "GoogleUpdatedLocation"
          },
          "httpMethod": "GET",
          "parameters": {
            "readMask": {
              "location": "query",
              "format": "google-fieldmask",
              "description": "Required. Read mask to specify what fields will be returned in the response.",
              "type": "string"
            },
            "name": {
              "description": "Required. The name of the location to fetch.",
              "pattern": "^locations/[^/]+$",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Gets the Google-updated version of the specified location.",
          "parameterOrder": [
            "name"
          ],
          "id": "mybusinessbusinessinformation.locations.getGoogleUpdated",
          "path": "v1/{+name}:getGoogleUpdated",
          "flatPath": "v1/locations/{locationsId}:getGoogleUpdated"
        }
      }
    },
    "chains": {
      "methods": {
        "search": {
          "flatPath": "v1/chains:search",
          "response": {
            "$ref": "SearchChainsResponse"
          },
          "id": "mybusinessbusinessinformation.chains.search",
          "parameterOrder": [],
          "path": "v1/chains:search",
          "description": "Searches the chain based on chain name.",
          "parameters": {
            "pageSize": {
              "description": "The maximum number of matched chains to return from this query. The default is 10. The maximum possible value is 500.",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "chainName": {
              "description": "Required. Search for a chain by its name. Exact/partial/fuzzy/related queries are supported. Examples: \"walmart\", \"wal-mart\", \"walmmmart\", \"沃尔玛\"",
              "location": "query",
              "type": "string"
            }
          },
          "httpMethod": "GET"
        },
        "get": {
          "description": "Gets the specified chain. Returns `NOT_FOUND` if the chain does not exist.",
          "response": {
            "$ref": "Chain"
          },
          "path": "v1/{+name}",
          "parameters": {
            "name": {
              "type": "string",
              "location": "path",
              "description": "Required. The chain's resource name, in the format `chains/{chain_place_id}`.",
              "required": true,
              "pattern": "^chains/[^/]+$"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/chains/{chainsId}",
          "id": "mybusinessbusinessinformation.chains.get"
        }
      }
    },
    "accounts": {
      "resources": {
        "locations": {
          "methods": {
            "create": {
              "parameters": {
                "parent": {
                  "description": "Required. The name of the account in which to create this location.",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^accounts/[^/]+$"
                },
                "requestId": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. A unique request ID for the server to detect duplicated requests. We recommend using UUIDs. Max length is 50 characters."
                },
                "validateOnly": {
                  "type": "boolean",
                  "description": "Optional. If true, the request is validated without actually creating the location.",
                  "location": "query"
                }
              },
              "request": {
                "$ref": "Location"
              },
              "flatPath": "v1/accounts/{accountsId}/locations",
              "httpMethod": "POST",
              "description": "Creates a new Location that will be owned by the logged in user.",
              "response": {
                "$ref": "Location"
              },
              "id": "mybusinessbusinessinformation.accounts.locations.create",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/locations"
            },
            "list": {
              "httpMethod": "GET",
              "id": "mybusinessbusinessinformation.accounts.locations.list",
              "flatPath": "v1/accounts/{accountsId}/locations",
              "parameters": {
                "orderBy": {
                  "location": "query",
                  "description": "Optional. Sorting order for the request. Multiple fields should be comma-separated, following SQL syntax. The default sorting order is ascending. To specify descending order, a suffix \" desc\" should be added. Valid fields to order_by are title and store_code. For example: \"title, store_code desc\" or \"title\" or \"store_code desc\"",
                  "type": "string"
                },
                "pageToken": {
                  "description": "Optional. If specified, it fetches the next `page` of locations. The page token is returned by previous calls to `ListLocations` when there were more locations than could fit in the requested page size.",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "pattern": "^accounts/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The name of the account to fetch locations from. If the parent Account is of AccountType PERSONAL, only Locations that are directly owned by the Account are returned, otherwise it will return all accessible locations from the Account, either directly or indirectly.",
                  "required": true
                },
                "readMask": {
                  "description": "Required. Read mask to specify what fields will be returned in the response.",
                  "type": "string",
                  "format": "google-fieldmask",
                  "location": "query"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. How many locations to fetch per page. Default value is 10 if not set. Minimum is 1, and maximum page size is 100.",
                  "location": "query"
                },
                "filter": {
                  "location": "query",
                  "description": "Optional. A filter constraining the locations to return. The response includes only entries that match the filter. If `filter` is empty, then constraints are applied and all locations (paginated) are retrieved for the requested account. For more information about valid fields and example usage, see [Work with Location Data Guide](https://developers.google.com/my-business/content/location-data#filter_results_when_you_list_locations).",
                  "type": "string"
                }
              },
              "path": "v1/{+parent}/locations",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Lists the locations for the specified account."
            }
          }
        }
      }
    },
    "attributes": {
      "methods": {
        "list": {
          "response": {
            "$ref": "ListAttributeMetadataResponse"
          },
          "parameters": {
            "pageToken": {
              "description": "If specified, the next page of attribute metadata is retrieved.",
              "type": "string",
              "location": "query"
            },
            "showAll": {
              "location": "query",
              "description": "Metadata for all available attributes are returned when this field is set to true, disregarding parent and category_name fields. language_code and region_code are required when show_all is set to true.",
              "type": "boolean"
            },
            "languageCode": {
              "location": "query",
              "type": "string",
              "description": "The BCP 47 code of language to get attribute display names in. If this language is not available, they will be provided in English."
            },
            "pageSize": {
              "type": "integer",
              "description": "How many attributes to include per page. Default is 200, minimum is 1.",
              "location": "query",
              "format": "int32"
            },
            "parent": {
              "location": "query",
              "description": "Resource name of the location to look up available attributes. If this field is set, category_name, region_code, language_code and show_all are not required and must not be set.",
              "type": "string"
            },
            "regionCode": {
              "description": "The ISO 3166-1 alpha-2 country code to find available attributes.",
              "location": "query",
              "type": "string"
            },
            "categoryName": {
              "location": "query",
              "type": "string",
              "description": "The primary category stable ID to find available attributes. Must be of the format categories/{category_id}."
            }
          },
          "flatPath": "v1/attributes",
          "description": "Returns the list of attributes that would be available for a location with the given primary category and country.",
          "id": "mybusinessbusinessinformation.attributes.list",
          "parameterOrder": [],
          "httpMethod": "GET",
          "path": "v1/attributes"
        }
      }
    },
    "categories": {
      "methods": {
        "batchGet": {
          "parameters": {
            "names": {
              "repeated": true,
              "type": "string",
              "description": "Required. At least one name must be set. The GConcept ids the localized category names should be returned for. To return details for more than one category, repeat this parameter in the request.",
              "location": "query"
            },
            "view": {
              "type": "string",
              "enum": [
                "CATEGORY_VIEW_UNSPECIFIED",
                "BASIC",
                "FULL"
              ],
              "description": "Required. Specifies which parts to the Category resource should be returned in the response.",
              "enumDescriptions": [
                "Not specified, equivalent to CATEGORY_METADATA_ONLY.",
                "The server response will only include Category fields display_name, category_id and language_code. It omits any service type metadata related fields.",
                "Returns all the fields in the response."
              ],
              "location": "query"
            },
            "regionCode": {
              "type": "string",
              "location": "query",
              "description": "Optional. The ISO 3166-1 alpha-2 country code used to infer non-standard language."
            },
            "languageCode": {
              "description": "Required. The BCP 47 code of language that the category names should be returned in.",
              "location": "query",
              "type": "string"
            }
          },
          "path": "v1/categories:batchGet",
          "id": "mybusinessbusinessinformation.categories.batchGet",
          "parameterOrder": [],
          "flatPath": "v1/categories:batchGet",
          "httpMethod": "GET",
          "description": "Returns a list of business categories for the provided language and GConcept ids.",
          "response": {
            "$ref": "BatchGetCategoriesResponse"
          }
        },
        "list": {
          "path": "v1/categories",
          "flatPath": "v1/categories",
          "response": {
            "$ref": "ListCategoriesResponse"
          },
          "httpMethod": "GET",
          "id": "mybusinessbusinessinformation.categories.list",
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Optional. If specified, the next page of categories will be fetched.",
              "location": "query"
            },
            "view": {
              "type": "string",
              "location": "query",
              "description": "Required. Specifies which parts to the Category resource should be returned in the response.",
              "enum": [
                "CATEGORY_VIEW_UNSPECIFIED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "Not specified, equivalent to CATEGORY_METADATA_ONLY.",
                "The server response will only include Category fields display_name, category_id and language_code. It omits any service type metadata related fields.",
                "Returns all the fields in the response."
              ]
            },
            "pageSize": {
              "description": "Optional. How many categories to fetch per page. Default is 100, minimum is 1, and maximum page size is 100.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "regionCode": {
              "location": "query",
              "description": "Required. The ISO 3166-1 alpha-2 country code.",
              "type": "string"
            },
            "languageCode": {
              "description": "Required. The BCP 47 code of language.",
              "location": "query",
              "type": "string"
            },
            "filter": {
              "location": "query",
              "type": "string",
              "description": "Optional. Filter string from user. The only field that supported is `displayName`. Eg: `filter=displayName=foo`."
            }
          },
          "description": "Returns a list of business categories. Search will match the category name but not the category ID. Search only matches the front of a category name (that is, 'food' may return 'Food Court' but not 'Fast Food Restaurant').",
          "parameterOrder": []
        }
      }
    }
  },
  "rootUrl": "https://mybusinessbusinessinformation.googleapis.com/",
  "documentationLink": "https://developers.google.com/my-business/",
  "canonicalName": "My Business Business Information",
  "baseUrl": "https://mybusinessbusinessinformation.googleapis.com/"
}

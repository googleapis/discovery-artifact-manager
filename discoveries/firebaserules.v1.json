{
  "servicePath": "",
  "batchPath": "batch",
  "revision": "20220619",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "name": "firebaserules",
  "canonicalName": "Firebase Rules",
  "ownerName": "Google",
  "documentationLink": "https://firebase.google.com/docs/storage/security",
  "protocol": "rest",
  "mtlsRootUrl": "https://firebaserules.mtls.googleapis.com/",
  "id": "firebaserules:v1",
  "discoveryVersion": "v1",
  "baseUrl": "https://firebaserules.googleapis.com/",
  "version_module": true,
  "description": "Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. ",
  "kind": "discovery#restDescription",
  "schemas": {
    "ValueCount": {
      "description": "Tuple for how many times an Expression was evaluated to a particular ExpressionValue.",
      "id": "ValueCount",
      "type": "object",
      "properties": {
        "value": {
          "description": "The return value of the expression",
          "type": "any"
        },
        "count": {
          "description": "The amount of times that expression returned.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "File": {
      "properties": {
        "content": {
          "type": "string",
          "description": "Required. Textual Content."
        },
        "fingerprint": {
          "format": "byte",
          "description": "Fingerprint (e.g. github sha) associated with the `File`.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. File name."
        }
      },
      "id": "File",
      "description": "`File` containing source content.",
      "type": "object"
    },
    "Ruleset": {
      "properties": {
        "source": {
          "$ref": "Source",
          "description": "Required. `Source` for the `Ruleset`."
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`"
        },
        "metadata": {
          "description": "Output only. The metadata for this ruleset.",
          "readOnly": true,
          "$ref": "Metadata"
        },
        "createTime": {
          "type": "string",
          "description": "Output only. Time the `Ruleset` was created.",
          "readOnly": true,
          "format": "google-datetime"
        }
      },
      "id": "Ruleset",
      "type": "object",
      "description": "`Ruleset` is an immutable copy of `Source` with a globally unique identifier and a creation time."
    },
    "ListRulesetsResponse": {
      "id": "ListRulesetsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The pagination token to retrieve the next page of results. If the value is empty, no further results remain.",
          "type": "string"
        },
        "rulesets": {
          "items": {
            "$ref": "Ruleset"
          },
          "description": "List of `Ruleset` instances.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "The response for FirebaseRulesService.ListRulesets."
    },
    "Arg": {
      "id": "Arg",
      "type": "object",
      "properties": {
        "anyValue": {
          "description": "Argument matches any value provided.",
          "$ref": "Empty"
        },
        "exactValue": {
          "type": "any",
          "description": "Argument exactly matches value provided."
        }
      },
      "description": "Arg matchers for the mock function."
    },
    "Source": {
      "id": "Source",
      "description": "`Source` is one or more `File` messages comprising a logical set of rules.",
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "description": "Required. `File` set constituting the `Source` bundle.",
          "items": {
            "$ref": "File"
          }
        }
      }
    },
    "Release": {
      "description": "`Release` is a named reference to a `Ruleset`. Once a `Release` refers to a `Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. Format: `projects/{project_id}/releases/{release_id}`",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. Time the release was updated.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "rulesetName": {
          "type": "string",
          "description": "Required. Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created."
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time the release was created."
        }
      },
      "id": "Release"
    },
    "UpdateReleaseRequest": {
      "id": "UpdateReleaseRequest",
      "type": "object",
      "properties": {
        "updateMask": {
          "format": "google-fieldmask",
          "type": "string",
          "description": "Specifies which fields to update."
        },
        "release": {
          "$ref": "Release",
          "description": "Required. `Release` to update."
        }
      },
      "description": "The request for FirebaseRulesService.UpdateRelease."
    },
    "ExpressionReport": {
      "properties": {
        "sourcePosition": {
          "description": "Position of expression in original rules source.",
          "$ref": "SourcePosition"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "ExpressionReport"
          },
          "description": "Subexpressions"
        },
        "values": {
          "items": {
            "$ref": "ValueCount"
          },
          "type": "array",
          "description": "Values that this expression evaluated to when encountered."
        }
      },
      "description": "Describes where in a file an expression is found and what it was evaluated to over the course of its use.",
      "id": "ExpressionReport",
      "type": "object"
    },
    "Metadata": {
      "properties": {
        "services": {
          "type": "array",
          "description": "Services that this ruleset has declarations for (e.g., \"cloud.firestore\"). There may be 0+ of these.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Metadata for a Ruleset.",
      "id": "Metadata",
      "type": "object"
    },
    "Result": {
      "id": "Result",
      "description": "Possible result values from the function mock invocation.",
      "type": "object",
      "properties": {
        "undefined": {
          "$ref": "Empty",
          "description": "The result is undefined, meaning the result could not be computed."
        },
        "value": {
          "type": "any",
          "description": "The result is an actual value. The type of the value must match that of the type declared by the service."
        }
      }
    },
    "GetReleaseExecutableResponse": {
      "type": "object",
      "properties": {
        "syncTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive)."
        },
        "executable": {
          "format": "byte",
          "type": "string",
          "description": "Executable view of the `Ruleset` referenced by the `Release`."
        },
        "executableVersion": {
          "enumDescriptions": [
            "Executable format unspecified. Defaults to FIREBASE_RULES_EXECUTABLE_V1",
            "Firebase Rules syntax 'rules2' executable versions: Custom AST for use with Java clients.",
            "CEL-based executable for use with C++ clients."
          ],
          "enum": [
            "RELEASE_EXECUTABLE_VERSION_UNSPECIFIED",
            "FIREBASE_RULES_EXECUTABLE_V1",
            "FIREBASE_RULES_EXECUTABLE_V2"
          ],
          "type": "string",
          "description": "The Rules runtime version of the executable."
        },
        "language": {
          "enum": [
            "LANGUAGE_UNSPECIFIED",
            "FIREBASE_RULES",
            "EVENT_FLOW_TRIGGERS"
          ],
          "description": "`Language` used to generate the executable bytes.",
          "enumDescriptions": [
            "Language unspecified. Defaults to FIREBASE_RULES.",
            "Firebase Rules language.",
            "Event Flow triggers."
          ],
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "description": "Timestamp for the most recent `Release.update_time`.",
          "format": "google-datetime"
        },
        "rulesetName": {
          "description": "`Ruleset` name associated with the `Release` executable.",
          "type": "string"
        }
      },
      "description": "The response for FirebaseRulesService.GetReleaseExecutable",
      "id": "GetReleaseExecutableResponse"
    },
    "TestRulesetResponse": {
      "description": "The response for FirebaseRulesService.TestRuleset.",
      "id": "TestRulesetResponse",
      "type": "object",
      "properties": {
        "testResults": {
          "items": {
            "$ref": "TestResult"
          },
          "type": "array",
          "description": "The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`."
        },
        "issues": {
          "items": {
            "$ref": "Issue"
          },
          "description": "Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.",
          "type": "array"
        }
      }
    },
    "SourcePosition": {
      "type": "object",
      "description": "Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.",
      "id": "SourcePosition",
      "properties": {
        "line": {
          "type": "integer",
          "format": "int32",
          "description": "Line number of the source fragment. 1-based."
        },
        "endOffset": {
          "description": "End position relative to the beginning of the file.",
          "type": "integer",
          "format": "int32"
        },
        "fileName": {
          "description": "Name of the `File`.",
          "type": "string"
        },
        "currentOffset": {
          "description": "Start position relative to the beginning of the file.",
          "type": "integer",
          "format": "int32"
        },
        "column": {
          "description": "First column on the source line associated with the source fragment.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VisitedExpression": {
      "properties": {
        "value": {
          "type": "any",
          "description": "The evaluated value for the visited expression, e.g. true/false"
        },
        "sourcePosition": {
          "description": "Position in the `Source` or `Ruleset` where an expression was visited.",
          "$ref": "SourcePosition"
        }
      },
      "type": "object",
      "description": "Store the position and access outcome for an expression visited in rules.",
      "id": "VisitedExpression"
    },
    "TestRulesetRequest": {
      "id": "TestRulesetRequest",
      "description": "The request for FirebaseRulesService.TestRuleset.",
      "properties": {
        "source": {
          "$ref": "Source",
          "description": "Optional `Source` to be checked for correctness. This field must not be set when the resource name refers to a `Ruleset`."
        },
        "testSuite": {
          "description": "The tests to execute against the `Source`. When `Source` is provided inline, the test cases will only be run if the `Source` is syntactically and semantically valid. Inline `TestSuite` to run.",
          "$ref": "TestSuite"
        }
      },
      "type": "object"
    },
    "FunctionCall": {
      "type": "object",
      "id": "FunctionCall",
      "description": "Represents a service-defined function call that was invoked during test execution.",
      "properties": {
        "function": {
          "description": "Name of the function invoked.",
          "type": "string"
        },
        "args": {
          "items": {
            "type": "any"
          },
          "description": "The arguments that were provided to the function.",
          "type": "array"
        }
      }
    },
    "TestSuite": {
      "type": "object",
      "id": "TestSuite",
      "properties": {
        "testCases": {
          "items": {
            "$ref": "TestCase"
          },
          "description": "Collection of test cases associated with the `TestSuite`.",
          "type": "array"
        }
      },
      "description": "`TestSuite` is a collection of `TestCase` instances that validate the logical correctness of a `Ruleset`. The `TestSuite` may be referenced in-line within a `TestRuleset` invocation or as part of a `Release` object as a pre-release check."
    },
    "Issue": {
      "id": "Issue",
      "description": "Issues include warnings, errors, and deprecation notices.",
      "type": "object",
      "properties": {
        "sourcePosition": {
          "description": "Position of the issue in the `Source`.",
          "$ref": "SourcePosition"
        },
        "description": {
          "description": "Short error description.",
          "type": "string"
        },
        "severity": {
          "enumDescriptions": [
            "An unspecified severity.",
            "Deprecation issue for statements and method that may no longer be supported or maintained.",
            "Warnings such as: unused variables.",
            "Errors such as: unmatched curly braces or variable redefinition."
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "DEPRECATION",
            "WARNING",
            "ERROR"
          ],
          "description": "The severity of the issue.",
          "type": "string"
        }
      }
    },
    "FunctionMock": {
      "description": "Mock function definition. Mocks must refer to a function declared by the target service. The type of the function args and result will be inferred at test time. If either the arg or result values are not compatible with function type declaration, the request will be considered invalid. More than one `FunctionMock` may be provided for a given function name so long as the `Arg` matchers are distinct. There may be only one function for a given overload where all `Arg` values are `Arg.any_value`.",
      "properties": {
        "result": {
          "$ref": "Result",
          "description": "The mock result of the function call."
        },
        "function": {
          "type": "string",
          "description": "The name of the function. The function name must match one provided by a service declaration."
        },
        "args": {
          "description": "The list of `Arg` values to match. The order in which the arguments are provided is the order in which they must appear in the function invocation.",
          "type": "array",
          "items": {
            "$ref": "Arg"
          }
        }
      },
      "type": "object",
      "id": "FunctionMock"
    },
    "TestCase": {
      "properties": {
        "expectation": {
          "enum": [
            "EXPECTATION_UNSPECIFIED",
            "ALLOW",
            "DENY"
          ],
          "enumDescriptions": [
            "Unspecified expectation.",
            "Expect an allowed result.",
            "Expect a denied result."
          ],
          "description": "Test expectation.",
          "type": "string"
        },
        "resource": {
          "description": "Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.",
          "type": "any"
        },
        "functionMocks": {
          "type": "array",
          "items": {
            "$ref": "FunctionMock"
          },
          "description": "Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome."
        },
        "expressionReportLevel": {
          "type": "string",
          "enum": [
            "LEVEL_UNSPECIFIED",
            "NONE",
            "FULL",
            "VISITED"
          ],
          "description": "Specifies what should be included in the response.",
          "enumDescriptions": [
            "No level has been specified. Defaults to \"NONE\" behavior.",
            "Do not include any additional information.",
            "Include detailed reporting on expressions evaluated.",
            "Only include the expressions that were visited during evaluation."
          ]
        },
        "pathEncoding": {
          "enumDescriptions": [
            "No encoding has been specified. Defaults to \"URL_ENCODED\" behavior.",
            "Treats path segments as URL encoded but with non-encoded separators (\"/\"). This is the default behavior.",
            "Treats total path as non-URL encoded e.g. raw."
          ],
          "enum": [
            "ENCODING_UNSPECIFIED",
            "URL_ENCODED",
            "PLAIN"
          ],
          "description": "Specifies whether paths (such as request.path) are encoded and how.",
          "type": "string"
        },
        "request": {
          "type": "any",
          "description": "Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument."
        }
      },
      "description": "`TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.",
      "type": "object",
      "id": "TestCase"
    },
    "TestResult": {
      "properties": {
        "visitedExpressions": {
          "items": {
            "$ref": "VisitedExpression"
          },
          "description": "The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field",
          "type": "array"
        },
        "errorPosition": {
          "description": "Position in the `Source` or `Ruleset` where the principle runtime error occurs. Evaluation of an expression may result in an error. Rules are deny by default, so a `DENY` expectation when an error is generated is valid. When there is a `DENY` with an error, the `SourcePosition` is returned. E.g. `error_position { line: 19 column: 37 }`",
          "$ref": "SourcePosition"
        },
        "debugMessages": {
          "description": "Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: \"resource\"]```",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "SUCCESS",
            "FAILURE"
          ],
          "enumDescriptions": [
            "Test state is not set.",
            "Test is a success.",
            "Test is a failure."
          ],
          "description": "State of the test."
        },
        "functionCalls": {
          "description": "The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.",
          "items": {
            "$ref": "FunctionCall"
          },
          "type": "array"
        },
        "expressionReports": {
          "type": "array",
          "items": {
            "$ref": "ExpressionReport"
          },
          "description": "The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the \"visited_expressions\" field above. Literal expressions are omitted."
        }
      },
      "id": "TestResult",
      "type": "object",
      "description": "Test result message containing the state of the test as well as a description and source position for test failures."
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty"
    },
    "ListReleasesResponse": {
      "properties": {
        "releases": {
          "items": {
            "$ref": "Release"
          },
          "description": "List of `Release` instances.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token to retrieve the next page of results. If the value is empty, no further results remain."
        }
      },
      "type": "object",
      "id": "ListReleasesResponse",
      "description": "The response for FirebaseRulesService.ListReleases."
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        },
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        },
        "https://www.googleapis.com/auth/firebase.readonly": {
          "description": "View all your Firebase data and settings"
        }
      }
    }
  },
  "version": "v1",
  "basePath": "",
  "title": "Firebase Rules API",
  "resources": {
    "projects": {
      "resources": {
        "rulesets": {
          "methods": {
            "get": {
              "response": {
                "$ref": "Ruleset"
              },
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/rulesets/[^/]+$",
                  "required": true,
                  "location": "path",
                  "description": "Required. Resource name for the ruleset to get. Format: `projects/{project_id}/rulesets/{ruleset_id}`",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "id": "firebaserules.projects.rulesets.get",
              "flatPath": "v1/projects/{projectsId}/rulesets/{rulesetsId}",
              "description": "Get a `Ruleset` by name including the full `Source` contents.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ]
            },
            "create": {
              "description": "Create a `Ruleset` from `Source`. The `Ruleset` is given a unique generated name which is returned to the caller. `Source` containing syntactic or semantics errors will result in an error response indicating the first error encountered. For a detailed view of `Source` issues, use TestRuleset.",
              "flatPath": "v1/projects/{projectsId}/rulesets",
              "parameters": {
                "name": {
                  "description": "Required. Resource name for Project which owns this `Ruleset`. Format: `projects/{project_id}`",
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "response": {
                "$ref": "Ruleset"
              },
              "path": "v1/{+name}/rulesets",
              "parameterOrder": [
                "name"
              ],
              "id": "firebaserules.projects.rulesets.create",
              "httpMethod": "POST",
              "request": {
                "$ref": "Ruleset"
              }
            },
            "delete": {
              "id": "firebaserules.projects.rulesets.delete",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "description": "Delete a `Ruleset` by resource name. If the `Ruleset` is referenced by a `Release` the operation will fail.",
              "flatPath": "v1/projects/{projectsId}/rulesets/{rulesetsId}",
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/rulesets/[^/]+$",
                  "type": "string",
                  "description": "Required. Resource name for the ruleset to delete. Format: `projects/{project_id}/rulesets/{ruleset_id}`"
                }
              },
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListRulesetsResponse"
              },
              "path": "v1/{+name}/rulesets",
              "flatPath": "v1/projects/{projectsId}/rulesets",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Next page token for loading the next batch of `Ruleset` instances."
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "`Ruleset` filter. The list method supports filters with restrictions on `Ruleset.name`. Filters on `Ruleset.create_time` should use the `date` function which parses strings that conform to the RFC 3339 date/time specifications. Example: `create_time \u003e date(\"2017-01-01T00:00:00Z\") AND name=UUID-*`"
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "description": "Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load less than `page_size` due to the size of the output. To traverse all of the releases, caller should iterate until the `page_token` is empty.",
                  "type": "integer"
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. Resource name for the project. Format: `projects/{project_id}`",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "description": "List `Ruleset` metadata only and optionally filter the results by `Ruleset` name. The full `Source` contents of a `Ruleset` may be retrieved with GetRuleset.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "id": "firebaserules.projects.rulesets.list"
            }
          }
        },
        "releases": {
          "methods": {
            "patch": {
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Release"
              },
              "description": "Update a `Release` via PATCH. Only updates to `ruleset_name` will be honored. `Release` rename is not supported. To create a `Release` use the CreateRelease method.",
              "flatPath": "v1/projects/{projectsId}/releases/{releasesId}",
              "request": {
                "$ref": "UpdateReleaseRequest"
              },
              "id": "firebaserules.projects.releases.patch",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/releases/.*$",
                  "description": "Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`",
                  "type": "string",
                  "required": true
                }
              }
            },
            "getExecutable": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "parameterOrder": [
                "name"
              ],
              "description": "Get the `Release` executable to use when enforcing rules.",
              "flatPath": "v1/projects/{projectsId}/releases/{releasesId}:getExecutable",
              "path": "v1/{+name}:getExecutable",
              "parameters": {
                "executableVersion": {
                  "enum": [
                    "RELEASE_EXECUTABLE_VERSION_UNSPECIFIED",
                    "FIREBASE_RULES_EXECUTABLE_V1",
                    "FIREBASE_RULES_EXECUTABLE_V2"
                  ],
                  "description": "The requested runtime executable version. Defaults to FIREBASE_RULES_EXECUTABLE_V1.",
                  "type": "string",
                  "location": "query",
                  "enumDescriptions": [
                    "Executable format unspecified. Defaults to FIREBASE_RULES_EXECUTABLE_V1",
                    "Firebase Rules syntax 'rules2' executable versions: Custom AST for use with Java clients.",
                    "CEL-based executable for use with C++ clients."
                  ]
                },
                "name": {
                  "description": "Required. Resource name of the `Release`. Format: `projects/{project_id}/releases/{release_id}`",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/releases/.*$"
                }
              },
              "response": {
                "$ref": "GetReleaseExecutableResponse"
              },
              "httpMethod": "GET",
              "id": "firebaserules.projects.releases.getExecutable"
            },
            "create": {
              "request": {
                "$ref": "Release"
              },
              "response": {
                "$ref": "Release"
              },
              "path": "v1/{+name}/releases",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "id": "firebaserules.projects.releases.create",
              "description": "Create a `Release`. Release names should reflect the developer's deployment practices. For example, the release name may include the environment name, application name, application version, or any other name meaningful to the developer. Once a `Release` refers to a `Ruleset`, the rules can be enforced by Firebase Rules-enabled services. More than one `Release` may be 'live' concurrently. Consider the following three `Release` names for `projects/foo` and the `Ruleset` to which they refer. Release Name -\u003e Ruleset Name * projects/foo/releases/prod -\u003e projects/foo/rulesets/uuid123 * projects/foo/releases/prod/beta -\u003e projects/foo/rulesets/uuid123 * projects/foo/releases/prod/v23 -\u003e projects/foo/rulesets/uuid456 The relationships reflect a `Ruleset` rollout in progress. The `prod` and `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23` refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be updated using the UpdateRelease method.",
              "flatPath": "v1/projects/{projectsId}/releases",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "httpMethod": "POST"
            },
            "delete": {
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE",
              "id": "firebaserules.projects.releases.delete",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/releases/.*$",
                  "description": "Required. Resource name for the `Release` to delete. Format: `projects/{project_id}/releases/{release_id}`",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1/projects/{projectsId}/releases/{releasesId}",
              "description": "Delete a `Release` by resource name.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ]
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "description": "Get a `Release` by name.",
              "id": "firebaserules.projects.releases.get",
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "flatPath": "v1/projects/{projectsId}/releases/{releasesId}",
              "response": {
                "$ref": "Release"
              },
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/releases/.*$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. Resource name of the `Release`. Format: `projects/{project_id}/releases/{release_id}`",
                  "required": true
                }
              },
              "httpMethod": "GET"
            },
            "list": {
              "path": "v1/{+name}/releases",
              "flatPath": "v1/projects/{projectsId}/releases",
              "description": "List the `Release` values for a project. This list may optionally be filtered by `Release` name, `Ruleset` name, `TestSuite` name, or any combination thereof.",
              "httpMethod": "GET",
              "response": {
                "$ref": "ListReleasesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase",
                "https://www.googleapis.com/auth/firebase.readonly"
              ],
              "id": "firebaserules.projects.releases.list",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "filter": {
                  "description": "`Release` filter. The list method supports filters with restrictions on the `Release.name`, and `Release.ruleset_name`. Example 1: A filter of 'name=prod*' might return `Release`s with names within 'projects/foo' prefixed with 'prod': Name -\u003e Ruleset Name: * projects/foo/releases/prod -\u003e projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v1 -\u003e projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v2 -\u003e projects/foo/rulesets/uuid8888 Example 2: A filter of `name=prod* ruleset_name=uuid1234` would return only `Release` instances for 'projects/foo' with names prefixed with 'prod' referring to the same `Ruleset` name of 'uuid1234': Name -\u003e Ruleset Name: * projects/foo/releases/prod -\u003e projects/foo/rulesets/1234 * projects/foo/releases/prod/v1 -\u003e projects/foo/rulesets/1234 In the examples, the filter parameters refer to the search filters are relative to the project. Fully qualified prefixed may also be used.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "location": "query",
                  "description": "Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load fewer than `page_size` results due to the size of the output. To traverse all of the releases, the caller should iterate until the `page_token` on the response is empty."
                },
                "name": {
                  "required": true,
                  "description": "Required. Resource name for the project. Format: `projects/{project_id}`",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Next page token for the next batch of `Release` instances."
                }
              }
            }
          }
        }
      },
      "methods": {
        "test": {
          "httpMethod": "POST",
          "response": {
            "$ref": "TestRulesetResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase",
            "https://www.googleapis.com/auth/firebase.readonly"
          ],
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "pattern": "^projects/.*$",
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Required. Tests may either provide `source` or a `Ruleset` resource name. For tests against `source`, the resource name must refer to the project: Format: `projects/{project_id}` For tests against a `Ruleset`, this must be the `Ruleset` resource name: Format: `projects/{project_id}/rulesets/{ruleset_id}`"
            }
          },
          "flatPath": "v1/projects/{projectsId}:test",
          "description": "Test `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }",
          "request": {
            "$ref": "TestRulesetRequest"
          },
          "id": "firebaserules.projects.test",
          "path": "v1/{+name}:test"
        }
      }
    }
  },
  "rootUrl": "https://firebaserules.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "description": "Data format for response.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    }
  },
  "ownerDomain": "google.com"
}

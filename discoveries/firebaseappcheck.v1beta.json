{
  "ownerName": "Google",
  "canonicalName": "Firebaseappcheck",
  "title": "Firebase App Check API",
  "rootUrl": "https://firebaseappcheck.googleapis.com/",
  "documentationLink": "https://firebase.google.com/docs/app-check",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "fullyEncodeReservedExpansion": true,
  "batchPath": "batch",
  "basePath": "",
  "discoveryVersion": "v1",
  "version": "v1beta",
  "kind": "discovery#restDescription",
  "baseUrl": "https://firebaseappcheck.googleapis.com/",
  "ownerDomain": "google.com",
  "servicePath": "",
  "description": "App Check works alongside other Firebase services to help protect your backend resources from abuse, such as billing fraud or phishing. With App Check, devices running your app will use an app or device attestation provider that attests to one or both of the following: * Requests originate from your authentic app * Requests originate from an authentic, untampered device This attestation is attached to every request your app makes to your Firebase backend resources. The Firebase App Check REST API allows you to manage your App Check configurations programmatically. It also allows you to exchange attestation material for App Check tokens directly without using a Firebase SDK. Finally, it allows you to obtain the public key set necessary to validate an App Check token yourself. [Learn more about App Check](https://firebase.google.com/docs/app-check).",
  "schemas": {
    "GoogleFirebaseAppcheckV1betaDebugToken": {
      "id": "GoogleFirebaseAppcheckV1betaDebugToken",
      "description": "A *debug token* is a secret used during the development or integration testing of an app. It essentially allows the development or integration testing to bypass app attestation while still allowing App Check to enforce protection on supported production Firebase services.",
      "properties": {
        "token": {
          "description": "Input only. Immutable. The secret token itself. Must be provided during creation, and must be a UUID4, case insensitive. This field is immutable once set, and cannot be provided during an UpdateDebugToken request. You can, however, delete this debug token using DeleteDebugToken to revoke it. For security reasons, this field will never be populated in any response.",
          "type": "string"
        },
        "name": {
          "description": "The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Required. A human readable display name used to identify this debug token."
        }
      },
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest": {
      "type": "object",
      "properties": {
        "safetyNetToken": {
          "description": "The [SafetyNet attestation response](https://developer.android.com/training/safetynet/attestation#request-attestation-step) issued to your app.",
          "type": "string"
        }
      },
      "id": "GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest",
      "description": "Request message for the ExchangeSafetyNetToken method."
    },
    "GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest": {
      "id": "GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest",
      "description": "Request message for the ExchangeCustomToken method.",
      "type": "object",
      "properties": {
        "customToken": {
          "description": "A custom token signed using your project's Admin SDK service account credentials.",
          "type": "string"
        }
      }
    },
    "GoogleProtobufEmpty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "GoogleProtobufEmpty",
      "type": "object",
      "properties": {}
    },
    "GoogleFirebaseAppcheckV1betaListServicesResponse": {
      "description": "Response message for the ListServices method.",
      "id": "GoogleFirebaseAppcheckV1betaListServicesResponse",
      "properties": {
        "nextPageToken": {
          "description": "If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListServices to find the next group of Services. Page tokens are short-lived and should not be persisted.",
          "type": "string"
        },
        "services": {
          "description": "The Services retrieved.",
          "items": {
            "$ref": "GoogleFirebaseAppcheckV1betaService"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaDeviceCheckConfig": {
      "type": "object",
      "description": "An app's DeviceCheck configuration object. This configuration is used by ExchangeDeviceCheckToken to validate device tokens issued to apps by DeviceCheck. It also controls certain properties of the returned App Check token, such as its ttl. Note that the Team ID registered with your app is used as part of the validation process. Please register it via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.iosApps/patch).",
      "id": "GoogleFirebaseAppcheckV1betaDeviceCheckConfig",
      "properties": {
        "keyId": {
          "description": "Required. The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. The relative resource name of the DeviceCheck configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```"
        },
        "privateKey": {
          "type": "string",
          "description": "Required. Input only. The contents of the private key (`.p8`) file associated with the key specified by `key_id`. For security reasons, this field will never be populated in any response."
        },
        "privateKeySet": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Whether the `private_key` field was previously set. Since we will never return the `private_key` field, this field is the only way to find out whether it was previously set."
        }
      }
    },
    "GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse": {
      "description": "Response message for the BatchUpdateServices method.",
      "type": "object",
      "id": "GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse",
      "properties": {
        "services": {
          "type": "array",
          "description": "Service objects after the updates have been applied.",
          "items": {
            "$ref": "GoogleFirebaseAppcheckV1betaService"
          }
        }
      }
    },
    "GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse": {
      "description": "Response message for the BatchGetRecaptchaConfigs method.",
      "type": "object",
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "$ref": "GoogleFirebaseAppcheckV1betaRecaptchaConfig"
          },
          "description": "RecaptchaConfigs retrieved."
        }
      },
      "id": "GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse"
    },
    "GoogleFirebaseAppcheckV1betaService": {
      "type": "object",
      "properties": {
        "enforcementMode": {
          "enum": [
            "OFF",
            "UNENFORCED",
            "ENFORCED"
          ],
          "enumDescriptions": [
            "Firebase App Check is not enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this mode by default.",
            "Firebase App Check is not enforced for the service. App Check metrics are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced.",
            "Firebase App Check is enforced for the service. The service will reject any request that attempts to access your project's resources if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some services will still allow requests bearing the developer's privileged service account credentials without an App Check token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor the composition of your callers. While the service is protected by App Check, other applicable protections, such as user authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since there are no outdated clients in use."
          ],
          "type": "string",
          "description": "Required. The App Check enforcement mode for this service."
        },
        "name": {
          "description": "Required. The relative resource name of the service configuration object, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database)",
          "type": "string"
        }
      },
      "description": "The enforcement configuration for a Firebase service supported by App Check.",
      "id": "GoogleFirebaseAppcheckV1betaService"
    },
    "GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest": {
      "type": "object",
      "id": "GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest",
      "description": "Request message for the ExchangeRecaptchaToken method.",
      "properties": {
        "recaptchaToken": {
          "type": "string",
          "description": "The reCAPTCHA token as returned by the [reCAPTCHA v3 JavaScript API](https://developers.google.com/recaptcha/docs/v3)."
        }
      }
    },
    "GoogleFirebaseAppcheckV1betaPublicJwk": {
      "id": "GoogleFirebaseAppcheckV1betaPublicJwk",
      "description": "A JWK as specified by [section 4 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4) and [section 6.3.1 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1).",
      "properties": {
        "alg": {
          "type": "string",
          "description": "See [section 4.4 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.4)."
        },
        "kty": {
          "type": "string",
          "description": "See [section 4.1 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.1)."
        },
        "e": {
          "description": "See [section 6.3.1.2 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1.2).",
          "type": "string"
        },
        "kid": {
          "description": "See [section 4.5 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.5).",
          "type": "string"
        },
        "n": {
          "description": "See [section 6.3.1.1 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1.1).",
          "type": "string"
        },
        "use": {
          "description": "See [section 4.2 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.2).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest": {
      "properties": {
        "challenge": {
          "description": "A one time challenge returned by GenerateAppAttestChallenge.",
          "format": "byte",
          "type": "string"
        },
        "assertion": {
          "description": "The CBOR encoded assertion provided by the Apple App Attest SDK.",
          "format": "byte",
          "type": "string"
        },
        "artifact": {
          "description": "The artifact previously returned by ExchangeAppAttestAttestation.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Request message for ExchangeAppAttestAssertion",
      "id": "GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest",
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest": {
      "id": "GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest",
      "description": "Request message for the ExchangeDebugToken method.",
      "properties": {
        "debugToken": {
          "description": "A debug token secret. This string must match a debug token secret previously created using CreateDebugToken.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaAttestationTokenResponse": {
      "type": "object",
      "properties": {
        "attestationToken": {
          "type": "string",
          "description": "An App Check token. App Check tokens are signed [JWTs](https://tools.ietf.org/html/rfc7519) containing claims that identify the attested app and Firebase project. This token is used to access Firebase services protected by App Check."
        },
        "ttl": {
          "format": "google-duration",
          "description": "The duration from the time this token is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.",
          "type": "string"
        }
      },
      "description": "Encapsulates an *App Check token*, which are used to access Firebase services protected by App Check.",
      "id": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
    },
    "GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest": {
      "description": "Request message for ExchangeAppAttestAttestation",
      "type": "object",
      "properties": {
        "keyId": {
          "format": "byte",
          "type": "string",
          "description": "The key ID generated by App Attest for the client app."
        },
        "challenge": {
          "format": "byte",
          "description": "The challenge previously generated by the FAC backend.",
          "type": "string"
        },
        "attestationStatement": {
          "type": "string",
          "description": "The App Attest statement as returned by Apple's client-side App Attest API. This is the CBOR object returned by Apple, which will be Base64 encoded in the JSON API.",
          "format": "byte"
        }
      },
      "id": "GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest"
    },
    "GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest": {
      "id": "GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest",
      "properties": {
        "updateMask": {
          "format": "google-fieldmask",
          "description": "Optional. A comma-separated list of names of fields in the Services to update. Example: `display_name`. If this field is present, the `update_mask` field in the UpdateServiceRequest messages must all match this field, or the entire batch fails and no updates will be committed.",
          "type": "string"
        },
        "requests": {
          "description": "Required. The request messages specifying the Services to update. A maximum of 100 objects can be updated in a batch.",
          "type": "array",
          "items": {
            "$ref": "GoogleFirebaseAppcheckV1betaUpdateServiceRequest"
          }
        }
      },
      "description": "Request message for the BatchUpdateServices method.",
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaListDebugTokensResponse": {
      "description": "Response message for the ListDebugTokens method.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListDebugTokens to find the next group of DebugTokens. Page tokens are short-lived and should not be persisted."
        },
        "debugTokens": {
          "type": "array",
          "description": "The DebugTokens retrieved.",
          "items": {
            "$ref": "GoogleFirebaseAppcheckV1betaDebugToken"
          }
        }
      },
      "type": "object",
      "id": "GoogleFirebaseAppcheckV1betaListDebugTokensResponse"
    },
    "GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest": {
      "properties": {},
      "id": "GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest",
      "description": "Request message for GenerateAppAttestChallenge",
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaRecaptchaConfig": {
      "description": "An app's reCAPTCHA v3 configuration object. This configuration is used by ExchangeRecaptchaToken to validate reCAPTCHA tokens issued to apps by reCAPTCHA v3. It also controls certain properties of the returned App Check token, such as its ttl.",
      "properties": {
        "siteSecretSet": {
          "description": "Output only. Whether the `site_secret` field was previously set. Since we will never return the `site_secret` field, this field is the only way to find out whether it was previously set.",
          "readOnly": true,
          "type": "boolean"
        },
        "siteSecret": {
          "description": "Required. Input only. The site secret used to identify your service for reCAPTCHA v3 verification. For security reasons, this field will never be populated in any response.",
          "type": "string"
        },
        "name": {
          "description": "Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ```",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleFirebaseAppcheckV1betaRecaptchaConfig"
    },
    "GoogleFirebaseAppcheckV1betaAppAttestChallengeResponse": {
      "type": "object",
      "description": "Response object for GenerateAppAttestChallenge",
      "id": "GoogleFirebaseAppcheckV1betaAppAttestChallengeResponse",
      "properties": {
        "ttl": {
          "type": "string",
          "format": "google-duration",
          "description": "The duration from the time this challenge is minted until it is expired. This field is intended to ease client-side token management, since the device may have clock skew, but is still able to accurately measure a duration. This expiration is intended to minimize the replay window within which a single challenge may be reused. See AIP 142 for naming of this field."
        },
        "challenge": {
          "description": "A one time use challenge for the client to pass to Apple's App Attest API.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GoogleFirebaseAppcheckV1betaUpdateServiceRequest": {
      "type": "object",
      "description": "Request message for the UpdateService method as well as an individual update message for the BatchUpdateServices method.",
      "id": "GoogleFirebaseAppcheckV1betaUpdateServiceRequest",
      "properties": {
        "updateMask": {
          "type": "string",
          "format": "google-fieldmask",
          "description": "Required. A comma-separated list of names of fields in the Service to update. Example: `enforcement_mode`."
        },
        "service": {
          "description": "Required. The Service to update. The Service's `name` field is used to identify the Service to be updated, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database)",
          "$ref": "GoogleFirebaseAppcheckV1betaService"
        }
      }
    },
    "GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest": {
      "type": "object",
      "properties": {
        "deviceToken": {
          "type": "string",
          "description": "The `device_token` as returned by Apple's client-side [DeviceCheck API](https://developer.apple.com/documentation/devicecheck/dcdevice). This is the Base64 encoded `Data` (Swift) or `NSData` (ObjC) object."
        }
      },
      "description": "Request message for the ExchangeDeviceCheckToken method.",
      "id": "GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest"
    },
    "GoogleFirebaseAppcheckV1betaPublicJwkSet": {
      "description": "The currently active set of public keys that can be used to verify App Check tokens. This object is a JWK set as specified by [section 5 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-5). For security, the response **must not** be cached for longer than one day.",
      "type": "object",
      "id": "GoogleFirebaseAppcheckV1betaPublicJwkSet",
      "properties": {
        "keys": {
          "description": "The set of public keys. See [section 5.1 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-5).",
          "type": "array",
          "items": {
            "$ref": "GoogleFirebaseAppcheckV1betaPublicJwk"
          }
        }
      }
    },
    "GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse": {
      "description": "Response message for the BatchGetDeviceCheckConfigs method.",
      "properties": {
        "configs": {
          "description": "DeviceCheckConfigs retrieved.",
          "items": {
            "$ref": "GoogleFirebaseAppcheckV1betaDeviceCheckConfig"
          },
          "type": "array"
        }
      },
      "id": "GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse",
      "type": "object"
    },
    "GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse": {
      "type": "object",
      "properties": {
        "attestationToken": {
          "description": "An attestation token which can be used to access Firebase APIs.",
          "$ref": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
        },
        "artifact": {
          "format": "byte",
          "type": "string",
          "description": "An artifact that should be passed back during the Assertion flow."
        }
      },
      "description": "Response message for ExchangeAppAttestAttestation and ExchangeAppAttestDebugAttestation",
      "id": "GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse"
    }
  },
  "mtlsRootUrl": "https://firebaseappcheck.mtls.googleapis.com/",
  "revision": "20210625",
  "resources": {
    "jwks": {
      "methods": {
        "get": {
          "flatPath": "v1beta/jwks",
          "path": "v1beta/{+name}",
          "parameters": {
            "name": {
              "required": true,
              "location": "path",
              "description": "Required. The relative resource name to the public JWK set. Must always be exactly the string `jwks`.",
              "pattern": "^jwks$",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "id": "firebaseappcheck.jwks.get",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "description": "Returns a public JWK set as specified by [RFC 7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App Check tokens. Exactly one of the public keys in the returned set will successfully validate any App Check token that is currently valid.",
          "response": {
            "$ref": "GoogleFirebaseAppcheckV1betaPublicJwkSet"
          },
          "parameterOrder": [
            "name"
          ]
        }
      }
    },
    "projects": {
      "resources": {
        "apps": {
          "resources": {
            "deviceCheckConfig": {
              "methods": {
                "patch": {
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/apps/[^/]+/deviceCheckConfig$",
                      "description": "Required. The relative resource name of the DeviceCheck configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```",
                      "type": "string"
                    },
                    "updateMask": {
                      "type": "string",
                      "description": "Required. A comma-separated list of names of fields in the DeviceCheckConfig Gets to update. Example: `key_id,private_key`.",
                      "location": "query",
                      "format": "google-fieldmask"
                    }
                  },
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDeviceCheckConfig"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDeviceCheckConfig"
                  },
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/deviceCheckConfig",
                  "description": "Updates the DeviceCheckConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange DeviceCheck tokens for App Check tokens. For security reasons, the `private_key` field is never populated in the response.",
                  "id": "firebaseappcheck.projects.apps.deviceCheckConfig.patch",
                  "httpMethod": "PATCH",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "path": "v1beta/{+name}"
                },
                "batchGet": {
                  "path": "v1beta/{+parent}/apps/-/deviceCheckConfig:batchGet",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "id": "firebaseappcheck.projects.apps.deviceCheckConfig.batchGet",
                  "parameters": {
                    "names": {
                      "repeated": true,
                      "description": "Required. The relative resource names of the DeviceCheckConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ``` A maximum of 100 objects can be retrieved in a batch.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "flatPath": "v1beta/projects/{projectsId}/apps/-/deviceCheckConfig:batchGet",
                  "description": "Gets the DeviceCheckConfigs for the specified list of apps atomically. For security reasons, the `private_key` field is never populated in the response.",
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse"
                  }
                },
                "get": {
                  "path": "v1beta/{+name}",
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDeviceCheckConfig"
                  },
                  "id": "firebaseappcheck.projects.apps.deviceCheckConfig.get",
                  "description": "Gets the DeviceCheckConfig for the specified app. For security reasons, the `private_key` field is never populated in the response.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. The relative resource name of the DeviceCheckConfig, in the format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```",
                      "location": "path",
                      "pattern": "^projects/[^/]+/apps/[^/]+/deviceCheckConfig$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "httpMethod": "GET",
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/deviceCheckConfig",
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            },
            "debugTokens": {
              "methods": {
                "patch": {
                  "path": "v1beta/{+name}",
                  "request": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDebugToken"
                  },
                  "description": "Updates the specified DebugToken. For security reasons, the `token` field cannot be updated, nor will it be populated in the response, but you can revoke the debug token using DeleteDebugToken.",
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDebugToken"
                  },
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens/{debugTokensId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameters": {
                    "updateMask": {
                      "format": "google-fieldmask",
                      "description": "Required. A comma-separated list of names of fields in the DebugToken to update. Example: `display_name`.",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$",
                      "description": "The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "firebaseappcheck.projects.apps.debugTokens.patch",
                  "httpMethod": "PATCH"
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$",
                      "location": "path",
                      "description": "Required. The relative resource name of the DebugToken to delete, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```",
                      "type": "string"
                    }
                  },
                  "description": "Deletes the specified DebugToken. A deleted debug token cannot be used to exchange for an App Check token. Use this method when you suspect the secret `token` has been compromised or when you no longer need the debug token.",
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens/{debugTokensId}",
                  "id": "firebaseappcheck.projects.apps.debugTokens.delete",
                  "response": {
                    "$ref": "GoogleProtobufEmpty"
                  },
                  "path": "v1beta/{+name}"
                },
                "get": {
                  "description": "Gets the specified DebugToken. For security reasons, the `token` field is never populated in the response.",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "path": "v1beta/{+name}",
                  "id": "firebaseappcheck.projects.apps.debugTokens.get",
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDebugToken"
                  },
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens/{debugTokensId}",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```",
                      "required": true,
                      "pattern": "^projects/[^/]+/apps/[^/]+/debugTokens/[^/]+$"
                    }
                  }
                },
                "list": {
                  "description": "Lists all DebugTokens for the specified app. For security reasons, the `token` field is never populated in the response.",
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens",
                  "id": "firebaseappcheck.projects.apps.debugTokens.list",
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaListDebugTokensResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "Token returned from a previous call to ListDebugTokens indicating where in the set of DebugTokens to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListDebugTokens must match the call that provided the page token; if they do not match, the result is undefined.",
                      "location": "query"
                    },
                    "parent": {
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/apps/[^/]+$",
                      "description": "Required. The relative resource name of the parent app for which to list each associated DebugToken, in the format: ``` projects/{project_number}/apps/{app_id} ```",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of DebugTokens to return in the response. Note that an app can have at most 20 debug tokens. The server may return fewer than this at its own discretion. If no value is specified (or too large a value is specified), the server will impose its own limit.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "path": "v1beta/{+parent}/debugTokens"
                },
                "create": {
                  "request": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDebugToken"
                  },
                  "id": "firebaseappcheck.projects.apps.debugTokens.create",
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaDebugToken"
                  },
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens",
                  "description": "Creates a new DebugToken for the specified app. For security reasons, after the creation operation completes, the `token` field cannot be updated or retrieved, but you can revoke the debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.",
                  "path": "v1beta/{+parent}/debugTokens",
                  "parameters": {
                    "parent": {
                      "description": "Required. The relative resource name of the parent app in which the specified DebugToken will be created, in the format: ``` projects/{project_number}/apps/{app_id} ```",
                      "pattern": "^projects/[^/]+/apps/[^/]+$",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent"
                  ]
                }
              }
            },
            "recaptchaConfig": {
              "methods": {
                "batchGet": {
                  "parameters": {
                    "names": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. The relative resource names of the RecaptchaConfigs to retrieve, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ``` A maximum of 100 objects can be retrieved in a batch.",
                      "repeated": true
                    },
                    "parent": {
                      "type": "string",
                      "pattern": "^projects/[^/]+$",
                      "required": true,
                      "description": "Required. The parent project name shared by all RecaptchaConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.",
                      "location": "path"
                    }
                  },
                  "description": "Gets the RecaptchaConfigs for the specified list of apps atomically. For security reasons, the `site_secret` field is never populated in the response.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "flatPath": "v1beta/projects/{projectsId}/apps/-/recaptchaConfig:batchGet",
                  "path": "v1beta/{+parent}/apps/-/recaptchaConfig:batchGet",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse"
                  },
                  "id": "firebaseappcheck.projects.apps.recaptchaConfig.batchGet"
                },
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "firebaseappcheck.projects.apps.recaptchaConfig.get",
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaRecaptchaConfig"
                  },
                  "parameters": {
                    "name": {
                      "description": "Required. The relative resource name of the RecaptchaConfig, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ```",
                      "required": true,
                      "pattern": "^projects/[^/]+/apps/[^/]+/recaptchaConfig$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "path": "v1beta/{+name}",
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/recaptchaConfig",
                  "description": "Gets the RecaptchaConfig for the specified app. For security reasons, the `site_secret` field is never populated in the response.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "httpMethod": "GET"
                },
                "patch": {
                  "request": {
                    "$ref": "GoogleFirebaseAppcheckV1betaRecaptchaConfig"
                  },
                  "response": {
                    "$ref": "GoogleFirebaseAppcheckV1betaRecaptchaConfig"
                  },
                  "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/recaptchaConfig",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/firebase"
                  ],
                  "id": "firebaseappcheck.projects.apps.recaptchaConfig.patch",
                  "path": "v1beta/{+name}",
                  "description": "Updates the RecaptchaConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA tokens for App Check tokens. For security reasons, the `site_secret` field is never populated in the response.",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/apps/[^/]+/recaptchaConfig$",
                      "type": "string",
                      "description": "Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ```",
                      "location": "path"
                    },
                    "updateMask": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. A comma-separated list of names of fields in the RecaptchaConfig to update. Example: `site_secret`.",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            }
          },
          "methods": {
            "exchangeSafetyNetToken": {
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeSafetyNetToken",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameters": {
                "app": {
                  "pattern": "^projects/[^/]+/apps/[^/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Required. The relative resource name of the Android app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard."
                }
              },
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
              },
              "description": "Validates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation#request-attestation-step). If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
              "httpMethod": "POST",
              "parameterOrder": [
                "app"
              ],
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest"
              },
              "id": "firebaseappcheck.projects.apps.exchangeSafetyNetToken",
              "path": "v1beta/{+app}:exchangeSafetyNetToken"
            },
            "exchangeAppAttestAttestation": {
              "parameterOrder": [
                "app"
              ],
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse"
              },
              "parameters": {
                "app": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/apps/[^/]+$",
                  "description": "Required. The full resource name to the iOS App. Format: \"projects/{project_id}/apps/{app_id}\""
                }
              },
              "id": "firebaseappcheck.projects.apps.exchangeAppAttestAttestation",
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest"
              },
              "path": "v1beta/{+app}:exchangeAppAttestAttestation",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeAppAttestAttestation",
              "description": "Accepts a AppAttest CBOR Attestation, and uses the developer's preconfigured team and bundle IDs to verify the token with Apple. Returns an Attestation Artifact that can later be exchanged for an AttestationToken in ExchangeAppAttestAssertion."
            },
            "exchangeDeviceCheckToken": {
              "httpMethod": "POST",
              "parameters": {
                "app": {
                  "pattern": "^projects/[^/]+/apps/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard."
                }
              },
              "parameterOrder": [
                "app"
              ],
              "description": "Accepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice) issued by DeviceCheck, and attempts to validate it with Apple. If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
              "id": "firebaseappcheck.projects.apps.exchangeDeviceCheckToken",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest"
              },
              "path": "v1beta/{+app}:exchangeDeviceCheckToken",
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
              },
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeDeviceCheckToken"
            },
            "exchangeCustomToken": {
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest"
              },
              "parameterOrder": [
                "app"
              ],
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeCustomToken",
              "path": "v1beta/{+app}:exchangeCustomToken",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
              },
              "httpMethod": "POST",
              "parameters": {
                "app": {
                  "description": "Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.",
                  "type": "string",
                  "pattern": "^projects/[^/]+/apps/[^/]+$",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Validates a custom token signed using your project's Admin SDK service account credentials. If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
              "id": "firebaseappcheck.projects.apps.exchangeCustomToken"
            },
            "generateAppAttestChallenge": {
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest"
              },
              "path": "v1beta/{+app}:generateAppAttestChallenge",
              "parameters": {
                "app": {
                  "type": "string",
                  "required": true,
                  "description": "Required. The full resource name to the iOS App. Format: \"projects/{project_id}/apps/{app_id}\"",
                  "pattern": "^projects/[^/]+/apps/[^/]+$",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "app"
              ],
              "httpMethod": "POST",
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:generateAppAttestChallenge",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "id": "firebaseappcheck.projects.apps.generateAppAttestChallenge",
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaAppAttestChallengeResponse"
              },
              "description": "Initiates the App Attest flow by generating a challenge which will be used as a type of nonce for this attestation."
            },
            "exchangeRecaptchaToken": {
              "parameters": {
                "app": {
                  "required": true,
                  "description": "Required. The relative resource name of the web app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.",
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/apps/[^/]+$"
                }
              },
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeRecaptchaToken",
              "description": "Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest"
              },
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
              },
              "path": "v1beta/{+app}:exchangeRecaptchaToken",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "httpMethod": "POST",
              "id": "firebaseappcheck.projects.apps.exchangeRecaptchaToken",
              "parameterOrder": [
                "app"
              ]
            },
            "exchangeAppAttestAssertion": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameters": {
                "app": {
                  "type": "string",
                  "pattern": "^projects/[^/]+/apps/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. The full resource name to the iOS App. Format: \"projects/{project_id}/apps/{app_id}\""
                }
              },
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeAppAttestAssertion",
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "app"
              ],
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
              },
              "path": "v1beta/{+app}:exchangeAppAttestAssertion",
              "description": "Accepts a AppAttest Artifact and Assertion, and uses the developer's preconfigured auth token to verify the token with Apple. Returns an AttestationToken with the App ID as specified by the `app` field included as attested claims.",
              "id": "firebaseappcheck.projects.apps.exchangeAppAttestAssertion"
            },
            "exchangeDebugToken": {
              "parameterOrder": [
                "app"
              ],
              "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeDebugToken",
              "parameters": {
                "app": {
                  "pattern": "^projects/[^/]+/apps/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard."
                }
              },
              "id": "firebaseappcheck.projects.apps.exchangeDebugToken",
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest"
              },
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaAttestationTokenResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "path": "v1beta/{+app}:exchangeDebugToken",
              "httpMethod": "POST",
              "description": "Validates a debug token secret that you have previously created using CreateDebugToken. If valid, returns an App Check token encapsulated in an AttestationTokenResponse. Note that a restrictive quota is enforced on this method to prevent accidental exposure of the app to abuse."
            }
          }
        },
        "services": {
          "methods": {
            "patch": {
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaService"
              },
              "id": "firebaseappcheck.projects.services.patch",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "Required. A comma-separated list of names of fields in the Service to update. Example: `enforcement_mode`.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/services/[^/]+$",
                  "description": "Required. The relative resource name of the service configuration object, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database)",
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "Updates the specified Service configuration.",
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaService"
              },
              "flatPath": "v1beta/projects/{projectsId}/services/{servicesId}",
              "path": "v1beta/{+name}",
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "location": "query",
                  "description": "The maximum number of Services to return in the response. Only explicitly configured services are returned. The server may return fewer than this at its own discretion. If no value is specified (or too large a value is specified), the server will impose its own limit."
                },
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The relative resource name of the parent project for which to list each associated Service, in the format: ``` projects/{project_number} ```"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token returned from a previous call to ListServices indicating where in the set of Services to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListServices must match the call that provided the page token; if they do not match, the result is undefined.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "id": "firebaseappcheck.projects.services.list",
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1beta/projects/{projectsId}/services",
              "path": "v1beta/{+parent}/services",
              "description": "Lists all Service configurations for the specified project. Only Services which were explicitly configured using UpdateService or BatchUpdateServices will be returned.",
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaListServicesResponse"
              }
            },
            "batchUpdate": {
              "path": "v1beta/{+parent}/services:batchUpdate",
              "httpMethod": "POST",
              "id": "firebaseappcheck.projects.services.batchUpdate",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse"
              },
              "description": "Updates the specified Service configurations atomically.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Required. The parent project name shared by all Service configurations being updated, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being updated must match this field, or the entire batch fails.",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "request": {
                "$ref": "GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest"
              },
              "flatPath": "v1beta/projects/{projectsId}/services:batchUpdate"
            },
            "get": {
              "response": {
                "$ref": "GoogleFirebaseAppcheckV1betaService"
              },
              "httpMethod": "GET",
              "path": "v1beta/{+name}",
              "flatPath": "v1beta/projects/{projectsId}/services/{servicesId}",
              "id": "firebaseappcheck.projects.services.get",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "description": "Required. The relative resource name of the Service to retrieve, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database)",
                  "type": "string",
                  "pattern": "^projects/[^/]+/services/[^/]+$"
                }
              },
              "description": "Gets the Service configuration for the specified service name.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/firebase"
              ]
            }
          }
        }
      }
    }
  },
  "parameters": {
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "alt": {
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "description": "V1 error format."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    }
  },
  "name": "firebaseappcheck",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud Platform data"
        },
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        }
      }
    }
  },
  "protocol": "rest",
  "version_module": true,
  "id": "firebaseappcheck:v1beta"
}

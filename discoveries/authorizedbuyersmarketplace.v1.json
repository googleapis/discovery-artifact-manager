{
  "documentationLink": "https://developers.google.com/authorized-buyers/apis/marketplace/reference/rest/",
  "protocol": "rest",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/authorized-buyers-marketplace": {
          "description": "See, create, edit, and delete your Authorized Buyers Marketplace entities."
        }
      }
    }
  },
  "version_module": true,
  "discoveryVersion": "v1",
  "ownerDomain": "google.com",
  "schemas": {
    "MobileApplicationTargeting": {
      "properties": {
        "firstPartyTargeting": {
          "description": "Publisher owned apps to be targeted or excluded by the publisher to display the ads in.",
          "$ref": "FirstPartyMobileApplicationTargeting"
        }
      },
      "description": "Mobile application targeting settings.",
      "id": "MobileApplicationTargeting",
      "type": "object"
    },
    "Money": {
      "type": "object",
      "properties": {
        "units": {
          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
          "type": "string",
          "format": "int64"
        },
        "currencyCode": {
          "type": "string",
          "description": "The three-letter currency code defined in ISO 4217."
        },
        "nanos": {
          "format": "int32",
          "type": "integer",
          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
        }
      },
      "description": "Represents an amount of money with its currency type.",
      "id": "Money"
    },
    "DayPartTargeting": {
      "id": "DayPartTargeting",
      "type": "object",
      "description": "Represents Daypart targeting.",
      "properties": {
        "timeZoneType": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This field is unused.",
            "The publisher's time zone",
            "The user's time zone"
          ],
          "enum": [
            "TIME_ZONE_TYPE_UNSPECIFIED",
            "SELLER",
            "USER"
          ],
          "description": "The time zone type of the day parts"
        },
        "dayParts": {
          "type": "array",
          "description": "The targeted weekdays and times",
          "items": {
            "$ref": "DayPart"
          }
        }
      }
    },
    "CancelNegotiationRequest": {
      "properties": {},
      "description": "Request to cancel an ongoing negotiation.",
      "id": "CancelNegotiationRequest",
      "type": "object"
    },
    "Deal": {
      "type": "object",
      "properties": {
        "dealType": {
          "type": "string",
          "readOnly": true,
          "enumDescriptions": [
            "Default, unspecified deal type.",
            "Preferred deals.",
            "Private auction deals.",
            "Programmatic guaranteed deals."
          ],
          "description": "Output only. Type of deal.",
          "enum": [
            "DEAL_TYPE_UNSPECIFIED",
            "PREFERRED_DEAL",
            "PRIVATE_AUCTION",
            "PROGRAMMATIC_GUARANTEED"
          ]
        },
        "programmaticGuaranteedTerms": {
          "description": "The terms for programmatic guaranteed deals.",
          "$ref": "ProgrammaticGuaranteedTerms"
        },
        "client": {
          "type": "string",
          "description": "Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`",
          "readOnly": true
        },
        "billedBuyer": {
          "description": "Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`",
          "type": "string",
          "readOnly": true
        },
        "buyer": {
          "description": "Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "description": "Output only. The time of the deal creation.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "sellerTimeZone": {
          "description": "Output only. Time zone of the seller used to mark the boundaries of a day for daypart targeting and CPD billing.",
          "$ref": "TimeZone",
          "readOnly": true
        },
        "displayName": {
          "description": "Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}",
          "type": "string"
        },
        "estimatedGrossSpend": {
          "description": "Specified by buyers in request for proposal (RFP) to notify publisher the total estimated spend for the proposal. Publishers will receive this information and send back proposed deals accordingly.",
          "$ref": "Money"
        },
        "description": {
          "readOnly": true,
          "description": "Output only. Free text description for the deal terms.",
          "type": "string"
        },
        "preferredDealTerms": {
          "description": "The terms for preferred deals.",
          "$ref": "PreferredDealTerms"
        },
        "deliveryControl": {
          "description": "Output only. Specifies the pacing set by the publisher.",
          "$ref": "DeliveryControl",
          "readOnly": true
        },
        "creativeRequirements": {
          "description": "Output only. Metadata about the creatives of this deal.",
          "readOnly": true,
          "$ref": "CreativeRequirements"
        },
        "updateTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time when the deal was last updated."
        },
        "privateAuctionTerms": {
          "$ref": "PrivateAuctionTerms",
          "description": "The terms for private auction deals."
        },
        "flightStartTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (e.g., in milliseconds) will be truncated towards the start of time in seconds."
        },
        "targeting": {
          "description": "Specifies the subset of inventory targeted by the deal. Can be updated by the buyer before the deal is finalized.",
          "$ref": "MarketplaceTargeting"
        },
        "flightEndTime": {
          "description": "Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.",
          "format": "google-datetime",
          "type": "string"
        },
        "proposalRevision": {
          "description": "Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.",
          "type": "string",
          "readOnly": true,
          "format": "int64"
        },
        "publisherProfile": {
          "description": "Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`",
          "type": "string"
        }
      },
      "description": "A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.",
      "id": "Deal"
    },
    "SubscribeClientsRequest": {
      "id": "SubscribeClientsRequest",
      "description": "Request message for SubscribeAuctionPackageClients.",
      "type": "object",
      "properties": {
        "clients": {
          "items": {
            "type": "string"
          },
          "description": "Optional. A list of client buyers to subscribe to the auction package, with client buyer in the format `buyers/{accountId}/clients/{clientAccountId}`. The current buyer will be subscribed to the auction package regardless of the list contents if not already.",
          "type": "array"
        }
      }
    },
    "UnsubscribeAuctionPackageRequest": {
      "id": "UnsubscribeAuctionPackageRequest",
      "type": "object",
      "description": "Request message for UnsubscribeAuctionPackage.",
      "properties": {}
    },
    "InventorySizeTargeting": {
      "id": "InventorySizeTargeting",
      "type": "object",
      "properties": {
        "targetedInventorySizes": {
          "description": "A list of inventory sizes to be included.",
          "items": {
            "$ref": "AdSize"
          },
          "type": "array"
        },
        "excludedInventorySizes": {
          "description": "A list of inventory sizes to be excluded.",
          "items": {
            "$ref": "AdSize"
          },
          "type": "array"
        }
      },
      "description": "Represents the size of an ad unit that can be targeted on a bid request."
    },
    "ListPublisherProfilesResponse": {
      "type": "object",
      "id": "ListPublisherProfilesResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to fetch the next page of results.",
          "type": "string"
        },
        "publisherProfiles": {
          "description": "The list of matching publisher profiles.",
          "type": "array",
          "items": {
            "$ref": "PublisherProfile"
          }
        }
      },
      "description": "Response message for profiles visible to the buyer."
    },
    "TechnologyTargeting": {
      "description": "Represents targeting about various types of technology.",
      "type": "object",
      "id": "TechnologyTargeting",
      "properties": {
        "deviceCapabilityTargeting": {
          "$ref": "CriteriaTargeting",
          "description": "IDs of device capabilities to be included/excluded."
        },
        "operatingSystemTargeting": {
          "$ref": "OperatingSystemTargeting",
          "description": "Operating system related targeting information."
        },
        "deviceCategoryTargeting": {
          "description": "IDs of device categories to be included/excluded.",
          "$ref": "CriteriaTargeting"
        }
      }
    },
    "ResumeFinalizedDealRequest": {
      "id": "ResumeFinalizedDealRequest",
      "properties": {},
      "description": "Request message for resuming a finalized deal.",
      "type": "object"
    },
    "ListClientsResponse": {
      "description": "Response message for the list method.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve the next page of results. Pass this value in the ListClientsRequest.pageToken field in the subsequent call to the list method to retrieve the next page of results."
        },
        "clients": {
          "items": {
            "$ref": "Client"
          },
          "description": "The returned list of clients.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "ListClientsResponse"
    },
    "BatchUpdateDealsRequest": {
      "description": "Request message for batch updating deals.",
      "id": "BatchUpdateDealsRequest",
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "UpdateDealRequest"
          },
          "description": "Required. List of request messages to update deals."
        }
      }
    },
    "UriTargeting": {
      "description": "Represents a list of targeted and excluded URLs (e.g., google.com). For Private Auction Deals, URLs are either included or excluded. For Programmatic Guaranteed and Preferred Deals, this doesn't apply.",
      "properties": {
        "excludedUris": {
          "type": "array",
          "description": "A list of URLs to be excluded.",
          "items": {
            "type": "string"
          }
        },
        "targetedUris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of URLs to be included."
        }
      },
      "type": "object",
      "id": "UriTargeting"
    },
    "ActivateClientRequest": {
      "id": "ActivateClientRequest",
      "properties": {},
      "description": "Request message for activating a client.",
      "type": "object"
    },
    "DayPart": {
      "type": "object",
      "properties": {
        "dayOfWeek": {
          "enumDescriptions": [
            "The day of the week is unspecified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "type": "string",
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ],
          "description": "Day of week for the period."
        },
        "startTime": {
          "$ref": "TimeOfDay",
          "description": "Hours in 24 hour time between 0 and 24, inclusive. Note: 24 is logically equivalent to 0, but is supported since in some cases there may need to be differentiation made between midnight on one day and midnight on the next day. Accepted values for minutes are [0, 15, 30, 45]. 0 is the only acceptable minute value for hour 24. Seconds and nanos are ignored."
        },
        "endTime": {
          "$ref": "TimeOfDay",
          "description": "Hours in 24 hour time between 0 and 24, inclusive. Note: 24 is logically equivalent to 0, but is supported since in some cases there may need to be differentiation made between midnight on one day and midnight on the next day. Accepted values for minutes are [0, 15, 30, 45]. 0 is the only acceptable minute value for hour 24. Seconds and nanos are ignored."
        }
      },
      "description": "Defines targeting for a period of time on a specific week day.",
      "id": "DayPart"
    },
    "OperatingSystemTargeting": {
      "type": "object",
      "description": "Represents targeting information for operating systems.",
      "properties": {
        "operatingSystemVersionCriteria": {
          "$ref": "CriteriaTargeting",
          "description": "IDs of operating system versions to be included/excluded."
        },
        "operatingSystemCriteria": {
          "description": "IDs of operating systems to be included/excluded.",
          "$ref": "CriteriaTargeting"
        }
      },
      "id": "OperatingSystemTargeting"
    },
    "FinalizedDeal": {
      "id": "FinalizedDeal",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the finalized deal. Format: `buyers/{accountId}/finalizeddeals/{finalizedDealId}`",
          "type": "string"
        },
        "dealPausingInfo": {
          "$ref": "DealPausingInfo",
          "description": "Information related to deal pausing for the deal."
        },
        "dealServingStatus": {
          "enumDescriptions": [
            "Unspecified.",
            "The deal is actively serving or ready to serve when the start date is reached.",
            "The deal serving has ended.",
            "The deal serving is paused by buyer.",
            "The deal serving is paused by seller."
          ],
          "description": "Serving status of the deal.",
          "type": "string",
          "enum": [
            "DEAL_SERVING_STATUS_UNSPECIFIED",
            "ACTIVE",
            "ENDED",
            "PAUSED_BY_BUYER",
            "PAUSED_BY_SELLER"
          ]
        },
        "deal": {
          "$ref": "Deal",
          "description": "A copy of the Deal made upon finalization. During renegotiation, this will reflect the last finalized deal before renegotiation was initiated."
        },
        "readyToServe": {
          "type": "boolean",
          "description": "Whether the Programmatic Guaranteed deal is ready for serving."
        },
        "rtbMetrics": {
          "description": "Real-time bidding metrics for this deal.",
          "$ref": "RtbMetrics"
        }
      },
      "description": "A finalized deal is a snapshot of the deal when both buyer and seller accept the deal. The buyer or seller can update the deal after it's been finalized and renegotiate on the deal targeting, terms and other fields, while at the same time the finalized snapshot of the deal can still be retrieved via this API. The finalized deal contains a copy of the deal as it existed when most recently finalized, as well as fields related to deal serving such as pause/resume status, RTB metrics, etc."
    },
    "AddCreativeRequest": {
      "properties": {
        "creative": {
          "description": "Name of the creative to add to the finalized deal, in the format `buyers/{buyerAccountId}/creatives/{creativeId}`. See creative.name.",
          "type": "string"
        }
      },
      "description": "Request message for adding creative to be used in the bidding process for the finalized deal.",
      "type": "object",
      "id": "AddCreativeRequest"
    },
    "BatchUpdateDealsResponse": {
      "id": "BatchUpdateDealsResponse",
      "description": "Response message for batch updating deals.",
      "properties": {
        "deals": {
          "type": "array",
          "items": {
            "$ref": "Deal"
          },
          "description": "Deals updated."
        }
      },
      "type": "object"
    },
    "FrequencyCap": {
      "id": "FrequencyCap",
      "type": "object",
      "description": "Message contains details about publisher-set frequency caps of the delivery.",
      "properties": {
        "maxImpressions": {
          "type": "integer",
          "description": "The maximum number of impressions that can be served to a user within the specified time period.",
          "format": "int32"
        },
        "timeUnitsCount": {
          "format": "int32",
          "description": "The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.",
          "type": "integer"
        },
        "timeUnitType": {
          "enum": [
            "TIME_UNIT_TYPE_UNSPECIFIED",
            "MINUTE",
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH",
            "LIFETIME",
            "POD",
            "STREAM"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined time unit type. This just indicates the variable with this value hasn't been initialized.",
            "Minute unit.",
            "Hour unit.",
            "Day unit.",
            "Week unit.",
            "Month unit.",
            "Lifecycle/Lifetime unit.",
            "Pod unit.",
            "Stream unit."
          ],
          "description": "The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.",
          "type": "string"
        }
      }
    },
    "ProgrammaticGuaranteedTerms": {
      "type": "object",
      "properties": {
        "guaranteedLooks": {
          "description": "Count of guaranteed looks.",
          "type": "string",
          "format": "int64"
        },
        "percentShareOfVoice": {
          "type": "string",
          "format": "int64",
          "description": "For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached. Valid value is within range 0~100."
        },
        "fixedPrice": {
          "$ref": "Price",
          "description": "Fixed price for the deal."
        },
        "reservationType": {
          "type": "string",
          "enum": [
            "RESERVATION_TYPE_UNSPECIFIED",
            "STANDARD",
            "SPONSORSHIP"
          ],
          "enumDescriptions": [
            "An unspecified reservation type.",
            "Non-sponsorship deal.",
            "Sponsorship deals don't have impression goal (guaranteed_looks) and they are served based on the flight dates. For CPM Sponsorship deals, impression_cap is the lifetime impression limit."
          ],
          "description": "The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD."
        },
        "impressionCap": {
          "type": "string",
          "format": "int64",
          "description": "The lifetime impression cap for CPM Sponsorship deals. Deal will stop serving when cap is reached."
        },
        "minimumDailyLooks": {
          "description": "Daily minimum looks for CPD deal types.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "ProgrammaticGuaranteedTerms",
      "description": "Pricing terms for Programmatic Guaranteed Deals."
    },
    "Price": {
      "description": "Represents a price and a pricing type for a deal.",
      "type": "object",
      "properties": {
        "amount": {
          "description": "The actual price with currency specified.",
          "$ref": "Money"
        },
        "type": {
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "CPM",
            "CPD"
          ],
          "description": "The pricing type for the deal.",
          "enumDescriptions": [
            "A placeholder for an undefined pricing type. If the pricing type is unspecified, CPM will be used instead.",
            "Cost per thousand impressions.",
            "Cost per day."
          ]
        }
      },
      "id": "Price"
    },
    "Contact": {
      "id": "Contact",
      "type": "object",
      "description": "Contains information on how a buyer or seller can be reached.",
      "properties": {
        "email": {
          "description": "Email address for the contact.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The display_name of the contact."
        }
      }
    },
    "VideoTargeting": {
      "properties": {
        "excludedPositionTypes": {
          "description": "A list of video positions to be excluded. When this field is populated, the targeted_position_types field must be empty.",
          "items": {
            "enum": [
              "POSITION_TYPE_UNSPECIFIED",
              "PREROLL",
              "MIDROLL",
              "POSTROLL"
            ],
            "enumDescriptions": [
              "A placeholder for an undefined video position.",
              "Ad is played before the video.",
              "Ad is played during the video.",
              "Ad is played after the video."
            ],
            "type": "string"
          },
          "type": "array"
        },
        "targetedPositionTypes": {
          "description": "A list of video positions to be included. When this field is populated, the excluded_position_types field must be empty.",
          "items": {
            "type": "string",
            "enum": [
              "POSITION_TYPE_UNSPECIFIED",
              "PREROLL",
              "MIDROLL",
              "POSTROLL"
            ],
            "enumDescriptions": [
              "A placeholder for an undefined video position.",
              "Ad is played before the video.",
              "Ad is played during the video.",
              "Ad is played after the video."
            ]
          },
          "type": "array"
        }
      },
      "id": "VideoTargeting",
      "type": "object",
      "description": "Represents targeting information about video."
    },
    "AuctionPackage": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Output only. A description of the auction package.",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. Time the auction package was created."
        },
        "updateTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time the auction package was last updated. This value is only increased when this auction package is updated but never when a buyer subscribed."
        },
        "displayName": {
          "type": "string",
          "description": "The display_name assigned to the auction package."
        },
        "subscribedClients": {
          "description": "Output only. The list of clients of the current buyer that are subscribed to the AuctionPackage. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Immutable. The unique identifier for the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}` The auction_package_id part of name is sent in the BidRequest to all RTB bidders and is returned as deal_id by the bidder in the BidResponse."
        },
        "creator": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The buyer that created this auction package. Format: `buyers/{buyerAccountId}`"
        }
      },
      "id": "AuctionPackage",
      "description": "Defines a segment of inventory that buyer wants to buy. It's created by buyer and could be shared with multiple buyers."
    },
    "CriteriaTargeting": {
      "id": "CriteriaTargeting",
      "description": "Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.",
      "type": "object",
      "properties": {
        "targetedCriteriaIds": {
          "items": {
            "type": "string",
            "format": "int64"
          },
          "type": "array",
          "description": "A list of numeric IDs to be included."
        },
        "excludedCriteriaIds": {
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "A list of numeric IDs to be excluded.",
          "type": "array"
        }
      }
    },
    "UpdateDealRequest": {
      "description": "Request message for updating the deal at the given revision number.",
      "id": "UpdateDealRequest",
      "type": "object",
      "properties": {
        "updateMask": {
          "description": "List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, e.g. false for boolean fields, 0 for integer fields. A special field mask consisting of a single path \"*\" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.",
          "type": "string",
          "format": "google-fieldmask"
        },
        "deal": {
          "$ref": "Deal",
          "description": "Required. The deal to update. The deal's `name` field is used to identify the deal to be updated. Note: proposal_revision will have to be provided within the resource or else an error will be thrown. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}"
        }
      }
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty"
    },
    "TimeOfDay": {
      "type": "object",
      "properties": {
        "seconds": {
          "format": "int32",
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
          "type": "integer"
        },
        "nanos": {
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
          "format": "int32",
          "type": "integer"
        },
        "hours": {
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
          "type": "integer",
          "format": "int32"
        },
        "minutes": {
          "format": "int32",
          "description": "Minutes of hour of day. Must be from 0 to 59.",
          "type": "integer"
        }
      },
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
      "id": "TimeOfDay"
    },
    "PreferredDealTerms": {
      "id": "PreferredDealTerms",
      "properties": {
        "fixedPrice": {
          "$ref": "Price",
          "description": "Fixed price for the deal."
        }
      },
      "type": "object",
      "description": "Pricing terms for Preferred Deals."
    },
    "AcceptProposalRequest": {
      "properties": {
        "proposalRevision": {
          "description": "The last known client revision number of the proposal.",
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Request to accept a proposal. Accepting a proposal implies acceptance of the publisher terms_and_conditions, if any.",
      "id": "AcceptProposalRequest",
      "type": "object"
    },
    "DealPausingInfo": {
      "type": "object",
      "description": "Information related to deal pausing.",
      "id": "DealPausingInfo",
      "properties": {
        "pauseReason": {
          "type": "string",
          "description": "The reason for the pausing of the deal; empty for active deals."
        },
        "pausingConsented": {
          "type": "boolean",
          "description": "Whether pausing is consented between buyer and seller for the deal."
        },
        "pauseRole": {
          "description": "The party that first paused the deal; unspecified for active deals.",
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ],
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ]
        }
      }
    },
    "AddNoteRequest": {
      "type": "object",
      "id": "AddNoteRequest",
      "properties": {
        "note": {
          "$ref": "Note",
          "description": "The note to add."
        }
      },
      "description": "Request to add a note."
    },
    "DeactivateClientRequest": {
      "description": "Request message for disabling a client.",
      "properties": {},
      "id": "DeactivateClientRequest",
      "type": "object"
    },
    "ListFinalizedDealsResponse": {
      "type": "object",
      "properties": {
        "finalizedDeals": {
          "description": "The list of finalized deals.",
          "type": "array",
          "items": {
            "$ref": "FinalizedDeal"
          }
        },
        "nextPageToken": {
          "description": "Token to fetch the next page of results.",
          "type": "string"
        }
      },
      "description": "Response message for listing finalized deals.",
      "id": "ListFinalizedDealsResponse"
    },
    "ListDealsResponse": {
      "type": "object",
      "properties": {
        "deals": {
          "type": "array",
          "description": "The list of deals.",
          "items": {
            "$ref": "Deal"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to fetch the next page of results."
        }
      },
      "description": "Response message for listing deals in a proposal.",
      "id": "ListDealsResponse"
    },
    "FirstPartyMobileApplicationTargeting": {
      "type": "object",
      "properties": {
        "targetedAppIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of application IDs to be included."
        },
        "excludedAppIds": {
          "description": "A list of application IDs to be excluded.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "FirstPartyMobileApplicationTargeting",
      "description": "Represents a list of targeted and excluded mobile application IDs that publishers own. Android App ID, for example, com.google.android.apps.maps, can be found in Google Play Store URL. iOS App ID (which is a number) can be found at the end of iTunes store URL. First party mobile applications is either included or excluded."
    },
    "Client": {
      "properties": {
        "state": {
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "description": "Output only. The state of the client.",
          "enumDescriptions": [
            "A placeholder for an undefined client state. Should not be used.",
            "A client that is currently active and allowed to access the Authorized Buyers UI.",
            "A client that is currently inactive and not allowed to access the Authorized Buyers UI."
          ],
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`",
          "readOnly": true
        },
        "role": {
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined client role. This value should never be specified in user input for create or update method, otherwise an error will be returned.",
            "Users associated with this client role can only view proposals and deals in the Marketplace UI. They cannot negotiate or approve proposals and deals sent from publishers or send RFP to publishers.",
            "Users associated with this client role can view and negotiate on the proposals and deals in the Marketplace UI sent from publishers and send RFP to publishers, but cannot approve the proposals and deals by themselves. The buyer can approve the proposals and deals on behalf of the client.",
            "Users associated with this client role can view, negotiate and approve proposals and deals in the Marketplace UI and send RFP to publishers."
          ],
          "enum": [
            "CLIENT_ROLE_UNSPECIFIED",
            "CLIENT_DEAL_VIEWER",
            "CLIENT_DEAL_NEGOTIATOR",
            "CLIENT_DEAL_APPROVER"
          ],
          "description": "Required. The role assigned to the client. Each role implies a set of permissions granted to the client."
        },
        "displayName": {
          "description": "Required. Display name shown to publishers. Must be unique for clients without partnerClientId specified. Maximum length of 255 characters is allowed.",
          "type": "string"
        },
        "partnerClientId": {
          "type": "string",
          "description": "Arbitrary unique identifier provided by the buyer. This field can be used to associate a client with an identifier in the namespace of the buyer, lookup clients by that identifier and verify whether an Authorized Buyers account of the client already exists. If present, must be unique across all the clients."
        },
        "sellerVisible": {
          "description": "Whether the client will be visible to sellers.",
          "type": "boolean"
        }
      },
      "id": "Client",
      "description": "A client represents an agency, a brand, or an advertiser customer of the buyer. Based on the client's role, its client users will have varying levels of restricted access to the Marketplace and certain other sections of the Authorized Buyers UI.",
      "type": "object"
    },
    "PrivateAuctionTerms": {
      "type": "object",
      "properties": {
        "openAuctionAllowed": {
          "readOnly": true,
          "description": "Output only. True if open auction buyers are allowed to compete with invited buyers in this private auction.",
          "type": "boolean"
        },
        "floorPrice": {
          "description": "The minimum price buyer has to bid to compete in the private auction.",
          "$ref": "Price"
        }
      },
      "description": "Pricing terms for Private Auctions.",
      "id": "PrivateAuctionTerms"
    },
    "DeliveryControl": {
      "id": "DeliveryControl",
      "properties": {
        "deliveryRateType": {
          "enumDescriptions": [
            "A placeholder for an undefined delivery rate type.",
            "Impressions are served uniformly over the life of the deal.",
            "Impressions are served front-loaded.",
            "Impressions are served as fast as possible."
          ],
          "type": "string",
          "description": "Output only. Specifies how the impression delivery will be paced.",
          "readOnly": true,
          "enum": [
            "DELIVERY_RATE_TYPE_UNSPECIFIED",
            "EVENLY",
            "FRONT_LOADED",
            "AS_FAST_AS_POSSIBLE"
          ]
        },
        "creativeRotationType": {
          "enum": [
            "CREATIVE_ROTATION_TYPE_UNSPECIFIED",
            "ROTATION_EVEN",
            "ROTATION_OPTIMIZED",
            "ROTATION_MANUAL",
            "ROTATION_SEQUENTIAL"
          ],
          "readOnly": true,
          "description": "Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.",
          "enumDescriptions": [
            "Creatives are displayed roughly the same number of times over the duration of the deal.",
            "Creatives are displayed roughly the same number of times over the duration of the deal.",
            "Creatives are served roughly proportionally to their performance.",
            "Creatives are served roughly proportionally to their weights.",
            "Creatives are served exactly in sequential order, aka Storyboarding."
          ],
          "type": "string"
        },
        "roadblockingType": {
          "enumDescriptions": [
            "A placeholder for an unspecified roadblocking type.",
            "Only one creative from a deal can serve per ad request. https://support.google.com/admanager/answer/177277.",
            "Any number of creatives from a deal can serve together per ad request.",
            "As many creatives from a deal as can fit on a page will serve. This could mean anywhere from one to all of a deal's creatives given the size constraints of ad slots on a page.",
            "All or none of the creatives from a deal will serve.",
            "A master/companion creative set roadblocking type."
          ],
          "description": "Output only. Specifies the roadblocking type in display creatives.",
          "enum": [
            "ROADBLOCKING_TYPE_UNSPECIFIED",
            "ONLY_ONE",
            "ONE_OR_MORE",
            "AS_MANY_AS_POSSIBLE",
            "ALL_ROADBLOCK",
            "CREATIVE_SET"
          ],
          "type": "string",
          "readOnly": true
        },
        "frequencyCap": {
          "type": "array",
          "items": {
            "$ref": "FrequencyCap"
          },
          "description": "Output only. Specifies any frequency caps. Cannot be filtered within ListDealsRequest.",
          "readOnly": true
        },
        "companionDeliveryType": {
          "enum": [
            "COMPANION_DELIVERY_TYPE_UNSPECIFIED",
            "DELIVERY_OPTIONAL",
            "DELIVERY_AT_LEAST_ONE",
            "DELIVERY_ALL"
          ],
          "type": "string",
          "readOnly": true,
          "enumDescriptions": [
            "A placeholder for an unspecified companion delivery type.",
            "Companions are not required to serve a creative set. The creative set can serve an inventory that has zero or more matching companions.",
            "At least one companion must be served in order for the creative set to be used.",
            "All companions in the set must be served in order for the creative set to be used. This can still serve to inventory that has more companions than can be filled."
          ],
          "description": "Output only. Specifies roadblocking in a master companion lineitem."
        }
      },
      "type": "object",
      "description": "Message contains details about how the deal will be paced."
    },
    "SetReadyToServeRequest": {
      "id": "SetReadyToServeRequest",
      "description": "Request message for setting ready to serve for a finalized deal.",
      "type": "object",
      "properties": {}
    },
    "PlacementTargeting": {
      "type": "object",
      "description": "Represents targeting about where the ads can appear, e.g., certain sites or mobile applications. Different placement targeting types will be logically OR'ed.",
      "id": "PlacementTargeting",
      "properties": {
        "uriTargeting": {
          "description": "URLs to be included/excluded.",
          "$ref": "UriTargeting"
        },
        "mobileApplicationTargeting": {
          "description": "Mobile application targeting information in a deal. This doesn't apply to Auction Packages.",
          "$ref": "MobileApplicationTargeting"
        }
      }
    },
    "CreativeRequirements": {
      "id": "CreativeRequirements",
      "description": "Message captures data about the creatives in the deal.",
      "type": "object",
      "properties": {
        "creativeSafeFrameCompatibility": {
          "description": "Output only. Specifies whether the creative is safeFrame compatible.",
          "readOnly": true,
          "enum": [
            "CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED",
            "COMPATIBLE",
            "INCOMPATIBLE"
          ],
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined creative safe-frame compatibility.",
            "The creatives need to be compatible with the safe frame option.",
            "The creatives can be incompatible with the safe frame option."
          ]
        },
        "creativeFormat": {
          "type": "string",
          "description": "Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.",
          "enum": [
            "CREATIVE_FORMAT_UNSPECIFIED",
            "DISPLAY",
            "VIDEO"
          ],
          "enumDescriptions": [
            "A placeholder for an unspecified creative format.",
            "Banner creatives such as image or HTML5 assets.",
            "Video creatives that can be played in a video player."
          ],
          "readOnly": true
        },
        "creativePreApprovalPolicy": {
          "description": "Output only. Specifies the creative pre-approval policy.",
          "enum": [
            "CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED",
            "SELLER_PRE_APPROVAL_REQUIRED",
            "SELLER_PRE_APPROVAL_NOT_REQUIRED"
          ],
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an undefined creative pre-approval policy.",
            "The seller needs to approve each creative before it can serve.",
            "The seller does not need to approve each creative before it can serve."
          ]
        },
        "programmaticCreativeSource": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.",
          "enum": [
            "PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED",
            "ADVERTISER",
            "PUBLISHER"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined programmatic creative source.",
            "The advertiser provides the creatives.",
            "The publisher provides the creatives to be served."
          ]
        },
        "maxAdDurationMs": {
          "type": "string",
          "description": "Output only. The max duration of the video creative in milliseconds. only applicable for deals with video creatives.",
          "format": "int64",
          "readOnly": true
        },
        "skippableAdType": {
          "enum": [
            "SKIPPABLE_AD_TYPE_UNSPECIFIED",
            "SKIPPABLE",
            "INSTREAM_SELECT",
            "NOT_SKIPPABLE",
            "ANY"
          ],
          "enumDescriptions": [
            "A placeholder for an unspecified skippable ad type.",
            "Video ad that can be skipped after 5 seconds. This value will appear in RTB bid requests as SkippableBidRequestType::REQUIRE_SKIPPABLE.",
            "Video ad that can be skipped after 5 seconds, and is counted as engaged view after 30 seconds. The creative is hosted on YouTube only, and viewcount of the YouTube video increments after the engaged view. This value will appear in RTB bid requests as SkippableBidRequestType::REQUIRE_SKIPPABLE.",
            "This video ad is not skippable. This value will appear in RTB bid requests as SkippableBidRequestType::BLOCK_SKIPPABLE.",
            "This video ad can be skipped after 5 seconds or not-skippable. This value will appear in RTB bid requests as SkippableBidRequestType::ALLOW_SKIPPABLE."
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives."
        }
      }
    },
    "UnsubscribeClientsRequest": {
      "description": "Request message for UnsubscribeAuctionPackage.",
      "id": "UnsubscribeClientsRequest",
      "properties": {
        "clients": {
          "items": {
            "type": "string"
          },
          "description": "Optional. A list of client buyers to unsubscribe from the auction package, with client buyer in the format `buyers/{accountId}/clients/{clientAccountId}`.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListProposalsResponse": {
      "id": "ListProposalsResponse",
      "properties": {
        "proposals": {
          "items": {
            "$ref": "Proposal"
          },
          "description": "The list of proposals.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Continuation token for fetching the next page of results.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response message for listing proposals."
    },
    "SendRfpRequest": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string",
          "description": "A message that is sent to the publisher. Maximum length is 1024 characters."
        },
        "displayName": {
          "type": "string",
          "description": "Required. The display name of the proposal being created by this RFP."
        },
        "geoTargeting": {
          "$ref": "CriteriaTargeting",
          "description": "Geo criteria IDs to be targeted. Refer to Geo tables."
        },
        "publisherProfile": {
          "description": "Required. The profile of the publisher who will receive this RFP in the format: `buyers/{accountId}/publisherProfiles/{publisherProfileId}`.",
          "type": "string"
        },
        "client": {
          "type": "string",
          "description": "If the current buyer is sending the RFP on behalf of its client, use this field to specify the name of the client in the format: `buyers/{accountId}/clients/{clientAccountid}`."
        },
        "buyerContacts": {
          "items": {
            "$ref": "Contact"
          },
          "description": "Contact information for the buyer.",
          "type": "array"
        },
        "flightStartTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Required. Proposed flight start time of the RFP. A timestamp in RFC3339 UTC \"Zulu\" format. Note that the specified value will be truncated to a granularity of one second."
        },
        "flightEndTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Required. Proposed flight end time of the RFP. A timestamp in RFC3339 UTC \"Zulu\" format. Note that the specified value will be truncated to a granularity of one second."
        },
        "preferredDealTerms": {
          "$ref": "PreferredDealTerms",
          "description": "The terms for preferred deals."
        },
        "programmaticGuaranteedTerms": {
          "$ref": "ProgrammaticGuaranteedTerms",
          "description": "The terms for programmatic guaranteed deals."
        },
        "estimatedGrossSpend": {
          "description": "Specified by buyers in request for proposal (RFP) to notify publisher the total estimated spend for the proposal. Publishers will receive this information and send back proposed deals accordingly.",
          "$ref": "Money"
        },
        "inventorySizeTargeting": {
          "$ref": "InventorySizeTargeting",
          "description": "Inventory sizes to be targeted."
        }
      },
      "description": "Request to send an RFP. All fields in this request are proposed to publisher and subject to changes by publisher during later negotiation.",
      "id": "SendRfpRequest"
    },
    "ListAuctionPackagesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token for fetching the next page of results. Pass this value in the ListAuctionPackagesRequest.pageToken field in the subsequent call to the `ListAuctionPackages` method to retrieve the next page of results."
        },
        "auctionPackages": {
          "description": "The list of auction packages.",
          "type": "array",
          "items": {
            "$ref": "AuctionPackage"
          }
        }
      },
      "description": "Response message for listing auction packages.",
      "type": "object",
      "id": "ListAuctionPackagesResponse"
    },
    "DeactivateClientUserRequest": {
      "id": "DeactivateClientUserRequest",
      "description": "Request message for deactivating a client user.",
      "properties": {},
      "type": "object"
    },
    "MarketplaceTargeting": {
      "id": "MarketplaceTargeting",
      "description": "Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.",
      "properties": {
        "userListTargeting": {
          "description": "Buyer user list targeting information. User lists can be uploaded via https://developers.google.com/authorized-buyers/rtb/bulk-uploader.",
          "$ref": "CriteriaTargeting"
        },
        "placementTargeting": {
          "readOnly": true,
          "description": "Output only. Placement targeting information, e.g., URL, mobile applications.",
          "$ref": "PlacementTargeting"
        },
        "inventorySizeTargeting": {
          "readOnly": true,
          "description": "Output only. Inventory sizes to be included/excluded.",
          "$ref": "InventorySizeTargeting"
        },
        "technologyTargeting": {
          "readOnly": true,
          "description": "Output only. Technology targeting information, e.g., operating system, device category.",
          "$ref": "TechnologyTargeting"
        },
        "videoTargeting": {
          "readOnly": true,
          "description": "Output only. Video targeting information.",
          "$ref": "VideoTargeting"
        },
        "geoTargeting": {
          "readOnly": true,
          "$ref": "CriteriaTargeting",
          "description": "Output only. Geo criteria IDs to be included/excluded."
        },
        "daypartTargeting": {
          "$ref": "DayPartTargeting",
          "description": "Daypart targeting information."
        }
      },
      "type": "object"
    },
    "PauseFinalizedDealRequest": {
      "id": "PauseFinalizedDealRequest",
      "description": "Request message for pausing a finalized deal.",
      "type": "object",
      "properties": {
        "reason": {
          "description": "The reason to pause the finalized deal, will be displayed to the seller. Maximum length is 1000 characters.",
          "type": "string"
        }
      }
    },
    "SubscribeAuctionPackageRequest": {
      "description": "Request message for SubscribeAuctionPackage.",
      "type": "object",
      "id": "SubscribeAuctionPackageRequest",
      "properties": {}
    },
    "ActivateClientUserRequest": {
      "type": "object",
      "properties": {},
      "description": "Request message for activating a client user.",
      "id": "ActivateClientUserRequest"
    },
    "PrivateData": {
      "properties": {
        "referenceId": {
          "type": "string",
          "description": "A buyer specified reference ID. This can be queried in the list operations (max-length: 1024 unicode code units)."
        }
      },
      "id": "PrivateData",
      "type": "object",
      "description": "Buyers are allowed to store certain types of private data in a proposal or deal."
    },
    "Proposal": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}"
        },
        "state": {
          "type": "string",
          "description": "Output only. Indicates the state of the proposal.",
          "readOnly": true,
          "enumDescriptions": [
            "Unspecified proposal state",
            "When a proposal is waiting for buyer to review.",
            "When the proposal is waiting for the seller to review.",
            "When the seller accepted the proposal and sent it to the buyer for review.",
            "When both buyer and seller has accepted the proposal",
            "When either buyer or seller has cancelled the proposal"
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "BUYER_REVIEW_REQUESTED",
            "SELLER_REVIEW_REQUESTED",
            "BUYER_ACCEPTANCE_REQUESTED",
            "FINALIZED",
            "TERMINATED"
          ]
        },
        "isRenegotiating": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. True if the proposal was previously finalized and is now being renegotiated."
        },
        "buyerPrivateData": {
          "description": "Buyer private data (hidden from seller).",
          "$ref": "PrivateData"
        },
        "publisherProfile": {
          "description": "Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.",
          "type": "string"
        },
        "sellerContacts": {
          "readOnly": true,
          "description": "Output only. Contact information for the seller.",
          "items": {
            "$ref": "Contact"
          },
          "type": "array"
        },
        "dealType": {
          "description": "Output only. Type of deal the proposal contains.",
          "readOnly": true,
          "enum": [
            "DEAL_TYPE_UNSPECIFIED",
            "PREFERRED_DEAL",
            "PRIVATE_AUCTION",
            "PROGRAMMATIC_GUARANTEED"
          ],
          "enumDescriptions": [
            "Default, unspecified deal type.",
            "Preferred deals.",
            "Private auction deals.",
            "Programmatic guaranteed deals."
          ],
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "Note"
          },
          "type": "array",
          "description": "A list of notes from the buyer and the seller attached to this proposal."
        },
        "originatorRole": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Indicates whether the buyer/seller created the proposal.",
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ],
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ]
        },
        "termsAndConditions": {
          "type": "string",
          "description": "Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.",
          "readOnly": true
        },
        "proposalRevision": {
          "type": "string",
          "description": "Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.",
          "format": "int64",
          "readOnly": true
        },
        "client": {
          "type": "string",
          "description": "Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`",
          "readOnly": true
        },
        "pausingConsented": {
          "type": "boolean",
          "description": "Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers."
        },
        "lastUpdaterOrCommentorRole": {
          "type": "string",
          "description": "Output only. The role of the last user that either updated the proposal or left a comment.",
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ],
          "readOnly": true,
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ]
        },
        "displayName": {
          "readOnly": true,
          "description": "Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.",
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time when the proposal was last revised."
        },
        "buyer": {
          "readOnly": true,
          "description": "Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`",
          "type": "string"
        },
        "buyerContacts": {
          "items": {
            "$ref": "Contact"
          },
          "type": "array",
          "description": "Contact information for the buyer."
        },
        "billedBuyer": {
          "type": "string",
          "description": "Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "Proposal",
      "description": "Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer."
    },
    "PublisherProfileMobileApplication": {
      "type": "object",
      "properties": {
        "externalAppId": {
          "description": "The external ID for the app from its app store. Can be used to filter the response of the publisherProfiles.list method.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the app."
        },
        "appStore": {
          "type": "string",
          "enumDescriptions": [
            "A placeholder for an unknown app store.",
            "Apple iTunes",
            "Google Play",
            "Roku",
            "Amazon Fire TV",
            "PlayStation",
            "Xbox",
            "Samsung TV",
            "Amazon Appstore",
            "OPPO App Market",
            "Samsung Galaxy Store",
            "VIVO App Store",
            "Xiaomi GetApps"
          ],
          "enum": [
            "APP_STORE_TYPE_UNSPECIFIED",
            "APPLE_ITUNES",
            "GOOGLE_PLAY",
            "ROKU",
            "AMAZON_FIRE_TV",
            "PLAYSTATION",
            "XBOX",
            "SAMSUNG_TV",
            "AMAZON",
            "OPPO",
            "SAMSUNG",
            "VIVO",
            "XIAOMI"
          ],
          "description": "The app store the app belongs to. Can be used to filter the response of the publisherProfiles.list method."
        }
      },
      "description": "A mobile application that contains a external app ID, name, and app store.",
      "id": "PublisherProfileMobileApplication"
    },
    "TimeZone": {
      "type": "object",
      "description": "Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).",
      "id": "TimeZone",
      "properties": {
        "id": {
          "description": "IANA Time Zone Database time zone, e.g. \"America/New_York\".",
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
        }
      }
    },
    "AdSize": {
      "id": "AdSize",
      "description": "Represents size of a single ad slot, or a creative.",
      "properties": {
        "width": {
          "description": "The width of the ad slot in pixels. This field will be present only when size type is `PIXEL`.",
          "type": "string",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "PIXEL",
            "INTERSTITIAL",
            "NATIVE",
            "FLUID"
          ],
          "description": "The type of the ad slot size.",
          "enumDescriptions": [
            "A placeholder for an undefined size type.",
            "Ad slot with size specified by height and width in pixels.",
            "Special size to describe an interstitial ad slot.",
            "Native (mobile) ads rendered by the publisher.",
            "Fluid size (i.e., responsive size) can be resized automatically with the change of outside environment."
          ]
        },
        "height": {
          "type": "string",
          "description": "The height of the ad slot in pixels. This field will be present only when size type is `PIXEL`.",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "RtbMetrics": {
      "type": "object",
      "id": "RtbMetrics",
      "description": "Real-time bidding metrics. For what each metric means refer to [Report metrics](https://support.google.com/adxbuyer/answer/6115195#report-metrics)",
      "properties": {
        "bidRate7Days": {
          "type": "number",
          "format": "double",
          "description": "Bid rate in last 7 days, calculated by (bids / bid requests)."
        },
        "bidRequests7Days": {
          "format": "int64",
          "description": "Bid requests in last 7 days.",
          "type": "string"
        },
        "bids7Days": {
          "format": "int64",
          "type": "string",
          "description": "Bids in last 7 days."
        },
        "adImpressions7Days": {
          "description": "Ad impressions in last 7 days.",
          "format": "int64",
          "type": "string"
        },
        "filteredBidRate7Days": {
          "description": "Filtered bid rate in last 7 days, calculated by (filtered bids / bids).",
          "format": "double",
          "type": "number"
        },
        "mustBidRateCurrentMonth": {
          "description": "Must bid rate for current month.",
          "format": "double",
          "type": "number"
        }
      }
    },
    "Note": {
      "id": "Note",
      "properties": {
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. When this note was created."
        },
        "creatorRole": {
          "enumDescriptions": [
            "A placeholder for an undefined buyer/seller role.",
            "Specifies the role as buyer.",
            "Specifies the role as seller."
          ],
          "enum": [
            "BUYER_SELLER_ROLE_UNSPECIFIED",
            "BUYER",
            "SELLER"
          ],
          "readOnly": true,
          "description": "Output only. The role who created the note.",
          "type": "string"
        },
        "note": {
          "description": "The text of the note. Maximum length is 1024 characters.",
          "type": "string"
        }
      },
      "description": "A text note attached to the proposal to facilitate the communication between buyers and sellers.",
      "type": "object"
    },
    "PublisherProfile": {
      "id": "PublisherProfile",
      "description": "The values in the publisher profile are supplied by the publisher. All fields are not filterable unless stated otherwise.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the publisher profile. Format: `buyers/{buyer}/publisherProfiles/{publisher_profile}`"
        },
        "logoUrl": {
          "type": "string",
          "description": "A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the publisher profile. Can be used to filter the response of the publisherProfiles.list method."
        },
        "directDealsContact": {
          "description": "Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.",
          "type": "string"
        },
        "mobileApps": {
          "description": "The list of apps represented in this publisher profile. Empty if this is a parent profile.",
          "type": "array",
          "items": {
            "$ref": "PublisherProfileMobileApplication"
          }
        },
        "mediaKitUrl": {
          "type": "string",
          "description": "URL to additional marketing and sales materials."
        },
        "programmaticDealsContact": {
          "description": "Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.",
          "type": "string"
        },
        "audienceDescription": {
          "description": "Description on the publisher's audience.",
          "type": "string"
        },
        "publisherCode": {
          "description": "A unique identifying code for the seller. This value is the same for all of the seller's parent and child publisher profiles. Can be used to filter the response of the publisherProfiles.list method.",
          "type": "string"
        },
        "pitchStatement": {
          "description": "Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.",
          "type": "string"
        },
        "topHeadlines": {
          "description": "Up to three key metrics and rankings. For example \"#1 Mobile News Site for 20 Straight Months\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \"photos.google.co.uk/123\", but will instead contain \"google.co.uk\". Can be used to filter the response of the publisherProfiles.list method."
        },
        "samplePageUrl": {
          "type": "string",
          "description": "URL to a sample content page."
        },
        "isParent": {
          "type": "boolean",
          "description": "Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller has only one parent publisher profile, and can have multiple child profiles. See https://support.google.com/admanager/answer/6035806 for details. Can be used to filter the response of the publisherProfiles.list method by setting the filter to \"is_parent: true\"."
        },
        "overview": {
          "type": "string",
          "description": "Overview of the publisher."
        }
      }
    },
    "ListClientUsersResponse": {
      "id": "ListClientUsersResponse",
      "description": "Response message for the list method.",
      "properties": {
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the ListClientUsersRequest.pageToken field in the subsequent call to the list method to retrieve the next page of results.",
          "type": "string"
        },
        "clientUsers": {
          "description": "The returned list of client users.",
          "type": "array",
          "items": {
            "$ref": "ClientUser"
          }
        }
      },
      "type": "object"
    },
    "ClientUser": {
      "description": "A user of a client who has restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the associated client.",
      "type": "object",
      "properties": {
        "state": {
          "enumDescriptions": [
            "A placeholder for an undefined user state.",
            "A user who was created but hasn't accepted the invitation yet, not allowed to access the Authorized Buyers UI.",
            "A user that is currently active and allowed to access the Authorized Buyers UI.",
            "A user that is currently inactive and not allowed to access the Authorized Buyers UI."
          ],
          "type": "string",
          "description": "Output only. The state of the client user.",
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "INVITED",
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "name": {
          "type": "string",
          "description": "Output only. The resource name of the client user. Format: `buyers/{accountId}/clients/{clientAccountId}/users/{userId}`",
          "readOnly": true
        },
        "email": {
          "description": "Required. The client user's email address that has to be unique across all users for the same client.",
          "type": "string"
        }
      },
      "id": "ClientUser"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "name": "authorizedbuyersmarketplace",
  "basePath": "",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "rootUrl": "https://authorizedbuyersmarketplace.googleapis.com/",
  "baseUrl": "https://authorizedbuyersmarketplace.googleapis.com/",
  "revision": "20220212",
  "version": "v1",
  "parameters": {
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format."
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "alt": {
      "location": "query",
      "default": "json",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response."
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    }
  },
  "batchPath": "batch",
  "resources": {
    "bidders": {
      "resources": {
        "finalizedDeals": {
          "methods": {
            "list": {
              "description": "Lists finalized deals. Use the URL path \"/v1/buyers/{accountId}/finalizedDeals\" to list finalized deals for the current buyer and its clients. Bidders can use the URL path \"/v1/bidders/{accountId}/finalizedDeals\" to list finalized deals for the bidder, its buyers and all their clients.",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/finalizedDeals",
              "flatPath": "v1/bidders/{biddersId}/finalizedDeals",
              "response": {
                "$ref": "ListFinalizedDealsResponse"
              },
              "parameters": {
                "orderBy": {
                  "description": "An optional query string to sort finalized deals using the [Cloud API sorting syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order). If no sort order is specified, results will be returned in an arbitrary order. Supported columns for sorting are: * deal.displayName * deal.createTime * deal.updateTime * deal.flightStartTime * deal.flightEndTime * rtbMetrics.bidRequests7Days * rtbMetrics.bids7Days * rtbMetrics.adImpressions7Days * rtbMetrics.bidRate7Days * rtbMetrics.filteredBidRate7Days * rtbMetrics.mustBidRateCurrentMonth Example: 'deal.displayName, deal.updateTime desc'",
                  "location": "query",
                  "type": "string"
                },
                "filter": {
                  "description": "Optional query string using the [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters) Supported columns for filtering are: * deal.displayName * deal.dealType * deal.createTime * deal.updateTime * deal.flightStartTime * deal.flightEndTime * dealServingStatus",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "description": "Requested page size. The server may return fewer results than requested. If requested more than 500, the server will return 500 results per page. If unspecified, the server will pick a default page size of 100.",
                  "format": "int32"
                },
                "parent": {
                  "type": "string",
                  "pattern": "^bidders/[^/]+$",
                  "description": "Required. The buyer to list the finalized deals for, in the format: `buyers/{accountId}`. When used to list finalized deals for a bidder, its buyers and clients, in the format `bidders/{accountId}`.",
                  "location": "path",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The page token as returned from ListFinalizedDealsResponse."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "id": "authorizedbuyersmarketplace.bidders.finalizedDeals.list",
              "httpMethod": "GET"
            }
          }
        }
      }
    },
    "buyers": {
      "resources": {
        "publisherProfiles": {
          "methods": {
            "list": {
              "parameters": {
                "parent": {
                  "pattern": "^buyers/[^/]+$",
                  "required": true,
                  "description": "Required. Parent that owns the collection of publisher profiles Format: `buyers/{buyerId}`",
                  "location": "path",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Requested page size. The server may return fewer results than requested. If requested more than 500, the server will return 500 results per page. If unspecified, the server will pick a default page size of 100.",
                  "location": "query",
                  "format": "int32"
                },
                "filter": {
                  "description": "Optional query string using the [Cloud API list filtering] (https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters) syntax.",
                  "type": "string",
                  "location": "query"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "The page token as returned from a previous ListPublisherProfilesResponse."
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "flatPath": "v1/buyers/{buyersId}/publisherProfiles",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/publisherProfiles",
              "description": "Lists publisher profiles",
              "response": {
                "$ref": "ListPublisherProfilesResponse"
              },
              "id": "authorizedbuyersmarketplace.buyers.publisherProfiles.list"
            },
            "get": {
              "response": {
                "$ref": "PublisherProfile"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^buyers/[^/]+/publisherProfiles/[^/]+$",
                  "required": true,
                  "description": "Required. Name of the publisher profile. Format: `buyers/{buyerId}/publisherProfiles/{publisherProfileId}`"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Gets the requested publisher profile by name.",
              "id": "authorizedbuyersmarketplace.buyers.publisherProfiles.get",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "flatPath": "v1/buyers/{buyersId}/publisherProfiles/{publisherProfilesId}",
              "path": "v1/{+name}",
              "httpMethod": "GET"
            }
          }
        },
        "finalizedDeals": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/finalizedDeals",
              "parameters": {
                "orderBy": {
                  "type": "string",
                  "description": "An optional query string to sort finalized deals using the [Cloud API sorting syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order). If no sort order is specified, results will be returned in an arbitrary order. Supported columns for sorting are: * deal.displayName * deal.createTime * deal.updateTime * deal.flightStartTime * deal.flightEndTime * rtbMetrics.bidRequests7Days * rtbMetrics.bids7Days * rtbMetrics.adImpressions7Days * rtbMetrics.bidRate7Days * rtbMetrics.filteredBidRate7Days * rtbMetrics.mustBidRateCurrentMonth Example: 'deal.displayName, deal.updateTime desc'",
                  "location": "query"
                },
                "parent": {
                  "type": "string",
                  "location": "path",
                  "description": "Required. The buyer to list the finalized deals for, in the format: `buyers/{accountId}`. When used to list finalized deals for a bidder, its buyers and clients, in the format `bidders/{accountId}`.",
                  "required": true,
                  "pattern": "^buyers/[^/]+$"
                },
                "filter": {
                  "location": "query",
                  "description": "Optional query string using the [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters) Supported columns for filtering are: * deal.displayName * deal.dealType * deal.createTime * deal.updateTime * deal.flightStartTime * deal.flightEndTime * dealServingStatus",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Requested page size. The server may return fewer results than requested. If requested more than 500, the server will return 500 results per page. If unspecified, the server will pick a default page size of 100.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "The page token as returned from ListFinalizedDealsResponse."
                }
              },
              "description": "Lists finalized deals. Use the URL path \"/v1/buyers/{accountId}/finalizedDeals\" to list finalized deals for the current buyer and its clients. Bidders can use the URL path \"/v1/bidders/{accountId}/finalizedDeals\" to list finalized deals for the bidder, its buyers and all their clients.",
              "id": "authorizedbuyersmarketplace.buyers.finalizedDeals.list",
              "response": {
                "$ref": "ListFinalizedDealsResponse"
              },
              "flatPath": "v1/buyers/{buyersId}/finalizedDeals",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ]
            },
            "addCreative": {
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "request": {
                "$ref": "AddCreativeRequest"
              },
              "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:addCreative",
              "parameters": {
                "deal": {
                  "location": "path",
                  "required": true,
                  "pattern": "^buyers/[^/]+/finalizedDeals/[^/]+$",
                  "description": "Required. Name of the finalized deal in the format of: `buyers/{accountId}/finalizedDeals/{dealId}`",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "deal"
              ],
              "response": {
                "$ref": "FinalizedDeal"
              },
              "path": "v1/{+deal}:addCreative",
              "id": "authorizedbuyersmarketplace.buyers.finalizedDeals.addCreative",
              "httpMethod": "POST",
              "description": "Add creative to be used in the bidding process for a finalized deal. For programmatic guaranteed deals, it's recommended that you associate at least one approved creative with the deal before calling SetReadyToServe, to help reduce the number of bid responses filtered because they don't contain approved creatives. Creatives successfully added to a deal can be found in the Realtime-bidding Creatives API creative.deal_ids. This method only applies to programmatic guaranteed deals. Maximum number of 1000 creatives can be added to a finalized deal."
            },
            "get": {
              "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}",
              "httpMethod": "GET",
              "description": "Gets a finalized deal given its name.",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "path": "v1/{+name}",
              "response": {
                "$ref": "FinalizedDeal"
              },
              "parameters": {
                "name": {
                  "pattern": "^buyers/[^/]+/finalizedDeals/[^/]+$",
                  "location": "path",
                  "description": "Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`",
                  "type": "string",
                  "required": true
                }
              },
              "id": "authorizedbuyersmarketplace.buyers.finalizedDeals.get",
              "parameterOrder": [
                "name"
              ]
            },
            "setReadyToServe": {
              "description": "Sets the given finalized deal as ready to serve. By default, deals are ready to serve as soon as they're finalized. A bidder can opt out of this feature by asking to be included in an allowlist. Once opted out, finalized deals belonging to the bidder and its child seats will not start serving until this method is called. This method is useful to the bidders who prefer to not receive bid requests before the creative is ready. This method only applies to programmatic guaranteed deals.",
              "parameterOrder": [
                "deal"
              ],
              "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:setReadyToServe",
              "response": {
                "$ref": "FinalizedDeal"
              },
              "path": "v1/{+deal}:setReadyToServe",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "id": "authorizedbuyersmarketplace.buyers.finalizedDeals.setReadyToServe",
              "parameters": {
                "deal": {
                  "type": "string",
                  "required": true,
                  "pattern": "^buyers/[^/]+/finalizedDeals/[^/]+$",
                  "location": "path",
                  "description": "Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`"
                }
              },
              "request": {
                "$ref": "SetReadyToServeRequest"
              }
            },
            "pause": {
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "PauseFinalizedDealRequest"
              },
              "id": "authorizedbuyersmarketplace.buyers.finalizedDeals.pause",
              "description": "Pauses serving of the given finalized deal. This call only pauses the serving status, and does not affect other fields of the finalized deal. Calling this method for an already paused deal has no effect. This method only applies to programmatic guaranteed deals.",
              "response": {
                "$ref": "FinalizedDeal"
              },
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:pause",
              "parameters": {
                "name": {
                  "pattern": "^buyers/[^/]+/finalizedDeals/[^/]+$",
                  "description": "Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "v1/{+name}:pause",
              "httpMethod": "POST"
            },
            "resume": {
              "parameters": {
                "name": {
                  "pattern": "^buyers/[^/]+/finalizedDeals/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`"
                }
              },
              "request": {
                "$ref": "ResumeFinalizedDealRequest"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "authorizedbuyersmarketplace.buyers.finalizedDeals.resume",
              "path": "v1/{+name}:resume",
              "description": "Resumes serving of the given finalized deal. Calling this method for an running deal has no effect. If a deal is initially paused by the seller, calling this method will not resume serving of the deal until the seller also resumes the deal. This method only applies to programmatic guaranteed deals.",
              "response": {
                "$ref": "FinalizedDeal"
              },
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:resume",
              "httpMethod": "POST"
            }
          }
        },
        "auctionPackages": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "description": "Required. Name of auction package to get. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`",
                  "location": "path",
                  "pattern": "^buyers/[^/]+/auctionPackages/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Gets an auction package given its name.",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "path": "v1/{+name}",
              "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}",
              "id": "authorizedbuyersmarketplace.buyers.auctionPackages.get",
              "response": {
                "$ref": "AuctionPackage"
              }
            },
            "unsubscribeClients": {
              "request": {
                "$ref": "UnsubscribeClientsRequest"
              },
              "httpMethod": "POST",
              "id": "authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribeClients",
              "path": "v1/{+auctionPackage}:unsubscribeClients",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:unsubscribeClients",
              "parameters": {
                "auctionPackage": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`",
                  "pattern": "^buyers/[^/]+/auctionPackages/[^/]+$"
                }
              },
              "parameterOrder": [
                "auctionPackage"
              ],
              "response": {
                "$ref": "AuctionPackage"
              },
              "description": "Unsubscribe from the auction package for the specified clients of the buyer. Unsubscribing a client that is not subscribed will have no effect."
            },
            "subscribeClients": {
              "description": "Subscribe the specified clients of the buyer to the auction package. If a client in the list does not belong to the buyer, an error response will be returned, and all of the following clients in the list will not be subscribed. Subscribing an already subscribed client will have no effect.",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "parameterOrder": [
                "auctionPackage"
              ],
              "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:subscribeClients",
              "request": {
                "$ref": "SubscribeClientsRequest"
              },
              "path": "v1/{+auctionPackage}:subscribeClients",
              "parameters": {
                "auctionPackage": {
                  "required": true,
                  "location": "path",
                  "pattern": "^buyers/[^/]+/auctionPackages/[^/]+$",
                  "type": "string",
                  "description": "Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`"
                }
              },
              "response": {
                "$ref": "AuctionPackage"
              },
              "id": "authorizedbuyersmarketplace.buyers.auctionPackages.subscribeClients",
              "httpMethod": "POST"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "flatPath": "v1/buyers/{buyersId}/auctionPackages",
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "description": "Requested page size. The server may return fewer results than requested. Max allowed page size is 500.",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "location": "path",
                  "description": "Required. Name of the parent buyer that can access the auction package. Format: `buyers/{accountId}`",
                  "type": "string",
                  "pattern": "^buyers/[^/]+$"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The page token as returned. ListAuctionPackagesResponse.nextPageToken"
                }
              },
              "path": "v1/{+parent}/auctionPackages",
              "description": "List the auction packages subscribed by a buyer and its clients.",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListAuctionPackagesResponse"
              },
              "id": "authorizedbuyersmarketplace.buyers.auctionPackages.list",
              "httpMethod": "GET"
            },
            "subscribe": {
              "id": "authorizedbuyersmarketplace.buyers.auctionPackages.subscribe",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "parameters": {
                "name": {
                  "pattern": "^buyers/[^/]+/auctionPackages/[^/]+$",
                  "location": "path",
                  "description": "Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Subscribe to the auction package for the specified buyer. Once subscribed, the bidder will receive a call out for inventory matching the auction package targeting criteria with the auction package deal ID and the specified buyer.",
              "request": {
                "$ref": "SubscribeAuctionPackageRequest"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}:subscribe",
              "response": {
                "$ref": "AuctionPackage"
              },
              "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:subscribe"
            },
            "unsubscribe": {
              "httpMethod": "POST",
              "path": "v1/{+name}:unsubscribe",
              "request": {
                "$ref": "UnsubscribeAuctionPackageRequest"
              },
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:unsubscribe",
              "id": "authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribe",
              "description": "Unsubscribe from the auction package for the specified buyer. Once unsubscribed, the bidder will no longer receive a call out for the auction package deal ID and the specified buyer.",
              "response": {
                "$ref": "AuctionPackage"
              },
              "parameters": {
                "name": {
                  "pattern": "^buyers/[^/]+/auctionPackages/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "Required. Name of the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}`",
                  "required": true
                }
              }
            }
          }
        },
        "clients": {
          "resources": {
            "users": {
              "methods": {
                "list": {
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/users",
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "description": "A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the list method.",
                      "type": "string"
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^buyers/[^/]+/clients/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the client. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "Requested page size. If left blank, a default page size of 500 will be applied."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users",
                  "id": "authorizedbuyersmarketplace.buyers.clients.users.list",
                  "description": "Lists all client users for a specified client.",
                  "response": {
                    "$ref": "ListClientUsersResponse"
                  }
                },
                "delete": {
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`",
                      "location": "path",
                      "type": "string",
                      "pattern": "^buyers/[^/]+/clients/[^/]+/users/[^/]+$",
                      "required": true
                    }
                  },
                  "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "authorizedbuyersmarketplace.buyers.clients.users.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "description": "Deletes an existing client user. The client user will lose access to the Authorized Buyers UI. Note that if a client user is deleted, the user's access to the UI can't be restored unless a new client user is created and activated.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "DELETE"
                },
                "get": {
                  "id": "authorizedbuyersmarketplace.buyers.clients.users.get",
                  "response": {
                    "$ref": "ClientUser"
                  },
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^buyers/[^/]+/clients/[^/]+/users/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`"
                    }
                  },
                  "description": "Retrieves an existing client user.",
                  "httpMethod": "GET",
                  "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ]
                },
                "deactivate": {
                  "description": "Deactivates an existing client user. The state of the client user will be updated from \"ACTIVE\" to \"INACTIVE\". This method has no effect if the client user is already in \"INACTIVE\" state. An error will be returned if the client user to deactivate is still in \"INVITED\" state.",
                  "id": "authorizedbuyersmarketplace.buyers.clients.users.deactivate",
                  "request": {
                    "$ref": "DeactivateClientUserRequest"
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}:deactivate",
                  "path": "v1/{+name}:deactivate",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`",
                      "type": "string",
                      "pattern": "^buyers/[^/]+/clients/[^/]+/users/[^/]+$",
                      "required": true
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "response": {
                    "$ref": "ClientUser"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "activate": {
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "response": {
                    "$ref": "ClientUser"
                  },
                  "path": "v1/{+name}:activate",
                  "request": {
                    "$ref": "ActivateClientUserRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "authorizedbuyersmarketplace.buyers.clients.users.activate",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`",
                      "required": true,
                      "type": "string",
                      "pattern": "^buyers/[^/]+/clients/[^/]+/users/[^/]+$",
                      "location": "path"
                    }
                  },
                  "description": "Activates an existing client user. The state of the client user will be updated from \"INACTIVE\" to \"ACTIVE\". This method has no effect if the client user is already in \"ACTIVE\" state. An error will be returned if the client user to activate is still in \"INVITED\" state.",
                  "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}:activate"
                },
                "create": {
                  "path": "v1/{+parent}/users",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Creates a new client user in \"INVITED\" state. An email invitation will be sent to the new user, once accepted the user will become active.",
                  "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users",
                  "id": "authorizedbuyersmarketplace.buyers.clients.users.create",
                  "response": {
                    "$ref": "ClientUser"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "request": {
                    "$ref": "ClientUser"
                  },
                  "parameters": {
                    "parent": {
                      "pattern": "^buyers/[^/]+/clients/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "Required. The name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`",
                      "type": "string"
                    }
                  },
                  "httpMethod": "POST"
                }
              }
            }
          },
          "methods": {
            "patch": {
              "description": "Updates an existing client.",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "path": "v1/{+name}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Client"
              },
              "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}",
              "response": {
                "$ref": "Client"
              },
              "parameters": {
                "updateMask": {
                  "description": "List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, e.g. false for boolean fields, 0 for integer fields. A special field mask consisting of a single path \"*\" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.",
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string"
                },
                "name": {
                  "description": "Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`",
                  "location": "path",
                  "type": "string",
                  "pattern": "^buyers/[^/]+/clients/[^/]+$",
                  "required": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "id": "authorizedbuyersmarketplace.buyers.clients.patch"
            },
            "create": {
              "flatPath": "v1/buyers/{buyersId}/clients",
              "parameters": {
                "parent": {
                  "location": "path",
                  "required": true,
                  "pattern": "^buyers/[^/]+$",
                  "description": "Required. The name of the buyer. Format: `buyers/{accountId}`",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Creates a new client.",
              "id": "authorizedbuyersmarketplace.buyers.clients.create",
              "response": {
                "$ref": "Client"
              },
              "request": {
                "$ref": "Client"
              },
              "path": "v1/{+parent}/clients",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ]
            },
            "activate": {
              "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}:activate",
              "description": "Activates an existing client. The state of the client will be updated to \"ACTIVE\". This method has no effect if the client is already in \"ACTIVE\" state.",
              "id": "authorizedbuyersmarketplace.buyers.clients.activate",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "request": {
                "$ref": "ActivateClientRequest"
              },
              "response": {
                "$ref": "Client"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^buyers/[^/]+/clients/[^/]+$",
                  "description": "Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`"
                }
              },
              "path": "v1/{+name}:activate",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "POST"
            },
            "get": {
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "description": "Required. Format: `buyers/{accountId}/clients/{clientAccountId}`",
                  "pattern": "^buyers/[^/]+/clients/[^/]+$",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "path": "v1/{+name}",
              "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}",
              "response": {
                "$ref": "Client"
              },
              "parameterOrder": [
                "name"
              ],
              "description": "Gets a client with a given resource name.",
              "id": "authorizedbuyersmarketplace.buyers.clients.get"
            },
            "list": {
              "id": "authorizedbuyersmarketplace.buyers.clients.list",
              "flatPath": "v1/buyers/{buyersId}/clients",
              "path": "v1/{+parent}/clients",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the list method.",
                  "location": "query"
                },
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "Query string using the [Filtering Syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters) Supported fields for filtering are: * partnerClientId Use this field to filter the clients by the partnerClientId. For example, if the partnerClientId of the client is \"1234\", the value of this field should be `partnerClientId = \"1234\"`, in order to get only the client whose partnerClientId is \"1234\" in the response."
                },
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "description": "Requested page size. If left blank, a default page size of 500 will be applied.",
                  "location": "query"
                },
                "parent": {
                  "description": "Required. The name of the buyer. Format: `buyers/{accountId}`",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^buyers/[^/]+$"
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "response": {
                "$ref": "ListClientsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Lists all the clients for the current buyer."
            },
            "deactivate": {
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}:deactivate",
              "id": "authorizedbuyersmarketplace.buyers.clients.deactivate",
              "request": {
                "$ref": "DeactivateClientRequest"
              },
              "description": "Deactivates an existing client. The state of the client will be updated to \"INACTIVE\". This method has no effect if the client is already in \"INACTIVE\" state.",
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`",
                  "location": "path",
                  "type": "string",
                  "pattern": "^buyers/[^/]+/clients/[^/]+$"
                }
              },
              "path": "v1/{+name}:deactivate",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Client"
              }
            }
          }
        },
        "proposals": {
          "resources": {
            "deals": {
              "methods": {
                "batchUpdate": {
                  "response": {
                    "$ref": "BatchUpdateDealsResponse"
                  },
                  "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals:batchUpdate",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "id": "authorizedbuyersmarketplace.buyers.proposals.deals.batchUpdate",
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "path": "v1/{+parent}/deals:batchUpdate",
                  "request": {
                    "$ref": "BatchUpdateDealsRequest"
                  },
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "pattern": "^buyers/[^/]+/proposals/[^/]+$",
                      "description": "Required. The name of the proposal containing the deals to batch update. Format: buyers/{accountId}/proposals/{proposalId}",
                      "type": "string"
                    }
                  },
                  "description": "Batch updates multiple deals in the same proposal."
                },
                "list": {
                  "path": "v1/{+parent}/deals",
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "description": "Lists all deals in a proposal. To retrieve only the finalized revision deals regardless if a deal is being renegotiated, see the FinalizedDeals resource.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "type": "string",
                      "description": "Required. The name of the proposal containing the deals to retrieve. Format: buyers/{accountId}/proposals/{proposalId}",
                      "pattern": "^buyers/[^/]+/proposals/[^/]+$",
                      "required": true
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "description": "Requested page size. The server may return fewer results than requested. If requested more than 500, the server will return 500 results per page. If unspecified, the server will pick a default page size of 100.",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The page token as returned from ListDealsResponse.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals",
                  "id": "authorizedbuyersmarketplace.buyers.proposals.deals.list",
                  "response": {
                    "$ref": "ListDealsResponse"
                  }
                },
                "get": {
                  "id": "authorizedbuyersmarketplace.buyers.proposals.deals.get",
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals/{dealsId}",
                  "httpMethod": "GET",
                  "description": "Gets a deal given its name. The deal is returned at its head revision.",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^buyers/[^/]+/proposals/[^/]+/deals/[^/]+$",
                      "description": "Required. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "Deal"
                  }
                },
                "patch": {
                  "parameters": {
                    "updateMask": {
                      "type": "string",
                      "description": "List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, e.g. false for boolean fields, 0 for integer fields. A special field mask consisting of a single path \"*\" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.",
                      "location": "query",
                      "format": "google-fieldmask"
                    },
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}",
                      "pattern": "^buyers/[^/]+/proposals/[^/]+/deals/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/authorized-buyers-marketplace"
                  ],
                  "id": "authorizedbuyersmarketplace.buyers.proposals.deals.patch",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals/{dealsId}",
                  "path": "v1/{+name}",
                  "request": {
                    "$ref": "Deal"
                  },
                  "httpMethod": "PATCH",
                  "response": {
                    "$ref": "Deal"
                  },
                  "description": "Updates the given deal at the buyer known revision number. If the server revision has advanced since the passed-in proposal.proposal_revision an ABORTED error message will be returned. The revision number is incremented by the server whenever the proposal or its constituent deals are updated. Note: The revision number is kept at a proposal level. The buyer of the API is expected to keep track of the revision number after the last update operation and send it in as part of the next update request. This way, if there are further changes on the server (e.g., seller making new updates), then the server can detect conflicts and reject the proposed changes."
                }
              }
            }
          },
          "methods": {
            "accept": {
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "description": "Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`",
                  "location": "path",
                  "pattern": "^buyers/[^/]+/proposals/[^/]+$",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "AcceptProposalRequest"
              },
              "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}:accept",
              "response": {
                "$ref": "Proposal"
              },
              "httpMethod": "POST",
              "path": "v1/{+name}:accept",
              "id": "authorizedbuyersmarketplace.buyers.proposals.accept",
              "description": "Accepts the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. This call updates the Proposal.state from `BUYER_ACCEPTANCE_REQUESTED` to `FINALIZED`; it has no side effect if the Proposal.state is already `FINALIZED` and throws exception if the Proposal.state is not either `BUYER_ACCEPTANCE_REQUESTED` or `FINALIZED`. Accepting a proposal means the buyer understands and accepts the Proposal.terms_and_conditions proposed by the seller.",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ]
            },
            "get": {
              "description": "Gets a proposal using its name. The proposal is returned at most recent revision. revision.",
              "id": "authorizedbuyersmarketplace.buyers.proposals.get",
              "httpMethod": "GET",
              "response": {
                "$ref": "Proposal"
              },
              "path": "v1/{+name}",
              "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`",
                  "pattern": "^buyers/[^/]+/proposals/[^/]+$",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ]
            },
            "sendRfp": {
              "path": "v1/{+buyer}/proposals:sendRfp",
              "response": {
                "$ref": "Proposal"
              },
              "flatPath": "v1/buyers/{buyersId}/proposals:sendRfp",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "parameterOrder": [
                "buyer"
              ],
              "id": "authorizedbuyersmarketplace.buyers.proposals.sendRfp",
              "description": "Sends a request for proposal (RFP) to a publisher to initiate the negotiation regarding certain inventory. In the RFP, buyers can specify the deal type, deal terms, start and end dates, targeting, and a message to the publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED` state will be created and returned in the response. The publisher may review your request and respond with detailed deals in the proposal.",
              "httpMethod": "POST",
              "request": {
                "$ref": "SendRfpRequest"
              },
              "parameters": {
                "buyer": {
                  "pattern": "^buyers/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. The current buyer who is sending the RFP in the format: `buyers/{accountId}`.",
                  "type": "string"
                }
              }
            },
            "cancelNegotiation": {
              "id": "authorizedbuyersmarketplace.buyers.proposals.cancelNegotiation",
              "httpMethod": "POST",
              "response": {
                "$ref": "Proposal"
              },
              "path": "v1/{+proposal}:cancelNegotiation",
              "parameters": {
                "proposal": {
                  "pattern": "^buyers/[^/]+/proposals/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`",
                  "type": "string"
                }
              },
              "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}:cancelNegotiation",
              "request": {
                "$ref": "CancelNegotiationRequest"
              },
              "parameterOrder": [
                "proposal"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "description": "Cancels an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized. If the proposal has not been finalized before, calling this method will set the Proposal.state to `TERMINATED` and increment the Proposal.proposal_revision. If the proposal has been finalized before and is under renegotiation now, calling this method will reset the Proposal.state to `FINALIZED` and increment the Proposal.proposal_revision. This method does not support private auction proposals whose Proposal.deal_type is 'PRIVATE_AUCTION'."
            },
            "addNote": {
              "id": "authorizedbuyersmarketplace.buyers.proposals.addNote",
              "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}:addNote",
              "response": {
                "$ref": "Proposal"
              },
              "path": "v1/{+proposal}:addNote",
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "description": "Creates a note for this proposal and sends to the seller.",
              "parameters": {
                "proposal": {
                  "description": "Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`",
                  "type": "string",
                  "required": true,
                  "pattern": "^buyers/[^/]+/proposals/[^/]+$",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "AddNoteRequest"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "proposal"
              ]
            },
            "patch": {
              "description": "Updates the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. See FieldMask for how to use FieldMask. Only fields specified in the UpdateProposalRequest.update_mask will be updated; Fields noted as 'Immutable' or 'Output only' yet specified in the UpdateProposalRequest.update_mask will be ignored and left unchanged. Updating a private auction proposal is not allowed and will result in an error.",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "location": "query",
                  "description": "List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, e.g. false for boolean fields, 0 for integer fields. A special field mask consisting of a single path \"*\" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.",
                  "type": "string"
                },
                "name": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}",
                  "pattern": "^buyers/[^/]+/proposals/[^/]+$"
                }
              },
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Proposal"
              },
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "id": "authorizedbuyersmarketplace.buyers.proposals.patch",
              "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}",
              "request": {
                "$ref": "Proposal"
              }
            },
            "list": {
              "parameterOrder": [
                "parent"
              ],
              "description": "Lists proposals. A filter expression (list filter syntax) may be specified to filter the results. This will not list finalized versions of proposals that are being renegotiated; to retrieve these use the finalizedProposals resource.",
              "flatPath": "v1/buyers/{buyersId}/proposals",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "pattern": "^buyers/[^/]+$",
                  "location": "path",
                  "description": "Required. Parent that owns the collection of proposals Format: `buyers/{accountId}`",
                  "required": true,
                  "type": "string"
                },
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional query string using the [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters) Supported columns for filtering are: * displayName * dealType * updateTime * state"
                },
                "pageToken": {
                  "description": "The page token as returned from ListProposalsResponse.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Requested page size. The server may return fewer results than requested. If unspecified, the server will put a size of 500.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                }
              },
              "id": "authorizedbuyersmarketplace.buyers.proposals.list",
              "response": {
                "$ref": "ListProposalsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/authorized-buyers-marketplace"
              ],
              "path": "v1/{+parent}/proposals"
            }
          }
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "title": "Authorized Buyers Marketplace API",
  "ownerName": "Google",
  "id": "authorizedbuyersmarketplace:v1",
  "mtlsRootUrl": "https://authorizedbuyersmarketplace.mtls.googleapis.com/",
  "servicePath": "",
  "description": "The Authorized Buyers Marketplace API allows buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.",
  "canonicalName": "Authorized Buyers Marketplace"
}

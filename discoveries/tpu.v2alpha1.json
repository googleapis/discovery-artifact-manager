{
  "parameters": {
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "description": "Data format for response.",
      "location": "query",
      "default": "json"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "location": "query",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    }
  },
  "schemas": {
    "QueueingPolicy": {
      "id": "QueueingPolicy",
      "properties": {
        "validUntilTime": {
          "format": "google-datetime",
          "description": "An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.",
          "type": "string"
        },
        "validInterval": {
          "$ref": "Interval",
          "description": "An absolute time interval within which resources may be created."
        },
        "validUntilDuration": {
          "description": "A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.",
          "type": "string",
          "format": "google-duration"
        },
        "validAfterDuration": {
          "format": "google-duration",
          "description": "A relative time after which resources may be created.",
          "type": "string"
        },
        "validAfterTime": {
          "type": "string",
          "description": "An absolute time at which resources may be created.",
          "format": "google-datetime"
        }
      },
      "type": "object",
      "description": "Defines the policy of the QueuedRequest."
    },
    "RuntimeVersion": {
      "description": "A runtime version that a Node can be configured with.",
      "properties": {
        "name": {
          "description": "The resource name.",
          "type": "string"
        },
        "version": {
          "description": "The runtime version.",
          "type": "string"
        }
      },
      "id": "RuntimeVersion",
      "type": "object"
    },
    "QueuedResourceState": {
      "description": "QueuedResourceState defines the details of the QueuedResource request.",
      "id": "QueuedResourceState",
      "properties": {
        "stateInitiator": {
          "enumDescriptions": [
            "The state initiator is unspecified.",
            "The current QueuedResource state was initiated by the user.",
            "The current QueuedResource state was initiated by the service."
          ],
          "description": "Output only. The initiator of the QueuedResources's current state.",
          "readOnly": true,
          "enum": [
            "STATE_INITIATOR_UNSPECIFIED",
            "USER",
            "SERVICE"
          ],
          "type": "string"
        },
        "deletingData": {
          "description": "Further data for the deleting state.",
          "$ref": "DeletingData"
        },
        "creatingData": {
          "$ref": "CreatingData",
          "description": "Further data for the creating state."
        },
        "activeData": {
          "description": "Further data for the active state.",
          "$ref": "ActiveData"
        },
        "failedData": {
          "$ref": "FailedData",
          "description": "Further data for the failed state."
        },
        "suspendingData": {
          "description": "Further data for the suspending state.",
          "$ref": "SuspendingData"
        },
        "acceptedData": {
          "description": "Further data for the accepted state.",
          "$ref": "AcceptedData"
        },
        "provisioningData": {
          "$ref": "ProvisioningData",
          "description": "Further data for the provisioning state."
        },
        "suspendedData": {
          "$ref": "SuspendedData",
          "description": "Further data for the suspended state."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACCEPTED",
            "PROVISIONING",
            "FAILED",
            "DELETING",
            "ACTIVE",
            "SUSPENDING",
            "SUSPENDED"
          ],
          "description": "State of the QueuedResource request.",
          "type": "string",
          "enumDescriptions": [
            "State of the QueuedResource request is not known/set.",
            "The QueuedResource request has been received. We're still working on determining if we will be able to honor this request.",
            "The QueuedResource request has passed initial validation/admission control and has been persisted in the queue.",
            "The QueuedResource request has been selected. The associated resources are currently being provisioned (or very soon will begin provisioning).",
            "The request could not be completed. This may be due to some late-discovered problem with the request itself, or due to unavailability of resources within the constraints of the request (e.g., the 'valid until' start timing constraint expired).",
            "The QueuedResource is being deleted.",
            "The resources specified in the QueuedResource request have been provisioned and are ready for use by the end-user/consumer.",
            "The resources specified in the QueuedResource request are being deleted. This may have been initiated by the user, or the Cloud TPU service. Inspect the state data for more details.",
            "The resources specified in the QueuedResource request have been deleted."
          ]
        }
      },
      "type": "object"
    },
    "ListQueuedResourcesResponse": {
      "properties": {
        "queuedResources": {
          "type": "array",
          "items": {
            "$ref": "QueuedResource"
          },
          "description": "The listed queued resources."
        },
        "nextPageToken": {
          "description": "The next page token or empty if none.",
          "type": "string"
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached.",
          "type": "array"
        }
      },
      "id": "ListQueuedResourcesResponse",
      "description": "Response for ListQueuedResources.",
      "type": "object"
    },
    "Tpu": {
      "description": "Details of the TPU resource(s) being requested.",
      "properties": {
        "nodeSpec": {
          "type": "array",
          "items": {
            "$ref": "NodeSpec"
          },
          "description": "The TPU node(s) being requested."
        }
      },
      "id": "Tpu",
      "type": "object"
    },
    "NetworkConfig": {
      "properties": {
        "network": {
          "type": "string",
          "description": "The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, \"default\" will be used."
        },
        "enableExternalIps": {
          "description": "Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.",
          "type": "boolean"
        },
        "canIpForward": {
          "description": "Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.",
          "type": "boolean"
        },
        "subnetwork": {
          "description": "The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, \"default\" will be used.",
          "type": "string"
        }
      },
      "description": "Network related configurations.",
      "id": "NetworkConfig",
      "type": "object"
    },
    "ServiceIdentity": {
      "description": "The per-product per-project service identity for Cloud TPU service.",
      "type": "object",
      "id": "ServiceIdentity",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the service identity."
        }
      }
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "Guaranteed": {
      "id": "Guaranteed",
      "type": "object",
      "properties": {
        "reserved": {
          "description": "Optional. Specifies the request should be scheduled on reserved capacity.",
          "type": "boolean"
        },
        "minDuration": {
          "type": "string",
          "format": "google-duration",
          "description": "Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration."
        }
      },
      "description": "Guaranteed tier definition."
    },
    "AcceptedData": {
      "description": "Further data for the accepted state.",
      "properties": {},
      "id": "AcceptedData",
      "type": "object"
    },
    "QueuedResource": {
      "description": "A QueuedResource represents a request for resources that will be placed in a queue and fulfilled when the necessary resources are available.",
      "id": "QueuedResource",
      "type": "object",
      "properties": {
        "spot": {
          "$ref": "Spot",
          "description": "Optional. The Spot tier."
        },
        "queueingPolicy": {
          "description": "The queueing policy of the QueuedRequest.",
          "$ref": "QueueingPolicy"
        },
        "name": {
          "description": "Output only. Immutable. The name of the QueuedResource.",
          "type": "string",
          "readOnly": true
        },
        "bestEffort": {
          "description": "The BestEffort tier.",
          "$ref": "BestEffort"
        },
        "guaranteed": {
          "$ref": "Guaranteed",
          "description": "The Guaranteed tier."
        },
        "tpu": {
          "$ref": "Tpu",
          "description": "Defines a TPU resource."
        },
        "state": {
          "readOnly": true,
          "description": "Output only. State of the QueuedResource request.",
          "$ref": "QueuedResourceState"
        },
        "reservationName": {
          "description": "Name of the reservation in which the resource should be provisioned. Format: projects/{project}/locations/{zone}/reservations/{reservation}",
          "type": "string"
        }
      }
    },
    "NetworkEndpoint": {
      "properties": {
        "ipAddress": {
          "description": "The internal IP address of this network endpoint.",
          "type": "string"
        },
        "accessConfig": {
          "$ref": "AccessConfig",
          "description": "The access config for the TPU worker."
        },
        "port": {
          "description": "The port of this network endpoint.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "A network endpoint over which a TPU worker can be reached.",
      "id": "NetworkEndpoint",
      "type": "object"
    },
    "SuspendingData": {
      "type": "object",
      "id": "SuspendingData",
      "properties": {},
      "description": "Further data for the suspending state."
    },
    "StartNodeRequest": {
      "type": "object",
      "description": "Request for StartNode.",
      "id": "StartNodeRequest",
      "properties": {}
    },
    "ServiceAccount": {
      "description": "A service account.",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email address of the service account. If empty, default Compute service account will be used.",
          "type": "string"
        },
        "scope": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed."
        }
      },
      "id": "ServiceAccount"
    },
    "AccessConfig": {
      "type": "object",
      "description": "An access config attached to the TPU worker.",
      "id": "AccessConfig",
      "properties": {
        "externalIp": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. An external IP address associated with the TPU worker."
        }
      }
    },
    "SuspendedData": {
      "description": "Further data for the suspended state.",
      "id": "SuspendedData",
      "type": "object",
      "properties": {}
    },
    "Node": {
      "description": "A TPU instance.",
      "id": "Node",
      "type": "object",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource labels to represent user-provided metadata.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script",
          "additionalProperties": {
            "type": "string"
          }
        },
        "apiVersion": {
          "description": "Output only. The API version that created this Node.",
          "type": "string",
          "enum": [
            "API_VERSION_UNSPECIFIED",
            "V1_ALPHA1",
            "V1",
            "V2_ALPHA1"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "API version is unknown.",
            "TPU API V1Alpha1 version.",
            "TPU API V1 version.",
            "TPU API V2Alpha1 version."
          ]
        },
        "networkConfig": {
          "description": "Network configurations for the TPU node.",
          "$ref": "NetworkConfig"
        },
        "description": {
          "type": "string",
          "description": "The user-supplied description of the TPU. Maximum of 512 characters."
        },
        "networkEndpoints": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "NetworkEndpoint"
          },
          "description": "Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first."
        },
        "serviceAccount": {
          "$ref": "ServiceAccount",
          "description": "The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used."
        },
        "health": {
          "enum": [
            "HEALTH_UNSPECIFIED",
            "HEALTHY",
            "TIMEOUT",
            "UNHEALTHY_TENSORFLOW",
            "UNHEALTHY_MAINTENANCE"
          ],
          "description": "The health status of the TPU node.",
          "type": "string",
          "enumDescriptions": [
            "Health status is unknown: not initialized or failed to retrieve.",
            "The resource is healthy.",
            "The resource is unresponsive.",
            "The in-guest ML stack is unhealthy.",
            "The node is under maintenance/priority boost caused rescheduling and will resume running once rescheduled."
          ]
        },
        "queuedResource": {
          "type": "string",
          "description": "Output only. The qualified name of the QueuedResource that requested this Node.",
          "readOnly": true
        },
        "name": {
          "description": "Output only. Immutable. The name of the TPU.",
          "type": "string",
          "readOnly": true
        },
        "healthDescription": {
          "description": "Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.",
          "readOnly": true,
          "type": "string"
        },
        "acceleratorType": {
          "description": "The type of hardware accelerators associated with this node.",
          "type": "string"
        },
        "dataDisks": {
          "items": {
            "$ref": "AttachedDisk"
          },
          "type": "array",
          "description": "The additional data disks for the Node."
        },
        "shieldedInstanceConfig": {
          "description": "Shielded Instance options.",
          "$ref": "ShieldedInstanceConfig"
        },
        "symptoms": {
          "items": {
            "$ref": "Symptom"
          },
          "readOnly": true,
          "description": "Output only. The Symptoms that have occurred to the TPU Node.",
          "type": "array"
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. The time when the node was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.",
          "type": "array"
        },
        "cidrBlock": {
          "type": "string",
          "description": "The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block."
        },
        "acceleratorConfig": {
          "$ref": "AcceleratorConfig",
          "description": "The AccleratorConfig for the TPU Node."
        },
        "runtimeVersion": {
          "type": "string",
          "description": "Required. The runtime version running in the Node."
        },
        "id": {
          "format": "int64",
          "description": "Output only. The unique identifier for the TPU Node.",
          "readOnly": true,
          "type": "string"
        },
        "bootDiskConfig": {
          "description": "Optional. Boot disk configuration.",
          "$ref": "BootDiskConfig"
        },
        "state": {
          "type": "string",
          "description": "Output only. The current state for the TPU Node.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "RESTARTING",
            "REIMAGING",
            "DELETING",
            "REPAIRING",
            "STOPPED",
            "STOPPING",
            "STARTING",
            "PREEMPTED",
            "TERMINATED",
            "HIDING",
            "HIDDEN",
            "UNHIDING"
          ],
          "enumDescriptions": [
            "TPU node state is not known/set.",
            "TPU node is being created.",
            "TPU node has been created.",
            "TPU node is restarting.",
            "TPU node is undergoing reimaging.",
            "TPU node is being deleted.",
            "TPU node is being repaired and may be unusable. Details can be found in the 'help_description' field.",
            "TPU node is stopped.",
            "TPU node is currently stopping.",
            "TPU node is currently starting.",
            "TPU node has been preempted. Only applies to Preemptible TPU Nodes.",
            "TPU node has been terminated due to maintenance or has reached the end of its life cycle (for preemptible nodes).",
            "TPU node is currently hiding.",
            "TPU node has been hidden.",
            "TPU node is currently unhiding."
          ],
          "readOnly": true
        },
        "multisliceNode": {
          "description": "Output only. Whether the Node belongs to a Multislice group.",
          "type": "boolean",
          "readOnly": true
        },
        "schedulingConfig": {
          "description": "The scheduling options for this node.",
          "$ref": "SchedulingConfig"
        }
      }
    },
    "BootDiskConfig": {
      "id": "BootDiskConfig",
      "description": "Boot disk configurations.",
      "properties": {
        "customerEncryptionKey": {
          "description": "Optional. Customer encryption key for boot disk.",
          "$ref": "CustomerEncryptionKey"
        },
        "enableConfidentialCompute": {
          "type": "boolean",
          "description": "Optional. Whether the boot disk will be created with confidential compute mode."
        }
      },
      "type": "object"
    },
    "GenerateServiceIdentityRequest": {
      "type": "object",
      "properties": {},
      "id": "GenerateServiceIdentityRequest",
      "description": "Request for GenerateServiceIdentity."
    },
    "AttachedDisk": {
      "id": "AttachedDisk",
      "properties": {
        "sourceDisk": {
          "description": "Specifies the full path to an existing disk. For example: \"projects/my-project/zones/us-central1-c/disks/my-disk\".",
          "type": "string"
        },
        "mode": {
          "description": "The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.",
          "enum": [
            "DISK_MODE_UNSPECIFIED",
            "READ_WRITE",
            "READ_ONLY"
          ],
          "type": "string",
          "enumDescriptions": [
            "The disk mode is not known/set.",
            "Attaches the disk in read-write mode. Only one TPU node can attach a disk in read-write mode at a time.",
            "Attaches the disk in read-only mode. Multiple TPU nodes can attach a disk in read-only mode at a time."
          ]
        }
      },
      "type": "object",
      "description": "A node-attached disk resource. Next ID: 8;"
    },
    "GenerateServiceIdentityResponse": {
      "type": "object",
      "properties": {
        "identity": {
          "description": "ServiceIdentity that was created or retrieved.",
          "$ref": "ServiceIdentity"
        }
      },
      "description": "Response for GenerateServiceIdentity.",
      "id": "GenerateServiceIdentityResponse"
    },
    "DeletingData": {
      "type": "object",
      "id": "DeletingData",
      "properties": {},
      "description": "Further data for the deleting state."
    },
    "AcceleratorType": {
      "id": "AcceleratorType",
      "type": "object",
      "properties": {
        "acceleratorConfigs": {
          "type": "array",
          "items": {
            "$ref": "AcceleratorConfig"
          },
          "description": "The accelerator config."
        },
        "type": {
          "type": "string",
          "description": "The accelerator type."
        },
        "name": {
          "description": "The resource name.",
          "type": "string"
        }
      },
      "description": "A accelerator type that a Node can be configured with."
    },
    "Status": {
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "properties": {
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        }
      }
    },
    "CreatingData": {
      "id": "CreatingData",
      "properties": {},
      "description": "Further data for the creating state.",
      "type": "object"
    },
    "SchedulingConfig": {
      "type": "object",
      "id": "SchedulingConfig",
      "description": "Sets the scheduling options for this node.",
      "properties": {
        "preemptible": {
          "description": "Defines whether the node is preemptible.",
          "type": "boolean"
        },
        "reserved": {
          "type": "boolean",
          "description": "Whether the node is created under a reservation."
        }
      }
    },
    "ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "id": "ListLocationsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "locations": {
          "type": "array",
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "Location"
          }
        }
      }
    },
    "AcceleratorConfig": {
      "description": "A TPU accelerator configuration.",
      "type": "object",
      "id": "AcceleratorConfig",
      "properties": {
        "topology": {
          "type": "string",
          "description": "Required. Topology of TPU in chips."
        },
        "type": {
          "type": "string",
          "description": "Required. Type of TPU.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "V2",
            "V3",
            "V4"
          ],
          "enumDescriptions": [
            "Unspecified version.",
            "TPU v2.",
            "TPU v3.",
            "TPU v4."
          ]
        }
      }
    },
    "Spot": {
      "properties": {},
      "type": "object",
      "id": "Spot",
      "description": "Spot tier definition."
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "properties": {
        "endTime": {
          "type": "string",
          "description": "The time the operation finished running.",
          "format": "google-datetime"
        },
        "cancelRequested": {
          "description": "Specifies if cancellation was requested for the operation.",
          "type": "boolean"
        },
        "target": {
          "description": "Target of the operation - for example projects/project-1/connectivityTests/test-1",
          "type": "string"
        },
        "createTime": {
          "description": "The time the operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "statusDetail": {
          "description": "Human-readable status of the operation, if any.",
          "type": "string"
        },
        "verb": {
          "description": "Name of the verb executed by the operation.",
          "type": "string"
        },
        "apiVersion": {
          "type": "string",
          "description": "API version."
        }
      },
      "type": "object",
      "description": "Metadata describing an Operation"
    },
    "ResetQueuedResourceRequest": {
      "id": "ResetQueuedResourceRequest",
      "type": "object",
      "description": "Request for ResetQueuedResource.",
      "properties": {}
    },
    "ActiveData": {
      "id": "ActiveData",
      "type": "object",
      "properties": {},
      "description": "Further data for the active state."
    },
    "ProvisioningData": {
      "description": "Further data for the provisioning state.",
      "properties": {},
      "type": "object",
      "id": "ProvisioningData"
    },
    "Interval": {
      "properties": {
        "startTime": {
          "type": "string",
          "description": "Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.",
      "id": "Interval",
      "type": "object"
    },
    "ListOperationsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        }
      },
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations."
    },
    "MultiNodeParams": {
      "properties": {
        "nodeIdPrefix": {
          "description": "Prefix of node_ids in case of multi-node request Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = \"np\", node ids of nodes created will be \"np-0\", \"np-1\", \"np-2\". If this field is not provided we use queued_resource_id as the node_id_prefix.",
          "type": "string"
        },
        "nodeCount": {
          "description": "Required. Number of nodes with this spec. The system will attempt to provison \"node_count\" nodes as part of the request. This needs to be \u003e 1.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "MultiNodeParams",
      "type": "object",
      "description": "Parameters to specify for multi-node QueuedResource requests. This field must be populated in case of multi-node requests instead of node_id. It's an error to specify both node_id and multi_node_params."
    },
    "ListRuntimeVersionsResponse": {
      "properties": {
        "runtimeVersions": {
          "items": {
            "$ref": "RuntimeVersion"
          },
          "description": "The listed nodes.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next page token or empty if none."
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "ListRuntimeVersionsResponse",
      "description": "Response for ListRuntimeVersions."
    },
    "GetGuestAttributesRequest": {
      "id": "GetGuestAttributesRequest",
      "type": "object",
      "description": "Request for GetGuestAttributes.",
      "properties": {
        "workerIds": {
          "type": "array",
          "description": "The 0-based worker ID. If it is empty, all workers' GuestAttributes will be returned.",
          "items": {
            "type": "string"
          }
        },
        "queryPath": {
          "type": "string",
          "description": "The guest attributes path to be queried."
        }
      }
    },
    "GetGuestAttributesResponse": {
      "description": "Response for GetGuestAttributes.",
      "type": "object",
      "properties": {
        "guestAttributes": {
          "description": "The guest attributes for the TPU workers.",
          "type": "array",
          "items": {
            "$ref": "GuestAttributes"
          }
        }
      },
      "id": "GetGuestAttributesResponse"
    },
    "BestEffort": {
      "type": "object",
      "description": "BestEffort tier definition.",
      "properties": {},
      "id": "BestEffort"
    },
    "StopNodeRequest": {
      "description": "Request for StopNode.",
      "id": "StopNodeRequest",
      "type": "object",
      "properties": {}
    },
    "CustomerEncryptionKey": {
      "id": "CustomerEncryptionKey",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "type": "string",
          "description": "The name of the encryption key that is stored in Google Cloud KMS. For example: \"kmsKeyName\": \"projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: \"kmsKeyName\": \"projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1 "
        }
      },
      "description": "Customer's encryption key."
    },
    "ListNodesResponse": {
      "description": "Response for ListNodes.",
      "properties": {
        "nodes": {
          "description": "The listed nodes.",
          "type": "array",
          "items": {
            "$ref": "Node"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next page token or empty if none."
        },
        "unreachable": {
          "type": "array",
          "description": "Locations that could not be reached.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "ListNodesResponse"
    },
    "NodeSpec": {
      "properties": {
        "parent": {
          "type": "string",
          "description": "Required. The parent resource name."
        },
        "nodeId": {
          "type": "string",
          "description": "The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multi-node requests, multi_node_params must be populated instead. It's an error to specify both node_id and multi_node_params."
        },
        "multiNodeParams": {
          "$ref": "MultiNodeParams",
          "description": "Optional. Fields to specify in case of multi-node request."
        },
        "node": {
          "description": "Required. The node.",
          "$ref": "Node"
        }
      },
      "id": "NodeSpec",
      "description": "Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        }
      },
      "id": "Operation",
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "GuestAttributesEntry": {
      "description": "A guest attributes namespace/key/value entry.",
      "id": "GuestAttributesEntry",
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Namespace for the guest attribute entry."
        },
        "key": {
          "description": "Key for the guest attribute entry.",
          "type": "string"
        },
        "value": {
          "description": "Value for the guest attribute entry.",
          "type": "string"
        }
      }
    },
    "ShieldedInstanceConfig": {
      "description": "A set of Shielded Instance options.",
      "type": "object",
      "id": "ShieldedInstanceConfig",
      "properties": {
        "enableSecureBoot": {
          "type": "boolean",
          "description": "Defines whether the instance has Secure Boot enabled."
        }
      }
    },
    "ListAcceleratorTypesResponse": {
      "type": "object",
      "description": "Response for ListAcceleratorTypes.",
      "properties": {
        "acceleratorTypes": {
          "type": "array",
          "items": {
            "$ref": "AcceleratorType"
          },
          "description": "The listed nodes."
        },
        "nextPageToken": {
          "description": "The next page token or empty if none.",
          "type": "string"
        },
        "unreachable": {
          "type": "array",
          "description": "Locations that could not be reached.",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "ListAcceleratorTypesResponse"
    },
    "FailedData": {
      "id": "FailedData",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error that caused the queued resource to enter the FAILED state."
        }
      },
      "description": "Further data for the failed state."
    },
    "Symptom": {
      "description": "A Symptom instance.",
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Timestamp when the Symptom is created.",
          "format": "google-datetime"
        },
        "details": {
          "description": "Detailed information of the current Symptom.",
          "type": "string"
        },
        "workerId": {
          "type": "string",
          "description": "A string used to uniquely distinguish a worker within a TPU node."
        },
        "symptomType": {
          "enum": [
            "SYMPTOM_TYPE_UNSPECIFIED",
            "LOW_MEMORY",
            "OUT_OF_MEMORY",
            "EXECUTE_TIMED_OUT",
            "MESH_BUILD_FAIL",
            "HBM_OUT_OF_MEMORY",
            "PROJECT_ABUSE"
          ],
          "enumDescriptions": [
            "Unspecified symptom.",
            "TPU VM memory is low.",
            "TPU runtime is out of memory.",
            "TPU runtime execution has timed out.",
            "TPU runtime fails to construct a mesh that recognizes each TPU device's neighbors.",
            "TPU HBM is out of memory.",
            "Abusive behaviors have been identified on the current project."
          ],
          "description": "Type of the Symptom.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Symptom"
    },
    "Location": {
      "id": "Location",
      "description": "A resource that represents a Google Cloud location.",
      "type": "object",
      "properties": {
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata. For example the available capacity at the given location."
        }
      }
    },
    "SimulateMaintenanceEventRequest": {
      "description": "Request for SimulateMaintenanceEvent.",
      "properties": {
        "workerIds": {
          "type": "array",
          "description": "The 0-based worker ID. If it is empty, worker ID 0 will be selected for maintenance event simulation. A maintenance event will only be fired on the first specified worker ID. Future implementations may support firing on multiple workers.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "SimulateMaintenanceEventRequest"
    },
    "GuestAttributes": {
      "id": "GuestAttributes",
      "properties": {
        "queryValue": {
          "$ref": "GuestAttributesValue",
          "description": "The value of the requested queried path."
        },
        "queryPath": {
          "description": "The path to be queried. This can be the default namespace ('/') or a nested namespace ('/\\/') or a specified key ('/\\/\\')",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A guest attributes."
    },
    "GuestAttributesValue": {
      "description": "Array of guest attribute namespace/key/value tuples.",
      "properties": {
        "items": {
          "description": "The list of guest attributes entries.",
          "type": "array",
          "items": {
            "$ref": "GuestAttributesEntry"
          }
        }
      },
      "id": "GuestAttributesValue",
      "type": "object"
    }
  },
  "canonicalName": "TPU",
  "discoveryVersion": "v1",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "queuedResources": {
              "methods": {
                "delete": {
                  "description": "Deletes a QueuedResource TPU instance.",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/queuedResources/{queuedResourcesId}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "DELETE",
                  "parameters": {
                    "force": {
                      "type": "boolean",
                      "location": "query",
                      "description": "If set to true, all running nodes belonging to this queued resource will be deleted first and then the queued resource will be deleted. Otherwise (i.e. force=false), the queued resource will only be deleted if its nodes have already been deleted or the queued resource is in the ACCEPTED, FAILED, or SUSPENDED state."
                    },
                    "name": {
                      "description": "Required. The resource name.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/queuedResources/[^/]+$",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "Idempotent request UUID.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "tpu.projects.locations.queuedResources.delete",
                  "path": "v2alpha1/{+name}"
                },
                "list": {
                  "response": {
                    "$ref": "ListQueuedResourcesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/queuedResources",
                  "path": "v2alpha1/{+parent}/queuedResources",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "required": true,
                      "description": "Required. The parent resource name.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string"
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "description": "The maximum number of items to return.",
                      "type": "integer"
                    }
                  },
                  "httpMethod": "GET",
                  "id": "tpu.projects.locations.queuedResources.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Lists queued resources."
                },
                "create": {
                  "parameters": {
                    "requestId": {
                      "type": "string",
                      "location": "query",
                      "description": "Idempotent request UUID."
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "Required. The parent resource name."
                    },
                    "queuedResourceId": {
                      "description": "The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "request": {
                    "$ref": "QueuedResource"
                  },
                  "description": "Creates a QueuedResource TPU instance.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v2alpha1/{+parent}/queuedResources",
                  "id": "tpu.projects.locations.queuedResources.create",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/queuedResources",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST"
                },
                "get": {
                  "httpMethod": "GET",
                  "path": "v2alpha1/{+name}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/queuedResources/[^/]+$",
                      "description": "Required. The resource name."
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "tpu.projects.locations.queuedResources.get",
                  "response": {
                    "$ref": "QueuedResource"
                  },
                  "description": "Gets details of a queued resource.",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/queuedResources/{queuedResourcesId}"
                },
                "reset": {
                  "httpMethod": "POST",
                  "path": "v2alpha1/{+name}:reset",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "Required. The name of the queued resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/queuedResources/[^/]+$"
                    }
                  },
                  "id": "tpu.projects.locations.queuedResources.reset",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "ResetQueuedResourceRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/queuedResources/{queuedResourcesId}:reset",
                  "description": "Resets a QueuedResource TPU instance"
                }
              }
            },
            "nodes": {
              "methods": {
                "stop": {
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:stop",
                  "id": "tpu.projects.locations.nodes.stop",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v2alpha1/{+name}:stop",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/nodes/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "Required. The resource name."
                    }
                  },
                  "description": "Stops a node. This operation is only available with single TPU nodes.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "StopNodeRequest"
                  },
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "simulateMaintenanceEvent": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v2alpha1/{+name}:simulateMaintenanceEvent",
                  "request": {
                    "$ref": "SimulateMaintenanceEventRequest"
                  },
                  "description": "Simulates a maintenance event.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "tpu.projects.locations.nodes.simulateMaintenanceEvent",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/nodes/[^/]+$",
                      "description": "Required. The resource name."
                    }
                  },
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:simulateMaintenanceEvent"
                },
                "start": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "POST",
                  "path": "v2alpha1/{+name}:start",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "tpu.projects.locations.nodes.start",
                  "request": {
                    "$ref": "StartNodeRequest"
                  },
                  "description": "Starts a node.",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/nodes/[^/]+$",
                      "required": true,
                      "description": "Required. The resource name."
                    }
                  },
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:start"
                },
                "list": {
                  "response": {
                    "$ref": "ListNodesResponse"
                  },
                  "parameters": {
                    "pageSize": {
                      "location": "query",
                      "description": "The maximum number of items to return.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "Required. The parent resource name.",
                      "location": "path"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "The next_page_token value returned from a previous List request, if any."
                    }
                  },
                  "httpMethod": "GET",
                  "description": "Lists nodes.",
                  "id": "tpu.projects.locations.nodes.list",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v2alpha1/{+parent}/nodes",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "id": "tpu.projects.locations.nodes.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}",
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/nodes/[^/]+$",
                      "description": "Required. The resource name.",
                      "type": "string",
                      "location": "path"
                    },
                    "requestId": {
                      "description": "Idempotent request UUID.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "DELETE",
                  "description": "Deletes a node.",
                  "path": "v2alpha1/{+name}"
                },
                "get": {
                  "path": "v2alpha1/{+name}",
                  "response": {
                    "$ref": "Node"
                  },
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "Required. The resource name.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/nodes/[^/]+$",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "description": "Gets the details of a node.",
                  "id": "tpu.projects.locations.nodes.get",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "patch": {
                  "description": "Updates the configurations of a node.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "PATCH",
                  "path": "v2alpha1/{+name}",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}",
                  "id": "tpu.projects.locations.nodes.patch",
                  "parameters": {
                    "updateMask": {
                      "description": "Required. Mask of fields from Node to update. Supported fields: [description, tags, labels, metadata, network_config.enable_external_ips].",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/nodes/[^/]+$",
                      "description": "Output only. Immutable. The name of the TPU.",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "request": {
                    "$ref": "Node"
                  }
                },
                "getGuestAttributes": {
                  "request": {
                    "$ref": "GetGuestAttributesRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "POST",
                  "path": "v2alpha1/{+name}:getGuestAttributes",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:getGuestAttributes",
                  "description": "Retrieves the guest attributes for the node.",
                  "id": "tpu.projects.locations.nodes.getGuestAttributes",
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "Required. The resource name.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/nodes/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "GetGuestAttributesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "create": {
                  "path": "v2alpha1/{+parent}/nodes",
                  "request": {
                    "$ref": "Node"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "tpu.projects.locations.nodes.create",
                  "parameters": {
                    "requestId": {
                      "description": "Idempotent request UUID.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "type": "string",
                      "description": "Required. The parent resource name.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true
                    },
                    "nodeId": {
                      "location": "query",
                      "type": "string",
                      "description": "The unqualified resource name."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a node.",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes",
                  "httpMethod": "POST"
                }
              }
            },
            "operations": {
              "methods": {
                "list": {
                  "path": "v2alpha1/{+name}/operations",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/operations",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "The name of the operation's parent resource.",
                      "required": true
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "The standard list filter."
                    }
                  },
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "id": "tpu.projects.locations.operations.list"
                },
                "cancel": {
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "path": "v2alpha1/{+name}:cancel",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "tpu.projects.locations.operations.cancel",
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel"
                },
                "delete": {
                  "path": "v2alpha1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "The name of the operation resource to be deleted.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "tpu.projects.locations.operations.delete"
                },
                "get": {
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "id": "tpu.projects.locations.operations.get",
                  "path": "v2alpha1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "runtimeVersions": {
              "methods": {
                "get": {
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/runtimeVersions/[^/]+$",
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "Required. The resource name."
                    }
                  },
                  "response": {
                    "$ref": "RuntimeVersion"
                  },
                  "description": "Gets a runtime version.",
                  "id": "tpu.projects.locations.runtimeVersions.get",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/runtimeVersions/{runtimeVersionsId}",
                  "path": "v2alpha1/{+name}"
                },
                "list": {
                  "path": "v2alpha1/{+parent}/runtimeVersions",
                  "httpMethod": "GET",
                  "description": "Lists runtime versions supported by this API.",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/runtimeVersions",
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "List filter."
                    },
                    "orderBy": {
                      "description": "Sort results.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. The parent resource name."
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "The maximum number of items to return.",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "tpu.projects.locations.runtimeVersions.list",
                  "response": {
                    "$ref": "ListRuntimeVersionsResponse"
                  }
                }
              }
            },
            "acceleratorTypes": {
              "methods": {
                "get": {
                  "id": "tpu.projects.locations.acceleratorTypes.get",
                  "path": "v2alpha1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/acceleratorTypes/{acceleratorTypesId}",
                  "response": {
                    "$ref": "AcceleratorType"
                  },
                  "description": "Gets AcceleratorType.",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/acceleratorTypes/[^/]+$",
                      "description": "Required. The resource name.",
                      "required": true,
                      "type": "string"
                    }
                  }
                },
                "list": {
                  "response": {
                    "$ref": "ListAcceleratorTypesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/acceleratorTypes",
                  "description": "Lists accelerator types supported by this API.",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "Required. The parent resource name.",
                      "location": "path"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "filter": {
                      "description": "List filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Sort results.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "httpMethod": "GET",
                  "path": "v2alpha1/{+parent}/acceleratorTypes",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "tpu.projects.locations.acceleratorTypes.list"
                }
              }
            }
          },
          "methods": {
            "get": {
              "id": "tpu.projects.locations.get",
              "path": "v2alpha1/{+name}",
              "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Resource name for the location.",
                  "pattern": "^projects/[^/]+/locations/[^/]+$"
                }
              },
              "description": "Gets information about a location.",
              "response": {
                "$ref": "Location"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "generateServiceIdentity": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "GenerateServiceIdentityResponse"
              },
              "path": "v2alpha1/{+parent}:generateServiceIdentity",
              "description": "Generates the Cloud TPU service identity for the project.",
              "request": {
                "$ref": "GenerateServiceIdentityRequest"
              },
              "id": "tpu.projects.locations.generateServiceIdentity",
              "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}:generateServiceIdentity",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. The parent resource name.",
                  "type": "string"
                }
              }
            },
            "list": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "path": "v2alpha1/{+name}/locations",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+$"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "format": "int32"
                },
                "filter": {
                  "type": "string",
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "location": "query"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                }
              },
              "flatPath": "v2alpha1/projects/{projectsId}/locations",
              "description": "Lists information about the supported locations for this service.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "id": "tpu.projects.locations.list"
            }
          }
        }
      }
    }
  },
  "version": "v2alpha1",
  "basePath": "",
  "id": "tpu:v2alpha1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "kind": "discovery#restDescription",
  "protocol": "rest",
  "ownerDomain": "google.com",
  "rootUrl": "https://tpu.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "baseUrl": "https://tpu.googleapis.com/",
  "revision": "20230814",
  "mtlsRootUrl": "https://tpu.mtls.googleapis.com/",
  "name": "tpu",
  "description": "TPU API provides customers with access to Google TPU technology.",
  "ownerName": "Google",
  "batchPath": "batch",
  "servicePath": "",
  "documentationLink": "https://cloud.google.com/tpu/",
  "title": "Cloud TPU API"
}

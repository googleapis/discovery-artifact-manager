{
  "fullyEncodeReservedExpansion": true,
  "mtlsRootUrl": "https://cloudsearch.mtls.googleapis.com/",
  "ownerDomain": "google.com",
  "basePath": "",
  "revision": "20220829",
  "discoveryVersion": "v1",
  "parameters": {
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "location": "query",
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "location": "query",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    }
  },
  "title": "Cloud Search API",
  "resources": {
    "v1": {
      "methods": {
        "initializeCustomer": {
          "parameters": {},
          "description": "Enables `third party` support in Google Cloud Search. **Note:** This API requires an admin account to execute.",
          "httpMethod": "POST",
          "path": "v1:initializeCustomer",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "flatPath": "v1:initializeCustomer",
          "response": {
            "$ref": "Operation"
          },
          "id": "cloudsearch.initializeCustomer",
          "parameterOrder": [],
          "request": {
            "$ref": "InitializeCustomerRequest"
          }
        }
      }
    },
    "operations": {
      "resources": {
        "lro": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "id": "cloudsearch.operations.lro.list",
              "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
              "parameters": {
                "pageToken": {
                  "description": "The standard list page token.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "location": "path",
                  "pattern": "^operations/.*$",
                  "description": "The name of the operation's parent resource.",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "format": "int32",
                  "description": "The standard list page size."
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "The standard list filter."
                }
              },
              "response": {
                "$ref": "ListOperationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.debug",
                "https://www.googleapis.com/auth/cloud_search.indexing",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "path": "v1/{+name}/lro",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/operations/{operationsId}/lro"
            }
          }
        }
      },
      "methods": {
        "get": {
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.debug",
            "https://www.googleapis.com/auth/cloud_search.indexing",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing",
            "https://www.googleapis.com/auth/cloud_search.settings.query"
          ],
          "flatPath": "v1/operations/{operationsId}",
          "path": "v1/{+name}",
          "httpMethod": "GET",
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "id": "cloudsearch.operations.get",
          "parameters": {
            "name": {
              "location": "path",
              "pattern": "^operations/.*$",
              "type": "string",
              "description": "The name of the operation resource.",
              "required": true
            }
          },
          "parameterOrder": [
            "name"
          ]
        }
      }
    },
    "debug": {
      "resources": {
        "datasources": {
          "resources": {
            "items": {
              "resources": {
                "unmappedids": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "debugOptions.enableDebugging": {
                          "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                          "location": "query",
                          "type": "boolean"
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "The next_page_token value returned from a previous List request, if any.",
                          "location": "query"
                        },
                        "pageSize": {
                          "format": "int32",
                          "type": "integer",
                          "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                          "location": "query"
                        },
                        "parent": {
                          "pattern": "^datasources/[^/]+/items/[^/]+$",
                          "required": true,
                          "type": "string",
                          "description": "The name of the item, in the following format: datasources/{source_id}/items/{ID}",
                          "location": "path"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "cloudsearch.debug.datasources.items.unmappedids.list",
                      "description": "List all unmapped identities for a specific item. **Note:** This API requires an admin account to execute.",
                      "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}/unmappedids",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud_search",
                        "https://www.googleapis.com/auth/cloud_search.debug"
                      ],
                      "response": {
                        "$ref": "ListUnmappedIdentitiesResponse"
                      },
                      "httpMethod": "GET",
                      "path": "v1/debug/{+parent}/unmappedids"
                    }
                  }
                }
              },
              "methods": {
                "checkAccess": {
                  "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}:checkAccess",
                  "httpMethod": "POST",
                  "description": "Checks whether an item is accessible by specified principal. Principal must be a user; groups and domain values aren't supported. **Note:** This API requires an admin account to execute.",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Principal"
                  },
                  "response": {
                    "$ref": "CheckAccessResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "parameters": {
                    "debugOptions.enableDebugging": {
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean",
                      "location": "query"
                    },
                    "name": {
                      "type": "string",
                      "description": "Item name, format: datasources/{source_id}/items/{item_id}",
                      "required": true,
                      "location": "path",
                      "pattern": "^datasources/[^/]+/items/[^/]+$"
                    }
                  },
                  "path": "v1/debug/{+name}:checkAccess",
                  "id": "cloudsearch.debug.datasources.items.checkAccess"
                },
                "searchByViewUrl": {
                  "path": "v1/debug/{+name}/items:searchByViewUrl",
                  "request": {
                    "$ref": "SearchItemsByViewUrlRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Source name, format: datasources/{source_id}",
                      "pattern": "^datasources/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "id": "cloudsearch.debug.datasources.items.searchByViewUrl",
                  "response": {
                    "$ref": "SearchItemsByViewUrlResponse"
                  },
                  "description": "Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute.",
                  "flatPath": "v1/debug/datasources/{datasourcesId}/items:searchByViewUrl"
                }
              }
            }
          }
        },
        "identitysources": {
          "resources": {
            "unmappedids": {
              "methods": {
                "list": {
                  "response": {
                    "$ref": "ListUnmappedIdentitiesResponse"
                  },
                  "description": "Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute.",
                  "httpMethod": "GET",
                  "id": "cloudsearch.debug.identitysources.unmappedids.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "flatPath": "v1/debug/identitysources/{identitysourcesId}/unmappedids",
                  "path": "v1/debug/{+parent}/unmappedids",
                  "parameters": {
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                    },
                    "resolutionStatusCode": {
                      "description": "Limit users selection to this status.",
                      "location": "query",
                      "enum": [
                        "CODE_UNSPECIFIED",
                        "NOT_FOUND",
                        "IDENTITY_SOURCE_NOT_FOUND",
                        "IDENTITY_SOURCE_MISCONFIGURED",
                        "TOO_MANY_MAPPINGS_FOUND",
                        "INTERNAL_ERROR"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "Input-only value. Used to list all unmapped identities regardless of status.",
                        "The unmapped identity was not found in IDaaS, and needs to be provided by the user.",
                        "The identity source associated with the identity was either not found or deleted.",
                        "IDaaS does not understand the identity source, probably because the schema was modified in a non compatible way.",
                        "The number of users associated with the external identity is too large.",
                        "Internal error."
                      ]
                    },
                    "parent": {
                      "location": "path",
                      "pattern": "^identitysources/[^/]+$",
                      "required": true,
                      "description": "The name of the identity source, in the following format: identitysources/{source_id}",
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of items to fetch in a request. Defaults to 100."
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "The next_page_token value returned from a previous List request, if any."
                    }
                  }
                }
              }
            },
            "items": {
              "methods": {
                "listForunmappedidentity": {
                  "id": "cloudsearch.debug.identitysources.items.listForunmappedidentity",
                  "flatPath": "v1/debug/identitysources/{identitysourcesId}/items:forunmappedidentity",
                  "description": "Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute.",
                  "response": {
                    "$ref": "ListItemNamesForUnmappedIdentityResponse"
                  },
                  "path": "v1/debug/{+parent}/items:forunmappedidentity",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "groupResourceName": {
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                      "format": "int32",
                      "location": "query"
                    },
                    "userResourceName": {
                      "location": "query",
                      "type": "string"
                    },
                    "debugOptions.enableDebugging": {
                      "type": "boolean",
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query"
                    },
                    "parent": {
                      "description": "The name of the identity source, in the following format: identitysources/{source_id}}",
                      "location": "path",
                      "type": "string",
                      "pattern": "^identitysources/[^/]+$",
                      "required": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "media": {
      "methods": {
        "upload": {
          "id": "cloudsearch.media.upload",
          "flatPath": "v1/media/{mediaId}",
          "response": {
            "$ref": "Media"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "path": "v1/media/{+resourceName}",
          "supportsMediaUpload": true,
          "httpMethod": "POST",
          "request": {
            "$ref": "Media"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.indexing"
          ],
          "parameters": {
            "resourceName": {
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name.",
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Uploads media for indexing. The upload endpoint supports direct and resumable upload protocols and is intended for large items that can not be [inlined during index requests](https://developers.google.com/cloud-search/docs/reference/rest/v1/indexing.datasources.items#itemcontent). To index large content: 1. Call indexing.datasources.items.upload with the item name to begin an upload session and retrieve the UploadItemRef. 1. Call media.upload to upload the content, as a streaming request, using the same resource name from the UploadItemRef from step 1. 1. Call indexing.datasources.items.index to index the item. Populate the [ItemContent](/cloud-search/docs/reference/rest/v1/indexing.datasources.items#ItemContent) with the UploadItemRef from step 1. For additional information, see [Create a content connector using the REST API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest). **Note:** This API requires a service account to execute.",
          "mediaUpload": {
            "accept": [
              "*/*"
            ],
            "protocols": {
              "simple": {
                "path": "/upload/v1/media/{+resourceName}",
                "multipart": true
              }
            }
          }
        }
      }
    },
    "query": {
      "resources": {
        "sources": {
          "methods": {
            "list": {
              "id": "cloudsearch.query.sources.list",
              "flatPath": "v1/query/sources",
              "response": {
                "$ref": "ListQuerySourcesResponse"
              },
              "httpMethod": "GET",
              "path": "v1/query/sources",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.query"
              ],
              "parameterOrder": [],
              "parameters": {
                "pageToken": {
                  "description": "Number of sources to return in the response.",
                  "type": "string",
                  "location": "query"
                },
                "requestOptions.languageCode": {
                  "type": "string",
                  "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. The suggest API does not use this parameter. Instead, suggest autocompletes only based on characters in the query.",
                  "location": "query"
                },
                "requestOptions.searchApplicationId": {
                  "type": "string",
                  "description": "The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922).",
                  "location": "query"
                },
                "requestOptions.debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean",
                  "location": "query"
                },
                "requestOptions.timeZone": {
                  "description": "Current user's time zone id, such as \"America/Los_Angeles\" or \"Australia/Sydney\". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.",
                  "location": "query",
                  "type": "string"
                }
              },
              "description": "Returns list of sources that user can use for Search and Suggest APIs. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/)."
            }
          }
        }
      },
      "methods": {
        "search": {
          "id": "cloudsearch.query.search",
          "path": "v1/query/search",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.query"
          ],
          "parameters": {},
          "description": "The Cloud Search Query API provides the search method, which returns the most relevant results from a user query. The results can come from Google Workspace apps, such as Gmail or Google Drive, or they can come from data that you have indexed from a third party. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
          "flatPath": "v1/query/search",
          "httpMethod": "POST",
          "request": {
            "$ref": "SearchRequest"
          },
          "response": {
            "$ref": "SearchResponse"
          },
          "parameterOrder": []
        },
        "suggest": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.query"
          ],
          "path": "v1/query/suggest",
          "response": {
            "$ref": "SuggestResponse"
          },
          "id": "cloudsearch.query.suggest",
          "httpMethod": "POST",
          "parameters": {},
          "description": "Provides suggestions for autocompleting the query. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
          "flatPath": "v1/query/suggest",
          "request": {
            "$ref": "SuggestRequest"
          },
          "parameterOrder": []
        }
      }
    },
    "stats": {
      "resources": {
        "index": {
          "resources": {
            "datasources": {
              "methods": {
                "get": {
                  "path": "v1/stats/index/{+name}",
                  "description": "Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "flatPath": "v1/stats/index/datasources/{datasourcesId}",
                  "parameters": {
                    "fromDate.month": {
                      "format": "int32",
                      "location": "query",
                      "type": "integer",
                      "description": "Month of date. Must be from 1 to 12."
                    },
                    "toDate.year": {
                      "type": "integer",
                      "location": "query",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32"
                    },
                    "name": {
                      "pattern": "^datasources/[^/]+$",
                      "required": true,
                      "description": "The resource id of the data source to retrieve statistics for, in the following format: \"datasources/{source_id}\"",
                      "location": "path",
                      "type": "string"
                    },
                    "toDate.day": {
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "toDate.month": {
                      "description": "Month of date. Must be from 1 to 12.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "fromDate.day": {
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "fromDate.year": {
                      "format": "int32",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "type": "integer",
                      "location": "query"
                    }
                  },
                  "id": "cloudsearch.stats.index.datasources.get",
                  "response": {
                    "$ref": "GetDataSourceIndexStatsResponse"
                  }
                }
              }
            }
          }
        },
        "user": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "response": {
                    "$ref": "GetSearchApplicationUserStatsResponse"
                  },
                  "httpMethod": "GET",
                  "description": "Get the users statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "parameters": {
                    "toDate.month": {
                      "description": "Month of date. Must be from 1 to 12.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    },
                    "fromDate.day": {
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "fromDate.month": {
                      "format": "int32",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer",
                      "location": "query"
                    },
                    "toDate.year": {
                      "type": "integer",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "location": "query"
                    },
                    "fromDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "name": {
                      "pattern": "^searchapplications/[^/]+$",
                      "type": "string",
                      "description": "The resource id of the search application session stats, in the following format: searchapplications/{application_id}",
                      "required": true,
                      "location": "path"
                    },
                    "toDate.day": {
                      "type": "integer",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "format": "int32",
                      "location": "query"
                    }
                  },
                  "id": "cloudsearch.stats.user.searchapplications.get",
                  "flatPath": "v1/stats/user/searchapplications/{searchapplicationsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/stats/user/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ]
                }
              }
            }
          }
        },
        "session": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "parameters": {
                    "fromDate.day": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
                    },
                    "toDate.month": {
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "fromDate.month": {
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "name": {
                      "description": "The resource id of the search application session stats, in the following format: searchapplications/{application_id}",
                      "pattern": "^searchapplications/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    },
                    "toDate.year": {
                      "location": "query",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "toDate.day": {
                      "type": "integer",
                      "location": "query",
                      "format": "int32",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
                    },
                    "fromDate.year": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "Year of date. Must be from 1 to 9999."
                    }
                  },
                  "flatPath": "v1/stats/session/searchapplications/{searchapplicationsId}",
                  "response": {
                    "$ref": "GetSearchApplicationSessionStatsResponse"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.stats.session.searchapplications.get",
                  "description": "Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "httpMethod": "GET",
                  "path": "v1/stats/session/{+name}"
                }
              }
            }
          }
        },
        "query": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "flatPath": "v1/stats/query/searchapplications/{searchapplicationsId}",
                  "response": {
                    "$ref": "GetSearchApplicationQueryStatsResponse"
                  },
                  "path": "v1/stats/query/{+name}",
                  "description": "Get the query statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "parameters": {
                    "toDate.day": {
                      "type": "integer",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "format": "int32",
                      "location": "query"
                    },
                    "fromDate.day": {
                      "location": "query",
                      "type": "integer",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "format": "int32"
                    },
                    "fromDate.month": {
                      "description": "Month of date. Must be from 1 to 12.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "toDate.year": {
                      "type": "integer",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "location": "query",
                      "format": "int32"
                    },
                    "fromDate.year": {
                      "location": "query",
                      "type": "integer",
                      "format": "int32",
                      "description": "Year of date. Must be from 1 to 9999."
                    },
                    "toDate.month": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12."
                    },
                    "name": {
                      "pattern": "^searchapplications/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "The resource id of the search application query stats, in the following format: searchapplications/{application_id}"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.stats.query.searchapplications.get"
                }
              }
            }
          }
        }
      },
      "methods": {
        "getSession": {
          "flatPath": "v1/stats/session",
          "httpMethod": "GET",
          "parameters": {
            "toDate.month": {
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32",
              "location": "query"
            },
            "fromDate.year": {
              "format": "int32",
              "type": "integer",
              "description": "Year of date. Must be from 1 to 9999.",
              "location": "query"
            },
            "toDate.year": {
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "toDate.day": {
              "format": "int32",
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer"
            },
            "fromDate.day": {
              "type": "integer",
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32"
            },
            "fromDate.month": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12."
            }
          },
          "description": "Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute.",
          "response": {
            "$ref": "GetCustomerSessionStatsResponse"
          },
          "path": "v1/stats/session",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "id": "cloudsearch.stats.getSession",
          "parameterOrder": []
        },
        "getUser": {
          "id": "cloudsearch.stats.getUser",
          "parameters": {
            "fromDate.year": {
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "fromDate.month": {
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query",
              "format": "int32"
            },
            "toDate.month": {
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query",
              "format": "int32",
              "type": "integer"
            },
            "toDate.year": {
              "location": "query",
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer"
            },
            "toDate.day": {
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "fromDate.day": {
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32",
              "location": "query",
              "type": "integer"
            }
          },
          "parameterOrder": [],
          "path": "v1/stats/user",
          "response": {
            "$ref": "GetCustomerUserStatsResponse"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "description": "Get the users statistics for customer. **Note:** This API requires a standard end user account to execute.",
          "flatPath": "v1/stats/user"
        },
        "getIndex": {
          "parameterOrder": [],
          "id": "cloudsearch.stats.getIndex",
          "description": "Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute.",
          "path": "v1/stats/index",
          "parameters": {
            "fromDate.month": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12."
            },
            "toDate.day": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
            },
            "fromDate.day": {
              "type": "integer",
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32"
            },
            "toDate.year": {
              "format": "int32",
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer"
            },
            "fromDate.year": {
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "toDate.month": {
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            }
          },
          "response": {
            "$ref": "GetCustomerIndexStatsResponse"
          },
          "flatPath": "v1/stats/index",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ]
        },
        "getQuery": {
          "response": {
            "$ref": "GetCustomerQueryStatsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "path": "v1/stats/query",
          "description": "Get the query statistics for customer. **Note:** This API requires a standard end user account to execute.",
          "httpMethod": "GET",
          "flatPath": "v1/stats/query",
          "id": "cloudsearch.stats.getQuery",
          "parameters": {
            "fromDate.year": {
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "toDate.month": {
              "type": "integer",
              "format": "int32",
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query"
            },
            "fromDate.month": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12."
            },
            "toDate.year": {
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "fromDate.day": {
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32",
              "location": "query"
            },
            "toDate.day": {
              "format": "int32",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "location": "query",
              "type": "integer"
            }
          },
          "parameterOrder": []
        },
        "getSearchapplication": {
          "flatPath": "v1/stats/searchapplication",
          "description": "Get search application stats for customer. **Note:** This API requires a standard end user account to execute.",
          "response": {
            "$ref": "GetCustomerSearchApplicationStatsResponse"
          },
          "parameterOrder": [],
          "path": "v1/stats/searchapplication",
          "parameters": {
            "endDate.year": {
              "type": "integer",
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999.",
              "format": "int32"
            },
            "endDate.month": {
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query",
              "format": "int32",
              "type": "integer"
            },
            "startDate.month": {
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "type": "integer",
              "format": "int32"
            },
            "startDate.year": {
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999.",
              "location": "query",
              "type": "integer"
            },
            "startDate.day": {
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "endDate.day": {
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32",
              "type": "integer"
            }
          },
          "httpMethod": "GET",
          "id": "cloudsearch.stats.getSearchapplication",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ]
        }
      }
    },
    "settings": {
      "methods": {
        "getCustomer": {
          "httpMethod": "GET",
          "id": "cloudsearch.settings.getCustomer",
          "path": "v1/settings/customer",
          "parameters": {},
          "parameterOrder": [],
          "description": "Get customer settings. **Note:** This API requires an admin account to execute.",
          "flatPath": "v1/settings/customer",
          "response": {
            "$ref": "CustomerSettings"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ]
        },
        "updateCustomer": {
          "parameterOrder": [],
          "response": {
            "$ref": "Operation"
          },
          "parameters": {
            "updateMask": {
              "description": "Update mask to control which fields get updated. If you specify a field in the update_mask but don't specify its value here, that field will be cleared. If the mask is not present or empty, all fields will be updated. Currently supported field paths: vpc_settings and audit_logging_settings",
              "type": "string",
              "format": "google-fieldmask",
              "location": "query"
            }
          },
          "path": "v1/settings/customer",
          "id": "cloudsearch.settings.updateCustomer",
          "flatPath": "v1/settings/customer",
          "httpMethod": "PATCH",
          "description": "Update customer settings. **Note:** This API requires an admin account to execute.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "request": {
            "$ref": "CustomerSettings"
          }
        }
      },
      "resources": {
        "datasources": {
          "methods": {
            "update": {
              "httpMethod": "PUT",
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "parameterOrder": [
                "name"
              ],
              "path": "v1/settings/{+name}",
              "description": "Updates a datasource. **Note:** This API requires an admin account to execute.",
              "request": {
                "$ref": "UpdateDataSourceRequest"
              },
              "parameters": {
                "name": {
                  "pattern": "^datasources/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.",
                  "required": true
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudsearch.settings.datasources.update"
            },
            "create": {
              "id": "cloudsearch.settings.datasources.create",
              "path": "v1/settings/datasources",
              "parameterOrder": [],
              "description": "Creates a datasource. **Note:** This API requires an admin account to execute.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "flatPath": "v1/settings/datasources",
              "parameters": {},
              "httpMethod": "POST",
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "DataSource"
              }
            },
            "get": {
              "description": "Gets a datasource. **Note:** This API requires an admin account to execute.",
              "id": "cloudsearch.settings.datasources.get",
              "path": "v1/settings/{+name}",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "response": {
                "$ref": "DataSource"
              },
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query",
                  "type": "boolean"
                },
                "name": {
                  "required": true,
                  "location": "path",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}.",
                  "type": "string",
                  "pattern": "^datasources/[^/]+$"
                }
              }
            },
            "delete": {
              "path": "v1/settings/{+name}",
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "required": true,
                  "description": "The name of the datasource. Format: datasources/{source_id}.",
                  "pattern": "^datasources/[^/]+$",
                  "location": "path",
                  "type": "string"
                },
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean"
                }
              },
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "description": "Deletes a datasource. **Note:** This API requires an admin account to execute.",
              "id": "cloudsearch.settings.datasources.delete",
              "parameterOrder": [
                "name"
              ]
            },
            "patch": {
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^datasources/[^/]+$",
                  "location": "path",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.",
                  "required": true
                },
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "parameterOrder": [
                "name"
              ],
              "id": "cloudsearch.settings.datasources.patch",
              "description": "Updates a datasource. **Note:** This API requires an admin account to execute.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "path": "v1/settings/{+name}",
              "request": {
                "$ref": "DataSource"
              },
              "httpMethod": "PATCH"
            },
            "list": {
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "Starting index of the results.",
                  "location": "query"
                },
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean"
                },
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "type": "integer",
                  "description": "Maximum number of datasources to fetch in a request. The max value is 1000. The default value is 1000."
                }
              },
              "response": {
                "$ref": "ListDataSourceResponse"
              },
              "path": "v1/settings/datasources",
              "flatPath": "v1/settings/datasources",
              "parameterOrder": [],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "httpMethod": "GET",
              "description": "Lists datasources. **Note:** This API requires an admin account to execute.",
              "id": "cloudsearch.settings.datasources.list"
            }
          }
        },
        "searchapplications": {
          "methods": {
            "list": {
              "parameters": {
                "pageToken": {
                  "description": "The next_page_token value returned from a previous List request, if any. The default value is 10",
                  "location": "query",
                  "type": "string"
                },
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "type": "boolean",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "format": "int32",
                  "description": "The maximum number of items to return."
                }
              },
              "response": {
                "$ref": "ListSearchApplicationsResponse"
              },
              "path": "v1/settings/searchapplications",
              "description": "Lists all search applications. **Note:** This API requires an admin account to execute.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/settings/searchapplications",
              "id": "cloudsearch.settings.searchapplications.list",
              "parameterOrder": []
            },
            "create": {
              "flatPath": "v1/settings/searchapplications",
              "description": "Creates a search application. **Note:** This API requires an admin account to execute.",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [],
              "httpMethod": "POST",
              "request": {
                "$ref": "SearchApplication"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "id": "cloudsearch.settings.searchapplications.create",
              "path": "v1/settings/searchapplications",
              "parameters": {}
            },
            "patch": {
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/settings/{+name}",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
                  "location": "path",
                  "pattern": "^searchapplications/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Updates a search application. **Note:** This API requires an admin account to execute.",
              "id": "cloudsearch.settings.searchapplications.patch",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "SearchApplication"
              }
            },
            "update": {
              "path": "v1/settings/{+name}",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^searchapplications/[^/]+$"
                }
              },
              "description": "Updates a search application. **Note:** This API requires an admin account to execute.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "id": "cloudsearch.settings.searchapplications.update",
              "request": {
                "$ref": "SearchApplication"
              },
              "httpMethod": "PUT",
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "response": {
                "$ref": "Operation"
              }
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the search application to be deleted. Format: applications/{application_id}.",
                  "required": true,
                  "pattern": "^searchapplications/[^/]+$",
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "Deletes a search application. **Note:** This API requires an admin account to execute.",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/settings/{+name}",
              "id": "cloudsearch.settings.searchapplications.delete",
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ]
            },
            "get": {
              "description": "Gets the specified search application. **Note:** This API requires an admin account to execute.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "id": "cloudsearch.settings.searchapplications.get",
              "response": {
                "$ref": "SearchApplication"
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "path": "v1/settings/{+name}",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query",
                  "type": "boolean"
                },
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^searchapplications/[^/]+$",
                  "location": "path",
                  "description": "The name of the search application. Format: searchapplications/{application_id}."
                }
              }
            },
            "reset": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "id": "cloudsearch.settings.searchapplications.reset",
              "httpMethod": "POST",
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "ResetSearchApplicationRequest"
              },
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "pattern": "^searchapplications/[^/]+$",
                  "description": "The name of the search application to be reset. Format: applications/{application_id}.",
                  "type": "string"
                }
              },
              "description": "Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute.",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/settings/{+name}:reset",
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}:reset"
            }
          }
        }
      }
    },
    "indexing": {
      "resources": {
        "datasources": {
          "resources": {
            "items": {
              "methods": {
                "upload": {
                  "id": "cloudsearch.indexing.datasources.items.upload",
                  "httpMethod": "POST",
                  "description": "Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "required": true,
                      "location": "path",
                      "description": "The name of the Item to start a resumable upload. Format: datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes.",
                      "type": "string"
                    }
                  },
                  "path": "v1/indexing/{+name}:upload",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "response": {
                    "$ref": "UploadItemRef"
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:upload",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "StartUploadItemRequest"
                  }
                },
                "index": {
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:index",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "request": {
                    "$ref": "IndexItemRequest"
                  },
                  "httpMethod": "POST",
                  "path": "v1/indexing/{+name}:index",
                  "id": "cloudsearch.indexing.datasources.items.index",
                  "description": "Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "required": true,
                      "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.",
                      "location": "path"
                    }
                  }
                },
                "delete": {
                  "id": "cloudsearch.indexing.datasources.items.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
                  "path": "v1/indexing/{+name}",
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes Item resource for the specified resource name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "version": {
                      "format": "byte",
                      "location": "query",
                      "type": "string",
                      "description": "Required. The incremented version of the item to delete from the index. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations)."
                    },
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                    },
                    "mode": {
                      "type": "string",
                      "enumDescriptions": [
                        "The priority is not specified in the update request. Leaving priority unspecified results in an update failure.",
                        "For real-time updates.",
                        "For changes that are executed after the response is sent back to the caller."
                      ],
                      "location": "query",
                      "description": "Required. The RequestMode for this request.",
                      "enum": [
                        "UNSPECIFIED",
                        "SYNCHRONOUS",
                        "ASYNCHRONOUS"
                      ]
                    },
                    "name": {
                      "description": "Required. The name of the item to delete. Format: datasources/{source_id}/items/{item_id}",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true
                    },
                    "connectorName": {
                      "location": "query",
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "type": "string"
                    }
                  }
                },
                "deleteQueueItems": {
                  "description": "Deletes all items in a queue. This method is useful for deleting stale items. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "path": "v1/indexing/{+name}/items:deleteQueueItems",
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^datasources/[^/]+$",
                      "description": "The name of the Data Source to delete items in a queue. Format: datasources/{source_id}",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:deleteQueueItems",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.indexing.datasources.items.deleteQueueItems",
                  "request": {
                    "$ref": "DeleteQueueItemsRequest"
                  },
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "list": {
                  "path": "v1/indexing/{+name}/items",
                  "response": {
                    "$ref": "ListItemsResponse"
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items",
                  "description": "Lists all or a subset of Item resources. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.indexing.datasources.items.list",
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query"
                    },
                    "debugOptions.enableDebugging": {
                      "type": "boolean",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "location": "query"
                    },
                    "connectorName": {
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "The name of the Data Source to list Items. Format: datasources/{source_id}",
                      "pattern": "^datasources/[^/]+$",
                      "location": "path"
                    },
                    "pageSize": {
                      "format": "int32",
                      "location": "query",
                      "description": "Maximum number of items to fetch in a request. The max value is 1000 when brief is true. The max value is 10 if brief is false. The default value is 10",
                      "type": "integer"
                    },
                    "brief": {
                      "type": "boolean",
                      "location": "query",
                      "description": "When set to true, the indexing system only populates the following fields: name, version, queue. metadata.hash, metadata.title, metadata.sourceRepositoryURL, metadata.objectType, metadata.createTime, metadata.updateTime, metadata.contentLanguage, metadata.mimeType, structured_data.hash, content.hash, itemType, itemStatus.code, itemStatus.processingError.code, itemStatus.repositoryError.type, If this value is false, then all the fields are populated in Item."
                    }
                  }
                },
                "unreserve": {
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "description": "Unreserves all items from a queue, making them all eligible to be polled. This method is useful for resetting the indexing queue after a connector has been restarted. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "httpMethod": "POST",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:unreserve",
                  "request": {
                    "$ref": "UnreserveItemsRequest"
                  },
                  "path": "v1/indexing/{+name}/items:unreserve",
                  "id": "cloudsearch.indexing.datasources.items.unreserve",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^datasources/[^/]+$",
                      "location": "path",
                      "description": "The name of the Data Source to unreserve all items. Format: datasources/{source_id}",
                      "required": true
                    }
                  }
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "description": "Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "id": "cloudsearch.indexing.datasources.items.get",
                  "httpMethod": "GET",
                  "parameters": {
                    "connectorName": {
                      "type": "string",
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "location": "query"
                    },
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "The name of the item to get info. Format: datasources/{source_id}/items/{item_id}"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
                  "path": "v1/indexing/{+name}",
                  "response": {
                    "$ref": "Item"
                  }
                },
                "push": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "required": true,
                      "description": "The name of the item to push into the indexing queue. Format: datasources/{source_id}/items/{ID} This is a required field. The maximum length is 1536 characters."
                    }
                  },
                  "description": "Pushes an item onto a queue for later polling and updating. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:push",
                  "id": "cloudsearch.indexing.datasources.items.push",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Item"
                  },
                  "request": {
                    "$ref": "PushItemRequest"
                  },
                  "path": "v1/indexing/{+name}:push"
                },
                "poll": {
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:poll",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "PollItemsRequest"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^datasources/[^/]+$",
                      "description": "The name of the Data Source to poll items. Format: datasources/{source_id}"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "httpMethod": "POST",
                  "description": "Polls for unreserved items from the indexing queue and marks a set as reserved, starting with items that have the oldest timestamp from the highest priority ItemStatus. The priority order is as follows: ERROR MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other threads cannot create overlapping sets. After handling the reserved items, the client should put items back into the unreserved state, either by calling index, or by calling push with the type REQUEUE. Items automatically become available (unreserved) after 4 hours even if no update or push method is called. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "response": {
                    "$ref": "PollItemsResponse"
                  },
                  "path": "v1/indexing/{+name}/items:poll",
                  "id": "cloudsearch.indexing.datasources.items.poll"
                }
              }
            }
          },
          "methods": {
            "updateSchema": {
              "httpMethod": "PUT",
              "path": "v1/indexing/{+name}/schema",
              "parameters": {
                "name": {
                  "pattern": "^datasources/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "The name of the data source to update Schema. Format: datasources/{source_id}",
                  "required": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "id": "cloudsearch.indexing.datasources.updateSchema",
              "response": {
                "$ref": "Operation"
              },
              "description": "Updates the schema of a data source. This method does not perform incremental updates to the schema. Instead, this method updates the schema by overwriting the entire schema. **Note:** This API requires an admin or service account to execute.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "request": {
                "$ref": "UpdateSchemaRequest"
              }
            },
            "deleteSchema": {
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query",
                  "type": "boolean"
                },
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^datasources/[^/]+$",
                  "location": "path",
                  "description": "The name of the data source to delete Schema. Format: datasources/{source_id}"
                }
              },
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "parameterOrder": [
                "name"
              ],
              "id": "cloudsearch.indexing.datasources.deleteSchema",
              "description": "Deletes the schema of a data source. **Note:** This API requires an admin or service account to execute.",
              "path": "v1/indexing/{+name}/schema",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "response": {
                "$ref": "Operation"
              },
              "httpMethod": "DELETE"
            },
            "getSchema": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "response": {
                "$ref": "Schema"
              },
              "description": "Gets the schema of a data source. **Note:** This API requires an admin or service account to execute.",
              "httpMethod": "GET",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the data source to get Schema. Format: datasources/{source_id}",
                  "required": true,
                  "location": "path",
                  "pattern": "^datasources/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "id": "cloudsearch.indexing.datasources.getSchema",
              "path": "v1/indexing/{+name}/schema"
            }
          }
        }
      }
    }
  },
  "batchPath": "batch",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "version": "v1",
  "schemas": {
    "DateTimePicker": {
      "id": "DateTimePicker",
      "type": "object",
      "properties": {
        "valueMsEpoch": {
          "type": "string",
          "format": "int64",
          "description": "The value to display which can be the default value before user input or previous user input. It is represented in milliseconds (Epoch time). - For DATE_AND_TIME type, the full epoch value is used. - For DATE_ONLY type, only date of the epoch time is used. - For TIME_ONLY type, only time of the epoch time is used. For example, you can set epoch time to 3 * 60 * 60 * 1000 to represent 3am."
        },
        "name": {
          "type": "string",
          "description": "The name of the text field which is used in FormInput, and uniquely identifies this input."
        },
        "timezoneOffsetDate": {
          "description": "The number representing the time-zone offset from UTC, in minutes. If set, the value_ms_epoch will be displayed in the specified time zone. If not set, it will use the user's timezone setting in client side.",
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "description": "The label for the field, which is displayed to the user.",
          "type": "string"
        },
        "type": {
          "description": "The type of the DateTimePicker.",
          "type": "string",
          "enum": [
            "UNSPECIFIED_TYPE",
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "onChange": {
          "$ref": "FormAction",
          "description": "Triggered when the user clicks on the Save, or Clear button from the date / time picker dialog. Will only be triggered if the value changed as a result of the Save / Clear operation."
        }
      }
    },
    "FieldViolation": {
      "properties": {
        "field": {
          "description": "Path of field with violation.",
          "type": "string"
        },
        "description": {
          "description": "The description of the error.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "FieldViolation"
    },
    "ObjectDefinition": {
      "description": "The definition for an object within a data source.",
      "id": "ObjectDefinition",
      "properties": {
        "name": {
          "description": "The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.",
          "type": "string"
        },
        "propertyDefinitions": {
          "description": "The property definitions for the object. The maximum number of elements is 1000.",
          "items": {
            "$ref": "PropertyDefinition"
          },
          "type": "array"
        },
        "options": {
          "description": "The optional object-specific options.",
          "$ref": "ObjectOptions"
        }
      },
      "type": "object"
    },
    "HangoutVideoEventMetadata": {
      "description": "A message representing the Hangout video start/end events in Babel",
      "type": "object",
      "id": "HangoutVideoEventMetadata",
      "properties": {
        "hangoutVideoType": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_HANGOUT_VIDEO_EVENT_TYPE",
            "VIDEO_START",
            "VIDEO_END"
          ]
        }
      }
    },
    "SearchApplicationSessionStats": {
      "properties": {
        "searchSessionsCount": {
          "format": "int64",
          "type": "string",
          "description": "The count of search sessions on the day"
        },
        "date": {
          "description": "The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned.",
          "$ref": "Date"
        }
      },
      "type": "object",
      "id": "SearchApplicationSessionStats"
    },
    "ListQuerySourcesResponse": {
      "properties": {
        "sources": {
          "type": "array",
          "items": {
            "$ref": "QuerySource"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "id": "ListQuerySourcesResponse",
      "type": "object",
      "description": "List sources response."
    },
    "AppsDynamiteSharedDivider": {
      "properties": {},
      "id": "AppsDynamiteSharedDivider",
      "description": "A divider that appears in between widgets.",
      "type": "object"
    },
    "CustomEmojiMetadata": {
      "properties": {
        "customEmoji": {
          "$ref": "AppsDynamiteSharedCustomEmoji"
        }
      },
      "id": "CustomEmojiMetadata",
      "type": "object"
    },
    "QuerySource": {
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Display name of the data source.",
          "type": "string"
        },
        "source": {
          "description": "The name of the source",
          "$ref": "Source"
        },
        "shortName": {
          "description": "A short name or alias for the source. This value can be used with the 'source' operator.",
          "type": "string"
        },
        "operators": {
          "type": "array",
          "items": {
            "$ref": "QueryOperator"
          },
          "description": "List of all operators applicable for this source."
        }
      },
      "description": "List of sources that the user can search using the query API.",
      "id": "QuerySource"
    },
    "NamedProperty": {
      "type": "object",
      "description": "A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`.",
      "properties": {
        "timestampValues": {
          "$ref": "TimestampValues"
        },
        "name": {
          "description": "The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters.",
          "type": "string"
        },
        "enumValues": {
          "$ref": "EnumValues"
        },
        "htmlValues": {
          "$ref": "HtmlValues"
        },
        "integerValues": {
          "$ref": "IntegerValues"
        },
        "dateValues": {
          "$ref": "DateValues"
        },
        "objectValues": {
          "$ref": "ObjectValues"
        },
        "textValues": {
          "$ref": "TextValues"
        },
        "doubleValues": {
          "$ref": "DoubleValues"
        },
        "booleanValue": {
          "type": "boolean"
        }
      },
      "id": "NamedProperty"
    },
    "YoutubeMetadata": {
      "type": "object",
      "description": "Annotation metadata for YouTube artifact.",
      "properties": {
        "id": {
          "description": "YouTube resource ID of the artifact.",
          "type": "string"
        },
        "shouldNotRender": {
          "description": "If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip.",
          "type": "boolean"
        },
        "startTime": {
          "type": "integer",
          "format": "int32",
          "description": "YouTube query parameter for timestamp. YouTube specific flag that allows users to embed time token when sharing a link. This property contains parsed time token in seconds."
        }
      },
      "id": "YoutubeMetadata"
    },
    "AppsDynamiteSharedAppProfile": {
      "id": "AppsDynamiteSharedAppProfile",
      "properties": {
        "name": {
          "type": "string",
          "description": "Displayed user name."
        },
        "avatarUrl": {
          "description": "Displayed user avatar url.",
          "type": "string"
        },
        "avatarEmoji": {
          "type": "string",
          "description": "Displayed user avatar emoji."
        }
      },
      "type": "object",
      "description": "Optional field for apps overriding display info"
    },
    "DriveLocationRestrict": {
      "description": "Drive location search restricts (e.g. \"is:starred\").",
      "type": "object",
      "id": "DriveLocationRestrict",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNSPECIFIED",
            "TRASHED",
            "STARRED"
          ]
        }
      }
    },
    "RoomRenameMetadata": {
      "properties": {
        "newName": {
          "type": "string"
        },
        "prevName": {
          "type": "string",
          "description": "NEXT_TAG: 3"
        }
      },
      "type": "object",
      "id": "RoomRenameMetadata"
    },
    "ConsentedAppUnfurlMetadata": {
      "properties": {
        "clientSpecifiedAppId": {
          "$ref": "UserId",
          "description": "Client specified AppId, which will not be sanitized and is untrusted."
        }
      },
      "id": "ConsentedAppUnfurlMetadata",
      "description": "Annotation metadata app unfurl consent.",
      "type": "object"
    },
    "Segment": {
      "properties": {
        "linkData": {
          "$ref": "LinkData",
          "description": "Type-specific metadata. At most one of these should be populated, and the one that is populated should correspond to the type of the Segment. For LINK type:"
        },
        "userMentionData": {
          "description": "For USER_MENTION type:",
          "$ref": "UserMentionData"
        },
        "type": {
          "enumDescriptions": [
            "A TEXT segment represents plain-text subject to particular formatting constraints (as represented in the \"formatting\" field of the Segment).",
            "A LINE_BREAK segment is simply a placeholder to represent a line break between other segments. The \"text\" variable may be set to a newline as a fallback, but clients that understand this segment type should simply insert a line break without needing to reference any fields.",
            "A LINK segment represents a link to a web entity. The \"text\" field should be used for anchor text. Additional link data should be put in the link_data protobuf.",
            "A USER_MENTION segment represents a reference to a (possibly non-Gaia, possibly off-network) user. The \"text\" field may be populated as a fallback, but information identifying the user should be contained in the user_mention_data protobuf. (The set of fields that are populated in user_mention_data may differ depending on the context in which the segment is viewed, but the interpretation of the fields is uniform. See comments over UserMentionData).",
            "An ALL_USER_MENTION segment represents a reference to all users in the context, that is, the conversation, discussion, or other context containing the segment. For example, an ALL_USER_MENTION segment (\"@all\") can be useful to ping all participants in a conversation if the notification setting of the conversation is not set to ping on normal messages. An ALL_USER_MENTION should be treated as a USER_MENTION for all users who receives the segment.",
            "A HASHTAG segment represents a structured reference to a topic. The \"text\" field should represent display text (e.g. \"#Google\"), and additional metadata should be put in the Segment's hashtag_data field."
          ],
          "enum": [
            "TEXT",
            "LINE_BREAK",
            "LINK",
            "USER_MENTION",
            "ALL_USER_MENTION",
            "HASHTAG"
          ],
          "description": "Type of Segment.",
          "type": "string"
        },
        "hashtagData": {
          "description": "For HASHTAG type:",
          "$ref": "HashtagData"
        },
        "text": {
          "type": "string",
          "description": "Text content of the Segment. As a general rule, this field should contain the actual text that should be rendered in the UI. Thus, for a hashtag, it should be \"#Foo\", and for a link, it should be the display text. Clients that do not understand a particular segment type may use this text, along with the Formatting info below, as a fallback for display. The field is not required -- if all relevant information is carried in other metadata fields and there is no need for a fallback, or it is not practical for a fallback to be provided for any other reason, the field may be left blank. A standard example would be a user reference being transmitted between server layers, where a gaia-ID representation may be sufficient and there is no need for a textual fallback. In such a case, it would be valid and useful - though not required - for servers to compute and populate a fallback on the serving path."
        },
        "formatting": {
          "$ref": "Formatting",
          "description": "Formatting to be applied when rendering the Segment. For all segment types, this is the standard way of representing that the Segment should be rendered in bold, italics, etc."
        }
      },
      "type": "object",
      "id": "Segment"
    },
    "ChatProto": {
      "id": "ChatProto",
      "properties": {
        "chatId": {
          "description": "Chat IDs consist of alphanumeric characters and colons. Currently required.",
          "type": "string"
        },
        "memberType": {
          "description": "The type of Chat members to consider, e.g. \"all members\" vs. \"invitee\" These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See chat.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with chat. Currently required.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Represents the invitees or other users associated with a Babel Chat (see http://goto/babel). Corresponds to GroupType CHAT in //social/graph/storage/proto/data.proto.",
      "type": "object"
    },
    "TrustedResourceUrlProto": {
      "type": "object",
      "properties": {
        "privateDoNotAccessOrElseTrustedResourceUrlWrappedValue": {
          "type": "string",
          "description": "IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message."
        }
      },
      "description": "Message containing a string that is safe to use in all URL contexts in DOM APIs and HTML documents; even where the referred-to resource is interpreted as code, e.g., as the src of a script element.",
      "id": "TrustedResourceUrlProto"
    },
    "AppsDynamiteSharedRetentionSettings": {
      "type": "object",
      "id": "AppsDynamiteSharedRetentionSettings",
      "properties": {
        "state": {
          "enum": [
            "UNKNOWN_RETENTION_STATE",
            "PERMANENT",
            "EPHEMERAL_ONE_DAY"
          ],
          "enumDescriptions": [
            "",
            "The message/topic should be kept permanently.",
            "The message/topic should be kept with a 24-hour TTL."
          ],
          "type": "string",
          "description": "The retention state."
        },
        "expiryTimestamp": {
          "format": "int64",
          "type": "string",
          "description": "The timestamp after which the message/topic should be removed, in microseconds since the epoch, when state == EPHEMERAL_ONE_DAY. The value should not be set in other cases."
        }
      },
      "description": "The settings of retention period of a message or topic."
    },
    "AutoComplete": {
      "id": "AutoComplete",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "AutoCompleteItem"
          }
        }
      }
    },
    "SearchItemsByViewUrlRequest": {
      "properties": {
        "viewUrl": {
          "description": "Specify the full view URL to find the corresponding item. The maximum length is 2048 characters.",
          "type": "string"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "pageToken": {
          "description": "The next_page_token value returned from a previous request, if any.",
          "type": "string"
        }
      },
      "id": "SearchItemsByViewUrlRequest",
      "type": "object"
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention": {
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention",
      "description": "Existence of this attribute indicates that the AF item is for a user mention item.",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "DIRECT",
            "ALL"
          ],
          "enumDescriptions": [
            "Mention type not specified.",
            "Mentioned directly by name.",
            "Mentioned by @all."
          ],
          "type": "string",
          "description": "User mention type"
        }
      }
    },
    "AppsDynamiteSharedMessageIntegrationPayload": {
      "type": "object",
      "properties": {
        "projectNumber": {
          "format": "int64",
          "description": "Pantheon project number used to identify the calling app.",
          "type": "string"
        },
        "tasksMessageIntegrationPayload": {
          "$ref": "AppsDynamiteSharedTasksMessageIntegrationPayload"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "PAYLOAD_TYPE_UNSPECIFIED",
            "TASKS"
          ],
          "description": "An enum indicating which 1P application's payload this is. This field is required to add 1P payload."
        }
      },
      "description": "The payload(restricted to 1P applications) to be stored with a specific message.",
      "id": "AppsDynamiteSharedMessageIntegrationPayload"
    },
    "AppsDynamiteV1ApiCompatV1Field": {
      "description": "A column of text in an attachment. Documentation: - https://api.slack.com/docs/message-attachments",
      "id": "AppsDynamiteV1ApiCompatV1Field",
      "properties": {
        "title": {
          "description": "The heading text, shown in bold.",
          "type": "string"
        },
        "value": {
          "description": "The text value of the field.",
          "type": "string"
        },
        "short": {
          "description": "Whether the field can be shown side-by-side with another field.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedBackendUploadMetadata": {
      "id": "AppsDynamiteSharedBackendUploadMetadata",
      "description": "Metadata used only in Dynamite backend for uploaded attachments.",
      "type": "object",
      "properties": {
        "contentName": {
          "type": "string",
          "description": "The original file name for the content, not the full path."
        },
        "uploadIp": {
          "description": "User IP address at upload time. Ex. \"123.1.2.3\". Used by Ares abuse scanning.",
          "type": "string"
        },
        "uploadTimestampUsec": {
          "type": "string",
          "description": "Timestamp of when user finished uploading the content.",
          "format": "int64"
        },
        "virusScanResult": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "The document violates Google's policy for executables and archives."
          ],
          "description": "Result for a virus scan.",
          "enum": [
            "UNKNOWN_VIRUS_SCAN_RESULT",
            "CLEAN",
            "INFECTED",
            "ERROR",
            "POLICY_VIOLATION"
          ],
          "type": "string"
        },
        "contentSize": {
          "description": "Scotty reported content size by default. http://google3/uploader/agent/scotty_agent.proto?l=101&rcl=140889785",
          "type": "string",
          "format": "int64"
        },
        "videoThumbnailBlobId": {
          "type": "string",
          "description": "Full Blobstore ID for the video thumbnail."
        },
        "contentType": {
          "type": "string",
          "description": "Type is from Scotty's best_guess by default: http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785"
        },
        "dlpScanOutcome": {
          "enum": [
            "SCAN_UNKNOWN_OUTCOME",
            "SCAN_SUCCEEDED_NO_VIOLATION",
            "SCAN_SUCCEEDED_BLOCK",
            "SCAN_SUCCEEDED_WARN",
            "SCAN_SUCCEEDED_AUDIT_ONLY",
            "SCAN_FAILURE_EXCEPTION",
            "SCAN_FAILURE_TIMEOUT",
            "SCAN_FAILURE_ALL_RULES_FAILED",
            "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS",
            "SCAN_SKIPPED_EXPERIMENT_DISABLED",
            "SCAN_SKIPPED_CONSUMER",
            "SCAN_SKIPPED_NON_HUMAN_USER",
            "SCAN_SKIPPED_NO_MESSAGE",
            "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING",
            "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE",
            "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION",
            "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK",
            "SCAN_SUCCEEDED_WITH_FAILURES_WARN",
            "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
          ],
          "type": "string",
          "description": "The results of the Data Loss Prevention (DLP) scan of the attachment. DEPRECATED: use dlp_scan_summary instead.",
          "enumDescriptions": [
            "",
            "This means no violation is detected on the given message/attachment.",
            "Violation is detected. The message/attachment will be blocked (or deleted if this happens in failure recovery), the user will be warned, and the violation will be logged to BIP.",
            "Violation is detected. The user will be warned, and the violation will be logged to BIP.",
            "Violation is detected and will be logged to BIP (no user-facing action performed).",
            "Rule fetch and evaluation were attempted but an exception occurred.",
            "Rule fetch and evaluation were attempted but the scanning timed out.",
            "Rule fetch completed and evaluation were attempted, but all of the rules failed to be evaluated.",
            "An IllegalStateException is thrown when executing DLP on attachments. This could happen if the space row is missing.",
            "Rule fetch and evaluation is skipped because DLP is not enabled for the user.",
            "Rule fetch and evaluation are skipped because the user sending message is consumer.",
            "Rule fetch and evaluation are skipped because the user sending message is a non-human user (i.e. a bot).",
            "Rule fetch and evaluation are skipped because there is no message to scan. Deprecated: this should not happen since there must be message or attachment for DLP scan.",
            "Rule fetch and evaluation are skipped because the user has acknowledged the warning on the message that triggered the Warn violation and sent the message anyway.",
            "Scanning was skipped because the message originated from Interop or Babel.",
            "Rule fetch happened, but rule evaluation is skipped because no rules were found.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given action params.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given trigger.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned permanent failure while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned an empty response while converting the attachment to text.",
            "Rules were fetched but some evaluations failed. No violation was found in the rules that were successfully evaluated.",
            "Rules were fetched but some evaluations failed. A blocking violation was found in the rules that were successfully evaluated. The message/attachment will be blocked, the user will be notified, and the violation will be logged to BIP. A blocking violation takes precedence over all other violation types.",
            "Rules were fetched but some evaluations failed. A warn violation was found in the rules that were successfully evaluated. The user will be warned, and the violation will be logged to BIP.",
            "Rules were fetched but some evaluations failed. An audit-only violation was found in the rules that were successfully evaluated. The violation will be logged to BIP (no user-facing action performed)."
          ]
        },
        "groupId": {
          "$ref": "GroupId",
          "description": "GroupId to which this attachment is uploaded."
        },
        "blobPath": {
          "description": "Blobstore path for the uploaded attachment",
          "type": "string"
        },
        "originalDimension": {
          "$ref": "AppsDynamiteSharedDimension",
          "description": "Original dimension of the content. Only set for image attachments."
        },
        "videoId": {
          "type": "string",
          "description": "VideoID of the video attachments. This ID shall meets the Youtube ID format of 16 hex characters. For example, '4c14b8825af6059b' is a valid ID."
        },
        "quoteReplyMessageId": {
          "$ref": "MessageId",
          "description": "The message id of a quote reply referencing this attachment. When present, this attachment has been quoted in a reply message. Normally, the attachment is fetched through the message id in the blob_path, but in the case of a quote reply, the blob_path would contain the quoted message id. Thus this message id field is needed to fetch the quote reply message instead. This field is conditionally populated at read time for quotes and never persisted in storage. See go/message-quoting-attachments for more context."
        },
        "sha256": {
          "type": "string",
          "format": "byte",
          "description": "The SHA256 hash of the attachment bytes."
        },
        "dlpScanSummary": {
          "description": "Summary of a Data Loss Prevention (DLP) scan of the attachment. Attachments are evaluated in the backend when they are uploaded.",
          "$ref": "DlpScanSummary"
        }
      }
    },
    "VoicePhoneNumber": {
      "properties": {
        "i18nData": {
          "$ref": "VoicePhoneNumberI18nData",
          "description": "Additional data that could be added using the libphonenumber API."
        },
        "e164": {
          "description": "E.164 formatted full phone number with leading +. This field also represents encoded form of short telephone numbers in E.164 format. e.g. \"911\" is encoded as \"+1911\".",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents both long and short phone number that can be called or texted. Short telephone numbers are used to reach local services. Short numbers and their purpose differ from country to country. These numbers in US are in the form of N11 which is a three-digit abbreviated dialing telephone number.",
      "id": "VoicePhoneNumber"
    },
    "AppsDynamiteSharedChatItemActivityInfo": {
      "type": "object",
      "properties": {
        "feedItemNudge": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemNudge"
        },
        "feedItemThreadReply": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply"
        },
        "feedItemReactions": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemReactions"
        },
        "feedItemUserMention": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention"
        }
      },
      "id": "AppsDynamiteSharedChatItemActivityInfo"
    },
    "TextButton": {
      "type": "object",
      "id": "TextButton",
      "properties": {
        "text": {
          "type": "string",
          "description": "Text color can be set via HTML markup."
        },
        "onClick": {
          "$ref": "OnClick"
        },
        "disabled": {
          "type": "boolean"
        },
        "backgroundColor": {
          "description": "Optional color of the button's background in RAISE mode. The default is the secondary color from addon's manifest.",
          "type": "string"
        },
        "style": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Simple text button with ripple touch feedback.",
            "Button with solid background."
          ],
          "enum": [
            "UNSPECIFIED",
            "TEXT",
            "FILLED"
          ]
        },
        "altText": {
          "type": "string",
          "description": "The alternative text used for accessibility Next field number: 7."
        }
      }
    },
    "StoredParticipantId": {
      "type": "object",
      "id": "StoredParticipantId",
      "properties": {
        "gaiaId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ResultCounts": {
      "description": "Result count information",
      "id": "ResultCounts",
      "properties": {
        "sourceResultCounts": {
          "items": {
            "$ref": "SourceResultCount"
          },
          "description": "Result count information for each source with results.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChatConserverDynamitePlaceholderMetadataDeleteMetadata": {
      "description": "A message was deleted in Dynamite.",
      "id": "ChatConserverDynamitePlaceholderMetadataDeleteMetadata",
      "type": "object",
      "properties": {}
    },
    "AppsDynamiteSharedGroupVisibility": {
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "UNKNOWN",
            "PRIVATE",
            "PUBLIC"
          ],
          "type": "string",
          "enumDescriptions": [
            "Do not use.",
            "Explicitly invited users may join the room.",
            "Anyone in the domain may join the room."
          ]
        }
      },
      "id": "AppsDynamiteSharedGroupVisibility"
    },
    "SelectionControl": {
      "id": "SelectionControl",
      "type": "object",
      "properties": {
        "onChange": {
          "$ref": "FormAction",
          "description": "If specified, form is submitted when selection changed. If not specified, developer will need to specify a separate button."
        },
        "items": {
          "description": "For radio button, at most one of the items will be selected.",
          "type": "array",
          "items": {
            "$ref": "SelectionItem"
          }
        },
        "name": {
          "description": "The name of the text field which is will be used in FormInput.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ],
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "Label used to be displayed ahead of the selection control. It is optional."
        }
      }
    },
    "CallInfo": {
      "properties": {
        "mediaBackendInfo": {
          "description": "Output only. Information about the media backend for the currently ongoing conference in the meeting space. The media backend information will only be filled in for clients that are supposed to present the information. The information should be displayed in a debug panel and is only intended for internal debugging purposes. If the string is empty nothing should be displayed about the media backend.",
          "type": "string",
          "readOnly": true
        },
        "viewerCount": {
          "format": "int32",
          "description": "The number of devices viewing the conference - MeetingDevices that are in VIEWER role and JOINED state in the conference.",
          "type": "integer"
        },
        "calendarEventId": {
          "type": "string",
          "description": "Output only. The calendar event ID of a Google Calendar event that the meeting space is associated with. If the meeting space is not associated with an event in Google Calendar, this field is empty. For recurring events, it refers to the recurring instance associated with the current call, as determined by the server.",
          "readOnly": true
        },
        "transcriptionSessionInfo": {
          "description": "Information about active transcription session in the ongoing conference.",
          "$ref": "TranscriptionSessionInfo"
        },
        "recordingInfo": {
          "$ref": "RecordingInfo",
          "description": "Deprecated, use RecordingSessionInfo instead. Info about recording for this conference. This will always be set in server responses, with a valid recording status. This is superseded by streaming_sessions field, which contains the same information about this recording as well as additional information about other application type at the same time. This will be deprecated and removed at some point."
        },
        "organizationName": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The name or description of the organization or domain that the organizer belongs to. The expected use of this in clients is to present messages like \"John Doe (outside of Google.com) is trying to join this call\", where \"Google.com\" is the organization name. The field will be empty if the organization name could not be determined, possibly because of a backend error."
        },
        "recordingSessionInfo": {
          "$ref": "RecordingSessionInfo",
          "description": "Information about active recording session in the ongoing conference."
        },
        "maxJoinedDevices": {
          "format": "int32",
          "readOnly": true,
          "description": "Output only. The maximum number of devices that may be in the joined state simultaneously in this conference. This can be used by clients to guess whether it will be possible to join, but the only way to know is to try to join. It can also be used to inform users about the limit that is in effect. This limit is normally set when the conference is created and not changed during the lifetime of the conference. But there are some cases where it may change, so clients should be aware that the information may be stale.",
          "type": "integer"
        },
        "streamingSessions": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "StreamingSessionInfo"
          },
          "description": "Output only. Info about streaming sessions (recording or broadcast) for this conference. This should contain all active sessions. Currently, it's guaranteed to have at most one recording and at most one broadcast (at most two sessions in total). For each application type (recording or broadcast), latest inactive session is included if there's no active one."
        },
        "youTubeBroadcastSessionInfos": {
          "type": "array",
          "description": "Information about active YouTube broadcast sessions in the ongoing conference.",
          "items": {
            "$ref": "YouTubeBroadcastSessionInfo"
          }
        },
        "abuseReportingConfig": {
          "$ref": "AbuseReportingConfig",
          "description": "Abuse reporting configuration for the ongoing conference."
        },
        "paygateInfo": {
          "$ref": "PaygateInfo",
          "description": "Paygate information to clients."
        },
        "artifactOwner": {
          "description": "Output only. Display name of the owner of artifacts generated in this conference. The expected use of this in clients is to present info like \"This recording will be sent to John Doe's Drive\". This field can be empty if preferred display name determination fails for any reason.",
          "readOnly": true,
          "$ref": "UserDisplayInfo"
        },
        "presenter": {
          "$ref": "Presenter",
          "description": "The current presenter in the call, or unset if there is no current presenter. Clients can set this to change the presenter."
        },
        "collaboration": {
          "description": "The current collaboration session, or unset if no collaboration is in progress.",
          "$ref": "Collaboration"
        },
        "attachedDocuments": {
          "readOnly": true,
          "description": "Output only. Documents attached to an ongoing conference.",
          "type": "array",
          "items": {
            "$ref": "DocumentInfo"
          }
        },
        "cseInfo": {
          "$ref": "CseInfo",
          "description": "CSE information for the ongoing conference."
        },
        "coActivity": {
          "description": "The current co-activity session, or unset if there is none in progress. A co-activity session can be initiated by devices in JOINED state . Initiator of the co-activity is expected to populate this field to start the session. Once clients detect that the co-activity has finished, any JOINED device can clear this field to end the co-activity session. In the case of switching activities, the initiator of the new activity merely needs to override this with the new co-activity data, and all connected clients are expected to handle the transition gracefully.",
          "$ref": "CoActivity"
        },
        "broadcastSessionInfo": {
          "$ref": "BroadcastSessionInfo",
          "description": "Information about active broadcast session in the ongoing conference."
        },
        "settings": {
          "description": "Settings of the ongoing conference.",
          "$ref": "CallSettings"
        },
        "availableReactions": {
          "readOnly": true,
          "items": {
            "$ref": "ReactionInfo"
          },
          "description": "Output only. The set of reactions that clients are allowed to send and can expect to receive. Note that a device in the conference should have the MAY_SEND_REACTIONS privilege to be able to send reactions.",
          "type": "array"
        },
        "chatConfig": {
          "$ref": "ChatConfig",
          "description": "Configuration for the chat for this conference."
        }
      },
      "description": "Contains information regarding an ongoing conference (aka call) for a meeting space.",
      "id": "CallInfo",
      "type": "object"
    },
    "RbacSubjectProto": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Format \"username\" without \"@domain\", e.g., \"bogdand\"."
        }
      },
      "description": "Principal associated with a given RBAC subject. This principal is used by Sphinx Provisioning Service for RBAC (go/cedi-auth) provisionable (go/sphinx-rbacz-design).",
      "id": "RbacSubjectProto"
    },
    "GoogleChatV1WidgetMarkupTextButton": {
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupTextButton",
      "description": "A button with text and onclick action.",
      "properties": {
        "onClick": {
          "$ref": "GoogleChatV1WidgetMarkupOnClick",
          "description": "The onclick action of the button."
        },
        "text": {
          "type": "string",
          "description": "The text of the button."
        }
      }
    },
    "AckInfo": {
      "id": "AckInfo",
      "type": "object",
      "properties": {
        "unackedDeviceCount": {
          "description": "Output only. Number of meeting devices that have not acked yet.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "unackedDeviceIds": {
          "readOnly": true,
          "type": "array",
          "description": "Output only. IDs of meeting devices (at most ten are provided) that have not acked yet.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Information about how devices in a meeting have acked for a session/operation."
    },
    "ItemAcl": {
      "description": "Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).",
      "properties": {
        "owners": {
          "type": "array",
          "items": {
            "$ref": "Principal"
          },
          "description": "Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5."
        },
        "readers": {
          "items": {
            "$ref": "Principal"
          },
          "description": "List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.",
          "type": "array"
        },
        "deniedReaders": {
          "type": "array",
          "items": {
            "$ref": "Principal"
          },
          "description": "List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100."
        },
        "inheritAclFrom": {
          "type": "string",
          "description": "The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters."
        },
        "aclInheritanceType": {
          "description": "Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.",
          "enum": [
            "NOT_APPLICABLE",
            "CHILD_OVERRIDE",
            "PARENT_OVERRIDE",
            "BOTH_PERMIT"
          ],
          "type": "string",
          "enumDescriptions": [
            "The default value when this item does not inherit an ACL. Use NOT_APPLICABLE when inheritAclFrom is empty. An item without ACL inheritance can still have ACLs supplied by its own readers and deniedReaders fields.",
            "During an authorization conflict, the ACL of the child item determines its read access.",
            "During an authorization conflict, the ACL of the parent item specified in the inheritAclFrom field determines read access.",
            "Access is granted only if this item and the parent item specified in the inheritAclFrom field both permit read access."
          ]
        }
      },
      "id": "ItemAcl",
      "type": "object"
    },
    "RequiredMessageFeaturesMetadata": {
      "description": "A list of capabilities that are used in this message.",
      "properties": {
        "requiredFeatures": {
          "type": "array",
          "items": {
            "enum": [
              "REQUIRED_FEATURE_UNSPECIFIED",
              "REQUIRED_FEATURE_MESSAGE_QUOTING",
              "REQUIRED_FEATURE_TOMBSTONES_IN_DMS_AND_UFRS"
            ],
            "enumDescriptions": [
              "",
              "",
              ""
            ],
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "RequiredMessageFeaturesMetadata"
    },
    "SlashCommandMetadata": {
      "id": "SlashCommandMetadata",
      "description": "Annotation metadata for slash commands (/).",
      "properties": {
        "argumentsHint": {
          "type": "string",
          "description": "Hint string for the arguments expected by the slash command."
        },
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "Unique id for the slash command."
        },
        "commandName": {
          "type": "string",
          "description": "Name of the slash command."
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "INVOKE",
            "FAILED_TO_ADD"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "If a bot is added by a Slash Command, it means the bot was invoked by the user but hasn't yet been added to the group. Attaching an ADD annotation both add and invoke the bot.",
            "",
            "Server-generated slash command metadata, for clients to strikethrough."
          ]
        },
        "triggersDialog": {
          "type": "boolean",
          "description": "Whether or not this slash command should trigger a dialog."
        },
        "id": {
          "$ref": "UserId",
          "description": "ID of the bot which owns the slash command."
        }
      },
      "type": "object"
    },
    "DatePropertyOptions": {
      "type": "object",
      "id": "DatePropertyOptions",
      "description": "The options for date properties.",
      "properties": {
        "operatorOptions": {
          "$ref": "DateOperatorOptions",
          "description": "If set, describes how the date should be used as a search operator."
        }
      }
    },
    "AppsDynamiteSharedTextParagraph": {
      "id": "AppsDynamiteSharedTextParagraph",
      "type": "object",
      "description": "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text that's shown in the widget."
        }
      }
    },
    "Formatting": {
      "type": "object",
      "description": "Formatting information for a segment.",
      "id": "Formatting",
      "properties": {
        "underline": {
          "type": "boolean"
        },
        "bold": {
          "type": "boolean"
        },
        "style": {
          "enumDescriptions": [
            "This represents a style that is unknown (e.g. a new style was introduced but not supported by older mobile app versions) and should generally not be used as a value in a proto. If the segment does not need to be rendered with a special style, the 'style' field should simply be left unset. A reasonable fallback for an unknown style is to render the segment in the default style.",
            "The most important heading to the least important heading.",
            "",
            "",
            ""
          ],
          "description": "If set, this indicates that the segment should be rendered with the specified style. The absence of an explicit style represents \"no style\", i.e. the segment can be rendered with the default style chosen by the application.",
          "type": "string",
          "enum": [
            "UNKNOWN_STYLE",
            "HEADING_1",
            "HEADING_2",
            "HEADING_3",
            "HEADING_4"
          ]
        },
        "strikethrough": {
          "type": "boolean"
        },
        "italics": {
          "type": "boolean"
        },
        "highlight": {
          "type": "boolean",
          "description": "This indicates that the segment should be rendered as highlighted or visually emphasized."
        }
      }
    },
    "Schema": {
      "properties": {
        "operationIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "IDs of the Long Running Operations (LROs) currently running for this schema. After modifying the schema, wait for operations to complete before indexing additional content."
        },
        "objectDefinitions": {
          "description": "The list of top-level objects for the data source. The maximum number of elements is 10.",
          "items": {
            "$ref": "ObjectDefinition"
          },
          "type": "array"
        }
      },
      "id": "Schema",
      "type": "object",
      "description": "The schema definition for a data source."
    },
    "AppsDynamiteSharedOrganizationInfoCustomerInfo": {
      "id": "AppsDynamiteSharedOrganizationInfoCustomerInfo",
      "properties": {
        "customerId": {
          "$ref": "CustomerId"
        }
      },
      "type": "object"
    },
    "PersonalLabelTag": {
      "description": "An individual instance (or \"tag\") of a label configured as a personal type that's associated with a message.",
      "id": "PersonalLabelTag",
      "type": "object",
      "properties": {
        "labelId": {
          "type": "string",
          "description": "A string ID representing the label. Possible ID values are documented at go/chat-labels-howto:ids. Examples: \"^t\" for \"Starred\", \"^nu\" for \"Nudged\"."
        }
      }
    },
    "ListDataSourceResponse": {
      "id": "ListDataSourceResponse",
      "properties": {
        "sources": {
          "items": {
            "$ref": "DataSource"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      },
      "type": "object"
    },
    "UpdateSchemaRequest": {
      "type": "object",
      "properties": {
        "schema": {
          "description": "The new schema for the source.",
          "$ref": "Schema"
        },
        "validateOnly": {
          "description": "If true, the schema will be checked for validity, but will not be registered with the data source, even if valid.",
          "type": "boolean"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "id": "UpdateSchemaRequest"
    },
    "InviteAcceptedEvent": {
      "type": "object",
      "id": "InviteAcceptedEvent",
      "properties": {
        "participantId": {
          "items": {
            "$ref": "StoredParticipantId"
          },
          "type": "array"
        }
      }
    },
    "AppsDynamiteSharedImage": {
      "properties": {
        "onClick": {
          "$ref": "AppsDynamiteSharedOnClick"
        },
        "imageUrl": {
          "description": "An image URL.",
          "type": "string"
        },
        "altText": {
          "description": "The alternative text of this image, used for accessibility.",
          "type": "string"
        }
      },
      "description": "An image that is specified by a URL and can have an onClick action.",
      "id": "AppsDynamiteSharedImage",
      "type": "object"
    },
    "AclInfo": {
      "id": "AclInfo",
      "description": "Next tag: 4",
      "type": "object",
      "properties": {
        "scope": {
          "type": "string",
          "enumDescriptions": [
            "Explicit set of people and groups.",
            "Anybody at the same domain with the link.",
            "Now it works only for google.com. Anybody at the same domain. Now it works only",
            "for google.com. Anybody with the link.",
            "Anybody.",
            "Special tag to indicate TeamDrive scope."
          ],
          "enum": [
            "LIMITED",
            "DASHER_DOMAIN_WITH_LINK",
            "DASHER_DOMAIN",
            "PUBLIC_WITH_LINK",
            "PUBLIC",
            "TEAM_DRIVE"
          ],
          "description": "The scope to which the content was shared."
        },
        "usersCount": {
          "format": "int32",
          "type": "integer",
          "description": "Number of users which have at least read access to the document."
        },
        "groupsCount": {
          "description": "Number of groups which have at least read access to the document.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ContactGroupProto": {
      "description": "A group of contacts for a given user, as described in http://cs/p#google3/focus/backend/proto/backend.proto Historically (and in still-existing ACLs), this was used to represent Google+ circles as well as contact groups, but this use is now deprecated. New code should use the CIRCLE principal type to represent Google+ circles.",
      "type": "object",
      "id": "ContactGroupProto",
      "properties": {
        "ownerGaiaId": {
          "type": "string",
          "format": "int64"
        },
        "groupId": {
          "type": "string",
          "format": "int64",
          "description": "Group ID is unique only relative to the owner's Gaia ID."
        },
        "requiredConsistencyTimestampUsec": {
          "description": "If present, then tests for membership in this ContactGroup must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this group supports checking consistency timestamps. For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "LdapGroupProto": {
      "properties": {
        "groupName": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "LdapGroupProto"
    },
    "AuditLoggingSettings": {
      "id": "AuditLoggingSettings",
      "type": "object",
      "description": "Represents the settings for Cloud audit logging",
      "properties": {
        "logDataWriteActions": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc."
        },
        "logAdminReadActions": {
          "description": "Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc.",
          "type": "boolean"
        },
        "project": {
          "description": "The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}",
          "type": "string"
        },
        "logDataReadActions": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc."
        }
      }
    },
    "Roster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "rosterGaiaKey": {
          "type": "string",
          "description": "Roster gaia key, usually an email address. Set in looking up rosters response."
        },
        "membershipCount": {
          "format": "int32",
          "type": "integer"
        },
        "avatarUrl": {
          "type": "string"
        },
        "id": {
          "$ref": "RosterId"
        },
        "rosterState": {
          "type": "string",
          "enum": [
            "ROSTER_STATE_UNKNOWN",
            "ROSTER_ACTIVE",
            "ROSTER_DELETED"
          ],
          "description": "Roster deletion state - considered active unless set to deleted",
          "enumDescriptions": [
            "",
            "Roster is active",
            "Roster deleted"
          ]
        }
      },
      "description": "Roster profile information.",
      "id": "Roster"
    },
    "AppsDynamiteV1ApiCompatV1Action": {
      "properties": {
        "style": {
          "type": "string",
          "description": "Button style (\"default\", \"primary\", or \"danger\")."
        },
        "confirm": {
          "description": "Confirmation dialog config.",
          "$ref": "AppsDynamiteV1ApiCompatV1ActionConfirm"
        },
        "value": {
          "type": "string",
          "description": "Payload for this action. Will be sent to the action handler along with name."
        },
        "type": {
          "type": "string",
          "description": "Action type - currently only \"button\"."
        },
        "text": {
          "description": "User-facing label for the action.",
          "type": "string"
        },
        "name": {
          "description": "Unique identifier for this action.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AppsDynamiteV1ApiCompatV1Action",
      "description": "Interactive objects inside a message. Documentation: - https://api.slack.com/docs/message-buttons"
    },
    "YouTubeBroadcastStats": {
      "properties": {
        "estimatedViewerCount": {
          "format": "int64",
          "description": "Estimated concurrent viewer count.",
          "type": "string"
        }
      },
      "id": "YouTubeBroadcastStats",
      "description": "Statistics of the YouTube broadcast session.",
      "type": "object"
    },
    "AppsDynamiteSharedWidget": {
      "properties": {
        "dateTimePicker": {
          "description": "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```",
          "$ref": "AppsDynamiteSharedDateTimePicker"
        },
        "decoratedText": {
          "$ref": "AppsDynamiteSharedDecoratedText",
          "description": "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"heba.salam@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_heba_salam\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```"
        },
        "divider": {
          "$ref": "AppsDynamiteSharedDivider",
          "description": "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"
        },
        "horizontalAlignment": {
          "type": "string",
          "description": "The horizontal alignment of this widget.",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ]
        },
        "textParagraph": {
          "description": "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```",
          "$ref": "AppsDynamiteSharedTextParagraph"
        },
        "image": {
          "description": "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/heba_salam.png\" \"altText\": \"Avatar for Heba Salam\" } ```",
          "$ref": "AppsDynamiteSharedImage"
        },
        "selectionInput": {
          "$ref": "AppsDynamiteSharedSelectionInput",
          "description": "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```"
        },
        "buttonList": {
          "description": "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```",
          "$ref": "AppsDynamiteSharedButtonList"
        },
        "columns": {
          "$ref": "AppsDynamiteSharedColumns",
          "description": "Displays a single row of columns with widgets stacked vertically in each column. For example, the following JSON creates a 2 column widget each containing a single item. ``` \"columns\": { \"wrapStyle\": \"WRAP\", \"columnItems\": [ { \"horizontalSizeStyle\": \"FILL_AVAILABLE_SPACE\", \"horizontalAlignment\": \"CENTER\", \"verticalAlignment\" : \"CENTER\", \"widgets\": [ { \"textParagraph\": { \"text\": \"First column text paragraph\", } } ] }, { \"horizontalSizeStyle\": \"FILL_AVAILABLE_SPACE\", \"horizontalAlignment\": \"CENTER\", \"verticalAlignment\" : \"CENTER\", \"widgets\": [ { \"textParagraph\": { \"text\": \"Second column text paragraph\", } } ] }, ] } } ```"
        },
        "textInput": {
          "$ref": "AppsDynamiteSharedTextInput",
          "description": "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```"
        },
        "grid": {
          "$ref": "AppsDynamiteSharedGrid",
          "description": "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```"
        }
      },
      "id": "AppsDynamiteSharedWidget",
      "type": "object",
      "description": "A widget is a UI element that presents texts, images, etc."
    },
    "AppsDynamiteSharedTasksAnnotationDataDeletionChange": {
      "id": "AppsDynamiteSharedTasksAnnotationDataDeletionChange",
      "properties": {},
      "type": "object"
    },
    "AppsDynamiteSharedDecoratedTextSwitchControl": {
      "id": "AppsDynamiteSharedDecoratedTextSwitchControl",
      "type": "object",
      "properties": {
        "selected": {
          "type": "boolean",
          "description": "If the switch is selected."
        },
        "name": {
          "type": "string",
          "description": "The name of the switch widget that's used in formInput."
        },
        "controlType": {
          "enum": [
            "SWITCH",
            "CHECKBOX",
            "CHECK_BOX"
          ],
          "enumDescriptions": [
            "",
            "Deprecated in favor of `CHECK_BOX`.",
            ""
          ],
          "type": "string",
          "description": "The control type, either switch or checkbox."
        },
        "onChangeAction": {
          "description": "The action when the switch state is changed.",
          "$ref": "AppsDynamiteSharedAction"
        },
        "value": {
          "description": "The value is what is passed back in the callback.",
          "type": "string"
        }
      }
    },
    "Button": {
      "type": "object",
      "properties": {
        "imageButton": {
          "$ref": "ImageButton"
        },
        "textButton": {
          "$ref": "TextButton"
        }
      },
      "id": "Button"
    },
    "QuerySuggestion": {
      "type": "object",
      "description": "This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.",
      "id": "QuerySuggestion",
      "properties": {}
    },
    "UserMentionData": {
      "description": "Person metadata, for USER_MENTION segments. Should always contain at least one of user_gaia_id, user_id, email or user. The exact set of populated fields may differ depending on the context and the level in the serving stack; for example, emails will be elided on the viewing path. But as a general rule, a proto having any one of the four is valid, subject to the standard constraints of the applied annotations -- that is, communication between servers and clients will ignore jspb.ignore fields, and communication between servers and other servers (or between servers and storage) will ignore client_only fields. For more on the annotations, see the comments in social/common/segment_annotations.proto",
      "id": "UserMentionData",
      "properties": {
        "userId": {
          "description": "An obfuscated gaia ID:",
          "type": "string"
        },
        "userGaiaId": {
          "format": "int64",
          "description": "An unobfuscated gaia ID:",
          "type": "string"
        },
        "user": {
          "description": "If the principal is backed by a gaia id, DO NOT use this field. Use user_gaia_id/user_id fields instead.",
          "$ref": "PrincipalProto"
        },
        "email": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BooleanPropertyOptions": {
      "description": "The options for boolean properties.",
      "id": "BooleanPropertyOptions",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the boolean should be used as a search operator.",
          "$ref": "BooleanOperatorOptions"
        }
      },
      "type": "object"
    },
    "GroupId": {
      "id": "GroupId",
      "type": "object",
      "description": "Id representing a group that could be a space, a chat, or a direct message space. Which ID is set here will determine which group",
      "properties": {
        "dmId": {
          "$ref": "DmId",
          "description": "Unique, immutable ID of the Direct Message Space"
        },
        "spaceId": {
          "$ref": "SpaceId",
          "description": "Unique, immutable ID of the Space"
        }
      }
    },
    "EmailOwnerProto": {
      "id": "EmailOwnerProto",
      "description": "Represents a verified owner of the given email address. Note that a single address may have many owners, and a single user may own many addresses. (All lower-case, in display form -- see com.google.gaia.client.GaiaEmail)",
      "properties": {
        "email": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CloudPrincipalProto": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Format: \"{identity-pool}:{subject}#\" Details: go/cloud-principal-identifiers"
        }
      },
      "id": "CloudPrincipalProto",
      "description": "Principal associated with a Cloud Principal representing third party user.",
      "type": "object"
    },
    "TransientData": {
      "properties": {},
      "description": "Transient generic data that will not be saved on the server.",
      "id": "TransientData",
      "type": "object"
    },
    "UpdateDataSourceRequest": {
      "properties": {
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "source": {
          "$ref": "DataSource"
        }
      },
      "id": "UpdateDataSourceRequest",
      "type": "object"
    },
    "OpenLink": {
      "type": "object",
      "id": "OpenLink",
      "properties": {
        "url": {
          "type": "string"
        },
        "openAs": {
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ]
        },
        "loadIndicator": {
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "NONE",
            "SPINNER"
          ],
          "description": "Next available ID: 5",
          "type": "string"
        },
        "onClose": {
          "enum": [
            "NOTHING",
            "RELOAD_ADD_ON"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        }
      }
    },
    "GetCustomerSearchApplicationStatsResponse": {
      "type": "object",
      "properties": {
        "stats": {
          "type": "array",
          "items": {
            "$ref": "CustomerSearchApplicationStats"
          },
          "description": "Search application stats by date."
        },
        "averageSearchApplicationCount": {
          "description": "Average search application count for the given date range.",
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Response format for search application stats for a customer.",
      "id": "GetCustomerSearchApplicationStatsResponse"
    },
    "AppsDynamiteSharedDecoratedText": {
      "properties": {
        "startIcon": {
          "description": "The icon displayed in front of the text.",
          "$ref": "AppsDynamiteSharedIcon"
        },
        "endIcon": {
          "description": "An icon displayed after the text.",
          "$ref": "AppsDynamiteSharedIcon"
        },
        "text": {
          "description": "Required. The main widget formatted text. See Text formatting for details.",
          "type": "string"
        },
        "switchControl": {
          "$ref": "AppsDynamiteSharedDecoratedTextSwitchControl",
          "description": "A switch widget can be clicked to change its state or trigger an action."
        },
        "icon": {
          "$ref": "AppsDynamiteSharedIcon",
          "description": "Deprecated in favor of start_icon."
        },
        "wrapText": {
          "type": "boolean",
          "description": "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated."
        },
        "button": {
          "description": "A button that can be clicked to trigger an action.",
          "$ref": "AppsDynamiteSharedButton"
        },
        "topLabel": {
          "description": "The formatted text label that shows above the main text.",
          "type": "string"
        },
        "bottomLabel": {
          "description": "The formatted text label that shows below the main text.",
          "type": "string"
        },
        "onClick": {
          "description": "Only the top and bottom label and content region are clickable.",
          "$ref": "AppsDynamiteSharedOnClick"
        }
      },
      "id": "AppsDynamiteSharedDecoratedText",
      "type": "object",
      "description": "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text."
    },
    "AppsDynamiteSharedButtonList": {
      "description": "A list of buttons layed out horizontally.",
      "id": "AppsDynamiteSharedButtonList",
      "properties": {
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteSharedButton"
          }
        }
      },
      "type": "object"
    },
    "QueryItem": {
      "type": "object",
      "id": "QueryItem",
      "properties": {
        "isSynthetic": {
          "type": "boolean",
          "description": "True if the text was generated by means other than a previous user search."
        }
      },
      "description": "Information relevant only to a query entry."
    },
    "AppsDynamiteSharedOpenLinkAppUriIntent": {
      "id": "AppsDynamiteSharedOpenLinkAppUriIntent",
      "type": "object",
      "description": "Android intent.",
      "properties": {
        "extraData": {
          "description": "A list of extra data for the android intent. For example, for a calendar event edit intent, the event title information can be passed as extra data.",
          "items": {
            "$ref": "AppsDynamiteSharedOpenLinkAppUriIntentExtraData"
          },
          "type": "array"
        },
        "intentAction": {
          "description": "An android intent action string for the {@link android.content.Intent} object. For example: for the view intent action type, a valid value will be android.content.Intent.ACTION_VIEW.",
          "type": "string"
        }
      }
    },
    "CustomerSettings": {
      "id": "CustomerSettings",
      "properties": {
        "vpcSettings": {
          "$ref": "VPCSettings",
          "description": "VPC SC settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request."
        },
        "auditLoggingSettings": {
          "description": "Audit Logging settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request.",
          "$ref": "AuditLoggingSettings"
        }
      },
      "type": "object",
      "description": "Represents settings at a customer level."
    },
    "AppsDynamiteSharedAction": {
      "description": "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "type": "object",
      "properties": {
        "interaction": {
          "enum": [
            "INTERACTION_UNSPECIFIED",
            "OPEN_DIALOG"
          ],
          "enumDescriptions": [
            "Default value if interaction is not specified.",
            "A dialog opens by clicking the button."
          ],
          "type": "string"
        },
        "loadIndicator": {
          "type": "string",
          "enum": [
            "SPINNER",
            "NONE"
          ],
          "enumDescriptions": [
            "Displays a spinner to indicate that content is loading.",
            "Nothing is displayed."
          ]
        },
        "parameters": {
          "items": {
            "$ref": "AppsDynamiteSharedActionActionParameter"
          },
          "type": "array",
          "description": "List of action parameters."
        },
        "function": {
          "type": "string",
          "description": "Apps Script function to invoke when the containing element is clicked/activated."
        }
      },
      "id": "AppsDynamiteSharedAction"
    },
    "AppsDynamiteSharedReaction": {
      "type": "object",
      "id": "AppsDynamiteSharedReaction",
      "properties": {
        "count": {
          "description": "The total number of users who have reacted.",
          "format": "int32",
          "type": "integer"
        },
        "emoji": {
          "$ref": "AppsDynamiteSharedEmoji"
        },
        "currentUserParticipated": {
          "description": "Whether the current user reacted using this emoji. Note: Unlike most properties of messages, this is different per-user.",
          "type": "boolean"
        },
        "createTimestamp": {
          "format": "int64",
          "type": "string",
          "description": "When the first emoji of this type was added."
        }
      }
    },
    "ContentReportSummary": {
      "description": "Summarized info of content reports. Usually less expensive to fetch than to fetch all detailed reports. Set only when the request asks for it.",
      "properties": {
        "numberReports": {
          "type": "integer",
          "description": "Total number of reports attached to this (revision of) message.",
          "format": "int32"
        },
        "numberReportsAllRevisions": {
          "type": "integer",
          "format": "int32",
          "description": "Totoal number of reports attached to all revisions of this message (i.e. since creation). Set only when the request asks for it."
        }
      },
      "id": "ContentReportSummary",
      "type": "object"
    },
    "Interaction": {
      "description": "Represents an interaction between a user and an item.",
      "id": "Interaction",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Invalid value.",
            "This interaction indicates the user viewed the item.",
            "This interaction indicates the user edited the item."
          ],
          "enum": [
            "UNSPECIFIED",
            "VIEW",
            "EDIT"
          ]
        },
        "principal": {
          "$ref": "Principal",
          "description": "The user that acted on the item."
        },
        "interactionTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded."
        }
      },
      "type": "object"
    },
    "ImageComponent": {
      "description": "NOTE: Through future refactoring work, this image component will eventually be used in the Image widget, and will likely replace the Icon proto as well.",
      "properties": {
        "altText": {
          "type": "string"
        },
        "cropStyle": {
          "$ref": "ImageCropStyle"
        },
        "borderStyle": {
          "$ref": "BorderStyle"
        },
        "imageUrl": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "ImageComponent"
    },
    "ContentReportJustification": {
      "id": "ContentReportJustification",
      "type": "object",
      "properties": {
        "userJustification": {
          "type": "string",
          "description": "Optional. User-generated free-text justification for the content report."
        }
      }
    },
    "GoogleChatV1ContextualAddOnMarkupCard": {
      "id": "GoogleChatV1ContextualAddOnMarkupCard",
      "description": "A card is a UI element that can contain UI widgets such as texts, images.",
      "properties": {
        "header": {
          "$ref": "GoogleChatV1ContextualAddOnMarkupCardCardHeader",
          "description": "The header of the card. A header usually contains a title and an image."
        },
        "name": {
          "type": "string",
          "description": "Name of the card."
        },
        "cardActions": {
          "description": "The actions of this card.",
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkupCardCardAction"
          },
          "type": "array"
        },
        "sections": {
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkupCardSection"
          },
          "type": "array",
          "description": "Sections are separated by a line divider."
        }
      },
      "type": "object"
    },
    "ObjectPropertyOptions": {
      "id": "ObjectPropertyOptions",
      "properties": {
        "subobjectProperties": {
          "description": "The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named *street*, *city*, and *state*. The maximum number of elements is 1000.",
          "type": "array",
          "items": {
            "$ref": "PropertyDefinition"
          }
        }
      },
      "type": "object",
      "description": "The options for object properties."
    },
    "TimestampValues": {
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "google-datetime"
          }
        }
      },
      "id": "TimestampValues",
      "type": "object",
      "description": "List of timestamp values."
    },
    "CircleProto": {
      "description": "Represents a Google+ Circle. Currently (12/2011), a Circle is identical to the ContactGroup with matching parameters, but Circle must only be used for true Circles and not other Focus groups, and should be preferred over ContactGroup where applicable. Soon it may become more efficient to check membership in a Circle than in a ContactGroup (see http://go/superglue). Support for this principal type is currently (12/2011) incomplete -- e.g., Keystore does not support it yet (see b/5703421).",
      "properties": {
        "ownerGaiaId": {
          "format": "int64",
          "type": "string",
          "description": "The owner of the circle. Currently required."
        },
        "requiredConsistencyTimestampUsec": {
          "description": "If present, then tests for membership in this circle must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this circle supports checking consistency timestamps. For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present.",
          "format": "int64",
          "type": "string"
        },
        "circleId": {
          "format": "int64",
          "description": "Circle ID is unique only relative to the owner's Gaia ID. Currently required.",
          "type": "string"
        }
      },
      "id": "CircleProto",
      "type": "object"
    },
    "RetrievalImportance": {
      "type": "object",
      "id": "RetrievalImportance",
      "properties": {
        "importance": {
          "enum": [
            "DEFAULT",
            "HIGHEST",
            "HIGH",
            "LOW",
            "NONE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Treat the match like a body text match.",
            "Treat the match like a match against title of the item.",
            "Treat the match with higher importance than body text.",
            "Treat the match with lower importance than body text.",
            "Do not match against this field during retrieval. The property can still be used for operator matching, faceting, and suggest if desired."
          ],
          "description": "Indicates the ranking importance given to property when it is matched during retrieval. Once set, the token importance of a property cannot be changed."
        }
      }
    },
    "EmbedClientItem": {
      "id": "EmbedClientItem",
      "description": "Represents an embedded object in an update. This is a wrapper class that can contain a single specific item proto in an extension field. Think of it as a base class like `Message` in Java. Each item proto must declare that it extends this proto: message ExampleObject { option (item_type) = EXAMPLE_OBJECT; extend EmbedClientItem { optional ExampleObject example_object = ; } } See go/es-embeds for details.",
      "properties": {
        "canonicalId": {
          "description": "The canonical ID of the embed. If absent, the canonical ID is equal to the ID; if present, then the canonical ID represents an \"equivalence class\" of embeds which really refer to the same object. (For example, the URLs http://www.foo.com/ and http://foo.com/ refer to the same object) This field may be updated periodically by background processes.",
          "type": "string"
        },
        "type": {
          "items": {
            "enum": [
              "UNKNOWN",
              "ACTION_V2",
              "ADD_ACTION_V2",
              "AGGREGATE_RATING_V2",
              "ARTICLE_V2",
              "ASSESS_ACTION_V2",
              "AUDIO_OBJECT_V2",
              "BASIC_INTERACTION_V2",
              "BLOG_POSTING_V2",
              "BLOG_V2",
              "BOOK_V2",
              "BUY_ACTION_V2",
              "CHECK_IN_ACTION_V2",
              "CHECKIN_V2",
              "COLLEXION_V2",
              "COMMENT_ACTION_V2",
              "COMMENT_V2",
              "COMMUNICATE_ACTION_V2",
              "CONSUME_ACTION_V2",
              "CREATE_ACTION_V2",
              "CREATIVE_WORK_V2",
              "DISCOVER_ACTION_V2",
              "DOCUMENT_OBJECT_V2",
              "DRAWING_OBJECT_V2",
              "DRIVE_OBJECT_V2",
              "EMOTISHARE_V2",
              "ENTRY_POINT_V2",
              "EVENT_TIME_V2",
              "EVENT_V2",
              "FILE_OBJECT_V2",
              "FIND_ACTION_V2",
              "FINANCIAL_QUOTE_V2",
              "FORM_OBJECT_V2",
              "GEO_COORDINATES_V2",
              "GOOGLE_OFFER_V2",
              "HANGOUT_CHAT_MESSAGE",
              "HANGOUT_QUOTE",
              "HANGOUT_V2",
              "HOA_PLUS_EVENT_V2",
              "IMAGE_OBJECT_V2",
              "INTERACT_ACTION_V2",
              "INTERACTION_V2",
              "LISTEN_ACTION_V2",
              "LOCAL_BUSINESS_V2",
              "LOCAL_PLUS_PHOTO_ALBUM_V2",
              "MAGAZINE_V2",
              "MEDIA_OBJECT_V2",
              "MOBILE_APPLICATION_V2",
              "MOVIE_V2",
              "MUSIC_ALBUM_V2",
              "MUSIC_GROUP_V2",
              "MUSIC_PLAYLIST_V2",
              "MUSIC_RECORDING_V2",
              "NEWS_ARTICLE_V2",
              "OFFER_V2",
              "ORGANIZATION_V2",
              "ORGANIZE_ACTION_V2",
              "PERSON_V2",
              "PLACE_REVIEW_V2",
              "PLACE_V2",
              "PLAN_ACTION_V2",
              "PLAY_MUSIC_ALBUM_V2",
              "PLAY_MUSIC_TRACK_V2",
              "PLAY_OBJECT_V2",
              "PLUS_AUDIO_V2",
              "PLUS_EVENT_V2",
              "PLUS_MEDIA_COLLECTION_V2",
              "PLUS_MEDIA_OBJECT_V2",
              "PLUS_PAGE_V2",
              "PLUS_PHOTOS_ADDED_TO_COLLECTION_V2",
              "PLUS_PHOTO_ALBUM_V2",
              "PLUS_PHOTO_COLLECTION_V2",
              "PLUS_PHOTO_V2",
              "PLUS_POST_V2",
              "PLUS_RESHARE_V2",
              "PLUS_SOFTWARE_APPLICATION_V2",
              "POLL_OPTION_V2",
              "POLL_V2",
              "POSTAL_ADDRESS_V2",
              "PRESENTATION_OBJECT_V2",
              "PRODUCT_REVIEW_V2",
              "RATING_V2",
              "REACT_ACTION_V2",
              "RESERVATION_V2",
              "RESERVE_ACTION_V2",
              "REVIEW_V2",
              "REVIEW_ACTION_V2",
              "SOFTWARE_APPLICATION_V2",
              "SPREADSHEET_OBJECT_V2",
              "SQUARE_INVITE_V2",
              "SQUARE_V2",
              "STICKER_V2",
              "STORY_V2",
              "THING_V2",
              "TRADE_ACTION_V2",
              "DEPRECATED_TOUR_OBJECT_V2",
              "TV_EPISODE_V2",
              "TV_SERIES_V2",
              "UPDATE_ACTION_V2",
              "VIEW_ACTION_V2",
              "VIDEO_OBJECT_V2",
              "VIDEO_GALLERY_V2",
              "WANT_ACTION_V2",
              "WEB_PAGE_V2",
              "WRITE_ACTION_V2",
              "YOUTUBE_CHANNEL_V2",
              "GOOGLE_USER_PHOTO_V2",
              "GOOGLE_USER_PHOTO_ALBUM",
              "GOOGLE_PHOTO_RECIPE",
              "THING",
              "CREATIVE_WORK",
              "EVENT",
              "INTANGIBLE",
              "ORGANIZATION",
              "PERSON",
              "PLACE",
              "PRODUCT",
              "ARTICLE",
              "BLOG_POSTING",
              "NEWS_ARTICLE",
              "SCHOLARLY_ARTICLE",
              "BLOG",
              "BOOK",
              "COMMENT",
              "ITEM_LIST",
              "MAP",
              "MEDIA_OBJECT",
              "AUDIO_OBJECT",
              "IMAGE_OBJECT",
              "MUSIC_VIDEO_OBJECT",
              "VIDEO_OBJECT",
              "MOVIE",
              "MUSIC_PLAYLIST",
              "MUSIC_ALBUM",
              "MUSIC_RECORDING",
              "PAINTING",
              "PHOTOGRAPH",
              "RECIPE",
              "REVIEW",
              "SCULPTURE",
              "SOFTWARE_APPLICATION",
              "MOBILE_APPLICATION",
              "WEB_APPLICATION",
              "TV_EPISODE",
              "TV_SEASON",
              "TV_SERIES",
              "WEB_PAGE",
              "ABOUT_PAGE",
              "CHECKOUT_PAGE",
              "COLLECTION_PAGE",
              "IMAGE_GALLERY",
              "VIDEO_GALLERY",
              "CONTACT_PAGE",
              "ITEM_PAGE",
              "PROFILE_PAGE",
              "SEARCH_RESULTS_PAGE",
              "WEB_PAGE_ELEMENT",
              "SITE_NAVIGATION_ELEMENT",
              "TABLE",
              "WP_AD_BLOCK",
              "WP_FOOTER",
              "WP_HEADER",
              "WP_SIDEBAR",
              "APP_INVITE",
              "EMOTISHARE",
              "BUSINESS_EVENT",
              "CHILDRENS_EVENT",
              "COMEDY_EVENT",
              "DANCE_EVENT",
              "EDUCATION_EVENT",
              "FESTIVAL",
              "FOOD_EVENT",
              "LITERARY_EVENT",
              "MUSIC_EVENT",
              "SALE_EVENT",
              "SOCIAL_EVENT",
              "SPORTS_EVENT",
              "THEATER_EVENT",
              "VISUAL_ARTS_EVENT",
              "RESERVATION",
              "TRAVEL_EVENT",
              "CORPORATION",
              "EDUCATIONAL_ORGANIZATION",
              "COLLEGE_OR_UNIVERSITY",
              "ELEMENTARY_SCHOOL",
              "HIGH_SCHOOL",
              "MIDDLE_SCHOOL",
              "PRESCHOOL",
              "SCHOOL",
              "GOVERNMENT_ORGANIZATION",
              "LOCAL_BUSINESS",
              "ANIMAL_SHELTER",
              "AUTOMOTIVE_BUSINESS",
              "AUTO_BODY_SHOP",
              "AUTO_DEALER",
              "AUTO_PARTS_STORE",
              "AUTO_RENTAL",
              "AUTO_REPAIR",
              "AUTO_WASH",
              "GAS_STATION",
              "MOTORCYCLE_DEALER",
              "MOTORCYCLE_REPAIR",
              "CHILD_CARE",
              "DRY_CLEANING_OR_LAUNDRY",
              "EMERGENCY_SERVICE",
              "FIRE_STATION",
              "HOSPITAL",
              "POLICE_STATION",
              "EMPLOYMENT_AGENGY",
              "ENTERTAINMENT_BUSINESS",
              "ADULT_ENTERTAINMENT",
              "AMUSEMENT_PARK",
              "ART_GALLERY",
              "CASINO",
              "COMEDY_CLUB",
              "MOVIE_THEATER",
              "NIGHT_CLUB",
              "FINANCIAL_SERVICE",
              "ACCOUNTING_SERVICE",
              "AUTOMATED_TELLER",
              "BANK_OR_CREDIT_UNION",
              "INSURANCE_AGENCY",
              "FOOD_ESTABLISHMENT",
              "BAKERY",
              "BAR_OR_PUB",
              "BREWERY",
              "CAFE_OR_COFFEE_SHOP",
              "FAST_FOOD_RESTAURANT",
              "ICE_CREAM_SHOP",
              "RESTAURANT",
              "WINERY",
              "GOVERNMENT_OFFICE",
              "POST_OFFICE",
              "HEALTH_AND_BEAUTY_BUSINESS",
              "BEAUTY_SALON",
              "DAY_SPA",
              "HAIR_SALON",
              "HEALTH_CLUB",
              "NAIL_SALON",
              "TATTOO_PARLOR",
              "HOME_AND_CONSTRUCTION_BUSINESS",
              "ELECTRICIAN",
              "GENERAL_CONTRACTOR",
              "HVAC_BUSINESS",
              "HOUSE_PAINTER",
              "LOCKSMITH",
              "MOVING_COMPANY",
              "PLUMBER",
              "ROOFING_CONTRACTOR",
              "INTERNET_CAFE",
              "LIBRARY",
              "LODGING_BUSINESS",
              "BED_AND_BREAKFAST",
              "HOSTEL",
              "HOTEL",
              "MOTEL",
              "MEDICAL_ORGANIZATION",
              "DENTIST",
              "MEDICAL_CLINIC",
              "OPTICIAN",
              "PHARMACY",
              "PHYSICIAN",
              "VETERINARY_CARE",
              "PROFESSIONAL_SERVICE",
              "ATTORNEY",
              "NOTARY",
              "RADIO_STATION",
              "REAL_ESTATE_AGENT",
              "RECYCLING_CENTER",
              "SELF_STORAGE",
              "SHOPPING_CENTER",
              "SPORTS_ACTIVITY_LOCATION",
              "BOWLING_ALLEY",
              "EXERCISE_GYM",
              "GOLF_COURSE",
              "PUBLIC_SWIMMING_POOL",
              "SKI_RESORT",
              "SPORTS_CLUB",
              "STADIUM_OR_ARENA",
              "TENNIS_COMPLEX",
              "STORE",
              "BIKE_STORE",
              "BOOK_STORE",
              "CLOTHING_STORE",
              "COMPUTER_STORE",
              "CONVENIENCE_STORE",
              "DEPARTMENT_STORE",
              "ELECTRONICS_STORE",
              "FLORIST",
              "FURNITURE_STORE",
              "GARDEN_STORE",
              "GROCERY_STORE",
              "HARDWARE_STORE",
              "HOBBY_SHOP",
              "HOME_GOODS_STORE",
              "JEWELRY_STORE",
              "LIQUOR_STORE",
              "MENS_CLOTHING_STORE",
              "MOBILE_PHONE_STORE",
              "MOVIE_RENTAL_STORE",
              "MUSIC_STORE",
              "OFFICE_EQUIPMENT_STORE",
              "OUTLET_STORE",
              "PAWN_SHOP",
              "PET_STORE",
              "SHOE_STORE",
              "SPORTING_GOODS_STORE",
              "TIRE_SHOP",
              "TOY_STORE",
              "WHOLESALE_STORE",
              "TELEVISION_STATION",
              "TOURIST_INFORMATION_CENTER",
              "TRAVEL_AGENCY",
              "PERFORMING_GROUP",
              "MUSIC_GROUP",
              "ADMINISTRATIVE_AREA",
              "CITY",
              "COUNTRY",
              "STATE",
              "CIVIC_STRUCTURE",
              "AIRPORT",
              "AQUARIUM",
              "BEACH",
              "BUS_STATION",
              "BUS_STOP",
              "CAMPGROUND",
              "CEMETERY",
              "CREMATORIUM",
              "EVENT_VENUE",
              "GOVERNMENT_BUILDING",
              "CITY_HALL",
              "COURTHOUSE",
              "DEFENCE_ESTABLISHMENT",
              "EMBASSY",
              "LEGISLATIVE_BUILDING",
              "MUSEUM",
              "MUSIC_VENUE",
              "PARK",
              "PARKING_FACILITY",
              "PERFORMING_ARTS_THEATER",
              "PLACE_OF_WORSHIP",
              "BUDDHIST_TEMPLE",
              "CATHOLIC_CHURCH",
              "CHURCH",
              "HINDU_TEMPLE",
              "MOSQUE",
              "SYNAGOGUE",
              "PLAYGROUND",
              "R_V_PARK",
              "RESIDENCE",
              "APARTMENT_COMPLEX",
              "GATED_RESIDENCE_COMMUNITY",
              "SINGLE_FAMILY_RESIDENCE",
              "TOURIST_ATTRACTION",
              "SUBWAY_STATION",
              "TAXI_STAND",
              "TRAIN_STATION",
              "ZOO",
              "LANDFORM",
              "BODY_OF_WATER",
              "CANAL",
              "LAKE_BODY_OF_WATER",
              "OCEAN_BODY_OF_WATER",
              "POND",
              "RESERVOIR",
              "RIVER_BODY_OF_WATER",
              "SEA_BODY_OF_WATER",
              "WATERFALL",
              "CONTINENT",
              "MOUNTAIN",
              "VOLCANO",
              "LANDMARKS_OR_HISTORICAL_BUILDINGS",
              "USER_INTERACTION",
              "USER_PLUS_ONES",
              "ENUMERATION",
              "BOOK_FORMAT_TYPE",
              "ITEM_AVAILABILITY",
              "OFFER_ITEM_CONDITION",
              "JOB_POSTING",
              "LANGUAGE",
              "OFFER",
              "QUANTITY",
              "DISTANCE",
              "DURATION",
              "ENERGY",
              "MASS",
              "RATING",
              "AGGREGATE_RATING",
              "STRUCTURED_VALUE",
              "CONTACT_POINT",
              "POSTAL_ADDRESS",
              "GEO_COORDINATES",
              "GEO_SHAPE",
              "NUTRITION_INFORMATION",
              "PRESENTATION_OBJECT",
              "DOCUMENT_OBJECT",
              "SPREADSHEET_OBJECT",
              "FORM_OBJECT",
              "DRAWING_OBJECT",
              "PLACE_REVIEW",
              "FILE_OBJECT",
              "PLAY_MUSIC_TRACK",
              "PLAY_MUSIC_ALBUM",
              "MAGAZINE",
              "CAROUSEL_FRAME",
              "PLUS_EVENT",
              "HANGOUT",
              "HANGOUT_BROADCAST",
              "HANGOUT_CONSUMER",
              "CHECKIN",
              "EXAMPLE_OBJECT",
              "SQUARE",
              "SQUARE_INVITE",
              "PLUS_PHOTO",
              "PLUS_PHOTO_ALBUM",
              "LOCAL_PLUS_PHOTO_ALBUM",
              "PRODUCT_REVIEW",
              "FINANCIAL_QUOTE",
              "DEPRECATED_TOUR_OBJECT",
              "PLUS_PAGE",
              "GOOGLE_CHART",
              "PLUS_PHOTOS_ADDED_TO_COLLECTION",
              "RECOMMENDED_PEOPLE",
              "PLUS_POST",
              "DATE",
              "DRIVE_OBJECT_COLLECTION",
              "NEWS_MEDIA_ORGANIZATION",
              "DYNAMITE_ATTACHMENT_METADATA",
              "DYNAMITE_MESSAGE_METADATA"
            ],
            "enumDescriptions": [
              "Largely deprecated, effectively an error condition and should not be in storage.",
              "Embeds V2 types",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "The action of checking in, as opposed to a \"check-in\".",
              "",
              "",
              "The act of commenting, which might result in a comment.",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "Boswell story (see goto/boswell)",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "A photo stored in photo service owned by a Google account user. This is distinct from PlusPhoto as it isn't tied to GPlus, but is instead intended to be a more general photo tied to a google user.",
              "A photo album in photo service owned by a Google account user. This is distinct from PlusPhotoAlbum as it isn't tied to GPlus, but is instead intended to be a general photo album tied to a google user.",
              "An embed used to create a single photo in photo service. This type is never stored but is used to create a GOOGLE_USER_PHOTO_V2 or PLUS_PHOTO_V2 embed.",
              "Embeds V1 types",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "CREATIVE_WORK subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "EVENT subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "ORGANIZATION subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "PLACE subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "NOTE(jpanzer): This is a badly designed hierarchy and we should avoid depending on Event properties inside UserInteractions as much as possible IMHO.",
              "",
              "Intangibles, primarily used as sub-objects of other types",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "CREATIVE_WORK extensions",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "Single frame for http://goto/carousel.",
              "EVENT extensions",
              "No declared proto. Used only as a base type for now.",
              "",
              "",
              "",
              "",
              "NOTE(melchang): These correspond to http://schema.org/WebPage/Community and http://schema.org/WebPage/CommunityInvite. See b/7653610 for why these are \"SQUARE\" and not \"COMMUNITY\".",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "Data visualizations. See http://code.google.com/apis/chart/index.html",
              "",
              "A collection of people that have been recommended to a user.",
              "A Google+ post.",
              "An http://schema.org/Date unstructured ISO-8859 timestamp string.",
              "Embed representing a collection of multiple Drive objects.",
              "https://schema.org/NewsMediaOrganization",
              "Deprecated in favor of DYNAMITE_MESSAGE_METADATA",
              "Used for Dynamite message metadata in Hangouts"
            ],
            "type": "string"
          },
          "description": "The first value in `type` determines which extension field will be set. When creating an EmbedClientItem, you only need to set the first (primary) type in this field. When the server receives the item, it will populate the full type list using the parent annotations in the ItemType enum.",
          "type": "array"
        },
        "deepLinkData": {
          "description": "Deep-linking data to take the user to the right place in a mobile app. This is only used for preview and attribution. Links that are specific to a given embed type should live on that specific embed's proto by using Link. See http://goto.google.com/mariana-design.",
          "$ref": "DeepLinkData"
        },
        "renderId": {
          "description": "The ID used to identify the embed during rendering. This field will match ID, if set, otherwise it will be the ID of the parent activity. This field is only populated on the server for client use and is not persisted to storage.",
          "type": "string"
        },
        "signature": {
          "description": "Signature of the embed, used for verification.",
          "type": "string"
        },
        "transientData": {
          "$ref": "TransientData",
          "description": "Transient generic data that will not be saved on the server."
        },
        "provenance": {
          "$ref": "Provenance",
          "description": "The provenance of the embed, populated when the embed originated from a web fetch. The provenance captures information about the web page the embed had originated, like the URL that was retrieved and the retrieved URL's canonical form. This is useful in the case where the URL shared by the URL redirects (e.g., in the case of a shortened URL)."
        },
        "id": {
          "type": "string",
          "description": "The ID of the embed. This corresponds to the schema.org ID, as represented in the ItemScope.id field."
        }
      },
      "type": "object"
    },
    "IncomingWebhookChangedMetadata": {
      "id": "IncomingWebhookChangedMetadata",
      "properties": {
        "obfuscatedIncomingWebhookId": {
          "type": "string",
          "description": "The webhook id of the incoming webhook in question. This field should not be used to load webhook information dynamically and is only present for debugging purposes. Used in Spanner storage, BE API responses and FE API responses."
        },
        "initiatorId": {
          "$ref": "UserId",
          "description": "The user id of the user whose action triggered this system message. Used in Spanner storage, BE API responses and FE API responses."
        },
        "incomingWebhookName": {
          "description": "The webhook name at the time of the change. Used in Spanner storage, BE API responses and FE API responses.",
          "type": "string"
        },
        "initiatorProfile": {
          "description": "Complete profile when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in. Used in FE API responses.",
          "$ref": "User"
        },
        "oldIncomingWebhookName": {
          "description": "Only populated for UPDATED_NAME and UPDATED_NAME_AND_AVATAR events, where the webhook name was changed. Used in Spanner storage, BE API responses and FE API responses.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "",
            "",
            "TODO (b/154857280): remove UPDATED field.",
            "",
            "",
            "",
            ""
          ],
          "description": "Used in Spanner storage, BE API responses and FE API responses.",
          "enum": [
            "UNSPECIFIED",
            "ADDED",
            "UPDATED",
            "REMOVED",
            "UPDATED_NAME",
            "UPDATED_AVATAR",
            "UPDATED_NAME_AND_AVATAR"
          ],
          "type": "string"
        }
      },
      "description": "Annotation metadata to display system messages for incoming webhook events. Next Tag: 7",
      "type": "object"
    },
    "MemberId": {
      "type": "object",
      "id": "MemberId",
      "description": "Eventually this can be updated to a oneOf User, Space (for nested spaces), Bots or Service, as and when these use cases come up.",
      "properties": {
        "rosterId": {
          "description": "Unique, immutable ID of the Roster.",
          "$ref": "RosterId"
        },
        "userId": {
          "description": "Unique, immutable ID of the User.",
          "$ref": "UserId"
        }
      }
    },
    "DebugOptions": {
      "properties": {
        "enableDebugging": {
          "type": "boolean",
          "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
        }
      },
      "description": "Shared request debug options for all cloudsearch RPC methods.",
      "type": "object",
      "id": "DebugOptions"
    },
    "ListItemNamesForUnmappedIdentityResponse": {
      "id": "ListItemNamesForUnmappedIdentityResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "itemNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "FilterOptions": {
      "id": "FilterOptions",
      "description": "Filter options to be applied on query.",
      "properties": {
        "filter": {
          "description": "Generic filter to restrict the search, such as `lang:en`, `site:xyz`.",
          "$ref": "Filter"
        },
        "objectType": {
          "description": "If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum length is 256 characters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedActionActionParameter": {
      "id": "AppsDynamiteSharedActionActionParameter",
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        }
      },
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."
    },
    "ChatConserverMessageContent": {
      "description": "The content of a chat message, which includes 0 or more segments along with 0 or more embeds, which represent various attachment types (like photos).",
      "id": "ChatConserverMessageContent",
      "properties": {
        "segment": {
          "items": {
            "$ref": "Segment"
          },
          "description": "The text part of the message content. Segments are concatenated together to yield the full message. A message can have zero or more segments.",
          "type": "array"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "SocialCommonAttachmentAttachment"
          },
          "description": "Items attached to this message, such as photos. This should *NOT* be set by clients. It will be automatically set from media uploaded along with this request and using the information provided in existing_media."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedVideoReference": {
      "description": "Reference to a transcoded video attachment.",
      "properties": {
        "status": {
          "enum": [
            "UNKNOWN_STATUS",
            "SUCCESS",
            "ERROR",
            "NOT_APPLICABLE"
          ],
          "type": "string",
          "description": "Transcode status",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "format": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "Available transcode format. Value is defined in video/storage/proto/content_header.proto"
        }
      },
      "id": "AppsDynamiteSharedVideoReference",
      "type": "object"
    },
    "AppsDynamiteV1ApiCompatV1Attachment": {
      "type": "object",
      "id": "AppsDynamiteV1ApiCompatV1Attachment",
      "description": "Richly formatted attachments. Documentation: - https://api.slack.com/docs/message-attachments",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title string of this attachment."
        },
        "fields": {
          "description": "Columns of text inside the attachment body.",
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteV1ApiCompatV1Field"
          }
        },
        "text": {
          "type": "string",
          "description": "Main text."
        },
        "mrkdwn_in": {
          "type": "array",
          "description": "List of fields to apply formatting to.",
          "items": {
            "type": "string"
          }
        },
        "footer": {
          "description": "A string displayed at the bottom of the attachment.",
          "type": "string"
        },
        "footer_icon": {
          "description": "Avatar URL displayed to the left of the footer.",
          "type": "string"
        },
        "color": {
          "description": "A color \"bar\" to display to the left of the attachment.",
          "type": "string"
        },
        "attachment_type": {
          "description": "Undocumented - used in interactive button examples. The only valid value appears to be \"default\".",
          "type": "string"
        },
        "callback_id": {
          "type": "string",
          "description": "Unique identifier for the collection of buttons within this attachment. Will be sent back to the action handler URL when a button is clicked."
        },
        "author_name": {
          "type": "string",
          "description": "User name to display as the author of the message."
        },
        "image_url": {
          "type": "string",
          "description": "URL of an image to display in an image chip."
        },
        "pretext": {
          "description": "A string to show above the attachment.",
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteV1ApiCompatV1Action"
          },
          "description": "Array of actions (currently only buttons)."
        },
        "ts": {
          "description": "UNIX timestamp of the attachment.",
          "format": "int32",
          "type": "integer"
        },
        "author_link": {
          "type": "string",
          "description": "URL that the user name should link to."
        },
        "thumb_url": {
          "type": "string",
          "description": "URL of a thumbnail image to display to the right of the attachment body."
        },
        "author_icon": {
          "type": "string",
          "description": "Avatar URL for the user."
        },
        "title_link": {
          "type": "string",
          "description": "URL that the title string should link to."
        },
        "fallback": {
          "description": "Fallback plain-text string for clients that don't support attachments.",
          "type": "string"
        }
      }
    },
    "Image": {
      "properties": {
        "onClick": {
          "$ref": "OnClick"
        },
        "aspectRatio": {
          "description": "The aspect ratio of this image (width/height).",
          "type": "number",
          "format": "double"
        },
        "altText": {
          "type": "string",
          "description": "The alternative text of this image which will be used for accessibility."
        },
        "imageUrl": {
          "description": "Image url specified by developers. Server side, we will wrap with FIFE so client apps can configure size/cropping/etc.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Image"
    },
    "AuthorizedItemId": {
      "description": "A combination of an identifier for a Drive resource (e.g. file, folder, or drive) and any secrets needed to access it. The secrets should never be logged, and this proto annotates those secret fields to ensure that they are not. Clients are encouraged to use this proto rather than defining their own, to ensure that secrets are correctly annotated.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Serialized ID of the Drive resource",
          "type": "string"
        },
        "resourceKey": {
          "type": "string",
          "description": "Resource key of the Drive item. This field should be unset if, depending on the context, the item does not have a resource key, or if none was specified. This must never be logged."
        }
      },
      "id": "AuthorizedItemId"
    },
    "ObjectOptions": {
      "description": "The options for an object.",
      "id": "ObjectOptions",
      "properties": {
        "freshnessOptions": {
          "description": "The freshness options for an object.",
          "$ref": "FreshnessOptions"
        },
        "suggestionFilteringOperators": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Operators that can be used to filter suggestions. For Suggest API, only operators mentioned here will be honored in the FilterOptions. Only TEXT and ENUM operators are supported. NOTE: \"objecttype\", \"type\" and \"mimetype\" are already supported. This property is to configure schema specific operators. Even though this is an array, only one operator can be specified. This is an array for future extensibility. Operators mapping to multiple properties within the same object are not supported. If the operator spans across different object types, this option has to be set once for each object definition."
        },
        "displayOptions": {
          "$ref": "ObjectDisplayOptions",
          "description": "The options that determine how the object is displayed in the Cloud Search results page."
        }
      },
      "type": "object"
    },
    "OtrChatMessageEvent": {
      "type": "object",
      "id": "OtrChatMessageEvent",
      "properties": {
        "expirationTimestampUsec": {
          "type": "string",
          "format": "int64"
        },
        "kansasRowId": {
          "type": "string"
        },
        "messageOtrStatus": {
          "type": "string",
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ],
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ]
        },
        "kansasVersionInfo": {
          "type": "string"
        }
      }
    },
    "AppsDynamiteSharedCustomEmoji": {
      "description": "Proto representation of a custom emoji. May be used in both APIs and in Spanner, but certain fields should be restricted to one or the other. See the per-field documentation for details. NEXT_TAG: 14",
      "id": "AppsDynamiteSharedCustomEmoji",
      "type": "object",
      "properties": {
        "state": {
          "description": "Snapshot of the current state of the emoji, which may differ from the source-of-truth in the CustomEmojis table. This field should *never* be persisted to Spanner.",
          "enumDescriptions": [
            "",
            "Emoji is visible and available to be used, subject to access control requirements.",
            "Emoji can no longer be used (e.g. due to a shortcode conflict), but is not removed from existing embeddings.",
            "Emoji is hidden from pickers, so new usages are not allowed, but is not removed from existing embeddings.",
            "Emoji is removed everywhere and is not available to end-users."
          ],
          "type": "string",
          "enum": [
            "EMOJI_STATE_UNSPECIFIED",
            "EMOJI_ENABLED",
            "EMOJI_SYSTEM_DISABLED",
            "EMOJI_HIDDEN",
            "EMOJI_DELETED"
          ]
        },
        "uuid": {
          "type": "string",
          "description": "Unique key for a custom emoji resource. Required. This field is *always* populated."
        },
        "ownerCustomerId": {
          "$ref": "CustomerId",
          "description": "This field should *never* be persisted to Spanner."
        },
        "createTimeMicros": {
          "format": "int64",
          "type": "string",
          "description": "Time when the Emoji was created, in microseconds. This field may be present in Spanner, within the server, or in public APIs."
        },
        "ephemeralUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. A short-lived URL clients can use for directly accessing a custom emoji image. This field is intended for API consumption, and should *never* be persisted to Spanner."
        },
        "updateTimeMicros": {
          "format": "int64",
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "description": "Content type of the file used to upload the emoji. Used for takeout. Written to Spanner when the emoji is created."
        },
        "shortcode": {
          "type": "string",
          "description": "User-provided, human-readable ID for the custom emoji. Users are expected to observe this field in the UI instead of the UUID. This shortcode should be unique within an organization, but has no global uniqueness guarantees, unlike the UUID. This field should *never* be persisted to Spanner."
        },
        "creatorUserId": {
          "description": "This field should *never* be persisted to Spanner.",
          "$ref": "UserId"
        },
        "readToken": {
          "description": "Opaque token that clients use to construct the URL for accessing the custom emoji’s image data. This field is intended for API consumption, and should *never* be persisted to Spanner.",
          "type": "string"
        },
        "blobId": {
          "type": "string",
          "description": "ID for the underlying image data in Blobstore. This field should *only* be present in Spanner or within the server, but should not be exposed in public APIs."
        },
        "deleteTimeMicros": {
          "description": "Time when the emoji was deleted, in microseconds. This field may be present in Spanner, within the server, or in public APIs. Only present if the emoji has been deleted.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "GoogleChatV1WidgetMarkupImage": {
      "description": "An image that is specified by a URL and can have an onclick action.",
      "properties": {
        "imageUrl": {
          "description": "The URL of the image.",
          "type": "string"
        },
        "onClick": {
          "$ref": "GoogleChatV1WidgetMarkupOnClick",
          "description": "The onclick action."
        },
        "aspectRatio": {
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupImage"
    },
    "BroadcastAccess": {
      "type": "object",
      "description": "Broadcast access information of a meeting space.",
      "id": "BroadcastAccess",
      "properties": {
        "viewUrl": {
          "description": "A URL that can be used to access the broadcast of the meeting. This field will be empty if broadcast is not enabled. It will be populated by the backend. Clients cannot modify the value.",
          "type": "string"
        },
        "accessPolicy": {
          "description": "The policy that controls the broadcast's viewer access.",
          "type": "string",
          "enum": [
            "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
            "ORGANIZATION",
            "PUBLIC"
          ],
          "enumDescriptions": [
            "Used only when broadcast is not enabled, or an unknown enum value is used.",
            "Only authenticated Google accounts belonging to the same organization as the meeting organizer can access the broadcast.",
            "Anyone with the broadcast view URL can access the broadcast."
          ]
        }
      }
    },
    "PaygateInfo": {
      "description": "Information provided to clients so that they can show upgrade promos and warnings on call ending early (for non-paying users).",
      "properties": {
        "callEndingSoonWarningTime": {
          "format": "google-datetime",
          "description": "Time when client should show message that the call is ending soon.",
          "type": "string"
        },
        "showUpgradePromos": {
          "description": "This boolean is used by clients to decide whether the user should be shown promos to upgrade.",
          "type": "boolean"
        },
        "callEndingTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time when the call will end if the user does not upgrade (after in-call upgrade support check has been implemented)."
        }
      },
      "type": "object",
      "id": "PaygateInfo"
    },
    "AppsDynamiteSharedSuggestionsSuggestionItem": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "AppsDynamiteSharedSuggestionsSuggestionItem",
      "description": "A suggestion item. Only supports text for now."
    },
    "MessageId": {
      "id": "MessageId",
      "description": "Primary key for Message resource.",
      "properties": {
        "parentId": {
          "description": "ID of the Message's immediate parent.",
          "$ref": "MessageParentId"
        },
        "messageId": {
          "type": "string",
          "description": "Opaque, server-assigned ID of the Message. While this ID is guaranteed to be unique within the Space, it's not guaranteed to be globally unique."
        }
      },
      "type": "object"
    },
    "DataLossPreventionMetadata": {
      "type": "object",
      "properties": {
        "warnAcknowledged": {
          "description": "Flag set by client on message resend to bypass WARN violation.",
          "type": "boolean"
        },
        "dlpScanSummary": {
          "$ref": "DlpScanSummary",
          "description": "The DLP scan summary that should only be set after the message is scanned in the Chat backend."
        }
      },
      "description": "Annotation metadata for Data Loss Prevention that pertains to DLP violation on message send or edit events. It is used for client -\u003e BE communication and other downstream process in BE (e.g. storage and audit logging), and it should never be returned to the client.",
      "id": "DataLossPreventionMetadata"
    },
    "Toolbar": {
      "description": "The Toolbar markup has been deprecated. The information is now specified in the manifest.",
      "properties": {
        "color": {
          "type": "string",
          "description": "Background color of the toolbar in RBG hex representation."
        },
        "iconUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "Toolbar"
    },
    "ListSearchApplicationsResponse": {
      "properties": {
        "searchApplications": {
          "items": {
            "$ref": "SearchApplication"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListSearchApplicationsResponse"
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemNudge": {
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemNudge",
      "properties": {
        "nudgeType": {
          "description": "Nudge type of the nudge feed item.",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "REPLY",
            "FOLLOW_UP"
          ],
          "enumDescriptions": [
            "",
            "The message receiver is nudged since the message may require a reply.",
            "The message creator is nudged since the message may require a follow-up."
          ]
        }
      },
      "type": "object",
      "description": "Existence of this attribute indicates that the AF item is for a message nudge item."
    },
    "EventAnnotation": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "EventAnnotation"
    },
    "ResourceRoleProto": {
      "properties": {
        "objectId": {
          "type": "string"
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        },
        "applicationId": {
          "type": "string"
        },
        "objectPart": {
          "type": "string"
        }
      },
      "id": "ResourceRoleProto",
      "type": "object",
      "description": "A type of sharing target that points to some resource's ACL. Used to refer to the set of Principals that have the given privilege ('role_id') for the given resource ('application_id', 'object_id', 'object_part'). The meaning of 'role_id' is interpreted only by implementations of AclRpcService and is usually dependent on 'application_id' All fields except object_part are required. If present, object_part must be non-empty."
    },
    "DoublePropertyOptions": {
      "type": "object",
      "properties": {
        "operatorOptions": {
          "$ref": "DoubleOperatorOptions",
          "description": "If set, describes how the double should be used as a search operator."
        }
      },
      "description": "The options for double properties.",
      "id": "DoublePropertyOptions"
    },
    "ResponseDebugInfo": {
      "description": "Debugging information about the response.",
      "type": "object",
      "properties": {
        "enabledExperiments": {
          "description": "Experiments enabled in QAPI.",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "formattedDebugInfo": {
          "type": "string",
          "description": "General debug info formatted for display."
        }
      },
      "id": "ResponseDebugInfo"
    },
    "BabelPlaceholderMetadata": {
      "description": "Annotation metadata for Babel-only items that signals which type of placeholder message should be displayed in Babel clients.",
      "type": "object",
      "id": "BabelPlaceholderMetadata",
      "properties": {
        "editMetadata": {
          "$ref": "EditMetadata"
        },
        "hangoutVideoMetadata": {
          "$ref": "HangoutVideoEventMetadata"
        },
        "deleteMetadata": {
          "$ref": "DeleteMetadata"
        }
      }
    },
    "AppsDynamiteSharedUserBlockRelationship": {
      "properties": {
        "hasBlockedRequester": {
          "type": "boolean"
        },
        "isBlockedByRequester": {
          "type": "boolean"
        }
      },
      "description": "User-block relationship",
      "id": "AppsDynamiteSharedUserBlockRelationship",
      "type": "object"
    },
    "SortOptions": {
      "type": "object",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable."
        },
        "sortOrder": {
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "ASCENDING",
            "DESCENDING"
          ],
          "type": "string",
          "description": "Ascending is the default sort order"
        }
      },
      "id": "SortOptions"
    },
    "GoogleChatV1ContextualAddOnMarkup": {
      "properties": {
        "cards": {
          "type": "array",
          "description": "A list of cards. A card must contain a header and at least 1 section.",
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkupCard"
          }
        }
      },
      "id": "GoogleChatV1ContextualAddOnMarkup",
      "type": "object",
      "description": "The markup for developers to specify the contents of a contextual AddOn."
    },
    "SearchApplicationUserStats": {
      "id": "SearchApplicationUserStats",
      "properties": {
        "oneDayActiveUsersCount": {
          "format": "int64",
          "description": "The count of unique active users in the past one day",
          "type": "string"
        },
        "thirtyDaysActiveUsersCount": {
          "format": "int64",
          "type": "string",
          "description": "The count of unique active users in the past thirty days"
        },
        "sevenDaysActiveUsersCount": {
          "format": "int64",
          "description": "The count of unique active users in the past seven days",
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned."
        }
      },
      "type": "object"
    },
    "DoubleOperatorOptions": {
      "description": "Used to provide a search operator for double properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "type": "object",
      "id": "DoubleOperatorOptions",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to use the double property in sorting or as a facet. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      }
    },
    "HtmlValues": {
      "description": "List of html values.",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The maximum allowable length for html values is 2048 characters."
        }
      },
      "id": "HtmlValues",
      "type": "object"
    },
    "RenameEvent": {
      "type": "object",
      "properties": {
        "originalName": {
          "type": "string"
        },
        "newName": {
          "type": "string"
        }
      },
      "id": "RenameEvent"
    },
    "Snippet": {
      "type": "object",
      "description": "Snippet of the search result, which summarizes the content of the resulting page.",
      "properties": {
        "snippet": {
          "type": "string",
          "description": "The snippet of the document. The snippet of the document. May contain escaped HTML character that should be unescaped prior to rendering."
        },
        "matchRanges": {
          "type": "array",
          "description": "The matched ranges in the snippet.",
          "items": {
            "$ref": "MatchRange"
          }
        }
      },
      "id": "Snippet"
    },
    "AppsDynamiteSharedTasksAnnotationDataTaskProperties": {
      "id": "AppsDynamiteSharedTasksAnnotationDataTaskProperties",
      "description": "All relevant task properties for a Chat message.",
      "properties": {
        "title": {
          "description": "The title of the task.",
          "type": "string"
        },
        "startDate": {
          "description": "Set if the task has a date but no time. Source of truth in Tasks BE: http://shortn/_wyT7eB4Ixv",
          "$ref": "Date"
        },
        "description": {
          "type": "string",
          "description": "The description of the task. If Task original description's length is greater than 1024, then Task BE sends the truncated description to Dynamite Integration Server."
        },
        "deleted": {
          "description": "Whether the task is marked as deleted.",
          "type": "boolean"
        },
        "completed": {
          "type": "boolean",
          "description": "Whether the task is marked as completed."
        },
        "assignee": {
          "$ref": "UserId",
          "description": "Obfuscated user ID of new assignee. Not set if the task doesn't have an assignee."
        },
        "startTime": {
          "description": "Set if the task has both a date and a time. Source of truth in Tasks BE: http://shortn/_u6cr0F5ttE",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DriveMetadata": {
      "type": "object",
      "description": "Annotation metadata for Drive artifacts.",
      "properties": {
        "encryptedDocId": {
          "type": "boolean",
          "description": "Indicates whether the Drive link contains an encrypted doc ID. If true, Dynamite should not attempt to query the doc ID in Drive Service. See go/docid-encryption for details."
        },
        "canShare": {
          "type": "boolean",
          "description": "Can the current user share this resource"
        },
        "driveState": {
          "enumDescriptions": [
            "Default value",
            "File in My Drive",
            "File in Team Drive",
            "File in someone else's Drive, but is shared with the current user",
            "File not in drive"
          ],
          "enum": [
            "DRIVE_STATE_UNSPECIFIED",
            "IN_MY_DRIVE",
            "IN_TEAM_DRIVE",
            "SHARED_IN_DRIVE",
            "NOT_IN_DRIVE"
          ],
          "type": "string"
        },
        "urlFragment": {
          "type": "string",
          "description": "Url string fragment that generally indicates the specific location in the linked file. Example: #header=h.123abc456. If the fragment is not present this will not be present and therefore default to an empty string. The \"#\" will not be included."
        },
        "title": {
          "type": "string",
          "description": "Title of the Drive Resource"
        },
        "shortcutAuthorizedItemId": {
          "$ref": "AuthorizedItemId",
          "description": "Shortcut ID of this drive file in the shared drive, which is associated with a named room this file was shared in. Shortcuts will not be created for DMs or unnamed rooms. This is populated after the DriveMetadata is migrated to shared drive. go/chat-shared-drive-uploads."
        },
        "shouldNotRender": {
          "description": "If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip.",
          "type": "boolean"
        },
        "thumbnailHeight": {
          "format": "int32",
          "description": "Thumbnail image of the Drive Resource",
          "type": "integer"
        },
        "wrappedResourceKey": {
          "$ref": "WrappedResourceKey",
          "description": "This is considered SPII and should not be logged."
        },
        "legacyUploadMetadata": {
          "$ref": "LegacyUploadMetadata",
          "description": "Only present if this DriveMetadata is converted from an UploadMetadata."
        },
        "isDownloadRestricted": {
          "description": "Deprecated. Whether the setting to restrict downloads is enabled for this file. This was previously used to determine whether to hide the download and print buttons in the UI, but is no longer used by clients, because Projector now independently queries Drive to ensure that we have the most up-to-date value.",
          "type": "boolean"
        },
        "aclFixStatus": {
          "$ref": "AclFixStatus"
        },
        "canView": {
          "type": "boolean",
          "description": "Can the current user view this resource"
        },
        "organizationDisplayName": {
          "description": "The display name of the organization owning the Drive item.",
          "type": "string"
        },
        "embedUrl": {
          "$ref": "TrustedResourceUrlProto",
          "readOnly": true,
          "description": "Output only. Trusted Resource URL for drive file embedding."
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "Thumbnail image of the Drive Resource"
        },
        "thumbnailWidth": {
          "description": "Thumbnail image of the Drive Resource",
          "format": "int32",
          "type": "integer"
        },
        "mimetype": {
          "type": "string",
          "description": "Mimetype of the Drive Resource"
        },
        "encryptedResourceKey": {
          "type": "string",
          "description": "This is deprecated and unneeded. TODO (b/182479059): Remove this."
        },
        "id": {
          "type": "string",
          "description": "Drive resource ID of the artifact."
        },
        "externalMimetype": {
          "description": "External mimetype of the Drive Resource (Useful for creating Drive URL) See: http://b/35219462",
          "type": "string"
        },
        "isOwner": {
          "type": "boolean",
          "description": "If the current user is the Drive file's owner. The field is currently only set for Annotations for the ListFiles action (as opposed to fetching Topics/Messages with Drive annotations)."
        },
        "canEdit": {
          "description": "Can the current user edit this resource",
          "type": "boolean"
        },
        "aclFixRequest": {
          "$ref": "AclFixRequest"
        },
        "driveAction": {
          "type": "string",
          "enumDescriptions": [
            "No organize action should be shown.",
            "Show \"Add to Drive\" button, for adding file that doesn't exist in Drive to Drive. Note that deleted Drive files that still exist (i.e. in your Trash) will still be ORGANIZE (this is consistent with Gmail Drive attachments).",
            "Show \"Move\" button, for organizing a Drive file the user has permission to move.",
            "Show \"Add shortcut\" button, for adding a shortcut to a Drive file the user does not have permission to move.",
            "Show \"Add another shortcut\" button, for Drive files the user has already created a shortcut to."
          ],
          "description": "DriveAction for organizing this file in Drive. If the user does not have access to the Drive file, the value will be DriveAction.DRIVE_ACTION_UNSPECIFIED. This field is only set when part of a FileResult in a ListFilesResponse.",
          "enum": [
            "DRIVE_ACTION_UNSPECIFIED",
            "ADD_TO_DRIVE",
            "ORGANIZE",
            "ADD_SHORTCUT",
            "ADD_ANOTHER_SHORTCUT"
          ]
        }
      },
      "id": "DriveMetadata"
    },
    "WrappedResourceKey": {
      "type": "object",
      "description": "A wrapper around a raw resource key. The secret should never be logged, and this proto annotates those secret fields to ensure that they are not. Clients are encouraged to use this proto rather than defining their own, to ensure that secrets are correctly annotated.",
      "properties": {
        "resourceKey": {
          "description": "Resource key of the Drive item. This field should be unset if, depending on the context, the item does not have a resource key, or if none was specified. This must never be logged.",
          "type": "string"
        }
      },
      "id": "WrappedResourceKey"
    },
    "GetCustomerUserStatsResponse": {
      "type": "object",
      "properties": {
        "stats": {
          "type": "array",
          "items": {
            "$ref": "CustomerUserStats"
          }
        }
      },
      "id": "GetCustomerUserStatsResponse"
    },
    "PhoneAccess": {
      "properties": {
        "pin": {
          "type": "string",
          "description": "The PIN that users must enter after dialing the given number. The PIN consists of only decimal digits and the length may vary."
        },
        "formattedPhoneNumber": {
          "type": "string",
          "description": "The phone number to dial for this meeting space in INTERNATIONAL format. Full phone number with a leading '+' character and whitespace separations."
        },
        "phoneNumber": {
          "description": "The phone number to dial for this meeting space in E.164 format. Full phone number with a leading '+' character.",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP 47/LDML language code for the language associated with this phone access. To be parsed by the i18n LanguageCode utility. Examples: \"es-419\" for Latin American Spanish, \"fr-CA\" for Canadian French."
        },
        "regionCode": {
          "description": "The CLDR/ISO 3166 region code for the country associated with this phone access. To be parsed by the i18n RegionCode utility. Example: \"SE\" for Sweden.",
          "type": "string"
        }
      },
      "description": "Phone access contains information required to dial into a conference using a regional phone number and a PIN that is specific to that phone number.",
      "id": "PhoneAccess",
      "type": "object"
    },
    "Card": {
      "id": "Card",
      "properties": {
        "fixedFooter": {
          "$ref": "FixedFooter"
        },
        "header": {
          "$ref": "CardHeader"
        },
        "peekCardHeader": {
          "description": "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards.",
          "$ref": "CardHeader"
        },
        "cardActions": {
          "items": {
            "$ref": "CardAction"
          },
          "type": "array"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "Section"
          }
        },
        "displayStyle": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "DISPLAY_STYLE_UNSPECIFIED",
            "PEEK",
            "REPLACE"
          ]
        },
        "name": {
          "description": "Name of the card used in CardNavigation.pop_to_card_name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrincipalProto": {
      "properties": {
        "mdbUser": {
          "$ref": "MdbUserProto",
          "description": "scope = MDB_USER"
        },
        "rbacSubject": {
          "$ref": "RbacSubjectProto",
          "description": "scope = RBAC_SUBJECT"
        },
        "capTokenHolder": {
          "$ref": "CapTokenHolderProto",
          "description": "scope = CAP_TOKEN_HOLDER"
        },
        "gaiaGroup": {
          "description": "scope = GAIA_GROUP",
          "$ref": "GaiaGroupProto"
        },
        "oauthConsumer": {
          "description": "scope = OAUTH_CONSUMER;",
          "$ref": "OAuthConsumerProto"
        },
        "event": {
          "$ref": "EventProto",
          "description": "scope = EVENT"
        },
        "mdbGroup": {
          "description": "scope = MDB_GROUP",
          "$ref": "MdbGroupProto"
        },
        "ldapGroup": {
          "description": "scope = LDAP_GROUP",
          "$ref": "LdapGroupProto"
        },
        "host": {
          "$ref": "HostProto",
          "description": "scope = HOST"
        },
        "rbacRole": {
          "description": "scope = RBAC_ROLE",
          "$ref": "RbacRoleProto"
        },
        "socialGraphNode": {
          "$ref": "SocialGraphNodeProto",
          "description": "scope = SOCIAL_GRAPH_NODE"
        },
        "square": {
          "$ref": "SquareProto",
          "description": "scope = SQUARE"
        },
        "chat": {
          "$ref": "ChatProto",
          "description": "scope = CHAT"
        },
        "youtubeUser": {
          "description": "scope = YOUTUBE_USER",
          "$ref": "YoutubeUserProto"
        },
        "scope": {
          "enum": [
            "INVALID",
            "GAIA_USER",
            "GAIA_GROUP",
            "LDAP_USER",
            "LDAP_GROUP",
            "MDB_USER",
            "MDB_GROUP",
            "POSTINI_USER",
            "CONTACT_GROUP",
            "SIMPLE_SECRET_HOLDER",
            "SIGNING_KEY_POSSESSOR",
            "ALL_AUTHENTICATED_USERS",
            "OAUTH_CONSUMER",
            "HOST",
            "SOCIAL_GRAPH_NODE",
            "EMAIL_OWNER",
            "CAP_TOKEN_HOLDER",
            "CIRCLE",
            "SQUARE",
            "EVENT",
            "RESOURCE_ROLE",
            "CHAT",
            "YOUTUBE_USER",
            "UNUSED_ZWIEBACK_SESSION",
            "ZWIEBACK_SESSION",
            "RBAC_ROLE",
            "RBAC_SUBJECT",
            "CLOUD_PRINCIPAL"
          ],
          "description": "This is only optional because required enums cannot be extended. Currently required.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "next tag: 29"
          ],
          "type": "string"
        },
        "resourceRole": {
          "$ref": "ResourceRoleProto",
          "description": "scope = RESOURCE_ROLE"
        },
        "circle": {
          "description": "scope = CIRCLE",
          "$ref": "CircleProto"
        },
        "postiniUser": {
          "description": "scope = POSTINI_USER",
          "$ref": "PostiniUserProto"
        },
        "ldapUser": {
          "$ref": "LdapUserProto",
          "description": "scope = LDAP_USER"
        },
        "signingKeyPossessor": {
          "description": "scope = SIGNING_KEY_POSSESSOR",
          "$ref": "SigningKeyPossessorProto"
        },
        "zwiebackSession": {
          "description": "scope = ZWIEBACK_SESSION",
          "$ref": "ZwiebackSessionProto"
        },
        "contactGroup": {
          "description": "scope = CONTACT_GROUP",
          "$ref": "ContactGroupProto"
        },
        "simpleSecretHolder": {
          "$ref": "SimpleSecretHolderProto",
          "description": "scope = SIMPLE_SECRET_HOLDER"
        },
        "emailOwner": {
          "description": "scope = EMAIL_OWNER",
          "$ref": "EmailOwnerProto"
        },
        "gaiaUser": {
          "description": "scope = GAIA_USER",
          "$ref": "GaiaUserProto"
        },
        "cloudPrincipal": {
          "description": "scope = CLOUD_PRINCIPAL",
          "$ref": "CloudPrincipalProto"
        },
        "allAuthenticatedUsers": {
          "description": "scope = ALL_AUTHENTICATED_USERS",
          "$ref": "AllAuthenticatedUsersProto"
        }
      },
      "type": "object",
      "description": "A Principal represents something to which permissions are assigned, often but not always a user or group of some kind. It is most appropriate for use in ACLs and authorization checks. Callers should prefer to use the wrapper classes in google3/security/credentials/public/principal.h google3/java/com/google/security/credentials/Principal.java google3/security/credentials/go/principal.go unless direct proto access is essential. If you update this protocol buffer, please update the wrapper classes as well.",
      "id": "PrincipalProto"
    },
    "QueryCountByStatus": {
      "id": "QueryCountByStatus",
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "statusCode": {
          "format": "int32",
          "description": "This represents the http status code.",
          "type": "integer"
        }
      }
    },
    "AppsDynamiteSharedDlpMetricsMetadata": {
      "properties": {
        "dlpStatus": {
          "enumDescriptions": [
            "",
            "Rule fetch and evaluation are skipped because DLP experiment is not enabled.",
            "Rule fetch and evaluation are skipped because there is no rule to be fetched (e.g. message is sent from a consumer, or there is no message.)",
            "Rule fetch happened, but rule evalution is skipped because the fetch returned no rules.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable.",
            "Rule fetch and evaluation were performed and completed successfully.",
            "DLP scan was attempted but timed out.",
            "Generic DLP failure. This case covers any other errors/exceptions in the Chat backend that caused the DLP scan to fail."
          ],
          "type": "string",
          "description": "[required] Describes the DLP status of message send and attachment upload events.",
          "enum": [
            "DLP_STATUS_UNKNOWN",
            "DLP_DISABLED",
            "DLP_ENABLED_NO_RULE_FETCH",
            "DLP_ENABLED_RULES_FETCHED_NO_RULES",
            "DLP_ENABLED_RULES_FETCHED_NO_APPLICABLE_RULES",
            "DLP_ENABLED_RULES_FETCHED_AND_EVALUATED",
            "DLP_ENABLED_SCAN_TIMEOUT",
            "DLP_ENABLED_SCAN_FAILED"
          ]
        }
      },
      "type": "object",
      "description": "LINT.IfChange",
      "id": "AppsDynamiteSharedDlpMetricsMetadata"
    },
    "CustomerQueryStats": {
      "id": "CustomerQueryStats",
      "type": "object",
      "properties": {
        "date": {
          "description": "The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        },
        "queryCountByStatus": {
          "items": {
            "$ref": "QueryCountByStatus"
          },
          "type": "array"
        }
      }
    },
    "MessageProps": {
      "type": "object",
      "id": "MessageProps",
      "properties": {
        "babelProps": {
          "$ref": "BabelMessageProps"
        }
      },
      "description": "Container for storing properties applicable to messages. For now (until storage consolidation is complete), it will only be used for babel props. In the future it could be used to house Dynamite properties for experimenting/rapid prototyping."
    },
    "YoutubeUserProto": {
      "type": "object",
      "id": "YoutubeUserProto",
      "properties": {
        "youtubeUserId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SuggestResponse": {
      "id": "SuggestResponse",
      "properties": {
        "suggestResults": {
          "items": {
            "$ref": "SuggestResult"
          },
          "description": "List of suggestions.",
          "type": "array"
        }
      },
      "description": "Response of the suggest API.",
      "type": "object"
    },
    "StreamingSessionInfo": {
      "id": "StreamingSessionInfo",
      "description": "Information about a streaming session in conference.",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "This is the REST name and unique identifier of this streaming session and has the form `spaces//recordings/` This is returned whenever status is either `STARTING` or `STARTED`."
        },
        "viewerAccessPolicy": {
          "type": "string",
          "enum": [
            "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
            "ORGANIZATION",
            "PUBLIC"
          ],
          "description": "The policy that controls who can view the broadcast. This setting applies for broadcast session.",
          "enumDescriptions": [
            "Used only when broadcast is not enabled, or an unknown enum value is used.",
            "Only authenticated Google accounts belonging to the same organization as the meeting organizer can access the broadcast.",
            "Anyone with the broadcast view URL can access the broadcast."
          ]
        },
        "status": {
          "type": "string",
          "enumDescriptions": [
            "This value is never used.",
            "The streaming session is inactive. This means either it's not started yet or it's already stopped.",
            "The streaming session is about to begin. The status will be updated to LIVE when the streaming session actually starts, which happens when all the backend plumbing is set up.",
            "The streaming session is live. Any media sent to the conference may be included in the resulting recording/broadcast."
          ],
          "enum": [
            "STATUS_UNSPECIFIED",
            "INACTIVE",
            "STARTING",
            "LIVE"
          ],
          "description": "The current status of this streaming session. This can be used by clients to show session status indicator and/or notification."
        },
        "applicationType": {
          "type": "string",
          "description": "The application type of the current streaming session.",
          "enumDescriptions": [
            "This is never used.",
            "A meeting recording saved to a video file in Google Drive.",
            "A *Google Live* managed stream.",
            "A meeting broadcast."
          ],
          "enum": [
            "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
            "RECORDING",
            "GLIVE_STREAM",
            "BROADCAST"
          ]
        },
        "ownerDisplayName": {
          "description": "The display name of the owner of the recording output. It's only set when there will be uploaded recordings. Currently, it's only set when application type is RECORDING or GLIVE_STREAM.",
          "type": "string"
        },
        "latestSessionEvent": {
          "$ref": "SessionEvent",
          "description": "The latest streaming session event. This can be used by clients to help explain what is going on, why recording stopped, etc. This will always be set to a valid event and consistent with the status. It can be set when current session is inactive to indicate latest event that makes current session to become inactive."
        },
        "viewerStats": {
          "description": "Contains information about viewers of the livestream. It is only set when application type is BROADCAST.",
          "$ref": "StreamViewerStats"
        },
        "trainingEnabled": {
          "type": "boolean",
          "description": "When true, this recording may be used for training new transcription models."
        }
      },
      "type": "object"
    },
    "QueryInterpretation": {
      "id": "QueryInterpretation",
      "type": "object",
      "properties": {
        "interpretationType": {
          "type": "string",
          "enumDescriptions": [
            "Neither the natural language interpretation, nor a broader version of the query is used to fetch the search results.",
            "The results from original query are blended with other results. The reason for blending these other results with the results from original query is populated in the 'Reason' field below.",
            "The results from original query are replaced. The reason for replacing the results from original query is populated in the 'Reason' field below."
          ],
          "enum": [
            "NONE",
            "BLEND",
            "REPLACE"
          ]
        },
        "interpretedQuery": {
          "type": "string",
          "description": "The interpretation of the query used in search. For example, queries with natural language intent like \"email from john\" will be interpreted as \"from:john source:mail\". This field will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY."
        },
        "reason": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "QUERY_HAS_NATURAL_LANGUAGE_INTENT",
            "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY"
          ],
          "enumDescriptions": [
            "",
            "Natural language interpretation of the query is used to fetch the search results.",
            "Query and document terms similarity is used to selectively broaden the query to retrieve additional search results since enough results were not found for the user query. Interpreted query will be empty for this case."
          ],
          "description": "The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE."
        }
      }
    },
    "GoogleChatV1WidgetMarkupButton": {
      "properties": {
        "textButton": {
          "$ref": "GoogleChatV1WidgetMarkupTextButton",
          "description": "A button with text and onclick action."
        },
        "imageButton": {
          "description": "A button with image and onclick action.",
          "$ref": "GoogleChatV1WidgetMarkupImageButton"
        }
      },
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupButton",
      "description": "A button. Can be a text button or an image button."
    },
    "AppsDynamiteSharedJustification": {
      "type": "object",
      "description": "Data for rendering a justification for a document.",
      "properties": {
        "documentOwner": {
          "$ref": "AppsDynamiteSharedJustificationPerson",
          "description": "Owner of the document."
        },
        "actionTime": {
          "format": "google-datetime",
          "description": "Time the action took place.",
          "type": "string"
        },
        "topics": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Words or phrases from the user's query that describes the document content. (Ex: Users query is \"Can you share the document about Bullseye?\" the extracted topic would be \"Bullseye\")."
        },
        "actionType": {
          "description": "Type of action performed on the document.",
          "enumDescriptions": [
            "Unspecified action.",
            "Commented on document.",
            "Created document.",
            "Edited document.",
            "Presented document.",
            "Shared document.",
            "Viewed document.",
            "Resolved comment on document.",
            "Sent document over chat/email."
          ],
          "type": "string",
          "enum": [
            "ACTION_TYPE_UNSPECIFIED",
            "COMMENTED",
            "CREATED",
            "EDITED",
            "PRESENTED",
            "SHARED",
            "VIEWED",
            "COMMENT_RESOLVED",
            "SENT"
          ]
        }
      },
      "id": "AppsDynamiteSharedJustification"
    },
    "StreamViewerStats": {
      "description": "Information about viewers of the stream.",
      "id": "StreamViewerStats",
      "properties": {
        "estimatedViewerCount": {
          "type": "string",
          "format": "int64",
          "description": "The estimate of the current viewer count."
        }
      },
      "type": "object"
    },
    "ProcessingError": {
      "id": "ProcessingError",
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "The description of the error."
        },
        "code": {
          "type": "string",
          "description": "Error code indicating the nature of the error.",
          "enumDescriptions": [
            "Input only value. Use this value in Items.",
            "Item's ACL, metadata, or content is malformed or in invalid state. FieldViolations contains more details on where the problem is.",
            "Countent format is unsupported.",
            "Items with incomplete ACL information due to inheriting other items with broken ACL or having groups with unmapped descendants.",
            "ACL inheritance graph formed a cycle."
          ],
          "enum": [
            "PROCESSING_ERROR_CODE_UNSPECIFIED",
            "MALFORMED_REQUEST",
            "UNSUPPORTED_CONTENT_FORMAT",
            "INDIRECT_BROKEN_ACL",
            "ACL_CYCLE"
          ]
        },
        "fieldViolations": {
          "description": "In case the item fields are invalid, this field contains the details about the validation errors.",
          "type": "array",
          "items": {
            "$ref": "FieldViolation"
          }
        }
      },
      "type": "object"
    },
    "SearchItemsByViewUrlResponse": {
      "type": "object",
      "id": "SearchItemsByViewUrlResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Item"
          }
        }
      }
    },
    "FacetBucket": {
      "type": "object",
      "properties": {
        "percentage": {
          "description": "Percent of results that match the bucket value. The returned value is between (0-100], and is rounded down to an integer if fractional. If the value is not explicitly returned, it represents a percentage value that rounds to 0. Percentages are returned for all searches, but are an estimate. Because percentages are always returned, you should render percentages instead of counts.",
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "$ref": "Value"
        },
        "count": {
          "format": "int32",
          "description": "Number of results that match the bucket value. Counts are only returned for searches when count accuracy is ensured. Cloud Search does not guarantee facet counts for any query and facet counts might be present only intermittently, even for identical queries. Do not build dependencies on facet count existence; instead use facet ount percentages which are always returned.",
          "type": "integer"
        }
      },
      "id": "FacetBucket",
      "description": "A bucket in a facet is the basic unit of operation. A bucket can comprise either a single value OR a contiguous range of values, depending on the type of the field bucketed. FacetBucket is currently used only for returning the response object."
    },
    "AppsDynamiteSharedDateTimePicker": {
      "type": "object",
      "properties": {
        "valueMsEpoch": {
          "description": "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am.",
          "type": "string",
          "format": "int64"
        },
        "label": {
          "type": "string",
          "description": "The label for the field that displays to the user."
        },
        "name": {
          "type": "string",
          "description": "The name of the text input that's used in formInput, and uniquely identifies this input."
        },
        "type": {
          "description": "The type of the date/time picker.",
          "enum": [
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ],
          "type": "string",
          "enumDescriptions": [
            "The user can select a date and time.",
            "The user can only select a date.",
            "The user can only select a time."
          ]
        },
        "onChangeAction": {
          "$ref": "AppsDynamiteSharedAction",
          "description": "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation."
        },
        "timezoneOffsetDate": {
          "type": "integer",
          "format": "int32",
          "description": "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side."
        }
      },
      "description": "The widget that lets users to specify a date and time.",
      "id": "AppsDynamiteSharedDateTimePicker"
    },
    "Name": {
      "id": "Name",
      "type": "object",
      "description": "A person's name.",
      "properties": {
        "displayName": {
          "description": "The read-only display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
          "type": "string"
        }
      }
    },
    "BooleanOperatorOptions": {
      "properties": {
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the boolean property. For example, if operatorName is *closed* and the property's name is *isClosed*, then queries like *closed:\u003cvalue\u003e* show results only where the value of the property named *isClosed* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Used to provide a search operator for boolean properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "id": "BooleanOperatorOptions"
    },
    "IntegerPropertyOptions": {
      "type": "object",
      "properties": {
        "minimumValue": {
          "type": "string",
          "format": "int64",
          "description": "The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value."
        },
        "orderedRanking": {
          "description": "Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.",
          "type": "string",
          "enum": [
            "NO_ORDER",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "There is no ranking order for the property. Results are not adjusted by this property's value.",
            "This property is ranked in ascending order. Lower values indicate lower ranking.",
            "This property is ranked in descending order. Lower values indicate higher ranking."
          ]
        },
        "maximumValue": {
          "description": "The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.",
          "format": "int64",
          "type": "string"
        },
        "operatorOptions": {
          "description": "If set, describes how the integer should be used as a search operator.",
          "$ref": "IntegerOperatorOptions"
        }
      },
      "id": "IntegerPropertyOptions",
      "description": "The options for integer properties."
    },
    "DriveTimeSpanRestrict": {
      "id": "DriveTimeSpanRestrict",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "TODAY",
            "YESTERDAY",
            "LAST_7_DAYS",
            "LAST_30_DAYS",
            "LAST_90_DAYS"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "Not Enabled",
            "Not Enabled"
          ]
        }
      },
      "description": "The time span search restrict (e.g. \"after:2017-09-11 before:2017-09-12\")."
    },
    "DeepLinkData": {
      "description": "Deep-linking data is used to construct a deep-link URI for an activity or frame's embed, such that on click, the user is taken to the right place in a mobile app. If the app is not installed, the user is taken to the app store. If not on mobile, an analogous web uri is used.",
      "type": "object",
      "id": "DeepLinkData",
      "properties": {
        "client": {
          "description": "The data for a Google API Console client is entered by a developer during client registration and is stored in PackagingService.",
          "type": "array",
          "items": {
            "$ref": "PackagingServiceClient"
          }
        },
        "url": {
          "description": "Analogous web presence. Used as desktop fallback or when no native link data is present.",
          "type": "string"
        },
        "deepLinkId": {
          "description": "The ID for non-URL content. Embeds may either have no analogous web presence or prefer a native mobile experience if supported. In the case of no web presence, instead of setting the \"url\" field of an embed, such developers will set this field and other content fields, e.g. thumbnail, title, description. If set, this field is used to construct the deep-link URI. Note that the native experience is preferred over the web link and the web link is used as a fallback.",
          "type": "string"
        },
        "appId": {
          "type": "string",
          "description": "Application ID (or project ID) from Google API Console.",
          "format": "int64"
        }
      }
    },
    "AppsDynamiteSharedOnClick": {
      "properties": {
        "openLink": {
          "description": "If specified, this onClick triggers an open link action.",
          "$ref": "AppsDynamiteSharedOpenLink"
        },
        "action": {
          "$ref": "AppsDynamiteSharedAction",
          "description": "If specified, an action is triggered by this onClick."
        },
        "openDynamicLinkAction": {
          "description": "An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
          "$ref": "AppsDynamiteSharedAction"
        }
      },
      "id": "AppsDynamiteSharedOnClick",
      "type": "object"
    },
    "TextParagraph": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "TextParagraph"
    },
    "UploadItemRef": {
      "description": "Represents an upload session reference. This reference is created via upload method. This reference is valid for 30 days after its creation. Updating of item content may refer to this uploaded content via contentDataRef.",
      "id": "UploadItemRef",
      "properties": {
        "name": {
          "description": "The name of the content reference. The maximum length is 2048 characters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecordingEvent": {
      "id": "RecordingEvent",
      "properties": {
        "type": {
          "enumDescriptions": [
            "This is never used.",
            "Deprecated, use detailed user actions instead.",
            "Recording was started or is being started by a user.",
            "Recording was stopped by a user.",
            "Recording was cancelled by a user.",
            "Recording was cancelled by the server because of a failure during recording initialization.",
            "Recording was cancelled by the server because the recording initiator left the conference during initialization. When the initiator leaves after the recording is started, no event is triggered.",
            "Recording is about to be stopped by the server because the recording is about to reach the maximum duration.",
            "Recording was stopped because the recording reached the maximum duration.",
            "Recording was stopped because there were no devices left in the conference.",
            "Recording was stopped because of an internal error."
          ],
          "enum": [
            "RECORDING_EVENT_UNSPECIFIED",
            "USER_ACTION",
            "STARTED_BY_USER",
            "STOPPED_BY_USER",
            "CANCELLED_BY_USER",
            "CANCELLED_INITIALIZATION_FAILED",
            "CANCELLED_INITIATOR_LEFT",
            "ACTIVE_ABOUT_TO_STOP_TOO_LONG",
            "STOPPED_TOO_LONG",
            "STOPPED_ALL_DEVICES_LEFT",
            "STOPPED_INTERNAL_FAILURES"
          ],
          "description": "The type of event.",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "The initiator of the latest event of the recording. It will be set for all user events (`type` is 100-199) and unset for all server events (`type` is 200-299)."
        }
      },
      "description": "A recording event is something that happens to the recording in a conference.",
      "type": "object"
    },
    "AppsDynamiteSharedSelectionInputSelectionItem": {
      "type": "object",
      "id": "AppsDynamiteSharedSelectionInputSelectionItem",
      "properties": {
        "selected": {
          "type": "boolean",
          "description": "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored."
        },
        "text": {
          "description": "The text to be displayed.",
          "type": "string"
        },
        "value": {
          "description": "The value associated with this item. The client should use this as a form input value.",
          "type": "string"
        }
      },
      "description": "The item in the switch control. A radio button, at most one of the items is selected."
    },
    "VideoInfo": {
      "description": "Next tag: 2",
      "type": "object",
      "id": "VideoInfo",
      "properties": {
        "duration": {
          "format": "int32",
          "type": "integer",
          "description": "Duration of the video in milliseconds. This field can be absent for recently uploaded video or inaccurate sometimes."
        }
      }
    },
    "CseInfo": {
      "description": "Information needed for Client-side Encryption.",
      "properties": {
        "wrappedKey": {
          "type": "string",
          "description": "The wrapped CSE key used by this conference.",
          "format": "byte"
        },
        "cseDomain": {
          "description": "CSE domain name claimed by the meeting owner's company. This field is expected to be used for display purposes only, i.e., \"Extra encryption added by $cse_domain\". It can differ from the `cse_domain` as defined elsewhere on the User, in the case of cross-domain meetings.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CseInfo"
    },
    "GoogleChatV1WidgetMarkupKeyValue": {
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupKeyValue",
      "properties": {
        "bottomLabel": {
          "type": "string",
          "description": "The text of the bottom label. Formatted text supported."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "topLabel": {
          "type": "string",
          "description": "The text of the top label. Formatted text supported."
        },
        "icon": {
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image."
        },
        "onClick": {
          "$ref": "GoogleChatV1WidgetMarkupOnClick",
          "description": "The onclick action. Only the top label, bottom label and content region are clickable."
        },
        "button": {
          "$ref": "GoogleChatV1WidgetMarkupButton",
          "description": "A button that can be clicked to trigger an action."
        },
        "contentMultiline": {
          "description": "If the content should be multiline.",
          "type": "boolean"
        },
        "content": {
          "type": "string",
          "description": "The text of the content. Formatted text supported and always required."
        }
      },
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button."
    },
    "CheckAccessResponse": {
      "id": "CheckAccessResponse",
      "type": "object",
      "properties": {
        "hasAccess": {
          "type": "boolean",
          "description": "Returns true if principal has access. Returns false otherwise."
        }
      }
    },
    "AppsDynamiteSharedCardSection": {
      "description": "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
      "properties": {
        "collapsible": {
          "description": "Indicates whether this section is collapsible. If a section is collapsible, the description must be given.",
          "type": "boolean"
        },
        "uncollapsibleWidgetsCount": {
          "format": "int32",
          "type": "integer",
          "description": "The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`."
        },
        "header": {
          "type": "string",
          "description": "The header of the section. Formatted text is supported."
        },
        "widgets": {
          "type": "array",
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "AppsDynamiteSharedWidget"
          }
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedCardSection"
    },
    "MessageAttributes": {
      "id": "MessageAttributes",
      "type": "object",
      "description": "Stores tombstone message attributes: go/tombstone-message-attributes-overview",
      "properties": {
        "isTombstone": {
          "description": "If true: message is a tombstone in the client. Default false.",
          "type": "boolean"
        }
      }
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply": {
      "properties": {
        "replyType": {
          "description": "Reply type of the thread reply feed item. The field is not persisted in storage. It's populated when constructing Activity Feed payload.",
          "type": "string",
          "enumDescriptions": [
            "",
            "The thread reply feed item is for the root message poster.",
            "The thread reply feed item is for a thread follower who's not the root message poster."
          ],
          "enum": [
            "UNSPECIFIED",
            "ROOT",
            "FOLLOWER"
          ]
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply",
      "description": "Existence of this attribute indicates that the AF item is for thread reply."
    },
    "CardHeader": {
      "type": "object",
      "properties": {
        "imageUrl": {
          "type": "string"
        },
        "imageStyle": {
          "type": "string",
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ]
        },
        "subtitle": {
          "type": "string"
        },
        "imageAltText": {
          "description": "The alternative text of this image which will be used for accessibility.",
          "type": "string"
        },
        "title": {
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines. The header is rendered in collapsed and detailed view.",
          "type": "string"
        }
      },
      "id": "CardHeader"
    },
    "Photo": {
      "properties": {
        "url": {
          "description": "The URL of the photo.",
          "type": "string"
        }
      },
      "id": "Photo",
      "type": "object",
      "description": "A person's photo."
    },
    "AppsDynamiteSharedActivityFeedAnnotationData": {
      "properties": {
        "chatItem": {
          "$ref": "AppsDynamiteSharedChatItem"
        },
        "userInfo": {
          "description": "Use shared_user_info instead.",
          "$ref": "AppsDynamiteSharedActivityFeedAnnotationDataUserInfo"
        },
        "sharedUserInfo": {
          "$ref": "UserInfo",
          "description": "Only populated on read path and should not be persisted in storage."
        },
        "activityFeedMessageId": {
          "$ref": "MessageId",
          "description": "Unique id of the Activity Feed message used by clients to implement click-to-source. This is the same messageId as the top-level id field for the Activity Feed item."
        }
      },
      "description": "Next Id: 6",
      "id": "AppsDynamiteSharedActivityFeedAnnotationData",
      "type": "object"
    },
    "AbuseReportingConfig": {
      "type": "object",
      "properties": {
        "writtenUgcAllowed": {
          "type": "boolean",
          "description": "Whether the current call may include user generated content (chat, polls, Q&A...) in its abuse reports."
        },
        "recordingAllowed": {
          "type": "boolean",
          "description": "Whether the current call may include video recordings in its abuse reports."
        }
      },
      "id": "AbuseReportingConfig",
      "description": "Abuse reporting configuration outlining what is supported in this conference."
    },
    "AppsDynamiteSharedEmoji": {
      "id": "AppsDynamiteSharedEmoji",
      "properties": {
        "customEmoji": {
          "$ref": "AppsDynamiteSharedCustomEmoji",
          "description": "A custom emoji."
        },
        "unicode": {
          "description": "A basic emoji represented by a unicode string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageCropStyle": {
      "properties": {
        "aspectRatio": {
          "description": "The aspect ratio to use if the crop type is RECTANGLE_CUSTOM.",
          "type": "number",
          "format": "double"
        },
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "description": "The crop type.",
          "type": "string"
        }
      },
      "id": "ImageCropStyle",
      "description": "Represents a crop style that can be applied to an image.",
      "type": "object"
    },
    "GoogleChatV1WidgetMarkupTextParagraph": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "GoogleChatV1WidgetMarkupTextParagraph",
      "description": "A paragraph of text. Formatted text supported."
    },
    "SafeUrlProto": {
      "type": "object",
      "id": "SafeUrlProto",
      "properties": {
        "privateDoNotAccessOrElseSafeUrlWrappedValue": {
          "type": "string",
          "description": "IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message."
        }
      },
      "description": "Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code."
    },
    "IconImage": {
      "properties": {
        "imageStyle": {
          "type": "string",
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "description": "The image cropping style. Note that icons with a CIRCLE style are rendered larger than the default icon size."
        },
        "altText": {
          "type": "string",
          "description": "The alternative text of this icon_url which will be used for accessibility."
        },
        "icon": {
          "type": "string",
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ]
        },
        "iconUrl": {
          "type": "string"
        }
      },
      "id": "IconImage",
      "type": "object"
    },
    "CustomerSessionStats": {
      "properties": {
        "searchSessionsCount": {
          "description": "The count of search sessions on the day",
          "type": "string",
          "format": "int64"
        },
        "date": {
          "description": "The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned.",
          "$ref": "Date"
        }
      },
      "type": "object",
      "id": "CustomerSessionStats"
    },
    "Attachment": {
      "properties": {
        "cardAddOnData": {
          "$ref": "AppsDynamiteSharedCard",
          "description": "Card AddOn attachment with the possibility for specifying editable widgets."
        },
        "addOnData": {
          "$ref": "GoogleChatV1ContextualAddOnMarkup",
          "description": "Revised version of Gmail AddOn attachment approved by API design review."
        },
        "deprecatedAddOnData": {
          "description": "Deprecated version of Gmail AddOn attachment.",
          "$ref": "ContextualAddOnMarkup"
        },
        "slackData": {
          "description": "Slack attachment.",
          "$ref": "AppsDynamiteV1ApiCompatV1Attachment"
        },
        "slackDataImageUrlHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The height of image url as fetched by fife. This field is asynchronously filled."
        },
        "appId": {
          "$ref": "UserId",
          "description": "The userId for the bot/app that created this data, to be used for attribution of attachments when the attachment was not created by the message sender."
        },
        "attachmentId": {
          "description": "To identify an attachment within repeated in a message",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Attachments that follow the message text.",
      "id": "Attachment"
    },
    "ChatConfig": {
      "type": "object",
      "properties": {
        "chatType": {
          "description": "The Type of chat this Conference is currently using.",
          "type": "string",
          "enumDescriptions": [
            "Chat Type has not been specified.",
            "Meets native chat.",
            "Google Chat."
          ],
          "enum": [
            "CHAT_TYPE_UNSPECIFIED",
            "MEET_CHAT",
            "GOOGLE_CHAT"
          ]
        },
        "googleChatConfig": {
          "description": "The configuration of Google Chat when selected.",
          "$ref": "GoogleChatConfig"
        }
      },
      "id": "ChatConfig",
      "description": "Configuration of the in meeting chat."
    },
    "AppsDynamiteSharedTasksMessageIntegrationPayload": {
      "properties": {},
      "id": "AppsDynamiteSharedTasksMessageIntegrationPayload",
      "type": "object",
      "description": "A payload containing Tasks metadata for rendering a live card. Currently not used by the Tasks integration."
    },
    "ItemCountByStatus": {
      "properties": {
        "count": {
          "type": "string",
          "description": "Number of items matching the status code.",
          "format": "int64"
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "CODE_UNSPECIFIED",
            "ERROR",
            "MODIFIED",
            "NEW_ITEM",
            "ACCEPTED"
          ],
          "enumDescriptions": [
            "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
            "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
            "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
            "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
            "API has accepted the up-to-date data of this item."
          ],
          "description": "Status of the items."
        },
        "indexedItemsCount": {
          "format": "int64",
          "description": "Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ItemCountByStatus"
    },
    "GSuitePrincipal": {
      "type": "object",
      "id": "GSuitePrincipal",
      "properties": {
        "gsuiteDomain": {
          "description": "This principal represents all users of the Google Workspace domain of the customer.",
          "type": "boolean"
        },
        "gsuiteUserEmail": {
          "type": "string",
          "description": "This principal references a Google Workspace user account."
        },
        "gsuiteGroupEmail": {
          "type": "string",
          "description": "This principal references a Google Workspace group name."
        }
      }
    },
    "FacetOptions": {
      "description": "Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.",
      "type": "object",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions"
        },
        "sourceName": {
          "description": "Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.",
          "type": "string"
        },
        "numFacetBuckets": {
          "type": "integer",
          "description": "Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.",
          "format": "int32"
        },
        "objectType": {
          "description": "If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.",
          "type": "string"
        }
      },
      "id": "FacetOptions"
    },
    "BorderStyle": {
      "properties": {
        "strokeColor": {
          "description": "The colors to use when the type is STROKE.",
          "type": "string"
        },
        "cornerRadius": {
          "type": "integer",
          "format": "int32",
          "description": "The corner radius for the border."
        },
        "type": {
          "description": "The border type.",
          "type": "string",
          "enum": [
            "BORDER_TYPE_NOT_SET",
            "NO_BORDER",
            "STROKE"
          ],
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ]
        }
      },
      "type": "object",
      "description": "Represents a complete border style that can be applied to widgets.",
      "id": "BorderStyle"
    },
    "StartUploadItemRequest": {
      "id": "StartUploadItemRequest",
      "properties": {
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "description": "Start upload file request.",
      "type": "object"
    },
    "ActionParameter": {
      "description": "List of string parameters that developers can specify when the above action method (in apps script) is invoked. An example use case is for 3 snooze buttons: snooze now, snooze 1 day, snooze next week. Developers can have action method = snooze() and pass the snooze type and snooze time in list of string parameters.",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "id": "ActionParameter"
    },
    "GoogleChatV1WidgetMarkupFormActionActionParameter": {
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the parameter.",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        }
      },
      "id": "GoogleChatV1WidgetMarkupFormActionActionParameter"
    },
    "YouTubeBroadcastSessionInfo": {
      "description": "Information about a YouTube broadcast session.",
      "type": "object",
      "properties": {
        "broadcastStats": {
          "$ref": "YouTubeBroadcastStats",
          "description": "Current broadcast session's statistics."
        },
        "youTubeLiveBroadcastEvent": {
          "description": "The YouTube Live broadcast event that is being streamed to.",
          "$ref": "YouTubeLiveBroadcastEvent"
        },
        "youTubeBroadcastSessionId": {
          "description": "A unique server-generated ID for the broadcast session.",
          "type": "string"
        },
        "sessionStateInfo": {
          "$ref": "SessionStateInfo",
          "description": "YouTube broadcast session's state information."
        }
      },
      "id": "YouTubeBroadcastSessionInfo"
    },
    "ZwiebackSessionProto": {
      "type": "object",
      "properties": {
        "zwiebackSessionId": {
          "format": "uint64",
          "type": "string"
        }
      },
      "id": "ZwiebackSessionProto",
      "description": "See go/zwieback. New uses of Zwieback sessions must be approved via go/zwieback-request."
    },
    "AppsDynamiteSharedAssistantDebugContext": {
      "type": "object",
      "id": "AppsDynamiteSharedAssistantDebugContext",
      "properties": {
        "query": {
          "description": "The query that triggered the resulting suggestion.",
          "type": "string"
        }
      },
      "description": "Represents info regarding suggestion debug information."
    },
    "SourceScoringConfig": {
      "type": "object",
      "description": "Set the scoring configuration. This allows modifying the ranking of results for a source.",
      "properties": {
        "sourceImportance": {
          "enum": [
            "DEFAULT",
            "LOW",
            "HIGH"
          ],
          "type": "string",
          "description": "Importance of the source.",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      },
      "id": "SourceScoringConfig"
    },
    "Provenance": {
      "type": "object",
      "id": "Provenance",
      "description": "This field records where the ItemScope was retrieved, if it was created via a web fetch.",
      "properties": {
        "inputUrl": {
          "description": "The url originally passed in the PRS request, which should be used to re-discover the content. Note that this URL may be a forwarding service or link shortener (bit.ly), so it should not be assumed to be canonical, but should be used for navigation back to the original source of the itemscope.",
          "type": "string"
        },
        "annotationBlob": {
          "type": "string",
          "format": "byte",
          "description": "Annotation blob from Annotation Service."
        },
        "itemtype": {
          "description": "Contains exact types as parsed, whether or not we recognized that type at parse time. If an itemscope is created by merging SchemaOrg markup and open graph markup then the first itemtype would be schemaorg type, the second would be open graph and so on. example: http://schema.org/VideoObject, og:video.movie Plain text; usually a URL",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "retrievedTimestampMsec": {
          "type": "string",
          "description": "The server retrieved timestamp (in msec).",
          "format": "uint64"
        },
        "retrievedUrl": {
          "description": "The final URL that was the actual source of the itemscope, after any redirects.",
          "type": "string"
        },
        "canonicalUrl": {
          "type": "string",
          "description": "Canonical url of the retrieved_url, if one was resolved during retrieval, for example, if a rel=\"canonical\" link tag was provided in the retrieved web page."
        }
      }
    },
    "ResetSearchApplicationRequest": {
      "id": "ResetSearchApplicationRequest",
      "properties": {
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "type": "object"
    },
    "UserId": {
      "id": "UserId",
      "type": "object",
      "description": "Primary key for User resource.",
      "properties": {
        "actingUserId": {
          "description": "Optional. Opaque, server-assigned ID of the user profile associated with App/user acting on behalf of the human user. This is currently only set when a 3P application is acting on the user's behalf.",
          "type": "string"
        },
        "id": {
          "description": "Opaque, server-assigned ID of the User.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Notes on HUMAN type: 1) Leaving UserId.UserType field empty will return HUMAN as default value. This is expected because all the existing UserIds are without explicitly setting UserType, most of which are HUMAN Ids. For Bot Ids we will always set BOT in UserType field. 2) DO NOT explicitly set HUMAN as type. This is a proto2 issue, that a UserId with explicitly set default value HUMAN as type is NOT equal to an id without setting the field. aka. UserId id1 = UserId.newBuilder() .setId(\"dummy\").setType(UserType.HUMAN).build(); UserId id2 = UserId.newBuilder().setId(\"dummy\").build(); AssertThat(id1).isNotEqual(id2); AssertThat(id2.getType()).isEqualTo(UserType.HUMAN);",
            ""
          ],
          "description": "Clients do not need to send UserType to Backend, but Backend will always send this field to clients per the following rule: 1. For HUMAN Ids, the field is empty but by default .getType() will return HUMAN. 2. For BOT Ids, the field is ALWAYS set to BOT.",
          "enum": [
            "HUMAN",
            "BOT"
          ],
          "type": "string"
        },
        "originAppId": {
          "description": "Optional. Identifier of the App involved (directly or on behalf of a human creator) in creating this message. This is not set if the user posted a message directly, but is used in the case of, for example, a message being generated by a 1P integration based on a user action (creating an event, creating a task etc). This should only be used on the BE. For clients, please use the field in the FE message proto instead (google3/apps/dynamite/v1/frontend/api/message.proto?q=origin_app_id).",
          "$ref": "AppId"
        }
      }
    },
    "MatchRange": {
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "Starting position of the match in the snippet."
        },
        "end": {
          "format": "int32",
          "type": "integer",
          "description": "End of the match in the snippet."
        }
      },
      "id": "MatchRange",
      "type": "object",
      "description": "Matched range of a snippet [start, end)."
    },
    "DateValues": {
      "id": "DateValues",
      "description": "List of date values.",
      "properties": {
        "values": {
          "items": {
            "$ref": "Date"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LegacyUploadMetadata": {
      "type": "object",
      "properties": {
        "uploadMetadata": {
          "description": "The blob in this UploadMetadata has been uploaded to shared drive. This UploadMetadata is no longer attached to a message. go/shared-drive-data-migration.",
          "$ref": "UploadMetadata"
        },
        "legacyUniqueId": {
          "description": "A unique ID generated from legacy UploadMetadata. This is used for interopping URLs after uploading blob to shared drive. Links in Classic might break without this. go/drive-file-attachment-interop-from-dynamite.",
          "type": "string"
        }
      },
      "id": "LegacyUploadMetadata",
      "description": "The original UploadMetadata that this DriveMetadata was converted from."
    },
    "AppsDynamiteSharedCardClickSuggestion": {
      "properties": {
        "suggestionMessageId": {
          "description": "The message_id for the message that was posted by the app/bot.",
          "$ref": "MessageId"
        },
        "actionId": {
          "type": "string",
          "description": "Identify the button/action that created the suggestion. A simple example would be a card button within the stream, or the id which can identify a specific suggestion."
        }
      },
      "type": "object",
      "description": "Card click which identifies one suggestion provided by the app/bot.",
      "id": "AppsDynamiteSharedCardClickSuggestion"
    },
    "AppsDynamiteSharedAssistantFeedbackContext": {
      "description": "Data needed to render feedback on the Assistant card",
      "properties": {
        "feedbackChips": {
          "items": {
            "$ref": "AppsDynamiteSharedAssistantFeedbackContextFeedbackChip"
          },
          "type": "array",
          "description": "Specifies a list of feedback chips to show"
        },
        "thumbsFeedback": {
          "type": "string",
          "enum": [
            "THUMBS_FEEDBACK_UNSPECIFIED",
            "NONE_SELECTED",
            "UP",
            "DOWN"
          ],
          "enumDescriptions": [
            "Unspecified thumbs state",
            "Thumbs are not selected",
            "Thumbs up selected",
            "Thumbs down selected"
          ],
          "description": "Whether the thumbs feedback is provided"
        }
      },
      "id": "AppsDynamiteSharedAssistantFeedbackContext",
      "type": "object"
    },
    "FixedFooter": {
      "id": "FixedFooter",
      "type": "object",
      "description": "A persistent (sticky) footer that is added to the bottom of the card.",
      "properties": {
        "secondaryButton": {
          "$ref": "TextButton"
        },
        "primaryButton": {
          "$ref": "TextButton"
        },
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "Button"
          }
        }
      }
    },
    "GaiaUserProto": {
      "id": "GaiaUserProto",
      "description": "A Gaia account, which may represent a user, device, service account, etc. For prod (@prod.google.com) accounts, use MdbUserProto instead.",
      "properties": {
        "userId": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StructuredDataObject": {
      "properties": {
        "properties": {
          "items": {
            "$ref": "NamedProperty"
          },
          "type": "array",
          "description": "The properties for the object. The maximum number of elements is 1000."
        }
      },
      "type": "object",
      "id": "StructuredDataObject",
      "description": "A structured data object consisting of named properties."
    },
    "ResultDebugInfo": {
      "id": "ResultDebugInfo",
      "properties": {
        "formattedDebugInfo": {
          "type": "string",
          "description": "General debug info formatted for display."
        }
      },
      "description": "Debugging information about the result.",
      "type": "object"
    },
    "IntegrationConfigUpdatedMetadata": {
      "id": "IntegrationConfigUpdatedMetadata",
      "properties": {
        "initiatorId": {
          "description": "The user whose action triggered this system message.",
          "$ref": "UserId"
        },
        "mutations": {
          "items": {
            "$ref": "IntegrationConfigMutation"
          },
          "type": "array",
          "description": "A list of updates applied on the integration config."
        }
      },
      "type": "object",
      "description": "Annotation metadata to display system message for integration config updated event. This metadata is stored in spanner, and can be dispatched to clients without any field modification or transformation."
    },
    "AppId": {
      "type": "object",
      "description": "Identifier of an App.",
      "properties": {
        "appType": {
          "description": "Enum indicating the type of App this is.",
          "type": "string",
          "enumDescriptions": [
            "",
            "3P APP eg. external Bots(Asana Bot), 1P Bots(Drive Bot).",
            "1P APP eg. Tasks, Meet, Docs, Calendar..",
            "Asynchronous messages via an incoming webhook."
          ],
          "enum": [
            "APP_TYPE_UNSPECIFIED",
            "APP",
            "GSUITE_APP",
            "INCOMING_WEBHOOK"
          ]
        },
        "gsuiteAppType": {
          "type": "string",
          "enum": [
            "GSUITE_APP_TYPE_UNSPECIFIED",
            "TASKS_APP",
            "CALENDAR_APP",
            "DOCS_APP",
            "SHEETS_APP",
            "SLIDES_APP",
            "MEET_APP",
            "ASSISTIVE_SUGGESTION_APP",
            "CONTACTS_APP",
            "ACTIVITY_FEED_APP",
            "DRIVE_APP"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Powered by Bullseye",
            "",
            "",
            ""
          ],
          "description": "Enum indicating which 1P App this is when app_type is GSUITE_APP. Determined & set by the 1P API as a convenience for all users of this identifier(Eg. clients, chime, backend etc.) to map to 1P properties."
        },
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Numeric identifier of the App. Set to Project number for 1/3P Apps. For Webhook, this is WebhookId. Determined & set by the 1P API from App credentials on the side channel."
        }
      },
      "id": "AppId"
    },
    "AppsDynamiteSharedSelectionInput": {
      "id": "AppsDynamiteSharedSelectionInput",
      "description": "A widget that creates a UI item (for example, a drop-down list) with options for users to select.",
      "properties": {
        "name": {
          "description": "The name of the text input which is used in formInput.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteSharedSelectionInputSelectionItem"
          }
        },
        "type": {
          "enumDescriptions": [
            "The selection type is a checkbox.",
            "The selection type is a radio button.",
            "The selection type is a switch.",
            "The selection type is a dropdown."
          ],
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ],
          "type": "string"
        },
        "onChangeAction": {
          "$ref": "AppsDynamiteSharedAction",
          "description": "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button."
        },
        "label": {
          "description": "The label displayed ahead of the switch control.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MembershipChangeEvent": {
      "id": "MembershipChangeEvent",
      "type": "object",
      "properties": {
        "leaveReason": {
          "enum": [
            "LEAVE_REASON_UNKNOWN",
            "FORCE_HISTORY_POLICY_CHANGE",
            "USER_INITIATED"
          ],
          "description": "This should only be set when MembershipChange type is LEAVE.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "type": {
          "enum": [
            "JOIN",
            "LEAVE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ]
        },
        "participantId": {
          "type": "array",
          "items": {
            "$ref": "StoredParticipantId"
          }
        }
      }
    },
    "AppsDynamiteSharedDimension": {
      "type": "object",
      "id": "AppsDynamiteSharedDimension",
      "properties": {
        "width": {
          "format": "int32",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "Dimension for the uploaded attachments."
    },
    "ChatConserverDynamitePlaceholderMetadata": {
      "properties": {
        "attachmentMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataAttachmentMetadata"
        },
        "deleteMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataDeleteMetadata"
        },
        "spaceUrl": {
          "type": "string",
          "description": "The space URL embedded in the localized string."
        },
        "tasksMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataTasksMetadata"
        },
        "calendarEventMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata"
        },
        "videoCallMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataVideoCallMetadata"
        },
        "botMessageMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataBotMessageMetadata"
        },
        "editMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataEditMetadata"
        }
      },
      "type": "object",
      "id": "ChatConserverDynamitePlaceholderMetadata",
      "description": "Metadata used as inputs to the localization that is performed on Dynamite-originated messages that are incompatible with Hangouts clients. See go/localization-of-system-messages for more details."
    },
    "DmId": {
      "id": "DmId",
      "type": "object",
      "properties": {
        "dmId": {
          "type": "string",
          "description": "Unique server assigned Id, per Direct Message Space."
        }
      }
    },
    "ItemStructuredData": {
      "id": "ItemStructuredData",
      "type": "object",
      "properties": {
        "object": {
          "$ref": "StructuredDataObject",
          "description": "The structured data object that should conform to a registered object definition in the schema for the data source."
        },
        "hash": {
          "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
          "type": "string"
        }
      },
      "description": "Available structured data fields for the item."
    },
    "AppsDynamiteSharedDocument": {
      "id": "AppsDynamiteSharedDocument",
      "description": "Data for rendering a document.",
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "Unique file ID."
        },
        "mimeType": {
          "description": "Used to determine which icon to render (e.g. docs, slides, sheets)",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "URL of the document."
        },
        "justification": {
          "description": "Justification to explain why this document is being suggested.",
          "$ref": "AppsDynamiteSharedJustification"
        },
        "title": {
          "type": "string",
          "description": "Title of the document."
        },
        "lastModifiedTime": {
          "format": "google-datetime",
          "description": "Time the document was last modified.",
          "type": "string"
        }
      }
    },
    "DataSourceIndexStats": {
      "id": "DataSourceIndexStats",
      "description": "Aggregation of items by status code as of the specified date.",
      "properties": {
        "itemCountByStatus": {
          "description": "Number of items aggregrated by status code.",
          "type": "array",
          "items": {
            "$ref": "ItemCountByStatus"
          }
        },
        "date": {
          "description": "The date for which index stats were calculated. If the date of request is not the current date then stats calculated on the next day are returned. Stats are calculated close to mid night in this case. If date of request is current date, then real time stats are returned.",
          "$ref": "Date"
        }
      },
      "type": "object"
    },
    "HtmlPropertyOptions": {
      "type": "object",
      "properties": {
        "retrievalImportance": {
          "description": "Indicates the search quality importance of the tokens within the field when used for retrieval. Can only be set to DEFAULT or NONE.",
          "$ref": "RetrievalImportance"
        },
        "operatorOptions": {
          "$ref": "HtmlOperatorOptions",
          "description": "If set, describes how the property should be used as a search operator."
        }
      },
      "description": "The options for html properties.",
      "id": "HtmlPropertyOptions"
    },
    "MeetingSpace": {
      "properties": {
        "acceptedNumberClass": {
          "description": "Which number classes are accepted by this meeting at the moment? When there is no ongoing conference, this field may change independent of the version number of the MeetingSpace. When a conference starts, this field will be locked to the value at that time, and then will be unlocked again at the end of the conference.",
          "type": "array",
          "items": {
            "enumDescriptions": [
              "No number class has been specified.",
              "The number has a low cost to receive calls on.",
              "The number has a high cost to receive calls on.",
              "Class for legacy numbers."
            ],
            "enum": [
              "NUMBER_CLASS_UNSPECIFIED",
              "LOW_COST",
              "HIGH_COST",
              "LEGACY"
            ],
            "type": "string"
          }
        },
        "broadcastAccess": {
          "description": "Broadcast access information for this meeting space.",
          "$ref": "BroadcastAccess"
        },
        "gatewayAccess": {
          "description": "The interop gateway access information for the meeting space. A gateway access can be used when joining conferences from non-Google equipment through an interop gateway.",
          "$ref": "GatewayAccess"
        },
        "meetingUrl": {
          "type": "string",
          "description": "A URL to identify and access the meeting space. Output only."
        },
        "callInfo": {
          "$ref": "CallInfo",
          "description": "Information relevant to an ongoing conference. This field will be set in responses if the client requesting the meeting space has a device in one of the JOINED, HIDDEN, or MISSING_PREREQUISITES states. The field will also be set without a created device if the client requesting the meeting space is eligible to directly create a device in the JOINED state without knocking, eg a same-domain joiner. Can also only be updated by clients with a device in the JOINED state."
        },
        "phoneAccess": {
          "type": "array",
          "description": "All regional phone access methods for this meeting space. Can be empty.",
          "items": {
            "$ref": "PhoneAccess"
          }
        },
        "meetingSpaceId": {
          "description": "A unique server-generated ID for the meeting space. This is the resource name of the meeting space resource and has the form `spaces/`, where is a sequence of characters in the [base64url set](https://tools.ietf.org/html/rfc4648#section-5), without any `=` characters.",
          "type": "string"
        },
        "meetingAlias": {
          "type": "string",
          "description": "An optional alias for the meeting space. The alias can in some cases be resolved to the meeting space, similar to the meeting code. The limitation is that the user needs to be in the same meeting domain as the meeting space."
        },
        "universalPhoneAccess": {
          "$ref": "UniversalPhoneAccess",
          "description": "A universal phone access method for this meeting space. Can be unset."
        },
        "gatewaySipAccess": {
          "type": "array",
          "items": {
            "$ref": "GatewaySipAccess"
          },
          "description": "The SIP based access methods that can be used to join the conference."
        },
        "meetingCode": {
          "description": "A meeting code is a globally unique code which points to a meeting space. Note: Meeting codes may be regenerated, which will cause old meeting codes to become invalid.",
          "type": "string"
        },
        "moreJoinUrl": {
          "type": "string",
          "description": "Output only. A URL that clients (e.g. Calendar) can use to show the web page with all join methods available for this meeting space. This link is also used in iOS universal links and Android intents, used for opening the \"More ways to join\" view in the Meet mobile apps. Example: https://tel.meet/mee-ting-cod?pin=1234567891011 Here, \"pin\" is the universal phone PIN. We include it explicitly to better support the offline case on the mobile. This is set when the meeting space has either a universal PIN or an interop PIN and clients who can show a \"more ways to join\" button should show it whenever this field is set.",
          "readOnly": true
        },
        "settings": {
          "description": "Settings of the meeting space.",
          "$ref": "Settings"
        }
      },
      "type": "object",
      "id": "MeetingSpace",
      "description": " A meeting space is a persistent object that is the context for one or more calls. The meeting space is what makes users find each other when they want to meet and to find shared resources. With two exceptions, all the fields in the meeting space resource are visible publicly to any client, even anonymous users. The exceptions are that * The call_info field is only visible to clients that have a device (as indicated by the meeting token) in the JOINED or HIDDEN state. * The meeting_alias field will only be set for users who are in the same domain as the meeting space. The meeting space resource (outside call_info) should only contain information necessary to join a call in the meeting space, and not any other metadata about the meeting space, such as what organization it belongs to or things related to ongoing calls."
    },
    "AppsDynamiteSharedColumns": {
      "description": "Represents a Columns widget that displays a single row of columns.",
      "properties": {
        "columnItems": {
          "description": "Each card supports up to 2 columns.",
          "items": {
            "$ref": "AppsDynamiteSharedColumnsColumn"
          },
          "type": "array"
        },
        "wrapStyle": {
          "enum": [
            "WRAP_STYLE_UNSPECIFIED",
            "NOWRAP",
            "WRAP"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Column widgets don't wrap.",
            "Column Widgets wrap."
          ],
          "description": "Controls how the column resizes based on screen width.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedColumns"
    },
    "AppsDynamiteSharedActivityFeedAnnotationDataUserInfo": {
      "description": "UserId of the AF item updater to show and the updater count to show.",
      "properties": {
        "updaterToShow": {
          "description": "The updater for clients to show.",
          "$ref": "UserId"
        },
        "updaterCountToShow": {
          "type": "integer",
          "description": "The number of updaters for clients to show, currently set to the total number of updaters minus the one set in updater_to_show.",
          "format": "int32"
        },
        "updaterCountDisplayType": {
          "type": "string",
          "enum": [
            "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED",
            "EXACT_COUNT",
            "NONZERO_COUNT"
          ],
          "enumDescriptions": [
            "",
            "A precise updater count is known and the value set in updater_count_to_show should be used.",
            "A precise updater count could not be calculated, but there is at least one. Any value set in updater_count_to_show should NOT be used."
          ],
          "description": "Describes how updater_count_to_show should be used."
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedActivityFeedAnnotationDataUserInfo"
    },
    "FormAction": {
      "id": "FormAction",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "ActionParameter"
          }
        },
        "persistValues": {
          "description": "Indicates whether form values persist after the action. When false, the Apps Script is responsible for persisting values, by setting any form field values using the formInputs in the event. Disabling this behavior can be used if the add-on needs the ability to clear form fields, for example, as with persistent values, there is no means for clearing existing values. When disabling persistent values, it is strongly recommended that the add-on use LoadIndicator.SPINNER for all events, as this locks the UI to ensure no changes are made by the user while the action is being processed. When using LoadIndicator.NONE for any of the actions, persistent values are recommended, as it ensures that any changes made by the user after form / on change actions are sent to the server are not overwritten by the response. Persistent values disabled by default. While we recommend persistent values be used in the typical use case, we do not enable by default, as doing so would change the current behavior of existing add-ons in prod.",
          "type": "boolean"
        },
        "actionMethodName": {
          "description": "Apps script function that should be invoked in the developer's apps script when the containing element is clicked/activated.",
          "type": "string"
        },
        "loadIndicator": {
          "type": "string",
          "enum": [
            "SPINNER",
            "NONE"
          ],
          "enumDescriptions": [
            "",
            ""
          ]
        }
      },
      "type": "object"
    },
    "Annotation": {
      "id": "Annotation",
      "type": "object",
      "properties": {
        "slashCommandMetadata": {
          "$ref": "SlashCommandMetadata"
        },
        "serverInvalidated": {
          "type": "boolean",
          "description": "Whether or not the annotation is invalidated by the server. Example of situations for invalidation include: when the URL is malformed, or when Drive item ID is rejected by Drive Service."
        },
        "customEmojiMetadata": {
          "$ref": "CustomEmojiMetadata"
        },
        "youtubeMetadata": {
          "$ref": "YoutubeMetadata"
        },
        "integrationConfigUpdated": {
          "$ref": "IntegrationConfigUpdatedMetadata",
          "description": "LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java)"
        },
        "urlMetadata": {
          "$ref": "UrlMetadata"
        },
        "uploadMetadata": {
          "$ref": "UploadMetadata"
        },
        "uniqueId": {
          "description": "A unique server-assigned ID for this annotation. This is helpful in matching annotation objects when fetched from service.",
          "type": "string"
        },
        "localId": {
          "description": "A unique client-assigned ID for this annotation. This is helpful in matching the back-filled annotations to the original annotations on client side, without having to re-parse the message.",
          "type": "string"
        },
        "chipRenderType": {
          "description": "Whether the annotation should be rendered as a chip. If this is missing or unspecified, fallback to should_not_render on the metadata.",
          "enum": [
            "CHIP_RENDER_TYPE_UNSPECIFIED",
            "RENDER",
            "RENDER_IF_POSSIBLE",
            "DO_NOT_RENDER"
          ],
          "enumDescriptions": [
            "",
            "Clients must render the annotation as a chip, and if they cannot render this many Annotations, show a fallback card.",
            "Client can render the annotation if it has room to render it.",
            "Client should not render the annotation as a chip."
          ],
          "type": "string"
        },
        "cardCapabilityMetadata": {
          "description": "LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java)",
          "$ref": "CardCapabilityMetadata"
        },
        "readReceiptsSettingsMetadata": {
          "$ref": "ReadReceiptsSettingsUpdatedMetadata"
        },
        "userMentionMetadata": {
          "$ref": "UserMentionMetadata",
          "description": "Metadata that clients can set for annotations. LINT.IfChange In-text annotations"
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "These can have overlaps, i.e. same message can have multiple of these. For example a Drive link to a PDF can have URL, DRIVE_FILE and PDF all set Links",
            "Any drive file",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Any video, not just youtube, the url decides how to play",
            "UI should not be concerned with FORMAT_DATA",
            "",
            "",
            "For Thor integration",
            "Blobstore uploads",
            "Generic annotation for gsuite integrations",
            "",
            "Card capability for in-stream widgets.",
            "",
            "Clients can use this to see whether they support the entire message, or show a fallback chip otherwise.",
            "Annotation types for system messages. Clients should never set this.",
            "",
            "",
            "",
            "",
            "",
            "",
            "Message-level annotations. First message of an invite. Should not be set by clients."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "URL",
            "DRIVE_FILE",
            "DRIVE_DOC",
            "DRIVE_SHEET",
            "DRIVE_SLIDE",
            "DRIVE_FORM",
            "USER_MENTION",
            "SLASH_COMMAND",
            "CONSENTED_APP_UNFURL",
            "VIDEO",
            "FORMAT_DATA",
            "IMAGE",
            "PDF",
            "VIDEO_CALL",
            "UPLOAD_METADATA",
            "GSUITE_INTEGRATION",
            "CUSTOM_EMOJI",
            "CARD_CAPABILITY",
            "DATA_LOSS_PREVENTION",
            "REQUIRED_MESSAGE_FEATURES_METADATA",
            "MEMBERSHIP_CHANGED",
            "ROOM_UPDATED",
            "GROUP_RETENTION_SETTINGS_UPDATED",
            "BABEL_PLACEHOLDER",
            "READ_RECEIPTS_SETTINGS_UPDATED",
            "INCOMING_WEBHOOK_CHANGED",
            "INTEGRATION_CONFIG_UPDATED",
            "INVITATION"
          ],
          "type": "string",
          "description": "Type of the Annotation."
        },
        "groupRetentionSettingsUpdated": {
          "$ref": "GroupRetentionSettingsUpdatedMetaData"
        },
        "requiredMessageFeaturesMetadata": {
          "description": "Metadata that defines all of the required features that must be rendered in the message. Clients can use this to see whether they support the entire message, or show a fallback chip otherwise. See go/message-quoting-client-to-server for details. LINT.ThenChange( //depot/google3/java/com/google/apps/dynamite/v1/allshared/parser/AnnotationSanitizer.java, //depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java, //depot/google3/java/com/google/caribou/eli/mediation/chat/AnnotationTranslator.java )",
          "$ref": "RequiredMessageFeaturesMetadata"
        },
        "dataLossPreventionMetadata": {
          "$ref": "DataLossPreventionMetadata"
        },
        "roomUpdated": {
          "$ref": "RoomUpdatedMetadata"
        },
        "babelPlaceholderMetadata": {
          "$ref": "BabelPlaceholderMetadata"
        },
        "incomingWebhookChangedMetadata": {
          "$ref": "IncomingWebhookChangedMetadata"
        },
        "driveMetadata": {
          "description": "Chip annotations",
          "$ref": "DriveMetadata"
        },
        "videoCallMetadata": {
          "$ref": "VideoCallMetadata"
        },
        "formatMetadata": {
          "$ref": "FormatMetadata"
        },
        "consentedAppUnfurlMetadata": {
          "$ref": "ConsentedAppUnfurlMetadata"
        },
        "startIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Start index (0-indexed) of the Message text the Annotation corresponds to, inclusive."
        },
        "gsuiteIntegrationMetadata": {
          "$ref": "GsuiteIntegrationMetadata",
          "description": "Metadata for 1P integrations like tasks, calendar. These are supported only through integration server as 1P integrations use the integration API (which in turn uses backend API with special permissions) to post messages. Clients should never set this. LINT.IfChange"
        },
        "membershipChanged": {
          "description": "Metadata for system messages. Clients should never set this. LINT.IfChange",
          "$ref": "MembershipChangedMetadata"
        },
        "length": {
          "description": "Length of the text_body substring beginning from start_index the Annotation corresponds to.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "NOTE WHEN ADDING NEW PROTO FIELDS: Be sure to add datapol annotations to new fields with potential PII, so they get scrubbed when logging protos for errors. NEXT TAG: 29"
    },
    "DeleteQueueItemsRequest": {
      "type": "object",
      "id": "DeleteQueueItemsRequest",
      "properties": {
        "queue": {
          "description": "The name of a queue to delete items from.",
          "type": "string"
        },
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        }
      }
    },
    "GoogleChatConfig": {
      "type": "object",
      "id": "GoogleChatConfig",
      "description": "Configuration of the Google Chat in Meet.",
      "properties": {
        "chatGroupId": {
          "description": "ID of the Chat group.",
          "type": "string"
        }
      }
    },
    "PhoneNumber": {
      "properties": {
        "phoneNumber": {
          "description": "The phone number of the person.",
          "type": "string"
        },
        "type": {
          "enum": [
            "OTHER",
            "MOBILE",
            "OFFICE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      },
      "description": "A person's Phone Number",
      "type": "object",
      "id": "PhoneNumber"
    },
    "ReactionInfo": {
      "properties": {
        "emoji": {
          "type": "string",
          "description": "Unicode string representing a single emoji."
        }
      },
      "id": "ReactionInfo",
      "type": "object",
      "description": "Contains information about an emoji reaction."
    },
    "RosterId": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Opaque, server-assigned ID of the Roster."
        }
      },
      "type": "object",
      "description": "Primary key for Roster resource.",
      "id": "RosterId"
    },
    "ResultDisplayMetadata": {
      "type": "object",
      "properties": {
        "objectTypeLabel": {
          "type": "string",
          "description": "The display label for the object."
        },
        "metalines": {
          "items": {
            "$ref": "ResultDisplayLine"
          },
          "description": "The metalines content to be displayed with the result.",
          "type": "array"
        }
      },
      "id": "ResultDisplayMetadata"
    },
    "TypeInfo": {
      "description": "Next tag: 2",
      "type": "object",
      "properties": {
        "videoInfo": {
          "description": "Contains additional video information only if document_type is VIDEO.",
          "$ref": "VideoInfo"
        }
      },
      "id": "TypeInfo"
    },
    "SuggestRequest": {
      "type": "object",
      "description": "Request of suggest API.",
      "properties": {
        "dataSourceRestrictions": {
          "items": {
            "$ref": "DataSourceRestriction"
          },
          "description": "The sources to use for suggestions. If not specified, the data sources are taken from the current search application. NOTE: Suggestions are only supported for the following sources: * Third-party data sources * PredefinedSource.PERSON * PredefinedSource.GOOGLE_DRIVE",
          "type": "array"
        },
        "requestOptions": {
          "$ref": "RequestOptions",
          "description": "Request options, such as the search application and user timezone."
        },
        "query": {
          "type": "string",
          "description": "Partial query for which autocomplete suggestions will be shown. For example, if the query is \"sea\", then the server might return \"season\", \"search\", \"seagull\" and so on."
        }
      },
      "id": "SuggestRequest"
    },
    "AppsDynamiteSharedOpenLinkAppUri": {
      "type": "object",
      "properties": {
        "androidIntent": {
          "$ref": "AppsDynamiteSharedOpenLinkAppUriIntent",
          "description": "An intent object to be opened in the corresponding android hosting app."
        },
        "iosUri": {
          "description": "A uri string to be opened in the corresponding iOS hosting app.",
          "type": "string"
        },
        "companionUri": {
          "description": "A companion uri string to be opened in the chat companion window. on the web.",
          "type": "string"
        }
      },
      "id": "AppsDynamiteSharedOpenLinkAppUri",
      "description": "Represents the platform specific uri/intent to open for each client."
    },
    "ItemStatus": {
      "description": "This contains item's status and any errors.",
      "properties": {
        "code": {
          "description": "Status code.",
          "type": "string",
          "enumDescriptions": [
            "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
            "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
            "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
            "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
            "API has accepted the up-to-date data of this item."
          ],
          "enum": [
            "CODE_UNSPECIFIED",
            "ERROR",
            "MODIFIED",
            "NEW_ITEM",
            "ACCEPTED"
          ]
        },
        "repositoryErrors": {
          "type": "array",
          "description": "Repository error reported by connector.",
          "items": {
            "$ref": "RepositoryError"
          }
        },
        "processingErrors": {
          "items": {
            "$ref": "ProcessingError"
          },
          "type": "array",
          "description": "Error details in case the item is in ERROR state."
        }
      },
      "type": "object",
      "id": "ItemStatus"
    },
    "SourceCrowdingConfig": {
      "type": "object",
      "description": "Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host \"crowd out\" other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source.",
      "id": "SourceCrowdingConfig",
      "properties": {
        "numSuggestions": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0."
        },
        "numResults": {
          "description": "Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "KeyValue": {
      "properties": {
        "iconUrl": {
          "type": "string"
        },
        "bottomLabel": {
          "description": "Formatted text supported.",
          "type": "string"
        },
        "imageStyle": {
          "type": "string",
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ]
        },
        "endIcon": {
          "$ref": "IconImage"
        },
        "switchWidget": {
          "$ref": "SwitchWidget"
        },
        "icon": {
          "type": "string",
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ]
        },
        "startIcon": {
          "description": "The optional icon to display before the text content.",
          "$ref": "IconImage"
        },
        "onClick": {
          "description": "Only the top/bottom label + content region is clickable.",
          "$ref": "OnClick"
        },
        "button": {
          "$ref": "Button"
        },
        "content": {
          "type": "string",
          "description": "Formatted text supported and always required."
        },
        "contentMultiline": {
          "type": "boolean"
        },
        "iconAltText": {
          "type": "string",
          "description": "The alternative text of this icon_url which will be used for accessibility."
        },
        "topLabel": {
          "type": "string",
          "description": "Formatted text supported."
        }
      },
      "type": "object",
      "id": "KeyValue"
    },
    "SwitchWidget": {
      "properties": {
        "name": {
          "description": "The name of the switch widget which is will be used in FormInput.",
          "type": "string"
        },
        "onChange": {
          "$ref": "FormAction"
        },
        "controlType": {
          "enum": [
            "UNSPECIFIED",
            "SWITCH",
            "CHECKBOX"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "selected": {
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "The value is what is passed back in apps script callback."
        }
      },
      "id": "SwitchWidget",
      "type": "object"
    },
    "SpaceId": {
      "description": "Primary key for Space resource.",
      "properties": {
        "spaceId": {
          "type": "string",
          "description": "Unique, immutable ID of the Space"
        }
      },
      "id": "SpaceId",
      "type": "object"
    },
    "AffectedMembership": {
      "type": "object",
      "properties": {
        "targetMembershipRole": {
          "enumDescriptions": [
            "",
            "This role is used when a user is forcibly removed from a room by another user. They will no longer be able to search for the room, but their history will be retained.",
            "This role is used for two purposes. 1. A group is invited to a room, making it discoverable for its members. 2. A user was part of a room, but willingly left the room.",
            "--- Following roles are for joined members of a roster. --- Default role for any joined user. Has basic capabilities within a room.",
            "Role assigned to room creators and explicitly promoted members. Has broad powers to manage the room."
          ],
          "type": "string",
          "enum": [
            "ROLE_UNKNOWN",
            "ROLE_NONE",
            "ROLE_INVITEE",
            "ROLE_MEMBER",
            "ROLE_OWNER"
          ]
        },
        "priorMembershipState": {
          "type": "string",
          "enum": [
            "MEMBER_UNKNOWN",
            "MEMBER_INVITED",
            "MEMBER_JOINED",
            "MEMBER_NOT_A_MEMBER",
            "MEMBER_FAILED"
          ],
          "enumDescriptions": [
            "Default state, do not use",
            "An invitation to the space has been sent",
            "User has joined the space",
            "User is not a member",
            "This state should never be stored in Spanner. It is a state for responses to the clients to indicate that membership mutations have failed and the member is in its previous state."
          ]
        },
        "priorMembershipRole": {
          "type": "string",
          "enum": [
            "ROLE_UNKNOWN",
            "ROLE_NONE",
            "ROLE_INVITEE",
            "ROLE_MEMBER",
            "ROLE_OWNER"
          ],
          "enumDescriptions": [
            "",
            "This role is used when a user is forcibly removed from a room by another user. They will no longer be able to search for the room, but their history will be retained.",
            "This role is used for two purposes. 1. A group is invited to a room, making it discoverable for its members. 2. A user was part of a room, but willingly left the room.",
            "--- Following roles are for joined members of a roster. --- Default role for any joined user. Has basic capabilities within a room.",
            "Role assigned to room creators and explicitly promoted members. Has broad powers to manage the room."
          ]
        },
        "affectedMember": {
          "$ref": "MemberId"
        }
      },
      "description": "Earlier we used to populate just the affected_members list and inferred the new membership state (roles didn't exist back then) from the Type. go/dynamite-finra required backend to know the previous membership state to reconstruct membership history. The proper solution involved cleaning up up Type enum, but it was used in many, many places. This was added as a stop-gap solution to unblock FINRA without breaking everything. Later role update and target audience update started relying on this to communicate information to clients about what transition happened. So this is now required to be populated and should be in sync with affected_members for new messages.",
      "id": "AffectedMembership"
    },
    "AllAuthenticatedUsersProto": {
      "type": "object",
      "id": "AllAuthenticatedUsersProto",
      "description": "Represents a principal who has authenticated as any kind of user which the application understands. This is typically used for \"wiki-like\" security, where anyone is allowed access so long as they can be held accountable for that access. Since the purpose is knowing whom to blame, it is up to the application to decide what kinds of users it knows how to blame. For example, an application might choose to include GAIA users in \"all authenticated users\", but not include MDB users. Nothing here.",
      "properties": {}
    },
    "EnumOperatorOptions": {
      "properties": {
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the enum property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Used to provide a search operator for enum properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched. For example, if you provide no operator for a *priority* enum property with possible values *p0* and *p1*, a query that contains the term *p0* returns items that have *p0* as the value of the *priority* property, as well as any items that contain the string *p0* in other fields. If you provide an operator name for the enum, such as *priority*, then search users can use that operator to refine results to only items that have *p0* as this property's value, with the query *priority:p0*.",
      "id": "EnumOperatorOptions"
    },
    "VideoCallMetadata": {
      "type": "object",
      "id": "VideoCallMetadata",
      "properties": {
        "wasCreatedInCurrentGroup": {
          "type": "boolean",
          "description": "Whether this meeting space was created via Dynamite in this Dynamite group."
        },
        "meetingSpace": {
          "$ref": "MeetingSpace",
          "description": "Thor meeting space."
        },
        "shouldNotRender": {
          "description": "If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip.",
          "type": "boolean"
        }
      }
    },
    "DeliveryMedium": {
      "id": "DeliveryMedium",
      "properties": {
        "mediumType": {
          "type": "string",
          "enum": [
            "UNKNOWN_MEDIUM",
            "BABEL_MEDIUM",
            "GOOGLE_VOICE_MEDIUM",
            "LOCAL_SMS_MEDIUM"
          ],
          "description": "Describes the medium the cent was sent/received. For example, if I receive an SMS via GV, the medium_type will be GV.",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "selfPhone": {
          "$ref": "VoicePhoneNumber",
          "description": "In the case of multiple GV/native numbers, this defines the exact number to send from. It is used to differentiate mediums that have the same type, but different addresses (e.g. two android phones)."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedTasksAnnotationData": {
      "properties": {
        "taskProperties": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataTaskProperties",
          "description": "Task properties after the update has been applied."
        },
        "userDefinedMessage": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage"
        },
        "deletionChange": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataDeletionChange"
        },
        "completionChange": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataCompletionChange"
        },
        "assigneeChange": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataAssigneeChange"
        },
        "taskId": {
          "description": "ID of task. Will be used to create deep links to Tasks.",
          "type": "string"
        },
        "creation": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataCreation"
        }
      },
      "description": "This is the internal version of the API proto at google3/google/chat/v1/gsuite_message_integration.proto",
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationData"
    },
    "AppsDynamiteSharedOpenLink": {
      "id": "AppsDynamiteSharedOpenLink",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        },
        "appUri": {
          "$ref": "AppsDynamiteSharedOpenLinkAppUri",
          "description": "Represents the platform specific uri/intent to open on each client. For example: A companion_url will open in a companion window on the web. An iOS URL and android intent will open in the corresponding hosting apps. If these platform specific URLs can't be handled correctly, i.e. if the companion isn't supported on web and the hosting apps aren't available on the mobile platforms then the `uri` will open in a new browser window on all the platforms."
        },
        "openAs": {
          "enumDescriptions": [
            "The link opens as a full size window (if that's the frame used by the client.",
            "The link opens as an overlay, such as a pop-up."
          ],
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ],
          "type": "string"
        },
        "onClose": {
          "type": "string",
          "enumDescriptions": [
            "Doesn’t reload the card after the child window closes. Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the main card is blocked until the child window closes.",
            ""
          ],
          "enum": [
            "NOTHING",
            "RELOAD"
          ]
        }
      }
    },
    "FacetResult": {
      "properties": {
        "operatorName": {
          "description": "The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions",
          "type": "string"
        },
        "buckets": {
          "description": "FacetBuckets for values in response containing at least a single result with the corresponding filter.",
          "items": {
            "$ref": "FacetBucket"
          },
          "type": "array"
        },
        "sourceName": {
          "type": "string",
          "description": "Source name for which facet results are returned. Will not be empty."
        },
        "objectType": {
          "type": "string",
          "description": "Object type for which facet results are returned. Can be empty."
        }
      },
      "description": "Source specific facet response",
      "type": "object",
      "id": "FacetResult"
    },
    "ChatContentExtension": {
      "description": "NEXT ID: 12",
      "type": "object",
      "properties": {
        "inviteAcceptedEvent": {
          "$ref": "InviteAcceptedEvent",
          "description": "Invite accepted events. Note: this is only used ephemerally to sync to Gmail. No actual cent is stored in Papyrus."
        },
        "otrChatMessageEvent": {
          "description": "Metadata for off-the-record message.",
          "$ref": "OtrChatMessageEvent"
        },
        "membershipChangeEvent": {
          "$ref": "MembershipChangeEvent",
          "description": "Join/leave events."
        },
        "dynamitePlaceholderMetadata": {
          "description": "This metadata informs how the placeholder string will be localized dynamically in Hangouts. See go/localization-of-system-messages. This is only used as part of REGULAR_CHAT_MESSAGE events.",
          "$ref": "ChatConserverDynamitePlaceholderMetadata"
        },
        "groupLinkSharingModificationEvent": {
          "$ref": "GroupLinkSharingModificationEvent",
          "description": "Group-link sharing toggle event."
        },
        "renameEvent": {
          "$ref": "RenameEvent"
        },
        "eventOtrStatus": {
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ],
          "type": "string",
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ],
          "description": "Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have an expiration_timestamp (for example enterprise retention users) we need to store the otr status."
        },
        "hangoutEvent": {
          "description": "Audio/video Hangout event.",
          "$ref": "HangoutEvent"
        },
        "otrModificationEvent": {
          "$ref": "OtrModificationEvent"
        },
        "annotation": {
          "type": "array",
          "description": "Annotations to decorate this event.",
          "items": {
            "$ref": "EventAnnotation"
          }
        }
      },
      "id": "ChatContentExtension"
    },
    "AppsDynamiteSharedAssistantAnnotationData": {
      "properties": {
        "unfulfillable": {
          "$ref": "AppsDynamiteSharedAssistantUnfulfillableRequest",
          "description": "Set when the initial query was unfulfillable. Only an on-demand unfulfillable query will result in a response (not a proactive query). 1. On-demand: user explicitly invokes the bot 2. Proactive: bot makes proactive suggestion (when available) by listening to all user messages."
        },
        "suggestion": {
          "description": "The suggestion to render in the card.",
          "$ref": "AppsDynamiteSharedAssistantSuggestion"
        }
      },
      "id": "AppsDynamiteSharedAssistantAnnotationData",
      "type": "object",
      "description": "This is the internal version of the API proto at google3/google/chat/v1/gsuite_message_integration.proto Data used to render Assistant suggestions. See go/bullseye-rendering."
    },
    "PushItemRequest": {
      "type": "object",
      "id": "PushItemRequest",
      "properties": {
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "item": {
          "$ref": "PushItem",
          "description": "Item to push onto the queue."
        },
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        }
      }
    },
    "GroupRetentionSettingsUpdatedMetaData": {
      "properties": {
        "retentionSettings": {
          "$ref": "AppsDynamiteSharedRetentionSettings",
          "description": "The updated space retention settings"
        },
        "initiator": {
          "$ref": "UserId",
          "description": "The user who triggered the retention settings update"
        }
      },
      "type": "object",
      "id": "GroupRetentionSettingsUpdatedMetaData"
    },
    "DataSource": {
      "type": "object",
      "properties": {
        "disableServing": {
          "description": "Disable serving any search or assist results.",
          "type": "boolean"
        },
        "shortName": {
          "description": "A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *\u003cvalue\u003e* then queries like *source:\u003cvalue\u003e* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.",
          "type": "string"
        },
        "disableModifications": {
          "type": "boolean",
          "description": "If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data."
        },
        "indexingServiceAccounts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of service accounts that have indexing access."
        },
        "returnThumbnailUrls": {
          "description": "Can a user request to get thumbnail URI for Items indexed in this data source.",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.",
          "type": "string"
        },
        "itemsVisibility": {
          "items": {
            "$ref": "GSuitePrincipal"
          },
          "type": "array",
          "description": "This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility."
        },
        "operationIds": {
          "description": "IDs of the Long Running Operations (LROs) currently running for this schema.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "description": "Required. Display name of the datasource The maximum length is 300 characters.",
          "type": "string"
        }
      },
      "id": "DataSource",
      "description": "Datasource is a logical namespace for items to be indexed. All items must belong to a datasource. This is the prerequisite before items can be indexed into Cloud Search."
    },
    "OtrModificationEvent": {
      "properties": {
        "newOtrToggle": {
          "enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "enumDescriptions": [
            "The conversation can be toggled",
            "The conversation cannot be toggled"
          ]
        },
        "oldOtrToggle": {
          "type": "string",
          "enumDescriptions": [
            "The conversation can be toggled",
            "The conversation cannot be toggled"
          ],
          "enum": [
            "ENABLED",
            "DISABLED"
          ]
        },
        "oldOtrStatus": {
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ],
          "type": "string",
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ]
        },
        "newOtrStatus": {
          "type": "string",
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ],
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ]
        }
      },
      "type": "object",
      "id": "OtrModificationEvent"
    },
    "FormatMetadata": {
      "id": "FormatMetadata",
      "description": "Annotation metadata for markup formatting",
      "properties": {
        "formatType": {
          "enumDescriptions": [
            "Default value for the enum.",
            "",
            "",
            "",
            "",
            "Inline monospace.",
            "",
            "Multi-line monospace block.",
            "",
            "",
            "Encloses BULLETED_LIST_ITEM annotations.",
            "Must cover the whole line including the newline",
            "character at the end. Not used anymore."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "BOLD",
            "ITALIC",
            "STRIKE",
            "SOURCE_CODE",
            "MONOSPACE",
            "HIDDEN",
            "MONOSPACE_BLOCK",
            "UNDERLINE",
            "FONT_COLOR",
            "BULLETED_LIST",
            "BULLETED_LIST_ITEM",
            "CLIENT_HIDDEN"
          ],
          "description": "LINT.ThenChange(//depot/google3/apps/dynamite/v1/web/datakeys/annotated_span.proto)",
          "type": "string"
        },
        "fontColor": {
          "format": "uint32",
          "type": "integer",
          "description": "Font color is set if and only if format_type is FONT_COLOR. The components are stored as (alpha \u003c\u003c 24) | (red \u003c\u003c 16) | (green \u003c\u003c 8) | blue. Clients should always set the alpha component to 0xFF. NEXT TAG: 3"
        }
      },
      "type": "object"
    },
    "PushItem": {
      "type": "object",
      "id": "PushItem",
      "properties": {
        "structuredDataHash": {
          "type": "string",
          "description": "Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters."
        },
        "queue": {
          "description": "Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters.",
          "type": "string"
        },
        "repositoryError": {
          "description": "Populate this field to store Connector or repository error details. This information is displayed in the Admin Console. This field may only be populated when the Type is REPOSITORY_ERROR.",
          "$ref": "RepositoryError"
        },
        "payload": {
          "type": "string",
          "description": "Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.",
          "format": "byte"
        },
        "type": {
          "enum": [
            "UNSPECIFIED",
            "MODIFIED",
            "NOT_MODIFIED",
            "REPOSITORY_ERROR",
            "REQUEUE"
          ],
          "description": "The type of the push operation that defines the push behavior.",
          "enumDescriptions": [
            "Default UNSPECIFIED. Specifies that the push operation should not modify ItemStatus",
            "Indicates that the repository document has been modified or updated since the previous update call. This changes status to MODIFIED state for an existing item. If this is called on a non existing item, the status is changed to NEW_ITEM.",
            "Item in the repository has not been modified since the last update call. This push operation will set status to ACCEPTED state.",
            "Connector is facing a repository error regarding this item. Change status to REPOSITORY_ERROR state. Item is unreserved and rescheduled at a future time determined by exponential backoff.",
            "Call push with REQUEUE only for items that have been reserved. This action unreserves the item and resets its available time to the wall clock time."
          ],
          "type": "string"
        },
        "contentHash": {
          "description": "Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.",
          "type": "string"
        },
        "metadataHash": {
          "description": "The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.",
          "type": "string"
        }
      },
      "description": "Represents an item to be pushed to the indexing queue."
    },
    "Value": {
      "type": "object",
      "description": "Definition of a single value with generic type.",
      "id": "Value",
      "properties": {
        "integerValue": {
          "format": "int64",
          "type": "string"
        },
        "booleanValue": {
          "type": "boolean"
        },
        "dateValue": {
          "$ref": "Date"
        },
        "doubleValue": {
          "type": "number",
          "format": "double"
        },
        "timestampValue": {
          "format": "google-datetime",
          "type": "string"
        },
        "stringValue": {
          "type": "string"
        }
      }
    },
    "AppsDynamiteSharedImageComponent": {
      "id": "AppsDynamiteSharedImageComponent",
      "properties": {
        "cropStyle": {
          "$ref": "AppsDynamiteSharedImageCropStyle",
          "description": "The crop style to apply to the image."
        },
        "imageUri": {
          "type": "string",
          "description": "The image URL."
        },
        "altText": {
          "type": "string",
          "description": "The accessibility label for the image."
        },
        "borderStyle": {
          "$ref": "AppsDynamiteSharedBorderStyle",
          "description": "The border style to apply to the image."
        }
      },
      "type": "object"
    },
    "TextPropertyOptions": {
      "description": "The options for text properties.",
      "properties": {
        "retrievalImportance": {
          "description": "Indicates the search quality importance of the tokens within the field when used for retrieval.",
          "$ref": "RetrievalImportance"
        },
        "operatorOptions": {
          "$ref": "TextOperatorOptions",
          "description": "If set, describes how the property should be used as a search operator."
        }
      },
      "type": "object",
      "id": "TextPropertyOptions"
    },
    "CardAction": {
      "id": "CardAction",
      "description": "When an AddOn Card is shown in detailed view, a card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "type": "object",
      "properties": {
        "actionLabel": {
          "type": "string",
          "description": "The label used to be displayed in the action menu item."
        },
        "onClick": {
          "$ref": "OnClick"
        }
      }
    },
    "PostiniUserProto": {
      "properties": {
        "postiniUserId": {
          "type": "string",
          "format": "int64"
        }
      },
      "id": "PostiniUserProto",
      "type": "object",
      "description": "See http://s/?fileprint=//depot/google3/security/authentication/postini/auth_token.proto"
    },
    "AppsDynamiteSharedBorderStyle": {
      "description": "Represents the complete border style applied to widgets.",
      "type": "object",
      "id": "AppsDynamiteSharedBorderStyle",
      "properties": {
        "strokeColor": {
          "$ref": "Color",
          "description": "The colors to use when the type is `BORDER_TYPE_STROKE`."
        },
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ],
          "description": "The border type.",
          "enum": [
            "BORDER_TYPE_UNSPECIFIED",
            "NO_BORDER",
            "STROKE"
          ],
          "type": "string"
        },
        "cornerRadius": {
          "description": "The corner radius for the border.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "IntegerValues": {
      "properties": {
        "values": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "List of integer values.",
      "id": "IntegerValues",
      "type": "object"
    },
    "AutoCompleteItem": {
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "AutoCompleteItem",
      "type": "object"
    },
    "DriveMimeTypeRestrict": {
      "type": "object",
      "id": "DriveMimeTypeRestrict",
      "description": "Drive mime-type search restricts (e.g. \"type:pdf\").",
      "properties": {
        "type": {
          "enum": [
            "UNSPECIFIED",
            "PDF",
            "DOCUMENT",
            "PRESENTATION",
            "SPREADSHEET",
            "FORM",
            "DRAWING",
            "SCRIPT",
            "MAP",
            "IMAGE",
            "AUDIO",
            "VIDEO",
            "FOLDER",
            "ARCHIVE",
            "SITE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        }
      }
    },
    "AppsDynamiteSharedChatItemGroupInfo": {
      "type": "object",
      "id": "AppsDynamiteSharedChatItemGroupInfo",
      "description": "Information about the space that the item originated from. This will be used to display Activity Feed items from rooms, and only contain the necessary information, such as the space name and group attributes. NEXT TAG: 6",
      "properties": {
        "attributeCheckerGroupType": {
          "type": "string",
          "description": "This is needed to determine what type of group the source message came from to support click-to-source.",
          "enum": [
            "ATTRIBUTE_CHECKER_GROUP_TYPE_UNSPECIFIED",
            "ONE_TO_ONE_HUMAN_DM",
            "ONE_TO_ONE_BOT_DM",
            "IMMUTABLE_MEMBERSHIP_GROUP_DM",
            "FLAT_ROOM",
            "THREADED_ROOM",
            "IMMUTABLE_MEMBERSHIP_HUMAN_DM",
            "POST_ROOM",
            "ACTIVITY_FEED"
          ],
          "enumDescriptions": [
            "LINT.IfChange",
            "A 1:1 DM that has two human users. Deprecated. Use IMMUTABLE_MEMBERSHIP_HUMAN_DM instead.",
            "A 1:1 DM between a human user and a bot.",
            "A group DM that has multiple human users with immutable group membership. Deprecated. Use IMMUTABLE_MEMBERSHIP_HUMAN_DM instead.",
            "A flat room that contains a single thread.",
            "A threaded room. Topics in this room are threaded, and users can reply to any topic.",
            "A DM with immutable group membership. It can be a 1:1 DM or a group DM with multiple human users.",
            "A post room. Topics in this room are organized in a post/reply style. See the design doc for more details: go/PostRoomsInDynamite.",
            "Represents an Activity Feed space. These groups are modeled like flat rooms and contain items for users to catch up on important things. Each user should only have one group of this type. See go/activity-feed. LINT.ThenChange(//depot/google3/logs/proto/apps_dynamite/dynamite_visual_element_entry.proto:LoggingGroupType,//depot/google3/java/com/google/apps/dynamite/v1/web/ui/group/groups.js:LoggingGroupType)"
          ]
        },
        "groupReadTimeUsec": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp of when the group containing the message has been read by the user."
        },
        "inlineThreadingEnabled": {
          "description": "Indicates whether the group has inline replies enabled. If enabled, clients will render the space with inline replies.",
          "type": "boolean"
        },
        "groupName": {
          "type": "string"
        }
      }
    },
    "AppsDynamiteSharedCallMetadata": {
      "description": "Metadata required to generate call artifacts. This can either be the metadata for a Meet or, in the future, Google Voice call.",
      "id": "AppsDynamiteSharedCallMetadata",
      "type": "object",
      "properties": {
        "meetMetadata": {
          "description": "Metadata specific for the Meet call.",
          "$ref": "AppsDynamiteSharedMeetMetadata"
        }
      }
    },
    "SocialCommonAttachmentAttachment": {
      "properties": {
        "embedItem": {
          "description": "An embed represents an external entity. See go/es-embeds.",
          "$ref": "EmbedClientItem"
        },
        "id": {
          "description": "An id to uniquely identify an attachment when several attachments are in a collection.",
          "type": "string"
        }
      },
      "description": "An Attachment represents a linked entity associated with a piece of social content. This may be a 1st-party or 3rd-party entity. In the Papyrus context, an Attachment is part of a Cent, and sits alongside the main content of the cent, which is represented as a sequence of Segments. Right now an Attachment is just a wrapper around an Embed, but we provide the extra layer of abstraction since, as Embeds move to separate storage in Briefcase, we may want to add additional fields that are not part of the Embed proper, but that (for example) relate to the usage of the linked content within the particular post/cent.",
      "id": "SocialCommonAttachmentAttachment",
      "type": "object"
    },
    "CoActivity": {
      "id": "CoActivity",
      "type": "object",
      "properties": {
        "coActivityApp": {
          "description": "Identifies the app handling this co-activity.",
          "type": "string",
          "enumDescriptions": [
            "Should never be used.",
            "Main YouTube app, for watching videos.",
            "Spotify music.",
            "Uno game.",
            "HeadsUp game.",
            "Kahoot! educational software.",
            "GQueues task manager."
          ],
          "enum": [
            "CO_ACTIVITY_APP_UNSPECIFIED",
            "CO_ACTIVITY_APP_YOU_TUBE_MAIN",
            "CO_ACTIVITY_APP_SPOTIFY",
            "CO_ACTIVITY_APP_UNO",
            "CO_ACTIVITY_APP_HEADSUP",
            "CO_ACTIVITY_APP_KAHOOT",
            "CO_ACTIVITY_APP_GQUEUES"
          ]
        },
        "activityTitle": {
          "type": "string",
          "description": "The title of the activity in this co-activity session. For example, this might be the title of the video being co-watched, or the name of the round of a game being co-played."
        }
      },
      "description": "Metadata about a co-activity session."
    },
    "EnumValues": {
      "type": "object",
      "properties": {
        "values": {
          "description": "The maximum allowable length for string values is 32 characters.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "EnumValues",
      "description": "List of enum values."
    },
    "CapTokenHolderProto": {
      "properties": {
        "tokenHmacSha1Prefix": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the corresponding capability token. The value is defined to be identical to the one in acl.proto's CapTokenMetadata: 10-byte prefix of HMAC-SHA1 of the token. The HMAC key is the following fixed (non-secret) 512-bit value: 79b1c8f4 82baf523 b8a9ab4a e960f438 c45be041 11f1f222 e8a3f64d aeb05e3d c3576acc ec649194 aede422c 4e48e0d1 ff21234a a6ed6b49 a7fa592e efd7bba3"
        }
      },
      "description": "Represents a principal which possesses a particular secret string whose cryptographic hash is specified here. CapTokens (\"Capability Tokens\") are used in ACLProto. It's expected that ACLs with CapTokenHolders will strongly enforce them by Keystore-wrapping crypto keys for the corresponding CapTokens.",
      "id": "CapTokenHolderProto",
      "type": "object"
    },
    "CustomerUserStats": {
      "properties": {
        "thirtyDaysActiveUsersCount": {
          "type": "string",
          "description": "The count of unique active users in the past thirty days",
          "format": "int64"
        },
        "sevenDaysActiveUsersCount": {
          "type": "string",
          "description": "The count of unique active users in the past seven days",
          "format": "int64"
        },
        "oneDayActiveUsersCount": {
          "format": "int64",
          "description": "The count of unique active users in the past one day",
          "type": "string"
        },
        "date": {
          "description": "The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        }
      },
      "id": "CustomerUserStats",
      "type": "object"
    },
    "AppsDynamiteSharedColumnsColumn": {
      "id": "AppsDynamiteSharedColumnsColumn",
      "properties": {
        "verticalAlignment": {
          "enum": [
            "VERTICAL_ALIGNMENT_UNSPECIFIED",
            "CENTER",
            "TOP",
            "BOTTOM"
          ],
          "type": "string",
          "description": "The vertical alignment of the column.",
          "enumDescriptions": [
            "Unspecified.",
            "Aligns the widget in the center of the column. Default value if unspecified.",
            "Aligns the widget at the top of the column.",
            "Aligns the widget at the bottom of the column."
          ]
        },
        "horizontalAlignment": {
          "description": "The horizontal alignment of the column.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ]
        },
        "widgets": {
          "description": "LINT.ThenChange(//google/apps/card/v1/card.proto) Array of widgets included in the column.",
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteSharedColumnsColumnWidgets"
          }
        },
        "horizontalSizeStyle": {
          "enum": [
            "HORIZONTAL_SIZE_STYLE_UNSPECIFIED",
            "FILL_AVAILABLE_SPACE",
            "FILL_MINIMUM_SPACE"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Fills up the available horizontal width. Default value if unspecified.",
            "Fills up the minimum horizontal width."
          ],
          "description": "Specifies how the column content is sized horizontally.",
          "type": "string"
        }
      },
      "description": "Represents a Column that consists of widgets stacked vertically.",
      "type": "object"
    },
    "AppsDynamiteSharedImageCropStyle": {
      "id": "AppsDynamiteSharedImageCropStyle",
      "type": "object",
      "description": "Represents the crop style applied to an image.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The crop type.",
          "enum": [
            "IMAGE_CROP_TYPE_UNSPECIFIED",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ]
        },
        "aspectRatio": {
          "description": "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
          "format": "double",
          "type": "number"
        }
      }
    },
    "ChatConserverDynamitePlaceholderMetadataAttachmentMetadata": {
      "id": "ChatConserverDynamitePlaceholderMetadataAttachmentMetadata",
      "type": "object",
      "properties": {
        "filename": {
          "type": "string"
        }
      },
      "description": "An attachment uploaded in Dynamite and its filename."
    },
    "QueryInterpretationOptions": {
      "properties": {
        "enableVerbatimMode": {
          "description": "Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental result retrieval, and usage of synonyms including custom ones. Nl interpretation will be disabled if either one of the two flags is true.",
          "type": "boolean"
        },
        "disableSupplementalResults": {
          "type": "boolean",
          "description": "Use this flag to disable supplemental results for a query. Supplemental results setting chosen at SearchApplication level will take precedence if set to True."
        },
        "disableNlInterpretation": {
          "type": "boolean",
          "description": "Flag to disable natural language (NL) interpretation of queries. Default is false, Set to true to disable natural language interpretation. NL interpretation only applies to predefined datasources."
        }
      },
      "id": "QueryInterpretationOptions",
      "type": "object",
      "description": "Options to interpret user query."
    },
    "ContentReport": {
      "properties": {
        "reportType": {
          "$ref": "AppsDynamiteSharedContentReportType",
          "description": "Type of the report. Always populated when it is in a response."
        },
        "revisionCreateTimestamp": {
          "description": "Create timestamp of the revisions of the message when it's reported. Always populated when it is in a response.",
          "type": "string",
          "format": "google-datetime"
        },
        "reportJustification": {
          "$ref": "ContentReportJustification",
          "description": "Additional user-provided justification on the report. Optional."
        },
        "reporterUserId": {
          "$ref": "UserId",
          "description": "User ID of the reporter. Always populated when it is in a response."
        },
        "reportCreateTimestamp": {
          "description": "The time at which the report is generated. Always populated when it is in a response.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "ContentReport",
      "type": "object"
    },
    "LinkData": {
      "type": "object",
      "id": "LinkData",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title is an optional field that provides a short string that describes the link or its destination. User interfaces often use title as a tooltip or for accessibility purposes. However, they are of course free to present this data in any form. This field is plain text."
        },
        "displayUrl": {
          "description": "If we wish to show the user a different (e.g. shortened) version of the URL for display purposes, then that version should be set here. If this field isn't set, link_target will be used for both purposes.",
          "type": "string"
        },
        "attachment": {
          "description": "An Attachment represents the structured entity to which we are linking. It contains an Embed (apps/tacotown/proto/embeds/embed_client.proto) with fields specific to the appropriate type of linked entity. For example, if we are linking to a photo album, the Embed may include the album ID and gaia ID of the creator. Clients that understand the Embed type within the Attachment may construct and/or decorate their link appropriately e.g. to make use of type-specific functionality or first-party integrations. The link_target and (if appropriate) display_url fields must still be set even when an Attachment is present, so that clients who do not know how to interpret the Attachment can fall back to those fields, and render the Segment as an ordinary web link. N.B. Even when an Attachment is present, the intention of a \"LINK\" Segment is for the Segment to be presented inline with the rest of the text of a post or comment, with a clickable link or other UI suitable for inlining (though the client may modify the UI based on Attachment data, e.g. to add appropriate hovers, icons, etc.). When an entity is intended to be rendered separately from the main body of the post/comment, a separate Attachment proto can be added outside the set of Segments. N.B. Within the Attachment, fields of EmbedClientItem have their own visibility annotations, which should be enforced separately from Segment visibility annotations. See: apps/tacotown/proto/embeds/embed_annotations.proto",
          "$ref": "SocialCommonAttachmentAttachment"
        },
        "linkTarget": {
          "description": "link_target is the URL to navigate to when clicked. This could be the original URL, or a URL signed by the GWS URL signing service.",
          "type": "string"
        },
        "linkType": {
          "enumDescriptions": [
            "No link type specified.",
            "This indicates that the link target points to the same object related to this segment. Example: A YouTube link with text=\"0.07\" and link_target: \"https://www.youtube.com/watch?v=leHVmSqd4_w&t=0m07s\" points to the same YouTube video where this segment appears. See http://go/ignore-badwords-filtering-for-selflink for adding link_type design document."
          ],
          "type": "string",
          "description": "LinkType is an optional field that provides additional information regarding link target. For example, link type can be identified as the SELF_LINK when the request was executed from the same link as the link target.",
          "enum": [
            "UNKNOWN_LINK_TYPE",
            "SELF_LINK"
          ]
        },
        "attachmentRenderHint": {
          "enum": [
            "ATTACHMENT_RENDER_HINT_UNKNOWN",
            "ATTACHMENT_RENDER_HINT_AFTER",
            "ATTACHMENT_RENDER_HINT_INTERLEAVED"
          ],
          "description": "The hint to use when rendering the associated attachment. Ignored if there is no associated attachment.",
          "type": "string",
          "enumDescriptions": [
            "No rendering hint; should not be used (equivalent to having no hint)",
            "Render any associated attachment at the end of the block, after all sibling Segments. Leave the link in place in the text and render it normally as well.",
            "Render any associated attachment inline in the text in place of the link text, forcing a line break before and after the attachment so the text and the attachment are \"interleaved\". If this is not possible, render as if AFTER."
          ]
        }
      },
      "description": "Link metadata, for LINK segments. Anchor text should be stored in the \"text\" field of the Segment, which can also serve as a fallback."
    },
    "Id": {
      "description": "Identifies a particular object, including both Users and DirEntries. This Id is unique across the entire server instance, such as the production or qa instance.",
      "id": "Id",
      "type": "object",
      "properties": {
        "creatorUserId": {
          "format": "uint64",
          "description": "The User account in which the DirEntry was originally created. If name_space==GAIA, then it's the gaia_id of the user this id is referring to.",
          "type": "string"
        },
        "localId": {
          "description": "The local identifier for the DirEntry (local to the creator's account). local_id + app_name is guaranteed to be unique within the creator account, but not across all User accounts. The string is case sensitive. Ignore if name_space==GAIA. NB For name_space==COSMO, all local_id's should be defined in google3/java/com/google/storage/cosmo/server/api/SpecialObjectIds.java as they have a special predefined meaning. See cosmo.client.CosmoIdFactory.createObjectId(long,String) for IMPORTANT recommendations when generating IDs.",
          "type": "string"
        },
        "nameSpace": {
          "type": "integer",
          "description": "The name space in which this id is unique (typically the application that created it). Values should be drawn from the above enum, but for experimentation, use values greater than 1000.",
          "format": "int32"
        }
      }
    },
    "TimestampPropertyOptions": {
      "type": "object",
      "id": "TimestampPropertyOptions",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the timestamp should be used as a search operator.",
          "$ref": "TimestampOperatorOptions"
        }
      },
      "description": "The options for timestamp properties."
    },
    "AppsDynamiteSharedTextInput": {
      "properties": {
        "initialSuggestions": {
          "description": "The initial suggestions made before any user input.",
          "$ref": "AppsDynamiteSharedSuggestions"
        },
        "value": {
          "type": "string",
          "description": "The default value when there is no input from the user."
        },
        "label": {
          "type": "string",
          "description": "At least one of label and hintText must be specified."
        },
        "autoCompleteAction": {
          "description": "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items.",
          "$ref": "AppsDynamiteSharedAction"
        },
        "name": {
          "description": "The name of the text input which is used in formInput.",
          "type": "string"
        },
        "onChangeAction": {
          "description": "The onChange action, for example, invoke a function.",
          "$ref": "AppsDynamiteSharedAction"
        },
        "hintText": {
          "type": "string",
          "description": "The hint text."
        },
        "type": {
          "enumDescriptions": [
            "The text is put into a single line.",
            "The text is put into multiple lines."
          ],
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ],
          "type": "string",
          "description": "The style of the text, for example, a single line or multiple lines."
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedTextInput",
      "description": "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions."
    },
    "RecordingSessionInfo": {
      "description": "Information about a recording session.",
      "properties": {
        "sessionStateInfo": {
          "$ref": "SessionStateInfo",
          "description": "Recording session's state information."
        },
        "ownerEmail": {
          "description": "Input only. Deprecated field, should not be used.",
          "type": "string"
        },
        "recordingSessionId": {
          "type": "string",
          "description": "A unique server-generated ID for the recording session."
        }
      },
      "type": "object",
      "id": "RecordingSessionInfo"
    },
    "ImageButton": {
      "properties": {
        "iconUrl": {
          "type": "string"
        },
        "icon": {
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "onClick": {
          "$ref": "OnClick"
        }
      },
      "id": "ImageButton",
      "type": "object"
    },
    "AppsDynamiteSharedCard": {
      "properties": {
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "AppsDynamiteSharedCardCardHeader"
        },
        "cardActions": {
          "description": "The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Setting\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
          "items": {
            "$ref": "AppsDynamiteSharedCardCardAction"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Name of the card, which is used as a identifier for the card in card navigation."
        },
        "sections": {
          "items": {
            "$ref": "AppsDynamiteSharedCardSection"
          },
          "description": "Sections are separated by a line divider.",
          "type": "array"
        }
      },
      "description": "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Heba Salam\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/heba_salam.png\", \"imageAltText\": \"Avatar for Heba Salam\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"heba.salam@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```",
      "type": "object",
      "id": "AppsDynamiteSharedCard"
    },
    "ChatConserverDynamitePlaceholderMetadataTasksMetadata": {
      "type": "object",
      "properties": {},
      "id": "ChatConserverDynamitePlaceholderMetadataTasksMetadata",
      "description": "A Tasks message in Dynamite."
    },
    "ItemContent": {
      "type": "object",
      "description": "Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded.",
      "id": "ItemContent",
      "properties": {
        "contentDataRef": {
          "description": "Upload reference ID of a previously uploaded content via write method.",
          "$ref": "UploadItemRef"
        },
        "hash": {
          "description": "Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
          "type": "string"
        },
        "contentFormat": {
          "type": "string",
          "enumDescriptions": [
            "Invalid value.",
            "contentFormat is HTML.",
            "contentFormat is free text.",
            "contentFormat is raw bytes."
          ],
          "enum": [
            "UNSPECIFIED",
            "HTML",
            "TEXT",
            "RAW"
          ]
        },
        "inlineContent": {
          "type": "string",
          "description": "Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB).",
          "format": "byte"
        }
      }
    },
    "CustomerId": {
      "id": "CustomerId",
      "properties": {
        "customerId": {
          "type": "string"
        }
      },
      "description": "Represents a GSuite customer ID. Obfuscated with CustomerIdObfuscator.",
      "type": "object"
    },
    "PropertyDisplayOptions": {
      "id": "PropertyDisplayOptions",
      "description": "The display options for a property.",
      "properties": {
        "displayLabel": {
          "description": "The user friendly label for the property that is used if the property is specified to be displayed in ObjectDisplayOptions. If provided, the display label is shown in front of the property values when the property is part of the object display options. For example, if the property value is '1', the value by itself may not be useful context for the user. If the display name given was 'priority', then the user sees 'priority : 1' in the search results which provides clear context to search users. This is OPTIONAL; if not given, only the property values are displayed. The maximum length is 64 characters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GsuiteIntegrationMetadata": {
      "properties": {
        "assistantData": {
          "$ref": "AppsDynamiteSharedAssistantAnnotationData"
        },
        "clientType": {
          "enum": [
            "UNKNOWN_CLIENT_TYPE",
            "MEET",
            "TASKS",
            "CALENDAR_EVENT",
            "ASSISTANT",
            "ACTIVITY_FEED_SERVICE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "tasksData": {
          "$ref": "AppsDynamiteSharedTasksAnnotationData"
        },
        "calendarEventData": {
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationData"
        },
        "activityFeedData": {
          "$ref": "AppsDynamiteSharedActivityFeedAnnotationData"
        },
        "callData": {
          "$ref": "AppsDynamiteSharedCallAnnotationData",
          "description": "Data used to render call artifacts."
        },
        "indexableTexts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of all strings that are to be indexed for this 1P chip. Each string in this list would be the contents of a single string field in the 1P chip. Eg. For Tasks[title = “hello world”, description = “good bye”]. If we want to index only the title, this would be set to [“hello world”]. If both title and description, then this would be [“hello world”, “good bye”]. Please make sure that the contents of this field is a subset of strings that are rendered as part of the 1P Chip."
        }
      },
      "id": "GsuiteIntegrationMetadata",
      "type": "object",
      "description": "Annotation metadata for an GsuiteIntegration artifact."
    },
    "MenuItem": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value associated with this item which will be sent back to app scripts. Client should use as a form input value."
        },
        "selected": {
          "type": "boolean"
        },
        "text": {
          "type": "string",
          "description": "The text to be displayed."
        }
      },
      "type": "object",
      "id": "MenuItem"
    },
    "AppsDynamiteSharedTasksAnnotationDataAssigneeChange": {
      "properties": {
        "oldAssignee": {
          "$ref": "UserId",
          "description": "Obfuscated user ID of previous assignee. Not set if the task was originally not assigned."
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationDataAssigneeChange"
    },
    "QueryInterpretationConfig": {
      "id": "QueryInterpretationConfig",
      "properties": {
        "forceDisableSupplementalResults": {
          "description": "Set this flag to disable supplemental results retrieval, setting a flag here will not retrieve supplemental results for queries associated with a given search application. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for supplemental results.",
          "type": "boolean"
        },
        "forceVerbatimMode": {
          "type": "boolean",
          "description": "Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental results retrieval, and usage of synonyms including custom ones. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for verbatim mode."
        }
      },
      "description": "Default options to interpret user query.",
      "type": "object"
    },
    "UnreserveItemsRequest": {
      "id": "UnreserveItemsRequest",
      "properties": {
        "queue": {
          "type": "string",
          "description": "The name of a queue to unreserve items from."
        },
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        }
      },
      "type": "object"
    },
    "RequestOptions": {
      "type": "object",
      "properties": {
        "searchApplicationId": {
          "type": "string",
          "description": "The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922)."
        },
        "debugOptions": {
          "description": "Debug options of the request",
          "$ref": "DebugOptions"
        },
        "timeZone": {
          "type": "string",
          "description": "Current user's time zone id, such as \"America/Los_Angeles\" or \"Australia/Sydney\". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used."
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. The suggest API does not use this parameter. Instead, suggest autocompletes only based on characters in the query."
        }
      },
      "description": "Shared request options for all RPC methods.",
      "id": "RequestOptions"
    },
    "ChatConserverDynamitePlaceholderMetadataEditMetadata": {
      "properties": {},
      "type": "object",
      "description": "An edit was made in Dynamite.",
      "id": "ChatConserverDynamitePlaceholderMetadataEditMetadata"
    },
    "DateOperatorOptions": {
      "type": "object",
      "description": "Optional. Provides a search operator for date properties. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "id": "DateOperatorOptions",
      "properties": {
        "lessThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the date property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is earlier than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "operatorName": {
          "description": "Indicates the actual string required in the query in order to isolate the date property. For example, suppose an issue tracking schema object has a property named *closeDate* that specifies an operator with an operatorName of *closedon*. For searches on that data, queries like *closedon:\u003cvalue\u003e* show results only where the value of the *closeDate* property matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the indexed datasource. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "greaterThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the date property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is later than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      }
    },
    "PinnedItemId": {
      "properties": {
        "driveId": {
          "description": "Identifier for a Drive file (e.g. Docs, Sheets, Slides).",
          "type": "string"
        }
      },
      "id": "PinnedItemId",
      "type": "object"
    },
    "YouTubeLiveBroadcastEvent": {
      "id": "YouTubeLiveBroadcastEvent",
      "description": "Information about the broadcast to YouTube.",
      "type": "object",
      "properties": {
        "viewUrl": {
          "readOnly": true,
          "description": "Output only. A URL that can be used to watch the meeting broadcast. Will be populated by the backend.",
          "type": "string"
        },
        "channelId": {
          "description": "YouTube channel associated with the broadcast.",
          "type": "string"
        },
        "broadcastId": {
          "description": "Input only. The broadcast id, used to control the lifecycle of the event on YouTube",
          "type": "string"
        }
      }
    },
    "TextKeyValue": {
      "type": "object",
      "properties": {
        "onClick": {
          "$ref": "OnClick"
        },
        "key": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      },
      "description": "This is deprecated and please use KeyValue.",
      "id": "TextKeyValue"
    },
    "SearchQualityMetadata": {
      "id": "SearchQualityMetadata",
      "properties": {
        "quality": {
          "description": "An indication of the quality of the item, used to influence search quality. Value should be between 0.0 (lowest quality) and 1.0 (highest quality). The default value is 0.0.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Additional search quality metadata of the item."
    },
    "AppsDynamiteSharedChatItem": {
      "description": "Next Id: 5",
      "type": "object",
      "id": "AppsDynamiteSharedChatItem",
      "properties": {
        "messageInfo": {
          "description": "Additional information about the original chat message that isn't captured in the top-level message proto.",
          "$ref": "AppsDynamiteSharedMessageInfo"
        },
        "activityInfo": {
          "items": {
            "$ref": "AppsDynamiteSharedChatItemActivityInfo"
          },
          "description": "Information needed to render the specific type of feed item.",
          "type": "array"
        },
        "groupInfo": {
          "$ref": "AppsDynamiteSharedChatItemGroupInfo",
          "description": "Only populated on read path and should not be persisted in storage."
        }
      }
    },
    "OAuthConsumerProto": {
      "properties": {
        "domain": {
          "type": "string"
        }
      },
      "id": "OAuthConsumerProto",
      "description": "Represents an OAuth consumer, a/k/a AuthSub target. These principals are identified by domain name (e.g., example.com). Historically, Dasher domain GAIA group IDs have been used instead, but that doesn't work: http://go/tricky-gaia-ids",
      "type": "object"
    },
    "Color": {
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...",
      "properties": {
        "blue": {
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float"
        },
        "red": {
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float"
        },
        "green": {
          "type": "number",
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "format": "float"
        },
        "alpha": {
          "format": "float",
          "type": "number",
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."
        }
      },
      "id": "Color",
      "type": "object"
    },
    "PropertyDefinition": {
      "id": "PropertyDefinition",
      "type": "object",
      "description": "The definition of a property within an object.",
      "properties": {
        "textPropertyOptions": {
          "$ref": "TextPropertyOptions"
        },
        "isRepeatable": {
          "description": "Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.",
          "type": "boolean"
        },
        "datePropertyOptions": {
          "$ref": "DatePropertyOptions"
        },
        "htmlPropertyOptions": {
          "$ref": "HtmlPropertyOptions"
        },
        "integerPropertyOptions": {
          "$ref": "IntegerPropertyOptions"
        },
        "isSortable": {
          "type": "boolean",
          "description": "Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties."
        },
        "isFacetable": {
          "description": "Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, and text properties.",
          "type": "boolean"
        },
        "isWildcardSearchable": {
          "type": "boolean",
          "description": "Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable."
        },
        "isSuggestable": {
          "description": "Indicates that the property can be used for generating query suggestions.",
          "type": "boolean"
        },
        "objectPropertyOptions": {
          "$ref": "ObjectPropertyOptions"
        },
        "booleanPropertyOptions": {
          "$ref": "BooleanPropertyOptions"
        },
        "enumPropertyOptions": {
          "$ref": "EnumPropertyOptions"
        },
        "displayOptions": {
          "$ref": "PropertyDisplayOptions",
          "description": "The options that determine how the property is displayed in the Cloud Search results page if it's specified to be displayed in the object's display options."
        },
        "doublePropertyOptions": {
          "$ref": "DoublePropertyOptions"
        },
        "name": {
          "type": "string",
          "description": "The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters."
        },
        "timestampPropertyOptions": {
          "$ref": "TimestampPropertyOptions"
        },
        "isReturnable": {
          "type": "boolean",
          "description": "Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object."
        }
      }
    },
    "ReadReceiptsSettingsUpdatedMetadata": {
      "type": "object",
      "properties": {
        "readReceiptsEnabled": {
          "description": "The new read receipts state.",
          "type": "boolean"
        }
      },
      "id": "ReadReceiptsSettingsUpdatedMetadata"
    },
    "Media": {
      "type": "object",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "Name of the media resource."
        }
      },
      "description": "Media resource.",
      "id": "Media"
    },
    "GoogleChatV1WidgetMarkup": {
      "properties": {
        "textParagraph": {
          "description": "Display a text paragraph in this widget.",
          "$ref": "GoogleChatV1WidgetMarkupTextParagraph"
        },
        "keyValue": {
          "description": "Display a key value item in this widget.",
          "$ref": "GoogleChatV1WidgetMarkupKeyValue"
        },
        "buttons": {
          "items": {
            "$ref": "GoogleChatV1WidgetMarkupButton"
          },
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set.",
          "type": "array"
        },
        "image": {
          "$ref": "GoogleChatV1WidgetMarkupImage",
          "description": "Display an image in this widget."
        }
      },
      "description": "A widget is a UI element that presents texts, images, etc.",
      "id": "GoogleChatV1WidgetMarkup",
      "type": "object"
    },
    "AppsDynamiteSharedOrganizationInfo": {
      "id": "AppsDynamiteSharedOrganizationInfo",
      "type": "object",
      "description": "Contains info about the entity that something is, or is owned by.",
      "properties": {
        "consumerInfo": {
          "$ref": "AppsDynamiteSharedOrganizationInfoConsumerInfo"
        },
        "customerInfo": {
          "$ref": "AppsDynamiteSharedOrganizationInfoCustomerInfo"
        }
      }
    },
    "AppsDynamiteSharedAssistantSuggestion": {
      "type": "object",
      "properties": {
        "feedbackContext": {
          "$ref": "AppsDynamiteSharedAssistantFeedbackContext",
          "description": "Data for rendering feedback."
        },
        "findDocumentSuggestion": {
          "$ref": "AppsDynamiteSharedFindDocumentSuggestion",
          "description": "Suggestion type that suggests documents (docs, slides, sheets)."
        },
        "debugContext": {
          "description": "Info regarding suggestion debug information.",
          "$ref": "AppsDynamiteSharedAssistantDebugContext"
        },
        "sessionContext": {
          "$ref": "AppsDynamiteSharedAssistantSessionContext",
          "description": "Session context specific to the Assistant suggestion."
        },
        "serializedSuggestions": {
          "type": "string",
          "description": "String representation of the suggestions provided."
        }
      },
      "description": "Data for an Assistant suggestion.",
      "id": "AppsDynamiteSharedAssistantSuggestion"
    },
    "CommunalLabelTag": {
      "id": "CommunalLabelTag",
      "properties": {
        "creatorUserId": {
          "description": "Gaia ID of the user who added the tag, if any. Not present for any tags automatically created by server-side processing.",
          "format": "int64",
          "type": "string"
        },
        "labelId": {
          "description": "A string ID representing the label. Possible ID values are documented at go/chat-labels-howto:ids. Example: \"^*t_p\" for \"Pinned\".",
          "type": "string"
        }
      },
      "type": "object",
      "description": "An individual instance (or \"tag\") of a label configured as a communal type that's associated with a message."
    },
    "DynamiteSpacesScoringInfo": {
      "description": "This is the proto for holding space level scoring information. This data is used for logging in query-api server and for testing purposes.",
      "id": "DynamiteSpacesScoringInfo",
      "properties": {
        "topicalityScore": {
          "type": "number",
          "format": "double"
        },
        "smallUnjoinedSpacesAffinityScore": {
          "format": "double",
          "type": "number"
        },
        "spaceCreationTimestampSecs": {
          "type": "string",
          "format": "int64"
        },
        "affinityScore": {
          "type": "number",
          "format": "double"
        },
        "lastReadTimestampSecs": {
          "format": "int64",
          "type": "string"
        },
        "smallContactListAffinityScore": {
          "format": "double",
          "type": "number"
        },
        "lastMessagePostedTimestampSecs": {
          "format": "int64",
          "type": "string"
        },
        "contactsIntersectionCount": {
          "type": "number",
          "format": "double"
        },
        "finalScore": {
          "type": "number",
          "format": "double"
        },
        "joinedSpacesAffinityScore": {
          "format": "double",
          "type": "number"
        },
        "commonContactCountAffinityScore": {
          "type": "number",
          "format": "double"
        },
        "memberMetadataCount": {
          "type": "number",
          "format": "double"
        },
        "messageScore": {
          "format": "double",
          "type": "number"
        },
        "numAucContacts": {
          "format": "int64",
          "type": "string"
        },
        "freshnessScore": {
          "type": "number",
          "format": "double"
        },
        "spaceAgeInDays": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ContextualAddOnMarkup": {
      "properties": {
        "toolbar": {
          "$ref": "Toolbar",
          "description": "Deprecated."
        },
        "cards": {
          "items": {
            "$ref": "Card"
          },
          "type": "array",
          "description": "A card must contain a header and at least 1 section."
        }
      },
      "id": "ContextualAddOnMarkup",
      "type": "object",
      "description": "The markup for developers to specify the contents of a contextual AddOn. A contextual AddOn is triggered in context of an email. For that email, there can be N items that are associated with the email (e.g. contacts, sales lead, meeting information). Each item is represented as a \"card\". A card has two views, collapsed and detailed. If there are more than 1 card, the cards are show as a list of collapsed views. The end user can expand into the detailed view for each of those cards. In the detailed view, developers have the freedom to use a variety of \"widgets\" to construct it. The model here is to restrict (make consistent for end users) the navigation of the N cards but providing developers the freedom to build the detailed view that can best represent their use case/content. Go http://go/aoig-widgets1 to see the mocks. Post v1, we plan to support new AddOn use cases that will require different and separate 'templates'. For example, a compose triggered AddOn which will support a new set of use cases with different user interaction patterns. As a result, we will likely need a very different template than this one."
    },
    "Metaline": {
      "id": "Metaline",
      "description": "A metaline is a list of properties that are displayed along with the search result to provide context.",
      "properties": {
        "properties": {
          "type": "array",
          "description": "The list of displayed properties for the metaline. The maximum number of properties is 5.",
          "items": {
            "$ref": "DisplayedProperty"
          }
        }
      },
      "type": "object"
    },
    "EmailAddress": {
      "id": "EmailAddress",
      "description": "A person's email address.",
      "type": "object",
      "properties": {
        "primary": {
          "description": "Indicates if this is the user's primary email. Only one entry can be marked as primary.",
          "type": "boolean"
        },
        "emailUrl": {
          "description": "The URL to send email.",
          "type": "string"
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address."
        },
        "customType": {
          "type": "string",
          "description": "If the value of type is custom, this property contains the custom type string."
        },
        "type": {
          "type": "string",
          "description": "The type of the email account. Acceptable values are: \"custom\", \"home\", \"other\", \"work\"."
        }
      }
    },
    "MessageParentId": {
      "description": "Primary key identifying Message resource's immediate parent. For top-level Messages, either topic_id or chat_id is populated. For replies, message_id is populated with the topic Message's ID.",
      "properties": {
        "topicId": {
          "description": "ID of the Topic this Message is posted to. NEXT TAG : 5",
          "$ref": "TopicId"
        }
      },
      "type": "object",
      "id": "MessageParentId"
    },
    "AppsDynamiteSharedJustificationPerson": {
      "properties": {
        "user": {
          "description": "Obfuscated user ID.",
          "$ref": "UserId"
        },
        "isRecipient": {
          "description": "Whether the person is the recipient of the suggestions.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedJustificationPerson",
      "description": "Data for rendering a person associated with a document."
    },
    "AppsDynamiteSharedPhoneNumber": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The actual phone number.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The phone number type, e.g., work, mobile, etc."
        }
      },
      "id": "AppsDynamiteSharedPhoneNumber"
    },
    "SearchResult": {
      "properties": {
        "metadata": {
          "$ref": "Metadata",
          "description": "Metadata of the search result."
        },
        "url": {
          "type": "string",
          "description": "The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn't be changed."
        },
        "snippet": {
          "description": "The concatenation of all snippets (summaries) available for this result.",
          "$ref": "Snippet"
        },
        "clusteredResults": {
          "items": {
            "$ref": "SearchResult"
          },
          "description": "If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be empty.",
          "type": "array"
        },
        "title": {
          "type": "string",
          "description": "Title of the search result."
        },
        "debugInfo": {
          "$ref": "ResultDebugInfo",
          "description": "Debugging information about this search result."
        }
      },
      "id": "SearchResult",
      "description": "Results containing indexed information for a document.",
      "type": "object"
    },
    "CardCapabilityMetadata": {
      "id": "CardCapabilityMetadata",
      "properties": {
        "requiredCapabilities": {
          "items": {
            "type": "string",
            "enumDescriptions": [
              "",
              "NEXT TAG : 2"
            ],
            "enum": [
              "UNKNOWN",
              "SUPPORTS_BASE_CARDS"
            ]
          },
          "type": "array",
          "description": "NEXT TAG : 2"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedTasksAnnotationDataCompletionChange": {
      "properties": {},
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationDataCompletionChange"
    },
    "DeleteMetadata": {
      "id": "DeleteMetadata",
      "type": "object",
      "properties": {},
      "description": "A message delete in Dynamite inserts a Babel-only item containing this field. This is only inserted for messages before the source-of-truth flip. See go/hsc-message-deletions for more details."
    },
    "TextField": {
      "id": "TextField",
      "type": "object",
      "properties": {
        "autoCompleteMultipleSelections": {
          "description": "When set to true, a user can input multiple auto-complet items.",
          "type": "boolean"
        },
        "maxLines": {
          "type": "integer",
          "format": "int32"
        },
        "hintText": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The default value when no input from user."
        },
        "onChange": {
          "$ref": "FormAction"
        },
        "name": {
          "description": "The name of the text field which is will be used in FormInput.",
          "type": "string"
        },
        "autoCompleteCallback": {
          "description": "The refresh function which returns AutoComplete based on the user's input text. If the callback is not specified, auto complete will be purely done in client side based on the auto_complete items.",
          "$ref": "FormAction"
        },
        "autoComplete": {
          "description": "The initial set of auto complete items without any user input.",
          "$ref": "AutoComplete"
        },
        "type": {
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ]
        },
        "label": {
          "description": "One of label or hint_text is required to be specified by the developers.",
          "type": "string"
        }
      }
    },
    "PollItemsRequest": {
      "type": "object",
      "id": "PollItemsRequest",
      "properties": {
        "statusCodes": {
          "items": {
            "enumDescriptions": [
              "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
              "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
              "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
              "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
              "API has accepted the up-to-date data of this item."
            ],
            "type": "string",
            "enum": [
              "CODE_UNSPECIFIED",
              "ERROR",
              "MODIFIED",
              "NEW_ITEM",
              "ACCEPTED"
            ]
          },
          "description": "Limit the items polled to the ones with these statuses.",
          "type": "array"
        },
        "queue": {
          "type": "string",
          "description": "Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters."
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "limit": {
          "description": "Maximum number of items to return. The maximum value is 100 and the default value is 20.",
          "type": "integer",
          "format": "int32"
        },
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        }
      }
    },
    "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime": {
      "type": "object",
      "properties": {
        "allDay": {
          "$ref": "Date",
          "description": "All day event."
        },
        "timed": {
          "type": "string",
          "format": "google-datetime",
          "description": "Non all day event."
        }
      },
      "id": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime"
    },
    "HtmlOperatorOptions": {
      "id": "HtmlOperatorOptions",
      "description": "Used to provide a search operator for html properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "properties": {
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the html property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:\u003cvalue\u003e* show results only where the value of the property named *subjectLine* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator return all items where *\u003cvalue\u003e* matches the value of any html properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedMessageInfo": {
      "type": "object",
      "id": "AppsDynamiteSharedMessageInfo",
      "properties": {
        "messageType": {
          "description": "The type of the source chat message.",
          "enum": [
            "MESSAGE_TYPE_UNSPECIFIED",
            "INLINE_REPLY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value where type is not specified.",
            "The source chat message is a threaded reply to another message."
          ]
        },
        "topicReadTimeUsec": {
          "description": "Timestamp of when the topic containing the message has been read by the user. This is populated if the message references an inline reply, in which case the space may be marked as read but the topic still has unread messages.",
          "type": "string",
          "format": "int64"
        },
        "messageId": {
          "$ref": "MessageId",
          "description": "Id of the source chat message. This is kept here because the top-level message ID to refers the AF message ID."
        }
      },
      "description": "Information that references a Dynamite chat message. This is only used for Activity Feed messages."
    },
    "BabelMessageProps": {
      "properties": {
        "eventId": {
          "type": "string",
          "description": "Primary identifier used by Hangouts Classic for its events (messages)."
        },
        "deliveryMedium": {
          "$ref": "DeliveryMedium",
          "description": "Stores the delivery source of messages (such as phone number for SMS)."
        },
        "clientGeneratedId": {
          "format": "int64",
          "description": "Babel clients locally generate this ID to dedupe against the async fanout.",
          "type": "string"
        },
        "wasUpdatedByBackfill": {
          "type": "boolean",
          "description": "Whether or not these message properties were backfilled by go/dinnertrain."
        },
        "messageContent": {
          "$ref": "ChatConserverMessageContent",
          "description": "Stores message segments (text content) and attachments (media URLs)."
        },
        "contentExtension": {
          "$ref": "ChatContentExtension",
          "description": "Stores additional Babel-specific properties (such as event metadata)."
        }
      },
      "description": "Container for Babel (Hangouts Classic) only message properties. The properties here will not be consumed by Dynamite clients. They are relevant only for Hangouts Classic.",
      "id": "BabelMessageProps",
      "type": "object"
    },
    "AppsDynamiteV1ApiCompatV1ActionConfirm": {
      "type": "object",
      "description": "Confirmation dialog config.",
      "id": "AppsDynamiteV1ApiCompatV1ActionConfirm",
      "properties": {
        "dismiss_text": {
          "description": "\"Cancel\" button label.",
          "type": "string"
        },
        "ok_text": {
          "description": "\"OK\" button label.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Confirmation dialog title."
        },
        "text": {
          "description": "Confirmation dialog body text.",
          "type": "string"
        }
      }
    },
    "RbacRoleProto": {
      "properties": {
        "name": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "rbacNamespace": {
          "type": "string",
          "description": "DEPRECATED as of 01.11.2019"
        },
        "rbacRoleName": {
          "type": "string",
          "description": "Format: \"RbacNamespaceName.RbacRoleName(/field=value)*\", e.g., \"hr.v1.Reader\", \"hr.v1.Reader/language=EN_US/country=USA/room=NYC-9th-11A201\"."
        }
      },
      "description": "Principal associated with a given RBAC role. This principal is used by Sphinx Provisioning Service for RBAC (go/cedi-auth) provisionable (go/sphinx-rbacz-design).",
      "type": "object",
      "id": "RbacRoleProto"
    },
    "PollItemsResponse": {
      "id": "PollItemsResponse",
      "properties": {
        "items": {
          "items": {
            "$ref": "Item"
          },
          "type": "array",
          "description": "Set of items from the queue available for connector to process. These items have the following subset of fields populated: version metadata.hash structured_data.hash content.hash payload status queue"
        }
      },
      "type": "object"
    },
    "GetCustomerQueryStatsResponse": {
      "properties": {
        "stats": {
          "type": "array",
          "items": {
            "$ref": "CustomerQueryStats"
          }
        },
        "totalQueryCount": {
          "format": "int64",
          "type": "string",
          "description": "Total successful query count (status code 200) for the given date range."
        }
      },
      "id": "GetCustomerQueryStatsResponse",
      "type": "object"
    },
    "DocumentInfo": {
      "properties": {
        "whiteboardInfo": {
          "description": "A whiteboard document.",
          "$ref": "WhiteboardInfo"
        }
      },
      "description": "Information on a document attached to an active conference.",
      "type": "object",
      "id": "DocumentInfo"
    },
    "ErrorMessage": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "Source"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "description": "Error message per source response.",
      "id": "ErrorMessage"
    },
    "AppsDynamiteSharedMeetMetadata": {
      "properties": {
        "meetingCode": {
          "description": "Required. A globally unique code (e.g. \"cxv-zbgj-wzw\") that points to a meeting space. Note: Meeting codes may be regenerated, which will cause old meeting codes to become invalid.",
          "type": "string"
        },
        "meetingUrl": {
          "type": "string",
          "description": "Required. A URL, in the format \"https://meet.google.com/*\" (e.g. https://meet.google.com/cxv-zbgj-wzw), to identify and access the meeting space."
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedMeetMetadata",
      "description": "Metadata specific for a Meet call that are required to generate call artifacts."
    },
    "UploadMetadata": {
      "properties": {
        "originalDimension": {
          "$ref": "AppsDynamiteSharedDimension",
          "description": "Original dimension of the content. Only set for image attachments."
        },
        "localId": {
          "description": "A copy of the LocalId in Annotation. This field is supposed to be filled by server only.",
          "type": "string"
        },
        "backendUploadMetadata": {
          "$ref": "AppsDynamiteSharedBackendUploadMetadata",
          "description": "Information about the uploaded attachment that is only used in Backend. This field will NOT be sent out of Google."
        },
        "clonedDriveId": {
          "type": "string",
          "description": "Reference to a Drive ID, if this upload file has been previously cloned to Drive. Note: this is deprecated in favor of the AuthorizedItemId below."
        },
        "virusScanResult": {
          "enum": [
            "UNKNOWN_VIRUS_SCAN_RESULT",
            "CLEAN",
            "INFECTED",
            "ERROR",
            "POLICY_VIOLATION"
          ],
          "description": "Result for a virus scan. It's duplicated in the above field apps.dynamite.shared.BackendUploadMetadata",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "The document violates Google's policy for executables and archives."
          ]
        },
        "contentName": {
          "description": "The original file name for the content, not the full path.",
          "type": "string"
        },
        "videoReference": {
          "description": "Reference to a transcoded video attachment. Only set for video attachments.",
          "$ref": "AppsDynamiteSharedVideoReference"
        },
        "contentType": {
          "type": "string",
          "description": "Type is from Scotty's best_guess by default: http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785"
        },
        "clonedAuthorizedItemId": {
          "description": "The \"new\" secure identifier for Drive files. Should be used instead of the deprecated string drive_id field above. This should only be set if the upload file has been added to Drive. Note that older Drive files that do not have a ResourceKey should still use this field, with the resource_key field unset.",
          "$ref": "AuthorizedItemId"
        },
        "dlpMetricsMetadata": {
          "description": "The metrics metadata of the Data Loss Prevention attachment scan.",
          "$ref": "AppsDynamiteSharedDlpMetricsMetadata"
        },
        "clonedDriveAction": {
          "type": "string",
          "enum": [
            "DRIVE_ACTION_UNSPECIFIED",
            "ADD_TO_DRIVE",
            "ORGANIZE",
            "ADD_SHORTCUT",
            "ADD_ANOTHER_SHORTCUT"
          ],
          "description": "DriveAction for organizing the cloned version of this upload in Drive, if the file has been added to Drive. This field is not set if the file has not been added to Drive. Additionally, this field is only set when part of a FileResult in a ListFilesResponse.",
          "enumDescriptions": [
            "No organize action should be shown.",
            "Show \"Add to Drive\" button, for adding file that doesn't exist in Drive to Drive. Note that deleted Drive files that still exist (i.e. in your Trash) will still be ORGANIZE (this is consistent with Gmail Drive attachments).",
            "Show \"Move\" button, for organizing a Drive file the user has permission to move.",
            "Show \"Add shortcut\" button, for adding a shortcut to a Drive file the user does not have permission to move.",
            "Show \"Add another shortcut\" button, for Drive files the user has already created a shortcut to."
          ]
        },
        "attachmentToken": {
          "description": "Opaque token. Clients shall simply pass it back to the Backend. This field will NOT be saved into storage.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Annotation metadata for user Upload artifacts.",
      "id": "UploadMetadata"
    },
    "RepositoryError": {
      "id": "RepositoryError",
      "properties": {
        "type": {
          "description": "The type of error.",
          "enum": [
            "UNKNOWN",
            "NETWORK_ERROR",
            "DNS_ERROR",
            "CONNECTION_ERROR",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "SERVER_ERROR",
            "QUOTA_EXCEEDED",
            "SERVICE_UNAVAILABLE",
            "CLIENT_ERROR"
          ],
          "enumDescriptions": [
            "Unknown error.",
            "Unknown or unreachable host.",
            "DNS problem, such as the DNS server is not responding.",
            "Cannot connect to the repository server.",
            "Failed authentication due to incorrect credentials.",
            "Service account is not authorized for the repository.",
            "Repository server error.",
            "Quota exceeded.",
            "Server temporarily unavailable.",
            "Client-related error, such as an invalid request from the connector to the repository server."
          ],
          "type": "string"
        },
        "errorMessage": {
          "type": "string",
          "description": "Message that describes the error. The maximum allowable length of the message is 8192 characters."
        },
        "httpStatusCode": {
          "type": "integer",
          "description": "Error codes. Matches the definition of HTTP status codes.",
          "format": "int32"
        }
      },
      "description": "Errors when the connector is communicating to the source repository.",
      "type": "object"
    },
    "ChatConserverDynamitePlaceholderMetadataBotMessageMetadata": {
      "properties": {},
      "description": "A bot sent a message in Dynamite.",
      "type": "object",
      "id": "ChatConserverDynamitePlaceholderMetadataBotMessageMetadata"
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemReactions": {
      "properties": {},
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemReactions",
      "type": "object",
      "description": "Existence of this attribute indicates that the AF item is for message reactions, but it is intentionally left empty since the list of reactions can be found in the top-level Message.Reactions."
    },
    "GoogleChatV1WidgetMarkupFormAction": {
      "properties": {
        "actionMethodName": {
          "type": "string",
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired."
        },
        "parameters": {
          "description": "List of action parameters.",
          "items": {
            "$ref": "GoogleChatV1WidgetMarkupFormActionActionParameter"
          },
          "type": "array"
        }
      },
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupFormAction"
    },
    "HostProto": {
      "id": "HostProto",
      "type": "object",
      "description": "Represents a single host. Optionally, the MDB owner of the host can be specified.",
      "properties": {
        "hostOwner": {
          "type": "string",
          "description": "If present, then any checks that compare this Principal to LOAS peer info must confirm the peer's machine owner is equal to 'host_owner'. If absent, then any peer machine owner is acceptable."
        },
        "hostName": {
          "type": "string",
          "description": "Lower-case, fully qualified hostname."
        }
      }
    },
    "Menu": {
      "properties": {
        "items": {
          "items": {
            "$ref": "MenuItem"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "The name of the text field which is will be used in FormInput."
        },
        "label": {
          "type": "string",
          "description": "Label used to be displayed ahead of the menu. It is optional."
        },
        "onChange": {
          "$ref": "FormAction",
          "description": "If specified, form is submitted when selection changed. If not specified, developer will need to specify a separate button."
        }
      },
      "id": "Menu",
      "type": "object",
      "description": "This is deprecated and please use SelectionControl by setting type to DROPDOWN."
    },
    "EnumValuePair": {
      "id": "EnumValuePair",
      "description": "The enumeration value pair defines two things: a required string value and an optional integer value. The string value defines the necessary query term required to retrieve that item, such as *p0* for a priority item. The integer value determines the ranking of that string value relative to other enumerated values for the same property. For example, you might associate *p0* with *0* and define another enum pair such as *p1* and *1*. You must use the integer value in combination with ordered ranking to set the ranking of a given value relative to other enumerated values for the same property name. Here, a ranking order of DESCENDING for *priority* properties results in a ranking boost for items indexed with a value of *p0* compared to items indexed with a value of *p1*. Without a specified ranking order, the integer value has no effect on item ranking.",
      "type": "object",
      "properties": {
        "stringValue": {
          "type": "string",
          "description": "The string value of the EnumValuePair. The maximum length is 32 characters."
        },
        "integerValue": {
          "type": "integer",
          "description": "The integer value of the EnumValuePair which must be non-negative. Optional.",
          "format": "int32"
        }
      }
    },
    "StructuredResult": {
      "type": "object",
      "id": "StructuredResult",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "Representation of a person"
        }
      },
      "description": "Structured results that are returned as part of search request."
    },
    "AppsDynamiteSharedAssistantUnfulfillableRequest": {
      "type": "object",
      "description": "Data for a response to an unfulfillable request.",
      "properties": {},
      "id": "AppsDynamiteSharedAssistantUnfulfillableRequest"
    },
    "VoicePhoneNumberI18nData": {
      "type": "object",
      "id": "VoicePhoneNumberI18nData",
      "properties": {
        "nationalNumber": {
          "description": "Display number formatted using the NATIONAL format.",
          "type": "string"
        },
        "countryCode": {
          "description": "The country calling code for this number, as defined by the ITU. For example, this would be 1 for NANPA countries, and 33 for France (for more info see i18n.phonenumbers.PhoneNumber.country_code).",
          "format": "int32",
          "type": "integer"
        },
        "isValid": {
          "type": "boolean",
          "description": "When present, indicates the number is valid according to the libphonenumber's isValidNumber API (see https://code.google.com/p/libphonenumber/)."
        },
        "internationalNumber": {
          "description": "Display number formatted using the INTERNATIONAL format.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "A region (country, territory, continent, etc), as defined by Unicode's \"CLDR\", itself based on ISO 3166 (UN country codes). For details, see https://www.corp.google.com/~engdocs/java/com/google/i18n/identifiers/RegionCode.html"
        },
        "validationResult": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "When set to a non-default value, indicates the validation reason that is set when phone number is invalid (is_valid is false).",
          "enum": [
            "UNKNOWN",
            "IS_POSSIBLE",
            "INVALID_COUNTRY_CODE",
            "TOO_SHORT",
            "TOO_LONG",
            "IS_POSSIBLE_LOCAL_ONLY",
            "INVALID_LENGTH"
          ]
        }
      }
    },
    "ContextAttribute": {
      "id": "ContextAttribute",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "description": "Text values of the attribute. The maximum number of elements is 10. The maximum length of an element in the array is 32 characters. The value will be normalized (lower-cased) before being matched.",
          "type": "array"
        },
        "name": {
          "description": "The name of the attribute. It should not be empty. The maximum length is 32 characters. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The name will be normalized (lower-cased) before being matched.",
          "type": "string"
        }
      },
      "description": "A named attribute associated with an item which can be used for influencing the ranking of the item based on the context in the request.",
      "type": "object"
    },
    "AppsDynamiteSharedAssistantFeedbackContextFeedbackChip": {
      "type": "object",
      "description": "Suggestion chips for users to indicate positive or negative feedback",
      "properties": {
        "feedbackChipType": {
          "enum": [
            "FEEDBACK_CHIP_TYPE_UNSPECIFIED",
            "WRONG_TRIGGER",
            "WRONG_FILE",
            "CORRECT_TRIGGER",
            "CORRECT_FILE",
            "DISRUPTIVE",
            "OTHER"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified type of feedback chip",
            "Bad/noisy triggering",
            "Incorrect files were presented",
            "The Assistant card triggered appropriately",
            "The correct files were presented",
            "The feature is disruptive",
            "Other reason"
          ],
          "description": "What type of chip to display"
        },
        "state": {
          "enumDescriptions": [
            "Unspecified selection state",
            "Chip is selected",
            "Chip is not selected"
          ],
          "description": "Whether the chip has been selected",
          "enum": [
            "FEEDBACK_CHIP_STATE_UNSPECIFIED",
            "SELECTED",
            "UNSELECTED"
          ],
          "type": "string"
        }
      },
      "id": "AppsDynamiteSharedAssistantFeedbackContextFeedbackChip"
    },
    "TranscriptionSessionInfo": {
      "type": "object",
      "id": "TranscriptionSessionInfo",
      "properties": {
        "sessionStateInfo": {
          "$ref": "SessionStateInfo",
          "description": "Transcription session's state information."
        },
        "transcriptionSessionId": {
          "type": "string",
          "description": "A unique server-generated ID for the transcription session."
        }
      },
      "description": "Information about a transcription session."
    },
    "EnumPropertyOptions": {
      "type": "object",
      "description": "The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*.",
      "id": "EnumPropertyOptions",
      "properties": {
        "orderedRanking": {
          "type": "string",
          "enumDescriptions": [
            "There is no ranking order for the property. Results aren't adjusted by this property's value.",
            "This property is ranked in ascending order. Lower values indicate lower ranking.",
            "This property is ranked in descending order. Lower values indicate higher ranking."
          ],
          "description": "Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.",
          "enum": [
            "NO_ORDER",
            "ASCENDING",
            "DESCENDING"
          ]
        },
        "possibleValues": {
          "description": "The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100.",
          "type": "array",
          "items": {
            "$ref": "EnumValuePair"
          }
        },
        "operatorOptions": {
          "$ref": "EnumOperatorOptions",
          "description": "If set, describes how the enum should be used as a search operator."
        }
      }
    },
    "IndexItemOptions": {
      "id": "IndexItemOptions",
      "type": "object",
      "properties": {
        "allowUnknownGsuitePrincipals": {
          "type": "boolean",
          "description": "Specifies if the index request should allow Google Workspace principals that do not exist or are deleted."
        }
      }
    },
    "AppsDynamiteSharedGridGridItem": {
      "properties": {
        "id": {
          "type": "string",
          "description": "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters."
        },
        "title": {
          "description": "The grid item's title.",
          "type": "string"
        },
        "subtitle": {
          "description": "The grid item's subtitle.",
          "type": "string"
        },
        "textAlignment": {
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "description": "The horizontal alignment of the grid item's text.",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string"
        },
        "image": {
          "$ref": "AppsDynamiteSharedImageComponent",
          "description": "The image that displays in the grid item."
        },
        "layout": {
          "enumDescriptions": [
            "No layout specified.",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "description": "The layout to use for the grid item.",
          "type": "string",
          "enum": [
            "GRID_ITEM_LAYOUT_UNSPECIFIED",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ]
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedGridGridItem",
      "description": "Represents a single item in the grid layout."
    },
    "ScoringConfig": {
      "type": "object",
      "properties": {
        "disableFreshness": {
          "type": "boolean",
          "description": "Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI."
        },
        "disablePersonalization": {
          "type": "boolean",
          "description": "Whether to personalize the results. By default, personal signals will be used to boost results."
        }
      },
      "id": "ScoringConfig",
      "description": "Scoring configurations for a source while processing a Search or Suggest request."
    },
    "MdbUserProto": {
      "description": "An entity from the MDB namespace that is to be interpreted as a user. If using this for authorization, you should only do an exact match on the peer role against user_name.",
      "properties": {
        "gaiaId": {
          "type": "string",
          "format": "int64",
          "description": "Do not set this field. Contact credentials-eng@ if you believe you absolutely need to use it. This is the @prod.google.com Gaia ID that corresponds to the MDB user, see go/authn-merge for details. This field may always be safely ignored when performing an authorization check."
        },
        "userName": {
          "type": "string"
        }
      },
      "id": "MdbUserProto",
      "type": "object"
    },
    "ValueFilter": {
      "type": "object",
      "id": "ValueFilter",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query."
        },
        "value": {
          "$ref": "Value",
          "description": "The value to be compared with."
        }
      }
    },
    "ResultDisplayField": {
      "type": "object",
      "id": "ResultDisplayField",
      "properties": {
        "operatorName": {
          "description": "The operator name of the property.",
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "The display label for the property."
        },
        "property": {
          "$ref": "NamedProperty",
          "description": "The name value pair for the property."
        }
      },
      "description": "Display Fields for Search Results"
    },
    "Filter": {
      "id": "Filter",
      "type": "object",
      "properties": {
        "valueFilter": {
          "$ref": "ValueFilter"
        },
        "compositeFilter": {
          "$ref": "CompositeFilter"
        }
      },
      "description": "A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND."
    },
    "GoogleChatV1WidgetMarkupOnClick": {
      "id": "GoogleChatV1WidgetMarkupOnClick",
      "type": "object",
      "description": "An onclick action (e.g. open a link).",
      "properties": {
        "action": {
          "$ref": "GoogleChatV1WidgetMarkupFormAction",
          "description": "A form action will be triggered by this onclick if specified."
        },
        "openLink": {
          "$ref": "GoogleChatV1WidgetMarkupOpenLink",
          "description": "This onclick triggers an open link action if specified."
        }
      }
    },
    "InitializeCustomerRequest": {
      "properties": {},
      "description": "Request message for `InitializeCustomer` method.",
      "type": "object",
      "id": "InitializeCustomerRequest"
    },
    "SupportUrls": {
      "description": "Urls with additional bot related information.",
      "id": "SupportUrls",
      "type": "object",
      "properties": {
        "tosUrl": {
          "description": "Link to the terms of service webpage for the bot. May be empty.",
          "type": "string"
        },
        "deletionPolicyUrl": {
          "description": "Link to the deletion policy webpage for the bot. Configured by Pantheon, may be empty.",
          "type": "string"
        },
        "privacyPolicyUrl": {
          "type": "string",
          "description": "Link to the privacy policy webpage for the bot. May be empty."
        },
        "setupUrl": {
          "type": "string",
          "description": "Link to the setup webpage for the bot. Configured by Pantheon, may be empty."
        },
        "adminConfigUrl": {
          "type": "string",
          "description": "Link to the admin configuration webpage for the bot. Configured by Pantheon, may be empty."
        },
        "supportUrl": {
          "type": "string",
          "description": "Link to the support webpage for the developer of the bot. May be empty."
        }
      }
    },
    "AppsDynamiteSharedIcon": {
      "id": "AppsDynamiteSharedIcon",
      "properties": {
        "altText": {
          "description": "The description of the icon, used for accessibility. The default value is provided if you don't specify one.",
          "type": "string"
        },
        "imageType": {
          "description": "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.",
          "type": "string",
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "enum": [
            "SQUARE",
            "CIRCLE"
          ]
        },
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "knownIcon": {
          "type": "string",
          "description": "The icon specified by the string name of a list of known icons"
        }
      },
      "type": "object"
    },
    "UniversalPhoneAccess": {
      "description": "Universal phone access contains information required to dial into a conference using one of a static list of phone numbers and a universal PIN. The phone number list is distributed separately.",
      "properties": {
        "pstnInfoUrl": {
          "description": "This field has the same contents as the MeetingSpace.more_join_url field, and is included for compatibility reasons. Clients should use the other field instead. This field is deprecated and will be removed.",
          "type": "string"
        },
        "pin": {
          "type": "string",
          "description": "The PIN that users must enter after dialing a universal number. The pin consists of only decimal digits and the length may vary, though it generally is longer than a PhoneAccess.pin."
        }
      },
      "id": "UniversalPhoneAccess",
      "type": "object"
    },
    "GetDataSourceIndexStatsResponse": {
      "type": "object",
      "id": "GetDataSourceIndexStatsResponse",
      "properties": {
        "averageIndexedItemCount": {
          "type": "string",
          "description": "Average item count for the given date range for which billing is done.",
          "format": "int64"
        },
        "stats": {
          "type": "array",
          "description": "Summary of indexed item counts, one for each day in the requested range.",
          "items": {
            "$ref": "DataSourceIndexStats"
          }
        }
      }
    },
    "FreshnessOptions": {
      "id": "FreshnessOptions",
      "properties": {
        "freshnessDuration": {
          "format": "google-duration",
          "description": "The duration after which an object should be considered stale. The default value is 180 days (in seconds).",
          "type": "string"
        },
        "freshnessProperty": {
          "type": "string",
          "description": "This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time."
        }
      },
      "type": "object",
      "description": "Indicates which freshness property to use when adjusting search ranking for an item. Fresher, more recent dates indicate higher quality. Use the freshness option property that best works with your data. For fileshare documents, last modified time is most relevant. For calendar event data, the time when the event occurs is a more relevant freshness indicator. In this way, calendar events that occur closer to the time of the search query are considered higher quality and ranked accordingly."
    },
    "BroadcastSessionInfo": {
      "id": "BroadcastSessionInfo",
      "type": "object",
      "description": "Information about a broadcast session.",
      "properties": {
        "ingestionId": {
          "type": "string",
          "description": "Input only. Deprecated field, should not be used."
        },
        "broadcastSessionId": {
          "type": "string",
          "description": "A unique server-generated ID for the broadcast session."
        },
        "sessionStateInfo": {
          "$ref": "SessionStateInfo",
          "description": "Broadcast session's state information."
        },
        "broadcastStats": {
          "readOnly": true,
          "description": "Output only. Current broadcast session's statistics.",
          "$ref": "BroadcastStats"
        }
      }
    },
    "ShareScope": {
      "id": "ShareScope",
      "type": "object",
      "properties": {
        "scope": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "PRIVATE",
            "LIMITED",
            "EXTENDED",
            "DASHER_DOMAIN",
            "PUBLIC"
          ],
          "enumDescriptions": [
            "",
            "Only the author can view the post.",
            "Viewable only by a set of people.",
            "Viewable by extended circles.",
            "",
            ""
          ],
          "description": "The scope to which the content was shared."
        },
        "domain": {
          "type": "string",
          "description": "If scope is DOMAIN, this field contains the dasher domain, for example \"google.com\"."
        }
      }
    },
    "GetSearchApplicationSessionStatsResponse": {
      "type": "object",
      "id": "GetSearchApplicationSessionStatsResponse",
      "properties": {
        "stats": {
          "type": "array",
          "items": {
            "$ref": "SearchApplicationSessionStats"
          }
        }
      }
    },
    "AppsDynamiteSharedOrganizationInfoConsumerInfo": {
      "properties": {},
      "description": "Intentionally empty. Used to disambiguate consumer and customer use cases in oneof below.",
      "type": "object",
      "id": "AppsDynamiteSharedOrganizationInfoConsumerInfo"
    },
    "AppsDynamiteSharedSuggestions": {
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of suggestions items which will be used in are used in autocomplete.",
          "items": {
            "$ref": "AppsDynamiteSharedSuggestionsSuggestionItem"
          }
        }
      },
      "id": "AppsDynamiteSharedSuggestions",
      "type": "object",
      "description": "A container wrapping elements necessary for showing suggestion items used in text input autocomplete."
    },
    "AppsDynamiteSharedCallAnnotationData": {
      "id": "AppsDynamiteSharedCallAnnotationData",
      "description": "Data used to render Meet or Google Voice chips in Chat. See go/dynamite-calling-artifacts-in-chat.",
      "properties": {
        "callEndedTimestamp": {
          "format": "google-datetime",
          "type": "string",
          "description": "Timestamp when the call ended. Used to render the call ended system message."
        },
        "callStatus": {
          "enum": [
            "CALL_STATUS_UNSPECIFIED",
            "CALL_STARTED",
            "CALL_MISSED",
            "CALL_ENDED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Indicates that the call has started.",
            "Indicates that the call is missed.",
            "Indicates that the call has ended."
          ],
          "description": "Required. Indicates the call status for the space. Used to determine the chip's state."
        },
        "callMetadata": {
          "$ref": "AppsDynamiteSharedCallMetadata",
          "description": "Required. Call metadata required to create the call artifacts. For now, the metadata contains only the call id to identify the call. This field allows additional data (e.g. voice call type) to be added if needed in the future."
        }
      },
      "type": "object"
    },
    "SigningKeyPossessorProto": {
      "id": "SigningKeyPossessorProto",
      "properties": {
        "serializedVerificationKeyset": {
          "type": "string",
          "format": "byte",
          "description": "The binary serialized Keymaster SerializedReader of a public keyset. The keyset must contain exactly one key. N.B.: If this field is populated, serialized_verification_key should be set to the empty string and keymaster_key_type should be set to zero."
        },
        "keymasterKeyType": {
          "description": "This value must be from the KeyMetadata.Type enum in keymaster.proto.",
          "type": "integer",
          "format": "int32"
        },
        "serializedVerificationKey": {
          "type": "string",
          "description": "The actual verification key bytes corresponding to the above type.",
          "format": "byte"
        }
      },
      "type": "object",
      "description": "Represents a principal who possesses a signing key corresponding to the verification key or keyset described here."
    },
    "ChatConserverDynamitePlaceholderMetadataVideoCallMetadata": {
      "id": "ChatConserverDynamitePlaceholderMetadataVideoCallMetadata",
      "properties": {
        "meetingUrl": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "A Meet initiated in Dynamite and its URL."
    },
    "DlpScanSummary": {
      "type": "object",
      "id": "DlpScanSummary",
      "description": "A summary of a DLP scan event. This is a summary and should contain the minimum amount of data required to identify and process DLP scans. It is written to Starcast and encoded & returned to the client on attachment upload.",
      "properties": {
        "scanId": {
          "type": "string",
          "description": "The scan ID of the corresponding {@link DlpViolationScanRecord} in the {@link EphemeralDlpScans} Spanner table. This can be used to fetch additional details about the scan, e.g. for audit logging."
        },
        "scanNotApplicableForContext": {
          "description": "Indicates that was no attempt to scan a message or attachment because it was not applicable in the given context (e.g. atomic mutuate). If this is true, scan_outcome should not be set. This flag is used to identify messages that DLP did not attempt to scan for monitoring scan coverage. Contents that DLP attempted to scan but skipped can be identified by DlpScanOutcome.SCAN_SKIPPED_* reasons.",
          "type": "boolean"
        },
        "scanOutcome": {
          "description": "The outcome of a DLP Scan. If this is set, scan_not_applicable_for_context should not be true.",
          "enumDescriptions": [
            "",
            "This means no violation is detected on the given message/attachment.",
            "Violation is detected. The message/attachment will be blocked (or deleted if this happens in failure recovery), the user will be warned, and the violation will be logged to BIP.",
            "Violation is detected. The user will be warned, and the violation will be logged to BIP.",
            "Violation is detected and will be logged to BIP (no user-facing action performed).",
            "Rule fetch and evaluation were attempted but an exception occurred.",
            "Rule fetch and evaluation were attempted but the scanning timed out.",
            "Rule fetch completed and evaluation were attempted, but all of the rules failed to be evaluated.",
            "An IllegalStateException is thrown when executing DLP on attachments. This could happen if the space row is missing.",
            "Rule fetch and evaluation is skipped because DLP is not enabled for the user.",
            "Rule fetch and evaluation are skipped because the user sending message is consumer.",
            "Rule fetch and evaluation are skipped because the user sending message is a non-human user (i.e. a bot).",
            "Rule fetch and evaluation are skipped because there is no message to scan. Deprecated: this should not happen since there must be message or attachment for DLP scan.",
            "Rule fetch and evaluation are skipped because the user has acknowledged the warning on the message that triggered the Warn violation and sent the message anyway.",
            "Scanning was skipped because the message originated from Interop or Babel.",
            "Rule fetch happened, but rule evaluation is skipped because no rules were found.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given action params.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given trigger.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned permanent failure while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned an empty response while converting the attachment to text.",
            "Rules were fetched but some evaluations failed. No violation was found in the rules that were successfully evaluated.",
            "Rules were fetched but some evaluations failed. A blocking violation was found in the rules that were successfully evaluated. The message/attachment will be blocked, the user will be notified, and the violation will be logged to BIP. A blocking violation takes precedence over all other violation types.",
            "Rules were fetched but some evaluations failed. A warn violation was found in the rules that were successfully evaluated. The user will be warned, and the violation will be logged to BIP.",
            "Rules were fetched but some evaluations failed. An audit-only violation was found in the rules that were successfully evaluated. The violation will be logged to BIP (no user-facing action performed)."
          ],
          "enum": [
            "SCAN_UNKNOWN_OUTCOME",
            "SCAN_SUCCEEDED_NO_VIOLATION",
            "SCAN_SUCCEEDED_BLOCK",
            "SCAN_SUCCEEDED_WARN",
            "SCAN_SUCCEEDED_AUDIT_ONLY",
            "SCAN_FAILURE_EXCEPTION",
            "SCAN_FAILURE_TIMEOUT",
            "SCAN_FAILURE_ALL_RULES_FAILED",
            "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS",
            "SCAN_SKIPPED_EXPERIMENT_DISABLED",
            "SCAN_SKIPPED_CONSUMER",
            "SCAN_SKIPPED_NON_HUMAN_USER",
            "SCAN_SKIPPED_NO_MESSAGE",
            "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING",
            "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE",
            "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION",
            "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK",
            "SCAN_SUCCEEDED_WITH_FAILURES_WARN",
            "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
          ],
          "type": "string"
        }
      }
    },
    "EventProto": {
      "type": "object",
      "id": "EventProto",
      "description": "Represents the invitees or other users associated with a Google+ Event (see http://goto/events-backend-design).",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "Event IDs consist of alphanumeric characters and colons. Currently required."
        },
        "memberType": {
          "type": "integer",
          "description": "The type of Event members to consider, e.g. \"all members\" vs. \"owners\" vs. \"admins\". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See event.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with event. Currently required.",
          "format": "int32"
        }
      }
    },
    "AppsDynamiteSharedOriginAppSuggestion": {
      "description": "Stores the suggestion provided by apps/bots.",
      "type": "object",
      "id": "AppsDynamiteSharedOriginAppSuggestion",
      "properties": {
        "appId": {
          "$ref": "AppId"
        },
        "cardClickSuggestion": {
          "$ref": "AppsDynamiteSharedCardClickSuggestion"
        }
      }
    },
    "UserDisplayInfo": {
      "type": "object",
      "description": "Resource for displaying user info",
      "id": "UserDisplayInfo",
      "properties": {
        "avatarUrl": {
          "description": "The avatar to show for this user",
          "type": "string"
        },
        "displayName": {
          "description": "The name to show for this user",
          "type": "string"
        }
      }
    },
    "HangoutEvent": {
      "type": "object",
      "id": "HangoutEvent",
      "properties": {
        "participantId": {
          "items": {
            "$ref": "StoredParticipantId"
          },
          "type": "array"
        },
        "mediaType": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "A user has started a PTT broadcast. When receiving a notification with this HangoutMediaType, other users in the conversation will take different actions depending on their active clients: a) If there is a recent \"reasonable\" active client, the user will join hangout and play audio. b) If there is no \"reasonable\" active client an invite will be displayed on all clients."
          ],
          "enum": [
            "AUDIO_VIDEO",
            "AUDIO_ONLY",
            "PUSH_TO_TALK"
          ]
        },
        "hangoutDurationSecs": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "enum": [
            "START_HANGOUT",
            "JOIN_HANGOUT",
            "LEAVE_HANGOUT",
            "END_HANGOUT",
            "HANGOUT_COMING_SOON",
            "ONGOING_HANGOUT"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        }
      }
    },
    "SpellResult": {
      "type": "object",
      "id": "SpellResult",
      "properties": {
        "suggestedQuery": {
          "type": "string",
          "description": "The suggested spelling of the query."
        }
      }
    },
    "MessageInfo": {
      "type": "object",
      "id": "MessageInfo",
      "properties": {
        "searcherMembershipState": {
          "description": "Searcher's membership state in the space where the message is posted.",
          "type": "string",
          "enum": [
            "MEMBER_UNKNOWN",
            "MEMBER_INVITED",
            "MEMBER_JOINED",
            "MEMBER_NOT_A_MEMBER",
            "MEMBER_FAILED"
          ],
          "enumDescriptions": [
            "Default state, do not use",
            "An invitation to the space has been sent",
            "User has joined the space",
            "User is not a member",
            "This state should never be stored in Spanner. It is a state for responses to the clients to indicate that membership mutations have failed and the member is in its previous state."
          ]
        },
        "message": {
          "description": "The content of a matching message.",
          "$ref": "Message"
        }
      }
    },
    "EditMetadata": {
      "id": "EditMetadata",
      "type": "object",
      "description": "A message edit in Dynamite inserts a Babel-only item containing this field.",
      "properties": {}
    },
    "RestrictItem": {
      "properties": {
        "driveTimeSpanRestrict": {
          "$ref": "DriveTimeSpanRestrict"
        },
        "searchOperator": {
          "type": "string",
          "description": "The search restrict (e.g. \"after:2017-09-11 before:2017-09-12\")."
        },
        "driveLocationRestrict": {
          "$ref": "DriveLocationRestrict"
        },
        "driveFollowUpRestrict": {
          "$ref": "DriveFollowUpRestrict"
        },
        "driveMimeTypeRestrict": {
          "$ref": "DriveMimeTypeRestrict",
          "description": "Drive Types."
        }
      },
      "id": "RestrictItem",
      "description": "Information relevant only to a restrict entry. NextId: 12",
      "type": "object"
    },
    "GaiaGroupProto": {
      "type": "object",
      "id": "GaiaGroupProto",
      "properties": {
        "groupId": {
          "format": "int64",
          "type": "string"
        }
      }
    },
    "GetCustomerSessionStatsResponse": {
      "id": "GetCustomerSessionStatsResponse",
      "properties": {
        "stats": {
          "items": {
            "$ref": "CustomerSessionStats"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleChatV1WidgetMarkupOpenLink": {
      "description": "A link that opens a new window.",
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupOpenLink",
      "properties": {
        "url": {
          "description": "The URL to open.",
          "type": "string"
        }
      }
    },
    "ObjectDisplayOptions": {
      "description": "The display options for an object.",
      "type": "object",
      "id": "ObjectDisplayOptions",
      "properties": {
        "objectDisplayLabel": {
          "type": "string",
          "description": "The user friendly label to display in the search result to indicate the type of the item. This is OPTIONAL; if not provided, an object label isn't displayed on the context line of the search results. The maximum length is 64 characters."
        },
        "metalines": {
          "items": {
            "$ref": "Metaline"
          },
          "description": "Defines the properties that are displayed in the metalines of the search results. The property values are displayed in the order given here. If a property holds multiple values, all of the values are displayed before the next properties. For this reason, it is a good practice to specify singular properties before repeated properties in this list. All of the properties must set is_returnable to true. The maximum number of metalines is 3.",
          "type": "array"
        }
      }
    },
    "RecordingInfo": {
      "id": "RecordingInfo",
      "description": "This message is deprecated, please use RecordingSessionInfo instead. Information about recording in the current conference.",
      "properties": {
        "producerDeviceId": {
          "type": "string",
          "description": "The device resource name of the producer device for the currently active recording. Note that, after the producer drops/leaves the conference, this field will be cleaned up by the server after a delay."
        },
        "latestRecordingEvent": {
          "$ref": "RecordingEvent",
          "description": "The latest recording event. This can be used by clients to help explain what is going on, why recording stopped, etc. This will always be set if there is or was an active recording, which means there can be latest event when recording is INACTIVE."
        },
        "recordingApplicationType": {
          "enumDescriptions": [
            "This is never used.",
            "A meeting recording saved to a video file in Google Drive.",
            "A *Google Live* managed stream.",
            "A meeting broadcast."
          ],
          "enum": [
            "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
            "RECORDING",
            "GLIVE_STREAM",
            "BROADCAST"
          ],
          "type": "string",
          "description": "The application type of the current active recording. `RECORDING_APPLICATION_TYPE_UNSPECIFIED` if `recording_status` is inactive."
        },
        "recordingStatus": {
          "enumDescriptions": [
            "This value is never used.",
            "The conference is not being recorded. This can mean either that no recording has been started, or that a previous recording has stopped.",
            "Recording is about to begin. The status will be updated to RECORDING_STARTED when the recording actually starts, which happens when all the backend plumbing is set up.",
            "The recording is started. Any media sent to the conference may be included in the resulting recording."
          ],
          "description": "The current status of the recording. This can be used by clients to show a recording dot or similar to indicated to the user that a recording is taking place.",
          "enum": [
            "RECORDING_UNSPECIFIED",
            "RECORDING_INACTIVE",
            "RECORDING_STARTING",
            "RECORDING_STARTED"
          ],
          "type": "string"
        },
        "ownerDisplayName": {
          "description": "The display name of the owner of the recording output. Email notifications about uploaded recordings will also be sent to this owner.",
          "type": "string"
        },
        "recordingId": {
          "type": "string",
          "description": "An identifier for the current recording, if any. This is returned whenever recording_status is either `RECORDING_STARTING` or `RECORDING_STARTED`."
        }
      },
      "type": "object"
    },
    "SearchRequest": {
      "properties": {
        "queryInterpretationOptions": {
          "description": "Options to interpret the user query.",
          "$ref": "QueryInterpretationOptions"
        },
        "contextAttributes": {
          "type": "array",
          "items": {
            "$ref": "ContextAttribute"
          },
          "description": "Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10."
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested."
        },
        "sortOptions": {
          "$ref": "SortOptions",
          "description": "The options for sorting the search results"
        },
        "dataSourceRestrictions": {
          "items": {
            "$ref": "DataSourceRestriction"
          },
          "description": "The sources to use for querying. If not specified, all data sources from the current search application are used.",
          "type": "array"
        },
        "query": {
          "type": "string",
          "description": "The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)"
        },
        "requestOptions": {
          "description": "Request options, such as the search application and user timezone.",
          "$ref": "RequestOptions"
        },
        "facetOptions": {
          "type": "array",
          "items": {
            "$ref": "FacetOptions"
          }
        },
        "start": {
          "format": "int32",
          "type": "integer",
          "description": "Starting index of the results."
        }
      },
      "description": "The search API request.",
      "id": "SearchRequest",
      "type": "object"
    },
    "MembershipChangedMetadata": {
      "id": "MembershipChangedMetadata",
      "description": "Annotation metadata to display system messages for membership changes.",
      "properties": {
        "affectedMemberships": {
          "type": "array",
          "items": {
            "$ref": "AffectedMembership"
          }
        },
        "affectedMemberProfiles": {
          "items": {
            "$ref": "Member"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "INVITED",
            "JOINED",
            "ADDED",
            "REMOVED",
            "LEFT",
            "BOT_ADDED",
            "BOT_REMOVED",
            "KICKED_DUE_TO_OTR_CONFLICT",
            "ROLE_UPDATED",
            "ROLE_TARGET_AUDIENCE_UPDATED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Non-member -\u003e Can join. Multiple groups and users.",
            "Can join -\u003e Member. One user.",
            "Non-member -\u003e Member. Multiple users.",
            "Can join -\u003e Non-member. One group or user.",
            "Member -\u003e Can join. One user.",
            "Bot added to the room.",
            "Bot removed from the room.",
            "This signifies the user is kicked because the user's OTR policy is conflicted with the room history settings. Joined -\u003e Non-member. One user.",
            "MembershipRole changed. Multiple users.",
            "The room is now joinable by an"
          ]
        },
        "initiatorProfile": {
          "description": "Complete member profiles, when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in.",
          "$ref": "User"
        },
        "initiator": {
          "$ref": "UserId",
          "description": "The user whose action triggered this system message."
        },
        "affectedMembers": {
          "type": "array",
          "items": {
            "$ref": "MemberId"
          },
          "description": "List of users and rosters whose membership status changed."
        }
      },
      "type": "object"
    },
    "GoogleDocsMetadata": {
      "id": "GoogleDocsMetadata",
      "type": "object",
      "properties": {
        "typeInfo": {
          "description": "Contains additional information about the document depending on its type.",
          "$ref": "TypeInfo"
        },
        "fileExtension": {
          "description": "The file extension of the document. NOTE: As of October 2018 this field is not backfilled for old documents.",
          "type": "string"
        },
        "aclInfo": {
          "$ref": "AclInfo",
          "description": "Contains number of users and groups which can access the document."
        },
        "lastContentModifiedTimestamp": {
          "description": "The last time this document was modified, in seconds since epoch. Only counts content modifications.",
          "type": "string",
          "format": "int64"
        },
        "resultInfo": {
          "$ref": "GoogleDocsResultInfo",
          "description": "Additional per-result information, akin to Gmail's SingleThreadResponse. Note: GWS no longer seems to use this field, but there's still one reference to it for Scribe, so we can't remove it."
        },
        "documentType": {
          "enum": [
            "UNKNOWN",
            "DOCUMENT",
            "PRESENTATION",
            "SPREADSHEET",
            "PDF",
            "IMAGE",
            "BINARY_BLOB",
            "FUSION_TABLE",
            "FOLDER",
            "DRAWING",
            "VIDEO",
            "FORM",
            "DRAFT_SITE",
            "DRAFT_SITE_PAGE",
            "JAM",
            "SHORTCUT",
            "SCRIPT"
          ],
          "enumDescriptions": [
            "If the type is unknown or not represented in this enum.",
            "Writely, Word, etc.",
            "Presently, PowerPoint, etc.",
            "Trix, Excel, etc.",
            "File types for Gdrive objects are below.",
            "",
            "Fall-back for unknown Gdrive types.",
            "",
            "",
            "",
            "",
            "",
            "For Atari page and site drafts",
            "",
            "Jamboard Jams (go/jam)",
            "Drive Shortcuts (go/shortcuts)",
            ""
          ],
          "description": "The conceptual type (presentation, document, etc.) of this document.",
          "type": "string"
        }
      },
      "description": "The corpus specific metadata for office-type documents, from Google Docs and other sources. This message is passed to the scorer and beyond. Next tag: 7"
    },
    "TimestampOperatorOptions": {
      "properties": {
        "lessThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is earlier than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "greaterThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is later than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property. For example, if operatorName is *closedon* and the property's name is *closeDate*, then queries like *closedon:\u003cvalue\u003e* show results only where the value of the property named *closeDate* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      },
      "id": "TimestampOperatorOptions",
      "type": "object",
      "description": "Used to provide a search operator for timestamp properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "Message": {
      "id": "Message",
      "type": "object",
      "description": "Message posted to a Space.",
      "properties": {
        "retentionSettings": {
          "description": "The retention settings of the message.",
          "$ref": "AppsDynamiteSharedRetentionSettings"
        },
        "editableBy": {
          "description": "Indicates who can edit the message. This field is set on the read path (e.g. ListTopics) but doesn’t have any effect on the write path (e.g. CreateMessageRequest).",
          "enum": [
            "PERMISSION_UNSPECIFIED",
            "PERMISSION_NO_ONE",
            "PERMISSION_CREATOR",
            "PERMISSION_MEMBER"
          ],
          "enumDescriptions": [
            "Default case, should never be used. If this data is encountered in the DB any request should throw an exception.",
            "No one can mutate the entity.",
            "Only the creator of an entity can mutate it.",
            "Every human member of a space or the creator can mutate the entity."
          ],
          "type": "string"
        },
        "props": {
          "description": "Contains additional (currently Hangouts Classic only) properties applicable to this message.",
          "$ref": "MessageProps"
        },
        "createTime": {
          "type": "string",
          "description": "Time when the Message was posted in microseconds.",
          "format": "int64"
        },
        "uploadMetadata": {
          "items": {
            "$ref": "UploadMetadata"
          },
          "type": "array",
          "description": "UploadMetadata b/36864213 is an ongoing effort to move UploadMetadata out of annotations field and save it to upload_metadata field only. After the migration, UploadMetadata will only be saved in this field."
        },
        "originAppSuggestions": {
          "description": "Indicates if this message contains any suggestions that were provided by any Apps.",
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteSharedOriginAppSuggestion"
          }
        },
        "updaterId": {
          "description": "ID of the User who last updated (created/edited/deleted) the Message. This includes information to identify if this was updated by an App on behalf of a user.",
          "$ref": "UserId"
        },
        "creatorId": {
          "description": "ID of the User who posted the Message. This includes information to identify if this was posted by an App on behalf of a user.",
          "$ref": "UserId"
        },
        "localId": {
          "description": "A unique id specified on the client side.",
          "type": "string"
        },
        "secondaryMessageKey": {
          "description": "A client-specified string that can be used to uniquely identify a message in a space, in lieu of `id.message_id`.",
          "type": "string"
        },
        "id": {
          "description": "ID of the resource.",
          "$ref": "MessageId"
        },
        "attributes": {
          "$ref": "MessageAttributes",
          "description": "Lightweight message attributes which values are calculated and set in the servers."
        },
        "deletableBy": {
          "description": "Indicates who can delete the message. This field is set on the read path (e.g. ListTopics) but doesn’t have any effect on the write path (e.g. CreateMessageRequest).",
          "enum": [
            "PERMISSION_UNSPECIFIED",
            "PERMISSION_NO_ONE",
            "PERMISSION_CREATOR",
            "PERMISSION_MEMBER"
          ],
          "enumDescriptions": [
            "Default case, should never be used. If this data is encountered in the DB any request should throw an exception.",
            "No one can mutate the entity.",
            "Only the creator of an entity can mutate it.",
            "Every human member of a space or the creator can mutate the entity."
          ],
          "type": "string"
        },
        "quotedMessageMetadata": {
          "readOnly": true,
          "$ref": "QuotedMessageMetadata",
          "description": "Output only. Metadata for a message that is quoted by this message."
        },
        "attachments": {
          "type": "array",
          "description": "Attachments parsed from incoming webhooks",
          "items": {
            "$ref": "Attachment"
          }
        },
        "lastUpdateTime": {
          "format": "int64",
          "description": "Time when the Message text was last updated in microseconds.",
          "type": "string"
        },
        "botResponses": {
          "type": "array",
          "items": {
            "$ref": "BotResponse"
          },
          "description": "Responses from bots indicating if extra auth/config is needed."
        },
        "dlpScanOutcome": {
          "description": "Data Loss Prevention scan information for this message. Messages are evaluated in the backend on create message/topic and edit message actions. DEPRECATED: use dlp_scan_summary instead.",
          "enum": [
            "SCAN_UNKNOWN_OUTCOME",
            "SCAN_SUCCEEDED_NO_VIOLATION",
            "SCAN_SUCCEEDED_BLOCK",
            "SCAN_SUCCEEDED_WARN",
            "SCAN_SUCCEEDED_AUDIT_ONLY",
            "SCAN_FAILURE_EXCEPTION",
            "SCAN_FAILURE_TIMEOUT",
            "SCAN_FAILURE_ALL_RULES_FAILED",
            "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS",
            "SCAN_SKIPPED_EXPERIMENT_DISABLED",
            "SCAN_SKIPPED_CONSUMER",
            "SCAN_SKIPPED_NON_HUMAN_USER",
            "SCAN_SKIPPED_NO_MESSAGE",
            "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING",
            "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE",
            "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION",
            "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK",
            "SCAN_SUCCEEDED_WITH_FAILURES_WARN",
            "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
          ],
          "enumDescriptions": [
            "",
            "This means no violation is detected on the given message/attachment.",
            "Violation is detected. The message/attachment will be blocked (or deleted if this happens in failure recovery), the user will be warned, and the violation will be logged to BIP.",
            "Violation is detected. The user will be warned, and the violation will be logged to BIP.",
            "Violation is detected and will be logged to BIP (no user-facing action performed).",
            "Rule fetch and evaluation were attempted but an exception occurred.",
            "Rule fetch and evaluation were attempted but the scanning timed out.",
            "Rule fetch completed and evaluation were attempted, but all of the rules failed to be evaluated.",
            "An IllegalStateException is thrown when executing DLP on attachments. This could happen if the space row is missing.",
            "Rule fetch and evaluation is skipped because DLP is not enabled for the user.",
            "Rule fetch and evaluation are skipped because the user sending message is consumer.",
            "Rule fetch and evaluation are skipped because the user sending message is a non-human user (i.e. a bot).",
            "Rule fetch and evaluation are skipped because there is no message to scan. Deprecated: this should not happen since there must be message or attachment for DLP scan.",
            "Rule fetch and evaluation are skipped because the user has acknowledged the warning on the message that triggered the Warn violation and sent the message anyway.",
            "Scanning was skipped because the message originated from Interop or Babel.",
            "Rule fetch happened, but rule evaluation is skipped because no rules were found.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given action params.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given trigger.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned permanent failure while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned an empty response while converting the attachment to text.",
            "Rules were fetched but some evaluations failed. No violation was found in the rules that were successfully evaluated.",
            "Rules were fetched but some evaluations failed. A blocking violation was found in the rules that were successfully evaluated. The message/attachment will be blocked, the user will be notified, and the violation will be logged to BIP. A blocking violation takes precedence over all other violation types.",
            "Rules were fetched but some evaluations failed. A warn violation was found in the rules that were successfully evaluated. The user will be warned, and the violation will be logged to BIP.",
            "Rules were fetched but some evaluations failed. An audit-only violation was found in the rules that were successfully evaluated. The violation will be logged to BIP (no user-facing action performed)."
          ],
          "type": "string"
        },
        "quotedByState": {
          "description": "Output only. Whether this message has been quoted by another message or not. Used by clients to handle message edit flows for messages that have been quoted.",
          "enumDescriptions": [
            "Unspecified state for QuotedByState.",
            "State to indicate that this message is quoted by another message (excluding soft-deleted message and purged ones).",
            "State to indicate that this message are not quoted by another message."
          ],
          "type": "string",
          "readOnly": true,
          "enum": [
            "QUOTED_BY_STATE_UNSPECIFIED",
            "QUOTED_BY_STATE_HAS_BEEN_QUOTED",
            "QUOTED_BY_STATE_HAS_NOT_BEEN_QUOTED"
          ]
        },
        "messageState": {
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "enumDescriptions": [
            "Default - visible to the room / DM.",
            "Private state - only visible to the message creator, and the private_message_viewer if set."
          ],
          "description": "State of the message, indicating whether the message is visible to all members in the group or is only visible to the sender only, or the private_message_viewer if it is set."
        },
        "contentReportSummary": {
          "readOnly": true,
          "$ref": "ContentReportSummary"
        },
        "messageIntegrationPayload": {
          "$ref": "AppsDynamiteSharedMessageIntegrationPayload",
          "description": "An optional payload (restricted to 1P applications) that will be stored with this message. This can only be set by the 1P API and should be used to deliver additional data such a 1P sync version, 1P entity ID to the client for more advanced functionality [Eg. inform Group Tasks tab of new version while linking, fetch & render a live Task/Meet call tile]."
        },
        "lastEditTime": {
          "type": "string",
          "description": "If the message was edited by a user, timestamp of the last edit, in microseconds.",
          "format": "int64"
        },
        "dlpScanSummary": {
          "$ref": "DlpScanSummary",
          "description": "Data Loss Prevention scan information for this message. Messages are evaluated in the backend on create message/topic and edit message actions."
        },
        "messageOrigin": {
          "description": "Where the message was posted from",
          "enum": [
            "ORIGIN_NOT_SET",
            "ORIGIN_DYNAMITE",
            "ORIGIN_BABEL_INTEROP_LIVE",
            "ORIGIN_BABEL_INTEROP_RETRY",
            "ORIGIN_BABEL",
            "ORIGIN_BABEL_DUAL_WRITE",
            "ORIGIN_BABEL_DUAL_WRITE_RETRY",
            "ORIGIN_BACKFILL_FROM_PAPYRUS",
            "ORIGIN_BACKFILL_FROM_GMAIL_ARCHIVE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "The message is from Babel (Hangouts Classic) interop.",
            "The message is from Babel interop retries from Manifold queue.",
            "The message came directly from Babel as source-of-truth",
            "The message came directly from Babel during dual-write",
            "The message came directly from Babel Manifold queue during dual write",
            "The message was backfilled by go/dinnertrain as part of go/storage-consolidation. The backfill origin corresponds to the BackfillState in which the message was created.",
            ""
          ]
        },
        "reports": {
          "description": "Output only. Details of content reports. Set only when the request asks for it.",
          "readOnly": true,
          "items": {
            "$ref": "ContentReport"
          },
          "type": "array"
        },
        "personalLabels": {
          "description": "Personal labels associated with a message for the viewing user. Order of entries is arbitrary and will not list duplicates of the same label_id. See go/chat-labels-design for details. NOTE: This will be unpopulated in the case of SpaceChangelog events.",
          "items": {
            "$ref": "PersonalLabelTag"
          },
          "type": "array"
        },
        "communalLabels": {
          "items": {
            "$ref": "CommunalLabelTag"
          },
          "type": "array",
          "description": "Communal labels associated with a message. These exist on the message itself regardless of which user fetches them. Order of entries is arbitrary and will not list duplicates of the same label_id. See go/chat-labels-design for details."
        },
        "tombstoneMetadata": {
          "$ref": "TombstoneMetadata",
          "description": "Information for the stoning of a Message."
        },
        "isContentPurged": {
          "type": "boolean",
          "description": "Whether the message is content purged. Content purged messages contain only data required for tombstone (see go/chat-infinite-tombstone). This field is only used by Vault to display tombstone and should only be set to true if the message is a tombstone."
        },
        "deleteTime": {
          "type": "string",
          "format": "int64",
          "description": "Time when the Message was deleted in microseconds. This field is set to nonzero value only for Messages deleted globally."
        },
        "isInlineReply": {
          "description": "Output only. Indicates if the message is an inline reply. Set to true only if the message's ParentPath is non-NULL. Currently, only inline replies have non-NULL ParentPath. See go/chat-be-inline-reply-indicator.",
          "readOnly": true,
          "type": "boolean"
        },
        "deleteTimeForRequester": {
          "description": "Time when the Message was per-user deleted by the message requester in microseconds. This field is set to nonzero value only for Message per-user deleted by the requester.",
          "type": "string",
          "format": "int64"
        },
        "appProfile": {
          "$ref": "AppsDynamiteSharedAppProfile",
          "description": "Custom display profile info for apps. Leave the field empty for real users."
        },
        "annotations": {
          "items": {
            "$ref": "Annotation"
          },
          "type": "array",
          "description": "Annotations parsed and extracted from the text body."
        },
        "privateMessageInfos": {
          "items": {
            "$ref": "PrivateMessageInfo"
          },
          "type": "array",
          "description": "A list of per-user private information. This is deprecated, because we no longer plan to support partially private messages or private messages for multiple users. The message_state and private_message_viewer fields should be sufficient for this infrastructure."
        },
        "privateMessageViewer": {
          "$ref": "UserId",
          "description": "Should only be set if the Message State is PRIVATE. If set, the message content is only visible to this user (and any apps associated with the message), as well as the message creator. If unset, a private message is visible to the message creator only."
        },
        "reactions": {
          "items": {
            "$ref": "AppsDynamiteSharedReaction"
          },
          "type": "array",
          "description": "A list of user reactions to this message. Ordered by the timestamp of the first reaction, ascending (oldest to newest)."
        },
        "deletedByVault": {
          "type": "boolean",
          "description": "Was this message deleted by Vault (Only used for Vault support) This is false if message is live or message was deleted by user."
        },
        "textBody": {
          "description": "Plaintext body of the Message.",
          "type": "string"
        },
        "fallbackText": {
          "type": "string",
          "description": "A plain-text description of the attachment, used when clients cannot display formatted attachment (e.g. mobile push notifications)."
        }
      }
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          }
        }
      }
    },
    "TextValues": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "description": "The maximum allowable length for text values is 2048 characters.",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "TextValues",
      "description": "List of text values."
    },
    "TopicId": {
      "type": "object",
      "properties": {
        "groupId": {
          "$ref": "GroupId",
          "description": "The Space or DM that the topic belongs to."
        },
        "topicId": {
          "description": "Opaque, server-assigned ID of the Topic. While this ID is guaranteed to be unique within the Space, it's not guaranteed to be globally unique. Internal usage: this field can be empty in the following cases: 1. To create the first message in a topic. 2. To list last N messages of a Space (regardless of topic).",
          "type": "string"
        }
      },
      "id": "TopicId"
    },
    "LanguageConfig": {
      "properties": {
        "spokenLanguages": {
          "type": "array",
          "description": "The spoken language(s) in BCP47 language code.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "LanguageConfig",
      "description": "The language configuration for the session."
    },
    "CustomerIndexStats": {
      "properties": {
        "date": {
          "description": "The date for which statistics were calculated.",
          "$ref": "Date"
        },
        "itemCountByStatus": {
          "items": {
            "$ref": "ItemCountByStatus"
          },
          "type": "array",
          "description": "Number of items aggregrated by status code."
        }
      },
      "type": "object",
      "id": "CustomerIndexStats",
      "description": "Aggregation of items by status code as of the specified date."
    },
    "AppsDynamiteSharedGrid": {
      "type": "object",
      "id": "AppsDynamiteSharedGrid",
      "properties": {
        "onClick": {
          "description": "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters.",
          "$ref": "AppsDynamiteSharedOnClick"
        },
        "items": {
          "description": "The items to display in the grid.",
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteSharedGridGridItem"
          }
        },
        "columnCount": {
          "description": "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
          "type": "integer",
          "format": "int32"
        },
        "borderStyle": {
          "$ref": "AppsDynamiteSharedBorderStyle",
          "description": "The border style to apply to each grid item."
        },
        "title": {
          "type": "string",
          "description": "The text that displays in the grid header."
        }
      },
      "description": "Represents a Grid widget that displays items in a configurable grid layout."
    },
    "BotResponse": {
      "description": "Information about a bot response, branched from shared/bot_response.proto without frontend User proto as we never store it.",
      "type": "object",
      "id": "BotResponse",
      "properties": {
        "setupUrl": {
          "description": "URL for setting up bot.",
          "type": "string"
        },
        "requiredAction": {
          "enumDescriptions": [
            "",
            "Bot requires configuration.",
            "Bot requires authentication."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN_SETUP_TYPE",
            "CONFIGURATION",
            "AUTHENTICATION"
          ]
        },
        "botId": {
          "$ref": "UserId"
        },
        "responseType": {
          "enumDescriptions": [
            "",
            "Bot fails to respond because of deadline_exceeded or failing to parse bot message.",
            "Bot requires auth or config",
            "Bot fails to respond because it is disabled by domain admin",
            "Bot fails to respond because it is disabled by the bot's developer",
            "Message to bot should be permanently private."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN_RESPONSE_TYPE",
            "ERROR",
            "SETUP_REQUIRED",
            "DISABLED_BY_ADMIN",
            "DISABLED_BY_DEVELOPER",
            "PRIVATE"
          ]
        }
      }
    },
    "CustomerSearchApplicationStats": {
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of search applications for the date.",
          "format": "int64",
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date for which search application stats were calculated."
        }
      },
      "description": "Search application stats for a customer for the given date.",
      "id": "CustomerSearchApplicationStats"
    },
    "IndexItemRequest": {
      "type": "object",
      "id": "IndexItemRequest",
      "properties": {
        "mode": {
          "enumDescriptions": [
            "The priority is not specified in the update request. Leaving priority unspecified results in an update failure.",
            "For real-time updates.",
            "For changes that are executed after the response is sent back to the caller."
          ],
          "type": "string",
          "description": "Required. The RequestMode for this request.",
          "enum": [
            "UNSPECIFIED",
            "SYNCHRONOUS",
            "ASYNCHRONOUS"
          ]
        },
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        },
        "item": {
          "description": "The name of the item. Format: datasources/{source_id}/items/{item_id}",
          "$ref": "Item"
        },
        "indexItemOptions": {
          "$ref": "IndexItemOptions"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        }
      }
    },
    "QuotedMessageMetadata": {
      "type": "object",
      "description": "Quote metadata: go/message-quoting-be-dd-v2. This proto is only used on the read path. For the request proto, refer to `QuotedMessagePayload`. Fields are either derived from storage directly from the Item this metadata belongs to, or is hydrated at read time from another Item read. Note: QuotedMessageMetadata proto is similar to Message proto with less field. Reasons to differtiate QuotedMessageMetadata from Message are: 1. Not all fields for original message is applicable for quoted message. (E.g. reactions, is_inline_reply, etc.), thus separting out for confusion. 2. We don't support nested message quoting. For more detailed discussion, please see http://shortn/_VsSXQb2C7P. For future reference: if your new feature/field will be supported in message quoting feature (go/chat-quoting-prd), you will need to add that field within QuotedMessageMetadata",
      "properties": {
        "messageState": {
          "readOnly": true,
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "Output only. The state of the quoted message. Used by clients to display tombstones for quotes that reference a deleted message.",
          "enum": [
            "MESSAGE_STATE_UNSPECIFIED",
            "MESSAGE_STATE_ACTIVE",
            "MESSAGE_STATE_DELETED"
          ],
          "type": "string"
        },
        "uploadMetadata": {
          "description": "Output only. Upload metadata of the quoted message. NEXT TAG: 11",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "UploadMetadata"
          }
        },
        "textBody": {
          "description": "Output only. Snapshot of the text body of the quoted message.",
          "type": "string",
          "readOnly": true
        },
        "retentionSettings": {
          "readOnly": true,
          "$ref": "AppsDynamiteSharedRetentionSettings",
          "description": "Output only. The retention (OTR) settings of the quoted message."
        },
        "annotations": {
          "description": "Output only. Snapshot of the annotations of the quoted message.",
          "readOnly": true,
          "items": {
            "$ref": "Annotation"
          },
          "type": "array"
        },
        "messageId": {
          "description": "MessageId of the original message that is being quoted. This is derived from the request payload passed from clients. This field is populated from storage directly.",
          "$ref": "MessageId"
        },
        "appProfile": {
          "readOnly": true,
          "description": "Output only. Custom display profile info for apps. Will be empty for real users.",
          "$ref": "AppsDynamiteSharedAppProfile"
        },
        "lastUpdateTimeWhenQuotedMicros": {
          "type": "string",
          "format": "int64",
          "description": "The `last_update_time` of the original message when the client initiated the quote creation. This is derived from the request payload passed from clients. Used to fetch the quoted message contents at a specific time on the read path. This field is populated from storage directly."
        },
        "creatorId": {
          "$ref": "UserId",
          "description": "Output only. ID of the User who posted the quoted message. This includes information to identify if the quoted message was posted by an App on behalf of a user.",
          "readOnly": true
        },
        "botAttachmentState": {
          "enum": [
            "BOT_ATTACHMENT_STATE_UNSPECIFIED",
            "BOT_ATTACHMENT_STATE_HAS_BOT_ATTACHMENT",
            "BOT_ATTACHMENT_STATE_NO_BOT_ATTACHMENT"
          ],
          "description": "Output only. The bot attachment state of the quoted message. Used by clients to display a bot attachment indicator in the UI.",
          "type": "string",
          "readOnly": true,
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      },
      "id": "QuotedMessageMetadata"
    },
    "DataSourceRestriction": {
      "type": "object",
      "id": "DataSourceRestriction",
      "description": "Restriction on Datasource.",
      "properties": {
        "filterOptions": {
          "type": "array",
          "description": "Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: \"objecttype\", \"type\" and \"mimetype\". For now, schema specific filters cannot be used to filter suggestions.",
          "items": {
            "$ref": "FilterOptions"
          }
        },
        "source": {
          "$ref": "Source",
          "description": "The source of restriction."
        }
      }
    },
    "ListUnmappedIdentitiesResponse": {
      "type": "object",
      "id": "ListUnmappedIdentitiesResponse",
      "properties": {
        "unmappedIdentities": {
          "type": "array",
          "items": {
            "$ref": "UnmappedIdentity"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      }
    },
    "PeopleSuggestion": {
      "id": "PeopleSuggestion",
      "properties": {
        "person": {
          "description": "Suggested person. All fields of the person object might not be populated.",
          "$ref": "Person"
        }
      },
      "description": "This field contains information about the person being suggested.",
      "type": "object"
    },
    "Settings": {
      "properties": {
        "presentLock": {
          "description": "The present lock of the meeting space that lets owner control whether the participants can present their screen. True if the present lock feature is enabled for the meeting space.",
          "type": "boolean"
        },
        "attendanceReportEnabled": {
          "description": "Whether attendance report is enabled for the meeting space.",
          "type": "boolean"
        },
        "chatLock": {
          "type": "boolean",
          "description": "The chat lock of the meeting space that lets owner control whether the participants can send chat messages. True if the chat lock feature is enabled for the meeting space."
        },
        "moderationEnabled": {
          "type": "boolean",
          "description": "Indicates whether the meeting space is moderated."
        },
        "defaultAsViewer": {
          "type": "boolean",
          "description": "Whether the default role is viewer or not."
        },
        "reactionsLock": {
          "type": "boolean",
          "description": "The reactions lock of the meeting space that lets owner control whether the participants can send reactions. True if the reactions lock feature is enabled for the meeting space."
        },
        "cseEnabled": {
          "description": "Whether Client-side Encryption is enabled for the meeting space.",
          "type": "boolean"
        },
        "accessLock": {
          "type": "boolean",
          "description": "The access lock of the meeting space that lets owner control who can join the meeting. True if the access lock feature is enabled for the meeting space."
        },
        "cohostArtifactSharingEnabled": {
          "description": "Whether meeting artifacts will be shared with co-hosts.",
          "type": "boolean"
        }
      },
      "description": "Settings of a meeting space that can be viewed and edited by users with permissions. These settings are always populated for output.",
      "type": "object",
      "id": "Settings"
    },
    "AppsDynamiteSharedCalendarEventAnnotationData": {
      "type": "object",
      "id": "AppsDynamiteSharedCalendarEventAnnotationData",
      "properties": {
        "eventCreation": {
          "description": "Notification about the creation of an event.",
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataEventCreation"
        },
        "calendarEvent": {
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent"
        }
      }
    },
    "AppsDynamiteSharedCalendarEventAnnotationDataEventCreation": {
      "description": "Creation of an event (no extra data for now).",
      "properties": {},
      "id": "AppsDynamiteSharedCalendarEventAnnotationDataEventCreation",
      "type": "object"
    },
    "AppsDynamiteSharedCardCardHeader": {
      "properties": {
        "title": {
          "description": "The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.",
          "type": "string"
        },
        "imageType": {
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "type": "string",
          "description": "The image's type.",
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ]
        },
        "imageAltText": {
          "description": "The alternative text of this image which is used for accessibility.",
          "type": "string"
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        }
      },
      "id": "AppsDynamiteSharedCardCardHeader",
      "type": "object"
    },
    "Principal": {
      "type": "object",
      "description": "Reference to a user, group, or domain.",
      "id": "Principal",
      "properties": {
        "groupResourceName": {
          "description": "This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID}",
          "type": "string"
        },
        "userResourceName": {
          "type": "string",
          "description": "This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID}"
        },
        "gsuitePrincipal": {
          "description": "This principal is a Google Workspace user, group or domain.",
          "$ref": "GSuitePrincipal"
        }
      }
    },
    "Item": {
      "type": "object",
      "properties": {
        "version": {
          "format": "byte",
          "description": "Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).",
          "type": "string"
        },
        "payload": {
          "description": "Additional state connector can store for this item. The maximum length is 10000 bytes.",
          "type": "string",
          "format": "byte"
        },
        "status": {
          "description": "Status of the item. Output only field.",
          "$ref": "ItemStatus"
        },
        "metadata": {
          "description": "The metadata information.",
          "$ref": "ItemMetadata"
        },
        "content": {
          "$ref": "ItemContent",
          "description": "Item content to be indexed and made text searchable."
        },
        "queue": {
          "description": "Queue this item belongs to. The maximum length is 100 characters.",
          "type": "string"
        },
        "itemType": {
          "type": "string",
          "description": "The type for this item.",
          "enumDescriptions": [
            "",
            "An item that is indexed for the only purpose of serving information. These items cannot be referred in containerName or inheritAclFrom fields.",
            "An item that gets indexed and whose purpose is to supply other items with ACLs and/or contain other items.",
            "An item that does not get indexed, but otherwise has the same purpose as CONTAINER_ITEM."
          ],
          "enum": [
            "UNSPECIFIED",
            "CONTENT_ITEM",
            "CONTAINER_ITEM",
            "VIRTUAL_CONTAINER_ITEM"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters."
        },
        "structuredData": {
          "description": "The structured data for the item that should conform to a registered object definition in the schema for the data source.",
          "$ref": "ItemStructuredData"
        },
        "acl": {
          "$ref": "ItemAcl",
          "description": "Access control list for this item."
        }
      },
      "id": "Item",
      "description": "Represents a single object that is an item in the search index, such as a file, folder, or a database record."
    },
    "SourceConfig": {
      "description": "Configurations for a source while processing a Search or Suggest request.",
      "properties": {
        "crowdingConfig": {
          "$ref": "SourceCrowdingConfig",
          "description": "The crowding configuration for the source."
        },
        "source": {
          "description": "The source for which this configuration is to be used.",
          "$ref": "Source"
        },
        "scoringConfig": {
          "description": "The scoring configuration for the source.",
          "$ref": "SourceScoringConfig"
        }
      },
      "id": "SourceConfig",
      "type": "object"
    },
    "ListItemsResponse": {
      "type": "object",
      "id": "ListItemsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Item"
          }
        }
      }
    },
    "SearchApplication": {
      "description": "SearchApplication",
      "properties": {
        "defaultFacetOptions": {
          "items": {
            "$ref": "FacetOptions"
          },
          "type": "array",
          "description": "The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above."
        },
        "enableAuditLog": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for requests made for the search application in query APIs."
        },
        "operationIds": {
          "type": "array",
          "description": "Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
          "type": "string"
        },
        "returnResultThumbnailUrls": {
          "description": "With each result we should return the URI for its thumbnail (when applicable)",
          "type": "boolean"
        },
        "dataSourceRestrictions": {
          "type": "array",
          "description": "Retrictions applied to the configurations. The maximum number of elements is 10.",
          "items": {
            "$ref": "DataSourceRestriction"
          }
        },
        "sourceConfig": {
          "items": {
            "$ref": "SourceConfig"
          },
          "type": "array",
          "description": "Configuration for a sources specified in data_source_restrictions."
        },
        "queryInterpretationConfig": {
          "$ref": "QueryInterpretationConfig",
          "description": "The default options for query interpretation"
        },
        "defaultSortOptions": {
          "$ref": "SortOptions",
          "description": "The default options for sorting the search results"
        },
        "scoringConfig": {
          "$ref": "ScoringConfig",
          "description": "Configuration for ranking results."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the Search Application. The maximum length is 300 characters."
        }
      },
      "id": "SearchApplication",
      "type": "object"
    },
    "ObjectValues": {
      "type": "object",
      "description": "List of object values.",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "StructuredDataObject"
          }
        }
      },
      "id": "ObjectValues"
    },
    "Collaboration": {
      "description": "Information about a collaboration session.",
      "properties": {
        "uri": {
          "description": "The uri of the artifact being collaborated on.",
          "type": "string"
        },
        "attachmentId": {
          "type": "string",
          "description": "The attachment being collaborated on."
        },
        "initiator": {
          "description": "Display info of the user who initiated the collaboration session.",
          "$ref": "UserDisplayInfo"
        }
      },
      "type": "object",
      "id": "Collaboration"
    },
    "IntegerOperatorOptions": {
      "description": "Used to provide a search operator for integer properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "id": "IntegerOperatorOptions",
      "type": "object",
      "properties": {
        "greaterThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the integer property using the greater-than operator. For example, if greaterThanOperatorName is *priorityabove* and the property's name is *priorityVal*, then queries like *priorityabove:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* is greater than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "lessThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the integer property using the less-than operator. For example, if lessThanOperatorName is *prioritybelow* and the property's name is *priorityVal*, then queries like *prioritybelow:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* is less than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the integer property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      }
    },
    "SessionEvent": {
      "description": "A session event is something that happens to the streaming session in a conference.",
      "id": "SessionEvent",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "The initiator of the latest event of the streaming session. It will be set for all user events (`type` is 100-199) and unset for all server events(`type` is 200-299).",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "This is never used.",
            "Streaming session was started or is being started by a user.",
            "Streaming session was stopped by a user.",
            "Streaming session was cancelled by a user.",
            "Streaming session was cancelled by the server because of a failure during session initialization.",
            "Streaming session was cancelled by the server because the session initiator left the conference during initialization. When the initiator leaves after the session is started, no event is triggered.",
            "Streaming session is about to be stopped by the server because the session is about to reach the maximum duration.",
            "Streaming session was stopped because the session reached the maximum duration.",
            "Streaming session was stopped because there were no devices left in the conference.",
            "Streaming session was stopped because of an internal error."
          ],
          "enum": [
            "EVENT_UNSPECIFIED",
            "STARTED_BY_USER",
            "STOPPED_BY_USER",
            "CANCELLED_BY_USER",
            "CANCELLED_INITIALIZATION_FAILED",
            "CANCELLED_INITIATOR_LEFT",
            "ACTIVE_ABOUT_TO_STOP_TOO_LONG",
            "STOPPED_TOO_LONG",
            "STOPPED_ALL_DEVICES_LEFT",
            "STOPPED_INTERNAL_FAILURES"
          ],
          "description": "The type of event."
        }
      }
    },
    "ImageKeyValue": {
      "type": "object",
      "description": "This is deprecated and please use KeyValue.",
      "id": "ImageKeyValue",
      "properties": {
        "text": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        },
        "icon": {
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ],
          "type": "string"
        },
        "onClick": {
          "$ref": "OnClick"
        }
      }
    },
    "AppsDynamiteSharedTasksAnnotationDataCreation": {
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationDataCreation",
      "properties": {}
    },
    "GroupLinkSharingModificationEvent": {
      "properties": {
        "newStatus": {
          "type": "string",
          "enum": [
            "UNKNOWN_LINK_SHARING_STATUS",
            "LINK_SHARING_ON",
            "LINK_SHARING_OFF",
            "NOT_AVAILABLE"
          ],
          "enumDescriptions": [
            "",
            "Link sharing is turned on.",
            "Link sharing is turned off.",
            "Link sharing is not available for the conversation."
          ]
        }
      },
      "id": "GroupLinkSharingModificationEvent",
      "type": "object"
    },
    "AppsDynamiteSharedFindDocumentSuggestion": {
      "id": "AppsDynamiteSharedFindDocumentSuggestion",
      "type": "object",
      "properties": {
        "showActionButtons": {
          "description": "Whether to show the action buttons in the card for the suggestions.",
          "type": "boolean"
        },
        "documentSuggestions": {
          "description": "List of documents to render as suggestions.",
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteSharedDocument"
          }
        }
      },
      "description": "Data for a FindDocument suggestion type."
    },
    "AppsDynamiteSharedOpenLinkAppUriIntentExtraData": {
      "description": "Extra data for an android intent. Valid keys are defined in the hosting app contract.",
      "type": "object",
      "id": "AppsDynamiteSharedOpenLinkAppUriIntentExtraData",
      "properties": {
        "key": {
          "type": "string",
          "description": "A key for the intent extra data."
        },
        "value": {
          "type": "string",
          "description": "Value for the given extra data key."
        }
      }
    },
    "MdbGroupProto": {
      "properties": {
        "groupName": {
          "type": "string"
        }
      },
      "description": "An entity from the MDB namespace that is to be interpreted as a group. If using this for authorization, you should do an exact match of the peer role against group_name or any of the names in the Chubby expansion of the MDB group named group_name.",
      "type": "object",
      "id": "MdbGroupProto"
    },
    "SquareProto": {
      "description": "Represents the set of members (of a given type) in a Google+ Square (see http://go/squares). A Square with default member_type is currently (1/2012) identical to the GaiaGroup with the same ID, but that is expected to change soon (see http://go/superglue). Support for this principal type is currently (1/2012) incomplete -- e.g., Keystore does not support it yet (see b/5703421).",
      "properties": {
        "memberType": {
          "format": "int32",
          "type": "integer",
          "description": "The type of Square members to consider, e.g. \"all members\" vs. \"owners\" vs. \"admins\". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See square.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with square. Currently required."
        },
        "squareId": {
          "description": "Currently required.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "id": "SquareProto"
    },
    "DoubleValues": {
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "id": "DoubleValues",
      "description": "List of double values.",
      "type": "object"
    },
    "ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata": {
      "description": "A Calendar event message in Dynamite.",
      "properties": {},
      "type": "object",
      "id": "ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata"
    },
    "GoogleChatV1ContextualAddOnMarkupCardCardHeader": {
      "id": "GoogleChatV1ContextualAddOnMarkupCardCardHeader",
      "type": "object",
      "properties": {
        "imageStyle": {
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ],
          "type": "string",
          "description": "The image's type (e.g. square border or circular border).",
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ]
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        },
        "title": {
          "type": "string",
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines."
        },
        "subtitle": {
          "type": "string",
          "description": "The subtitle of the card header."
        }
      }
    },
    "GatewayAccess": {
      "id": "GatewayAccess",
      "description": "Details on the third-party interoperability settings for the meeting space.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether third-party gateway accesses are enabled for this meeting space. If enabled, the actual access code can be retrieved by calling the GetGatewayAccess RPC method.",
          "type": "boolean"
        }
      }
    },
    "AppsDynamiteSharedColumnsColumnWidgets": {
      "type": "object",
      "properties": {
        "dateTimePicker": {
          "$ref": "AppsDynamiteSharedDateTimePicker",
          "description": "DateTimePicker widget."
        },
        "decoratedText": {
          "$ref": "AppsDynamiteSharedDecoratedText",
          "description": "DecoratedText widget."
        },
        "selectionInput": {
          "description": "SelectionInput widget.",
          "$ref": "AppsDynamiteSharedSelectionInput"
        },
        "image": {
          "description": "Image widget.",
          "$ref": "AppsDynamiteSharedImage"
        },
        "buttonList": {
          "$ref": "AppsDynamiteSharedButtonList",
          "description": "ButtonList widget."
        },
        "textParagraph": {
          "$ref": "AppsDynamiteSharedTextParagraph",
          "description": "Text paragraph widget."
        },
        "textInput": {
          "description": "TextInput widget.",
          "$ref": "AppsDynamiteSharedTextInput"
        }
      },
      "id": "AppsDynamiteSharedColumnsColumnWidgets",
      "description": "LINT.IfChange The `column` widget can contain these widgets."
    },
    "GetCustomerIndexStatsResponse": {
      "properties": {
        "stats": {
          "description": "Summary of indexed item counts, one for each day in the requested range.",
          "type": "array",
          "items": {
            "$ref": "CustomerIndexStats"
          }
        },
        "averageIndexedItemCount": {
          "type": "string",
          "description": "Average item count for the given date range for which billing is done.",
          "format": "int64"
        }
      },
      "type": "object",
      "id": "GetCustomerIndexStatsResponse"
    },
    "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent": {
      "type": "object",
      "properties": {
        "eventId": {
          "description": "ID of the event.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title of the event (at the time the message was generated)."
        },
        "endTime": {
          "description": "The end time of the event.",
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime"
        },
        "startTime": {
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime",
          "description": "The start time of the event."
        }
      },
      "id": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent"
    },
    "DisplayedProperty": {
      "type": "object",
      "properties": {
        "propertyName": {
          "type": "string",
          "description": "The name of the top-level property as defined in a property definition for the object. If the name is not a defined property in the schema, an error is given when attempting to update the schema."
        }
      },
      "description": "A reference to a top-level property within the object that should be displayed in search results. The values of the chosen properties is displayed in the search results along with the display label for that property if one is specified. If a display label is not specified, only the values is shown.",
      "id": "DisplayedProperty"
    },
    "GatewaySipAccess": {
      "properties": {
        "sipAccessCode": {
          "type": "string",
          "description": "Permanent numeric code for manual entry on specially configured devices, currently the same as the PSTN \"Universal pin\"."
        },
        "uri": {
          "description": "The SIP URI the conference can be reached through. The string is on one of the formats: \"sip:@\" \"sips:@\" where currently is the 13-digit universal pin (with the future option to support using a Meet meeting code as well), and is a valid address to be resolved using a DNS SRV lookup, or a dotted quad.",
          "type": "string"
        }
      },
      "id": "GatewaySipAccess",
      "description": "Details how to join the conference via a SIP gateway.",
      "type": "object"
    },
    "SuggestResult": {
      "type": "object",
      "id": "SuggestResult",
      "properties": {
        "source": {
          "description": "The source of the suggestion.",
          "$ref": "Source"
        },
        "suggestedQuery": {
          "type": "string",
          "description": "The suggested query that will be used for search, when the user clicks on the suggestion"
        },
        "querySuggestion": {
          "$ref": "QuerySuggestion",
          "description": "This field will be present if the suggested query is a word/phrase completion."
        },
        "peopleSuggestion": {
          "$ref": "PeopleSuggestion",
          "description": "This is present when the suggestion indicates a person. It contains more information about the person - like their email ID, name etc."
        }
      },
      "description": "One suggestion result."
    },
    "CallSettings": {
      "properties": {
        "moderationEnabled": {
          "description": "Indicates whether the current call is moderated.",
          "type": "boolean"
        },
        "videoLock": {
          "description": "Indicates whether the video lock is currently on or off.",
          "type": "boolean"
        },
        "cseEnabled": {
          "type": "boolean",
          "description": "Whether Client-side Encryption is enabled for this conference."
        },
        "presentLock": {
          "description": "Indicates whether the present lock is currently on or off.",
          "type": "boolean"
        },
        "accessLock": {
          "description": "Indicates whether the access lock is currently on or off.",
          "type": "boolean"
        },
        "audioLock": {
          "description": "Indicates whether the audio lock is currently on or off.",
          "type": "boolean"
        },
        "reactionsLock": {
          "type": "boolean",
          "description": "Indicates whether the reactions lock is currently on or off."
        },
        "chatLock": {
          "type": "boolean",
          "description": "Indicates whether the chat lock is currently on or off."
        },
        "attendanceReportEnabled": {
          "type": "boolean",
          "description": "Indicates whether the attendance report is currently enabled or disabled."
        },
        "projectDinoEnabled": {
          "description": "Indicates whether project Dino is currently on or off. WARNING: This is currently an experimental field. It should not be used without getting an explicit review and approval from the Meet team.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Effective settings of the ongoing conference.",
      "id": "CallSettings"
    },
    "HashtagData": {
      "type": "object",
      "properties": {
        "searchText": {
          "type": "string"
        }
      },
      "id": "HashtagData",
      "description": "Hashtag metadata, for HASHTAG segments. For a hashtag, the \"text\" field should contain the display text, and the search_text field should represent the topic being referenced, without the hash symbol; for example, we might have: text = \"#Google\" hashtag_data.search_text = \"Google\" Another example: text = \"#pikachu\" hashtag_data.search_text = \"Pokemon\" Both strings should be considered part of the searchable text. In go/sbe, both are indexed and searchable."
    },
    "BroadcastStats": {
      "type": "object",
      "description": "Statistics of the broadcast session.",
      "id": "BroadcastStats",
      "properties": {
        "estimatedViewerCount": {
          "description": "Estimated concurrent viewer count.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "ItemMetadata": {
      "description": "Available metadata fields for the item.",
      "properties": {
        "hash": {
          "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "The time when the item was created in the source repository.",
          "type": "string"
        },
        "containerName": {
          "type": "string",
          "description": "The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters."
        },
        "searchQualityMetadata": {
          "description": "Additional search quality metadata of the item",
          "$ref": "SearchQualityMetadata"
        },
        "title": {
          "description": "The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.",
          "type": "string"
        },
        "contentLanguage": {
          "type": "string",
          "description": "The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters."
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the item was last modified in the source repository."
        },
        "contextAttributes": {
          "type": "array",
          "items": {
            "$ref": "ContextAttribute"
          },
          "description": "A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10."
        },
        "keywords": {
          "items": {
            "type": "string"
          },
          "description": "Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.",
          "type": "array"
        },
        "mimeType": {
          "description": "The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.",
          "type": "string"
        },
        "sourceRepositoryUrl": {
          "type": "string",
          "description": "Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters."
        },
        "objectType": {
          "type": "string",
          "description": "The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters."
        },
        "interactions": {
          "items": {
            "$ref": "Interaction"
          },
          "description": "A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.",
          "type": "array"
        }
      },
      "id": "ItemMetadata",
      "type": "object"
    },
    "GroupDetailsUpdatedMetadata": {
      "properties": {
        "prevGroupDetails": {
          "$ref": "AppsDynamiteSharedGroupDetails"
        },
        "newGroupDetails": {
          "$ref": "AppsDynamiteSharedGroupDetails"
        }
      },
      "id": "GroupDetailsUpdatedMetadata",
      "type": "object"
    },
    "GoogleChatV1ContextualAddOnMarkupCardCardAction": {
      "properties": {
        "actionLabel": {
          "description": "The label used to be displayed in the action menu item.",
          "type": "string"
        },
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "GoogleChatV1WidgetMarkupOnClick"
        }
      },
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "id": "GoogleChatV1ContextualAddOnMarkupCardCardAction",
      "type": "object"
    },
    "SocialGraphNodeProto": {
      "description": "Represents a user pseudonym. Pseudonyms are linked accounts on Google and third-party services (e.g. YouTube or Twitter) and are described by a Social Graph Node.",
      "id": "SocialGraphNodeProto",
      "type": "object",
      "properties": {
        "sgnDomain": {
          "type": "string",
          "description": "The fields from ccc/socialgraph/socialgraphnode.proto:SgnNode that uniquely identify a social graph node. The 'ident' field is not included here because its value can be changed."
        },
        "sgnPk": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "NamedProperty"
          },
          "description": "Indexed fields in structured data, returned as a generic named property."
        },
        "objectType": {
          "description": "Object type of the search result.",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time."
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "The thumbnail URL of the result."
        },
        "displayOptions": {
          "$ref": "ResultDisplayMetadata",
          "description": "Options that specify how to display a structured data search result."
        },
        "createTime": {
          "description": "The creation time for this document or object in the search result.",
          "format": "google-datetime",
          "type": "string"
        },
        "mimeType": {
          "description": "Mime type of the search result.",
          "type": "string"
        },
        "source": {
          "description": "The named source for the result, such as Gmail.",
          "$ref": "Source"
        },
        "owner": {
          "$ref": "Person",
          "description": "Owner (usually creator) of the document or object of the search result."
        }
      },
      "id": "Metadata",
      "description": "Metadata of a matched search result.",
      "type": "object"
    },
    "InviteeInfo": {
      "id": "InviteeInfo",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email as typed by the user when invited to Room or DM. This value will be canonicalized and hashed before retained in storage."
        },
        "userId": {
          "description": "Unique, immutable ID of the User.",
          "$ref": "UserId"
        }
      },
      "type": "object",
      "description": "Invitee information from a Dynamite invitation. See go/dynamite-invitee-mgmt."
    },
    "Grid": {
      "id": "Grid",
      "type": "object",
      "properties": {
        "numColumns": {
          "description": "The number of columns to display in the grid. Note that a default value will be used if this field is not specified, and that default value will be different depending on where the grid is shown (dialog vs companion).",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "GridItem"
          },
          "description": "The items to display in the grid."
        },
        "borderStyle": {
          "description": "The border style to apply to each grid item.",
          "$ref": "BorderStyle"
        },
        "title": {
          "type": "string",
          "description": "The text to display in the grid header."
        },
        "onClick": {
          "description": "This callback will be reused by each individual GridItem, but with the item's identifier and index in the items list added to the callback's parameters.",
          "$ref": "OnClick"
        }
      }
    },
    "Divider": {
      "properties": {},
      "id": "Divider",
      "type": "object"
    },
    "IntegrationConfigMutation": {
      "properties": {
        "removePinnedItem": {
          "description": "Remove an active pinned tab using its identifier.",
          "$ref": "PinnedItemId"
        },
        "addApp": {
          "$ref": "AppId",
          "description": "Add an app using its identifier."
        },
        "addPinnedItem": {
          "$ref": "PinnedItemId",
          "description": "Add a pinned tab using its identifier."
        },
        "removeApp": {
          "$ref": "AppId",
          "description": "Remove an active app using its identifier."
        }
      },
      "type": "object",
      "id": "IntegrationConfigMutation"
    },
    "AppsDynamiteSharedCardCardAction": {
      "description": "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser.",
      "type": "object",
      "id": "AppsDynamiteSharedCardCardAction",
      "properties": {
        "onClick": {
          "description": "The onclick action for this action item.",
          "$ref": "AppsDynamiteSharedOnClick"
        },
        "actionLabel": {
          "description": "The label that displays as the action menu item.",
          "type": "string"
        }
      }
    },
    "AclFixStatus": {
      "description": "The message reconstructed based on information in the response of /PermissionFixOptionsService.Query (or the Apiary API that wraps it). Indicates the ability of the requester to change the access to the Drive file for the room roster or the DM members. Used in GetMessagePreviewMetadataResponse only.",
      "properties": {
        "fixableEmailAddress": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of recipient email addresses for which access can be granted. This field contains the same email addresses from the GetMessagePreviewMetadata request if all recipients can be successfully added to the ACL as determined by Drive ACL Fixer. For now, the field is non-empty if and only if the \"fixability\" value is \"CAN_FIX\"."
        },
        "outOfDomainWarningEmailAddress": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of recipient email addresses for which an out-of-domain-sharing warning must be shown, stating that these email addresses are not in the Google Apps organization that the requested item belong to. Empty if all recipients are in the same Google Apps organization."
        },
        "fixability": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "ALREADY_ACCESSIBLE",
            "CAN_FIX",
            "CANNOT_FIX",
            "ACL_FIXER_ERROR"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ]
        }
      },
      "type": "object",
      "id": "AclFixStatus"
    },
    "UrlMetadata": {
      "id": "UrlMetadata",
      "description": "Annotation metadata for a Weblink. In case of pasted link it can qualify to be other types in addition to being a URL - like DRIVE_DOC/DRIVE_SHEET and so on. The URL metadata will also be present and it's up to the client to decide which metadata to render it with. These fields are filled in using page render service.",
      "type": "object",
      "properties": {
        "shouldNotRender": {
          "description": "If the UrlMetadata is missing data for rendering a chip. Deprecated. Use Annotation.ChipRenderType instead.",
          "type": "boolean"
        },
        "imageUrl": {
          "type": "string",
          "description": "Representative image of the website."
        },
        "redirectUrl": {
          "$ref": "SafeUrlProto",
          "description": "The stable redirect URL pointing to frontend server."
        },
        "gwsUrl": {
          "description": "The signed GWS URL.",
          "$ref": "SafeUrlProto"
        },
        "url": {
          "description": "The original URL.",
          "$ref": "SafeUrlProto"
        },
        "gwsUrlExpirationTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "The expiration timestamp for GWS URL, only set when gws_url is set."
        },
        "intImageWidth": {
          "format": "int32",
          "type": "integer",
          "description": "Dimensions of the image: width."
        },
        "imageHeight": {
          "type": "string",
          "description": "Dimensions of the image: height. This field is string to match with page render service response. Deprecated. Use int_image_height instead."
        },
        "domain": {
          "description": "Domain for this url. If it's an IP address the address is returned.",
          "type": "string"
        },
        "snippet": {
          "type": "string",
          "description": "Snippet/small description of the weblink."
        },
        "intImageHeight": {
          "format": "int32",
          "description": "Dimensions of the image: height.",
          "type": "integer"
        },
        "mimeType": {
          "description": "Mime type of the content (Currently mapped from Page Render Service ItemType) Note that this is not necessarily the mime type of the http resource. For example a text/html from youtube or vimeo may actually be classified as a video type. Then we shall mark it as video/* since we don't know exactly what type of video it is. NEXT TAG : 16",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title of the Weblink."
        },
        "imageWidth": {
          "type": "string",
          "description": "Dimensions of the image: width. This field is string to match with page render service response. Deprecated. Use int_image_height instead."
        }
      }
    },
    "DriveFollowUpRestrict": {
      "type": "object",
      "description": "Drive follow-up search restricts (e.g. \"followup:suggestions\").",
      "id": "DriveFollowUpRestrict",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "FOLLOWUP_SUGGESTIONS",
            "FOLLOWUP_ACTION_ITEMS"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      }
    },
    "GoogleChatV1WidgetMarkupImageButton": {
      "description": "An image button with an onclick action.",
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupImageButton",
      "properties": {
        "onClick": {
          "description": "The onclick action.",
          "$ref": "GoogleChatV1WidgetMarkupOnClick"
        },
        "iconUrl": {
          "description": "The icon specified by a URL.",
          "type": "string"
        },
        "icon": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "The icon specified by an enum that indices to an icon provided by Chat API.",
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify."
        }
      }
    },
    "PackagingServiceClient": {
      "properties": {
        "androidPackageName": {
          "description": "Android app's package name to generate the deep-link URI.",
          "type": "string"
        },
        "iosAppStoreId": {
          "description": "iOS app's App Store ID to generate the App Store URL when app is not installed on device.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Client for Android app.",
            "Client for iOS app."
          ],
          "description": "Type of Google API Console client.",
          "type": "string",
          "enum": [
            "ANDROID",
            "IOS"
          ]
        },
        "iosBundleId": {
          "type": "string",
          "description": "iOS app's bundle ID to generate the deep-link URI."
        }
      },
      "description": "Developers register a client in Google API Console to get the deep-linking feature on Google+ posts or frames about their apps. The client data is stored in this proto.",
      "id": "PackagingServiceClient",
      "type": "object"
    },
    "Member": {
      "properties": {
        "user": {
          "$ref": "User"
        },
        "roster": {
          "$ref": "Roster"
        }
      },
      "type": "object",
      "id": "Member"
    },
    "User": {
      "properties": {
        "avatarUrl": {
          "description": "URL for the avatar picture of the User in dynamite",
          "type": "string"
        },
        "phoneNumber": {
          "type": "array",
          "description": "Phone number(s) of the user",
          "items": {
            "$ref": "AppsDynamiteSharedPhoneNumber"
          }
        },
        "email": {
          "description": "Email ID of the user",
          "type": "string"
        },
        "isAnonymous": {
          "type": "boolean",
          "description": "Set to true if none of the depending services (Gaia, PeopleApi) returns any info for this user."
        },
        "deleted": {
          "type": "boolean",
          "description": "Deleted flag, if true, means User has been soft-deleted/purged Deprecated. Use user_account_state field instead."
        },
        "name": {
          "description": "Non-unique, user-defined display name of the User",
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "description": "First or given name of the user"
        },
        "gender": {
          "description": "Gender of the user",
          "type": "string"
        },
        "id": {
          "$ref": "UserId",
          "description": "UserId"
        },
        "blockRelationship": {
          "description": "Information about whether the user is blocked by requester and/or has blocked requester.",
          "$ref": "AppsDynamiteSharedUserBlockRelationship"
        },
        "organizationInfo": {
          "description": "Information about whether the user is a consumer user, or the GSuite customer that they belong to.",
          "$ref": "AppsDynamiteSharedOrganizationInfo"
        },
        "botInfo": {
          "description": "Bot-specific profile information. Leave it empty for human users.",
          "$ref": "BotInfo"
        },
        "lastName": {
          "type": "string",
          "description": "Last or family name of the user"
        },
        "userProfileVisibility": {
          "enum": [
            "UNKNOWN_USER_PROFILE_VISIBILITY",
            "FULL_PROFILE",
            "PRIMARY_MAIL",
            "INVITEE_EMAIL",
            "DELETED_USER",
            "UNKNOWN_USER",
            "FAILURE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "Caller has full visibility.",
            "Caller can only see target user's primary email from Gaia",
            "Caller can only see the email used to invite the target user",
            "Caller can only see the target user as a deleted user. Email is empty. Names are redacted as \"Deleted User\".",
            "Caller has no visibility to the target user at all. Email is empty. Names are redacted as \"Unknown User\".",
            "Stubby failed. Clients should always retry ASAP"
          ],
          "description": "Visibility of user's Profile"
        },
        "userAccountState": {
          "type": "string",
          "enum": [
            "UNKNOWN_USER_ACCOUNT_STATE",
            "ENABLED",
            "DISABLED",
            "DELETED",
            "TEMPORARY_UNAVAILABLE"
          ],
          "enumDescriptions": [
            "",
            "User has Dynamite enabled.",
            "User doesn't have Dynamite enabled. This includes service disabled by admin, or user's account is suspended",
            "User account is deleted",
            "Failed to retrieve user's info. Will use user's email address as name and first_name."
          ],
          "description": "State of user's Gaia Account"
        }
      },
      "description": "User profile information. This user is not necessarily member of a space.",
      "id": "User",
      "type": "object"
    },
    "SimpleSecretHolderProto": {
      "type": "object",
      "description": "Represents a principal which possesses a particular, presumably secret, string. Useful for things like \"auth keys,\" used for anonymous sharing. Since representing this principal with the actual secret included reveals the secret, it's best if the requisite condition is enforced in some other way, for example via Keystore wrapping attributes (Keystore will unwrap only if the specified secret, aka \"attribute\", is presented). All that's stored here is an identifying label.",
      "id": "SimpleSecretHolderProto",
      "properties": {
        "label": {
          "$ref": "SimpleSecretLabelProto",
          "description": "A descriptive label to help identify a relevant ACL entry or otherwise disambiguate this instance."
        }
      }
    },
    "AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage": {
      "type": "object",
      "properties": {},
      "description": "Used for task card attachments on custom user messages that should be kept as is without generating an i18n event message, e.g. the user starts a conversation from an existing task. IMPORTANT: please don't populate this field yet as it could break existing flows until it's implemented. See code at http://shortn/_CM74CdENMx used by http://shortn/_5o85POJY8Q.",
      "id": "AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage"
    },
    "ErrorInfo": {
      "description": "Error information about the response.",
      "properties": {
        "errorMessages": {
          "type": "array",
          "items": {
            "$ref": "ErrorMessage"
          }
        }
      },
      "type": "object",
      "id": "ErrorInfo"
    },
    "GridItem": {
      "type": "object",
      "id": "GridItem",
      "properties": {
        "textAlignment": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Text properties."
        },
        "subtitle": {
          "type": "string"
        },
        "identifier": {
          "description": "A user-specified identifier for this grid item. This identifier will be returned in the parent Grid's on_click callback's parameters.",
          "type": "string"
        },
        "image": {
          "$ref": "ImageComponent"
        },
        "layout": {
          "type": "string",
          "enumDescriptions": [
            "",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "enum": [
            "NOT_SET",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ]
        }
      }
    },
    "ResultDisplayLine": {
      "description": "The collection of fields that make up a displayed line",
      "type": "object",
      "id": "ResultDisplayLine",
      "properties": {
        "fields": {
          "items": {
            "$ref": "ResultDisplayField"
          },
          "type": "array"
        }
      }
    },
    "VPCSettings": {
      "properties": {
        "project": {
          "type": "string",
          "description": "The resource name of the GCP Project to be used for VPC SC policy check. VPC security settings on this project will be honored for Cloud Search APIs after project_name has been updated through CustomerService. Format: projects/{project_id}"
        }
      },
      "type": "object",
      "id": "VPCSettings"
    },
    "GoogleDocsResultInfo": {
      "properties": {
        "attachmentSha1": {
          "description": "The SHA1 hash of the object in Drive, if any.",
          "type": "string"
        },
        "cosmoNameSpace": {
          "format": "int32",
          "type": "integer",
          "description": "For Cosmo objects, the Cosmo namespace the object was in. This allows downstream clients to identify whether a document was created in Writely or Kix, Presently or Punch, or whether it was uploaded from GDrive. See storage_cosmo.Id.NAME_SPACE for a list of all Cosmo name spaces."
        },
        "shareScope": {
          "$ref": "ShareScope",
          "description": "The visibility indicator in the UI will be based upon this."
        },
        "mimeType": {
          "description": "The mimetype of the document.",
          "type": "string"
        },
        "encryptedId": {
          "type": "string",
          "description": "The encrypted (user-visible) id of this object. Knowing the id is sufficient to create a canonical URL for this document."
        },
        "cosmoId": {
          "description": "The storage identifier for the object in Cosmo. This field is intended to used by Stratus/Moonshine integration only. It should not be exposed externally (please refer to encrypted_id for that purpose).",
          "$ref": "Id"
        }
      },
      "type": "object",
      "id": "GoogleDocsResultInfo",
      "description": "A message containing information about a specific result. This information is passed to the scorer and beyond; in particular, GWS relies on it to format the result in the UI. Split from GoogleDocsMetadata in case we later want to reuse the message."
    },
    "LdapUserProto": {
      "id": "LdapUserProto",
      "properties": {
        "userName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetSearchApplicationUserStatsResponse": {
      "id": "GetSearchApplicationUserStatsResponse",
      "properties": {
        "stats": {
          "items": {
            "$ref": "SearchApplicationUserStats"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TombstoneMetadata": {
      "properties": {
        "tombstoneType": {
          "enum": [
            "TOMBSTONE_UNSPECIFIED",
            "CREATOR",
            "ROOM_OWNER",
            "ADMIN",
            "APP_MESSAGE_EXPIRY",
            "CREATOR_VIA_APP",
            "ROOM_OWNER_VIA_APP"
          ],
          "description": "Indicates the type of Tombstone.",
          "enumDescriptions": [
            "This should not be used.",
            "User deleted their own message.",
            "The space owner deleted a message in their space.",
            "The customer admin deleted a message in a space or DM owned by the customer. (go/chat-customer-owned-data)",
            "App scheduled deletion of their own message. See go/bme-dd.",
            "User deleted their own message via an app. See go/chat-api-delete-message.",
            "The space owner deleted a message in their space via an app. See go/chat-api-delete-message."
          ],
          "type": "string"
        }
      },
      "type": "object",
      "id": "TombstoneMetadata",
      "description": "Tombstoning is the act of leaving a contextual trace when deleting a message. See more: go/tombstone-prd, go/hub-dynamite-tombstones-server-design-v2."
    },
    "SessionStateInfo": {
      "id": "SessionStateInfo",
      "description": "Information about the state of a (recording, broadcast, transcription...) session in a conference.",
      "properties": {
        "sessionStopReason": {
          "readOnly": true,
          "description": "Output only. The reason the session was transitioned to STOPPED state.",
          "type": "string",
          "enum": [
            "SESSION_STOP_REASON_UNSPECIFIED",
            "USER_ACTION",
            "STOPPED_INITIALIZATION_FAILED",
            "STOPPED_TOO_LONG",
            "STOPPED_ALL_DEVICES_LEFT",
            "STOPPED_INTERNAL_FAILURES",
            "STOPPED_YOU_TUBE_LIVE_EVENT_ENDED"
          ],
          "enumDescriptions": [
            "Session stop reason unspecified.",
            "Stopped by user action.",
            "Stopped by the server because of an initialization failure.",
            "Stopped because the session reached the maximum duration.",
            "Stopped because there were no devices left in the conference.",
            "Stopped because of an internal error.",
            "Stopped because the broadcast event ended on YouTube."
          ]
        },
        "maxEndTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The max end time of the session, at this time the session will be force stopped/terminated. Clients are expected to use this timestamp to warn users about the force stop.",
          "format": "google-datetime"
        },
        "lastActorDeviceId": {
          "description": "Output only. The device id of the actor is set if the current state is a result of a user action, is empty otherwise.",
          "type": "string",
          "readOnly": true
        },
        "ackInfo": {
          "readOnly": true,
          "$ref": "AckInfo",
          "description": "Output only. The ack info of the session."
        },
        "sessionState": {
          "type": "string",
          "description": "State of the session.",
          "enum": [
            "SESSION_STATE_UNSPECIFIED",
            "STARTING",
            "ACTIVE",
            "STOPPED"
          ],
          "enumDescriptions": [
            "Unspecified session state.",
            "The session is starting.",
            "The session is active/ongoing.",
            "The session has stopped."
          ]
        },
        "languageConfig": {
          "description": "Immutable. The language configuration used by this session. When empty, captions will be disabled. It's a required field for transcription sessions.",
          "$ref": "LanguageConfig"
        }
      },
      "type": "object"
    },
    "WhiteboardInfo": {
      "description": "Information on a whiteboard attached to an active conference. A whiteboard is a Jam document.",
      "id": "WhiteboardInfo",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Cosmo Id of the whiteboard document (Jam).",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "The uri for whiteboard document."
        },
        "title": {
          "type": "string",
          "description": "Title of the whiteboard document."
        }
      }
    },
    "GoogleChatV1ContextualAddOnMarkupCardSection": {
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
      "type": "object",
      "id": "GoogleChatV1ContextualAddOnMarkupCardSection",
      "properties": {
        "widgets": {
          "items": {
            "$ref": "GoogleChatV1WidgetMarkup"
          },
          "description": "A section must contain at least 1 widget.",
          "type": "array"
        },
        "header": {
          "type": "string",
          "description": "The header of the section, text formatted supported."
        }
      }
    },
    "AppsDynamiteSharedContentReportType": {
      "type": "object",
      "id": "AppsDynamiteSharedContentReportType",
      "description": "Denotes a type of content report a user can send.",
      "properties": {
        "systemViolation": {
          "enumDescriptions": [
            "Default value if unset. Do not use directly. This value should not appear as a selectable violation during content reporting.",
            "\"Harassment, offensive, or rude behavior\"",
            "\"Discrimination or harmful stereotypes against anyone, including protected groups\"",
            "\"Explicit content that's graphic, violent, or otherwise inappropriate\"",
            "\"Spam\"",
            "\"Confidential information\"",
            "\"Sensitive information\"",
            "\"Something else\""
          ],
          "type": "string",
          "enum": [
            "VIOLATION_UNSPECIFIED",
            "HARASSMENT",
            "DISCRIMINATION",
            "EXPLICIT_CONTENT",
            "SPAM",
            "CONFIDENTIAL_INFORMATION",
            "SENSITIVE_INFORMATION",
            "OTHER"
          ],
          "description": "Required. Google-defined system violation, covering the most common violations."
        }
      }
    },
    "Person": {
      "description": "Object to represent a person.",
      "id": "Person",
      "properties": {
        "name": {
          "description": "The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.",
          "type": "string"
        },
        "emailAddresses": {
          "description": "The person's email addresses",
          "items": {
            "$ref": "EmailAddress"
          },
          "type": "array"
        },
        "phoneNumbers": {
          "type": "array",
          "items": {
            "$ref": "PhoneNumber"
          },
          "description": "The person's phone numbers"
        },
        "obfuscatedId": {
          "description": "Obfuscated ID of a person.",
          "type": "string"
        },
        "personNames": {
          "description": "The person's name",
          "items": {
            "$ref": "Name"
          },
          "type": "array"
        },
        "photos": {
          "items": {
            "$ref": "Photo"
          },
          "type": "array",
          "description": "A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results."
        }
      },
      "type": "object"
    },
    "Presenter": {
      "description": "Presenter contains information about which device is currently presenting as well as which device requested the presenter to be set.",
      "properties": {
        "copresenterDeviceIds": {
          "description": "The device resource names of other devices which can control the current presentation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "byDeviceId": {
          "type": "string",
          "description": "The device resource name of the device which requested the current presenter to be set. This field can not be modified by clients."
        },
        "presenterDeviceId": {
          "type": "string",
          "description": "The device resource name of the currently presenting device."
        }
      },
      "id": "Presenter",
      "type": "object"
    },
    "AppsDynamiteSharedButton": {
      "description": "A button. Can be a text button or an image button.",
      "properties": {
        "icon": {
          "$ref": "AppsDynamiteSharedIcon",
          "description": "The icon image."
        },
        "disabled": {
          "type": "boolean",
          "description": "If true, the button is displayed in a disabled state and doesn't respond to user actions."
        },
        "text": {
          "type": "string",
          "description": "The text of the button."
        },
        "color": {
          "description": "If set, the button is filled with a solid background.",
          "$ref": "Color"
        },
        "altText": {
          "type": "string",
          "description": "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead."
        },
        "onClick": {
          "description": "The action to perform when the button is clicked.",
          "$ref": "AppsDynamiteSharedOnClick"
        }
      },
      "id": "AppsDynamiteSharedButton",
      "type": "object"
    },
    "Operation": {
      "id": "Operation",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "response": {
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "SelectionItem": {
      "properties": {
        "selected": {
          "description": "If more than one items are selected for RADIO_BUTTON and DROPDOWN, the first selected item is treated as sElected and the after ones are all ignored.",
          "type": "boolean"
        },
        "value": {
          "description": "The value associated with this item which will be sent back to app scripts. Client should use as a form input value.",
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "The text to be displayed."
        }
      },
      "type": "object",
      "id": "SelectionItem"
    },
    "Date": {
      "id": "Date",
      "description": "Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
        },
        "year": {
          "type": "integer",
          "description": "Year of date. Must be from 1 to 9999.",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "description": "Month of date. Must be from 1 to 12.",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "BotInfo": {
      "type": "object",
      "id": "BotInfo",
      "description": "Bot-specific profile information.",
      "properties": {
        "supportedUses": {
          "items": {
            "type": "string",
            "enumDescriptions": [
              "",
              "",
              "",
              ""
            ],
            "enum": [
              "UNKNOWN",
              "CAN_ADD_TO_DM",
              "CAN_ADD_TO_ROOM",
              "CAN_ADD_TO_HUMAN_DM"
            ]
          },
          "description": "The supported uses are limited according to the user that made the request. If the user does not have permission to use the bot, the list will be empty. This could occur for non whitelisted bots in the catalog.",
          "type": "array"
        },
        "botAvatarUrl": {
          "type": "string",
          "description": "URL for the avatar picture of the User in dynamite. This field should be populated if the request is FetchBotCategories/ListBotCatalogEntries"
        },
        "developerName": {
          "description": "Name of bot developer.",
          "type": "string"
        },
        "whitelistStatus": {
          "type": "string",
          "enum": [
            "UNSPECIFIED_STATUS",
            "ALLOWED",
            "ALL_BOTS_DISABLED_BY_ADMIN",
            "BOT_NOT_WHITELISTED_BY_ADMIN"
          ],
          "enumDescriptions": [
            "",
            "",
            "For both ALL_BOTS_DISABLED_BY_ADMIN and BOT_NOT_WHITELISTED_BY_ADMIN, the bot should still be visible in the catalog, but usage of the bot will be disabled. Indicates that all bots has been disabled by the dasher admin.",
            "Indicates that the customer is using whitelisting, but that the bot is not whitelisted."
          ]
        },
        "supportUrls": {
          "description": "Urls with additional information related to the bot. This field should always be set even if all the fields within it are empty, so that it is convenient for clients to work with this field in javascript.",
          "$ref": "SupportUrls"
        },
        "marketPlaceBannerUrl": {
          "description": "URL for the banner image in GSuite Market Place. The banner will be 220x140.",
          "type": "string"
        },
        "appId": {
          "$ref": "AppId",
          "description": "Identifier of the application associated with the bot."
        },
        "status": {
          "enumDescriptions": [
            "",
            "",
            "Bot has been disabled by the bot developer. No one can @mention or interact with the bot."
          ],
          "enum": [
            "UNKNOWN_STATUS",
            "ENABLED",
            "DISABLED_BY_DEVELOPER"
          ],
          "type": "string",
          "description": "Indicates whether bot is enabled/disabled."
        },
        "botName": {
          "description": "Non-unique, user-defined display name of the Bot. This field should be populated if the request is FetchBotCategories/ListBotCatalogEntries.",
          "type": "string"
        },
        "description": {
          "description": "Short description for the bot.",
          "type": "string"
        }
      }
    },
    "RoomUpdatedMetadata": {
      "id": "RoomUpdatedMetadata",
      "type": "object",
      "properties": {
        "renameMetadata": {
          "$ref": "RoomRenameMetadata"
        },
        "groupLinkSharingEnabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "What was updated in the room."
        },
        "initiator": {
          "description": "The user who initiated this room update. Complete member profiles, when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in.",
          "$ref": "User"
        },
        "visibility": {
          "description": "DEPRECATED: See GroupVisibility proto definition.",
          "$ref": "AppsDynamiteSharedGroupVisibility"
        },
        "initiatorType": {
          "enum": [
            "INITIATOR_TYPE_UNSPECIFIED",
            "INITIATOR_TYPE_END_USER",
            "INITIATOR_TYPE_ADMIN"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "The type of the user who initiated this room update.",
          "type": "string"
        },
        "groupDetailsMetadata": {
          "$ref": "GroupDetailsUpdatedMetadata"
        }
      }
    },
    "AclFixRequest": {
      "description": "The request set by clients to instruct Backend how the user intend to fix the ACL. Technically it's not a request to ACL Fixer, because Backend uses /DriveService.Share to modify Drive ACLs.",
      "type": "object",
      "id": "AclFixRequest",
      "properties": {
        "role": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "READER",
            "COMMENTER",
            "WRITER"
          ],
          "type": "string"
        },
        "recipientEmails": {
          "type": "array",
          "description": "For Spaces messages: This field is ignored. For DMs messages: The list of email addresses that should be added to the Drive item's ACL. In general, the list should not be empty when the boolean \"should_fix\" field is set; otherwise, the list should be empty. During transition - when clients do not specify this field but the \"should_fix\" is true, we follow the legacy behavior: share to all users in the DM regardless of emails. This behavior is being phased out.",
          "items": {
            "type": "string"
          }
        },
        "shouldFix": {
          "type": "boolean",
          "description": "Whether to attempt to fix the ACL by adding the room or DM members to the Drive file's ACL."
        }
      }
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "details": {
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "id": "Status",
      "type": "object"
    },
    "CompositeFilter": {
      "properties": {
        "subFilters": {
          "items": {
            "$ref": "Filter"
          },
          "type": "array",
          "description": "Sub filters."
        },
        "logicOperator": {
          "enum": [
            "AND",
            "OR",
            "NOT"
          ],
          "description": "The logic operator of the sub filter.",
          "type": "string",
          "enumDescriptions": [
            "Logical operators, which can only be applied to sub filters.",
            "",
            "NOT can only be applied on a single sub filter."
          ]
        }
      },
      "type": "object",
      "id": "CompositeFilter"
    },
    "QueryOperator": {
      "id": "QueryOperator",
      "properties": {
        "greaterThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name that can be used to isolate the property using the greater-than operator."
        },
        "isSortable": {
          "description": "Can this operator be used to sort results.",
          "type": "boolean"
        },
        "isFacetable": {
          "type": "boolean",
          "description": "Can this operator be used to get facets."
        },
        "objectType": {
          "type": "string",
          "description": "The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators."
        },
        "isSuggestable": {
          "type": "boolean",
          "description": "Can get suggestions for this field."
        },
        "isReturnable": {
          "description": "Will the property associated with this facet be returned as part of search results.",
          "type": "boolean"
        },
        "enumValues": {
          "description": "Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the operator"
        },
        "lessThanOperatorName": {
          "description": "Indicates the operator name that can be used to isolate the property using the less-than operator.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Invalid value.",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "description": "The type of the operator.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "INTEGER",
            "DOUBLE",
            "TIMESTAMP",
            "BOOLEAN",
            "ENUM",
            "DATE",
            "TEXT",
            "HTML"
          ]
        },
        "isRepeatable": {
          "type": "boolean",
          "description": "Indicates if multiple values can be set for this property."
        },
        "operatorName": {
          "type": "string",
          "description": "The name of the operator."
        }
      },
      "type": "object",
      "description": "The definition of a operator that can be used in a Search/Suggest request."
    },
    "UnmappedIdentity": {
      "properties": {
        "resolutionStatusCode": {
          "enum": [
            "CODE_UNSPECIFIED",
            "NOT_FOUND",
            "IDENTITY_SOURCE_NOT_FOUND",
            "IDENTITY_SOURCE_MISCONFIGURED",
            "TOO_MANY_MAPPINGS_FOUND",
            "INTERNAL_ERROR"
          ],
          "enumDescriptions": [
            "Input-only value. Used to list all unmapped identities regardless of status.",
            "The unmapped identity was not found in IDaaS, and needs to be provided by the user.",
            "The identity source associated with the identity was either not found or deleted.",
            "IDaaS does not understand the identity source, probably because the schema was modified in a non compatible way.",
            "The number of users associated with the external identity is too large.",
            "Internal error."
          ],
          "description": "The resolution status for the external identity.",
          "type": "string"
        },
        "externalIdentity": {
          "description": "The resource name for an external user.",
          "$ref": "Principal"
        }
      },
      "id": "UnmappedIdentity",
      "type": "object"
    },
    "OnClick": {
      "properties": {
        "link": {
          "type": "string",
          "description": "This can be used as a short form for OpenLink with the default OpenAs and OnClose. It may be undeprecated if this proves to be handy for developers."
        },
        "openLinkAction": {
          "description": "An add-on triggers this action when the form action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
          "$ref": "FormAction"
        },
        "openLink": {
          "$ref": "OpenLink"
        },
        "action": {
          "$ref": "FormAction"
        }
      },
      "id": "OnClick",
      "type": "object"
    },
    "AppsDynamiteSharedGroupDetails": {
      "description": "NEXT TAG: 3 A GroupDetails proto will store the information pertaining to single Group.",
      "type": "object",
      "properties": {
        "description": {
          "description": "A simple text that describes the purpose of a single Group, the general theme of the topics to be posted and/or the denominator of the Group participants.",
          "type": "string"
        },
        "guidelines": {
          "description": "A simple text describing the rules and expectations from members when participating in conversation.",
          "type": "string"
        }
      },
      "id": "AppsDynamiteSharedGroupDetails"
    },
    "WidgetMarkup": {
      "properties": {
        "buttons": {
          "items": {
            "$ref": "Button"
          },
          "description": "buttons is also oneof data and only one of these fields should be set.",
          "type": "array"
        },
        "image": {
          "$ref": "Image"
        },
        "horizontalAlignment": {
          "description": "The horizontal alignment of this widget.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ]
        },
        "selectionControl": {
          "$ref": "SelectionControl"
        },
        "dateTimePicker": {
          "$ref": "DateTimePicker"
        },
        "divider": {
          "$ref": "Divider"
        },
        "textKeyValue": {
          "$ref": "TextKeyValue"
        },
        "keyValue": {
          "$ref": "KeyValue"
        },
        "textField": {
          "$ref": "TextField"
        },
        "textParagraph": {
          "description": "Read-only Widgets",
          "$ref": "TextParagraph"
        },
        "imageKeyValue": {
          "$ref": "ImageKeyValue"
        },
        "menu": {
          "description": "Input Widgets",
          "$ref": "Menu"
        },
        "grid": {
          "$ref": "Grid"
        }
      },
      "type": "object",
      "id": "WidgetMarkup"
    },
    "Source": {
      "type": "object",
      "properties": {
        "predefinedSource": {
          "type": "string",
          "description": "Predefined content source for Google Apps.",
          "enumDescriptions": [
            "",
            "Suggests queries issued by the user in the past. Only valid when used with the suggest API. Ignored when used in the query API.",
            "Suggests people in the organization. Only valid when used with the suggest API. Results in an error when used in the query API.",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "NONE",
            "QUERY_HISTORY",
            "PERSON",
            "GOOGLE_DRIVE",
            "GOOGLE_GMAIL",
            "GOOGLE_SITES",
            "GOOGLE_GROUPS",
            "GOOGLE_CALENDAR",
            "GOOGLE_KEEP"
          ]
        },
        "name": {
          "type": "string",
          "description": "Source name for content indexed by the Indexing API."
        }
      },
      "description": "Defines sources for the suggest/search APIs.",
      "id": "Source"
    },
    "UserMentionMetadata": {
      "type": "object",
      "description": "Annotation metadata for user mentions (+/@/-).",
      "properties": {
        "gender": {
          "description": "Gender of the mentioned user. One of \"female\", \"male\" or \"other\". Used for choosing accurate translations for strings that contain the UserMention, when these need to be constructed (e.g. task assignment update message). This field should remain empty when clients resolve a UserMention. It will be filled in when a UserMention is generated by the Integration Server.",
          "type": "string"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "INVITE",
            "UNINVITE",
            "MENTION",
            "MENTION_ALL",
            "FAILED_TO_ADD"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "",
            "",
            "",
            "",
            "Server-generated user mention, for clients to strikethrough."
          ],
          "type": "string"
        },
        "inviteeInfo": {
          "description": "Invitee UserId and email used when mentioned. This field should remain empty when type == MENTION_ALL. Invitee_info.email is only used when a user is @-mentioned with an email address, and it will be empty when clients get messages from Backend.",
          "$ref": "InviteeInfo"
        },
        "id": {
          "$ref": "UserId",
          "description": "To be deprecated. Use invitee_info field instead. ID of the User mentioned. This field should remain empty when type == MENTION_ALL."
        },
        "displayName": {
          "description": "Display name of the mentioned user. This field should remain empty when clients resolve a UserMention annotation. It will be filled in when a UserMention is generated by the Integration Server.",
          "type": "string"
        }
      },
      "id": "UserMentionMetadata"
    },
    "SourceResultCount": {
      "description": "Per source result count information.",
      "properties": {
        "resultCountExact": {
          "type": "string",
          "format": "int64",
          "description": "The exact result count for this source."
        },
        "resultCountEstimate": {
          "format": "int64",
          "type": "string",
          "description": "The estimated result count for this source."
        },
        "hasMoreResults": {
          "type": "boolean",
          "description": "Whether there are more search results for this source."
        },
        "source": {
          "description": "The source the result count information is associated with.",
          "$ref": "Source"
        }
      },
      "type": "object",
      "id": "SourceResultCount"
    },
    "AppsDynamiteSharedAssistantSessionContext": {
      "type": "object",
      "description": "Session context specific for Assistant suggestions.",
      "id": "AppsDynamiteSharedAssistantSessionContext",
      "properties": {
        "contextualSessionId": {
          "description": "Unique identifier populated by the contextual request handler for each vertical (Ex: File Suggestions, Smart Scheduling, etc.) that can be used to track sessions end-to-end. May span multiple users (sender-specific).",
          "type": "string"
        }
      }
    },
    "PrivateMessageInfo": {
      "id": "PrivateMessageInfo",
      "properties": {
        "attachments": {
          "type": "array",
          "description": "Attachments private to {@code userId}.",
          "items": {
            "$ref": "Attachment"
          }
        },
        "userId": {
          "description": "Required. The elements in this struct are visible to this user.",
          "$ref": "UserId"
        },
        "gsuiteIntegrationMetadata": {
          "type": "array",
          "items": {
            "$ref": "GsuiteIntegrationMetadata"
          }
        },
        "text": {
          "description": "Text private to {@code user_id}. Initial restriction: Only one of public text or private text is rendered on the client. So if public text is set, private text is ignored.",
          "type": "string"
        },
        "annotations": {
          "items": {
            "$ref": "Annotation"
          },
          "description": "Annotations private to {@code userId}.",
          "type": "array"
        },
        "contextualAddOnMarkup": {
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkup"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Private message information specific to a given user."
    },
    "AppsDynamiteSharedSpaceInfo": {
      "id": "AppsDynamiteSharedSpaceInfo",
      "properties": {
        "description": {
          "type": "string"
        },
        "groupId": {
          "$ref": "GroupId"
        },
        "name": {
          "type": "string"
        },
        "avatarInfo": {
          "$ref": "AppsDynamiteSharedAvatarInfo"
        },
        "isExternal": {
          "type": "boolean",
          "description": "Whether this is a space that enables guest access"
        },
        "userMembershipState": {
          "enum": [
            "MEMBER_UNKNOWN",
            "MEMBER_INVITED",
            "MEMBER_JOINED",
            "MEMBER_NOT_A_MEMBER",
            "MEMBER_FAILED"
          ],
          "type": "string",
          "description": "searching user's membership state in this space",
          "enumDescriptions": [
            "Default state, do not use",
            "An invitation to the space has been sent",
            "User has joined the space",
            "User is not a member",
            "This state should never be stored in Spanner. It is a state for responses to the clients to indicate that membership mutations have failed and the member is in its previous state."
          ]
        },
        "numMembers": {
          "format": "int32",
          "type": "integer"
        },
        "inviterEmail": {
          "description": "The email address of the user that invited the calling user to the room, if available. This field will only be populated for direct invites, it will be empty if the user was indirectly invited to the group.",
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "Defines the representation of a single matching space."
    },
    "TextOperatorOptions": {
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the text property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:\u003cvalue\u003e* show results only where the value of the property named *subjectLine* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any text properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "exactMatchWithOperator": {
          "type": "boolean",
          "description": "If true, the text value is tokenized as one atomic value in operator searches and facet matches. For example, if the operator name is \"genre\" and the value is \"science-fiction\" the query restrictions \"genre:science\" and \"genre:fiction\" doesn't match the item; \"genre:science-fiction\" does. Text value matching is case-sensitive and does not remove special characters. If false, the text is tokenized. For example, if the value is \"science-fiction\" the queries \"genre:science\" and \"genre:fiction\" matches the item."
        }
      },
      "type": "object",
      "description": "Used to provide a search operator for text properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "id": "TextOperatorOptions"
    },
    "SimpleSecretLabelProto": {
      "properties": {
        "inviteId": {
          "description": "Used when type == INVITE.",
          "format": "int64",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "This is optional because required enums cannot be extended.",
          "enumDescriptions": [
            "Used as a default value.",
            "The singleton auth key for a common-sharing ACL. No other fields of SimpleSecretLabelProto need to be filled in, since there is only one of these per ACL. The corresponding secret is the auth key encoded in 64-bit big-endian.",
            "A common-sharing invite token. |invite_id| (below) must be set to identify the invite. The corresponding secret is the SecretMaterial, as defined by InviteToken.SecretMaterial in acl.proto, encoded in 64-bit big-endian. If there is no SecretMaterial, the secret should be omitted; in this case the invite ID itself is the secret, which is less secure.",
            "A generic secret value. Do not use this if any more specific type is appropriate.",
            "***DEPRECATED (3-Oct-2011)*** Use the new CapTokenProto and CapTokenHolderProto instead. A capability token. The corresponding secret is an arbitrary-length random byte string (recommended: 128 bits). |capability_id| may be filled in (see below). See CapTokenMetadata in acl.proto.",
            "Identifies a principal that can perform a successful REKE handshake. The holder is not authenticated by presenting a SimpleSecretProto, but rather by knowing either the REKE resumption ticket secret or the private key corresponding to a public key specified outside the PrincipalProto. For more information, see: http://goto.google.com/loas2cert"
          ],
          "enum": [
            "INVALID",
            "AUTH_KEY",
            "INVITE",
            "GENERIC_SECRET",
            "CAP_TOKEN",
            "REKE"
          ]
        },
        "genericLabel": {
          "description": "Used when type = GENERIC_SECRET",
          "type": "string",
          "format": "byte"
        },
        "capabilityId": {
          "format": "int32",
          "type": "integer",
          "description": "***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops using CAP_TOKEN labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label appears in a SimpleSecretHolder Principal, |capability_id| must be filled in to identify one of the capabilities on the ACL. When a CAP_TOKEN label appears in a SimpleSecret Authenticator, it is NOT necessary to fill in |capability_id| -- ACL Service will find the ID by searching all capabilities on the ACL for one associated with the token given by the SimpleSecret's secret data. If |capability_id| is specified, though, then the Authenticator will only be accepted if it actually matches that particular token ID."
        }
      },
      "description": "SimpleSecretProto (in authenticator.proto) and SimpleSecretHolderProto (below) share the notion of a \"label\", which identifies a particular secret without (hopefully) revealing the secret. Note that a SimpleSecretLabel only disambiguates between secrets used to get access to some particular object. Two different secrets that apply to two different objects could have the same label. For example, in the common sharing model, each object has no more than one \"auth key\". Therefore, the label for an auth key simply has type = AUTH_KEY with no additional information. In theory, we could add some sort of resource ID to SimpleSecretLabel to make it more explicit. However, in practice, this is never really needed. A SimpleSecret for one object is never used to authorize a request on some other object, so there is no ambiguity. Also, since SimpleSecrets must obviously be unguessable, there is no risk that a SimpleSecret intended for one object will accidentally grant access to another.",
      "id": "SimpleSecretLabelProto",
      "type": "object"
    },
    "SearchResponse": {
      "id": "SearchResponse",
      "properties": {
        "structuredResults": {
          "description": "Structured results for the user query. These results are not counted against the page_size.",
          "type": "array",
          "items": {
            "$ref": "StructuredResult"
          }
        },
        "facetResults": {
          "type": "array",
          "description": "Repeated facet results.",
          "items": {
            "$ref": "FacetResult"
          }
        },
        "results": {
          "type": "array",
          "description": "Results from a search query.",
          "items": {
            "$ref": "SearchResult"
          }
        },
        "debugInfo": {
          "description": "Debugging information about the response.",
          "$ref": "ResponseDebugInfo"
        },
        "spellResults": {
          "type": "array",
          "description": "Suggested spelling for the query.",
          "items": {
            "$ref": "SpellResult"
          }
        },
        "errorInfo": {
          "description": "Error information about the response.",
          "$ref": "ErrorInfo"
        },
        "resultCountExact": {
          "type": "string",
          "description": "The exact result count for this query.",
          "format": "int64"
        },
        "resultCounts": {
          "$ref": "ResultCounts",
          "description": "Expanded result count information."
        },
        "queryInterpretation": {
          "$ref": "QueryInterpretation",
          "description": "Query interpretation result for user query. Empty if query interpretation is disabled."
        },
        "resultCountEstimate": {
          "description": "The estimated result count for this query.",
          "type": "string",
          "format": "int64"
        },
        "hasMoreResults": {
          "type": "boolean",
          "description": "Whether there are more search results matching the query."
        }
      },
      "description": "The search API response.",
      "type": "object"
    },
    "UserInfo": {
      "type": "object",
      "id": "UserInfo",
      "properties": {
        "updaterCountDisplayType": {
          "type": "string",
          "enum": [
            "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED",
            "EXACT_COUNT",
            "NONZERO_COUNT"
          ],
          "description": "Describes how updater_count_to_show should be used.",
          "enumDescriptions": [
            "",
            "A precise updater count is known and the value set in updater_count_to_show should be used. If set, updater_count_to_show is set to the total number of updaters minus the one set in updater_to_show.",
            "A precise updater count could not be calculated, but there is at least one. Any value set in updater_count_to_show should NOT be used."
          ]
        },
        "updaterToShowEmail": {
          "description": "The email of the updater for clients to show used for Gmail items.",
          "type": "string"
        },
        "updaterToShowUserId": {
          "description": "The updater for clients to show used for Dynamite Chat items.",
          "$ref": "UserId"
        },
        "updaterToShowGaiaId": {
          "type": "string",
          "format": "int64",
          "description": "The gaia id of the updater for clients to show used for Gmail items. If the updater is an external user, the email field below should be populated."
        },
        "updaterToShowName": {
          "description": "The display name of the updater for clients to show used for Gmail items. This (along with the updater fields above) will be populated in the thread pipeline (http://shortn/_rPS0GCp94Y) when converting Activity Feed message attributes into client-renderable Activity Feed items.",
          "type": "string"
        },
        "updaterCountToShow": {
          "description": "The number of updaters for clients to show depending on UpdaterCountDisplayType.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "Contains info regarding the updater of an Activity Feed item. Next Id: 7"
    },
    "SearchApplicationQueryStats": {
      "description": "Search application level query stats per date",
      "properties": {
        "queryCountByStatus": {
          "type": "array",
          "items": {
            "$ref": "QueryCountByStatus"
          }
        },
        "date": {
          "description": "The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        }
      },
      "id": "SearchApplicationQueryStats",
      "type": "object"
    },
    "AppsDynamiteSharedAvatarInfo": {
      "type": "object",
      "id": "AppsDynamiteSharedAvatarInfo",
      "properties": {
        "emoji": {
          "$ref": "AppsDynamiteSharedEmoji"
        }
      }
    },
    "Section": {
      "description": "Sections are separated by a line divider. They contain a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, AddOns have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
      "type": "object",
      "id": "Section",
      "properties": {
        "collapsable": {
          "type": "boolean",
          "description": "Indicating whether this section is collapsable. If a section is collapsable, the description must be given."
        },
        "description": {
          "type": "string",
          "description": "The header of the section, text formatted supported."
        },
        "widgets": {
          "description": "A section must contain at least 1 widget.",
          "type": "array",
          "items": {
            "$ref": "WidgetMarkup"
          }
        },
        "numUncollapsableWidgets": {
          "format": "int32",
          "description": "The number of uncollapsable widgets. For example, when a section contains 5 widgets and the num_uncollapsable_widget are set to be 2, The first 2 widgets will always shown and the last 3 is collapsed as default. Only when collapsable is set to be true, the num_uncollapsable_widget will be taken into account.",
          "type": "integer"
        }
      }
    },
    "GetSearchApplicationQueryStatsResponse": {
      "description": "Response format for getting query stats for a search application between given dates.",
      "id": "GetSearchApplicationQueryStatsResponse",
      "properties": {
        "totalQueryCount": {
          "type": "string",
          "format": "int64",
          "description": "Total successful query count (status code 200) for the given date range."
        },
        "stats": {
          "items": {
            "$ref": "SearchApplicationQueryStats"
          },
          "description": "Query stats per date for a search application.",
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "name": "cloudsearch",
  "canonicalName": "Cloud Search",
  "description": "Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.",
  "rootUrl": "https://cloudsearch.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud_search": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.query": {
          "description": "Search your organization's data in the Cloud Search index"
        },
        "https://www.googleapis.com/auth/cloud_search.settings.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.settings.query": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.settings": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.stats.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.stats": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.debug": {
          "description": "Index and serve your organization's data with Cloud Search"
        }
      }
    }
  },
  "id": "cloudsearch:v1",
  "version_module": true,
  "ownerName": "Google",
  "baseUrl": "https://cloudsearch.googleapis.com/",
  "servicePath": "",
  "documentationLink": "https://developers.google.com/cloud-search/docs/guides/",
  "kind": "discovery#restDescription",
  "protocol": "rest"
}

{
  "parameters": {
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "$.xgafv": {
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "Cloud Search",
  "schemas": {
    "DataSourceIndexStats": {
      "description": "Aggregation of items by status code as of the specified date.",
      "type": "object",
      "properties": {
        "itemCountByStatus": {
          "type": "array",
          "description": "Number of items aggregrated by status code.",
          "items": {
            "$ref": "ItemCountByStatus"
          }
        },
        "date": {
          "description": "The date for which index stats were calculated. If the date of request is not the current date then stats calculated on the next day are returned. Stats are calculated close to mid night in this case. If date of request is current date, then real time stats are returned.",
          "$ref": "Date"
        }
      },
      "id": "DataSourceIndexStats"
    },
    "UserActivity": {
      "id": "UserActivity",
      "description": "User's single or bulk query activity. This can be a logging query or deletion query.",
      "type": "object",
      "properties": {
        "queryActivity": {
          "$ref": "QueryActivity",
          "description": "Contains data which needs to be logged/removed."
        }
      }
    },
    "SearchResult": {
      "description": "Results containing indexed information for a document.",
      "properties": {
        "title": {
          "description": "Title of the search result.",
          "type": "string"
        },
        "metadata": {
          "$ref": "Metadata",
          "description": "Metadata of the search result."
        },
        "debugInfo": {
          "description": "Debugging information about this search result.",
          "$ref": "ResultDebugInfo"
        },
        "url": {
          "description": "The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn't be changed.",
          "type": "string"
        },
        "clusteredResults": {
          "items": {
            "$ref": "SearchResult"
          },
          "type": "array",
          "description": "If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be empty."
        },
        "snippet": {
          "description": "The concatenation of all snippets (summaries) available for this result.",
          "$ref": "Snippet"
        }
      },
      "id": "SearchResult",
      "type": "object"
    },
    "Principal": {
      "id": "Principal",
      "type": "object",
      "description": "Reference to a user, group, or domain.",
      "properties": {
        "gsuitePrincipal": {
          "$ref": "GSuitePrincipal",
          "description": "This principal is a Google Workspace user, group or domain."
        },
        "userResourceName": {
          "type": "string",
          "description": "This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID}"
        },
        "groupResourceName": {
          "type": "string",
          "description": "This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID}"
        }
      }
    },
    "EmailAddress": {
      "id": "EmailAddress",
      "properties": {
        "customType": {
          "type": "string",
          "description": "If the value of type is custom, this property contains the custom type string."
        },
        "emailAddress": {
          "description": "The email address.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates if this is the user's primary email. Only one entry can be marked as primary."
        },
        "type": {
          "type": "string",
          "description": "The type of the email account. Acceptable values are: \"custom\", \"home\", \"other\", \"work\"."
        },
        "emailUrl": {
          "type": "string",
          "description": "The URL to send email."
        }
      },
      "description": "A person's email address.",
      "type": "object"
    },
    "DriveLocationRestrict": {
      "type": "object",
      "description": "Drive location search restricts (e.g. \"is:starred\").",
      "id": "DriveLocationRestrict",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNSPECIFIED",
            "TRASHED",
            "STARRED"
          ]
        }
      }
    },
    "ResultDisplayField": {
      "id": "ResultDisplayField",
      "description": "Display Fields for Search Results",
      "type": "object",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "The operator name of the property."
        },
        "label": {
          "type": "string",
          "description": "The display label for the property."
        },
        "property": {
          "description": "The name value pair for the property.",
          "$ref": "NamedProperty"
        }
      }
    },
    "StructuredDataObject": {
      "type": "object",
      "id": "StructuredDataObject",
      "description": "A structured data object consisting of named properties.",
      "properties": {
        "properties": {
          "description": "The properties for the object. The maximum number of elements is 1000.",
          "items": {
            "$ref": "NamedProperty"
          },
          "type": "array"
        }
      }
    },
    "EnterpriseTopazSidekickMeetingNotesCardRequest": {
      "description": "Meeting notes card request.",
      "id": "EnterpriseTopazSidekickMeetingNotesCardRequest",
      "properties": {
        "error": {
          "$ref": "EnterpriseTopazSidekickMeetingNotesCardError",
          "description": "The error and reason if known error occured."
        },
        "canCreateFor": {
          "description": "Who are the meeting notes created for.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Unknown (default).",
              "For the requester.",
              "For all the meeting attendees."
            ],
            "enum": [
              "UNKNOWN",
              "MYSELF",
              "ALL_ATTENDEES"
            ]
          }
        },
        "event": {
          "description": "The event to request meeting notes creation",
          "$ref": "EnterpriseTopazSidekickAgendaEntry"
        }
      },
      "type": "object"
    },
    "FacetBucket": {
      "type": "object",
      "id": "FacetBucket",
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer",
          "description": "Number of results that match the bucket value. Counts are only returned for searches when count accuracy is ensured. Cloud Search does not guarantee facet counts for any query and facet counts might be present only intermittently, even for identical queries. Do not build dependencies on facet count existence; instead use facet ount percentages which are always returned."
        },
        "value": {
          "$ref": "Value"
        },
        "filter": {
          "$ref": "Filter",
          "description": "Filter to be passed in the search request if the corresponding bucket is selected."
        },
        "percentage": {
          "type": "integer",
          "format": "int32",
          "description": "Percent of results that match the bucket value. The returned value is between (0-100], and is rounded down to an integer if fractional. If the value is not explicitly returned, it represents a percentage value that rounds to 0. Percentages are returned for all searches, but are an estimate. Because percentages are always returned, you should render percentages instead of counts."
        }
      },
      "description": "A bucket in a facet is the basic unit of operation. A bucket can comprise either a single value OR a contiguous range of values, depending on the type of the field bucketed. FacetBucket is currently used only for returning the response object."
    },
    "DisplayedProperty": {
      "type": "object",
      "properties": {
        "propertyName": {
          "type": "string",
          "description": "The name of the top-level property as defined in a property definition for the object. If the name is not a defined property in the schema, an error is given when attempting to update the schema."
        }
      },
      "description": "A reference to a top-level property within the object that should be displayed in search results. The values of the chosen properties is displayed in the search results along with the display label for that property if one is specified. If a display label is not specified, only the values is shown.",
      "id": "DisplayedProperty"
    },
    "ResetSearchApplicationRequest": {
      "properties": {
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "type": "object",
      "id": "ResetSearchApplicationRequest"
    },
    "Date": {
      "description": "Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.",
      "type": "object",
      "id": "Date",
      "properties": {
        "day": {
          "type": "integer",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
          "format": "int32"
        },
        "year": {
          "description": "Year of date. Must be from 1 to 9999.",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "format": "int32",
          "type": "integer",
          "description": "Month of date. Must be from 1 to 12."
        }
      }
    },
    "SourceResultCount": {
      "type": "object",
      "id": "SourceResultCount",
      "description": "Per source result count information.",
      "properties": {
        "resultCountEstimate": {
          "description": "The estimated result count for this source.",
          "format": "int64",
          "type": "string"
        },
        "source": {
          "$ref": "Source",
          "description": "The source the result count information is associated with."
        },
        "resultCountExact": {
          "format": "int64",
          "description": "The exact result count for this source.",
          "type": "string"
        },
        "hasMoreResults": {
          "type": "boolean",
          "description": "Whether there are more search results for this source."
        }
      }
    },
    "EnterpriseTopazSidekickRecentDocumentsCardProto": {
      "properties": {
        "document": {
          "type": "array",
          "items": {
            "$ref": "EnterpriseTopazSidekickCommonDocument"
          }
        }
      },
      "id": "EnterpriseTopazSidekickRecentDocumentsCardProto",
      "type": "object"
    },
    "SearchApplicationQueryStats": {
      "type": "object",
      "properties": {
        "date": {
          "description": "The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        },
        "queryCountByStatus": {
          "type": "array",
          "items": {
            "$ref": "QueryCountByStatus"
          }
        }
      },
      "description": "Search application level query stats per date",
      "id": "SearchApplicationQueryStats"
    },
    "InitializeCustomerRequest": {
      "properties": {},
      "id": "InitializeCustomerRequest",
      "description": "Request message for `InitializeCustomer` method.",
      "type": "object"
    },
    "EnterpriseTopazSidekickScheduledMeeting": {
      "description": "Details about scheduled meetings.",
      "id": "EnterpriseTopazSidekickScheduledMeeting",
      "type": "object",
      "properties": {
        "meetingTime": {
          "$ref": "EnterpriseTopazSidekickTimeSlot",
          "description": "The meeting time slot."
        },
        "meetingLocation": {
          "type": "string",
          "description": "The meeting location."
        },
        "meetingTitle": {
          "description": "The meeting title.",
          "type": "string"
        }
      }
    },
    "UpdateSchemaRequest": {
      "id": "UpdateSchemaRequest",
      "properties": {
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "validateOnly": {
          "type": "boolean",
          "description": "If true, the schema will be checked for validity, but will not be registered with the data source, even if valid."
        },
        "schema": {
          "$ref": "Schema",
          "description": "The new schema for the source."
        }
      },
      "type": "object"
    },
    "GetCustomerSessionStatsResponse": {
      "type": "object",
      "id": "GetCustomerSessionStatsResponse",
      "properties": {
        "stats": {
          "items": {
            "$ref": "CustomerSessionStats"
          },
          "type": "array"
        }
      }
    },
    "QuerySuggestion": {
      "properties": {},
      "id": "QuerySuggestion",
      "type": "object",
      "description": "This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion."
    },
    "SearchApplication": {
      "description": "SearchApplication",
      "id": "SearchApplication",
      "type": "object",
      "properties": {
        "returnResultThumbnailUrls": {
          "description": "With each result we should return the URI for its thumbnail (when applicable)",
          "type": "boolean"
        },
        "enableAuditLog": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for requests made for the search application in query APIs."
        },
        "dataSourceRestrictions": {
          "type": "array",
          "description": "Retrictions applied to the configurations. The maximum number of elements is 10.",
          "items": {
            "$ref": "DataSourceRestriction"
          }
        },
        "defaultFacetOptions": {
          "description": "The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.",
          "items": {
            "$ref": "FacetOptions"
          },
          "type": "array"
        },
        "scoringConfig": {
          "$ref": "ScoringConfig",
          "description": "Configuration for ranking results."
        },
        "sourceConfig": {
          "type": "array",
          "items": {
            "$ref": "SourceConfig"
          },
          "description": "Configuration for a sources specified in data_source_restrictions."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the Search Application. The maximum length is 300 characters."
        },
        "name": {
          "type": "string",
          "description": "The name of the Search Application. Format: searchapplications/{application_id}."
        },
        "queryInterpretationConfig": {
          "$ref": "QueryInterpretationConfig",
          "description": "The default options for query interpretation"
        },
        "operationIds": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.",
          "items": {
            "type": "string"
          }
        },
        "defaultSortOptions": {
          "description": "The default options for sorting the search results",
          "$ref": "SortOptions"
        }
      }
    },
    "TextOperatorOptions": {
      "properties": {
        "exactMatchWithOperator": {
          "type": "boolean",
          "description": "If true, the text value is tokenized as one atomic value in operator searches and facet matches. For example, if the operator name is \"genre\" and the value is \"science-fiction\" the query restrictions \"genre:science\" and \"genre:fiction\" doesn't match the item; \"genre:science-fiction\" does. Text value matching is case-sensitive and does not remove special characters. If false, the text is tokenized. For example, if the value is \"science-fiction\" the queries \"genre:science\" and \"genre:fiction\" matches the item."
        },
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the text property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:\u003cvalue\u003e* show results only where the value of the property named *subjectLine* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any text properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "description": "Used to provide a search operator for text properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "type": "object",
      "id": "TextOperatorOptions"
    },
    "AuditLoggingSettings": {
      "id": "AuditLoggingSettings",
      "type": "object",
      "description": "Represents the settings for Cloud audit logging",
      "properties": {
        "project": {
          "description": "The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}",
          "type": "string"
        },
        "logDataWriteActions": {
          "description": "Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc.",
          "type": "boolean"
        },
        "logDataReadActions": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc."
        },
        "logAdminReadActions": {
          "description": "Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc.",
          "type": "boolean"
        }
      }
    },
    "DoubleValues": {
      "properties": {
        "values": {
          "items": {
            "format": "double",
            "type": "number"
          },
          "type": "array"
        }
      },
      "description": "List of double values.",
      "id": "DoubleValues",
      "type": "object"
    },
    "EnterpriseTopazSidekickGetAndKeepAheadCardProtoDeclinedEvents": {
      "type": "object",
      "description": "A list of events where all guests declined.",
      "properties": {
        "events": {
          "items": {
            "$ref": "EnterpriseTopazSidekickAgendaEntry"
          },
          "type": "array"
        }
      },
      "id": "EnterpriseTopazSidekickGetAndKeepAheadCardProtoDeclinedEvents"
    },
    "EnterpriseTopazSidekickDocumentPerCategoryList": {
      "id": "EnterpriseTopazSidekickDocumentPerCategoryList",
      "properties": {
        "documents": {
          "items": {
            "$ref": "EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry"
          },
          "type": "array"
        },
        "responseMessage": {
          "type": "string",
          "description": "Response message in case no documents are present in the card."
        },
        "listType": {
          "enum": [
            "UNKNOWN_LIST_TYPE",
            "MENTIONS",
            "SHARES",
            "NEEDS_ATTENTION",
            "VIEWS",
            "EDITS"
          ],
          "enumDescriptions": [
            "",
            "All documents in the list correspond to one of the mention categories.",
            "All documents in the list correspond to one of the share categories.",
            "A mixture of document categories that correspond to documents that need the users attention (e.g. documents that have been explicitly shared with the user but have not been viewed and documents where the user was mentioned but has not replied).",
            "All documents in the list correspond to one of the view categories.",
            "All documents in the list correspond to one of the edit categories."
          ],
          "type": "string"
        },
        "helpMessage": {
          "type": "string",
          "description": "Localized message explaining how the documents were derived (e.g. from the last 30 days activity). This field is optional."
        },
        "listTypeDescription": {
          "type": "string",
          "description": "Description of the types of documents present in the list."
        }
      },
      "type": "object"
    },
    "SpellResult": {
      "type": "object",
      "properties": {
        "suggestedQuery": {
          "description": "The suggested spelling of the query.",
          "type": "string"
        },
        "suggestedQueryHtml": {
          "description": "The sanitized HTML representing the spell corrected query that can be used in the UI. This usually has language-specific tags to mark up parts of the query that are spell checked.",
          "$ref": "SafeHtmlProto"
        },
        "suggestionType": {
          "enumDescriptions": [
            "Default spell check type",
            "Spell suggestion without any results changed. The results are still shown for the original query (which has non zero / results) with a suggestion for spelling that would have results.",
            "Spell suggestion triggered when original query has no results. When the original query has no results, and spell suggestion has results we trigger results for the spell corrected query."
          ],
          "type": "string",
          "enum": [
            "SUGGESTION_TYPE_UNSPECIFIED",
            "NON_EMPTY_RESULTS_SPELL_SUGGESTION",
            "ZERO_RESULTS_FULL_PAGE_REPLACEMENT"
          ],
          "description": "Suggestion triggered for the current query."
        }
      },
      "id": "SpellResult"
    },
    "PeoplePromotionCard": {
      "properties": {
        "people": {
          "items": {
            "$ref": "PersonCore"
          },
          "type": "array"
        }
      },
      "id": "PeoplePromotionCard",
      "type": "object"
    },
    "MatchRange": {
      "type": "object",
      "description": "Matched range of a snippet [start, end).",
      "properties": {
        "start": {
          "format": "int32",
          "type": "integer",
          "description": "Starting position of the match in the snippet."
        },
        "end": {
          "type": "integer",
          "description": "End of the match in the snippet.",
          "format": "int32"
        }
      },
      "id": "MatchRange"
    },
    "EnterpriseTopazSidekickFindMeetingTimeCardProto": {
      "type": "object",
      "description": "Response to find meeting time among a set of people.",
      "properties": {
        "timeBoundaries": {
          "$ref": "EnterpriseTopazSidekickTimeSlot",
          "description": "Min and max timestamp used to find a common available timeslot."
        },
        "skippedInvitees": {
          "description": "Invitees that have been skipped in the computation, most likely because they are groups.",
          "type": "array",
          "items": {
            "$ref": "EnterpriseTopazSidekickPerson"
          }
        },
        "commonAvailableTimeSlots": {
          "items": {
            "$ref": "EnterpriseTopazSidekickTimeSlot"
          },
          "type": "array",
          "description": "Slots when all attendees have availability."
        },
        "timezoneId": {
          "description": "Timezone ID.",
          "type": "string"
        },
        "invitees": {
          "type": "array",
          "description": "Invitees to the event.",
          "items": {
            "$ref": "EnterpriseTopazSidekickPerson"
          }
        },
        "scheduledMeeting": {
          "description": "Details about the scheduled meeting, if one exists.",
          "$ref": "EnterpriseTopazSidekickScheduledMeeting"
        },
        "requester": {
          "$ref": "EnterpriseTopazSidekickPerson",
          "description": "Requester."
        }
      },
      "id": "EnterpriseTopazSidekickFindMeetingTimeCardProto"
    },
    "Filter": {
      "id": "Filter",
      "description": "A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.",
      "properties": {
        "valueFilter": {
          "$ref": "ValueFilter"
        },
        "compositeFilter": {
          "$ref": "CompositeFilter"
        }
      },
      "type": "object"
    },
    "EnterpriseTopazSidekickGenericAnswerCard": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "The answer."
        },
        "title": {
          "description": "Title or header of the card.",
          "type": "string"
        }
      },
      "id": "EnterpriseTopazSidekickGenericAnswerCard"
    },
    "PeopleSuggestion": {
      "properties": {
        "person": {
          "description": "Suggested person. All fields of the person object might not be populated.",
          "$ref": "Person"
        }
      },
      "type": "object",
      "description": "This field contains information about the person being suggested.",
      "id": "PeopleSuggestion"
    },
    "CheckAccessResponse": {
      "id": "CheckAccessResponse",
      "properties": {
        "hasAccess": {
          "type": "boolean",
          "description": "Returns true if principal has access. Returns false otherwise."
        }
      },
      "type": "object"
    },
    "GetCustomerSearchApplicationStatsResponse": {
      "description": "Response format for search application stats for a customer.",
      "id": "GetCustomerSearchApplicationStatsResponse",
      "properties": {
        "stats": {
          "items": {
            "$ref": "CustomerSearchApplicationStats"
          },
          "type": "array",
          "description": "Search application stats by date."
        },
        "averageSearchApplicationCount": {
          "type": "string",
          "format": "int64",
          "description": "Average search application count for the given date range."
        }
      },
      "type": "object"
    },
    "QueryOperator": {
      "id": "QueryOperator",
      "description": "The definition of a operator that can be used in a Search/Suggest request.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the operator.",
          "enum": [
            "UNKNOWN",
            "INTEGER",
            "DOUBLE",
            "TIMESTAMP",
            "BOOLEAN",
            "ENUM",
            "DATE",
            "TEXT",
            "HTML"
          ],
          "enumDescriptions": [
            "Invalid value.",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "isRepeatable": {
          "description": "Indicates if multiple values can be set for this property.",
          "type": "boolean"
        },
        "isFacetable": {
          "description": "Can this operator be used to get facets.",
          "type": "boolean"
        },
        "displayName": {
          "description": "Display name of the operator",
          "type": "string"
        },
        "operatorName": {
          "description": "The name of the operator.",
          "type": "string"
        },
        "isSuggestable": {
          "description": "Can get suggestions for this field.",
          "type": "boolean"
        },
        "isSortable": {
          "description": "Can this operator be used to sort results.",
          "type": "boolean"
        },
        "objectType": {
          "description": "The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.",
          "type": "string"
        },
        "isReturnable": {
          "description": "Will the property associated with this facet be returned as part of search results.",
          "type": "boolean"
        },
        "lessThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name that can be used to isolate the property using the less-than operator."
        },
        "enumValues": {
          "description": "Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThanOperatorName": {
          "description": "Indicates the operator name that can be used to isolate the property using the greater-than operator.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "QueryCountByStatus": {
      "type": "object",
      "id": "QueryCountByStatus",
      "properties": {
        "statusCode": {
          "format": "int32",
          "description": "This represents the http status code.",
          "type": "integer"
        },
        "count": {
          "format": "int64",
          "type": "string"
        }
      }
    },
    "CompositeFilter": {
      "properties": {
        "logicOperator": {
          "enumDescriptions": [
            "Logical operators, which can only be applied to sub filters.",
            "",
            "NOT can only be applied on a single sub filter."
          ],
          "type": "string",
          "description": "The logic operator of the sub filter.",
          "enum": [
            "AND",
            "OR",
            "NOT"
          ]
        },
        "subFilters": {
          "items": {
            "$ref": "Filter"
          },
          "description": "Sub filters.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "CompositeFilter"
    },
    "HtmlOperatorOptions": {
      "id": "HtmlOperatorOptions",
      "properties": {
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the html property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:\u003cvalue\u003e* show results only where the value of the property named *subjectLine* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator return all items where *\u003cvalue\u003e* matches the value of any html properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "description": "Used to provide a search operator for html properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "type": "object"
    },
    "ItemStructuredData": {
      "id": "ItemStructuredData",
      "description": "Available structured data fields for the item.",
      "type": "object",
      "properties": {
        "hash": {
          "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
          "type": "string"
        },
        "object": {
          "description": "The structured data object that should conform to a registered object definition in the schema for the data source.",
          "$ref": "StructuredDataObject"
        }
      }
    },
    "ProcessingError": {
      "id": "ProcessingError",
      "properties": {
        "code": {
          "type": "string",
          "enumDescriptions": [
            "Input only value. Use this value in Items.",
            "Item's ACL, metadata, or content is malformed or in invalid state. FieldViolations contains more details on where the problem is.",
            "Countent format is unsupported.",
            "Items with incomplete ACL information due to inheriting other items with broken ACL or having groups with unmapped descendants.",
            "ACL inheritance graph formed a cycle."
          ],
          "description": "Error code indicating the nature of the error.",
          "enum": [
            "PROCESSING_ERROR_CODE_UNSPECIFIED",
            "MALFORMED_REQUEST",
            "UNSUPPORTED_CONTENT_FORMAT",
            "INDIRECT_BROKEN_ACL",
            "ACL_CYCLE"
          ]
        },
        "fieldViolations": {
          "type": "array",
          "description": "In case the item fields are invalid, this field contains the details about the validation errors.",
          "items": {
            "$ref": "FieldViolation"
          }
        },
        "errorMessage": {
          "description": "The description of the error.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnumPropertyOptions": {
      "id": "EnumPropertyOptions",
      "type": "object",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the enum should be used as a search operator.",
          "$ref": "EnumOperatorOptions"
        },
        "possibleValues": {
          "items": {
            "$ref": "EnumValuePair"
          },
          "type": "array",
          "description": "The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100."
        },
        "orderedRanking": {
          "type": "string",
          "enumDescriptions": [
            "There is no ranking order for the property. Results aren't adjusted by this property's value.",
            "This property is ranked in ascending order. Lower values indicate lower ranking.",
            "This property is ranked in descending order. Lower values indicate higher ranking."
          ],
          "description": "Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.",
          "enum": [
            "NO_ORDER",
            "ASCENDING",
            "DESCENDING"
          ]
        }
      },
      "description": "The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*."
    },
    "RemoveActivityResponse": {
      "id": "RemoveActivityResponse",
      "properties": {},
      "type": "object",
      "description": "Remove Logged Activity Response. will return an empty response for now. Will be revisited in later phases."
    },
    "EnterpriseTopazSidekickCommonDebugInfo": {
      "id": "EnterpriseTopazSidekickCommonDebugInfo",
      "properties": {
        "message": {
          "type": "string",
          "description": "Debug message."
        }
      },
      "type": "object",
      "description": "Container of debugging information in all object levels. Extend as needed."
    },
    "DateOperatorOptions": {
      "id": "DateOperatorOptions",
      "type": "object",
      "properties": {
        "greaterThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the date property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is later than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "operatorName": {
          "type": "string",
          "description": "Indicates the actual string required in the query in order to isolate the date property. For example, suppose an issue tracking schema object has a property named *closeDate* that specifies an operator with an operatorName of *closedon*. For searches on that data, queries like *closedon:\u003cvalue\u003e* show results only where the value of the *closeDate* property matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the indexed datasource. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "lessThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the date property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is earlier than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "description": "Optional. Provides a search operator for date properties. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "FieldViolation": {
      "properties": {
        "description": {
          "description": "The description of the error.",
          "type": "string"
        },
        "field": {
          "description": "Path of field with violation.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "FieldViolation"
    },
    "EnumValues": {
      "type": "object",
      "id": "EnumValues",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The maximum allowable length for string values is 32 characters."
        }
      },
      "description": "List of enum values."
    },
    "ThirdPartyGenericCard": {
      "id": "ThirdPartyGenericCard",
      "properties": {
        "category": {
          "type": "string",
          "description": "Category that the card belongs to."
        },
        "isDismissible": {
          "type": "boolean",
          "description": "Whether the card can be dismissed."
        },
        "cardId": {
          "type": "string",
          "description": "Unique identifier for the card."
        },
        "priority": {
          "description": "Priority of the card, where 0 is the highest priority.",
          "type": "integer",
          "format": "int32"
        },
        "context": {
          "description": "[Required] Context where the card should be triggered.",
          "$ref": "Context"
        },
        "content": {
          "description": "[Required] Card content.",
          "$ref": "Content"
        }
      },
      "type": "object"
    },
    "Context": {
      "id": "Context",
      "properties": {
        "app": {
          "items": {
            "type": "string",
            "enum": [
              "UNKNOWN_APP",
              "TOPAZ",
              "MOMA"
            ],
            "enumDescriptions": [
              "",
              "",
              ""
            ]
          },
          "description": "[Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.",
          "type": "array"
        },
        "location": {
          "type": "array",
          "description": "[Optional] Text-free locations where the card should be shown. This is expected to match the user's location in focus. If no location is specified, the card will be shown for any location.",
          "items": {
            "type": "string"
          }
        },
        "locale": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "[Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If missing, the card is going to show to clients regardless of their locale."
        },
        "dayOfWeek": {
          "type": "array",
          "description": "[Optional] Day of week when the card should be shown, where 0 is Monday.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "type": {
          "items": {
            "enum": [
              "UNKNOWN_CARD_TYPE",
              "HOMEPAGE_CARD",
              "ANSWER_CARD",
              "RHS_CARD"
            ],
            "enumDescriptions": [
              "",
              "",
              "",
              ""
            ],
            "type": "string"
          },
          "type": "array",
          "description": "[Required] Type of the card (homepage, Answer or RHS)."
        },
        "query": {
          "items": {
            "type": "string"
          },
          "description": "[Required only for Answer and RHS cards - will be ignored for Homepage] cards. It's the exact case-insensitive queries that will trigger the Answer or RHS card.",
          "type": "array"
        },
        "startDateSec": {
          "format": "int64",
          "description": "[Optional] Date (in seconds since epoch) when the card should start being shown. If missing, start_date_sec will be Jan 1st, 1970 UTC.",
          "type": "string"
        },
        "endDateSec": {
          "description": "[Optional] Date (in seconds since epoch) when the card should stop being shown. If missing, end_date_sec will be set to Jan 1st, 2100.",
          "format": "int64",
          "type": "string"
        },
        "startDayOffsetSec": {
          "type": "string",
          "description": "[Optional] Start time in seconds, within a day, when the card should be shown if it's within [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.",
          "format": "int64"
        },
        "surface": {
          "description": "[Optional] Surface where the card should be shown in. If missing, the card will be shown in any surface.",
          "type": "array",
          "items": {
            "enumDescriptions": [
              "",
              "",
              "",
              "",
              "Any mobile device.",
              ""
            ],
            "enum": [
              "UNKNOWN_SURFACE",
              "DESKTOP",
              "ANDROID",
              "IOS",
              "MOBILE",
              "ANY"
            ],
            "type": "string"
          }
        },
        "endDayOffsetSec": {
          "format": "int64",
          "description": "[Optional] End time in seconds, within a day, when the card should stop being shown if it's within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600 sec/hour), i.e., midnight next day.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResultCounts": {
      "id": "ResultCounts",
      "type": "object",
      "properties": {
        "sourceResultCounts": {
          "items": {
            "$ref": "SourceResultCount"
          },
          "description": "Result count information for each source with results.",
          "type": "array"
        }
      },
      "description": "Result count information"
    },
    "EnterpriseTopazSidekickPerson": {
      "description": "Person.",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email."
        },
        "obfuscatedGaiaId": {
          "description": "Obfuscated Gaia id.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "gaiaId": {
          "type": "string",
          "description": "Gaia id.",
          "format": "int64"
        },
        "affinityLevel": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "description": "The level of affinity this person has with the requesting user.",
          "enum": [
            "UNKNOWN",
            "LOW",
            "MEDIUM",
            "HIGH"
          ],
          "type": "string"
        },
        "attendingStatus": {
          "enumDescriptions": [
            "Awaiting for the user to set the status.",
            "Attending.",
            "Not attending.",
            "Tentatively attending."
          ],
          "type": "string",
          "description": "Attendance status of the person when included in a meeting event.",
          "enum": [
            "AWAITING",
            "YES",
            "NO",
            "MAYBE"
          ]
        },
        "photoUrl": {
          "type": "string",
          "description": "Absolute URL to the profile photo of the person."
        },
        "isGroup": {
          "description": "Whether the invitee is a group.",
          "type": "boolean"
        }
      },
      "id": "EnterpriseTopazSidekickPerson",
      "type": "object"
    },
    "UploadItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the content reference. The maximum length is 2048 characters."
        }
      },
      "id": "UploadItemRef",
      "description": "Represents an upload session reference. This reference is created via upload method. This reference is valid for 30 days after its creation. Updating of item content may refer to this uploaded content via contentDataRef.",
      "type": "object"
    },
    "EnterpriseTopazSidekickGetAndKeepAheadCardProto": {
      "type": "object",
      "description": "Get and keep ahead card",
      "id": "EnterpriseTopazSidekickGetAndKeepAheadCardProto",
      "properties": {
        "declinedEvents": {
          "$ref": "EnterpriseTopazSidekickGetAndKeepAheadCardProtoDeclinedEvents"
        },
        "mentionedDocuments": {
          "$ref": "EnterpriseTopazSidekickDocumentPerCategoryList"
        },
        "sharedDocuments": {
          "$ref": "EnterpriseTopazSidekickDocumentPerCategoryList"
        }
      }
    },
    "EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry": {
      "properties": {
        "rationale": {
          "type": "string",
          "description": "Reason this document was selected."
        },
        "category": {
          "type": "string",
          "enum": [
            "UNKNOWN_DOCUMENT",
            "ACTIONABLE",
            "VIEWED",
            "REPLIED",
            "MENTION_VIEWED",
            "MENTION_REPLIED",
            "MENTION_NOT_VIEWED",
            "SHARED_AND_VIEWED",
            "SHARED_NOT_VIEWED",
            "EDITED"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "Mention categories. The mention has been viewed by the user, but the user has not replied.",
            "The user has replied to the mention.",
            "The mention has not been viewed by the user.",
            "Share categories. Consists of documents that have been explicitly shared with the user. Document has been viewed.",
            "Document has not been viewed.",
            "Document has been edited."
          ]
        },
        "document": {
          "$ref": "EnterpriseTopazSidekickCommonDocument"
        }
      },
      "type": "object",
      "id": "EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry"
    },
    "SuggestResponse": {
      "type": "object",
      "id": "SuggestResponse",
      "description": "Response of the suggest API.",
      "properties": {
        "suggestResults": {
          "type": "array",
          "description": "List of suggestions.",
          "items": {
            "$ref": "SuggestResult"
          }
        }
      }
    },
    "EnterpriseTopazSidekickMeetingNotesCardError": {
      "description": "Errors in the creation of meeting notes.",
      "id": "EnterpriseTopazSidekickMeetingNotesCardError",
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "enum": [
            "NONE",
            "NOT_OWNER",
            "UNKNOWN"
          ],
          "enumDescriptions": [
            "No reason (default value).",
            "The user is not an owner.",
            "Unknown reason."
          ],
          "description": "The reason why create-meeting-notes failed."
        },
        "event": {
          "description": "The event to request meeting notes creation",
          "$ref": "EnterpriseTopazSidekickAgendaEntry"
        },
        "description": {
          "type": "string",
          "description": "The description of the reason why create-meeting-notes failed."
        }
      }
    },
    "SearchQualityMetadata": {
      "description": "Additional search quality metadata of the item.",
      "type": "object",
      "properties": {
        "quality": {
          "description": "An indication of the quality of the item, used to influence search quality. Value should be between 0.0 (lowest quality) and 1.0 (highest quality). The default value is 0.0.",
          "format": "double",
          "type": "number"
        }
      },
      "id": "SearchQualityMetadata"
    },
    "TextPropertyOptions": {
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the property should be used as a search operator.",
          "$ref": "TextOperatorOptions"
        },
        "retrievalImportance": {
          "description": "Indicates the search quality importance of the tokens within the field when used for retrieval.",
          "$ref": "RetrievalImportance"
        }
      },
      "id": "TextPropertyOptions",
      "description": "The options for text properties.",
      "type": "object"
    },
    "GetSearchApplicationUserStatsResponse": {
      "properties": {
        "stats": {
          "items": {
            "$ref": "SearchApplicationUserStats"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "GetSearchApplicationUserStatsResponse"
    },
    "SafeHtmlProto": {
      "type": "object",
      "id": "SafeHtmlProto",
      "properties": {
        "privateDoNotAccessOrElseSafeHtmlWrappedValue": {
          "type": "string",
          "description": "IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message."
        }
      },
      "description": "IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests."
    },
    "Interaction": {
      "id": "Interaction",
      "type": "object",
      "description": "Represents an interaction between a user and an item.",
      "properties": {
        "interactionTime": {
          "type": "string",
          "description": "The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded.",
          "format": "google-datetime"
        },
        "principal": {
          "description": "The user that acted on the item.",
          "$ref": "Principal"
        },
        "type": {
          "enum": [
            "UNSPECIFIED",
            "VIEW",
            "EDIT"
          ],
          "enumDescriptions": [
            "Invalid value.",
            "This interaction indicates the user viewed the item.",
            "This interaction indicates the user edited the item."
          ],
          "type": "string"
        }
      }
    },
    "EnterpriseTopazSidekickShareMeetingDocsCardProto": {
      "id": "EnterpriseTopazSidekickShareMeetingDocsCardProto",
      "properties": {
        "document": {
          "description": "Documents to share for the given meeting.",
          "type": "array",
          "items": {
            "$ref": "EnterpriseTopazSidekickCommonDocument"
          }
        },
        "event": {
          "description": "Event.",
          "$ref": "EnterpriseTopazSidekickAgendaEntry"
        }
      },
      "type": "object",
      "description": "Share meeting docs card proto."
    },
    "EnterpriseTopazSidekickTimeSlot": {
      "description": "Slot of time.",
      "type": "object",
      "id": "EnterpriseTopazSidekickTimeSlot",
      "properties": {
        "startTimeInMillis": {
          "description": "Start time in milliseconds.",
          "type": "string",
          "format": "int64"
        },
        "endTimeInMillis": {
          "format": "int64",
          "description": "End time in milliseconds.",
          "type": "string"
        },
        "startTimeHourAndMinute": {
          "description": "Hour and minute of the start time at the user's timezone.",
          "type": "string"
        },
        "endTimeHourAndMinute": {
          "type": "string",
          "description": "Hour and minute of the end time at the user's timezone."
        },
        "endTimeDay": {
          "description": "Day end time at the user's timezone.",
          "type": "string"
        },
        "startTimeDay": {
          "type": "string",
          "description": "Day start time at user's timezone."
        }
      }
    },
    "GSuitePrincipal": {
      "id": "GSuitePrincipal",
      "type": "object",
      "properties": {
        "gsuiteGroupEmail": {
          "description": "This principal references a Google Workspace group name.",
          "type": "string"
        },
        "gsuiteDomain": {
          "type": "boolean",
          "description": "This principal represents all users of the Google Workspace domain of the customer."
        },
        "gsuiteUserEmail": {
          "description": "This principal references a Google Workspace user account.",
          "type": "string"
        }
      }
    },
    "ListUnmappedIdentitiesResponse": {
      "id": "ListUnmappedIdentitiesResponse",
      "properties": {
        "unmappedIdentities": {
          "type": "array",
          "items": {
            "$ref": "UnmappedIdentity"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      },
      "type": "object"
    },
    "EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo": {
      "type": "object",
      "description": "Metadata for disambiguation.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name that was extracted from the query. This may be in the form of the given name, last name, full name, LDAP, or email address. This name can be considered suitable for displaying to the user and can largely be considered to be normalized (e.g. \"Bob's\" -\u003e \"Bob\")."
        },
        "disambiguation": {
          "description": "A list of people that also matched the query. This list is not complete.",
          "items": {
            "$ref": "EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson"
          },
          "type": "array"
        }
      },
      "id": "EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo"
    },
    "RequestOptions": {
      "properties": {
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. The Suggest API uses this field as a hint to make better third-party autocomplete predictions.",
          "type": "string"
        },
        "debugOptions": {
          "description": "Debug options of the request",
          "$ref": "DebugOptions"
        },
        "timeZone": {
          "description": "Current user's time zone id, such as \"America/Los_Angeles\" or \"Australia/Sydney\". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.",
          "type": "string"
        },
        "searchApplicationId": {
          "description": "The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922).",
          "type": "string"
        }
      },
      "description": "Shared request options for all RPC methods.",
      "type": "object",
      "id": "RequestOptions"
    },
    "SourceCrowdingConfig": {
      "id": "SourceCrowdingConfig",
      "type": "object",
      "properties": {
        "numResults": {
          "format": "int32",
          "type": "integer",
          "description": "Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100."
        },
        "numSuggestions": {
          "type": "integer",
          "description": "Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0.",
          "format": "int32"
        }
      },
      "description": "Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host \"crowd out\" other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source."
    },
    "ObjectDisplayOptions": {
      "properties": {
        "metalines": {
          "type": "array",
          "description": "Defines the properties that are displayed in the metalines of the search results. The property values are displayed in the order given here. If a property holds multiple values, all of the values are displayed before the next properties. For this reason, it is a good practice to specify singular properties before repeated properties in this list. All of the properties must set is_returnable to true. The maximum number of metalines is 3.",
          "items": {
            "$ref": "Metaline"
          }
        },
        "objectDisplayLabel": {
          "type": "string",
          "description": "The user friendly label to display in the search result to indicate the type of the item. This is OPTIONAL; if not provided, an object label isn't displayed on the context line of the search results. The maximum length is 64 characters."
        }
      },
      "description": "The display options for an object.",
      "id": "ObjectDisplayOptions",
      "type": "object"
    },
    "ValueFilter": {
      "type": "object",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query."
        },
        "value": {
          "$ref": "Value",
          "description": "The value to be compared with."
        }
      },
      "id": "ValueFilter"
    },
    "DeleteQueueItemsRequest": {
      "properties": {
        "queue": {
          "description": "The name of a queue to delete items from.",
          "type": "string"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        }
      },
      "type": "object",
      "id": "DeleteQueueItemsRequest"
    },
    "EnterpriseTopazSidekickPersonProfileCard": {
      "id": "EnterpriseTopazSidekickPersonProfileCard",
      "properties": {
        "subject": {
          "$ref": "EnterpriseTopazSidekickCommonPerson",
          "description": "The subject of the card."
        },
        "relatedPeople": {
          "items": {
            "$ref": "EnterpriseTopazSidekickPersonProfileCardRelatedPeople"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "FreshnessOptions": {
      "id": "FreshnessOptions",
      "properties": {
        "freshnessDuration": {
          "description": "The duration after which an object should be considered stale. The default value is 180 days (in seconds).",
          "type": "string",
          "format": "google-duration"
        },
        "freshnessProperty": {
          "description": "This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time.",
          "type": "string"
        }
      },
      "description": "Indicates which freshness property to use when adjusting search ranking for an item. Fresher, more recent dates indicate higher quality. Use the freshness option property that best works with your data. For fileshare documents, last modified time is most relevant. For calendar event data, the time when the event occurs is a more relevant freshness indicator. In this way, calendar events that occur closer to the time of the search query are considered higher quality and ranked accordingly.",
      "type": "object"
    },
    "DatePropertyOptions": {
      "type": "object",
      "description": "The options for date properties.",
      "id": "DatePropertyOptions",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the date should be used as a search operator.",
          "$ref": "DateOperatorOptions"
        }
      }
    },
    "TimestampOperatorOptions": {
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property. For example, if operatorName is *closedon* and the property's name is *closeDate*, then queries like *closedon:\u003cvalue\u003e* show results only where the value of the property named *closeDate* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "greaterThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is later than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "lessThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is earlier than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "id": "TimestampOperatorOptions",
      "type": "object",
      "description": "Used to provide a search operator for timestamp properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "ResultDisplayMetadata": {
      "id": "ResultDisplayMetadata",
      "properties": {
        "metalines": {
          "description": "The metalines content to be displayed with the result.",
          "type": "array",
          "items": {
            "$ref": "ResultDisplayLine"
          }
        },
        "objectTypeLabel": {
          "description": "The display label for the object.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimestampPropertyOptions": {
      "type": "object",
      "id": "TimestampPropertyOptions",
      "description": "The options for timestamp properties.",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the timestamp should be used as a search operator.",
          "$ref": "TimestampOperatorOptions"
        }
      }
    },
    "PropertyDisplayOptions": {
      "type": "object",
      "description": "The display options for a property.",
      "properties": {
        "displayLabel": {
          "description": "The user friendly label for the property that is used if the property is specified to be displayed in ObjectDisplayOptions. If provided, the display label is shown in front of the property values when the property is part of the object display options. For example, if the property value is '1', the value by itself may not be useful context for the user. If the display name given was 'priority', then the user sees 'priority : 1' in the search results which provides clear context to search users. This is OPTIONAL; if not given, only the property values are displayed. The maximum length is 64 characters.",
          "type": "string"
        }
      },
      "id": "PropertyDisplayOptions"
    },
    "EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata": {
      "id": "EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata",
      "type": "object",
      "description": "Meta data for drive documents.",
      "properties": {
        "lastEditTimeMs": {
          "type": "string",
          "format": "uint64",
          "description": "Timestamp of the most recent edit from the current user in milliseconds since epoch."
        },
        "isPrivate": {
          "description": "Additional field to identify whether a document is private since scope set to LIMITED can mean both that the doc is private or that it's shared with others. is_private indicates whether the doc is not shared with anyone except for the owner.",
          "type": "boolean"
        },
        "owner": {
          "description": "The owner of the document.",
          "$ref": "EnterpriseTopazSidekickCommonPerson"
        },
        "lastUpdatedTimeMs": {
          "description": "Timestamp of the last updated time of the document in milliseconds since epoch.",
          "format": "uint64",
          "type": "string"
        },
        "lastModificationTimeMillis": {
          "description": "Last modification time of the document (independent of the user that modified it).",
          "format": "int64",
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "UNKNOWN_DOCUMENT_SCOPE",
            "LIMITED",
            "DASHER_DOMAIN_WITH_LINK",
            "DASHER_DOMAIN",
            "PUBLIC_WITH_LINK",
            "PUBLIC",
            "TEAM_DRIVE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "description": "ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared with link, team drive, ...)."
        },
        "lastViewTimeMs": {
          "description": "Timestamp of the most recent view from the current user in milliseconds since epoch.",
          "format": "uint64",
          "type": "string"
        },
        "documentId": {
          "type": "string",
          "description": "The drive document cosmo id. Client could use the id to build a URL to open a document. Please use Document.document_id."
        },
        "lastCommentTimeMs": {
          "description": "Timestamp of the most recent comment added to the document in milliseconds since epoch.",
          "format": "uint64",
          "type": "string"
        }
      }
    },
    "SearchApplicationSessionStats": {
      "type": "object",
      "properties": {
        "date": {
          "$ref": "Date",
          "description": "The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned."
        },
        "searchSessionsCount": {
          "type": "string",
          "format": "int64",
          "description": "The count of search sessions on the day"
        }
      },
      "id": "SearchApplicationSessionStats"
    },
    "GetSearchApplicationSessionStatsResponse": {
      "type": "object",
      "properties": {
        "stats": {
          "items": {
            "$ref": "SearchApplicationSessionStats"
          },
          "type": "array"
        }
      },
      "id": "GetSearchApplicationSessionStatsResponse"
    },
    "SearchItemsByViewUrlResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "items": {
          "items": {
            "$ref": "Item"
          },
          "type": "array"
        }
      },
      "id": "SearchItemsByViewUrlResponse"
    },
    "EnterpriseTopazFrontendTeamsPersonCorePhoneNumber": {
      "id": "EnterpriseTopazFrontendTeamsPersonCorePhoneNumber",
      "properties": {
        "phoneNumber": {
          "description": "Phone number in no particular format (as comes from the Focus profile).",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "MOBILE",
            "OFFICE",
            "OTHER"
          ]
        },
        "phoneUrl": {
          "$ref": "SafeUrlProto",
          "description": "Phone number URL"
        }
      },
      "type": "object"
    },
    "PollItemsResponse": {
      "id": "PollItemsResponse",
      "properties": {
        "items": {
          "items": {
            "$ref": "Item"
          },
          "type": "array",
          "description": "Set of items from the queue available for connector to process. These items have the following subset of fields populated: version metadata.hash structured_data.hash content.hash payload status queue"
        }
      },
      "type": "object"
    },
    "ListItemsResponse": {
      "type": "object",
      "id": "ListItemsResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Item"
          }
        }
      }
    },
    "EnterpriseTopazSidekickConflictingEventsCardProto": {
      "type": "object",
      "id": "EnterpriseTopazSidekickConflictingEventsCardProto",
      "description": "Conflicting meetings card proto.",
      "properties": {
        "conflictingEvent": {
          "items": {
            "$ref": "EnterpriseTopazSidekickAgendaEntry"
          },
          "description": "All the events that conflict with main_event.",
          "type": "array"
        },
        "mainEvent": {
          "description": "The event identified as being the most important.",
          "$ref": "EnterpriseTopazSidekickAgendaEntry"
        }
      }
    },
    "PropertyDefinition": {
      "type": "object",
      "properties": {
        "textPropertyOptions": {
          "$ref": "TextPropertyOptions"
        },
        "displayOptions": {
          "description": "The options that determine how the property is displayed in the Cloud Search results page if it's specified to be displayed in the object's display options.",
          "$ref": "PropertyDisplayOptions"
        },
        "isFacetable": {
          "type": "boolean",
          "description": "Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties."
        },
        "doublePropertyOptions": {
          "$ref": "DoublePropertyOptions"
        },
        "isSuggestable": {
          "description": "Indicates that the property can be used for generating query suggestions.",
          "type": "boolean"
        },
        "timestampPropertyOptions": {
          "$ref": "TimestampPropertyOptions"
        },
        "isRepeatable": {
          "type": "boolean",
          "description": "Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected."
        },
        "booleanPropertyOptions": {
          "$ref": "BooleanPropertyOptions"
        },
        "objectPropertyOptions": {
          "$ref": "ObjectPropertyOptions"
        },
        "htmlPropertyOptions": {
          "$ref": "HtmlPropertyOptions"
        },
        "isSortable": {
          "description": "Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.",
          "type": "boolean"
        },
        "isWildcardSearchable": {
          "description": "Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)",
          "type": "boolean"
        },
        "enumPropertyOptions": {
          "$ref": "EnumPropertyOptions"
        },
        "isReturnable": {
          "type": "boolean",
          "description": "Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object."
        },
        "name": {
          "type": "string",
          "description": "The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters."
        },
        "integerPropertyOptions": {
          "$ref": "IntegerPropertyOptions"
        },
        "datePropertyOptions": {
          "$ref": "DatePropertyOptions"
        }
      },
      "description": "The definition of a property within an object.",
      "id": "PropertyDefinition"
    },
    "MapTile": {
      "description": "Information used to render a map tile image in the proper location on a map.",
      "id": "MapTile",
      "type": "object",
      "properties": {
        "tileY": {
          "description": "Map tile y coordinate",
          "type": "number",
          "format": "double"
        },
        "tileX": {
          "description": "Map tile x coordinate",
          "format": "double",
          "type": "number"
        },
        "imageUrl": {
          "$ref": "SafeUrlProto",
          "description": "URL to an image file containing an office layout of the user's location for their organization, if one is available. For google.com, this image is from Corp Campus Maps."
        }
      }
    },
    "SuggestResult": {
      "properties": {
        "querySuggestion": {
          "description": "This field will be present if the suggested query is a word/phrase completion.",
          "$ref": "QuerySuggestion"
        },
        "suggestedQuery": {
          "type": "string",
          "description": "The suggested query that will be used for search, when the user clicks on the suggestion"
        },
        "source": {
          "description": "The source of the suggestion.",
          "$ref": "Source"
        },
        "peopleSuggestion": {
          "$ref": "PeopleSuggestion",
          "description": "This is present when the suggestion indicates a person. It contains more information about the person - like their email ID, name etc."
        }
      },
      "description": "One suggestion result.",
      "id": "SuggestResult",
      "type": "object"
    },
    "QueryInterpretation": {
      "properties": {
        "interpretedQuery": {
          "description": "The interpretation of the query used in search. For example, queries with natural language intent like \"email from john\" will be interpreted as \"from:john source:mail\". This field will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY.",
          "type": "string"
        },
        "interpretationType": {
          "type": "string",
          "enum": [
            "NONE",
            "BLEND",
            "REPLACE"
          ],
          "enumDescriptions": [
            "Neither the natural language interpretation, nor a broader version of the query is used to fetch the search results.",
            "The results from original query are blended with other results. The reason for blending these other results with the results from original query is populated in the 'Reason' field below.",
            "The results from original query are replaced. The reason for replacing the results from original query is populated in the 'Reason' field below."
          ]
        },
        "reason": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "QUERY_HAS_NATURAL_LANGUAGE_INTENT",
            "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY"
          ],
          "description": "The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE.",
          "enumDescriptions": [
            "",
            "Natural language interpretation of the query is used to fetch the search results.",
            "Query and document terms similarity is used to selectively broaden the query to retrieve additional search results since enough results were not found for the user query. Interpreted query will be empty for this case."
          ]
        }
      },
      "id": "QueryInterpretation",
      "type": "object"
    },
    "RepositoryError": {
      "type": "object",
      "description": "Errors when the connector is communicating to the source repository.",
      "id": "RepositoryError",
      "properties": {
        "type": {
          "description": "The type of error.",
          "enum": [
            "UNKNOWN",
            "NETWORK_ERROR",
            "DNS_ERROR",
            "CONNECTION_ERROR",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "SERVER_ERROR",
            "QUOTA_EXCEEDED",
            "SERVICE_UNAVAILABLE",
            "CLIENT_ERROR"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown error.",
            "Unknown or unreachable host.",
            "DNS problem, such as the DNS server is not responding.",
            "Cannot connect to the repository server.",
            "Failed authentication due to incorrect credentials.",
            "Service account is not authorized for the repository.",
            "Repository server error.",
            "Quota exceeded.",
            "Server temporarily unavailable.",
            "Client-related error, such as an invalid request from the connector to the repository server."
          ]
        },
        "errorMessage": {
          "description": "Message that describes the error. The maximum allowable length of the message is 8192 characters.",
          "type": "string"
        },
        "httpStatusCode": {
          "description": "Error codes. Matches the definition of HTTP status codes.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EnterpriseTopazSidekickMeetingNotesCardProto": {
      "id": "EnterpriseTopazSidekickMeetingNotesCardProto",
      "description": "Information about the meeting notes created.",
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "Google Drive ID (a.k.a. resource ID) of the file."
        },
        "title": {
          "type": "string",
          "description": "Title we want to show for meeting notes in the answer card"
        },
        "url": {
          "type": "string",
          "description": "New URL."
        },
        "event": {
          "description": "The event to request meeting notes creation.",
          "$ref": "EnterpriseTopazSidekickAgendaEntry"
        }
      }
    },
    "ItemStatus": {
      "id": "ItemStatus",
      "description": "This contains item's status and any errors.",
      "properties": {
        "repositoryErrors": {
          "type": "array",
          "items": {
            "$ref": "RepositoryError"
          },
          "description": "Repository error reported by connector."
        },
        "code": {
          "type": "string",
          "description": "Status code.",
          "enumDescriptions": [
            "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
            "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
            "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
            "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
            "API has accepted the up-to-date data of this item."
          ],
          "enum": [
            "CODE_UNSPECIFIED",
            "ERROR",
            "MODIFIED",
            "NEW_ITEM",
            "ACCEPTED"
          ]
        },
        "processingErrors": {
          "items": {
            "$ref": "ProcessingError"
          },
          "type": "array",
          "description": "Error details in case the item is in ERROR state."
        }
      },
      "type": "object"
    },
    "DoublePropertyOptions": {
      "properties": {
        "operatorOptions": {
          "$ref": "DoubleOperatorOptions",
          "description": "If set, describes how the double should be used as a search operator."
        }
      },
      "type": "object",
      "description": "The options for double properties.",
      "id": "DoublePropertyOptions"
    },
    "DriveTimeSpanRestrict": {
      "type": "object",
      "description": "The time span search restrict (e.g. \"after:2017-09-11 before:2017-09-12\").",
      "id": "DriveTimeSpanRestrict",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "TODAY",
            "YESTERDAY",
            "LAST_7_DAYS",
            "LAST_30_DAYS",
            "LAST_90_DAYS"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "Not Enabled",
            "Not Enabled"
          ]
        }
      }
    },
    "PollItemsRequest": {
      "properties": {
        "queue": {
          "description": "Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters.",
          "type": "string"
        },
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        },
        "statusCodes": {
          "description": "Limit the items polled to the ones with these statuses.",
          "items": {
            "enum": [
              "CODE_UNSPECIFIED",
              "ERROR",
              "MODIFIED",
              "NEW_ITEM",
              "ACCEPTED"
            ],
            "enumDescriptions": [
              "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
              "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
              "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
              "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
              "API has accepted the up-to-date data of this item."
            ],
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of items to return. The maximum value is 100 and the default value is 20.",
          "format": "int32"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "id": "PollItemsRequest",
      "type": "object"
    },
    "CustomerSessionStats": {
      "properties": {
        "date": {
          "description": "The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned.",
          "$ref": "Date"
        },
        "searchSessionsCount": {
          "format": "int64",
          "description": "The count of search sessions on the day",
          "type": "string"
        }
      },
      "id": "CustomerSessionStats",
      "type": "object"
    },
    "NamedProperty": {
      "type": "object",
      "properties": {
        "integerValues": {
          "$ref": "IntegerValues"
        },
        "htmlValues": {
          "$ref": "HtmlValues"
        },
        "timestampValues": {
          "$ref": "TimestampValues"
        },
        "doubleValues": {
          "$ref": "DoubleValues"
        },
        "textValues": {
          "$ref": "TextValues"
        },
        "name": {
          "description": "The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters.",
          "type": "string"
        },
        "enumValues": {
          "$ref": "EnumValues"
        },
        "booleanValue": {
          "type": "boolean"
        },
        "objectValues": {
          "$ref": "ObjectValues"
        },
        "dateValues": {
          "$ref": "DateValues"
        }
      },
      "description": "A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`.",
      "id": "NamedProperty"
    },
    "EnterpriseTopazSidekickCommonDocumentJustification": {
      "properties": {
        "reason": {
          "enum": [
            "UNKNOWN",
            "TRENDING_IN_COLLABORATORS",
            "TRENDING_IN_DOMAIN",
            "FREQUENTLY_VIEWED",
            "FREQUENTLY_EDITED",
            "NEW_UPDATES",
            "NEW_COMMENTS",
            "EVENT_DESCRIPTION",
            "EVENT_ATTACHMENT",
            "EVENT_METADATA_ATTACHMENT",
            "MINED_DOCUMENT",
            "NEW_MENTIONS",
            "NEW_SHARES"
          ],
          "enumDescriptions": [
            "Unknown justification.",
            "Popular documents within collaborators.",
            "Popular documents within the domain.",
            "Documents being reviewed frequently by the current user .",
            "Documents being edited frequently by the current user .",
            "Documents updated since user's last visit.",
            "Documents that receive comments since user's last visit.",
            "Documents in the calendar event description.",
            "Documents in the calendar event attachments section.",
            "Documents attached in calendar event metadata instead of the attachment section. Event metadata is not visible to the final user. Enterprise assist uses this metadata to store auto-generated documents such as meeting notes.",
            "Documents mined, and so, probably related to the request context. For example, this category includes documents related to a meeting.",
            "Documents that contains mentions of the user.",
            "Documents that are shared with the user."
          ],
          "type": "string",
          "description": "Reason on why the document is selected. Populate for trending documents."
        },
        "justification": {
          "type": "string",
          "description": "A locale aware message that explains why this document was selected."
        }
      },
      "id": "EnterpriseTopazSidekickCommonDocumentJustification",
      "description": "Justification of why we are reporting the document.",
      "type": "object"
    },
    "SortOptions": {
      "id": "SortOptions",
      "properties": {
        "sortOrder": {
          "enumDescriptions": [
            "",
            ""
          ],
          "description": "Ascending is the default sort order",
          "type": "string",
          "enum": [
            "ASCENDING",
            "DESCENDING"
          ]
        },
        "operatorName": {
          "description": "The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnumOperatorOptions": {
      "description": "Used to provide a search operator for enum properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched. For example, if you provide no operator for a *priority* enum property with possible values *p0* and *p1*, a query that contains the term *p0* returns items that have *p0* as the value of the *priority* property, as well as any items that contain the string *p0* in other fields. If you provide an operator name for the enum, such as *priority*, then search users can use that operator to refine results to only items that have *p0* as this property's value, with the query *priority:p0*.",
      "id": "EnumOperatorOptions",
      "type": "object",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the enum property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      }
    },
    "EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard": {
      "type": "object",
      "properties": {
        "header": {
          "description": "The header to display for the card.",
          "$ref": "EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader"
        },
        "responseStatus": {
          "enumDescriptions": [
            "Unknown.",
            "Success.",
            "No such person was found in the user's domain.",
            "A person was found to match the query, but an answer could not be obtained."
          ],
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "MISSING_PERSON",
            "MISSING_DATA"
          ],
          "type": "string",
          "description": "The response status."
        },
        "answer": {
          "description": "List of answers.",
          "items": {
            "$ref": "SafeHtmlProto"
          },
          "type": "array"
        },
        "statusMessage": {
          "description": "Localized user friendly message to display to the user in the case of missing data or an error.",
          "type": "string"
        },
        "disambiguationInfo": {
          "description": "Disambiguation information.",
          "$ref": "EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo"
        },
        "subject": {
          "$ref": "EnterpriseTopazSidekickCommonPerson",
          "description": "The profile of the person that was the subject of the query."
        },
        "answerText": {
          "$ref": "EnterpriseTopazSidekickAnswerAnswerList",
          "description": "List of answers."
        }
      },
      "description": "An answer card for a single person.",
      "id": "EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard"
    },
    "Media": {
      "description": "Media resource.",
      "properties": {
        "resourceName": {
          "description": "Name of the media resource.",
          "type": "string"
        }
      },
      "id": "Media",
      "type": "object"
    },
    "RetrievalImportance": {
      "type": "object",
      "properties": {
        "importance": {
          "type": "string",
          "enumDescriptions": [
            "Treat the match like a body text match.",
            "Treat the match like a match against title of the item.",
            "Treat the match with higher importance than body text.",
            "Treat the match with lower importance than body text.",
            "Do not match against this field during retrieval. The property can still be used for operator matching, faceting, and suggest if desired."
          ],
          "enum": [
            "DEFAULT",
            "HIGHEST",
            "HIGH",
            "LOW",
            "NONE"
          ],
          "description": "Indicates the ranking importance given to property when it is matched during retrieval. Once set, the token importance of a property cannot be changed."
        }
      },
      "id": "RetrievalImportance"
    },
    "FilterOptions": {
      "properties": {
        "objectType": {
          "type": "string",
          "description": "If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum length is 256 characters."
        },
        "filter": {
          "description": "Generic filter to restrict the search, such as `lang:en`, `site:xyz`.",
          "$ref": "Filter"
        }
      },
      "type": "object",
      "description": "Filter options to be applied on query.",
      "id": "FilterOptions"
    },
    "SearchItemsByViewUrlRequest": {
      "id": "SearchItemsByViewUrlRequest",
      "type": "object",
      "properties": {
        "viewUrl": {
          "type": "string",
          "description": "Specify the full view URL to find the corresponding item. The maximum length is 2048 characters."
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        },
        "pageToken": {
          "description": "The next_page_token value returned from a previous request, if any.",
          "type": "string"
        }
      }
    },
    "QueryInterpretationOptions": {
      "properties": {
        "disableSupplementalResults": {
          "type": "boolean",
          "description": "Use this flag to disable supplemental results for a query. Supplemental results setting chosen at SearchApplication level will take precedence if set to True."
        },
        "disableNlInterpretation": {
          "description": "Flag to disable natural language (NL) interpretation of queries. Default is false, Set to true to disable natural language interpretation. NL interpretation only applies to predefined datasources.",
          "type": "boolean"
        },
        "enableVerbatimMode": {
          "type": "boolean",
          "description": "Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental result retrieval, and usage of synonyms including custom ones. Nl interpretation will be disabled if either one of the two flags is true."
        }
      },
      "id": "QueryInterpretationOptions",
      "type": "object",
      "description": "Options to interpret user query."
    },
    "CustomerSettings": {
      "properties": {
        "auditLoggingSettings": {
          "description": "Audit Logging settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request.",
          "$ref": "AuditLoggingSettings"
        },
        "vpcSettings": {
          "$ref": "VPCSettings",
          "description": "VPC SC settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request."
        }
      },
      "type": "object",
      "description": "Represents settings at a customer level.",
      "id": "CustomerSettings"
    },
    "EnterpriseTopazSidekickCommonDocument": {
      "properties": {
        "title": {
          "description": "Title of the document.",
          "type": "string"
        },
        "driveDocumentMetadata": {
          "$ref": "EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata",
          "description": "Drive document metadata."
        },
        "url": {
          "description": "Absolute URL of the document.",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "Thumbnail URL.",
          "type": "string"
        },
        "type": {
          "description": "Type of the document.",
          "enumDescriptions": [
            "If the type is unknown or not represented in this enum.",
            "Drive document types Writely, Word, etc.",
            "Presently, PowerPoint, etc.",
            "Trix, Excel, etc.",
            "File types for Gdrive objects are below. PDF.",
            "Image.",
            "Fall-back for unknown Gdrive types.",
            "Fusion table.",
            "Folder.",
            "Drawing.",
            "Video.",
            "Form.",
            "Link formats uncategorized URL links",
            "meaningful links that should be renderred specifically",
            "Link to goo.gl.",
            "Link to bit_ly.",
            "Link to Gmail.",
            "Mailto link.",
            "Videos Youtube videos.",
            "Live streams (e.g., liveplayer.googleplex.com)",
            "Other types. Google Groups.",
            "Google News.",
            "Google Sites.",
            "Google Hangout.",
            "Audio files.",
            "Microsoft-specific file types.",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "DOCUMENT",
            "PRESENTATION",
            "SPREADSHEET",
            "PDF",
            "IMAGE",
            "BINARY_BLOB",
            "FUSION_TABLE",
            "FOLDER",
            "DRAWING",
            "VIDEO",
            "FORM",
            "LINK_URL",
            "LINK_GO",
            "LINK_GOO_GL",
            "LINK_BIT_LY",
            "LINK_GMAIL",
            "LINK_MAILTO",
            "VIDEO_YOUTUBE",
            "VIDEO_LIVE",
            "GROUPS",
            "NEWS",
            "SITES",
            "HANGOUT",
            "AUDIO",
            "MS_WORD",
            "MS_POWERPOINT",
            "MS_EXCEL",
            "MS_OUTLOOK"
          ],
          "type": "string"
        },
        "accessType": {
          "enum": [
            "UNKNOWN_ACCESS",
            "ALLOWED",
            "NOT_ALLOWED"
          ],
          "description": "Access type, i.e., whether the user has access to the document or not.",
          "enumDescriptions": [
            "Unknown access type.",
            "Access allowed.",
            "Access not allowed."
          ],
          "type": "string"
        },
        "justification": {
          "$ref": "EnterpriseTopazSidekickCommonDocumentJustification",
          "description": "Justification on why the document is selected."
        },
        "debugInfo": {
          "$ref": "EnterpriseTopazSidekickCommonDebugInfo",
          "description": "Information for debugging."
        },
        "genericUrl": {
          "type": "string",
          "description": "Generic Drive-based url in the format of drive.google.com/open to be used for deeplink"
        },
        "reason": {
          "enum": [
            "UNKNOWN",
            "TRENDING_IN_COLLABORATORS",
            "TRENDING_IN_DOMAIN",
            "FREQUENTLY_VIEWED",
            "FREQUENTLY_EDITED",
            "NEW_UPDATES",
            "NEW_COMMENTS",
            "EVENT_DESCRIPTION",
            "EVENT_ATTACHMENT",
            "EVENT_METADATA_ATTACHMENT",
            "MINED_DOCUMENT",
            "NEW_MENTIONS",
            "NEW_SHARES"
          ],
          "enumDescriptions": [
            "Unknown justification.",
            "Popular documents within collaborators.",
            "Popular documents within the domain.",
            "Documents being reviewed frequently by the current user .",
            "Documents being edited frequently by the current user .",
            "Documents updated since user's last visit.",
            "Documents that receive comments since user's last visit.",
            "Documents in the calendar event description.",
            "Documents in the calendar event attachments section.",
            "Documents attached in calendar event metadata instead of the attachment section. Event metadata is not visible to the final user. Enterprise assist uses this metadata to store auto-generated documents such as meeting notes.",
            "Documents mined, and so, probably related to the request context. For example, this category includes documents related to a meeting.",
            "Documents that contains mentions of the user.",
            "Documents that are shared with the user."
          ],
          "description": "Justification of why this document is being returned.",
          "type": "string"
        },
        "snippet": {
          "type": "string",
          "description": "A sampling of the text from the document."
        },
        "documentId": {
          "type": "string",
          "description": "Document id."
        },
        "mimeType": {
          "type": "string",
          "description": "MIME type"
        },
        "provenance": {
          "enum": [
            "UNKNOWN_PROVENANCE",
            "CALENDAR_DESCRIPTION",
            "CALENDAR_ATTACHMENT",
            "MINED",
            "CALENDAR_ASSIST_ATTACHMENT"
          ],
          "description": "Document provenance.",
          "type": "string",
          "enumDescriptions": [
            "Unknown provenance.",
            "Calendar event description.",
            "Calendar event attachment.",
            "Mined (extracted by some offline/online analysis).",
            "Attachment created by enterprise assist."
          ]
        }
      },
      "id": "EnterpriseTopazSidekickCommonDocument",
      "description": "Representation of a document. NEXT_TAG: 15",
      "type": "object"
    },
    "UnreserveItemsRequest": {
      "properties": {
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "queue": {
          "type": "string",
          "description": "The name of a queue to unreserve items from."
        },
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        }
      },
      "id": "UnreserveItemsRequest",
      "type": "object"
    },
    "Action": {
      "id": "Action",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "[Optional] Url of the action."
        },
        "title": {
          "type": "string",
          "description": "[Required] Title of the action."
        }
      }
    },
    "IntegerFacetingOptions": {
      "type": "object",
      "properties": {
        "integerBuckets": {
          "description": "Buckets for given integer values should be in strictly ascending order. For example, if values supplied are (1,5,10,100), the following facet buckets will be formed {\u003c1, [1,5), [5-10), [10-100), \u003e=100}.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      },
      "description": "Used to specify integer faceting options.",
      "id": "IntegerFacetingOptions"
    },
    "ResponseDebugInfo": {
      "type": "object",
      "id": "ResponseDebugInfo",
      "properties": {
        "formattedDebugInfo": {
          "type": "string",
          "description": "General debug info formatted for display."
        }
      },
      "description": "Debugging information about the response."
    },
    "Metadata": {
      "description": "Metadata of a matched search result.",
      "id": "Metadata",
      "properties": {
        "objectType": {
          "type": "string",
          "description": "Object type of the search result."
        },
        "createTime": {
          "type": "string",
          "description": "The creation time for this document or object in the search result.",
          "format": "google-datetime"
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "The thumbnail URL of the result."
        },
        "mimeType": {
          "type": "string",
          "description": "Mime type of the search result."
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time.",
          "type": "string"
        },
        "displayOptions": {
          "$ref": "ResultDisplayMetadata",
          "description": "Options that specify how to display a structured data search result."
        },
        "owner": {
          "description": "Owner (usually creator) of the document or object of the search result.",
          "$ref": "Person"
        },
        "source": {
          "$ref": "Source",
          "description": "The named source for the result, such as Gmail."
        },
        "fields": {
          "description": "Indexed fields in structured data, returned as a generic named property.",
          "items": {
            "$ref": "NamedProperty"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Source": {
      "properties": {
        "predefinedSource": {
          "description": "Predefined content source for Google Apps.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Suggests queries issued by the user in the past. Only valid when used with the suggest API. Ignored when used in the query API.",
            "Suggests people in the organization. Only valid when used with the suggest API. Results in an error when used in the query API.",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "NONE",
            "QUERY_HISTORY",
            "PERSON",
            "GOOGLE_DRIVE",
            "GOOGLE_GMAIL",
            "GOOGLE_SITES",
            "GOOGLE_GROUPS",
            "GOOGLE_CALENDAR",
            "GOOGLE_KEEP"
          ]
        },
        "name": {
          "type": "string",
          "description": "Source name for content indexed by the Indexing API."
        }
      },
      "type": "object",
      "description": "Defines sources for the suggest/search APIs.",
      "id": "Source"
    },
    "EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer": {
      "type": "object",
      "properties": {
        "answer": {
          "description": "The free text answer.",
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "A localized label for the answer (e.g. \"Cell phone\" vs \"Desk phone\")."
        }
      },
      "description": "An answer with a corresponding label.",
      "id": "EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer"
    },
    "IntegerOperatorOptions": {
      "description": "Used to provide a search operator for integer properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "properties": {
        "greaterThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the integer property using the greater-than operator. For example, if greaterThanOperatorName is *priorityabove* and the property's name is *priorityVal*, then queries like *priorityabove:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* is greater than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the integer property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "lessThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the integer property using the less-than operator. For example, if lessThanOperatorName is *prioritybelow* and the property's name is *priorityVal*, then queries like *prioritybelow:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* is less than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "IntegerOperatorOptions"
    },
    "TimestampValues": {
      "type": "object",
      "description": "List of timestamp values.",
      "id": "TimestampValues",
      "properties": {
        "values": {
          "items": {
            "type": "string",
            "format": "google-datetime"
          },
          "type": "array"
        }
      }
    },
    "FacetResult": {
      "type": "object",
      "properties": {
        "sourceName": {
          "type": "string",
          "description": "Source name for which facet results are returned. Will not be empty."
        },
        "objectType": {
          "description": "Object type for which facet results are returned. Can be empty.",
          "type": "string"
        },
        "buckets": {
          "type": "array",
          "description": "FacetBuckets for values in response containing at least a single result with the corresponding filter.",
          "items": {
            "$ref": "FacetBucket"
          }
        },
        "operatorName": {
          "type": "string",
          "description": "The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions"
        }
      },
      "id": "FacetResult",
      "description": "Source specific facet response"
    },
    "DateValues": {
      "type": "object",
      "id": "DateValues",
      "description": "List of date values.",
      "properties": {
        "values": {
          "items": {
            "$ref": "Date"
          },
          "type": "array"
        }
      }
    },
    "DataSourceRestriction": {
      "id": "DataSourceRestriction",
      "type": "object",
      "description": "Restriction on Datasource.",
      "properties": {
        "filterOptions": {
          "items": {
            "$ref": "FilterOptions"
          },
          "description": "Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: \"objecttype\", \"type\" and \"mimetype\". For now, schema specific filters cannot be used to filter suggestions.",
          "type": "array"
        },
        "source": {
          "$ref": "Source",
          "description": "The source of restriction."
        }
      }
    },
    "ObjectPropertyOptions": {
      "description": "The options for object properties.",
      "properties": {
        "subobjectProperties": {
          "type": "array",
          "items": {
            "$ref": "PropertyDefinition"
          },
          "description": "The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named *street*, *city*, and *state*. The maximum number of elements is 1000."
        }
      },
      "id": "ObjectPropertyOptions",
      "type": "object"
    },
    "SearchApplicationUserStats": {
      "id": "SearchApplicationUserStats",
      "type": "object",
      "properties": {
        "oneDayActiveUsersCount": {
          "type": "string",
          "format": "int64",
          "description": "The count of unique active users in the past one day"
        },
        "thirtyDaysActiveUsersCount": {
          "format": "int64",
          "type": "string",
          "description": "The count of unique active users in the past thirty days"
        },
        "sevenDaysActiveUsersCount": {
          "format": "int64",
          "type": "string",
          "description": "The count of unique active users in the past seven days"
        },
        "date": {
          "description": "The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        }
      }
    },
    "UnmappedIdentity": {
      "type": "object",
      "id": "UnmappedIdentity",
      "properties": {
        "externalIdentity": {
          "description": "The resource name for an external user.",
          "$ref": "Principal"
        },
        "resolutionStatusCode": {
          "enumDescriptions": [
            "Input-only value. Used to list all unmapped identities regardless of status.",
            "The unmapped identity was not found in IDaaS, and needs to be provided by the user.",
            "The identity source associated with the identity was either not found or deleted.",
            "IDaaS does not understand the identity source, probably because the schema was modified in a non compatible way.",
            "The number of users associated with the external identity is too large.",
            "Internal error."
          ],
          "type": "string",
          "description": "The resolution status for the external identity.",
          "enum": [
            "CODE_UNSPECIFIED",
            "NOT_FOUND",
            "IDENTITY_SOURCE_NOT_FOUND",
            "IDENTITY_SOURCE_MISCONFIGURED",
            "TOO_MANY_MAPPINGS_FOUND",
            "INTERNAL_ERROR"
          ]
        }
      }
    },
    "CustomerUserStats": {
      "properties": {
        "thirtyDaysActiveUsersCount": {
          "type": "string",
          "format": "int64",
          "description": "The count of unique active users in the past thirty days"
        },
        "oneDayActiveUsersCount": {
          "description": "The count of unique active users in the past one day",
          "format": "int64",
          "type": "string"
        },
        "date": {
          "description": "The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        },
        "sevenDaysActiveUsersCount": {
          "type": "string",
          "format": "int64",
          "description": "The count of unique active users in the past seven days"
        }
      },
      "id": "CustomerUserStats",
      "type": "object"
    },
    "EnterpriseTopazSidekickAssistCardProto": {
      "description": "Wrapper proto for the Assist cards.",
      "type": "object",
      "id": "EnterpriseTopazSidekickAssistCardProto",
      "properties": {
        "workInProgressCardProto": {
          "$ref": "EnterpriseTopazSidekickRecentDocumentsCardProto",
          "description": "Work In Progress card."
        },
        "findMeetingTimeCard": {
          "description": "Find meeting time card.",
          "$ref": "EnterpriseTopazSidekickFindMeetingTimeCardProto"
        },
        "sharedDocuments": {
          "$ref": "EnterpriseTopazSidekickDocumentPerCategoryList",
          "description": "Shared documents."
        },
        "peopleDisambiguationCard": {
          "description": "The people disambiguation card.",
          "$ref": "EnterpriseTopazSidekickPeopleDisambiguationCard"
        },
        "meetingNotesCard": {
          "description": "Meeting notes card.",
          "$ref": "EnterpriseTopazSidekickMeetingNotesCardProto"
        },
        "personProfileCard": {
          "$ref": "EnterpriseTopazSidekickPersonProfileCard",
          "description": "Full profile card."
        },
        "documentListCard": {
          "$ref": "EnterpriseTopazSidekickDocumentPerCategoryList",
          "description": "Answer card for documents that are applicable to the current query."
        },
        "documentsWithMentions": {
          "$ref": "EnterpriseTopazSidekickDocumentPerCategoryList",
          "description": "Documents with mentions."
        },
        "genericAnswerCard": {
          "$ref": "EnterpriseTopazSidekickGenericAnswerCard",
          "description": "Generic answer card."
        },
        "shareMeetingDocsCard": {
          "description": "Sahre meeting docs card.",
          "$ref": "EnterpriseTopazSidekickShareMeetingDocsCardProto"
        },
        "getAndKeepAheadCard": {
          "$ref": "EnterpriseTopazSidekickGetAndKeepAheadCardProto",
          "description": "Get and keep ahead card."
        },
        "meeting": {
          "$ref": "EnterpriseTopazSidekickAgendaEntry",
          "description": "Meeting card."
        },
        "personAnswerCard": {
          "$ref": "EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard",
          "description": "Answer card that represents a single person."
        },
        "agendaGroupCardProto": {
          "$ref": "EnterpriseTopazSidekickAgendaGroupCardProto",
          "description": "Agenda group card."
        },
        "cardMetadata": {
          "$ref": "EnterpriseTopazSidekickCardMetadata",
          "description": "Card metadata such as chronology and render mode of the card."
        },
        "cardType": {
          "enum": [
            "UNKNOWN_TYPE",
            "AGENDA",
            "CHANGELISTS",
            "CONFLICTING_MEETINGS",
            "CREATE_NOTES_FOR_MEETING",
            "CREATE_NOTES_FOR_MEETING_REQUEST",
            "CUSTOMER_NEWS",
            "FIND_MEETING_TIME",
            "NEXT_MEETING",
            "PERSONALIZED_DOCS",
            "TRENDING_DOCS",
            "UPCOMING_TRIP",
            "SUMMARY",
            "MEETINGS",
            "HOMEPAGE",
            "SHARE_MEETING_DOCS",
            "DISCOVER_PEOPLE",
            "HOMEPAGE_V3",
            "AGENDA_GROUP",
            "WORK_IN_PROGRESS",
            "GET_AND_KEEP_AHEAD",
            "GENERIC_ANSWER_CARD",
            "THIRD_PARTY_ANSWER_CARD",
            "DOMAIN_TRENDING_DOCS",
            "TEAM_TRENDING_DOCS",
            "DOCUMENT_LIST_ANSWER_CARD",
            "SUGGESTED_QUERY_ANSWER_CARD",
            "PERSON_ANSWER_CARD",
            "RELATED_PEOPLE_ANSWER_CARD",
            "PERSON_KNOWLEDGE_CARD",
            "PEOPLE_SEARCH_PROMOTION_CARD"
          ],
          "enumDescriptions": [
            "The default type, an unknown card type.",
            "The user's agenda for the day.",
            "Changelists.",
            "Any group of meetings for the day that are overlapping.",
            "Create notes for a meeting specified in the request.",
            "Create notes for meeting query.",
            "News about your SFDC customers.",
            "Find a time for two people to meet.",
            "The user's next non-declined meeting.",
            "Important documents for you since you have viewed them in the last month and there's some action going on.",
            "Documents that are trending in your company. A TRENDING_DOCS card can be of two types: TRENDING_IN_COLLABORATORS (i.e., Stay in the Loop) and TRENDING_IN_DOMAIN (i.e., Popular Content). Use DOMAIN_TRENDING_DOCS/TEAM_TRENDING_DOCS instead.",
            "An upcoming trip with all trip information along with calendar events in the destination timezone.",
            "The Morning/Evening Summary Card for the next working day.",
            "A meeting. When requesting meetings, the service will return a MEETING card for each meeting the user has in his agenda.",
            "All cards related to the homepage (agenda, conflicting-meetings, summary, etc...). This type should no longer be used. Use HOMEPAGE_V3 instead.",
            "A card to with specifics to share meeting documents with all attendees.",
            "Represents a set of users that the requesting user has low affinity with.",
            "All cards related to the homepage-v3 (agenda-group, WIP, etc...)",
            "A group of agenda-events (meeting, conflicts)",
            "The documents that you were recently working on.",
            "(v3) The \"get and keep ahead\" card for today and tomorrow",
            "Generic answer card.",
            "Third party answer card.",
            "Documents that are trending in your company/domain (i.e., Popular Content).",
            "Documents that are trending in your team (i.e., Stay in the Loop).",
            "Documents that match the user's query (e.g. sheets shared with me).",
            "A help card that provides examples of queries the user can ask.",
            "Answer card for a single person (e.g. what is x's phone number).",
            "Answer card for a list of people related to the person that is the subject of the query (e.g. who reports to x).",
            "Knowledge card for a single person and their related people.",
            "People Search promotion card."
          ],
          "type": "string",
          "description": "Card type."
        },
        "suggestedQueryAnswerCard": {
          "$ref": "EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard",
          "description": "Answer card for what natural language queries the user can ask."
        },
        "conflictingMeetingsCard": {
          "$ref": "EnterpriseTopazSidekickConflictingEventsCardProto",
          "description": "Conflicting events card."
        },
        "personalizedDocsCard": {
          "description": "Card with recommended documents for the user.",
          "$ref": "EnterpriseTopazSidekickPersonalizedDocsCardProto"
        },
        "thirdPartyAnswerCard": {
          "$ref": "ThirdPartyGenericCard",
          "description": "Third party answer cards."
        },
        "meetingNotesCardRequest": {
          "$ref": "EnterpriseTopazSidekickMeetingNotesCardRequest",
          "description": "Request for meeting notes card."
        },
        "peoplePromotionCard": {
          "description": "People Search promotion card.",
          "$ref": "PeoplePromotionCard"
        },
        "relatedPeopleAnswerCard": {
          "$ref": "EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard",
          "description": "Answer card that represents a list of people related to a person."
        }
      }
    },
    "EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson": {
      "id": "EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson",
      "properties": {
        "query": {
          "type": "string",
          "description": "The query that can be used to produce an answer card with the same attribute, but for this person."
        },
        "person": {
          "description": "The profile of this person.",
          "$ref": "EnterpriseTopazSidekickCommonPerson"
        }
      },
      "type": "object",
      "description": "A person that also matches the query, but was not selected due to a lower affinity with the requesting user."
    },
    "EnterpriseTopazSidekickPersonalizedDocsCardProto": {
      "properties": {
        "documentGroup": {
          "type": "array",
          "items": {
            "$ref": "EnterpriseTopazSidekickDocumentGroup"
          },
          "description": "Document group."
        }
      },
      "description": "Personalized docs card proto.",
      "type": "object",
      "id": "EnterpriseTopazSidekickPersonalizedDocsCardProto"
    },
    "UpdateDataSourceRequest": {
      "id": "UpdateDataSourceRequest",
      "properties": {
        "source": {
          "$ref": "DataSource"
        },
        "updateMask": {
          "description": "Only applies to [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch). Update mask to control which fields to update. Example field paths: `name`, `displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the source, that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
          "type": "string",
          "format": "google-fieldmask"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "type": "object"
    },
    "QuerySource": {
      "type": "object",
      "description": "List of sources that the user can search using the query API.",
      "id": "QuerySource",
      "properties": {
        "source": {
          "description": "The name of the source",
          "$ref": "Source"
        },
        "shortName": {
          "type": "string",
          "description": "A short name or alias for the source. This value can be used with the 'source' operator."
        },
        "operators": {
          "type": "array",
          "items": {
            "$ref": "QueryOperator"
          },
          "description": "List of all operators applicable for this source."
        },
        "displayName": {
          "description": "Display name of the data source.",
          "type": "string"
        }
      }
    },
    "FacetOptions": {
      "description": "Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.",
      "id": "FacetOptions",
      "type": "object",
      "properties": {
        "sourceName": {
          "type": "string",
          "description": "Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used."
        },
        "objectType": {
          "description": "If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.",
          "type": "string"
        },
        "numFacetBuckets": {
          "type": "integer",
          "description": "Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.",
          "format": "int32"
        },
        "operatorName": {
          "type": "string",
          "description": "The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions"
        },
        "integerFacetingOptions": {
          "description": "If set, describes integer faceting options for the given integer property. The corresponding integer property in the schema should be marked isFacetable. The number of buckets returned would be minimum of this and num_facet_buckets.",
          "$ref": "IntegerFacetingOptions"
        }
      }
    },
    "IntegerValues": {
      "type": "object",
      "id": "IntegerValues",
      "description": "List of integer values.",
      "properties": {
        "values": {
          "items": {
            "type": "string",
            "format": "int64"
          },
          "type": "array"
        }
      }
    },
    "PushItem": {
      "type": "object",
      "properties": {
        "queue": {
          "type": "string",
          "description": "Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters."
        },
        "metadataHash": {
          "description": "The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.",
          "type": "string"
        },
        "contentHash": {
          "type": "string",
          "description": "Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters."
        },
        "structuredDataHash": {
          "description": "Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.",
          "type": "string"
        },
        "repositoryError": {
          "description": "Populate this field to store Connector or repository error details. This information is displayed in the Admin Console. This field may only be populated when the Type is REPOSITORY_ERROR.",
          "$ref": "RepositoryError"
        },
        "payload": {
          "type": "string",
          "description": "Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.",
          "format": "byte"
        },
        "type": {
          "enumDescriptions": [
            "Default UNSPECIFIED. Specifies that the push operation should not modify ItemStatus",
            "Indicates that the repository document has been modified or updated since the previous update call. This changes status to MODIFIED state for an existing item. If this is called on a non existing item, the status is changed to NEW_ITEM.",
            "Item in the repository has not been modified since the last update call. This push operation will set status to ACCEPTED state.",
            "Connector is facing a repository error regarding this item. Change status to REPOSITORY_ERROR state. Item is unreserved and rescheduled at a future time determined by exponential backoff.",
            "Call push with REQUEUE only for items that have been reserved. This action unreserves the item and resets its available time to the wall clock time."
          ],
          "description": "The type of the push operation that defines the push behavior.",
          "enum": [
            "UNSPECIFIED",
            "MODIFIED",
            "NOT_MODIFIED",
            "REPOSITORY_ERROR",
            "REQUEUE"
          ],
          "type": "string"
        }
      },
      "description": "Represents an item to be pushed to the indexing queue.",
      "id": "PushItem"
    },
    "SafeUrlProto": {
      "description": "Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.",
      "properties": {
        "privateDoNotAccessOrElseSafeUrlWrappedValue": {
          "type": "string",
          "description": "IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message."
        }
      },
      "id": "SafeUrlProto",
      "type": "object"
    },
    "EnterpriseTopazSidekickPersonProfileCardRelatedPeople": {
      "type": "object",
      "id": "EnterpriseTopazSidekickPersonProfileCardRelatedPeople",
      "properties": {
        "relatedPerson": {
          "description": "Related people.",
          "items": {
            "$ref": "EnterpriseTopazSidekickCommonPerson"
          },
          "type": "array"
        },
        "relation": {
          "description": "Relation type.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "MANAGER",
            "DIRECT_REPORT"
          ]
        }
      }
    },
    "ItemMetadata": {
      "id": "ItemMetadata",
      "type": "object",
      "description": "Available metadata fields for the item.",
      "properties": {
        "sourceRepositoryUrl": {
          "type": "string",
          "description": "Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters."
        },
        "contentLanguage": {
          "type": "string",
          "description": "The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters."
        },
        "objectType": {
          "type": "string",
          "description": "The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters."
        },
        "updateTime": {
          "description": "The time when the item was last modified in the source repository.",
          "type": "string",
          "format": "google-datetime"
        },
        "mimeType": {
          "type": "string",
          "description": "The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters."
        },
        "keywords": {
          "items": {
            "type": "string"
          },
          "description": "Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.",
          "type": "array"
        },
        "hash": {
          "type": "string",
          "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters."
        },
        "containerName": {
          "type": "string",
          "description": "The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the item was created in the source repository."
        },
        "searchQualityMetadata": {
          "$ref": "SearchQualityMetadata",
          "description": "Additional search quality metadata of the item"
        },
        "title": {
          "type": "string",
          "description": "The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters."
        },
        "interactions": {
          "items": {
            "$ref": "Interaction"
          },
          "type": "array",
          "description": "A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000."
        },
        "contextAttributes": {
          "type": "array",
          "description": "A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10.",
          "items": {
            "$ref": "ContextAttribute"
          }
        }
      }
    },
    "RestrictItem": {
      "id": "RestrictItem",
      "description": "Information relevant only to a restrict entry. NextId: 12",
      "properties": {
        "searchOperator": {
          "type": "string",
          "description": "The search restrict (e.g. \"after:2017-09-11 before:2017-09-12\")."
        },
        "driveFollowUpRestrict": {
          "$ref": "DriveFollowUpRestrict"
        },
        "driveLocationRestrict": {
          "$ref": "DriveLocationRestrict"
        },
        "driveMimeTypeRestrict": {
          "description": "Drive Types.",
          "$ref": "DriveMimeTypeRestrict"
        },
        "driveTimeSpanRestrict": {
          "$ref": "DriveTimeSpanRestrict"
        }
      },
      "type": "object"
    },
    "ItemCountByStatus": {
      "type": "object",
      "id": "ItemCountByStatus",
      "properties": {
        "statusCode": {
          "enumDescriptions": [
            "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
            "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
            "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
            "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
            "API has accepted the up-to-date data of this item."
          ],
          "description": "Status of the items.",
          "type": "string",
          "enum": [
            "CODE_UNSPECIFIED",
            "ERROR",
            "MODIFIED",
            "NEW_ITEM",
            "ACCEPTED"
          ]
        },
        "indexedItemsCount": {
          "format": "int64",
          "description": "Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.",
          "type": "string"
        },
        "count": {
          "format": "int64",
          "description": "Number of items matching the status code.",
          "type": "string"
        }
      }
    },
    "Person": {
      "description": "Object to represent a person.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API."
        },
        "obfuscatedId": {
          "description": "Obfuscated ID of a person.",
          "type": "string"
        },
        "photos": {
          "type": "array",
          "description": "A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results.",
          "items": {
            "$ref": "Photo"
          }
        },
        "personNames": {
          "type": "array",
          "description": "The person's name",
          "items": {
            "$ref": "Name"
          }
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "$ref": "EmailAddress"
          },
          "description": "The person's email addresses"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "PhoneNumber"
          },
          "type": "array",
          "description": "The person's phone numbers"
        }
      },
      "id": "Person",
      "type": "object"
    },
    "MapInfo": {
      "properties": {
        "mapTile": {
          "type": "array",
          "description": "MapTiles for the area around a user's work location",
          "items": {
            "$ref": "MapTile"
          }
        },
        "long": {
          "description": "Longitude in degrees",
          "format": "double",
          "type": "number"
        },
        "zoom": {
          "description": "The zoom level of the map. A constant zoom value of 18 is used for now to match the zoom of the map shown on a Moma Teams Profile page",
          "format": "int32",
          "type": "integer"
        },
        "locationUrl": {
          "description": "URL to a view of a map centered on the user's work location in Campus Maps (for google.com) or Google Maps (external).",
          "$ref": "SafeUrlProto"
        },
        "lat": {
          "format": "double",
          "description": "Latitude in degrees",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Geo information used for rendering a map that shows the user's work location.",
      "id": "MapInfo"
    },
    "ScoringConfig": {
      "description": "Scoring configurations for a source while processing a Search or Suggest request.",
      "id": "ScoringConfig",
      "properties": {
        "disableFreshness": {
          "type": "boolean",
          "description": "Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI."
        },
        "disablePersonalization": {
          "type": "boolean",
          "description": "Whether to personalize the results. By default, personal signals will be used to boost results."
        }
      },
      "type": "object"
    },
    "QueryItem": {
      "description": "Information relevant only to a query entry.",
      "type": "object",
      "properties": {
        "isSynthetic": {
          "description": "True if the text was generated by means other than a previous user search.",
          "type": "boolean"
        }
      },
      "id": "QueryItem"
    },
    "CustomerQueryStats": {
      "properties": {
        "date": {
          "description": "The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        },
        "queryCountByStatus": {
          "type": "array",
          "items": {
            "$ref": "QueryCountByStatus"
          }
        }
      },
      "id": "CustomerQueryStats",
      "type": "object"
    },
    "EnterpriseTopazSidekickCommonPerson": {
      "description": "Common representation of a person.",
      "id": "EnterpriseTopazSidekickCommonPerson",
      "type": "object",
      "properties": {
        "cellPhone": {
          "type": "string",
          "description": "Cell phone number."
        },
        "givenName": {
          "type": "string",
          "description": "The first name."
        },
        "gaiaId": {
          "description": "This field is deprecated. The obfuscated_id should be used instead.",
          "format": "int64",
          "type": "string"
        },
        "jobTitle": {
          "description": "The person's job title (e.g. Software Engineer).",
          "type": "string"
        },
        "familyName": {
          "type": "string",
          "description": "The last name."
        },
        "email": {
          "type": "string",
          "description": "Email."
        },
        "birthday": {
          "description": "The birthday.",
          "$ref": "EnterpriseTopazSidekickCommonPersonBirthday"
        },
        "deskPhone": {
          "type": "string",
          "description": "Work desk phone number."
        },
        "streetAddress": {
          "description": "The street address (e.g. 1255 Pear Avenue).",
          "type": "string"
        },
        "deskLocation": {
          "description": "Desk location (e.g. US-MTV-PR55-5-5B1I).",
          "type": "string"
        },
        "department": {
          "description": "The department the person works in (e.g. Engineering).",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The full name."
        },
        "fullAddress": {
          "description": "The fully formatted address (e.g. 1255 Pear Avenue, Mountain View 94043, United States).",
          "type": "string"
        },
        "obfuscatedId": {
          "type": "string",
          "description": "The obfuscated GAIA ID."
        },
        "photoUrl": {
          "type": "string",
          "description": "The URL for the Focus profile picture."
        },
        "manager": {
          "$ref": "EnterpriseTopazSidekickCommonPerson",
          "description": "The manager."
        }
      }
    },
    "EnterpriseTopazSidekickPeopleDisambiguationCard": {
      "id": "EnterpriseTopazSidekickPeopleDisambiguationCard",
      "type": "object",
      "properties": {
        "person": {
          "type": "array",
          "description": "Candidate persons for the query.",
          "items": {
            "$ref": "EnterpriseTopazSidekickCommonPerson"
          }
        }
      }
    },
    "EnterpriseTopazSidekickAgendaGroupCardProto": {
      "type": "object",
      "id": "EnterpriseTopazSidekickAgendaGroupCardProto",
      "properties": {
        "agendaItem": {
          "type": "array",
          "items": {
            "$ref": "EnterpriseTopazSidekickAgendaItem"
          }
        },
        "currentAgendaItem": {
          "$ref": "EnterpriseTopazSidekickAgendaItem"
        },
        "context": {
          "$ref": "EnterpriseTopazSidekickAgendaGroupCardProtoContext"
        }
      }
    },
    "EnterpriseTopazSidekickAgendaGroupCardProtoContext": {
      "properties": {
        "context": {
          "type": "string",
          "description": "User friendly free text that describes the context of the card (e.g. \"Next meeting with Bob\"). This is largely only applicable when the card is generated from a query."
        },
        "date": {
          "type": "string",
          "description": "Localized free text that describes the dates represented by the card. Currently, the card will only represent a single day."
        },
        "eventsRestrict": {
          "enumDescriptions": [
            "No specific event was requested.",
            "The next meeting was requested."
          ],
          "enum": [
            "NONE",
            "NEXT_MEETING"
          ],
          "description": "Represents restrictions applied to the events requested in the user's query.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "EnterpriseTopazSidekickAgendaGroupCardProtoContext",
      "description": "The context that resulted in the generation of the card."
    },
    "EnterpriseTopazSidekickDocumentGroup": {
      "properties": {
        "groupType": {
          "type": "string",
          "description": "Document group type",
          "enum": [
            "UNKNOWN_TYPE",
            "ALL"
          ],
          "enumDescriptions": [
            "Unknown type.",
            "A mix of all the document types."
          ]
        },
        "personalizedDocument": {
          "description": "The list of corresponding documents.",
          "type": "array",
          "items": {
            "$ref": "EnterpriseTopazSidekickCommonDocument"
          }
        }
      },
      "type": "object",
      "id": "EnterpriseTopazSidekickDocumentGroup",
      "description": "Represents a mapping between a document type and its corresponding documents. Use for Work in Progress card in v1 homepage."
    },
    "DriveFollowUpRestrict": {
      "id": "DriveFollowUpRestrict",
      "type": "object",
      "description": "Drive follow-up search restricts (e.g. \"followup:suggestions\").",
      "properties": {
        "type": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "FOLLOWUP_SUGGESTIONS",
            "FOLLOWUP_ACTION_ITEMS"
          ]
        }
      }
    },
    "SearchRequest": {
      "id": "SearchRequest",
      "properties": {
        "facetOptions": {
          "items": {
            "$ref": "FacetOptions"
          },
          "type": "array"
        },
        "start": {
          "format": "int32",
          "description": "Starting index of the results.",
          "type": "integer"
        },
        "contextAttributes": {
          "type": "array",
          "description": "Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.",
          "items": {
            "$ref": "ContextAttribute"
          }
        },
        "sortOptions": {
          "$ref": "SortOptions",
          "description": "The options for sorting the search results"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested."
        },
        "queryInterpretationOptions": {
          "description": "Options to interpret the user query.",
          "$ref": "QueryInterpretationOptions"
        },
        "requestOptions": {
          "description": "Request options, such as the search application and user timezone.",
          "$ref": "RequestOptions"
        },
        "dataSourceRestrictions": {
          "items": {
            "$ref": "DataSourceRestriction"
          },
          "type": "array",
          "description": "The sources to use for querying. If not specified, all data sources from the current search application are used."
        },
        "query": {
          "type": "string",
          "description": "The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)"
        }
      },
      "description": "The search API request.",
      "type": "object"
    },
    "ListSearchApplicationsResponse": {
      "properties": {
        "searchApplications": {
          "items": {
            "$ref": "SearchApplication"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      },
      "id": "ListSearchApplicationsResponse",
      "type": "object"
    },
    "GetCustomerIndexStatsResponse": {
      "type": "object",
      "properties": {
        "stats": {
          "type": "array",
          "description": "Summary of indexed item counts, one for each day in the requested range.",
          "items": {
            "$ref": "CustomerIndexStats"
          }
        },
        "averageIndexedItemCount": {
          "format": "int64",
          "type": "string",
          "description": "Average item count for the given date range for which billing is done."
        }
      },
      "id": "GetCustomerIndexStatsResponse"
    },
    "EnumValuePair": {
      "properties": {
        "stringValue": {
          "type": "string",
          "description": "The string value of the EnumValuePair. The maximum length is 32 characters."
        },
        "integerValue": {
          "type": "integer",
          "format": "int32",
          "description": "The integer value of the EnumValuePair which must be non-negative. Optional."
        }
      },
      "type": "object",
      "description": "The enumeration value pair defines two things: a required string value and an optional integer value. The string value defines the necessary query term required to retrieve that item, such as *p0* for a priority item. The integer value determines the ranking of that string value relative to other enumerated values for the same property. For example, you might associate *p0* with *0* and define another enum pair such as *p1* and *1*. You must use the integer value in combination with ordered ranking to set the ranking of a given value relative to other enumerated values for the same property name. Here, a ranking order of DESCENDING for *priority* properties results in a ranking boost for items indexed with a value of *p0* compared to items indexed with a value of *p1*. Without a specified ranking order, the integer value has no effect on item ranking.",
      "id": "EnumValuePair"
    },
    "Item": {
      "properties": {
        "acl": {
          "$ref": "ItemAcl",
          "description": "Access control list for this item."
        },
        "content": {
          "description": "Item content to be indexed and made text searchable.",
          "$ref": "ItemContent"
        },
        "status": {
          "$ref": "ItemStatus",
          "description": "Status of the item. Output only field."
        },
        "metadata": {
          "$ref": "ItemMetadata",
          "description": "The metadata information."
        },
        "payload": {
          "format": "byte",
          "type": "string",
          "description": "Additional state connector can store for this item. The maximum length is 10000 bytes."
        },
        "queue": {
          "description": "Queue this item belongs to. The maximum length is 100 characters.",
          "type": "string"
        },
        "structuredData": {
          "$ref": "ItemStructuredData",
          "description": "The structured data for the item that should conform to a registered object definition in the schema for the data source."
        },
        "version": {
          "description": "Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).",
          "format": "byte",
          "type": "string"
        },
        "itemType": {
          "enumDescriptions": [
            "",
            "An item that is indexed for the only purpose of serving information. These items cannot be referred in containerName or inheritAclFrom fields.",
            "An item that gets indexed and whose purpose is to supply other items with ACLs and/or contain other items.",
            "An item that does not get indexed, but otherwise has the same purpose as CONTAINER_ITEM."
          ],
          "enum": [
            "UNSPECIFIED",
            "CONTENT_ITEM",
            "CONTAINER_ITEM",
            "VIRTUAL_CONTAINER_ITEM"
          ],
          "description": "The type for this item.",
          "type": "string"
        },
        "name": {
          "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Item",
      "description": "Represents a single object that is an item in the search index, such as a file, folder, or a database record."
    },
    "Status": {
      "properties": {
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object"
    },
    "EnterpriseTopazSidekickCommonPersonBirthday": {
      "properties": {
        "value": {
          "description": "Unstructured birthday.",
          "type": "string"
        }
      },
      "id": "EnterpriseTopazSidekickCommonPersonBirthday",
      "type": "object"
    },
    "VPCSettings": {
      "properties": {
        "project": {
          "type": "string",
          "description": "The resource name of the GCP Project to be used for VPC SC policy check. VPC security settings on this project will be honored for Cloud Search APIs after project_name has been updated through CustomerService. Format: projects/{project_id}"
        }
      },
      "id": "VPCSettings",
      "type": "object"
    },
    "ItemContent": {
      "type": "object",
      "id": "ItemContent",
      "properties": {
        "hash": {
          "type": "string",
          "description": "Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters."
        },
        "contentDataRef": {
          "description": "Upload reference ID of a previously uploaded content via write method.",
          "$ref": "UploadItemRef"
        },
        "contentFormat": {
          "type": "string",
          "enumDescriptions": [
            "Invalid value.",
            "contentFormat is HTML.",
            "contentFormat is free text.",
            "contentFormat is raw bytes."
          ],
          "enum": [
            "UNSPECIFIED",
            "HTML",
            "TEXT",
            "RAW"
          ]
        },
        "inlineContent": {
          "description": "Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB).",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded."
    },
    "Name": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The read-only display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header."
        }
      },
      "type": "object",
      "id": "Name",
      "description": "A person's name."
    },
    "EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard": {
      "properties": {
        "subject": {
          "description": "The profile of the person that was the subject of the query.",
          "$ref": "EnterpriseTopazSidekickCommonPerson"
        },
        "header": {
          "description": "The header to display for the card.",
          "$ref": "EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader"
        },
        "relationType": {
          "enum": [
            "UNKNOWN",
            "DIRECT_REPORTS",
            "MANAGER",
            "PEERS"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Direct reports.",
            "The manager.",
            "The teammates/peers of the subject."
          ],
          "description": "Defines the type of relation the list of people have with the subject of the card.",
          "type": "string"
        },
        "relatedPeople": {
          "description": "A list of people that are related to the query subject.",
          "items": {
            "$ref": "EnterpriseTopazSidekickCommonPerson"
          },
          "type": "array"
        },
        "statusMessage": {
          "description": "Localized user friendly message to display to the user in the case of missing data or an error.",
          "type": "string"
        },
        "disambiguationInfo": {
          "$ref": "EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo",
          "description": "Disambiguation information."
        },
        "responseStatus": {
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Success.",
            "No such person was found in the user's domain.",
            "A person was found to match the query, but an answer could not be obtained."
          ],
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "MISSING_PERSON",
            "MISSING_DATA"
          ],
          "description": "The response status."
        }
      },
      "type": "object",
      "description": "An answer card for a list of people that are related to the subject of the query.",
      "id": "EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard"
    },
    "ObjectValues": {
      "type": "object",
      "description": "List of object values.",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "StructuredDataObject"
          }
        }
      },
      "id": "ObjectValues"
    },
    "EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard": {
      "properties": {
        "suggestedQueryCategory": {
          "type": "array",
          "description": "A list of queries to suggest.",
          "items": {
            "$ref": "EnterpriseTopazSidekickAnswerSuggestedQueryCategory"
          }
        }
      },
      "id": "EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard",
      "type": "object",
      "description": "Contains a list of suggested queries. Allows the user to determine what natural language queries they can ask Cloud Search (e.g. \"what can I search for?\")."
    },
    "SourceScoringConfig": {
      "type": "object",
      "description": "Set the scoring configuration. This allows modifying the ranking of results for a source.",
      "properties": {
        "sourceImportance": {
          "type": "string",
          "description": "Importance of the source.",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "DEFAULT",
            "LOW",
            "HIGH"
          ]
        }
      },
      "id": "SourceScoringConfig"
    },
    "ObjectDefinition": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters."
        },
        "propertyDefinitions": {
          "description": "The property definitions for the object. The maximum number of elements is 1000.",
          "items": {
            "$ref": "PropertyDefinition"
          },
          "type": "array"
        },
        "options": {
          "$ref": "ObjectOptions",
          "description": "The optional object-specific options."
        }
      },
      "id": "ObjectDefinition",
      "type": "object",
      "description": "The definition for an object within a data source."
    },
    "EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader": {
      "id": "EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader",
      "properties": {
        "title": {
          "description": "The suggested title to display. This defaults to the user's query.",
          "type": "string"
        }
      },
      "description": "Recommended header to display for the card.",
      "type": "object"
    },
    "IndexItemOptions": {
      "type": "object",
      "properties": {
        "allowUnknownGsuitePrincipals": {
          "type": "boolean",
          "description": "Specifies if the index request should allow Google Workspace principals that do not exist or are deleted."
        }
      },
      "id": "IndexItemOptions"
    },
    "Photo": {
      "id": "Photo",
      "type": "object",
      "description": "A person's photo.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the photo."
        }
      }
    },
    "EnterpriseTopazSidekickAgendaItem": {
      "type": "object",
      "id": "EnterpriseTopazSidekickAgendaItem",
      "properties": {
        "meeting": {
          "$ref": "EnterpriseTopazSidekickAgendaEntry"
        },
        "conflictedGroup": {
          "$ref": "EnterpriseTopazSidekickConflictingEventsCardProto"
        },
        "gapBefore": {
          "$ref": "EnterpriseTopazSidekickGap"
        }
      }
    },
    "CustomerSearchApplicationStats": {
      "properties": {
        "count": {
          "description": "The count of search applications for the date.",
          "format": "int64",
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date for which search application stats were calculated."
        }
      },
      "type": "object",
      "id": "CustomerSearchApplicationStats",
      "description": "Search application stats for a customer for the given date."
    },
    "PhoneNumber": {
      "id": "PhoneNumber",
      "properties": {
        "phoneNumber": {
          "type": "string",
          "description": "The phone number of the person."
        },
        "type": {
          "type": "string",
          "enum": [
            "OTHER",
            "MOBILE",
            "OFFICE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      },
      "type": "object",
      "description": "A person's Phone Number"
    },
    "GetDataSourceIndexStatsResponse": {
      "id": "GetDataSourceIndexStatsResponse",
      "type": "object",
      "properties": {
        "stats": {
          "description": "Summary of indexed item counts, one for each day in the requested range.",
          "type": "array",
          "items": {
            "$ref": "DataSourceIndexStats"
          }
        },
        "averageIndexedItemCount": {
          "type": "string",
          "description": "Average item count for the given date range for which billing is done.",
          "format": "int64"
        }
      }
    },
    "EnterpriseTopazSidekickGap": {
      "properties": {
        "startTimeMs": {
          "type": "string",
          "format": "uint64"
        },
        "startTime": {
          "description": "Localized time string in the format:(Locale CZ) 8:30 odp.",
          "type": "string"
        },
        "remainingTime": {
          "format": "google-duration",
          "type": "string"
        },
        "endTimeMs": {
          "format": "uint64",
          "type": "string"
        },
        "endTime": {
          "description": "Localized time string in the format:(Locale CZ) 8:30 odp.",
          "type": "string"
        },
        "displayRemainingTime": {
          "description": "Localized time string in the format: 1 hour 15 minutes",
          "type": "string"
        }
      },
      "type": "object",
      "id": "EnterpriseTopazSidekickGap"
    },
    "EnterpriseTopazSidekickRankingParams": {
      "type": "object",
      "properties": {
        "spanMs": {
          "type": "string",
          "format": "uint64",
          "description": "The span that this card will take in the stream Expected to be set when type is set to FLEXIBLE."
        },
        "type": {
          "enumDescriptions": [
            "Fixed, i.e., the card is time sensitive.",
            "Flexible, i.e., the card is not time sensitive."
          ],
          "description": "The packing type of this object.",
          "enum": [
            "FIXED",
            "FLEXIBLE"
          ],
          "type": "string"
        },
        "score": {
          "type": "number",
          "description": "The score of the card to be used to break priority-ties",
          "format": "float"
        },
        "endTimeMs": {
          "format": "uint64",
          "description": "The end-time that this object will expect to occur. If the type is marked as FIXED, then this end-time will persist after bidding. If the type is marked as FLEXIBLE, this field is NOT expected to be filled and will be filled in after it has won a bid. Expected to be set when type is set to FIXED.",
          "type": "string"
        },
        "priority": {
          "type": "string",
          "description": "The priority to determine between objects that have the same start_time_ms The lower-value of priority == ranked higher. Max-priority = 0. Expected to be set for all types.",
          "enumDescriptions": [
            "Unknown (default).",
            "Critical.",
            "Important.",
            "High.",
            "Normal.",
            "Best effort."
          ],
          "enum": [
            "UNKNOWN",
            "CRITICAL",
            "IMPORTANT",
            "HIGH",
            "NORMAL",
            "BEST_EFFORT"
          ]
        },
        "startTimeMs": {
          "format": "uint64",
          "type": "string",
          "description": "The start-time that this object will bid-for If the type is marked as FIXED, then this start-time will persist after bidding. If the type is marked as FLEXIBLE, then it will occur at the given time or sometime after the requested time. Expected to be set for all types."
        }
      },
      "id": "EnterpriseTopazSidekickRankingParams",
      "description": "Ranking params."
    },
    "CustomerIndexStats": {
      "type": "object",
      "description": "Aggregation of items by status code as of the specified date.",
      "id": "CustomerIndexStats",
      "properties": {
        "itemCountByStatus": {
          "items": {
            "$ref": "ItemCountByStatus"
          },
          "description": "Number of items aggregrated by status code.",
          "type": "array"
        },
        "date": {
          "description": "The date for which statistics were calculated.",
          "$ref": "Date"
        }
      }
    },
    "IntegerPropertyOptions": {
      "type": "object",
      "id": "IntegerPropertyOptions",
      "description": "The options for integer properties.",
      "properties": {
        "minimumValue": {
          "type": "string",
          "format": "int64",
          "description": "The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value."
        },
        "operatorOptions": {
          "description": "If set, describes how the integer should be used as a search operator.",
          "$ref": "IntegerOperatorOptions"
        },
        "orderedRanking": {
          "type": "string",
          "description": "Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.",
          "enumDescriptions": [
            "There is no ranking order for the property. Results are not adjusted by this property's value.",
            "This property is ranked in ascending order. Lower values indicate lower ranking.",
            "This property is ranked in descending order. Lower values indicate higher ranking."
          ],
          "enum": [
            "NO_ORDER",
            "ASCENDING",
            "DESCENDING"
          ]
        },
        "maximumValue": {
          "description": "The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.",
          "format": "int64",
          "type": "string"
        },
        "integerFacetingOptions": {
          "description": "If set, describes integer faceting options for the given integer property. The corresponding integer property should be marked isFacetable.",
          "$ref": "IntegerFacetingOptions"
        }
      }
    },
    "EnterpriseTopazSidekickNlpMetadata": {
      "description": "Metadata about the NLP interpretation of the query.",
      "id": "EnterpriseTopazSidekickNlpMetadata",
      "type": "object",
      "properties": {
        "confidence": {
          "description": "Confidence of the interpretation that generated this card.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "ItemAcl": {
      "id": "ItemAcl",
      "description": "Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).",
      "type": "object",
      "properties": {
        "aclInheritanceType": {
          "type": "string",
          "enum": [
            "NOT_APPLICABLE",
            "CHILD_OVERRIDE",
            "PARENT_OVERRIDE",
            "BOTH_PERMIT"
          ],
          "enumDescriptions": [
            "The default value when this item does not inherit an ACL. Use NOT_APPLICABLE when inheritAclFrom is empty. An item without ACL inheritance can still have ACLs supplied by its own readers and deniedReaders fields.",
            "During an authorization conflict, the ACL of the child item determines its read access.",
            "During an authorization conflict, the ACL of the parent item specified in the inheritAclFrom field determines read access.",
            "Access is granted only if this item and the parent item specified in the inheritAclFrom field both permit read access."
          ],
          "description": "Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType."
        },
        "deniedReaders": {
          "description": "List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.",
          "items": {
            "$ref": "Principal"
          },
          "type": "array"
        },
        "inheritAclFrom": {
          "type": "string",
          "description": "The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters."
        },
        "readers": {
          "description": "List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.",
          "items": {
            "$ref": "Principal"
          },
          "type": "array"
        },
        "owners": {
          "type": "array",
          "description": "Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5.",
          "items": {
            "$ref": "Principal"
          }
        }
      }
    },
    "Snippet": {
      "id": "Snippet",
      "type": "object",
      "description": "Snippet of the search result, which summarizes the content of the resulting page.",
      "properties": {
        "matchRanges": {
          "description": "The matched ranges in the snippet.",
          "type": "array",
          "items": {
            "$ref": "MatchRange"
          }
        },
        "snippet": {
          "type": "string",
          "description": "The snippet of the document. The snippet of the document. May contain escaped HTML character that should be unescaped prior to rendering."
        }
      }
    },
    "GetCustomerQueryStatsResponse": {
      "id": "GetCustomerQueryStatsResponse",
      "properties": {
        "totalQueryCount": {
          "format": "int64",
          "type": "string",
          "description": "Total successful query count (status code 200) for the given date range."
        },
        "stats": {
          "type": "array",
          "items": {
            "$ref": "CustomerQueryStats"
          }
        }
      },
      "type": "object"
    },
    "DataSource": {
      "properties": {
        "disableServing": {
          "type": "boolean",
          "description": "Disable serving any search or assist results."
        },
        "operationIds": {
          "items": {
            "type": "string"
          },
          "description": "IDs of the Long Running Operations (LROs) currently running for this schema.",
          "type": "array"
        },
        "indexingServiceAccounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of service accounts that have indexing access."
        },
        "shortName": {
          "description": "A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *\u003cvalue\u003e* then queries like *source:\u003cvalue\u003e* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource."
        },
        "returnThumbnailUrls": {
          "description": "Can a user request to get thumbnail URI for Items indexed in this data source.",
          "type": "boolean"
        },
        "disableModifications": {
          "description": "If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data.",
          "type": "boolean"
        },
        "itemsVisibility": {
          "type": "array",
          "items": {
            "$ref": "GSuitePrincipal"
          },
          "description": "This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility."
        },
        "displayName": {
          "description": "Required. Display name of the datasource The maximum length is 300 characters.",
          "type": "string"
        }
      },
      "description": "Datasource is a logical namespace for items to be indexed. All items must belong to a datasource. This is the prerequisite before items can be indexed into Cloud Search. ",
      "id": "DataSource",
      "type": "object"
    },
    "HtmlPropertyOptions": {
      "properties": {
        "retrievalImportance": {
          "$ref": "RetrievalImportance",
          "description": "Indicates the search quality importance of the tokens within the field when used for retrieval. Can only be set to DEFAULT or NONE."
        },
        "operatorOptions": {
          "$ref": "HtmlOperatorOptions",
          "description": "If set, describes how the property should be used as a search operator."
        }
      },
      "description": "The options for html properties.",
      "type": "object",
      "id": "HtmlPropertyOptions"
    },
    "PushItemRequest": {
      "properties": {
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        },
        "item": {
          "$ref": "PushItem",
          "description": "Item to push onto the queue."
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "id": "PushItemRequest",
      "type": "object"
    },
    "EnterpriseTopazFrontendTeamsLink": {
      "id": "EnterpriseTopazFrontendTeamsLink",
      "properties": {
        "url": {
          "$ref": "SafeUrlProto"
        },
        "type": {
          "description": "The identifying link type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResultDebugInfo": {
      "description": "Debugging information about the result.",
      "type": "object",
      "properties": {
        "formattedDebugInfo": {
          "type": "string",
          "description": "General debug info formatted for display."
        }
      },
      "id": "ResultDebugInfo"
    },
    "ListQuerySourcesResponse": {
      "description": "List sources response.",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "QuerySource"
          }
        }
      },
      "type": "object",
      "id": "ListQuerySourcesResponse"
    },
    "TextValues": {
      "type": "object",
      "description": "List of text values.",
      "id": "TextValues",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The maximum allowable length for text values is 2048 characters."
        }
      }
    },
    "GetSearchApplicationQueryStatsResponse": {
      "properties": {
        "stats": {
          "type": "array",
          "description": "Query stats per date for a search application.",
          "items": {
            "$ref": "SearchApplicationQueryStats"
          }
        },
        "totalQueryCount": {
          "type": "string",
          "description": "Total successful query count (status code 200) for the given date range.",
          "format": "int64"
        }
      },
      "description": "Response format for getting query stats for a search application between given dates.",
      "type": "object",
      "id": "GetSearchApplicationQueryStatsResponse"
    },
    "ResultDisplayLine": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "ResultDisplayField"
          }
        }
      },
      "id": "ResultDisplayLine",
      "description": "The collection of fields that make up a displayed line"
    },
    "PersonCore": {
      "id": "PersonCore",
      "type": "object",
      "description": "Information for rendering a person. NEXT ID: 37",
      "properties": {
        "name": {
          "type": "string",
          "description": "Human-readable Unicode display name."
        },
        "adminTo": {
          "description": "People the profile owner is an admin to. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.",
          "items": {
            "$ref": "PersonCore"
          },
          "type": "array"
        },
        "emails": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "E-mail addresses of the person. The primary or preferred email should be first."
        },
        "availabilityStatus": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "OUT_OF_OFFICE",
            "OUTSIDE_WORKING_HOURS",
            "AVAILABLE"
          ]
        },
        "calendarUrl": {
          "description": "The URL to open the profile owner's primary calendar.",
          "$ref": "SafeUrlProto"
        },
        "totalDlrCount": {
          "type": "integer",
          "description": "Total count of the profile owner's dotted-line reports.",
          "format": "int32"
        },
        "dottedLineReports": {
          "items": {
            "$ref": "PersonCore"
          },
          "description": "A subset of the profile owner's dotted-line reports. The number of entities here may be less than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.",
          "type": "array"
        },
        "links": {
          "items": {
            "$ref": "EnterpriseTopazFrontendTeamsLink"
          },
          "description": "Custom links the profile owner has added.",
          "type": "array"
        },
        "chatUrl": {
          "description": "The URL to start a chat conversation with the profile owner. For google.com this is a Hangouts URL.",
          "$ref": "SafeUrlProto"
        },
        "officeLocation": {
          "description": "Office/building identifier within the company. For google.com this is the office code (e.g. \"DE-MUC-ARP\").",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Detailed desk location within the company. For google.com this is the desk location code (e.g. \"DE-MUC-ARP-6T2-6T2C0C\") if the person has a desk."
        },
        "costCenter": {
          "description": "Person's cost center as a string, e.g. \"926: Googler Apps\".",
          "type": "string"
        },
        "postalAddress": {
          "description": "Postal address of office/building.",
          "type": "string"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "EnterpriseTopazFrontendTeamsPersonCorePhoneNumber"
          },
          "type": "array"
        },
        "birthday": {
          "$ref": "Date",
          "description": "Person birthday."
        },
        "keywords": {
          "description": "Custom keywords the domain admin has added.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "gmailUrl": {
          "type": "string"
        },
        "photoUrl": {
          "description": "Person photo.",
          "$ref": "SafeUrlProto"
        },
        "department": {
          "description": "The person's Organization department, e.g. \"People Operations\". For google.com this is usually called \"area\".",
          "type": "string"
        },
        "ftePermille": {
          "description": "Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).",
          "type": "string",
          "format": "int64"
        },
        "username": {
          "description": "External ID of type \"login_id\" for the profile. For google.com this is the username/LDAP.",
          "type": "string"
        },
        "jobTitle": {
          "description": "Profile owner's job title (e.g. \"Software Engineer\"). For google.com this is the Workday preferred job title.",
          "type": "string"
        },
        "personId": {
          "type": "string",
          "description": "The person's obfuscated Gaia ID."
        },
        "addressMeAs": {
          "description": "Instructions for how to address this person (e.g. custom pronouns). For google.com this is a set of pronouns from a defined list of options.",
          "type": "string"
        },
        "employeeId": {
          "type": "string",
          "description": "Person's employee number (external ID of type \"organization\") For google.com this is the badge number (e.g. 2 for Larry Page)."
        },
        "totalFteCount": {
          "type": "string",
          "format": "int64",
          "description": "The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if one report is working 80% and profile owner 100%)."
        },
        "admins": {
          "items": {
            "$ref": "PersonCore"
          },
          "type": "array",
          "description": "The profile owner's admins in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty."
        },
        "directReports": {
          "items": {
            "$ref": "PersonCore"
          },
          "type": "array",
          "description": "A subset of the profile owner's direct reports. The number of entities here may be less than total_direct_reports_count, because typically ProfileResponse does not include all the person's reports, if there are too many to retrieve efficiently. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty."
        },
        "fingerprint": {
          "description": "A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is used as part of the etag.",
          "type": "string"
        },
        "waldoComeBackTime": {
          "type": "string",
          "format": "google-datetime"
        },
        "managers": {
          "description": "The profile owner's management chain from top to bottom, where managers[0] is the CEO, manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct manager. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.",
          "type": "array",
          "items": {
            "$ref": "PersonCore"
          }
        },
        "totalDirectReportsCount": {
          "type": "integer",
          "description": "Total count of the profile owner's direct reports.",
          "format": "int32"
        },
        "geoLocation": {
          "$ref": "MapInfo"
        },
        "keywordTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of keys to use from the map 'keywords'."
        },
        "dottedLineManagers": {
          "description": "The profile owner's direct dotted line managers in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.",
          "items": {
            "$ref": "PersonCore"
          },
          "type": "array"
        },
        "mission": {
          "description": "Custom mission statement the profile owner has added.",
          "type": "string"
        }
      }
    },
    "QueryActivity": {
      "properties": {
        "query": {
          "type": "string",
          "description": "User input query to be logged/removed."
        }
      },
      "type": "object",
      "description": "Details about a user's query activity.",
      "id": "QueryActivity"
    },
    "IndexItemRequest": {
      "id": "IndexItemRequest",
      "properties": {
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        },
        "indexItemOptions": {
          "$ref": "IndexItemOptions"
        },
        "mode": {
          "enum": [
            "UNSPECIFIED",
            "SYNCHRONOUS",
            "ASYNCHRONOUS"
          ],
          "type": "string",
          "description": "Required. The RequestMode for this request.",
          "enumDescriptions": [
            "The priority is not specified in the update request. Leaving priority unspecified results in an update failure.",
            "For real-time updates.",
            "For changes that are executed after the response is sent back to the caller."
          ]
        },
        "item": {
          "$ref": "Item",
          "description": "The name of the item. Format: datasources/{source_id}/items/{item_id}"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "type": "object"
    },
    "EnterpriseTopazSidekickAnswerAnswerList": {
      "properties": {
        "labeledAnswer": {
          "description": "Answers that have a corresponding label.",
          "items": {
            "$ref": "EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer"
          },
          "type": "array"
        },
        "type": {
          "description": "Answer type.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "PERSON_ADDRESS",
            "PERSON_BIRTHDAY",
            "PERSON_DEPARTMENT",
            "PERSON_DESK_LOCATION",
            "PERSON_EMAIL",
            "PERSON_JOB_TITLE",
            "PERSON_PHONE"
          ]
        }
      },
      "id": "EnterpriseTopazSidekickAnswerAnswerList",
      "description": "A list of answers represented as free text.",
      "type": "object"
    },
    "DoubleOperatorOptions": {
      "id": "DoubleOperatorOptions",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to use the double property in sorting or as a facet. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      },
      "type": "object",
      "description": "Used to provide a search operator for double properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "EnterpriseTopazSidekickAgendaEntry": {
      "type": "object",
      "description": "An AgendaEntry, e.g., a Calendar Event.",
      "id": "EnterpriseTopazSidekickAgendaEntry",
      "properties": {
        "showFullEventDetailsToUse": {
          "type": "boolean",
          "description": "Whether the details of this entry should be displayed to the user."
        },
        "lastModificationTimeMs": {
          "format": "int64",
          "description": "Last time the event was modified.",
          "type": "string"
        },
        "guestsCanSeeGuests": {
          "type": "boolean",
          "description": "Whether the guests of the event can be seen. If false, the user is going to be reported as the only attendee to the meeting, even though there may be more attendees."
        },
        "guestsCanInviteOthers": {
          "type": "boolean",
          "description": "Whether the guests can invite other guests."
        },
        "requesterIsOwner": {
          "type": "boolean",
          "description": "Whether the requester is the owner of the agenda entry."
        },
        "agendaItemUrl": {
          "type": "string",
          "description": "URL of the agenda item."
        },
        "hangoutId": {
          "description": "Hangout meeting identifier.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Agenda item location."
        },
        "chronology": {
          "enum": [
            "STALE",
            "ALL_DAY",
            "PAST",
            "RECENTLY_PAST",
            "PRESENT",
            "NEAR_FUTURE",
            "FUTURE"
          ],
          "enumDescriptions": [
            "Stale.",
            "All day.",
            "Past.",
            "Recently past.",
            "Present.",
            "Near future.",
            "Future."
          ],
          "description": "The chronology from the present.",
          "type": "string"
        },
        "guestsCanModify": {
          "description": "Whether the guests can modify the event.",
          "type": "boolean"
        },
        "document": {
          "description": "Items related to the current AgendaEntry. E.g., related drive/mail/groups documents.",
          "items": {
            "$ref": "EnterpriseTopazSidekickCommonDocument"
          },
          "type": "array"
        },
        "hangoutUrl": {
          "type": "string",
          "description": "Absolute URL for the Hangout meeting."
        },
        "endTime": {
          "description": "End time (HH:mm) in the user's timezone.",
          "type": "string"
        },
        "currentUserAttendingStatus": {
          "enumDescriptions": [
            "Awaiting for the user to set the status.",
            "Attending.",
            "Not attending.",
            "Tentatively attending."
          ],
          "description": "Attendance status for the current user making the request. This is a convenience data member in order to avoid figuring out the same by iterating the invitee list above on the caller side.",
          "type": "string",
          "enum": [
            "AWAITING",
            "YES",
            "NO",
            "MAYBE"
          ]
        },
        "endTimeMs": {
          "description": "End time in milliseconds",
          "type": "string",
          "format": "int64"
        },
        "notifyToUser": {
          "description": "Whether this should be notified to the user.",
          "type": "boolean"
        },
        "timeZone": {
          "description": "User's calendar timezone;",
          "type": "string"
        },
        "isAllDay": {
          "type": "boolean",
          "description": "Whether the entry lasts all day."
        },
        "startTime": {
          "type": "string",
          "description": "Start time (HH:mm) in the user's timezone."
        },
        "title": {
          "description": "Title of the agenda item.",
          "type": "string"
        },
        "startDate": {
          "description": "Start date \"Friday, August 26\" in the user's timezone.",
          "type": "string"
        },
        "startTimeMs": {
          "type": "string",
          "format": "int64",
          "description": "Start time in milliseconds."
        },
        "eventId": {
          "description": "Event id provided by Calendar API.",
          "type": "string"
        },
        "invitee": {
          "description": "People attending the meeting.",
          "type": "array",
          "items": {
            "$ref": "EnterpriseTopazSidekickPerson"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the agenda item (i.e., typically, summary in calendar event)."
        },
        "endDate": {
          "type": "string",
          "description": "End date \"Friday, August 26\" in the user's timezone."
        },
        "creator": {
          "$ref": "EnterpriseTopazSidekickPerson",
          "description": "Person who created the event."
        },
        "otherAttendeesExcluded": {
          "description": "Whether guest list is not returned because number of attendees is too large.",
          "type": "boolean"
        }
      }
    },
    "ErrorInfo": {
      "description": "Error information about the response.",
      "type": "object",
      "properties": {
        "errorMessages": {
          "items": {
            "$ref": "ErrorMessage"
          },
          "type": "array"
        }
      },
      "id": "ErrorInfo"
    },
    "Content": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "description": "[Optional] Actions for this card.",
          "items": {
            "$ref": "Action"
          }
        },
        "title": {
          "$ref": "BackgroundColoredText",
          "description": "[Optional] Title of the card."
        },
        "subtitle": {
          "$ref": "BackgroundColoredText",
          "description": "[Optional] Subtitle of the card."
        },
        "description": {
          "$ref": "SafeHtmlProto",
          "description": "[Optional] Description of the card."
        }
      },
      "id": "Content"
    },
    "RemoveActivityRequest": {
      "type": "object",
      "description": "Remove Logged Activity Request.",
      "properties": {
        "userActivity": {
          "description": "User Activity containing the data to be deleted.",
          "$ref": "UserActivity"
        },
        "requestOptions": {
          "$ref": "RequestOptions",
          "description": "Request options, such as the search application and clientId."
        }
      },
      "id": "RemoveActivityRequest"
    },
    "QueryInterpretationConfig": {
      "id": "QueryInterpretationConfig",
      "properties": {
        "forceDisableSupplementalResults": {
          "description": "Set this flag to disable supplemental results retrieval, setting a flag here will not retrieve supplemental results for queries associated with a given search application. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for supplemental results.",
          "type": "boolean"
        },
        "forceVerbatimMode": {
          "type": "boolean",
          "description": "Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental results retrieval, and usage of synonyms including custom ones. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for verbatim mode."
        }
      },
      "type": "object",
      "description": "Default options to interpret user query."
    },
    "Metaline": {
      "type": "object",
      "description": "A metaline is a list of properties that are displayed along with the search result to provide context.",
      "properties": {
        "properties": {
          "items": {
            "$ref": "DisplayedProperty"
          },
          "description": "The list of displayed properties for the metaline. The maximum number of properties is 5.",
          "type": "array"
        }
      },
      "id": "Metaline"
    },
    "DriveMimeTypeRestrict": {
      "type": "object",
      "id": "DriveMimeTypeRestrict",
      "properties": {
        "type": {
          "enum": [
            "UNSPECIFIED",
            "PDF",
            "DOCUMENT",
            "PRESENTATION",
            "SPREADSHEET",
            "FORM",
            "DRAWING",
            "SCRIPT",
            "MAP",
            "IMAGE",
            "AUDIO",
            "VIDEO",
            "FOLDER",
            "ARCHIVE",
            "SITE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "description": "Drive mime-type search restricts (e.g. \"type:pdf\")."
    },
    "BooleanPropertyOptions": {
      "type": "object",
      "id": "BooleanPropertyOptions",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the boolean should be used as a search operator.",
          "$ref": "BooleanOperatorOptions"
        }
      },
      "description": "The options for boolean properties."
    },
    "DebugOptions": {
      "description": "Shared request debug options for all cloudsearch RPC methods.",
      "type": "object",
      "id": "DebugOptions",
      "properties": {
        "enableDebugging": {
          "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
          "type": "boolean"
        }
      }
    },
    "Value": {
      "id": "Value",
      "properties": {
        "doubleValue": {
          "type": "number",
          "format": "double"
        },
        "integerValue": {
          "format": "int64",
          "type": "string"
        },
        "dateValue": {
          "$ref": "Date"
        },
        "stringValue": {
          "type": "string"
        },
        "booleanValue": {
          "type": "boolean"
        },
        "timestampValue": {
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "Definition of a single value with generic type.",
      "type": "object"
    },
    "SearchResponse": {
      "id": "SearchResponse",
      "properties": {
        "spellResults": {
          "type": "array",
          "items": {
            "$ref": "SpellResult"
          },
          "description": "Suggested spelling for the query."
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "SearchResult"
          },
          "description": "Results from a search query."
        },
        "resultCountExact": {
          "type": "string",
          "description": "The exact result count for this query.",
          "format": "int64"
        },
        "queryInterpretation": {
          "description": "Query interpretation result for user query. Empty if query interpretation is disabled.",
          "$ref": "QueryInterpretation"
        },
        "hasMoreResults": {
          "type": "boolean",
          "description": "Whether there are more search results matching the query."
        },
        "resultCounts": {
          "description": "Expanded result count information.",
          "$ref": "ResultCounts"
        },
        "facetResults": {
          "description": "Repeated facet results.",
          "type": "array",
          "items": {
            "$ref": "FacetResult"
          }
        },
        "errorInfo": {
          "$ref": "ErrorInfo",
          "description": "Error information about the response."
        },
        "resultCountEstimate": {
          "format": "int64",
          "description": "The estimated result count for this query.",
          "type": "string"
        },
        "debugInfo": {
          "$ref": "ResponseDebugInfo",
          "description": "Debugging information about the response."
        },
        "structuredResults": {
          "items": {
            "$ref": "StructuredResult"
          },
          "description": "Structured results for the user query. These results are not counted against the page_size.",
          "type": "array"
        }
      },
      "description": "The search API response.",
      "type": "object"
    },
    "ListItemNamesForUnmappedIdentityResponse": {
      "type": "object",
      "id": "ListItemNamesForUnmappedIdentityResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "itemNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EnterpriseTopazSidekickCardMetadata": {
      "id": "EnterpriseTopazSidekickCardMetadata",
      "properties": {
        "nlpMetadata": {
          "description": "Information about the NLP done to get the card.",
          "$ref": "EnterpriseTopazSidekickNlpMetadata"
        },
        "cardId": {
          "type": "string",
          "description": "An ID to identify the card and match actions to it. Be thoughtful of new card IDs since actions will be associated to that ID. E.g., if two card IDs collide, the system will think that the actions have been applied to the same card. Similarly, if EAS can return multiple cards of the same type (e.g., Meetings), ensure that the card_id identifies a given instance of the card so that, e.g., dismissals only affect the dismissed card as opposed to affecting all meeting cards."
        },
        "cardCategory": {
          "enum": [
            "DEFAULT",
            "ANSWER",
            "KNOWLEDGE",
            "HOMEPAGE"
          ],
          "enumDescriptions": [
            "Let MSCR decide how this card should be packed. Most cards should choose this type. This type should largely be considered equivalent to ANSWER. However, this is not guaranteed to be the case as the request to MSCR may override the static configuration.",
            "This card should be rendered as an answer card.",
            "This card should be rendered as a knowledge card (a non-organic result).",
            "This card should be rendered in the Homepage."
          ],
          "type": "string",
          "description": "Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped."
        },
        "renderMode": {
          "enumDescriptions": [
            "Unknown mode (default).",
            "Collapsed.",
            "Expanded."
          ],
          "enum": [
            "UNKNOWN_RENDER",
            "COLLAPSED",
            "EXPANDED"
          ],
          "description": "Render mode.",
          "type": "string"
        },
        "rankingParams": {
          "$ref": "EnterpriseTopazSidekickRankingParams",
          "description": "Ranking params."
        },
        "chronology": {
          "enum": [
            "UNKNOWN",
            "PAST",
            "RECENTLY_PAST",
            "PRESENT",
            "NEAR_FUTURE",
            "FUTURE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown chronology (default).",
            "Past.",
            "Recently past.",
            "Present.",
            "Near future.",
            "Future."
          ],
          "description": "Chronology."
        },
        "debugInfo": {
          "type": "string",
          "description": "Debug info (only reported if request's debug_level \u003e 0)."
        }
      },
      "type": "object",
      "description": "Card metadata."
    },
    "EnterpriseTopazSidekickAnswerSuggestedQueryCategory": {
      "properties": {
        "category": {
          "description": "The query list category.",
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Calendar based queries (e.g. \"my agenda for tomorrow\").",
            "Document based queries (e.g. \"files shared with me\").",
            "People based queries (e.g. \"what is x's email address?\")."
          ],
          "enum": [
            "UNKNOWN",
            "CALENDAR",
            "DOCUMENT",
            "PEOPLE"
          ]
        },
        "query": {
          "description": "List of suggested queries to show the user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Whether this category is enabled."
        }
      },
      "description": "Contains a list of suggested queries for a single category.",
      "id": "EnterpriseTopazSidekickAnswerSuggestedQueryCategory",
      "type": "object"
    },
    "HtmlValues": {
      "type": "object",
      "id": "HtmlValues",
      "description": "List of html values.",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The maximum allowable length for html values is 2048 characters."
        }
      }
    },
    "BooleanOperatorOptions": {
      "properties": {
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the boolean property. For example, if operatorName is *closed* and the property's name is *isClosed*, then queries like *closed:\u003cvalue\u003e* show results only where the value of the property named *isClosed* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "description": "Used to provide a search operator for boolean properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "id": "BooleanOperatorOptions",
      "type": "object"
    },
    "GetCustomerUserStatsResponse": {
      "id": "GetCustomerUserStatsResponse",
      "type": "object",
      "properties": {
        "stats": {
          "items": {
            "$ref": "CustomerUserStats"
          },
          "type": "array"
        }
      }
    },
    "ListDataSourceResponse": {
      "type": "object",
      "properties": {
        "sources": {
          "type": "array",
          "items": {
            "$ref": "DataSource"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "id": "ListDataSourceResponse"
    },
    "StartUploadItemRequest": {
      "type": "object",
      "description": "Start upload file request.",
      "id": "StartUploadItemRequest",
      "properties": {
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        }
      }
    },
    "ObjectOptions": {
      "description": "The options for an object.",
      "id": "ObjectOptions",
      "type": "object",
      "properties": {
        "suggestionFilteringOperators": {
          "type": "array",
          "description": "Operators that can be used to filter suggestions. For Suggest API, only operators mentioned here will be honored in the FilterOptions. Only TEXT and ENUM operators are supported. NOTE: \"objecttype\", \"type\" and \"mimetype\" are already supported. This property is to configure schema specific operators. Even though this is an array, only one operator can be specified. This is an array for future extensibility. Operators mapping to multiple properties within the same object are not supported. If the operator spans across different object types, this option has to be set once for each object definition.",
          "items": {
            "type": "string"
          }
        },
        "displayOptions": {
          "description": "The options that determine how the object is displayed in the Cloud Search results page.",
          "$ref": "ObjectDisplayOptions"
        },
        "freshnessOptions": {
          "$ref": "FreshnessOptions",
          "description": "The freshness options for an object."
        }
      }
    },
    "SourceConfig": {
      "description": "Configurations for a source while processing a Search or Suggest request.",
      "id": "SourceConfig",
      "properties": {
        "source": {
          "$ref": "Source",
          "description": "The source for which this configuration is to be used."
        },
        "crowdingConfig": {
          "description": "The crowding configuration for the source.",
          "$ref": "SourceCrowdingConfig"
        },
        "scoringConfig": {
          "$ref": "SourceScoringConfig",
          "description": "The scoring configuration for the source."
        }
      },
      "type": "object"
    },
    "ErrorMessage": {
      "properties": {
        "source": {
          "$ref": "Source"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "Error message per source response.",
      "id": "ErrorMessage"
    },
    "Schema": {
      "description": "The schema definition for a data source.",
      "properties": {
        "objectDefinitions": {
          "items": {
            "$ref": "ObjectDefinition"
          },
          "type": "array",
          "description": "The list of top-level objects for the data source. The maximum number of elements is 10."
        },
        "operationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IDs of the Long Running Operations (LROs) currently running for this schema. After modifying the schema, wait for operations to complete before indexing additional content."
        }
      },
      "id": "Schema",
      "type": "object"
    },
    "Operation": {
      "type": "object",
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        },
        "response": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        }
      }
    },
    "StructuredResult": {
      "id": "StructuredResult",
      "type": "object",
      "properties": {
        "person": {
          "description": "Representation of a person",
          "$ref": "Person"
        }
      },
      "description": "Structured results that are returned as part of search request."
    },
    "SuggestRequest": {
      "id": "SuggestRequest",
      "type": "object",
      "description": "Request of suggest API.",
      "properties": {
        "dataSourceRestrictions": {
          "items": {
            "$ref": "DataSourceRestriction"
          },
          "description": "The sources to use for suggestions. If not specified, the data sources are taken from the current search application. NOTE: Suggestions are only supported for the following sources: * Third-party data sources * PredefinedSource.PERSON * PredefinedSource.GOOGLE_DRIVE",
          "type": "array"
        },
        "requestOptions": {
          "$ref": "RequestOptions",
          "description": "Request options, such as the search application and user timezone."
        },
        "query": {
          "type": "string",
          "description": "Partial query for which autocomplete suggestions will be shown. For example, if the query is \"sea\", then the server might return \"season\", \"search\", \"seagull\" and so on."
        }
      }
    },
    "BackgroundColoredText": {
      "id": "BackgroundColoredText",
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "[Required] The text to display."
        },
        "backgroundColor": {
          "type": "string",
          "enum": [
            "UNKNOWN_COLOR",
            "WHITE",
            "YELLOW",
            "ORANGE",
            "GREEN",
            "BLUE",
            "GREY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "description": "[Optional] Color of the background. The text color can change depending on the selected background color, and the client does not have control over this. If missing, the background will be WHITE."
        }
      }
    },
    "ListOperationsResponse": {
      "type": "object",
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        }
      }
    },
    "ContextAttribute": {
      "id": "ContextAttribute",
      "description": "A named attribute associated with an item which can be used for influencing the ranking of the item based on the context in the request.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the attribute. It should not be empty. The maximum length is 32 characters. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The name will be normalized (lower-cased) before being matched."
        },
        "values": {
          "items": {
            "type": "string"
          },
          "description": "Text values of the attribute. The maximum number of elements is 10. The maximum length of an element in the array is 32 characters. The value will be normalized (lower-cased) before being matched.",
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "rootUrl": "https://cloudsearch.googleapis.com/",
  "description": "Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud_search.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.stats.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.settings.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.query": {
          "description": "Search your organization's data in the Cloud Search index"
        },
        "https://www.googleapis.com/auth/cloud_search.settings.query": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.debug": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.stats": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.settings": {
          "description": "Index and serve your organization's data with Cloud Search"
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "name": "cloudsearch",
  "mtlsRootUrl": "https://cloudsearch.mtls.googleapis.com/",
  "ownerName": "Google",
  "basePath": "",
  "batchPath": "batch",
  "resources": {
    "v1": {
      "methods": {
        "initializeCustomer": {
          "httpMethod": "POST",
          "parameters": {},
          "flatPath": "v1:initializeCustomer",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "parameterOrder": [],
          "response": {
            "$ref": "Operation"
          },
          "request": {
            "$ref": "InitializeCustomerRequest"
          },
          "description": "Enables `third party` support in Google Cloud Search. **Note:** This API requires an admin account to execute.",
          "path": "v1:initializeCustomer",
          "id": "cloudsearch.initializeCustomer"
        }
      }
    },
    "settings": {
      "methods": {
        "updateCustomer": {
          "description": "Update customer settings. **Note:** This API requires an admin account to execute.",
          "path": "v1/settings/customer",
          "parameters": {
            "updateMask": {
              "format": "google-fieldmask",
              "description": "Update mask to control which fields get updated. If you specify a field in the update_mask but don't specify its value here, that field will be cleared. If the mask is not present or empty, all fields will be updated. Currently supported field paths: vpc_settings and audit_logging_settings",
              "location": "query",
              "type": "string"
            }
          },
          "request": {
            "$ref": "CustomerSettings"
          },
          "response": {
            "$ref": "Operation"
          },
          "flatPath": "v1/settings/customer",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "id": "cloudsearch.settings.updateCustomer",
          "parameterOrder": [],
          "httpMethod": "PATCH"
        },
        "getCustomer": {
          "id": "cloudsearch.settings.getCustomer",
          "parameterOrder": [],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "path": "v1/settings/customer",
          "description": "Get customer settings. **Note:** This API requires an admin account to execute.",
          "flatPath": "v1/settings/customer",
          "response": {
            "$ref": "CustomerSettings"
          },
          "parameters": {}
        }
      },
      "resources": {
        "searchapplications": {
          "methods": {
            "update": {
              "description": "Updates a search application. **Note:** This API requires an admin account to execute.",
              "httpMethod": "PUT",
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "Only applies to [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch). Update mask to control which fields to update. Example field paths: `search_application.name`, `search_application.displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the `search_application`, then that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
                  "location": "path",
                  "required": true,
                  "pattern": "^searchapplications/[^/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "SearchApplication"
              },
              "path": "v1/settings/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "id": "cloudsearch.settings.searchapplications.update"
            },
            "list": {
              "description": "Lists all search applications. **Note:** This API requires an admin account to execute.",
              "id": "cloudsearch.settings.searchapplications.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "ListSearchApplicationsResponse"
              },
              "flatPath": "v1/settings/searchapplications",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean"
                },
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "location": "query",
                  "description": "The maximum number of items to return."
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous List request, if any. The default value is 10",
                  "type": "string",
                  "location": "query"
                }
              },
              "parameterOrder": [],
              "path": "v1/settings/searchapplications"
            },
            "delete": {
              "path": "v1/settings/{+name}",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^searchapplications/[^/]+$",
                  "required": true,
                  "description": "The name of the search application to be deleted. Format: applications/{application_id}.",
                  "type": "string"
                },
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                }
              },
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "description": "Deletes a search application. **Note:** This API requires an admin account to execute.",
              "id": "cloudsearch.settings.searchapplications.delete",
              "response": {
                "$ref": "Operation"
              },
              "httpMethod": "DELETE"
            },
            "reset": {
              "request": {
                "$ref": "ResetSearchApplicationRequest"
              },
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}:reset",
              "response": {
                "$ref": "Operation"
              },
              "httpMethod": "POST",
              "description": "Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "parameters": {
                "name": {
                  "pattern": "^searchapplications/[^/]+$",
                  "description": "The name of the search application to be reset. Format: applications/{application_id}.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "id": "cloudsearch.settings.searchapplications.reset",
              "path": "v1/settings/{+name}:reset"
            },
            "patch": {
              "request": {
                "$ref": "SearchApplication"
              },
              "path": "v1/settings/{+name}",
              "description": "Updates a search application. **Note:** This API requires an admin account to execute.",
              "httpMethod": "PATCH",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "Only applies to [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch). Update mask to control which fields to update. Example field paths: `search_application.name`, `search_application.displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the `search_application`, then that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "pattern": "^searchapplications/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "id": "cloudsearch.settings.searchapplications.patch",
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "response": {
                "$ref": "Operation"
              }
            },
            "create": {
              "parameters": {},
              "path": "v1/settings/searchapplications",
              "request": {
                "$ref": "SearchApplication"
              },
              "parameterOrder": [],
              "flatPath": "v1/settings/searchapplications",
              "id": "cloudsearch.settings.searchapplications.create",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "description": "Creates a search application. **Note:** This API requires an admin account to execute.",
              "response": {
                "$ref": "Operation"
              }
            },
            "get": {
              "path": "v1/settings/{+name}",
              "id": "cloudsearch.settings.searchapplications.get",
              "httpMethod": "GET",
              "description": "Gets the specified search application. **Note:** This API requires an admin account to execute.",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                },
                "name": {
                  "description": "The name of the search application. Format: searchapplications/{application_id}.",
                  "pattern": "^searchapplications/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "response": {
                "$ref": "SearchApplication"
              },
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}"
            }
          }
        },
        "datasources": {
          "methods": {
            "update": {
              "request": {
                "$ref": "UpdateDataSourceRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "pattern": "^datasources/[^/]+$",
                  "type": "string",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "httpMethod": "PUT",
              "path": "v1/settings/{+name}",
              "id": "cloudsearch.settings.datasources.update",
              "description": "Updates a datasource. **Note:** This API requires an admin account to execute.",
              "response": {
                "$ref": "Operation"
              }
            },
            "create": {
              "path": "v1/settings/datasources",
              "httpMethod": "POST",
              "description": "Creates a datasource. **Note:** This API requires an admin account to execute.",
              "parameterOrder": [],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudsearch.settings.datasources.create",
              "request": {
                "$ref": "DataSource"
              },
              "flatPath": "v1/settings/datasources",
              "parameters": {}
            },
            "delete": {
              "response": {
                "$ref": "Operation"
              },
              "description": "Deletes a datasource. **Note:** This API requires an admin account to execute.",
              "path": "v1/settings/{+name}",
              "id": "cloudsearch.settings.datasources.delete",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean",
                  "location": "query"
                },
                "name": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The name of the datasource. Format: datasources/{source_id}.",
                  "pattern": "^datasources/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ]
            },
            "list": {
              "httpMethod": "GET",
              "response": {
                "$ref": "ListDataSourceResponse"
              },
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query",
                  "type": "boolean"
                },
                "pageSize": {
                  "location": "query",
                  "description": "Maximum number of datasources to fetch in a request. The max value is 1000. The default value is 1000.",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "Starting index of the results.",
                  "location": "query"
                }
              },
              "path": "v1/settings/datasources",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "flatPath": "v1/settings/datasources",
              "id": "cloudsearch.settings.datasources.list",
              "description": "Lists datasources. **Note:** This API requires an admin account to execute.",
              "parameterOrder": []
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query",
                  "type": "boolean"
                },
                "name": {
                  "description": "The name of the datasource resource. Format: datasources/{source_id}.",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "pattern": "^datasources/[^/]+$"
                }
              },
              "id": "cloudsearch.settings.datasources.get",
              "path": "v1/settings/{+name}",
              "response": {
                "$ref": "DataSource"
              },
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "description": "Gets a datasource. **Note:** This API requires an admin account to execute.",
              "httpMethod": "GET"
            },
            "patch": {
              "id": "cloudsearch.settings.datasources.patch",
              "parameterOrder": [
                "name"
              ],
              "description": "Updates a datasource. **Note:** This API requires an admin account to execute.",
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "location": "query",
                  "description": "Only applies to [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch). Update mask to control which fields to update. Example field paths: `name`, `displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the source, that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
                  "type": "string"
                },
                "name": {
                  "pattern": "^datasources/[^/]+$",
                  "type": "string",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.",
                  "location": "path",
                  "required": true
                },
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "path": "v1/settings/{+name}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "DataSource"
              }
            }
          }
        }
      }
    },
    "stats": {
      "methods": {
        "getUser": {
          "parameterOrder": [],
          "path": "v1/stats/user",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "response": {
            "$ref": "GetCustomerUserStatsResponse"
          },
          "description": "Get the users statistics for customer. **Note:** This API requires a standard end user account to execute.",
          "parameters": {
            "toDate.month": {
              "format": "int32",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "type": "integer"
            },
            "toDate.year": {
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer",
              "format": "int32"
            },
            "fromDate.year": {
              "type": "integer",
              "description": "Year of date. Must be from 1 to 9999.",
              "location": "query",
              "format": "int32"
            },
            "fromDate.day": {
              "format": "int32",
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer"
            },
            "toDate.day": {
              "location": "query",
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32"
            },
            "fromDate.month": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12."
            }
          },
          "flatPath": "v1/stats/user",
          "id": "cloudsearch.stats.getUser"
        },
        "getSession": {
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "flatPath": "v1/stats/session",
          "response": {
            "$ref": "GetCustomerSessionStatsResponse"
          },
          "httpMethod": "GET",
          "description": "Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute.",
          "parameters": {
            "toDate.day": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
            },
            "fromDate.year": {
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "toDate.month": {
              "type": "integer",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32"
            },
            "toDate.year": {
              "type": "integer",
              "location": "query",
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "fromDate.month": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12."
            },
            "fromDate.day": {
              "location": "query",
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32"
            }
          },
          "path": "v1/stats/session",
          "id": "cloudsearch.stats.getSession"
        },
        "getQuery": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "path": "v1/stats/query",
          "id": "cloudsearch.stats.getQuery",
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {
            "fromDate.month": {
              "format": "int32",
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query"
            },
            "toDate.day": {
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "toDate.month": {
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32",
              "type": "integer"
            },
            "toDate.year": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "fromDate.year": {
              "type": "integer",
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999.",
              "location": "query"
            },
            "fromDate.day": {
              "type": "integer",
              "format": "int32",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "GetCustomerQueryStatsResponse"
          },
          "description": "Get the query statistics for customer. **Note:** This API requires a standard end user account to execute.",
          "flatPath": "v1/stats/query"
        },
        "getIndex": {
          "parameters": {
            "toDate.day": {
              "format": "int32",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "location": "query",
              "type": "integer"
            },
            "fromDate.year": {
              "format": "int32",
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer"
            },
            "toDate.month": {
              "type": "integer",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32"
            },
            "fromDate.month": {
              "type": "integer",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32"
            },
            "fromDate.day": {
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "toDate.year": {
              "description": "Year of date. Must be from 1 to 9999.",
              "format": "int32",
              "location": "query",
              "type": "integer"
            }
          },
          "path": "v1/stats/index",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "flatPath": "v1/stats/index",
          "parameterOrder": [],
          "description": "Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute.",
          "id": "cloudsearch.stats.getIndex",
          "httpMethod": "GET",
          "response": {
            "$ref": "GetCustomerIndexStatsResponse"
          }
        },
        "getSearchapplication": {
          "parameterOrder": [],
          "id": "cloudsearch.stats.getSearchapplication",
          "path": "v1/stats/searchapplication",
          "response": {
            "$ref": "GetCustomerSearchApplicationStatsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "description": "Get search application stats for customer. **Note:** This API requires a standard end user account to execute.",
          "parameters": {
            "startDate.month": {
              "description": "Month of date. Must be from 1 to 12.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "startDate.day": {
              "format": "int32",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "location": "query",
              "type": "integer"
            },
            "endDate.year": {
              "location": "query",
              "type": "integer",
              "description": "Year of date. Must be from 1 to 9999.",
              "format": "int32"
            },
            "startDate.year": {
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "endDate.month": {
              "format": "int32",
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query"
            },
            "endDate.day": {
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "flatPath": "v1/stats/searchapplication"
        }
      },
      "resources": {
        "index": {
          "resources": {
            "datasources": {
              "methods": {
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "parameters": {
                    "fromDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "fromDate.day": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query"
                    },
                    "toDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    },
                    "fromDate.month": {
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The resource id of the data source to retrieve statistics for, in the following format: \"datasources/{source_id}\"",
                      "pattern": "^datasources/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true
                    },
                    "toDate.day": {
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "toDate.month": {
                      "location": "query",
                      "format": "int32",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.stats.index.datasources.get",
                  "description": "Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute.",
                  "flatPath": "v1/stats/index/datasources/{datasourcesId}",
                  "response": {
                    "$ref": "GetDataSourceIndexStatsResponse"
                  },
                  "path": "v1/stats/index/{+name}",
                  "httpMethod": "GET"
                }
              }
            }
          }
        },
        "query": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "id": "cloudsearch.stats.query.searchapplications.get",
                  "httpMethod": "GET",
                  "path": "v1/stats/query/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "parameters": {
                    "toDate.day": {
                      "format": "int32",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query",
                      "type": "integer"
                    },
                    "toDate.year": {
                      "format": "int32",
                      "location": "query",
                      "type": "integer",
                      "description": "Year of date. Must be from 1 to 9999."
                    },
                    "toDate.month": {
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "fromDate.month": {
                      "location": "query",
                      "format": "int32",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer"
                    },
                    "fromDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "name": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^searchapplications/[^/]+$",
                      "description": "The resource id of the search application query stats, in the following format: searchapplications/{application_id}"
                    },
                    "fromDate.day": {
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Get the query statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "flatPath": "v1/stats/query/searchapplications/{searchapplicationsId}",
                  "response": {
                    "$ref": "GetSearchApplicationQueryStatsResponse"
                  }
                }
              }
            }
          }
        },
        "session": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "description": "Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "id": "cloudsearch.stats.session.searchapplications.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/stats/session/{+name}",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "response": {
                    "$ref": "GetSearchApplicationSessionStatsResponse"
                  },
                  "flatPath": "v1/stats/session/searchapplications/{searchapplicationsId}",
                  "parameters": {
                    "fromDate.month": {
                      "type": "integer",
                      "description": "Month of date. Must be from 1 to 12.",
                      "format": "int32",
                      "location": "query"
                    },
                    "fromDate.day": {
                      "format": "int32",
                      "type": "integer",
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
                    },
                    "name": {
                      "type": "string",
                      "description": "The resource id of the search application session stats, in the following format: searchapplications/{application_id}",
                      "pattern": "^searchapplications/[^/]+$",
                      "required": true,
                      "location": "path"
                    },
                    "toDate.day": {
                      "type": "integer",
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "format": "int32"
                    },
                    "fromDate.year": {
                      "location": "query",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "toDate.month": {
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "toDate.year": {
                      "location": "query",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "user": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "description": "Get the users statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.stats.user.searchapplications.get",
                  "response": {
                    "$ref": "GetSearchApplicationUserStatsResponse"
                  },
                  "parameters": {
                    "fromDate.day": {
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "toDate.day": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query"
                    },
                    "fromDate.year": {
                      "format": "int32",
                      "location": "query",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "type": "integer"
                    },
                    "toDate.year": {
                      "format": "int32",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "location": "query",
                      "type": "integer"
                    },
                    "toDate.month": {
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "fromDate.month": {
                      "format": "int32",
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer"
                    },
                    "name": {
                      "pattern": "^searchapplications/[^/]+$",
                      "type": "string",
                      "description": "The resource id of the search application session stats, in the following format: searchapplications/{application_id}",
                      "location": "path",
                      "required": true
                    }
                  },
                  "flatPath": "v1/stats/user/searchapplications/{searchapplicationsId}",
                  "path": "v1/stats/user/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "media": {
      "methods": {
        "upload": {
          "parameterOrder": [
            "resourceName"
          ],
          "supportsMediaUpload": true,
          "id": "cloudsearch.media.upload",
          "mediaUpload": {
            "accept": [
              "*/*"
            ],
            "protocols": {
              "simple": {
                "path": "/upload/v1/media/{+resourceName}",
                "multipart": true
              }
            }
          },
          "response": {
            "$ref": "Media"
          },
          "path": "v1/media/{+resourceName}",
          "httpMethod": "POST",
          "request": {
            "$ref": "Media"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.indexing"
          ],
          "flatPath": "v1/media/{mediaId}",
          "description": "Uploads media for indexing. The upload endpoint supports direct and resumable upload protocols and is intended for large items that can not be [inlined during index requests](https://developers.google.com/cloud-search/docs/reference/rest/v1/indexing.datasources.items#itemcontent). To index large content: 1. Call indexing.datasources.items.upload with the item name to begin an upload session and retrieve the UploadItemRef. 1. Call media.upload to upload the content, as a streaming request, using the same resource name from the UploadItemRef from step 1. 1. Call indexing.datasources.items.index to index the item. Populate the [ItemContent](/cloud-search/docs/reference/rest/v1/indexing.datasources.items#ItemContent) with the UploadItemRef from step 1. For additional information, see [Create a content connector using the REST API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest). **Note:** This API requires a service account to execute.",
          "parameters": {
            "resourceName": {
              "required": true,
              "pattern": "^.*$",
              "type": "string",
              "location": "path",
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name."
            }
          }
        }
      }
    },
    "indexing": {
      "resources": {
        "datasources": {
          "resources": {
            "items": {
              "methods": {
                "index": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:index",
                  "parameters": {
                    "name": {
                      "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.",
                      "type": "string",
                      "location": "path",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "required": true
                    }
                  },
                  "description": "Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "request": {
                    "$ref": "IndexItemRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/indexing/{+name}:index",
                  "httpMethod": "POST",
                  "id": "cloudsearch.indexing.datasources.items.index",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "unreserve": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "The name of the Data Source to unreserve all items. Format: datasources/{source_id}",
                      "pattern": "^datasources/[^/]+$",
                      "type": "string"
                    }
                  },
                  "request": {
                    "$ref": "UnreserveItemsRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Unreserves all items from a queue, making them all eligible to be polled. This method is useful for resetting the indexing queue after a connector has been restarted. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "path": "v1/indexing/{+name}/items:unreserve",
                  "id": "cloudsearch.indexing.datasources.items.unreserve",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:unreserve",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "POST"
                },
                "delete": {
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "parameters": {
                    "version": {
                      "format": "byte",
                      "type": "string",
                      "location": "query",
                      "description": "Required. The incremented version of the item to delete from the index. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations)."
                    },
                    "connectorName": {
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "location": "query",
                      "type": "string"
                    },
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                    },
                    "name": {
                      "description": "Required. The name of the item to delete. Format: datasources/{source_id}/items/{item_id}",
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^datasources/[^/]+/items/[^/]+$"
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "UNSPECIFIED",
                        "SYNCHRONOUS",
                        "ASYNCHRONOUS"
                      ],
                      "location": "query",
                      "description": "Required. The RequestMode for this request.",
                      "enumDescriptions": [
                        "The priority is not specified in the update request. Leaving priority unspecified results in an update failure.",
                        "For real-time updates.",
                        "For changes that are executed after the response is sent back to the caller."
                      ]
                    }
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
                  "id": "cloudsearch.indexing.datasources.items.delete",
                  "path": "v1/indexing/{+name}",
                  "description": "Deletes Item resource for the specified resource name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "DELETE"
                },
                "get": {
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean"
                    },
                    "name": {
                      "location": "path",
                      "description": "The name of the item to get info. Format: datasources/{source_id}/items/{item_id}",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "connectorName": {
                      "location": "query",
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "type": "string"
                    }
                  },
                  "description": "Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "path": "v1/indexing/{+name}",
                  "response": {
                    "$ref": "Item"
                  },
                  "id": "cloudsearch.indexing.datasources.items.get"
                },
                "upload": {
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "description": "The name of the Item to start a resumable upload. Format: datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "description": "Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "response": {
                    "$ref": "UploadItemRef"
                  },
                  "request": {
                    "$ref": "StartUploadItemRequest"
                  },
                  "id": "cloudsearch.indexing.datasources.items.upload",
                  "httpMethod": "POST",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:upload",
                  "path": "v1/indexing/{+name}:upload"
                },
                "list": {
                  "response": {
                    "$ref": "ListItemsResponse"
                  },
                  "description": "Lists all or a subset of Item resources. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "id": "cloudsearch.indexing.datasources.items.list",
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "The name of the Data Source to list Items. Format: datasources/{source_id}",
                      "required": true
                    },
                    "connectorName": {
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "location": "query",
                      "type": "string"
                    },
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "Maximum number of items to fetch in a request. The max value is 1000 when brief is true. The max value is 10 if brief is false. The default value is 10",
                      "type": "integer",
                      "location": "query"
                    },
                    "brief": {
                      "type": "boolean",
                      "description": "When set to true, the indexing system only populates the following fields: name, version, queue. metadata.hash, metadata.title, metadata.sourceRepositoryURL, metadata.objectType, metadata.createTime, metadata.updateTime, metadata.contentLanguage, metadata.mimeType, structured_data.hash, content.hash, itemType, itemStatus.code, itemStatus.processingError.code, itemStatus.repositoryError.type, If this value is false, then all the fields are populated in Item.",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items",
                  "path": "v1/indexing/{+name}/items",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ]
                },
                "poll": {
                  "response": {
                    "$ref": "PollItemsResponse"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^datasources/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "The name of the Data Source to poll items. Format: datasources/{source_id}"
                    }
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:poll",
                  "httpMethod": "POST",
                  "description": "Polls for unreserved items from the indexing queue and marks a set as reserved, starting with items that have the oldest timestamp from the highest priority ItemStatus. The priority order is as follows: ERROR MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other threads cannot create overlapping sets. After handling the reserved items, the client should put items back into the unreserved state, either by calling index, or by calling push with the type REQUEUE. Items automatically become available (unreserved) after 4 hours even if no update or push method is called. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "PollItemsRequest"
                  },
                  "path": "v1/indexing/{+name}/items:poll",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "id": "cloudsearch.indexing.datasources.items.poll"
                },
                "push": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.indexing.datasources.items.push",
                  "description": "Pushes an item onto a queue for later polling and updating. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "request": {
                    "$ref": "PushItemRequest"
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:push",
                  "path": "v1/indexing/{+name}:push",
                  "response": {
                    "$ref": "Item"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "The name of the item to push into the indexing queue. Format: datasources/{source_id}/items/{ID} This is a required field. The maximum length is 1536 characters.",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "location": "path"
                    }
                  }
                },
                "deleteQueueItems": {
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:deleteQueueItems",
                  "request": {
                    "$ref": "DeleteQueueItemsRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/indexing/{+name}/items:deleteQueueItems",
                  "description": "Deletes all items in a queue. This method is useful for deleting stale items. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "id": "cloudsearch.indexing.datasources.items.deleteQueueItems",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "pattern": "^datasources/[^/]+$",
                      "description": "The name of the Data Source to delete items in a queue. Format: datasources/{source_id}",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "updateSchema": {
              "path": "v1/indexing/{+name}/schema",
              "httpMethod": "PUT",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "request": {
                "$ref": "UpdateSchemaRequest"
              },
              "description": "Updates the schema of a data source. This method does not perform incremental updates to the schema. Instead, this method updates the schema by overwriting the entire schema. **Note:** This API requires an admin or service account to execute.",
              "id": "cloudsearch.indexing.datasources.updateSchema",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^datasources/[^/]+$",
                  "description": "The name of the data source to update Schema. Format: datasources/{source_id}"
                }
              },
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema"
            },
            "deleteSchema": {
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "id": "cloudsearch.indexing.datasources.deleteSchema",
              "path": "v1/indexing/{+name}/schema",
              "description": "Deletes the schema of a data source. **Note:** This API requires an admin or service account to execute.",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean",
                  "location": "query"
                },
                "name": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^datasources/[^/]+$",
                  "description": "The name of the data source to delete Schema. Format: datasources/{source_id}",
                  "required": true
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ]
            },
            "getSchema": {
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "description": "Gets the schema of a data source. **Note:** This API requires an admin or service account to execute.",
              "parameters": {
                "name": {
                  "description": "The name of the data source to get Schema. Format: datasources/{source_id}",
                  "location": "path",
                  "required": true,
                  "pattern": "^datasources/[^/]+$",
                  "type": "string"
                },
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean",
                  "location": "query"
                }
              },
              "path": "v1/indexing/{+name}/schema",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "id": "cloudsearch.indexing.datasources.getSchema",
              "response": {
                "$ref": "Schema"
              }
            }
          }
        }
      }
    },
    "debug": {
      "resources": {
        "datasources": {
          "resources": {
            "items": {
              "resources": {
                "unmappedids": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "description": "The next_page_token value returned from a previous List request, if any.",
                          "location": "query"
                        },
                        "pageSize": {
                          "format": "int32",
                          "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                          "type": "integer",
                          "location": "query"
                        },
                        "debugOptions.enableDebugging": {
                          "type": "boolean",
                          "location": "query",
                          "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                        },
                        "parent": {
                          "description": "The name of the item, in the following format: datasources/{source_id}/items/{ID}",
                          "location": "path",
                          "pattern": "^datasources/[^/]+/items/[^/]+$",
                          "type": "string",
                          "required": true
                        }
                      },
                      "description": "List all unmapped identities for a specific item. **Note:** This API requires an admin account to execute.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud_search",
                        "https://www.googleapis.com/auth/cloud_search.debug"
                      ],
                      "id": "cloudsearch.debug.datasources.items.unmappedids.list",
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListUnmappedIdentitiesResponse"
                      },
                      "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}/unmappedids",
                      "path": "v1/debug/{+parent}/unmappedids"
                    }
                  }
                }
              },
              "methods": {
                "searchByViewUrl": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "pattern": "^datasources/[^/]+$",
                      "description": "Source name, format: datasources/{source_id}",
                      "location": "path"
                    }
                  },
                  "description": "Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "SearchItemsByViewUrlRequest"
                  },
                  "flatPath": "v1/debug/datasources/{datasourcesId}/items:searchByViewUrl",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "SearchItemsByViewUrlResponse"
                  },
                  "path": "v1/debug/{+name}/items:searchByViewUrl",
                  "id": "cloudsearch.debug.datasources.items.searchByViewUrl"
                },
                "checkAccess": {
                  "httpMethod": "POST",
                  "id": "cloudsearch.debug.datasources.items.checkAccess",
                  "request": {
                    "$ref": "Principal"
                  },
                  "description": "Checks whether an item is accessible by specified principal. Principal must be a user; groups and domain values aren't supported. **Note:** This API requires an admin account to execute.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "Item name, format: datasources/{source_id}/items/{item_id}",
                      "type": "string"
                    },
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean"
                    }
                  },
                  "response": {
                    "$ref": "CheckAccessResponse"
                  },
                  "path": "v1/debug/{+name}:checkAccess",
                  "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}:checkAccess"
                }
              }
            }
          }
        },
        "identitysources": {
          "resources": {
            "unmappedids": {
              "methods": {
                "list": {
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListUnmappedIdentitiesResponse"
                  },
                  "path": "v1/debug/{+parent}/unmappedids",
                  "description": "Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute.",
                  "parameters": {
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean"
                    },
                    "parent": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^identitysources/[^/]+$",
                      "description": "The name of the identity source, in the following format: identitysources/{source_id}"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "type": "string",
                      "location": "query"
                    },
                    "resolutionStatusCode": {
                      "enum": [
                        "CODE_UNSPECIFIED",
                        "NOT_FOUND",
                        "IDENTITY_SOURCE_NOT_FOUND",
                        "IDENTITY_SOURCE_MISCONFIGURED",
                        "TOO_MANY_MAPPINGS_FOUND",
                        "INTERNAL_ERROR"
                      ],
                      "type": "string",
                      "location": "query",
                      "description": "Limit users selection to this status.",
                      "enumDescriptions": [
                        "Input-only value. Used to list all unmapped identities regardless of status.",
                        "The unmapped identity was not found in IDaaS, and needs to be provided by the user.",
                        "The identity source associated with the identity was either not found or deleted.",
                        "IDaaS does not understand the identity source, probably because the schema was modified in a non compatible way.",
                        "The number of users associated with the external identity is too large.",
                        "Internal error."
                      ]
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "flatPath": "v1/debug/identitysources/{identitysourcesId}/unmappedids",
                  "id": "cloudsearch.debug.identitysources.unmappedids.list"
                }
              }
            },
            "items": {
              "methods": {
                "listForunmappedidentity": {
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "The next_page_token value returned from a previous List request, if any."
                    },
                    "userResourceName": {
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "location": "path",
                      "description": "The name of the identity source, in the following format: identitysources/{source_id}}",
                      "pattern": "^identitysources/[^/]+$",
                      "type": "string",
                      "required": true
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                      "format": "int32"
                    },
                    "groupResourceName": {
                      "location": "query",
                      "type": "string"
                    },
                    "debugOptions.enableDebugging": {
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "id": "cloudsearch.debug.identitysources.items.listForunmappedidentity",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListItemNamesForUnmappedIdentityResponse"
                  },
                  "description": "Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute.",
                  "path": "v1/debug/{+parent}/items:forunmappedidentity",
                  "flatPath": "v1/debug/identitysources/{identitysourcesId}/items:forunmappedidentity"
                }
              }
            }
          }
        }
      }
    },
    "operations": {
      "resources": {
        "lro": {
          "methods": {
            "list": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListOperationsResponse"
              },
              "path": "v1/{+name}/lro",
              "httpMethod": "GET",
              "id": "cloudsearch.operations.lro.list",
              "parameters": {
                "filter": {
                  "type": "string",
                  "description": "The standard list filter.",
                  "location": "query"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "The standard list page size.",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The standard list page token.",
                  "location": "query"
                },
                "name": {
                  "pattern": "^operations/.*$",
                  "type": "string",
                  "description": "The name of the operation's parent resource.",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.debug",
                "https://www.googleapis.com/auth/cloud_search.indexing",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
              "flatPath": "v1/operations/{operationsId}/lro"
            }
          }
        }
      },
      "methods": {
        "get": {
          "path": "v1/{+name}",
          "flatPath": "v1/operations/{operationsId}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.debug",
            "https://www.googleapis.com/auth/cloud_search.indexing",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing",
            "https://www.googleapis.com/auth/cloud_search.settings.query"
          ],
          "id": "cloudsearch.operations.get",
          "parameterOrder": [
            "name"
          ],
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "response": {
            "$ref": "Operation"
          },
          "parameters": {
            "name": {
              "location": "path",
              "type": "string",
              "required": true,
              "pattern": "^operations/.*$",
              "description": "The name of the operation resource."
            }
          }
        }
      }
    },
    "query": {
      "resources": {
        "sources": {
          "methods": {
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.query"
              ],
              "parameters": {
                "requestOptions.searchApplicationId": {
                  "location": "query",
                  "description": "The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922).",
                  "type": "string"
                },
                "requestOptions.timeZone": {
                  "type": "string",
                  "location": "query",
                  "description": "Current user's time zone id, such as \"America/Los_Angeles\" or \"Australia/Sydney\". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used."
                },
                "requestOptions.debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean",
                  "location": "query"
                },
                "requestOptions.languageCode": {
                  "location": "query",
                  "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. The Suggest API uses this field as a hint to make better third-party autocomplete predictions.",
                  "type": "string"
                },
                "pageToken": {
                  "description": "Number of sources to return in the response.",
                  "type": "string",
                  "location": "query"
                }
              },
              "id": "cloudsearch.query.sources.list",
              "httpMethod": "GET",
              "parameterOrder": [],
              "path": "v1/query/sources",
              "flatPath": "v1/query/sources",
              "response": {
                "$ref": "ListQuerySourcesResponse"
              },
              "description": "Returns list of sources that user can use for Search and Suggest APIs. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/)."
            }
          }
        }
      },
      "methods": {
        "search": {
          "id": "cloudsearch.query.search",
          "request": {
            "$ref": "SearchRequest"
          },
          "response": {
            "$ref": "SearchResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.query"
          ],
          "description": "The Cloud Search Query API provides the search method, which returns the most relevant results from a user query. The results can come from Google Workspace apps, such as Gmail or Google Drive, or they can come from data that you have indexed from a third party. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
          "parameters": {},
          "path": "v1/query/search",
          "httpMethod": "POST",
          "flatPath": "v1/query/search",
          "parameterOrder": []
        },
        "suggest": {
          "request": {
            "$ref": "SuggestRequest"
          },
          "response": {
            "$ref": "SuggestResponse"
          },
          "path": "v1/query/suggest",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.query"
          ],
          "description": "Provides suggestions for autocompleting the query. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
          "parameterOrder": [],
          "id": "cloudsearch.query.suggest",
          "httpMethod": "POST",
          "flatPath": "v1/query/suggest"
        },
        "removeActivity": {
          "httpMethod": "POST",
          "path": "v1/query:removeActivity",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.query"
          ],
          "flatPath": "v1/query:removeActivity",
          "id": "cloudsearch.query.removeActivity",
          "response": {
            "$ref": "RemoveActivityResponse"
          },
          "description": "Provides functionality to remove logged activity for a user. Currently to be used only for dynamite 1p clients **Note:** This API requires a standard end user account to execute. A service account can't perform Remove Activity requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
          "request": {
            "$ref": "RemoveActivityRequest"
          },
          "parameters": {}
        }
      }
    }
  },
  "baseUrl": "https://cloudsearch.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "ownerDomain": "google.com",
  "version_module": true,
  "discoveryVersion": "v1",
  "documentationLink": "https://developers.google.com/cloud-search/docs/guides/",
  "id": "cloudsearch:v1",
  "version": "v1",
  "title": "Cloud Search API",
  "protocol": "rest",
  "servicePath": "",
  "revision": "20230628"
}

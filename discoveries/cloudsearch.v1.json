{
  "basePath": "",
  "rootUrl": "https://cloudsearch.googleapis.com/",
  "canonicalName": "Cloud Search",
  "version_module": true,
  "batchPath": "batch",
  "title": "Cloud Search API",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "revision": "20230207",
  "parameters": {
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format."
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "fullyEncodeReservedExpansion": true,
  "baseUrl": "https://cloudsearch.googleapis.com/",
  "resources": {
    "debug": {
      "resources": {
        "datasources": {
          "resources": {
            "items": {
              "resources": {
                "unmappedids": {
                  "methods": {
                    "list": {
                      "path": "v1/debug/{+parent}/unmappedids",
                      "response": {
                        "$ref": "ListUnmappedIdentitiesResponse"
                      },
                      "id": "cloudsearch.debug.datasources.items.unmappedids.list",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "The name of the item, in the following format: datasources/{source_id}/items/{ID}",
                          "type": "string",
                          "pattern": "^datasources/[^/]+/items/[^/]+$",
                          "required": true,
                          "location": "path"
                        },
                        "debugOptions.enableDebugging": {
                          "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                          "type": "boolean",
                          "location": "query"
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "The next_page_token value returned from a previous List request, if any."
                        },
                        "pageSize": {
                          "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                          "format": "int32",
                          "type": "integer",
                          "location": "query"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud_search",
                        "https://www.googleapis.com/auth/cloud_search.debug"
                      ],
                      "description": "List all unmapped identities for a specific item. **Note:** This API requires an admin account to execute.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}/unmappedids"
                    }
                  }
                }
              },
              "methods": {
                "checkAccess": {
                  "parameters": {
                    "name": {
                      "description": "Item name, format: datasources/{source_id}/items/{item_id}",
                      "location": "path",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "debugOptions.enableDebugging": {
                      "type": "boolean",
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                    }
                  },
                  "id": "cloudsearch.debug.datasources.items.checkAccess",
                  "request": {
                    "$ref": "Principal"
                  },
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "CheckAccessResponse"
                  },
                  "description": "Checks whether an item is accessible by specified principal. Principal must be a user; groups and domain values aren't supported. **Note:** This API requires an admin account to execute.",
                  "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}:checkAccess",
                  "path": "v1/debug/{+name}:checkAccess",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ]
                },
                "searchByViewUrl": {
                  "response": {
                    "$ref": "SearchItemsByViewUrlResponse"
                  },
                  "request": {
                    "$ref": "SearchItemsByViewUrlRequest"
                  },
                  "description": "Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute.",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/debug/datasources/{datasourcesId}/items:searchByViewUrl",
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^datasources/[^/]+$",
                      "description": "Source name, format: datasources/{source_id}",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "httpMethod": "POST",
                  "id": "cloudsearch.debug.datasources.items.searchByViewUrl",
                  "path": "v1/debug/{+name}/items:searchByViewUrl",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ]
                }
              }
            }
          }
        },
        "identitysources": {
          "resources": {
            "items": {
              "methods": {
                "listForunmappedidentity": {
                  "parameters": {
                    "parent": {
                      "required": true,
                      "pattern": "^identitysources/[^/]+$",
                      "type": "string",
                      "description": "The name of the identity source, in the following format: identitysources/{source_id}}",
                      "location": "path"
                    },
                    "userResourceName": {
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                      "format": "int32"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "The next_page_token value returned from a previous List request, if any."
                    },
                    "debugOptions.enableDebugging": {
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "groupResourceName": {
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListItemNamesForUnmappedIdentityResponse"
                  },
                  "id": "cloudsearch.debug.identitysources.items.listForunmappedidentity",
                  "flatPath": "v1/debug/identitysources/{identitysourcesId}/items:forunmappedidentity",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "description": "Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute.",
                  "httpMethod": "GET",
                  "path": "v1/debug/{+parent}/items:forunmappedidentity"
                }
              }
            },
            "unmappedids": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "The next_page_token value returned from a previous List request, if any."
                    },
                    "debugOptions.enableDebugging": {
                      "type": "boolean",
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                    },
                    "resolutionStatusCode": {
                      "enum": [
                        "CODE_UNSPECIFIED",
                        "NOT_FOUND",
                        "IDENTITY_SOURCE_NOT_FOUND",
                        "IDENTITY_SOURCE_MISCONFIGURED",
                        "TOO_MANY_MAPPINGS_FOUND",
                        "INTERNAL_ERROR"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "Input-only value. Used to list all unmapped identities regardless of status.",
                        "The unmapped identity was not found in IDaaS, and needs to be provided by the user.",
                        "The identity source associated with the identity was either not found or deleted.",
                        "IDaaS does not understand the identity source, probably because the schema was modified in a non compatible way.",
                        "The number of users associated with the external identity is too large.",
                        "Internal error."
                      ],
                      "location": "query",
                      "description": "Limit users selection to this status."
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Maximum number of items to fetch in a request. Defaults to 100.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "parent": {
                      "pattern": "^identitysources/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "The name of the identity source, in the following format: identitysources/{source_id}"
                    }
                  },
                  "description": "Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.debug"
                  ],
                  "flatPath": "v1/debug/identitysources/{identitysourcesId}/unmappedids",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/debug/{+parent}/unmappedids",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListUnmappedIdentitiesResponse"
                  },
                  "id": "cloudsearch.debug.identitysources.unmappedids.list"
                }
              }
            }
          }
        }
      }
    },
    "query": {
      "resources": {
        "sources": {
          "methods": {
            "list": {
              "flatPath": "v1/query/sources",
              "description": "Returns list of sources that user can use for Search and Suggest APIs. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
              "id": "cloudsearch.query.sources.list",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.query"
              ],
              "parameters": {
                "requestOptions.timeZone": {
                  "description": "Current user's time zone id, such as \"America/Los_Angeles\" or \"Australia/Sydney\". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.",
                  "location": "query",
                  "type": "string"
                },
                "requestOptions.languageCode": {
                  "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. From Suggest API perspective, for 3p suggest this is used as a hint while making predictions to add language boosting.",
                  "type": "string",
                  "location": "query"
                },
                "requestOptions.debugOptions.enableDebugging": {
                  "type": "boolean",
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Number of sources to return in the response."
                },
                "requestOptions.searchApplicationId": {
                  "location": "query",
                  "type": "string",
                  "description": "The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922)."
                }
              },
              "response": {
                "$ref": "ListQuerySourcesResponse"
              },
              "httpMethod": "GET",
              "path": "v1/query/sources",
              "parameterOrder": []
            }
          }
        }
      },
      "methods": {
        "suggest": {
          "flatPath": "v1/query/suggest",
          "path": "v1/query/suggest",
          "request": {
            "$ref": "SuggestRequest"
          },
          "id": "cloudsearch.query.suggest",
          "httpMethod": "POST",
          "response": {
            "$ref": "SuggestResponse"
          },
          "parameters": {},
          "parameterOrder": [],
          "description": "Provides suggestions for autocompleting the query. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.query"
          ]
        },
        "search": {
          "flatPath": "v1/query/search",
          "parameterOrder": [],
          "request": {
            "$ref": "SearchRequest"
          },
          "id": "cloudsearch.query.search",
          "response": {
            "$ref": "SearchResponse"
          },
          "parameters": {},
          "httpMethod": "POST",
          "path": "v1/query/search",
          "description": "The Cloud Search Query API provides the search method, which returns the most relevant results from a user query. The results can come from Google Workspace apps, such as Gmail or Google Drive, or they can come from data that you have indexed from a third party. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.query"
          ]
        }
      }
    },
    "v1": {
      "methods": {
        "initializeCustomer": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "parameterOrder": [],
          "response": {
            "$ref": "Operation"
          },
          "description": "Enables `third party` support in Google Cloud Search. **Note:** This API requires an admin account to execute.",
          "id": "cloudsearch.initializeCustomer",
          "path": "v1:initializeCustomer",
          "parameters": {},
          "flatPath": "v1:initializeCustomer",
          "request": {
            "$ref": "InitializeCustomerRequest"
          },
          "httpMethod": "POST"
        }
      }
    },
    "settings": {
      "methods": {
        "updateCustomer": {
          "parameters": {
            "updateMask": {
              "format": "google-fieldmask",
              "type": "string",
              "description": "Update mask to control which fields get updated. If you specify a field in the update_mask but don't specify its value here, that field will be cleared. If the mask is not present or empty, all fields will be updated. Currently supported field paths: vpc_settings and audit_logging_settings",
              "location": "query"
            }
          },
          "id": "cloudsearch.settings.updateCustomer",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "response": {
            "$ref": "Operation"
          },
          "description": "Update customer settings. **Note:** This API requires an admin account to execute.",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "CustomerSettings"
          },
          "path": "v1/settings/customer",
          "flatPath": "v1/settings/customer",
          "parameterOrder": []
        },
        "getCustomer": {
          "parameters": {},
          "parameterOrder": [],
          "response": {
            "$ref": "CustomerSettings"
          },
          "path": "v1/settings/customer",
          "description": "Get customer settings. **Note:** This API requires an admin account to execute.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing"
          ],
          "id": "cloudsearch.settings.getCustomer",
          "httpMethod": "GET",
          "flatPath": "v1/settings/customer"
        }
      },
      "resources": {
        "searchapplications": {
          "methods": {
            "list": {
              "path": "v1/settings/searchapplications",
              "httpMethod": "GET",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "type": "boolean",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The next_page_token value returned from a previous List request, if any. The default value is 10"
                },
                "pageSize": {
                  "description": "The maximum number of items to return.",
                  "location": "query",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "description": "Lists all search applications. **Note:** This API requires an admin account to execute.",
              "response": {
                "$ref": "ListSearchApplicationsResponse"
              },
              "flatPath": "v1/settings/searchapplications",
              "parameterOrder": [],
              "id": "cloudsearch.settings.searchapplications.list"
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "SearchApplication"
              },
              "path": "v1/settings/{+name}",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query"
                },
                "name": {
                  "location": "path",
                  "required": true,
                  "description": "The name of the search application. Format: searchapplications/{application_id}.",
                  "type": "string",
                  "pattern": "^searchapplications/[^/]+$"
                }
              },
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "httpMethod": "GET",
              "id": "cloudsearch.settings.searchapplications.get",
              "description": "Gets the specified search application. **Note:** This API requires an admin account to execute.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ]
            },
            "create": {
              "id": "cloudsearch.settings.searchapplications.create",
              "flatPath": "v1/settings/searchapplications",
              "response": {
                "$ref": "Operation"
              },
              "description": "Creates a search application. **Note:** This API requires an admin account to execute.",
              "parameters": {},
              "parameterOrder": [],
              "httpMethod": "POST",
              "request": {
                "$ref": "SearchApplication"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "path": "v1/settings/searchapplications"
            },
            "delete": {
              "httpMethod": "DELETE",
              "description": "Deletes a search application. **Note:** This API requires an admin account to execute.",
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the search application to be deleted. Format: applications/{application_id}.",
                  "type": "string",
                  "pattern": "^searchapplications/[^/]+$",
                  "location": "path",
                  "required": true
                },
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudsearch.settings.searchapplications.delete",
              "path": "v1/settings/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ]
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "request": {
                "$ref": "SearchApplication"
              },
              "description": "Updates a search application. **Note:** This API requires an admin account to execute.",
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/settings/{+name}",
              "httpMethod": "PATCH",
              "id": "cloudsearch.settings.searchapplications.patch",
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "updateMask": {
                  "location": "query",
                  "description": "Only applies to [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch). Update mask to control which fields to update. Example field paths: `search_application.name`, `search_application.displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the `search_application`, then that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
                  "type": "string",
                  "format": "google-fieldmask"
                },
                "name": {
                  "pattern": "^searchapplications/[^/]+$",
                  "location": "path",
                  "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
                  "required": true,
                  "type": "string"
                }
              }
            },
            "reset": {
              "path": "v1/settings/{+name}:reset",
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}:reset",
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^searchapplications/[^/]+$",
                  "description": "The name of the search application to be reset. Format: applications/{application_id}.",
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "cloudsearch.settings.searchapplications.reset",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "description": "Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute.",
              "request": {
                "$ref": "ResetSearchApplicationRequest"
              }
            },
            "update": {
              "response": {
                "$ref": "Operation"
              },
              "description": "Updates a search application. **Note:** This API requires an admin account to execute.",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
              "httpMethod": "PUT",
              "id": "cloudsearch.settings.searchapplications.update",
              "request": {
                "$ref": "SearchApplication"
              },
              "path": "v1/settings/{+name}",
              "parameters": {
                "updateMask": {
                  "description": "Only applies to [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch). Update mask to control which fields to update. Example field paths: `search_application.name`, `search_application.displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the `search_application`, then that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                },
                "name": {
                  "type": "string",
                  "location": "path",
                  "pattern": "^searchapplications/[^/]+$",
                  "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ]
            }
          }
        },
        "datasources": {
          "methods": {
            "create": {
              "parameterOrder": [],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "flatPath": "v1/settings/datasources",
              "id": "cloudsearch.settings.datasources.create",
              "description": "Creates a datasource. **Note:** This API requires an admin account to execute.",
              "request": {
                "$ref": "DataSource"
              },
              "response": {
                "$ref": "Operation"
              },
              "parameters": {},
              "httpMethod": "POST",
              "path": "v1/settings/datasources"
            },
            "patch": {
              "request": {
                "$ref": "DataSource"
              },
              "description": "Updates a datasource. **Note:** This API requires an admin account to execute.",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/settings/{+name}",
              "parameters": {
                "updateMask": {
                  "description": "Only applies to [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch). Update mask to control which fields to update. Example field paths: `name`, `displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the source, that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
                  "type": "string",
                  "location": "query",
                  "format": "google-fieldmask"
                },
                "name": {
                  "type": "string",
                  "pattern": "^datasources/[^/]+$",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.",
                  "required": true,
                  "location": "path"
                },
                "debugOptions.enableDebugging": {
                  "location": "query",
                  "type": "boolean",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                }
              },
              "id": "cloudsearch.settings.datasources.patch",
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ]
            },
            "delete": {
              "httpMethod": "DELETE",
              "description": "Deletes a datasource. **Note:** This API requires an admin account to execute.",
              "id": "cloudsearch.settings.datasources.delete",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "parameters": {
                "name": {
                  "pattern": "^datasources/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The name of the datasource. Format: datasources/{source_id}."
                },
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean",
                  "location": "query"
                }
              },
              "path": "v1/settings/{+name}",
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/settings/datasources/{datasourcesId}"
            },
            "update": {
              "request": {
                "$ref": "UpdateDataSourceRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "description": "Updates a datasource. **Note:** This API requires an admin account to execute.",
              "flatPath": "v1/settings/datasources/{datasourcesId}",
              "parameters": {
                "name": {
                  "type": "string",
                  "required": true,
                  "pattern": "^datasources/[^/]+$",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "httpMethod": "PUT",
              "parameterOrder": [
                "name"
              ],
              "id": "cloudsearch.settings.datasources.update",
              "path": "v1/settings/{+name}"
            },
            "list": {
              "description": "Lists datasources. **Note:** This API requires an admin account to execute.",
              "response": {
                "$ref": "ListDataSourceResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/settings/datasources",
              "path": "v1/settings/datasources",
              "parameterOrder": [],
              "id": "cloudsearch.settings.datasources.list",
              "parameters": {
                "pageSize": {
                  "type": "integer",
                  "description": "Maximum number of datasources to fetch in a request. The max value is 1000. The default value is 1000.",
                  "location": "query",
                  "format": "int32"
                },
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query"
                },
                "pageToken": {
                  "description": "Starting index of the results.",
                  "location": "query",
                  "type": "string"
                }
              }
            },
            "get": {
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "description": "Gets a datasource. **Note:** This API requires an admin account to execute.",
              "path": "v1/settings/{+name}",
              "id": "cloudsearch.settings.datasources.get",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "type": "boolean",
                  "location": "query"
                },
                "name": {
                  "pattern": "^datasources/[^/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The name of the datasource resource. Format: datasources/{source_id}."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "response": {
                "$ref": "DataSource"
              },
              "flatPath": "v1/settings/datasources/{datasourcesId}"
            }
          }
        }
      }
    },
    "media": {
      "methods": {
        "upload": {
          "supportsMediaUpload": true,
          "flatPath": "v1/media/{mediaId}",
          "httpMethod": "POST",
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "Media"
          },
          "request": {
            "$ref": "Media"
          },
          "description": "Uploads media for indexing. The upload endpoint supports direct and resumable upload protocols and is intended for large items that can not be [inlined during index requests](https://developers.google.com/cloud-search/docs/reference/rest/v1/indexing.datasources.items#itemcontent). To index large content: 1. Call indexing.datasources.items.upload with the item name to begin an upload session and retrieve the UploadItemRef. 1. Call media.upload to upload the content, as a streaming request, using the same resource name from the UploadItemRef from step 1. 1. Call indexing.datasources.items.index to index the item. Populate the [ItemContent](/cloud-search/docs/reference/rest/v1/indexing.datasources.items#ItemContent) with the UploadItemRef from step 1. For additional information, see [Create a content connector using the REST API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest). **Note:** This API requires a service account to execute.",
          "mediaUpload": {
            "accept": [
              "*/*"
            ],
            "protocols": {
              "simple": {
                "path": "/upload/v1/media/{+resourceName}",
                "multipart": true
              }
            }
          },
          "id": "cloudsearch.media.upload",
          "parameters": {
            "resourceName": {
              "required": true,
              "type": "string",
              "location": "path",
              "pattern": "^.*$",
              "description": "Name of the media that is being downloaded. See ReadRequest.resource_name."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.indexing"
          ],
          "path": "v1/media/{+resourceName}"
        }
      }
    },
    "stats": {
      "resources": {
        "query": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "GetSearchApplicationQueryStatsResponse"
                  },
                  "description": "Get the query statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "parameters": {
                    "toDate.day": {
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "required": true,
                      "pattern": "^searchapplications/[^/]+$",
                      "type": "string",
                      "description": "The resource id of the search application query stats, in the following format: searchapplications/{application_id}",
                      "location": "path"
                    },
                    "toDate.month": {
                      "format": "int32",
                      "type": "integer",
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12."
                    },
                    "fromDate.year": {
                      "format": "int32",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "location": "query",
                      "type": "integer"
                    },
                    "toDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "fromDate.day": {
                      "location": "query",
                      "type": "integer",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "format": "int32"
                    },
                    "fromDate.month": {
                      "description": "Month of date. Must be from 1 to 12.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/stats/query/{+name}",
                  "flatPath": "v1/stats/query/searchapplications/{searchapplicationsId}",
                  "id": "cloudsearch.stats.query.searchapplications.get"
                }
              }
            }
          }
        },
        "session": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "parameters": {
                    "toDate.month": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Month of date. Must be from 1 to 12.",
                      "location": "query"
                    },
                    "fromDate.month": {
                      "format": "int32",
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12.",
                      "type": "integer"
                    },
                    "toDate.day": {
                      "format": "int32",
                      "type": "integer",
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
                    },
                    "toDate.year": {
                      "format": "int32",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "location": "query",
                      "type": "integer"
                    },
                    "fromDate.day": {
                      "type": "integer",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query",
                      "format": "int32"
                    },
                    "fromDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "name": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^searchapplications/[^/]+$",
                      "description": "The resource id of the search application session stats, in the following format: searchapplications/{application_id}"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.stats.session.searchapplications.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "flatPath": "v1/stats/session/searchapplications/{searchapplicationsId}",
                  "description": "Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "path": "v1/stats/session/{+name}",
                  "response": {
                    "$ref": "GetSearchApplicationSessionStatsResponse"
                  },
                  "httpMethod": "GET"
                }
              }
            }
          }
        },
        "index": {
          "resources": {
            "datasources": {
              "methods": {
                "get": {
                  "response": {
                    "$ref": "GetDataSourceIndexStatsResponse"
                  },
                  "description": "Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute.",
                  "httpMethod": "GET",
                  "id": "cloudsearch.stats.index.datasources.get",
                  "path": "v1/stats/index/{+name}",
                  "parameters": {
                    "toDate.year": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "location": "query"
                    },
                    "toDate.month": {
                      "type": "integer",
                      "description": "Month of date. Must be from 1 to 12.",
                      "format": "int32",
                      "location": "query"
                    },
                    "name": {
                      "type": "string",
                      "required": true,
                      "pattern": "^datasources/[^/]+$",
                      "location": "path",
                      "description": "The resource id of the data source to retrieve statistics for, in the following format: \"datasources/{source_id}\""
                    },
                    "fromDate.month": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "Month of date. Must be from 1 to 12."
                    },
                    "toDate.day": {
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "fromDate.day": {
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "fromDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1/stats/index/datasources/{datasourcesId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ]
                }
              }
            }
          }
        },
        "user": {
          "resources": {
            "searchapplications": {
              "methods": {
                "get": {
                  "parameters": {
                    "fromDate.month": {
                      "description": "Month of date. Must be from 1 to 12.",
                      "location": "query",
                      "format": "int32",
                      "type": "integer"
                    },
                    "fromDate.day": {
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
                      "type": "integer",
                      "format": "int32",
                      "location": "query"
                    },
                    "name": {
                      "required": true,
                      "pattern": "^searchapplications/[^/]+$",
                      "description": "The resource id of the search application session stats, in the following format: searchapplications/{application_id}",
                      "type": "string",
                      "location": "path"
                    },
                    "fromDate.year": {
                      "location": "query",
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "toDate.year": {
                      "description": "Year of date. Must be from 1 to 9999.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    },
                    "toDate.day": {
                      "format": "int32",
                      "type": "integer",
                      "location": "query",
                      "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
                    },
                    "toDate.month": {
                      "format": "int32",
                      "location": "query",
                      "type": "integer",
                      "description": "Month of date. Must be from 1 to 12."
                    }
                  },
                  "path": "v1/stats/user/{+name}",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Get the users statistics for search application. **Note:** This API requires a standard end user account to execute.",
                  "id": "cloudsearch.stats.user.searchapplications.get",
                  "response": {
                    "$ref": "GetSearchApplicationUserStatsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.stats",
                    "https://www.googleapis.com/auth/cloud_search.stats.indexing"
                  ],
                  "flatPath": "v1/stats/user/searchapplications/{searchapplicationsId}"
                }
              }
            }
          }
        }
      },
      "methods": {
        "getIndex": {
          "flatPath": "v1/stats/index",
          "description": "Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute.",
          "response": {
            "$ref": "GetCustomerIndexStatsResponse"
          },
          "id": "cloudsearch.stats.getIndex",
          "parameters": {
            "fromDate.month": {
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32",
              "type": "integer"
            },
            "fromDate.year": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "fromDate.day": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
            },
            "toDate.month": {
              "format": "int32",
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query",
              "type": "integer"
            },
            "toDate.day": {
              "format": "int32",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer",
              "location": "query"
            },
            "toDate.year": {
              "type": "integer",
              "description": "Year of date. Must be from 1 to 9999.",
              "format": "int32",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "parameterOrder": [],
          "httpMethod": "GET",
          "path": "v1/stats/index"
        },
        "getSession": {
          "response": {
            "$ref": "GetCustomerSessionStatsResponse"
          },
          "parameters": {
            "toDate.month": {
              "location": "query",
              "description": "Month of date. Must be from 1 to 12.",
              "type": "integer",
              "format": "int32"
            },
            "fromDate.year": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "fromDate.day": {
              "type": "integer",
              "format": "int32",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "location": "query"
            },
            "toDate.year": {
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999.",
              "format": "int32",
              "type": "integer"
            },
            "toDate.day": {
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "fromDate.month": {
              "format": "int32",
              "description": "Month of date. Must be from 1 to 12.",
              "type": "integer",
              "location": "query"
            }
          },
          "id": "cloudsearch.stats.getSession",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "flatPath": "v1/stats/session",
          "httpMethod": "GET",
          "parameterOrder": [],
          "path": "v1/stats/session",
          "description": "Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute."
        },
        "getSearchapplication": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "flatPath": "v1/stats/searchapplication",
          "path": "v1/stats/searchapplication",
          "response": {
            "$ref": "GetCustomerSearchApplicationStatsResponse"
          },
          "httpMethod": "GET",
          "parameters": {
            "startDate.year": {
              "format": "int32",
              "type": "integer",
              "description": "Year of date. Must be from 1 to 9999.",
              "location": "query"
            },
            "endDate.year": {
              "type": "integer",
              "description": "Year of date. Must be from 1 to 9999.",
              "format": "int32",
              "location": "query"
            },
            "endDate.month": {
              "location": "query",
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12.",
              "format": "int32"
            },
            "startDate.day": {
              "location": "query",
              "format": "int32",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer"
            },
            "startDate.month": {
              "description": "Month of date. Must be from 1 to 12.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "endDate.day": {
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "format": "int32",
              "location": "query"
            }
          },
          "id": "cloudsearch.stats.getSearchapplication",
          "parameterOrder": [],
          "description": "Get search application stats for customer. **Note:** This API requires a standard end user account to execute."
        },
        "getQuery": {
          "description": "Get the query statistics for customer. **Note:** This API requires a standard end user account to execute.",
          "httpMethod": "GET",
          "parameters": {
            "fromDate.month": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "Month of date. Must be from 1 to 12."
            },
            "fromDate.day": {
              "location": "query",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "type": "integer",
              "format": "int32"
            },
            "toDate.month": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12."
            },
            "toDate.year": {
              "description": "Year of date. Must be from 1 to 9999.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "fromDate.year": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999."
            },
            "toDate.day": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month."
            }
          },
          "flatPath": "v1/stats/query",
          "parameterOrder": [],
          "path": "v1/stats/query",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "response": {
            "$ref": "GetCustomerQueryStatsResponse"
          },
          "id": "cloudsearch.stats.getQuery"
        },
        "getUser": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.stats",
            "https://www.googleapis.com/auth/cloud_search.stats.indexing"
          ],
          "path": "v1/stats/user",
          "response": {
            "$ref": "GetCustomerUserStatsResponse"
          },
          "httpMethod": "GET",
          "parameterOrder": [],
          "parameters": {
            "fromDate.year": {
              "location": "query",
              "format": "int32",
              "description": "Year of date. Must be from 1 to 9999.",
              "type": "integer"
            },
            "toDate.year": {
              "location": "query",
              "description": "Year of date. Must be from 1 to 9999.",
              "format": "int32",
              "type": "integer"
            },
            "fromDate.day": {
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "location": "query",
              "format": "int32"
            },
            "fromDate.month": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Month of date. Must be from 1 to 12."
            },
            "toDate.day": {
              "format": "int32",
              "type": "integer",
              "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
              "location": "query"
            },
            "toDate.month": {
              "format": "int32",
              "description": "Month of date. Must be from 1 to 12.",
              "type": "integer",
              "location": "query"
            }
          },
          "flatPath": "v1/stats/user",
          "id": "cloudsearch.stats.getUser",
          "description": "Get the users statistics for customer. **Note:** This API requires a standard end user account to execute."
        }
      }
    },
    "indexing": {
      "resources": {
        "datasources": {
          "resources": {
            "items": {
              "methods": {
                "delete": {
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "connectorName": {
                      "type": "string",
                      "location": "query",
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
                    },
                    "version": {
                      "format": "byte",
                      "description": "Required. The incremented version of the item to delete from the index. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "description": "Required. The name of the item to delete. Format: datasources/{source_id}/items/{item_id}"
                    },
                    "mode": {
                      "type": "string",
                      "enumDescriptions": [
                        "The priority is not specified in the update request. Leaving priority unspecified results in an update failure.",
                        "For real-time updates.",
                        "For changes that are executed after the response is sent back to the caller."
                      ],
                      "description": "Required. The RequestMode for this request.",
                      "location": "query",
                      "enum": [
                        "UNSPECIFIED",
                        "SYNCHRONOUS",
                        "ASYNCHRONOUS"
                      ]
                    },
                    "debugOptions.enableDebugging": {
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Deletes Item resource for the specified resource name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "id": "cloudsearch.indexing.datasources.items.delete",
                  "httpMethod": "DELETE",
                  "path": "v1/indexing/{+name}"
                },
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "id": "cloudsearch.indexing.datasources.items.get",
                  "parameters": {
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                    },
                    "connectorName": {
                      "location": "query",
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "description": "The name of the item to get info. Format: datasources/{source_id}/items/{item_id}",
                      "type": "string",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
                  "httpMethod": "GET",
                  "path": "v1/indexing/{+name}",
                  "response": {
                    "$ref": "Item"
                  }
                },
                "unreserve": {
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "description": "Unreserves all items from a queue, making them all eligible to be polled. This method is useful for resetting the indexing queue after a connector has been restarted. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+$",
                      "required": true,
                      "description": "The name of the Data Source to unreserve all items. Format: datasources/{source_id}",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:unreserve",
                  "request": {
                    "$ref": "UnreserveItemsRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/indexing/{+name}/items:unreserve",
                  "id": "cloudsearch.indexing.datasources.items.unreserve"
                },
                "index": {
                  "request": {
                    "$ref": "IndexItemRequest"
                  },
                  "path": "v1/indexing/{+name}:index",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:index",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "required": true
                    }
                  },
                  "id": "cloudsearch.indexing.datasources.items.index",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "description": "Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "list": {
                  "id": "cloudsearch.indexing.datasources.items.list",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "httpMethod": "GET",
                  "path": "v1/indexing/{+name}/items",
                  "parameters": {
                    "connectorName": {
                      "location": "query",
                      "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
                      "type": "string"
                    },
                    "brief": {
                      "description": "When set to true, the indexing system only populates the following fields: name, version, queue. metadata.hash, metadata.title, metadata.sourceRepositoryURL, metadata.objectType, metadata.createTime, metadata.updateTime, metadata.contentLanguage, metadata.mimeType, structured_data.hash, content.hash, itemType, itemStatus.code, itemStatus.processingError.code, itemStatus.repositoryError.type, If this value is false, then all the fields are populated in Item.",
                      "type": "boolean",
                      "location": "query"
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "type": "string"
                    },
                    "pageSize": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Maximum number of items to fetch in a request. The max value is 1000 when brief is true. The max value is 10 if brief is false. The default value is 10",
                      "location": "query"
                    },
                    "debugOptions.enableDebugging": {
                      "location": "query",
                      "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the Data Source to list Items. Format: datasources/{source_id}",
                      "location": "path",
                      "pattern": "^datasources/[^/]+$",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Lists all or a subset of Item resources. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "response": {
                    "$ref": "ListItemsResponse"
                  }
                },
                "poll": {
                  "id": "cloudsearch.indexing.datasources.items.poll",
                  "path": "v1/indexing/{+name}/items:poll",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:poll",
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+$",
                      "required": true,
                      "description": "The name of the Data Source to poll items. Format: datasources/{source_id}",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "response": {
                    "$ref": "PollItemsResponse"
                  },
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "PollItemsRequest"
                  },
                  "description": "Polls for unreserved items from the indexing queue and marks a set as reserved, starting with items that have the oldest timestamp from the highest priority ItemStatus. The priority order is as follows: ERROR MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other threads cannot create overlapping sets. After handling the reserved items, the client should put items back into the unreserved state, either by calling index, or by calling push with the type REQUEUE. Items automatically become available (unreserved) after 4 hours even if no update or push method is called. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source."
                },
                "upload": {
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:upload",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "response": {
                    "$ref": "UploadItemRef"
                  },
                  "request": {
                    "$ref": "StartUploadItemRequest"
                  },
                  "description": "Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "httpMethod": "POST",
                  "path": "v1/indexing/{+name}:upload",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudsearch.indexing.datasources.items.upload",
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "type": "string",
                      "description": "The name of the Item to start a resumable upload. Format: datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes.",
                      "location": "path"
                    }
                  }
                },
                "push": {
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "PushItemRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:push",
                  "path": "v1/indexing/{+name}:push",
                  "response": {
                    "$ref": "Item"
                  },
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+/items/[^/]+$",
                      "description": "The name of the item to push into the indexing queue. Format: datasources/{source_id}/items/{ID} This is a required field. The maximum length is 1536 characters.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "id": "cloudsearch.indexing.datasources.items.push",
                  "description": "Pushes an item onto a queue for later polling and updating. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ]
                },
                "deleteQueueItems": {
                  "request": {
                    "$ref": "DeleteQueueItemsRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud_search",
                    "https://www.googleapis.com/auth/cloud_search.indexing"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^datasources/[^/]+$",
                      "description": "The name of the Data Source to delete items in a queue. Format: datasources/{source_id}",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes all items in a queue. This method is useful for deleting stale items. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
                  "flatPath": "v1/indexing/datasources/{datasourcesId}/items:deleteQueueItems",
                  "id": "cloudsearch.indexing.datasources.items.deleteQueueItems",
                  "path": "v1/indexing/{+name}/items:deleteQueueItems",
                  "httpMethod": "POST"
                }
              }
            }
          },
          "methods": {
            "updateSchema": {
              "request": {
                "$ref": "UpdateSchemaRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the data source to update Schema. Format: datasources/{source_id}",
                  "type": "string",
                  "pattern": "^datasources/[^/]+$",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "id": "cloudsearch.indexing.datasources.updateSchema",
              "path": "v1/indexing/{+name}/schema",
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "httpMethod": "PUT",
              "description": "Updates the schema of a data source. This method does not perform incremental updates to the schema. Instead, this method updates the schema by overwriting the entire schema. **Note:** This API requires an admin or service account to execute."
            },
            "getSchema": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ],
              "response": {
                "$ref": "Schema"
              },
              "httpMethod": "GET",
              "description": "Gets the schema of a data source. **Note:** This API requires an admin or service account to execute.",
              "path": "v1/indexing/{+name}/schema",
              "id": "cloudsearch.indexing.datasources.getSchema",
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "parameters": {
                "debugOptions.enableDebugging": {
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
                  "location": "query",
                  "type": "boolean"
                },
                "name": {
                  "location": "path",
                  "pattern": "^datasources/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "The name of the data source to get Schema. Format: datasources/{source_id}"
                }
              },
              "parameterOrder": [
                "name"
              ]
            },
            "deleteSchema": {
              "path": "v1/indexing/{+name}/schema",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "description": "Deletes the schema of a data source. **Note:** This API requires an admin or service account to execute.",
              "parameters": {
                "name": {
                  "pattern": "^datasources/[^/]+$",
                  "required": true,
                  "description": "The name of the data source to delete Schema. Format: datasources/{source_id}",
                  "location": "path",
                  "type": "string"
                },
                "debugOptions.enableDebugging": {
                  "type": "boolean",
                  "location": "query",
                  "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "id": "cloudsearch.indexing.datasources.deleteSchema",
              "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing"
              ]
            }
          }
        }
      }
    },
    "operations": {
      "resources": {
        "lro": {
          "methods": {
            "list": {
              "flatPath": "v1/operations/{operationsId}/lro",
              "id": "cloudsearch.operations.lro.list",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}/lro",
              "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
              "httpMethod": "GET",
              "parameters": {
                "pageSize": {
                  "location": "query",
                  "description": "The standard list page size.",
                  "format": "int32",
                  "type": "integer"
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "The standard list filter."
                },
                "name": {
                  "pattern": "^operations/.*$",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The name of the operation's parent resource."
                },
                "pageToken": {
                  "location": "query",
                  "description": "The standard list page token.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud_search",
                "https://www.googleapis.com/auth/cloud_search.debug",
                "https://www.googleapis.com/auth/cloud_search.indexing",
                "https://www.googleapis.com/auth/cloud_search.settings",
                "https://www.googleapis.com/auth/cloud_search.settings.indexing",
                "https://www.googleapis.com/auth/cloud_search.settings.query"
              ],
              "response": {
                "$ref": "ListOperationsResponse"
              }
            }
          }
        }
      },
      "methods": {
        "get": {
          "response": {
            "$ref": "Operation"
          },
          "parameters": {
            "name": {
              "description": "The name of the operation resource.",
              "location": "path",
              "required": true,
              "pattern": "^operations/.*$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "id": "cloudsearch.operations.get",
          "path": "v1/{+name}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud_search",
            "https://www.googleapis.com/auth/cloud_search.debug",
            "https://www.googleapis.com/auth/cloud_search.indexing",
            "https://www.googleapis.com/auth/cloud_search.settings",
            "https://www.googleapis.com/auth/cloud_search.settings.indexing",
            "https://www.googleapis.com/auth/cloud_search.settings.query"
          ],
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "flatPath": "v1/operations/{operationsId}"
        }
      }
    }
  },
  "description": "Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.",
  "protocol": "rest",
  "name": "cloudsearch",
  "version": "v1",
  "documentationLink": "https://developers.google.com/cloud-search/docs/guides/",
  "discoveryVersion": "v1",
  "ownerName": "Google",
  "servicePath": "",
  "schemas": {
    "GroupLinkSharingModificationEvent": {
      "id": "GroupLinkSharingModificationEvent",
      "properties": {
        "newStatus": {
          "enum": [
            "UNKNOWN_LINK_SHARING_STATUS",
            "LINK_SHARING_ON",
            "LINK_SHARING_OFF",
            "NOT_AVAILABLE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "Link sharing is turned on.",
            "Link sharing is turned off.",
            "Link sharing is not available for the conversation."
          ]
        }
      },
      "type": "object"
    },
    "Triggers": {
      "type": "object",
      "id": "Triggers",
      "properties": {
        "triggers": {
          "items": {
            "$ref": "Trigger"
          },
          "type": "array",
          "description": "A list of triggers."
        }
      }
    },
    "AppsDynamiteSharedOrganizationInfoCustomerInfo": {
      "id": "AppsDynamiteSharedOrganizationInfoCustomerInfo",
      "properties": {
        "customerId": {
          "$ref": "CustomerId"
        }
      },
      "type": "object"
    },
    "QueryInterpretation": {
      "type": "object",
      "id": "QueryInterpretation",
      "properties": {
        "reason": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Natural language interpretation of the query is used to fetch the search results.",
            "Query and document terms similarity is used to selectively broaden the query to retrieve additional search results since enough results were not found for the user query. Interpreted query will be empty for this case."
          ],
          "description": "The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE.",
          "enum": [
            "UNSPECIFIED",
            "QUERY_HAS_NATURAL_LANGUAGE_INTENT",
            "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY"
          ]
        },
        "interpretedQuery": {
          "type": "string",
          "description": "The interpretation of the query used in search. For example, queries with natural language intent like \"email from john\" will be interpreted as \"from:john source:mail\". This field will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY."
        },
        "interpretationType": {
          "enumDescriptions": [
            "Neither the natural language interpretation, nor a broader version of the query is used to fetch the search results.",
            "The results from original query are blended with other results. The reason for blending these other results with the results from original query is populated in the 'Reason' field below.",
            "The results from original query are replaced. The reason for replacing the results from original query is populated in the 'Reason' field below."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "BLEND",
            "REPLACE"
          ]
        }
      }
    },
    "ImapsyncFolderAttributeFolderMessage": {
      "properties": {
        "uid": {
          "description": "UID of the message.",
          "type": "string",
          "format": "uint64"
        },
        "flags": {
          "$ref": "ImapsyncFolderAttributeFolderMessageFlags",
          "description": "Flags of the message. Represents unseen and flagged state."
        }
      },
      "type": "object",
      "id": "ImapsyncFolderAttributeFolderMessage"
    },
    "SessionEvent": {
      "description": "A session event is something that happens to the streaming session in a conference.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of event.",
          "enumDescriptions": [
            "This is never used.",
            "Streaming session was started or is being started by a user.",
            "Streaming session was stopped by a user.",
            "Streaming session was cancelled by a user.",
            "Streaming session was cancelled by the server because of a failure during session initialization.",
            "Streaming session was cancelled by the server because the session initiator left the conference during initialization. When the initiator leaves after the session is started, no event is triggered.",
            "Streaming session is about to be stopped by the server because the session is about to reach the maximum duration.",
            "Streaming session was stopped because the session reached the maximum duration.",
            "Streaming session was stopped because there were no devices left in the conference.",
            "Streaming session was stopped because of an internal error."
          ],
          "enum": [
            "EVENT_UNSPECIFIED",
            "STARTED_BY_USER",
            "STOPPED_BY_USER",
            "CANCELLED_BY_USER",
            "CANCELLED_INITIALIZATION_FAILED",
            "CANCELLED_INITIATOR_LEFT",
            "ACTIVE_ABOUT_TO_STOP_TOO_LONG",
            "STOPPED_TOO_LONG",
            "STOPPED_ALL_DEVICES_LEFT",
            "STOPPED_INTERNAL_FAILURES"
          ]
        },
        "deviceId": {
          "description": "The initiator of the latest event of the streaming session. It will be set for all user events (`type` is 100-199) and unset for all server events(`type` is 200-299).",
          "type": "string"
        }
      },
      "id": "SessionEvent",
      "type": "object"
    },
    "SearchApplication": {
      "properties": {
        "dataSourceRestrictions": {
          "description": "Retrictions applied to the configurations. The maximum number of elements is 10.",
          "type": "array",
          "items": {
            "$ref": "DataSourceRestriction"
          }
        },
        "defaultFacetOptions": {
          "description": "The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.",
          "items": {
            "$ref": "FacetOptions"
          },
          "type": "array"
        },
        "scoringConfig": {
          "$ref": "ScoringConfig",
          "description": "Configuration for ranking results."
        },
        "displayName": {
          "description": "Display name of the Search Application. The maximum length is 300 characters.",
          "type": "string"
        },
        "returnResultThumbnailUrls": {
          "type": "boolean",
          "description": "With each result we should return the URI for its thumbnail (when applicable)"
        },
        "name": {
          "description": "The name of the Search Application. Format: searchapplications/{application_id}.",
          "type": "string"
        },
        "defaultSortOptions": {
          "description": "The default options for sorting the search results",
          "$ref": "SortOptions"
        },
        "sourceConfig": {
          "description": "Configuration for a sources specified in data_source_restrictions.",
          "type": "array",
          "items": {
            "$ref": "SourceConfig"
          }
        },
        "operationIds": {
          "type": "array",
          "description": "Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "enableAuditLog": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for requests made for the search application in query APIs."
        },
        "queryInterpretationConfig": {
          "description": "The default options for query interpretation",
          "$ref": "QueryInterpretationConfig"
        }
      },
      "description": "SearchApplication",
      "type": "object",
      "id": "SearchApplication"
    },
    "AppsDynamiteSharedTasksMessageIntegrationPayload": {
      "type": "object",
      "properties": {},
      "id": "AppsDynamiteSharedTasksMessageIntegrationPayload",
      "description": "A payload containing Tasks metadata for rendering a live card. Currently not used by the Tasks integration."
    },
    "AppsDynamiteSharedDlpMetricsMetadata": {
      "properties": {
        "dlpStatus": {
          "description": "[required] Describes the DLP status of message send and attachment upload events.",
          "enumDescriptions": [
            "",
            "Rule fetch and evaluation are skipped because DLP experiment is not enabled.",
            "Rule fetch and evaluation are skipped because there is no rule to be fetched (e.g. message is sent from a consumer, or there is no message.)",
            "Rule fetch happened, but rule evalution is skipped because the fetch returned no rules.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable.",
            "Rule fetch and evaluation were performed and completed successfully.",
            "DLP scan was attempted but timed out.",
            "Generic DLP failure. This case covers any other errors/exceptions in the Chat backend that caused the DLP scan to fail."
          ],
          "type": "string",
          "enum": [
            "DLP_STATUS_UNKNOWN",
            "DLP_DISABLED",
            "DLP_ENABLED_NO_RULE_FETCH",
            "DLP_ENABLED_RULES_FETCHED_NO_RULES",
            "DLP_ENABLED_RULES_FETCHED_NO_APPLICABLE_RULES",
            "DLP_ENABLED_RULES_FETCHED_AND_EVALUATED",
            "DLP_ENABLED_SCAN_TIMEOUT",
            "DLP_ENABLED_SCAN_FAILED"
          ]
        }
      },
      "description": "LINT.IfChange",
      "type": "object",
      "id": "AppsDynamiteSharedDlpMetricsMetadata"
    },
    "UpdateSubject": {
      "type": "object",
      "id": "UpdateSubject",
      "properties": {
        "subject": {
          "type": "string"
        }
      }
    },
    "DriveMetadata": {
      "type": "object",
      "id": "DriveMetadata",
      "properties": {
        "title": {
          "description": "Title of the Drive Resource",
          "type": "string"
        },
        "canShare": {
          "type": "boolean",
          "description": "Can the current user share this resource"
        },
        "thumbnailHeight": {
          "format": "int32",
          "type": "integer",
          "description": "Thumbnail image of the Drive Resource"
        },
        "shouldNotRender": {
          "type": "boolean",
          "description": "If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip."
        },
        "urlFragment": {
          "type": "string",
          "description": "Url string fragment that generally indicates the specific location in the linked file. Example: #header=h.123abc456. If the fragment is not present this will not be present and therefore default to an empty string. The \"#\" will not be included."
        },
        "externalMimetype": {
          "description": "External mimetype of the Drive Resource (Useful for creating Drive URL) See: http://b/35219462",
          "type": "string"
        },
        "wrappedResourceKey": {
          "$ref": "WrappedResourceKey",
          "description": "This is considered SPII and should not be logged."
        },
        "shortcutAuthorizedItemId": {
          "description": "Shortcut ID of this drive file in the shared drive, which is associated with a named room this file was shared in. Shortcuts will not be created for DMs or unnamed rooms. This is populated after the DriveMetadata is migrated to shared drive. go/chat-shared-drive-uploads.",
          "$ref": "AuthorizedItemId"
        },
        "canView": {
          "type": "boolean",
          "description": "Can the current user view this resource"
        },
        "driveAction": {
          "enumDescriptions": [
            "No organize action should be shown.",
            "Show \"Add to Drive\" button, for adding file that doesn't exist in Drive to Drive. Note that deleted Drive files that still exist (i.e. in your Trash) will still be ORGANIZE (this is consistent with Gmail Drive attachments).",
            "Show \"Move\" button, for organizing a Drive file the user has permission to move.",
            "Show \"Add shortcut\" button, for adding a shortcut to a Drive file the user does not have permission to move.",
            "Show \"Add another shortcut\" button, for Drive files the user has already created a shortcut to."
          ],
          "description": "DriveAction for organizing this file in Drive. If the user does not have access to the Drive file, the value will be DriveAction.DRIVE_ACTION_UNSPECIFIED. This field is only set when part of a FileResult in a ListFilesResponse.",
          "type": "string",
          "enum": [
            "DRIVE_ACTION_UNSPECIFIED",
            "ADD_TO_DRIVE",
            "ORGANIZE",
            "ADD_SHORTCUT",
            "ADD_ANOTHER_SHORTCUT"
          ]
        },
        "mimetype": {
          "type": "string",
          "description": "Mimetype of the Drive Resource"
        },
        "driveState": {
          "enum": [
            "DRIVE_STATE_UNSPECIFIED",
            "IN_MY_DRIVE",
            "IN_TEAM_DRIVE",
            "SHARED_IN_DRIVE",
            "NOT_IN_DRIVE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value",
            "File in My Drive",
            "File in Team Drive",
            "File in someone else's Drive, but is shared with the current user",
            "File not in drive"
          ]
        },
        "isDownloadRestricted": {
          "type": "boolean",
          "description": "Deprecated. Whether the setting to restrict downloads is enabled for this file. This was previously used to determine whether to hide the download and print buttons in the UI, but is no longer used by clients, because Projector now independently queries Drive to ensure that we have the most up-to-date value."
        },
        "embedUrl": {
          "$ref": "TrustedResourceUrlProto",
          "readOnly": true,
          "description": "Output only. Trusted Resource URL for drive file embedding."
        },
        "id": {
          "description": "Drive resource ID of the artifact.",
          "type": "string"
        },
        "isOwner": {
          "description": "If the current user is the Drive file's owner. The field is currently only set for Annotations for the ListFiles action (as opposed to fetching Topics/Messages with Drive annotations).",
          "type": "boolean"
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "Thumbnail image of the Drive Resource"
        },
        "aclFixRequest": {
          "$ref": "AclFixRequest"
        },
        "aclFixStatus": {
          "$ref": "AclFixStatus"
        },
        "encryptedDocId": {
          "type": "boolean",
          "description": "Indicates whether the Drive link contains an encrypted doc ID. If true, Dynamite should not attempt to query the doc ID in Drive Service. See go/docid-encryption for details."
        },
        "organizationDisplayName": {
          "description": "The display name of the organization owning the Drive item.",
          "type": "string"
        },
        "legacyUploadMetadata": {
          "$ref": "LegacyUploadMetadata",
          "description": "Only present if this DriveMetadata is converted from an UploadMetadata."
        },
        "encryptedResourceKey": {
          "description": "This is deprecated and unneeded. TODO (b/182479059): Remove this.",
          "type": "string"
        },
        "thumbnailWidth": {
          "description": "Thumbnail image of the Drive Resource",
          "type": "integer",
          "format": "int32"
        },
        "canEdit": {
          "type": "boolean",
          "description": "Can the current user edit this resource"
        }
      },
      "description": "Annotation metadata for Drive artifacts."
    },
    "VideoCallMetadata": {
      "properties": {
        "meetingSpace": {
          "$ref": "MeetingSpace",
          "description": "Thor meeting space."
        },
        "shouldNotRender": {
          "description": "If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip.",
          "type": "boolean"
        },
        "wasCreatedInCurrentGroup": {
          "description": "Whether this meeting space was created via Dynamite in this Dynamite group.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "VideoCallMetadata"
    },
    "SearchApplicationQueryStats": {
      "type": "object",
      "description": "Search application level query stats per date",
      "properties": {
        "date": {
          "$ref": "Date",
          "description": "The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned."
        },
        "queryCountByStatus": {
          "items": {
            "$ref": "QueryCountByStatus"
          },
          "type": "array"
        }
      },
      "id": "SearchApplicationQueryStats"
    },
    "GoogleChatV1WidgetMarkupTextButton": {
      "type": "object",
      "properties": {
        "text": {
          "description": "The text of the button.",
          "type": "string"
        },
        "onClick": {
          "description": "The onclick action of the button.",
          "$ref": "GoogleChatV1WidgetMarkupOnClick"
        }
      },
      "description": "A button with text and onclick action.",
      "id": "GoogleChatV1WidgetMarkupTextButton"
    },
    "SessionContext": {
      "id": "SessionContext",
      "properties": {
        "authTime": {
          "description": "Time at which this activity's session was authenticated, in seconds since the epoch.",
          "format": "int64",
          "type": "string"
        },
        "imapSessionContext": {
          "$ref": "ImapSessionContext",
          "description": "Imap session context for Bond/Gmail integration"
        },
        "oauthLoginId": {
          "format": "int32",
          "type": "integer",
          "description": "OAuth login ID."
        },
        "delegateUserId": {
          "description": "Gaia ID of the authenticated user when delegate access is active. In such sessions the main gaia ID is that of the delegator, i.e. the account being accessed.",
          "format": "int64",
          "type": "string"
        },
        "dusi": {
          "description": "Device User Session ID, see go/dusi.",
          "type": "string"
        },
        "oauthProjectId": {
          "description": "The devconsole project ID of the developer who authenticated with OAuth.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "TopicId": {
      "type": "object",
      "properties": {
        "topicId": {
          "type": "string",
          "description": "Opaque, server-assigned ID of the Topic. While this ID is guaranteed to be unique within the Space, it's not guaranteed to be globally unique. Internal usage: this field can be empty in the following cases: 1. To create the first message in a topic. 2. To list last N messages of a Space (regardless of topic)."
        },
        "groupId": {
          "description": "The Space or DM that the topic belongs to.",
          "$ref": "GroupId"
        }
      },
      "id": "TopicId"
    },
    "WidgetMarkup": {
      "id": "WidgetMarkup",
      "properties": {
        "imageKeyValue": {
          "$ref": "ImageKeyValue"
        },
        "textKeyValue": {
          "$ref": "TextKeyValue"
        },
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "Button"
          },
          "description": "buttons is also oneof data and only one of these fields should be set."
        },
        "selectionControl": {
          "$ref": "SelectionControl"
        },
        "textParagraph": {
          "$ref": "TextParagraph",
          "description": "Read-only Widgets"
        },
        "grid": {
          "$ref": "Grid"
        },
        "horizontalAlignment": {
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "description": "The horizontal alignment of this widget."
        },
        "divider": {
          "$ref": "Divider"
        },
        "keyValue": {
          "$ref": "KeyValue"
        },
        "dateTimePicker": {
          "$ref": "DateTimePicker"
        },
        "menu": {
          "description": "Input Widgets",
          "$ref": "Menu"
        },
        "image": {
          "$ref": "Image"
        },
        "textField": {
          "$ref": "TextField"
        }
      },
      "type": "object"
    },
    "StreamingSessionInfo": {
      "id": "StreamingSessionInfo",
      "properties": {
        "applicationType": {
          "enumDescriptions": [
            "This is never used.",
            "A meeting recording saved to a video file in Google Drive.",
            "A *Google Live* managed stream.",
            "A meeting broadcast."
          ],
          "enum": [
            "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
            "RECORDING",
            "GLIVE_STREAM",
            "BROADCAST"
          ],
          "type": "string",
          "description": "The application type of the current streaming session."
        },
        "viewerStats": {
          "$ref": "StreamViewerStats",
          "description": "Contains information about viewers of the livestream. It is only set when application type is BROADCAST."
        },
        "sessionId": {
          "description": "This is the REST name and unique identifier of this streaming session and has the form `spaces//recordings/` This is returned whenever status is either `STARTING` or `STARTED`.",
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string",
          "description": "The display name of the owner of the recording output. It's only set when there will be uploaded recordings. Currently, it's only set when application type is RECORDING or GLIVE_STREAM."
        },
        "status": {
          "description": "The current status of this streaming session. This can be used by clients to show session status indicator and/or notification.",
          "type": "string",
          "enumDescriptions": [
            "This value is never used.",
            "The streaming session is inactive. This means either it's not started yet or it's already stopped.",
            "The streaming session is about to begin. The status will be updated to LIVE when the streaming session actually starts, which happens when all the backend plumbing is set up.",
            "The streaming session is live. Any media sent to the conference may be included in the resulting recording/broadcast."
          ],
          "enum": [
            "STATUS_UNSPECIFIED",
            "INACTIVE",
            "STARTING",
            "LIVE"
          ]
        },
        "viewerAccessPolicy": {
          "enumDescriptions": [
            "Used only when broadcast is not enabled, or an unknown enum value is used.",
            "Only authenticated Google accounts belonging to the same organization as the meeting organizer can access the broadcast.",
            "Anyone with the broadcast view URL can access the broadcast."
          ],
          "description": "The policy that controls who can view the broadcast. This setting applies for broadcast session.",
          "enum": [
            "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
            "ORGANIZATION",
            "PUBLIC"
          ],
          "type": "string"
        },
        "trainingEnabled": {
          "type": "boolean",
          "description": "When true, this recording may be used for training new transcription models."
        },
        "latestSessionEvent": {
          "$ref": "SessionEvent",
          "description": "The latest streaming session event. This can be used by clients to help explain what is going on, why recording stopped, etc. This will always be set to a valid event and consistent with the status. It can be set when current session is inactive to indicate latest event that makes current session to become inactive."
        }
      },
      "description": "Information about a streaming session in conference.",
      "type": "object"
    },
    "ValueFilter": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value to be compared with.",
          "$ref": "Value"
        },
        "operatorName": {
          "description": "The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.",
          "type": "string"
        }
      },
      "id": "ValueFilter"
    },
    "Trigger": {
      "id": "Trigger",
      "properties": {
        "sliceFireTimeUs": {
          "description": "The slice_fire_time_us is automatically computed and stored as part of the trigger write. It represents the exact fire time at which the trigger will be queued to fire and will satisfy fire_time_us \u003c slice_fire_time_us \u003c= fire_time_us + batch_time_us Triggers have an index row in the slice trigger index with the row prefix matching this time. Note that this field is internal to gmail_cp and is ignored if set by external clients when adding / updating triggers.",
          "type": "string",
          "format": "int64"
        },
        "batchTimeUs": {
          "type": "string",
          "description": "Maximum possible delay in micros that can be tolerated so triggers can be batched, which makes processing more efficient compared to firing triggers individually. Note that the actual fire time will be somewhere in the timerange interval [fire_time_us, fire_time_us + batch_time_us).",
          "format": "int64"
        },
        "triggerAction": {
          "description": "Trigger action to perform. This should always be set.",
          "$ref": "TriggerAction"
        },
        "fireTimeUs": {
          "description": "Earliest time to fire at in microseconds. The actual time that the trigger will fire will be in the timerange: [fire_time_us, fire_time_us + batch_time_us).",
          "format": "int64",
          "type": "string"
        },
        "rpcOptions": {
          "$ref": "RpcOptions"
        },
        "key": {
          "description": "The trigger key, if applicable.",
          "type": "string"
        },
        "actionType": {
          "type": "integer",
          "description": "Each dispatcher should use an enum to for the actions that it supports. If a dispatcher has only one action, this does not need to be set. (It can be expanded later, defining the default behaviour as type 0.) For purposes such as batching, the type of a trigger is (dispatcher, action_type).",
          "format": "uint32"
        },
        "dispatchId": {
          "format": "uint32",
          "type": "integer",
          "description": "Must be set for DISPATCHER_STUBBY_DISPATCHER."
        },
        "jobsettedServerSpec": {
          "$ref": "JobsettedServerSpec",
          "description": "Must be set for DISPATCHER_JOBSETTED_PRIMARY."
        },
        "dispatcher": {
          "enum": [
            "DISPATCHER_COPROC",
            "DISPATCHER_JOBSETTED_PRIMARY",
            "DISPATCHER_STRATUS",
            "DISPATCHER_TASKS_SERVER",
            "DISPATCHER_STUBBY_DISPATCHER",
            "DISPATCHER_CS"
          ],
          "description": "Which server should interpret action_type.",
          "type": "string",
          "enumDescriptions": [
            "Replace ACTION_INVOKE_X; the CS and Stratus are no longer limited to a single type of action. Each additional remote client should be defined here.",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "triggerKey": {
          "$ref": "TriggerKey",
          "description": "The TriggerKey will uniquely determine a trigger within a given context. A context is a single message for message triggers or a single account for account triggers."
        }
      },
      "type": "object"
    },
    "Recipient": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      },
      "id": "Recipient"
    },
    "AppsDynamiteStorageOpenLinkAppUri": {
      "properties": {
        "androidIntent": {
          "$ref": "AppsDynamiteStorageOpenLinkAppUriIntent",
          "description": "An intent object to be opened in the corresponding android hosting app."
        },
        "companionUri": {
          "type": "string",
          "description": "A companion uri string to be opened in the chat companion window. on the web."
        },
        "iosUri": {
          "type": "string",
          "description": "A uri string to be opened in the corresponding iOS hosting app."
        }
      },
      "type": "object",
      "description": "Represents the platform specific uri/intent to open for each client.",
      "id": "AppsDynamiteStorageOpenLinkAppUri"
    },
    "BroadcastSessionInfo": {
      "id": "BroadcastSessionInfo",
      "description": "Information about a broadcast session.",
      "type": "object",
      "properties": {
        "ingestionId": {
          "type": "string",
          "description": "Input only. Deprecated field, should not be used."
        },
        "broadcastSessionId": {
          "description": "A unique server-generated ID for the broadcast session.",
          "type": "string"
        },
        "broadcastStats": {
          "$ref": "BroadcastStats",
          "description": "Output only. Current broadcast session's statistics.",
          "readOnly": true
        },
        "sessionStateInfo": {
          "description": "Broadcast session's state information.",
          "$ref": "SessionStateInfo"
        }
      }
    },
    "AffectedMembership": {
      "properties": {
        "priorMembershipRole": {
          "enum": [
            "ROLE_UNKNOWN",
            "ROLE_NONE",
            "ROLE_INVITEE",
            "ROLE_MEMBER",
            "ROLE_OWNER"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "This role is used when a user is forcibly removed from a room by another user. They will no longer be able to search for the room, but their history will be retained.",
            "This role is used for two purposes. 1. A group is invited to a room, making it discoverable for its members. 2. A user was part of a room, but willingly left the room.",
            "--- Following roles are for joined members of a roster. --- Default role for any joined user. Has basic capabilities within a room.",
            "Role assigned to room creators and explicitly promoted members. Has broad powers to manage the room."
          ]
        },
        "targetMembershipRole": {
          "enum": [
            "ROLE_UNKNOWN",
            "ROLE_NONE",
            "ROLE_INVITEE",
            "ROLE_MEMBER",
            "ROLE_OWNER"
          ],
          "enumDescriptions": [
            "",
            "This role is used when a user is forcibly removed from a room by another user. They will no longer be able to search for the room, but their history will be retained.",
            "This role is used for two purposes. 1. A group is invited to a room, making it discoverable for its members. 2. A user was part of a room, but willingly left the room.",
            "--- Following roles are for joined members of a roster. --- Default role for any joined user. Has basic capabilities within a room.",
            "Role assigned to room creators and explicitly promoted members. Has broad powers to manage the room."
          ],
          "type": "string"
        },
        "priorMembershipState": {
          "enumDescriptions": [
            "Default state, do not use",
            "An invitation to the space has been sent",
            "User has joined the space",
            "User is not a member",
            "This state should never be stored in Spanner. It is a state for responses to the clients to indicate that membership mutations have failed and the member is in its previous state."
          ],
          "type": "string",
          "enum": [
            "MEMBER_UNKNOWN",
            "MEMBER_INVITED",
            "MEMBER_JOINED",
            "MEMBER_NOT_A_MEMBER",
            "MEMBER_FAILED"
          ]
        },
        "affectedMember": {
          "$ref": "MemberId"
        }
      },
      "id": "AffectedMembership",
      "type": "object",
      "description": "Earlier we used to populate just the affected_members list and inferred the new membership state (roles didn't exist back then) from the Type. go/dynamite-finra required backend to know the previous membership state to reconstruct membership history. The proper solution involved cleaning up up Type enum, but it was used in many, many places. This was added as a stop-gap solution to unblock FINRA without breaking everything. Later role update and target audience update started relying on this to communicate information to clients about what transition happened. So this is now required to be populated and should be in sync with affected_members for new messages."
    },
    "ItemStatus": {
      "properties": {
        "repositoryErrors": {
          "description": "Repository error reported by connector.",
          "items": {
            "$ref": "RepositoryError"
          },
          "type": "array"
        },
        "processingErrors": {
          "description": "Error details in case the item is in ERROR state.",
          "items": {
            "$ref": "ProcessingError"
          },
          "type": "array"
        },
        "code": {
          "type": "string",
          "description": "Status code.",
          "enum": [
            "CODE_UNSPECIFIED",
            "ERROR",
            "MODIFIED",
            "NEW_ITEM",
            "ACCEPTED"
          ],
          "enumDescriptions": [
            "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
            "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
            "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
            "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
            "API has accepted the up-to-date data of this item."
          ]
        }
      },
      "id": "ItemStatus",
      "type": "object",
      "description": "This contains item's status and any errors."
    },
    "CustomerSessionStats": {
      "id": "CustomerSessionStats",
      "properties": {
        "searchSessionsCount": {
          "format": "int64",
          "description": "The count of search sessions on the day",
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedTasksAnnotationDataDeletionChange": {
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationDataDeletionChange",
      "properties": {}
    },
    "YouTubeBroadcastSessionInfo": {
      "type": "object",
      "id": "YouTubeBroadcastSessionInfo",
      "properties": {
        "broadcastStats": {
          "description": "Current broadcast session's statistics.",
          "$ref": "YouTubeBroadcastStats"
        },
        "youTubeBroadcastSessionId": {
          "type": "string",
          "description": "A unique server-generated ID for the broadcast session."
        },
        "sessionStateInfo": {
          "$ref": "SessionStateInfo",
          "description": "YouTube broadcast session's state information."
        },
        "youTubeLiveBroadcastEvent": {
          "description": "The YouTube Live broadcast event that is being streamed to.",
          "$ref": "YouTubeLiveBroadcastEvent"
        }
      },
      "description": "Information about a YouTube broadcast session."
    },
    "TransactionDebugInfo": {
      "type": "object",
      "properties": {},
      "id": "TransactionDebugInfo",
      "description": "HistoryRecord for debug info associated with the transaction, namely: TXN_DEBUG_INFO TODO(b/143845917) This is a short-term workaround for unblocking fusebox writes migration. Clean up the code or land a long-term solution after the rollout. go/diff-to-historyrecord"
    },
    "Roster": {
      "id": "Roster",
      "description": "Roster profile information.",
      "properties": {
        "rosterState": {
          "description": "Roster deletion state - considered active unless set to deleted",
          "enumDescriptions": [
            "",
            "Roster is active",
            "Roster deleted"
          ],
          "type": "string",
          "enum": [
            "ROSTER_STATE_UNKNOWN",
            "ROSTER_ACTIVE",
            "ROSTER_DELETED"
          ]
        },
        "rosterGaiaKey": {
          "description": "Roster gaia key, usually an email address. Set in looking up rosters response.",
          "type": "string"
        },
        "membershipCount": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "$ref": "RosterId"
        },
        "avatarUrl": {
          "type": "string"
        },
        "isMembershipVisibleToCaller": {
          "type": "boolean",
          "description": "Whether caller has visibility into members of the roster."
        },
        "name": {
          "type": "string"
        },
        "segmentedMembershipCounts": {
          "$ref": "AppsDynamiteSharedSegmentedMembershipCounts",
          "description": "Roster membership count. May contain counts based on member type and membership state."
        }
      },
      "type": "object"
    },
    "EventProto": {
      "description": "Represents the invitees or other users associated with a Google+ Event (see http://goto/events-backend-design).",
      "properties": {
        "memberType": {
          "format": "int32",
          "type": "integer",
          "description": "The type of Event members to consider, e.g. \"all members\" vs. \"owners\" vs. \"admins\". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See event.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with event. Currently required."
        },
        "eventId": {
          "type": "string",
          "description": "Event IDs consist of alphanumeric characters and colons. Currently required."
        }
      },
      "id": "EventProto",
      "type": "object"
    },
    "MatchRange": {
      "description": "Matched range of a snippet [start, end).",
      "type": "object",
      "id": "MatchRange",
      "properties": {
        "end": {
          "description": "End of the match in the snippet.",
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "format": "int32",
          "type": "integer",
          "description": "Starting position of the match in the snippet."
        }
      }
    },
    "ContactGroupProto": {
      "id": "ContactGroupProto",
      "type": "object",
      "description": "A group of contacts for a given user, as described in http://cs/p#google3/focus/backend/proto/backend.proto Historically (and in still-existing ACLs), this was used to represent Google+ circles as well as contact groups, but this use is now deprecated. New code should use the CIRCLE principal type to represent Google+ circles.",
      "properties": {
        "ownerGaiaId": {
          "format": "int64",
          "type": "string"
        },
        "requiredConsistencyTimestampUsec": {
          "format": "int64",
          "type": "string",
          "description": "If present, then tests for membership in this ContactGroup must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this group supports checking consistency timestamps. For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present."
        },
        "groupId": {
          "description": "Group ID is unique only relative to the owner's Gaia ID.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "LabelDeleted": {
      "type": "object",
      "properties": {},
      "id": "LabelDeleted",
      "description": "A label was deleted."
    },
    "AuthorizedItemId": {
      "id": "AuthorizedItemId",
      "description": "A combination of an identifier for a Drive resource (e.g. file, folder, or drive) and any secrets needed to access it. The secrets should never be logged, and this proto annotates those secret fields to ensure that they are not. Clients are encouraged to use this proto rather than defining their own, to ensure that secrets are correctly annotated.",
      "properties": {
        "id": {
          "description": "Serialized ID of the Drive resource",
          "type": "string"
        },
        "resourceKey": {
          "description": "Resource key of the Drive item. This field should be unset if, depending on the context, the item does not have a resource key, or if none was specified. This must never be logged.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "YouTubeLiveBroadcastEvent": {
      "properties": {
        "brandAccountGaiaId": {
          "type": "string",
          "description": "Input only. If the channel_id is for a YouTube Channel owned by a Brand Account, client is required to populate this field with the obfuscated gaia id of the Brand account when starting the broadcast."
        },
        "broadcastId": {
          "type": "string",
          "description": "Input only. The broadcast id, used to control the lifecycle of the event on YouTube"
        },
        "channelId": {
          "type": "string",
          "description": "YouTube Channel associated with the broadcast."
        },
        "viewUrl": {
          "description": "Output only. A URL that can be used to watch the meeting broadcast. Will be populated by the backend.",
          "type": "string",
          "readOnly": true
        }
      },
      "description": "Information about the broadcast to YouTube.",
      "type": "object",
      "id": "YouTubeLiveBroadcastEvent"
    },
    "UpdateDraftActionMarkup": {
      "id": "UpdateDraftActionMarkup",
      "properties": {
        "updateBccRecipients": {
          "$ref": "UpdateBccRecipients",
          "description": "If set, replaces the existing Bcc recipients of the draft the user is currently editing."
        },
        "updateSubject": {
          "description": "If set, replaces the existing subject of the draft the user is currently editing.",
          "$ref": "UpdateSubject"
        },
        "updateBody": {
          "description": "A field that contains a series of update actions to perform on the draft body that the user is currently editing.",
          "$ref": "UpdateBody"
        },
        "updateCcRecipients": {
          "$ref": "UpdateCcRecipients",
          "description": "If set, replaces the existing Cc recipients of the draft the user is currently editing."
        },
        "updateToRecipients": {
          "$ref": "UpdateToRecipients",
          "description": "If set, replaces the existing To recipients of the draft the user is currently editing."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedGroupVisibility": {
      "properties": {
        "state": {
          "enum": [
            "UNKNOWN",
            "PRIVATE",
            "PUBLIC"
          ],
          "type": "string",
          "enumDescriptions": [
            "Do not use.",
            "Explicitly invited users may join the room.",
            "Anyone in the domain may join the room."
          ]
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedGroupVisibility"
    },
    "GetSearchApplicationUserStatsResponse": {
      "properties": {
        "stats": {
          "items": {
            "$ref": "SearchApplicationUserStats"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "GetSearchApplicationUserStatsResponse"
    },
    "CseInfo": {
      "properties": {
        "wrappedKey": {
          "type": "string",
          "format": "byte",
          "description": "The wrapped CSE key used by this conference."
        },
        "cseDomain": {
          "type": "string",
          "description": "CSE domain name claimed by the meeting owner's company. This field is expected to be used for display purposes only, i.e., \"Extra encryption added by $cse_domain\". It can differ from the `cse_domain` as defined elsewhere on the User, in the case of cross-domain meetings."
        }
      },
      "type": "object",
      "description": "Information needed for Client-side Encryption.",
      "id": "CseInfo"
    },
    "TopicState": {
      "id": "TopicState",
      "properties": {
        "labelIdMessageCount": {
          "description": "Map of label =\u003e count of topic constituent messages with label These only contain counts of labels that are relevant for topic normalization/denormalization. Eg. If a topic thread has 5 constituents, 4 of which are in inbox, this will contain ^i =\u003e 4. Some labels of interest are archive, inbox, trash, spam, etc.",
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "numConstituents": {
          "description": "Number of constituents for this entity.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "State of an topic thread as maintained within Tingle.",
      "type": "object"
    },
    "FacetOptions": {
      "type": "object",
      "properties": {
        "objectType": {
          "description": "If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.",
          "type": "string"
        },
        "integerFacetingOptions": {
          "description": "If set, describes integer faceting options for the given integer property. The corresponding integer property in the schema should be marked isFacetable. The number of buckets returned would be minimum of this and num_facet_buckets.",
          "$ref": "IntegerFacetingOptions"
        },
        "numFacetBuckets": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100."
        },
        "sourceName": {
          "type": "string",
          "description": "Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used."
        },
        "operatorName": {
          "type": "string",
          "description": "The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions"
        }
      },
      "description": "Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.",
      "id": "FacetOptions"
    },
    "LabelRenamed": {
      "properties": {
        "oldCanonicalName": {
          "type": "string"
        }
      },
      "description": "A label was renamed.",
      "type": "object",
      "id": "LabelRenamed"
    },
    "CustomerId": {
      "properties": {
        "customerId": {
          "type": "string"
        }
      },
      "id": "CustomerId",
      "type": "object",
      "description": "Represents a GSuite customer ID. Obfuscated with CustomerIdObfuscator."
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention": {
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "DIRECT",
            "ALL"
          ],
          "description": "User mention type",
          "enumDescriptions": [
            "Mention type not specified.",
            "Mentioned directly by name.",
            "Mentioned by @all."
          ]
        }
      },
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention",
      "type": "object",
      "description": "Existence of this attribute indicates that the AF item is for a user mention item."
    },
    "User": {
      "properties": {
        "lastName": {
          "description": "Last or family name of the user",
          "type": "string"
        },
        "deleted": {
          "description": "Deleted flag, if true, means User has been soft-deleted/purged Deprecated. Use user_account_state field instead.",
          "type": "boolean"
        },
        "userProfileVisibility": {
          "enum": [
            "UNKNOWN_USER_PROFILE_VISIBILITY",
            "FULL_PROFILE",
            "PRIMARY_MAIL",
            "INVITEE_EMAIL",
            "DELETED_USER",
            "UNKNOWN_USER",
            "FAILURE"
          ],
          "type": "string",
          "description": "Visibility of user's Profile",
          "enumDescriptions": [
            "",
            "Caller has full visibility.",
            "Caller can only see target user's primary email from Gaia",
            "Caller can only see the email used to invite the target user",
            "Caller can only see the target user as a deleted user. Email is empty. Names are redacted as \"Deleted User\".",
            "Caller has no visibility to the target user at all. Email is empty. Names are redacted as \"Unknown User\".",
            "Stubby failed. Clients should always retry ASAP"
          ]
        },
        "id": {
          "description": "UserId",
          "$ref": "UserId"
        },
        "email": {
          "description": "Email ID of the user",
          "type": "string"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the user"
        },
        "avatarUrl": {
          "description": "URL for the avatar picture of the User in dynamite",
          "type": "string"
        },
        "botInfo": {
          "description": "Bot-specific profile information. Leave it empty for human users.",
          "$ref": "BotInfo"
        },
        "userAccountState": {
          "enumDescriptions": [
            "",
            "User has Dynamite enabled.",
            "User doesn't have Dynamite enabled. This includes service disabled by admin, or user's account is suspended",
            "User account is deleted",
            "Failed to retrieve user's info. Will use user's email address as name and first_name."
          ],
          "description": "State of user's Gaia Account",
          "enum": [
            "UNKNOWN_USER_ACCOUNT_STATE",
            "ENABLED",
            "DISABLED",
            "DELETED",
            "TEMPORARY_UNAVAILABLE"
          ],
          "type": "string"
        },
        "name": {
          "description": "Non-unique, user-defined display name of the User",
          "type": "string"
        },
        "blockRelationship": {
          "$ref": "AppsDynamiteSharedUserBlockRelationship",
          "description": "Information about whether the user is blocked by requester and/or has blocked requester."
        },
        "firstName": {
          "type": "string",
          "description": "First or given name of the user"
        },
        "isAnonymous": {
          "type": "boolean",
          "description": "Set to true if none of the depending services (Gaia, PeopleApi) returns any info for this user."
        },
        "phoneNumber": {
          "description": "Phone number(s) of the user",
          "items": {
            "$ref": "AppsDynamiteSharedPhoneNumber"
          },
          "type": "array"
        },
        "organizationInfo": {
          "$ref": "AppsDynamiteSharedOrganizationInfo",
          "description": "Information about whether the user is a consumer user, or the GSuite customer that they belong to."
        }
      },
      "id": "User",
      "description": "User profile information. This user is not necessarily member of a space.",
      "type": "object"
    },
    "EditMetadata": {
      "id": "EditMetadata",
      "type": "object",
      "description": "A message edit in Dynamite inserts a Babel-only item containing this field.",
      "properties": {}
    },
    "RetrievalImportance": {
      "properties": {
        "importance": {
          "type": "string",
          "enum": [
            "DEFAULT",
            "HIGHEST",
            "HIGH",
            "LOW",
            "NONE"
          ],
          "description": "Indicates the ranking importance given to property when it is matched during retrieval. Once set, the token importance of a property cannot be changed.",
          "enumDescriptions": [
            "Treat the match like a body text match.",
            "Treat the match like a match against title of the item.",
            "Treat the match with higher importance than body text.",
            "Treat the match with lower importance than body text.",
            "Do not match against this field during retrieval. The property can still be used for operator matching, faceting, and suggest if desired."
          ]
        }
      },
      "type": "object",
      "id": "RetrievalImportance"
    },
    "AppsDynamiteStorageCardSection": {
      "description": "A section contains a collection of widgets that are rendered vertically in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties, for example, float.",
      "id": "AppsDynamiteStorageCardSection",
      "properties": {
        "collapsible": {
          "description": "Indicates whether this section is collapsible. If a section is collapsible, the description must be given.",
          "type": "boolean"
        },
        "widgets": {
          "type": "array",
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "AppsDynamiteStorageWidget"
          }
        },
        "header": {
          "type": "string",
          "description": "The header of the section. Formatted text is supported."
        },
        "uncollapsibleWidgetsCount": {
          "format": "int32",
          "description": "The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RenameEvent": {
      "properties": {
        "originalName": {
          "type": "string"
        },
        "newName": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "RenameEvent"
    },
    "DateTimePicker": {
      "id": "DateTimePicker",
      "properties": {
        "timezoneOffsetDate": {
          "description": "The number representing the time-zone offset from UTC, in minutes. If set, the value_ms_epoch will be displayed in the specified time zone. If not set, it will use the user's timezone setting in client side.",
          "type": "integer",
          "format": "int32"
        },
        "onChange": {
          "description": "Triggered when the user clicks on the Save, or Clear button from the date / time picker dialog. Will only be triggered if the value changed as a result of the Save / Clear operation.",
          "$ref": "FormAction"
        },
        "name": {
          "type": "string",
          "description": "The name of the text field which is used in FormInput, and uniquely identifies this input."
        },
        "valueMsEpoch": {
          "description": "The value to display which can be the default value before user input or previous user input. It is represented in milliseconds (Epoch time). - For DATE_AND_TIME type, the full epoch value is used. - For DATE_ONLY type, only date of the epoch time is used. - For TIME_ONLY type, only time of the epoch time is used. For example, you can set epoch time to 3 * 60 * 60 * 1000 to represent 3am.",
          "type": "string",
          "format": "int64"
        },
        "label": {
          "description": "The label for the field, which is displayed to the user.",
          "type": "string"
        },
        "type": {
          "enum": [
            "UNSPECIFIED_TYPE",
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "The type of the DateTimePicker."
        }
      },
      "type": "object"
    },
    "ListQuerySourcesResponse": {
      "id": "ListQuerySourcesResponse",
      "description": "List sources response.",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "sources": {
          "items": {
            "$ref": "QuerySource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChatConserverDynamitePlaceholderMetadataEditMetadata": {
      "id": "ChatConserverDynamitePlaceholderMetadataEditMetadata",
      "type": "object",
      "properties": {},
      "description": "An edit was made in Dynamite."
    },
    "AppsDynamiteStorageOnClick": {
      "type": "object",
      "id": "AppsDynamiteStorageOnClick",
      "properties": {
        "openDynamicLinkAction": {
          "description": "An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
          "$ref": "AppsDynamiteStorageAction"
        },
        "openLink": {
          "description": "If specified, this onClick triggers an open link action.",
          "$ref": "AppsDynamiteStorageOpenLink"
        },
        "action": {
          "description": "If specified, an action is triggered by this onClick.",
          "$ref": "AppsDynamiteStorageAction"
        },
        "hostAppAction": {
          "description": "Triggers host app action on click directly without invoking form actions. This is currently not available to end-users and is used internal only.",
          "$ref": "HostAppActionMarkup"
        }
      }
    },
    "GroupDetailsUpdatedMetadata": {
      "id": "GroupDetailsUpdatedMetadata",
      "type": "object",
      "properties": {
        "newGroupDetails": {
          "$ref": "AppsDynamiteSharedGroupDetails"
        },
        "prevGroupDetails": {
          "$ref": "AppsDynamiteSharedGroupDetails"
        }
      }
    },
    "IntegerPropertyOptions": {
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the integer should be used as a search operator.",
          "$ref": "IntegerOperatorOptions"
        },
        "maximumValue": {
          "format": "int64",
          "description": "The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.",
          "type": "string"
        },
        "integerFacetingOptions": {
          "description": "If set, describes integer faceting options for the given integer property. The corresponding integer property should be marked isFacetable.",
          "$ref": "IntegerFacetingOptions"
        },
        "minimumValue": {
          "type": "string",
          "description": "The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value.",
          "format": "int64"
        },
        "orderedRanking": {
          "type": "string",
          "description": "Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.",
          "enumDescriptions": [
            "There is no ranking order for the property. Results are not adjusted by this property's value.",
            "This property is ranked in ascending order. Lower values indicate lower ranking.",
            "This property is ranked in descending order. Lower values indicate higher ranking."
          ],
          "enum": [
            "NO_ORDER",
            "ASCENDING",
            "DESCENDING"
          ]
        }
      },
      "description": "The options for integer properties.",
      "type": "object",
      "id": "IntegerPropertyOptions"
    },
    "SpellResult": {
      "type": "object",
      "id": "SpellResult",
      "properties": {
        "suggestedQuery": {
          "description": "The suggested spelling of the query.",
          "type": "string"
        }
      }
    },
    "ErrorInfo": {
      "properties": {
        "errorMessages": {
          "items": {
            "$ref": "ErrorMessage"
          },
          "type": "array"
        }
      },
      "description": "Error information about the response.",
      "id": "ErrorInfo",
      "type": "object"
    },
    "HtmlPropertyOptions": {
      "description": "The options for html properties.",
      "id": "HtmlPropertyOptions",
      "type": "object",
      "properties": {
        "retrievalImportance": {
          "description": "Indicates the search quality importance of the tokens within the field when used for retrieval. Can only be set to DEFAULT or NONE.",
          "$ref": "RetrievalImportance"
        },
        "operatorOptions": {
          "$ref": "HtmlOperatorOptions",
          "description": "If set, describes how the property should be used as a search operator."
        }
      }
    },
    "EnumPropertyOptions": {
      "id": "EnumPropertyOptions",
      "description": "The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*.",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the enum should be used as a search operator.",
          "$ref": "EnumOperatorOptions"
        },
        "possibleValues": {
          "description": "The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100.",
          "items": {
            "$ref": "EnumValuePair"
          },
          "type": "array"
        },
        "orderedRanking": {
          "enum": [
            "NO_ORDER",
            "ASCENDING",
            "DESCENDING"
          ],
          "description": "Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.",
          "enumDescriptions": [
            "There is no ranking order for the property. Results aren't adjusted by this property's value.",
            "This property is ranked in ascending order. Lower values indicate lower ranking.",
            "This property is ranked in descending order. Lower values indicate higher ranking."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetCustomerIndexStatsResponse": {
      "properties": {
        "averageIndexedItemCount": {
          "description": "Average item count for the given date range for which billing is done.",
          "format": "int64",
          "type": "string"
        },
        "stats": {
          "type": "array",
          "description": "Summary of indexed item counts, one for each day in the requested range.",
          "items": {
            "$ref": "CustomerIndexStats"
          }
        }
      },
      "id": "GetCustomerIndexStatsResponse",
      "type": "object"
    },
    "Card": {
      "type": "object",
      "id": "Card",
      "properties": {
        "header": {
          "$ref": "CardHeader"
        },
        "displayStyle": {
          "enum": [
            "DISPLAY_STYLE_UNSPECIFIED",
            "PEEK",
            "REPLACE"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "Section"
          }
        },
        "cardActions": {
          "type": "array",
          "items": {
            "$ref": "CardAction"
          }
        },
        "name": {
          "description": "Name of the card used in CardNavigation.pop_to_card_name.",
          "type": "string"
        },
        "peekCardHeader": {
          "$ref": "CardHeader",
          "description": "When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards."
        },
        "fixedFooter": {
          "$ref": "FixedFooter"
        }
      }
    },
    "UniversalPhoneAccess": {
      "properties": {
        "pstnInfoUrl": {
          "description": "This field has the same contents as the MeetingSpace.more_join_url field, and is included for compatibility reasons. Clients should use the other field instead. This field is deprecated and will be removed.",
          "type": "string"
        },
        "pin": {
          "type": "string",
          "description": "The PIN that users must enter after dialing a universal number. The pin consists of only decimal digits and the length may vary, though it generally is longer than a PhoneAccess.pin."
        }
      },
      "description": "Universal phone access contains information required to dial into a conference using one of a static list of phone numbers and a universal PIN. The phone number list is distributed separately.",
      "type": "object",
      "id": "UniversalPhoneAccess"
    },
    "IntegrationConfigUpdatedMetadata": {
      "type": "object",
      "description": "Annotation metadata to display system message for integration config updated event. This metadata is stored in spanner, and can be dispatched to clients without any field modification or transformation.",
      "id": "IntegrationConfigUpdatedMetadata",
      "properties": {
        "initiatorId": {
          "$ref": "UserId",
          "description": "The user whose action triggered this system message."
        },
        "mutations": {
          "description": "A list of updates applied on the integration config.",
          "type": "array",
          "items": {
            "$ref": "IntegrationConfigMutation"
          }
        }
      }
    },
    "AppsDynamiteStorageOpenLinkAppUriIntentExtraData": {
      "description": "Extra data for an android intent. Valid keys are defined in the hosting app contract.",
      "properties": {
        "key": {
          "description": "A key for the intent extra data.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Value for the given extra data key."
        }
      },
      "type": "object",
      "id": "AppsDynamiteStorageOpenLinkAppUriIntentExtraData"
    },
    "ImapUidsReassign": {
      "properties": {
        "messageId": {
          "description": "The message Ids",
          "type": "array",
          "items": {
            "format": "uint64",
            "type": "string"
          }
        },
        "labelId": {
          "type": "string",
          "description": "Label"
        }
      },
      "id": "ImapUidsReassign",
      "type": "object"
    },
    "DataSourceIndexStats": {
      "type": "object",
      "id": "DataSourceIndexStats",
      "properties": {
        "itemCountByStatus": {
          "items": {
            "$ref": "ItemCountByStatus"
          },
          "type": "array",
          "description": "Number of items aggregrated by status code."
        },
        "date": {
          "description": "The date for which index stats were calculated. If the date of request is not the current date then stats calculated on the next day are returned. Stats are calculated close to mid night in this case. If date of request is current date, then real time stats are returned.",
          "$ref": "Date"
        }
      },
      "description": "Aggregation of items by status code as of the specified date."
    },
    "GatewaySipAccess": {
      "id": "GatewaySipAccess",
      "properties": {
        "sipAccessCode": {
          "type": "string",
          "description": "Permanent numeric code for manual entry on specially configured devices, currently the same as the PSTN \"Universal pin\"."
        },
        "uri": {
          "description": "The SIP URI the conference can be reached through. The string is on one of the formats: \"sip:@\" \"sips:@\" where currently is the 13-digit universal pin (with the future option to support using a Meet meeting code as well), and is a valid address to be resolved using a DNS SRV lookup, or a dotted quad.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Details how to join the conference via a SIP gateway."
    },
    "CardHeader": {
      "type": "object",
      "id": "CardHeader",
      "properties": {
        "imageStyle": {
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "imageAltText": {
          "description": "The alternative text of this image which will be used for accessibility.",
          "type": "string"
        },
        "title": {
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines. The header is rendered in collapsed and detailed view.",
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        }
      }
    },
    "History": {
      "properties": {
        "record": {
          "type": "array",
          "items": {
            "$ref": "HistoryRecord"
          }
        }
      },
      "description": "The most recent history records associated with the item.",
      "type": "object",
      "id": "History"
    },
    "ClientContext": {
      "description": "Represents the context of the client on behalf of which a HistoryRecord is produced. The ClientContext message can be used to hold context about the service client (e.g. the internal server making fusebox requests) or the user client (e.g. the IP address of the end user).",
      "id": "ClientContext",
      "properties": {
        "userIp": {
          "description": "Textual representation of the user's IP address, if available.",
          "type": "string"
        },
        "clientType": {
          "description": "E.g. \"pinto\", \"imap\", \"bigtop\", \"upload\"",
          "type": "string"
        },
        "sessionContext": {
          "description": "Contains information about the session which created this history record. This will be empty if the history record was generated by an internal request.",
          "$ref": "SessionContext"
        },
        "clientOperationId": {
          "type": "string",
          "description": "The client operation to which this history record belongs. The notion of a client operation is provided to keep track of client operations which might span multiple transactions in the lower level."
        }
      },
      "type": "object"
    },
    "TrustedResourceUrlProto": {
      "id": "TrustedResourceUrlProto",
      "type": "object",
      "description": "Message containing a string that is safe to use in all URL contexts in DOM APIs and HTML documents; even where the referred-to resource is interpreted as code, e.g., as the src of a script element.",
      "properties": {
        "privateDoNotAccessOrElseTrustedResourceUrlWrappedValue": {
          "description": "IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message.",
          "type": "string"
        }
      }
    },
    "DriveLocationRestrict": {
      "type": "object",
      "description": "Drive location search restricts (e.g. \"is:starred\").",
      "properties": {
        "type": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "TRASHED",
            "STARRED"
          ]
        }
      },
      "id": "DriveLocationRestrict"
    },
    "AppsDynamiteSharedCallMetadata": {
      "id": "AppsDynamiteSharedCallMetadata",
      "properties": {
        "meetMetadata": {
          "description": "Metadata specific for the Meet call.",
          "$ref": "AppsDynamiteSharedMeetMetadata"
        }
      },
      "description": "Metadata required to generate call artifacts. This can either be the metadata for a Meet or, in the future, Google Voice call.",
      "type": "object"
    },
    "ImageButton": {
      "properties": {
        "icon": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ],
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ]
        },
        "onClick": {
          "$ref": "OnClick"
        },
        "iconUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "ImageButton"
    },
    "ListItemsResponse": {
      "type": "object",
      "id": "ListItemsResponse",
      "properties": {
        "items": {
          "items": {
            "$ref": "Item"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      }
    },
    "Segment": {
      "id": "Segment",
      "type": "object",
      "properties": {
        "userMentionData": {
          "description": "For USER_MENTION type:",
          "$ref": "UserMentionData"
        },
        "text": {
          "type": "string",
          "description": "Text content of the Segment. As a general rule, this field should contain the actual text that should be rendered in the UI. Thus, for a hashtag, it should be \"#Foo\", and for a link, it should be the display text. Clients that do not understand a particular segment type may use this text, along with the Formatting info below, as a fallback for display. The field is not required -- if all relevant information is carried in other metadata fields and there is no need for a fallback, or it is not practical for a fallback to be provided for any other reason, the field may be left blank. A standard example would be a user reference being transmitted between server layers, where a gaia-ID representation may be sufficient and there is no need for a textual fallback. In such a case, it would be valid and useful - though not required - for servers to compute and populate a fallback on the serving path."
        },
        "hashtagData": {
          "$ref": "HashtagData",
          "description": "For HASHTAG type:"
        },
        "linkData": {
          "$ref": "LinkData",
          "description": "Type-specific metadata. At most one of these should be populated, and the one that is populated should correspond to the type of the Segment. For LINK type:"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "A TEXT segment represents plain-text subject to particular formatting constraints (as represented in the \"formatting\" field of the Segment).",
            "A LINE_BREAK segment is simply a placeholder to represent a line break between other segments. The \"text\" variable may be set to a newline as a fallback, but clients that understand this segment type should simply insert a line break without needing to reference any fields.",
            "A LINK segment represents a link to a web entity. The \"text\" field should be used for anchor text. Additional link data should be put in the link_data protobuf.",
            "A USER_MENTION segment represents a reference to a (possibly non-Gaia, possibly off-network) user. The \"text\" field may be populated as a fallback, but information identifying the user should be contained in the user_mention_data protobuf. (The set of fields that are populated in user_mention_data may differ depending on the context in which the segment is viewed, but the interpretation of the fields is uniform. See comments over UserMentionData).",
            "An ALL_USER_MENTION segment represents a reference to all users in the context, that is, the conversation, discussion, or other context containing the segment. For example, an ALL_USER_MENTION segment (\"@all\") can be useful to ping all participants in a conversation if the notification setting of the conversation is not set to ping on normal messages. An ALL_USER_MENTION should be treated as a USER_MENTION for all users who receives the segment.",
            "A HASHTAG segment represents a structured reference to a topic. The \"text\" field should represent display text (e.g. \"#Google\"), and additional metadata should be put in the Segment's hashtag_data field."
          ],
          "description": "Type of Segment.",
          "enum": [
            "TEXT",
            "LINE_BREAK",
            "LINK",
            "USER_MENTION",
            "ALL_USER_MENTION",
            "HASHTAG"
          ]
        },
        "formatting": {
          "$ref": "Formatting",
          "description": "Formatting to be applied when rendering the Segment. For all segment types, this is the standard way of representing that the Segment should be rendered in bold, italics, etc."
        }
      }
    },
    "GetCustomerUserStatsResponse": {
      "properties": {
        "stats": {
          "items": {
            "$ref": "CustomerUserStats"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "GetCustomerUserStatsResponse"
    },
    "YoutubeUserProto": {
      "id": "YoutubeUserProto",
      "properties": {
        "youtubeUserId": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Attribute": {
      "properties": {
        "value": {
          "$ref": "CaribouAttributeValue"
        },
        "name": {
          "type": "string",
          "description": "The name of the attribute. Required - If a write is attempted with an empty string, the server will return an error."
        }
      },
      "description": "An Attribute is a piece of data attached an Item. Attributes are opaque to the Starbox and have no effect on, nor are they effected by, message storage, indexing, or search. ",
      "type": "object",
      "id": "Attribute"
    },
    "GoogleChatV1ContextualAddOnMarkup": {
      "description": "The markup for developers to specify the contents of a contextual AddOn.",
      "type": "object",
      "properties": {
        "cards": {
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkupCard"
          },
          "type": "array",
          "description": "A list of cards. A card must contain a header and at least 1 section."
        }
      },
      "id": "GoogleChatV1ContextualAddOnMarkup"
    },
    "ObjectPropertyOptions": {
      "properties": {
        "subobjectProperties": {
          "description": "The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named *street*, *city*, and *state*. The maximum number of elements is 1000.",
          "items": {
            "$ref": "PropertyDefinition"
          },
          "type": "array"
        }
      },
      "description": "The options for object properties.",
      "type": "object",
      "id": "ObjectPropertyOptions"
    },
    "ShareScope": {
      "id": "ShareScope",
      "type": "object",
      "properties": {
        "domain": {
          "description": "If scope is DOMAIN, this field contains the dasher domain, for example \"google.com\".",
          "type": "string"
        },
        "scope": {
          "enumDescriptions": [
            "",
            "Only the author can view the post.",
            "Viewable only by a set of people.",
            "Viewable by extended circles.",
            "",
            ""
          ],
          "description": "The scope to which the content was shared.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "PRIVATE",
            "LIMITED",
            "EXTENDED",
            "DASHER_DOMAIN",
            "PUBLIC"
          ]
        }
      }
    },
    "CustomerSettings": {
      "type": "object",
      "properties": {
        "vpcSettings": {
          "$ref": "VPCSettings",
          "description": "VPC SC settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request."
        },
        "auditLoggingSettings": {
          "description": "Audit Logging settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request.",
          "$ref": "AuditLoggingSettings"
        }
      },
      "description": "Represents settings at a customer level.",
      "id": "CustomerSettings"
    },
    "MeetingSpace": {
      "id": "MeetingSpace",
      "description": " A meeting space is a persistent object that is the context for one or more calls. The meeting space is what makes users find each other when they want to meet and to find shared resources. With two exceptions, all the fields in the meeting space resource are visible publicly to any client, even anonymous users. The exceptions are that * The call_info field is only visible to clients that have a device (as indicated by the meeting token) in the JOINED or HIDDEN state. * The meeting_alias field will only be set for users who are in the same domain as the meeting space. The meeting space resource (outside call_info) should only contain information necessary to join a call in the meeting space, and not any other metadata about the meeting space, such as what organization it belongs to or things related to ongoing calls.",
      "properties": {
        "universalPhoneAccess": {
          "description": "A universal phone access method for this meeting space. Can be unset.",
          "$ref": "UniversalPhoneAccess"
        },
        "broadcastAccess": {
          "description": "Broadcast access information for this meeting space.",
          "$ref": "BroadcastAccess"
        },
        "acceptedNumberClass": {
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "No number class has been specified.",
              "The number has a low cost to receive calls on.",
              "The number has a high cost to receive calls on.",
              "Class for legacy numbers."
            ],
            "enum": [
              "NUMBER_CLASS_UNSPECIFIED",
              "LOW_COST",
              "HIGH_COST",
              "LEGACY"
            ]
          },
          "description": "Which number classes are accepted by this meeting at the moment? When there is no ongoing conference, this field may change independent of the version number of the MeetingSpace. When a conference starts, this field will be locked to the value at that time, and then will be unlocked again at the end of the conference."
        },
        "phoneAccess": {
          "items": {
            "$ref": "PhoneAccess"
          },
          "description": "All regional phone access methods for this meeting space. Can be empty.",
          "type": "array"
        },
        "meetingCode": {
          "description": "A meeting code is a globally unique code which points to a meeting space. Note: Meeting codes may be regenerated, which will cause old meeting codes to become invalid.",
          "type": "string"
        },
        "moreJoinUrl": {
          "readOnly": true,
          "description": "Output only. A URL that clients (e.g. Calendar) can use to show the web page with all join methods available for this meeting space. This link is also used in iOS universal links and Android intents, used for opening the \"More ways to join\" view in the Meet mobile apps. Example: https://tel.meet/mee-ting-cod?pin=1234567891011 Here, \"pin\" is the universal phone PIN. We include it explicitly to better support the offline case on the mobile. This is set when the meeting space has either a universal PIN or an interop PIN and clients who can show a \"more ways to join\" button should show it whenever this field is set.",
          "type": "string"
        },
        "meetingSpaceId": {
          "description": "A unique server-generated ID for the meeting space. This is the resource name of the meeting space resource and has the form `spaces/`, where is a sequence of characters in the [base64url set](https://tools.ietf.org/html/rfc4648#section-5), without any `=` characters.",
          "type": "string"
        },
        "meetingUrl": {
          "type": "string",
          "description": "A URL to identify and access the meeting space. Output only."
        },
        "gatewayAccess": {
          "description": "The interop gateway access information for the meeting space. A gateway access can be used when joining conferences from non-Google equipment through an interop gateway.",
          "$ref": "GatewayAccess"
        },
        "settings": {
          "description": "Settings of the meeting space.",
          "$ref": "Settings"
        },
        "gatewaySipAccess": {
          "items": {
            "$ref": "GatewaySipAccess"
          },
          "description": "The SIP based access methods that can be used to join the conference.",
          "type": "array"
        },
        "callInfo": {
          "$ref": "CallInfo",
          "description": "Information relevant to an ongoing conference. This field will be set in responses if the client requesting the meeting space has a device in one of the JOINED, HIDDEN, or MISSING_PREREQUISITES states. The field will also be set without a created device if the client requesting the meeting space is eligible to directly create a device in the JOINED state without knocking, eg a same-domain joiner. Can also only be updated by clients with a device in the JOINED state."
        },
        "meetingAlias": {
          "type": "string",
          "description": "An optional alias for the meeting space. The alias can in some cases be resolved to the meeting space, similar to the meeting code. The limitation is that the user needs to be in the same meeting domain as the meeting space."
        }
      },
      "type": "object"
    },
    "KeyValue": {
      "id": "KeyValue",
      "properties": {
        "bottomLabel": {
          "description": "Formatted text supported.",
          "type": "string"
        },
        "imageStyle": {
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "type": "string"
        },
        "topLabel": {
          "description": "Formatted text supported.",
          "type": "string"
        },
        "onClick": {
          "description": "Only the top/bottom label + content region is clickable.",
          "$ref": "OnClick"
        },
        "endIcon": {
          "$ref": "IconImage"
        },
        "startIcon": {
          "description": "The optional icon to display before the text content.",
          "$ref": "IconImage"
        },
        "content": {
          "description": "Formatted text supported and always required.",
          "type": "string"
        },
        "contentMultiline": {
          "type": "boolean"
        },
        "button": {
          "$ref": "Button"
        },
        "icon": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ],
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "type": "string"
        },
        "iconAltText": {
          "description": "The alternative text of this icon_url which will be used for accessibility.",
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        },
        "switchWidget": {
          "$ref": "SwitchWidget"
        }
      },
      "type": "object"
    },
    "DeliveryMedium": {
      "properties": {
        "selfPhone": {
          "$ref": "VoicePhoneNumber",
          "description": "In the case of multiple GV/native numbers, this defines the exact number to send from. It is used to differentiate mediums that have the same type, but different addresses (e.g. two android phones)."
        },
        "mediumType": {
          "type": "string",
          "description": "Describes the medium the cent was sent/received. For example, if I receive an SMS via GV, the medium_type will be GV.",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_MEDIUM",
            "BABEL_MEDIUM",
            "GOOGLE_VOICE_MEDIUM",
            "LOCAL_SMS_MEDIUM"
          ]
        }
      },
      "id": "DeliveryMedium",
      "type": "object"
    },
    "DeleteQueueItemsRequest": {
      "id": "DeleteQueueItemsRequest",
      "properties": {
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        },
        "queue": {
          "description": "The name of a queue to delete items from.",
          "type": "string"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      },
      "type": "object"
    },
    "CallInfo": {
      "description": "Contains information regarding an ongoing conference (aka call) for a meeting space.",
      "id": "CallInfo",
      "type": "object",
      "properties": {
        "transcriptionSessionInfo": {
          "$ref": "TranscriptionSessionInfo",
          "description": "Information about active transcription session in the ongoing conference."
        },
        "settings": {
          "description": "Settings of the ongoing conference.",
          "$ref": "CallSettings"
        },
        "attachedDocuments": {
          "description": "Output only. Documents attached to an ongoing conference.",
          "type": "array",
          "items": {
            "$ref": "DocumentInfo"
          },
          "readOnly": true
        },
        "abuseReportingConfig": {
          "description": "Abuse reporting configuration for the ongoing conference.",
          "$ref": "AbuseReportingConfig"
        },
        "recordingInfo": {
          "$ref": "RecordingInfo",
          "description": "Deprecated, use RecordingSessionInfo instead. Info about recording for this conference. This will always be set in server responses, with a valid recording status. This is superseded by streaming_sessions field, which contains the same information about this recording as well as additional information about other application type at the same time. This will be deprecated and removed at some point."
        },
        "streamingSessions": {
          "items": {
            "$ref": "StreamingSessionInfo"
          },
          "readOnly": true,
          "description": "Output only. Info about streaming sessions (recording or broadcast) for this conference. This should contain all active sessions. Currently, it's guaranteed to have at most one recording and at most one broadcast (at most two sessions in total). For each application type (recording or broadcast), latest inactive session is included if there's no active one.",
          "type": "array"
        },
        "collaboration": {
          "description": "The current collaboration session, or unset if no collaboration is in progress.",
          "$ref": "Collaboration"
        },
        "paygateInfo": {
          "description": "Paygate information to clients.",
          "$ref": "PaygateInfo"
        },
        "calendarEventId": {
          "description": "Output only. The calendar event ID of a Google Calendar event that the meeting space is associated with. If the meeting space is not associated with an event in Google Calendar, this field is empty. For recurring events, it refers to the recurring instance associated with the current call, as determined by the server.",
          "type": "string",
          "readOnly": true
        },
        "organizationName": {
          "description": "Output only. The name or description of the organization or domain that the organizer belongs to. The expected use of this in clients is to present messages like \"John Doe (outside of Google.com) is trying to join this call\", where \"Google.com\" is the organization name. The field will be empty if the organization name could not be determined, possibly because of a backend error.",
          "readOnly": true,
          "type": "string"
        },
        "recordingSessionInfo": {
          "description": "Information about active recording session in the ongoing conference.",
          "$ref": "RecordingSessionInfo"
        },
        "broadcastSessionInfo": {
          "$ref": "BroadcastSessionInfo",
          "description": "Information about active broadcast session in the ongoing conference."
        },
        "viewerCount": {
          "description": "The number of devices viewing the conference - MeetingDevices that are in VIEWER role and JOINED state in the conference.",
          "format": "int32",
          "type": "integer"
        },
        "youTubeBroadcastSessionInfos": {
          "items": {
            "$ref": "YouTubeBroadcastSessionInfo"
          },
          "description": "Information about active YouTube broadcast sessions in the ongoing conference.",
          "type": "array"
        },
        "presenter": {
          "description": "The current presenter in the call, or unset if there is no current presenter. Clients can set this to change the presenter.",
          "$ref": "Presenter"
        },
        "coActivity": {
          "$ref": "CoActivity",
          "description": "The current co-activity session, or unset if there is none in progress. A co-activity session can be initiated by devices in JOINED state . Initiator of the co-activity is expected to populate this field to start the session. Once clients detect that the co-activity has finished, any JOINED device can clear this field to end the co-activity session. In the case of switching activities, the initiator of the new activity merely needs to override this with the new co-activity data, and all connected clients are expected to handle the transition gracefully."
        },
        "availableAccessTypes": {
          "type": "array",
          "items": {
            "enumDescriptions": [
              "Default value. This value is unused.",
              "Anyone with meeting join information (url, phone access...) can join, no knocking required. (Subject to organization policies)",
              "Members of the Host's organization, invited external users, and dial-in users can join without knocking, everyone else must knock. (Subject to organization policies)",
              "Only participants invited by a host can automatically join, everyone else must knock and be admitted. (Subject to organization policies) Participants cannot dial out from the meeting. And only hosts can accept knocks."
            ],
            "type": "string",
            "enum": [
              "ACCESS_TYPE_UNSPECIFIED",
              "ACCESS_TYPE_OPEN",
              "ACCESS_TYPE_TRUSTED",
              "ACCESS_TYPE_RESTRICTED"
            ]
          },
          "description": "List of available access types of the conference."
        },
        "maxJoinedDevices": {
          "readOnly": true,
          "description": "Output only. The maximum number of devices that may be in the joined state simultaneously in this conference. This can be used by clients to guess whether it will be possible to join, but the only way to know is to try to join. It can also be used to inform users about the limit that is in effect. This limit is normally set when the conference is created and not changed during the lifetime of the conference. But there are some cases where it may change, so clients should be aware that the information may be stale.",
          "type": "integer",
          "format": "int32"
        },
        "cseInfo": {
          "$ref": "CseInfo",
          "description": "CSE information for the ongoing conference."
        },
        "artifactOwner": {
          "description": "Output only. Display name of the owner of artifacts generated in this conference. The expected use of this in clients is to present info like \"This recording will be sent to John Doe's Drive\". This field can be empty if preferred display name determination fails for any reason.",
          "$ref": "UserDisplayInfo",
          "readOnly": true
        },
        "availableReactions": {
          "items": {
            "$ref": "ReactionInfo"
          },
          "description": "Output only. The set of reactions that clients are allowed to send and can expect to receive. Note that a device in the conference should have the MAY_SEND_REACTIONS privilege to be able to send reactions.",
          "readOnly": true,
          "type": "array"
        }
      }
    },
    "ItemParts": {
      "type": "object",
      "id": "ItemParts",
      "description": "Container for type-specific extensions of an Item. This protobuf is defined in a separate file to allow types to reference/extend the message without depending on other fusebox protobufs. See items.proto.",
      "properties": {}
    },
    "Schema": {
      "description": "The schema definition for a data source.",
      "type": "object",
      "id": "Schema",
      "properties": {
        "operationIds": {
          "description": "IDs of the Long Running Operations (LROs) currently running for this schema. After modifying the schema, wait for operations to complete before indexing additional content.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "objectDefinitions": {
          "items": {
            "$ref": "ObjectDefinition"
          },
          "type": "array",
          "description": "The list of top-level objects for the data source. The maximum number of elements is 10."
        }
      }
    },
    "OpenCreatedDraftActionMarkup": {
      "id": "OpenCreatedDraftActionMarkup",
      "properties": {
        "draftThreadServerPermId": {
          "type": "string",
          "description": "The server permanent ID for the draft's thread. This field isn't set anywhere, and it's ignored when processing OpenCreatedDraftActionMarkup. Supply and use draftThreadStorageId instead."
        },
        "draftThreadId": {
          "description": "The ID of the thread containing the newly created draft, for example, \"15e9fa622ce1029d\".",
          "type": "string"
        },
        "draftId": {
          "description": "The ID of the newly created draft in the form \"r123\".",
          "type": "string"
        },
        "draftStorageId": {
          "type": "string",
          "description": "The server storage ID in hex format, for example,\"15e9fa622ce1029d\"."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedCalendarEventAnnotationDataEventCreation": {
      "type": "object",
      "description": "Creation of an event (no extra data for now).",
      "properties": {},
      "id": "AppsDynamiteSharedCalendarEventAnnotationDataEventCreation"
    },
    "YoutubeMetadata": {
      "properties": {
        "startTime": {
          "type": "integer",
          "description": "YouTube query parameter for timestamp. YouTube specific flag that allows users to embed time token when sharing a link. This property contains parsed time token in seconds.",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "description": "YouTube resource ID of the artifact."
        },
        "shouldNotRender": {
          "type": "boolean",
          "description": "If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip."
        }
      },
      "type": "object",
      "id": "YoutubeMetadata",
      "description": "Annotation metadata for YouTube artifact."
    },
    "SocialGraphNodeProto": {
      "id": "SocialGraphNodeProto",
      "properties": {
        "sgnDomain": {
          "description": "The fields from ccc/socialgraph/socialgraphnode.proto:SgnNode that uniquely identify a social graph node. The 'ident' field is not included here because its value can be changed.",
          "type": "string"
        },
        "sgnPk": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents a user pseudonym. Pseudonyms are linked accounts on Google and third-party services (e.g. YouTube or Twitter) and are described by a Social Graph Node."
    },
    "ScoringConfig": {
      "description": "Scoring configurations for a source while processing a Search or Suggest request.",
      "properties": {
        "disablePersonalization": {
          "description": "Whether to personalize the results. By default, personal signals will be used to boost results.",
          "type": "boolean"
        },
        "disableFreshness": {
          "description": "Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "ScoringConfig"
    },
    "CheckAccessResponse": {
      "id": "CheckAccessResponse",
      "type": "object",
      "properties": {
        "hasAccess": {
          "description": "Returns true if principal has access. Returns false otherwise.",
          "type": "boolean"
        }
      }
    },
    "AppsDynamiteSharedAssistantDebugContext": {
      "properties": {
        "query": {
          "description": "The query that triggered the resulting suggestion.",
          "type": "string"
        }
      },
      "description": "Represents info regarding suggestion debug information.",
      "id": "AppsDynamiteSharedAssistantDebugContext",
      "type": "object"
    },
    "AppsDynamiteStorageActionActionParameter": {
      "id": "AppsDynamiteStorageActionActionParameter",
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        }
      },
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupEditAttendeesActionMarkup": {
      "properties": {
        "addAttendeeEmails": {
          "description": "A list of attendees to add to the Google Calendar event.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupEditAttendeesActionMarkup"
    },
    "ObjectValues": {
      "id": "ObjectValues",
      "description": "List of object values.",
      "properties": {
        "values": {
          "items": {
            "$ref": "StructuredDataObject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AppsDynamiteStorageWidget": {
      "id": "AppsDynamiteStorageWidget",
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object",
      "properties": {
        "divider": {
          "$ref": "AppsDynamiteStorageDivider",
          "description": "Displays a divider. For example, the following JSON creates a divider: ``` \"divider\": { } ```"
        },
        "grid": {
          "description": "Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` \"grid\": { \"title\": \"A fine collection of items\", \"numColumns\": 2, \"borderStyle\": { \"type\": \"STROKE\", \"cornerRadius\": 4.0 }, \"items\": [ \"image\": { \"imageUri\": \"https://www.example.com/image.png\", \"cropStyle\": { \"type\": \"SQUARE\" }, \"borderStyle\": { \"type\": \"STROKE\" } }, \"title\": \"An item\", \"textAlignment\": \"CENTER\" ], \"onClick\": { \"openLink\": { \"url\":\"https://www.example.com\" } } } ```",
          "$ref": "AppsDynamiteStorageGrid"
        },
        "columns": {
          "$ref": "AppsDynamiteStorageColumns",
          "description": "Displays a single row of columns with widgets stacked vertically in each column. For example, the following JSON creates a 2 column widget each containing a single item. ``` \"columns\": { \"wrapStyle\": \"WRAP\", \"columnItems\": [ { \"horizontalSizeStyle\": \"FILL_AVAILABLE_SPACE\", \"horizontalAlignment\": \"CENTER\", \"verticalAlignment\" : \"CENTER\", \"widgets\": [ { \"textParagraph\": { \"text\": \"First column text paragraph\", } } ] }, { \"horizontalSizeStyle\": \"FILL_AVAILABLE_SPACE\", \"horizontalAlignment\": \"CENTER\", \"verticalAlignment\" : \"CENTER\", \"widgets\": [ { \"textParagraph\": { \"text\": \"Second column text paragraph\", } } ] }, ] } } ```"
        },
        "textInput": {
          "description": "Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` \"textInput\": { \"name\": \"mailing_address\", \"label\": \"Mailing Address\" } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` \"textInput\": { \"name\": \"preferred_programing_language\", \"label\": \"Preferred Language\", \"initialSuggestions\": { \"items\": [ { \"text\": \"C++\" }, { \"text\": \"Java\" }, { \"text\": \"JavaScript\" }, { \"text\": \"Python\" } ] } } ```",
          "$ref": "AppsDynamiteStorageTextInput"
        },
        "dateTimePicker": {
          "$ref": "AppsDynamiteStorageDateTimePicker",
          "description": "Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` \"date_time_picker\": { \"name\": \"appointment_time\", \"label\": \"Book your appointment at:\", \"type\": \"DateTimePickerType.DATE_AND_TIME\", \"valueMsEpoch\": \"796435200000\" } ```"
        },
        "image": {
          "description": "Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` \"image\": { \"imageUrl\": \"https://example.com/heba_salam.png\" \"altText\": \"Avatar for Heba Salam\" } ```",
          "$ref": "AppsDynamiteStorageImage"
        },
        "selectionInput": {
          "description": "Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` \"switchControl\": { \"name\": \"size\", \"label\": \"Size\" \"type\": \"SelectionType.DROPDOWN\", \"items\": [ { \"text\": \"S\", \"value\": \"small\", \"selected\": false }, { \"text\": \"M\", \"value\": \"medium\", \"selected\": true }, { \"text\": \"L\", \"value\": \"large\", \"selected\": false }, { \"text\": \"XL\", \"value\": \"extra_large\", \"selected\": false } ] } ```",
          "$ref": "AppsDynamiteStorageSelectionInput"
        },
        "decoratedText": {
          "description": "Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` \"decoratedText\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"topLabel\": \"Email Address\", \"content\": \"heba.salam@example.com\", \"bottomLabel\": \"This is a new Email address!\", \"switchWidget\": { \"name\": \"has_send_welcome_email_to_heba_salam\", \"selected\": false, \"controlType\": \"ControlType.CHECKBOX\" } } ```",
          "$ref": "AppsDynamiteStorageDecoratedText"
        },
        "horizontalAlignment": {
          "description": "The horizontal alignment of this widget.",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ]
        },
        "textParagraph": {
          "$ref": "AppsDynamiteStorageTextParagraph",
          "description": "Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` \"textParagraph\": { \"text\": \" *bold text*\" } ```"
        },
        "buttonList": {
          "$ref": "AppsDynamiteStorageButtonList",
          "description": "A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` \"buttonList\": { \"buttons\": [ \"button\": { \"text\": \"Edit\", \"Color\": { \"Red\": 255 \"Green\": 255 \"Blue\": 255 } \"disabled\": true }, \"button\": { \"icon\": { \"knownIcon\": \"INVITE\" \"altText\": \"check calendar\" }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/calendar\" } } }, ] } ```"
        }
      }
    },
    "LabelAdded": {
      "description": "A label was added to some (subset of the) messages in this thread.",
      "id": "LabelAdded",
      "properties": {
        "messageKeys": {
          "items": {
            "$ref": "MultiKey"
          },
          "type": "array"
        },
        "labelName": {
          "type": "string"
        },
        "syncId": {
          "type": "integer",
          "format": "uint32"
        },
        "labelId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChatConserverMessageContent": {
      "description": "The content of a chat message, which includes 0 or more segments along with 0 or more embeds, which represent various attachment types (like photos).",
      "properties": {
        "segment": {
          "items": {
            "$ref": "Segment"
          },
          "description": "The text part of the message content. Segments are concatenated together to yield the full message. A message can have zero or more segments.",
          "type": "array"
        },
        "attachment": {
          "items": {
            "$ref": "SocialCommonAttachmentAttachment"
          },
          "description": "Items attached to this message, such as photos. This should *NOT* be set by clients. It will be automatically set from media uploaded along with this request and using the information provided in existing_media.",
          "type": "array"
        }
      },
      "id": "ChatConserverMessageContent",
      "type": "object"
    },
    "FilterCreated": {
      "description": "A filter was created.",
      "type": "object",
      "properties": {},
      "id": "FilterCreated"
    },
    "RbacSubjectProto": {
      "properties": {
        "username": {
          "type": "string",
          "description": "Format \"username\" without \"@domain\", e.g., \"bogdand\"."
        }
      },
      "description": "Principal associated with a given RBAC subject. This principal is used by Sphinx Provisioning Service for RBAC provisionable (go/sphinx-rbacz).",
      "type": "object",
      "id": "RbacSubjectProto"
    },
    "RbacRoleProto": {
      "properties": {
        "objectId": {
          "type": "string"
        },
        "rbacNamespace": {
          "description": "DEPRECATED as of 01.11.2019",
          "type": "string"
        },
        "rbacRoleName": {
          "type": "string",
          "description": "Format: \"role/z?\" - \"role\" is the Sphinx globally unique name of the Sphinx role that provisions the RBAC role. - \"/z?\" suffix indicates which Zanzibar environment stores the role membership data (\"/zd\": dev, \"/zs\": staging, \"/zp\": prod, \"/zt\": local test instance). Example: \"mysystem_myrole/zp\""
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Principal associated with a given RBAC role. This principal is used by Sphinx Provisioning Service for RBAC provisionable (go/sphinx-rbacz).",
      "type": "object",
      "id": "RbacRoleProto"
    },
    "MemberId": {
      "properties": {
        "rosterId": {
          "$ref": "RosterId",
          "description": "Unique, immutable ID of the Roster."
        },
        "userId": {
          "$ref": "UserId",
          "description": "Unique, immutable ID of the User."
        }
      },
      "id": "MemberId",
      "type": "object",
      "description": "Eventually this can be updated to a oneOf User, Space (for nested spaces), Bots or Service, as and when these use cases come up."
    },
    "MessageAttributes": {
      "id": "MessageAttributes",
      "description": "Stores tombstone message attributes: go/tombstone-message-attributes-overview",
      "type": "object",
      "properties": {
        "isTombstone": {
          "description": "If true: message is a tombstone in the client. Default false.",
          "type": "boolean"
        }
      }
    },
    "HangoutVideoEventMetadata": {
      "properties": {
        "hangoutVideoType": {
          "enum": [
            "UNKNOWN_HANGOUT_VIDEO_EVENT_TYPE",
            "VIDEO_START",
            "VIDEO_END"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      },
      "type": "object",
      "id": "HangoutVideoEventMetadata",
      "description": "A message representing the Hangout video start/end events in Babel"
    },
    "Member": {
      "id": "Member",
      "properties": {
        "user": {
          "$ref": "User"
        },
        "roster": {
          "$ref": "Roster"
        }
      },
      "type": "object"
    },
    "PossiblyTrimmedModel": {
      "type": "object",
      "id": "PossiblyTrimmedModel",
      "properties": {
        "model": {
          "type": "string"
        },
        "isTrimmed": {
          "type": "boolean"
        }
      },
      "description": "This message contains either the device model, or a prefix of the device model (AKA a trimmed device model). The \"is_trimmed\" field indicates which one it is."
    },
    "AppsDynamiteSharedAssistantSuggestion": {
      "id": "AppsDynamiteSharedAssistantSuggestion",
      "type": "object",
      "description": "Data for an Assistant suggestion.",
      "properties": {
        "serializedSuggestions": {
          "type": "string",
          "description": "String representation of the suggestions provided."
        },
        "debugContext": {
          "$ref": "AppsDynamiteSharedAssistantDebugContext",
          "description": "Info regarding suggestion debug information."
        },
        "feedbackContext": {
          "$ref": "AppsDynamiteSharedAssistantFeedbackContext",
          "description": "Data for rendering feedback."
        },
        "sessionContext": {
          "$ref": "AppsDynamiteSharedAssistantSessionContext",
          "description": "Session context specific to the Assistant suggestion."
        },
        "findDocumentSuggestion": {
          "$ref": "AppsDynamiteSharedFindDocumentSuggestion",
          "description": "Suggestion type that suggests documents (docs, slides, sheets)."
        }
      }
    },
    "PrefUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the affected preference."
        },
        "prefDeleted": {
          "$ref": "PrefDeleted"
        },
        "preState": {
          "$ref": "FuseboxPrefUpdatePreState"
        },
        "prefWritten": {
          "$ref": "PrefWritten"
        }
      },
      "id": "PrefUpdate",
      "description": "HistoryRecord for changes associated with prefs, namely: PREF_WRITTEN PREF_DELETED"
    },
    "AppsDynamiteStorageImageComponent": {
      "type": "object",
      "id": "AppsDynamiteStorageImageComponent",
      "properties": {
        "altText": {
          "type": "string",
          "description": "The accessibility label for the image."
        },
        "borderStyle": {
          "description": "The border style to apply to the image.",
          "$ref": "AppsDynamiteStorageBorderStyle"
        },
        "cropStyle": {
          "$ref": "AppsDynamiteStorageImageCropStyle",
          "description": "The crop style to apply to the image."
        },
        "imageUri": {
          "description": "The image URL.",
          "type": "string"
        }
      }
    },
    "TranscriptionSessionInfo": {
      "type": "object",
      "description": "Information about a transcription session.",
      "id": "TranscriptionSessionInfo",
      "properties": {
        "sessionStateInfo": {
          "description": "Transcription session's state information.",
          "$ref": "SessionStateInfo"
        },
        "transcriptionSessionId": {
          "type": "string",
          "description": "A unique server-generated ID for the transcription session."
        }
      }
    },
    "ChatConserverDynamitePlaceholderMetadataDeleteMetadata": {
      "type": "object",
      "description": "A message was deleted in Dynamite.",
      "id": "ChatConserverDynamitePlaceholderMetadataDeleteMetadata",
      "properties": {}
    },
    "DoubleOperatorOptions": {
      "description": "Used to provide a search operator for double properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to use the double property in sorting or as a facet. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      },
      "type": "object",
      "id": "DoubleOperatorOptions"
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time."
        },
        "displayOptions": {
          "$ref": "ResultDisplayMetadata",
          "description": "Options that specify how to display a structured data search result."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The creation time for this document or object in the search result."
        },
        "source": {
          "$ref": "Source",
          "description": "The named source for the result, such as Gmail."
        },
        "objectType": {
          "description": "Object type of the search result.",
          "type": "string"
        },
        "mimeType": {
          "description": "Mime type of the search result.",
          "type": "string"
        },
        "fields": {
          "items": {
            "$ref": "NamedProperty"
          },
          "type": "array",
          "description": "Indexed fields in structured data, returned as a generic named property."
        },
        "owner": {
          "$ref": "Person",
          "description": "Owner (usually creator) of the document or object of the search result."
        },
        "thumbnailUrl": {
          "description": "The thumbnail URL of the result.",
          "type": "string"
        }
      },
      "description": "Metadata of a matched search result.",
      "id": "Metadata"
    },
    "Message": {
      "id": "Message",
      "properties": {
        "updaterId": {
          "description": "ID of the User who last updated (created/edited/deleted) the Message. This includes information to identify if this was updated by an App on behalf of a user.",
          "$ref": "UserId"
        },
        "deleteTime": {
          "format": "int64",
          "description": "Time when the Message was deleted in microseconds. This field is set to nonzero value only for Messages deleted globally.",
          "type": "string"
        },
        "reactions": {
          "description": "A list of user reactions to this message. Ordered by the timestamp of the first reaction, ascending (oldest to newest).",
          "items": {
            "$ref": "AppsDynamiteSharedReaction"
          },
          "type": "array"
        },
        "secondaryMessageKey": {
          "description": "A client-specified string that can be used to uniquely identify a message in a space, in lieu of `id.message_id`.",
          "type": "string"
        },
        "uploadMetadata": {
          "description": "UploadMetadata b/36864213 is an ongoing effort to move UploadMetadata out of annotations field and save it to upload_metadata field only. After the migration, UploadMetadata will only be saved in this field.",
          "items": {
            "$ref": "UploadMetadata"
          },
          "type": "array"
        },
        "isContentPurged": {
          "description": "Whether the message is content purged. Content purged messages contain only data required for tombstone (see go/chat-infinite-tombstone). This field is only used by Vault to display tombstone and should only be set to true if the message is a tombstone.",
          "type": "boolean"
        },
        "dlpScanSummary": {
          "$ref": "DlpScanSummary",
          "description": "Data Loss Prevention scan information for this message. Messages are evaluated in the backend on create message/topic and edit message actions."
        },
        "creatorId": {
          "$ref": "UserId",
          "description": "ID of the User who posted the Message. This includes information to identify if this was posted by an App on behalf of a user."
        },
        "richTextFormattingType": {
          "type": "string",
          "enum": [
            "NONE",
            "MARKDOWN",
            "FORMAT_ANNOTATIONS",
            "FORMAT_ANNOTATIONS_IGNORED",
            "FORMAT_ANNOTATIONS_IGNORED_WITH_MARKDOWN"
          ],
          "description": "Used by clients to correctly log format type for message creation due to complexity with client side optimistic update (see go/content-metric-post-send-logging for details). Currently, only set by server in the message or topic creation path.",
          "enumDescriptions": [
            "",
            "The formatting was specified as *markdown characters* in message text.",
            "The formatting was specified as {@link com.google.apps.dynamite.v1.shared.FormatMetadata} annotations.",
            "The client sent the format annotations, but didn't set the accept_format_annotations field to true. This shouldn't happen, but there might be some old clients that end up here.",
            "A combination of MARKDOWN and FORMAT_ANNOTATIONS_IGNORED."
          ]
        },
        "deleteTimeForRequester": {
          "description": "Time when the Message was per-user deleted by the message requester in microseconds. This field is set to nonzero value only for Message per-user deleted by the requester.",
          "type": "string",
          "format": "int64"
        },
        "editableBy": {
          "enumDescriptions": [
            "Default case, should never be used. If this data is encountered in the DB any request should throw an exception.",
            "No one except for the message creator/origin pair can mutate. This permission checks both gaia id and the request origin. Request origin can be Chat API or Chat UI. Mutation is allowed iff both attributes of the request match the original message creation. Use case: this allows historical 1P apps lock down message edit permission i.e. In Chat UI, humans cannot edit their messages created via these 1P apps. Do not use this for additional use cases.",
            "The message creator can mutate regardless of request origin. Use case: for messages created by human via Chat UI or Chat API. These messages can be mutated by the same human user via Chat UI or via any app on Chat API.",
            "Every human member of a space or the creator can mutate the entity. This excludes app acting on behalf of human via Chat API. Use case: This is to enable humans to delete messages created by apps."
          ],
          "description": "Indicates who can edit the message. This field is set on the read path (e.g. ListTopics) but doesn’t have any effect on the write path (e.g. CreateMessageRequest).",
          "enum": [
            "PERMISSION_UNSPECIFIED",
            "PERMISSION_NO_ONE",
            "PERMISSION_CREATOR",
            "PERMISSION_MEMBER"
          ],
          "type": "string"
        },
        "personalLabels": {
          "description": "Personal labels associated with a message for the viewing user. Order of entries is arbitrary and will not list duplicates of the same label_id. See go/chat-labels-design for details. NOTE: This will be unpopulated in the case of SpaceChangelog events.",
          "items": {
            "$ref": "PersonalLabelTag"
          },
          "type": "array"
        },
        "contentReportSummary": {
          "readOnly": true,
          "$ref": "ContentReportSummary"
        },
        "deletedByVault": {
          "type": "boolean",
          "description": "Was this message deleted by Vault (Only used for Vault support) This is false if message is live or message was deleted by user."
        },
        "retentionSettings": {
          "description": "The retention settings of the message.",
          "$ref": "AppsDynamiteSharedRetentionSettings"
        },
        "messageIntegrationPayload": {
          "description": "An optional payload (restricted to 1P applications) that will be stored with this message. This can only be set by the 1P API and should be used to deliver additional data such a 1P sync version, 1P entity ID to the client for more advanced functionality [Eg. inform Group Tasks tab of new version while linking, fetch & render a live Task/Meet call tile].",
          "$ref": "AppsDynamiteSharedMessageIntegrationPayload"
        },
        "tombstoneMetadata": {
          "description": "Information for the stoning of a Message.",
          "$ref": "TombstoneMetadata"
        },
        "deletableBy": {
          "type": "string",
          "enumDescriptions": [
            "Default case, should never be used. If this data is encountered in the DB any request should throw an exception.",
            "No one except for the message creator/origin pair can mutate. This permission checks both gaia id and the request origin. Request origin can be Chat API or Chat UI. Mutation is allowed iff both attributes of the request match the original message creation. Use case: this allows historical 1P apps lock down message edit permission i.e. In Chat UI, humans cannot edit their messages created via these 1P apps. Do not use this for additional use cases.",
            "The message creator can mutate regardless of request origin. Use case: for messages created by human via Chat UI or Chat API. These messages can be mutated by the same human user via Chat UI or via any app on Chat API.",
            "Every human member of a space or the creator can mutate the entity. This excludes app acting on behalf of human via Chat API. Use case: This is to enable humans to delete messages created by apps."
          ],
          "description": "Indicates who can delete the message. This field is set on the read path (e.g. ListTopics) but doesn’t have any effect on the write path (e.g. CreateMessageRequest).",
          "enum": [
            "PERMISSION_UNSPECIFIED",
            "PERMISSION_NO_ONE",
            "PERMISSION_CREATOR",
            "PERMISSION_MEMBER"
          ]
        },
        "localId": {
          "description": "A unique id specified on the client side.",
          "type": "string"
        },
        "privateMessageViewer": {
          "$ref": "UserId",
          "description": "Should only be set if the Message State is PRIVATE. If set, the message content is only visible to this user (and any apps associated with the message), as well as the message creator. If unset, a private message is visible to the message creator only."
        },
        "botResponses": {
          "description": "Responses from bots indicating if extra auth/config is needed.",
          "type": "array",
          "items": {
            "$ref": "BotResponse"
          }
        },
        "createTime": {
          "description": "Time when the Message was posted in microseconds.",
          "format": "int64",
          "type": "string"
        },
        "isInlineReply": {
          "readOnly": true,
          "description": "Output only. Indicates if the message is an inline reply. Set to true only if the message's ParentPath is non-NULL. Currently, only inline replies have non-NULL ParentPath. See go/chat-be-inline-reply-indicator.",
          "type": "boolean"
        },
        "props": {
          "$ref": "MessageProps",
          "description": "Contains additional (currently Hangouts Classic only) properties applicable to this message."
        },
        "appProfile": {
          "$ref": "AppsDynamiteSharedAppProfile",
          "description": "Custom display profile info for apps. Leave the field empty for real users."
        },
        "lastEditTime": {
          "format": "int64",
          "description": "If the message was edited by a user, timestamp of the last edit, in microseconds.",
          "type": "string"
        },
        "messageOrigin": {
          "enumDescriptions": [
            "",
            "",
            "The message is from Babel (Hangouts Classic) interop.",
            "The message is from Babel interop retries from Manifold queue.",
            "The message came directly from Babel as source-of-truth",
            "The message came directly from Babel during dual-write",
            "The message came directly from Babel Manifold queue during dual write",
            "The message was backfilled by go/dinnertrain as part of go/storage-consolidation. The backfill origin corresponds to the BackfillState in which the message was created.",
            ""
          ],
          "type": "string",
          "description": "Where the message was posted from",
          "enum": [
            "ORIGIN_NOT_SET",
            "ORIGIN_DYNAMITE",
            "ORIGIN_BABEL_INTEROP_LIVE",
            "ORIGIN_BABEL_INTEROP_RETRY",
            "ORIGIN_BABEL",
            "ORIGIN_BABEL_DUAL_WRITE",
            "ORIGIN_BABEL_DUAL_WRITE_RETRY",
            "ORIGIN_BACKFILL_FROM_PAPYRUS",
            "ORIGIN_BACKFILL_FROM_GMAIL_ARCHIVE"
          ]
        },
        "annotations": {
          "description": "Annotations parsed and extracted from the text body.",
          "type": "array",
          "items": {
            "$ref": "Annotation"
          }
        },
        "attributes": {
          "$ref": "MessageAttributes",
          "description": "Lightweight message attributes which values are calculated and set in the servers."
        },
        "fallbackText": {
          "type": "string",
          "description": "A plain-text description of the attachment, used when clients cannot display formatted attachment (e.g. mobile push notifications)."
        },
        "reports": {
          "description": "Output only. Details of content reports. Set only when the request asks for it.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "ContentReport"
          }
        },
        "messageState": {
          "enumDescriptions": [
            "Default - visible to the room / DM.",
            "Private state - only visible to the message creator, and the private_message_viewer if set."
          ],
          "description": "State of the message, indicating whether the message is visible to all members in the group or is only visible to the sender only, or the private_message_viewer if it is set.",
          "type": "string",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ]
        },
        "attachments": {
          "items": {
            "$ref": "Attachment"
          },
          "description": "Attachments parsed from incoming webhooks",
          "type": "array"
        },
        "privateMessageInfos": {
          "description": "A list of per-user private information. This is deprecated, because we no longer plan to support partially private messages or private messages for multiple users. The message_state and private_message_viewer fields should be sufficient for this infrastructure.",
          "items": {
            "$ref": "PrivateMessageInfo"
          },
          "type": "array"
        },
        "dlpScanOutcome": {
          "enum": [
            "SCAN_UNKNOWN_OUTCOME",
            "SCAN_SUCCEEDED_NO_VIOLATION",
            "SCAN_SUCCEEDED_BLOCK",
            "SCAN_SUCCEEDED_WARN",
            "SCAN_SUCCEEDED_AUDIT_ONLY",
            "SCAN_FAILURE_EXCEPTION",
            "SCAN_FAILURE_RULE_FETCH_FAILED",
            "SCAN_FAILURE_TIMEOUT",
            "SCAN_FAILURE_ALL_RULES_FAILED",
            "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS",
            "SCAN_SKIPPED_EXPERIMENT_DISABLED",
            "SCAN_SKIPPED_CONSUMER",
            "SCAN_SKIPPED_NON_HUMAN_USER",
            "SCAN_SKIPPED_NO_MESSAGE",
            "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING",
            "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN",
            "SCAN_SKIPPED_MESSAGE_SENT_DURING_SPACE_MIGRATION",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE",
            "SCAN_RULE_EVALUATION_SKIPPED_UNSUPPORTED_FILE_TYPE",
            "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION",
            "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK",
            "SCAN_SUCCEEDED_WITH_FAILURES_WARN",
            "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
          ],
          "enumDescriptions": [
            "",
            "This means no violation is detected on the given message/attachment.",
            "Violation is detected. The message/attachment will be blocked (or deleted if this happens in failure recovery), the user will be warned, and the violation will be logged to BIP.",
            "Violation is detected. The user will be warned, and the violation will be logged to BIP.",
            "Violation is detected and will be logged to BIP (no user-facing action performed).",
            "Rule fetch and evaluation were attempted but an exception occurred.",
            "Rule fetch was attempted but failed, so rule evaluation could not be performed.",
            "Rule fetch and evaluation were attempted but the scanning timed out.",
            "Rule fetch completed and evaluation were attempted, but all of the rules failed to be evaluated.",
            "An IllegalStateException is thrown when executing DLP on attachments. This could happen if the space row is missing.",
            "Rule fetch and evaluation is skipped because DLP is not enabled for the user.",
            "Rule fetch and evaluation are skipped because the user sending message is consumer.",
            "Rule fetch and evaluation are skipped because the user sending message is a non-human user (i.e. a bot).",
            "Rule fetch and evaluation are skipped because there is no message to scan. Deprecated: this should not happen since there must be message or attachment for DLP scan.",
            "Rule fetch and evaluation are skipped because the user has acknowledged the warning on the message that triggered the Warn violation and sent the message anyway.",
            "Scanning was skipped because the message originated from Interop or Babel.",
            "Scanning was skipped because the message was sent while the space is in migration mode. See go/migration-mode for details.",
            "Rule fetch happened, but rule evaluation is skipped because no rules were found.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given action params.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given trigger.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned permanent failure while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned an empty response while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because file type is unsupported.",
            "Rules were fetched but some evaluations failed. No violation was found in the rules that were successfully evaluated.",
            "Rules were fetched but some evaluations failed. A blocking violation was found in the rules that were successfully evaluated. The message/attachment will be blocked, the user will be notified, and the violation will be logged to BIP. A blocking violation takes precedence over all other violation types.",
            "Rules were fetched but some evaluations failed. A warn violation was found in the rules that were successfully evaluated. The user will be warned, and the violation will be logged to BIP.",
            "Rules were fetched but some evaluations failed. An audit-only violation was found in the rules that were successfully evaluated. The violation will be logged to BIP (no user-facing action performed)."
          ],
          "type": "string",
          "description": "Data Loss Prevention scan information for this message. Messages are evaluated in the backend on create message/topic and edit message actions. DEPRECATED: use dlp_scan_summary instead."
        },
        "lastUpdateTime": {
          "format": "int64",
          "description": "Time when the Message text was last updated in microseconds.",
          "type": "string"
        },
        "communalLabels": {
          "items": {
            "$ref": "CommunalLabelTag"
          },
          "type": "array",
          "description": "Communal labels associated with a message. These exist on the message itself regardless of which user fetches them. Order of entries is arbitrary and will not list duplicates of the same label_id. See go/chat-labels-design for details."
        },
        "id": {
          "$ref": "MessageId",
          "description": "ID of the resource."
        },
        "quotedByState": {
          "enumDescriptions": [
            "Unspecified state for QuotedByState.",
            "State to indicate that this message is quoted by another message (excluding purged message).",
            "State to indicate that this message are not quoted by another message."
          ],
          "description": "Output only. Whether this message has been quoted by another message or not. Used by clients to handle message edit flows for messages that have been quoted.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "QUOTED_BY_STATE_UNSPECIFIED",
            "QUOTED_BY_STATE_HAS_BEEN_QUOTED",
            "QUOTED_BY_STATE_HAS_NOT_BEEN_QUOTED"
          ]
        },
        "textBody": {
          "description": "Plaintext body of the Message.",
          "type": "string"
        },
        "originAppSuggestions": {
          "description": "Indicates if this message contains any suggestions that were provided by any Apps.",
          "items": {
            "$ref": "AppsDynamiteSharedOriginAppSuggestion"
          },
          "type": "array"
        },
        "quotedMessageMetadata": {
          "readOnly": true,
          "$ref": "QuotedMessageMetadata",
          "description": "Output only. Metadata for a message that is quoted by this message."
        }
      },
      "description": "Message posted to a Space.",
      "type": "object"
    },
    "ListUnmappedIdentitiesResponse": {
      "id": "ListUnmappedIdentitiesResponse",
      "type": "object",
      "properties": {
        "unmappedIdentities": {
          "items": {
            "$ref": "UnmappedIdentity"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "MessageDeleted": {
      "properties": {
        "imapSyncMappings": {
          "type": "array",
          "items": {
            "$ref": "ImapSyncDelete"
          },
          "description": "Value of coproc's message delete history record extension that exports /imapsync/folder attribute of deleted messages which have ^is label."
        },
        "messageKeys": {
          "items": {
            "$ref": "MultiKey"
          },
          "type": "array"
        }
      },
      "description": "Some (subset of the) messages in this thread were deleted.",
      "id": "MessageDeleted",
      "type": "object"
    },
    "RpcOptions": {
      "properties": {
        "requestExtensions": {
          "description": "The RPC's request extensions (i.e. RPC::request_extensions(), a.k.a. the Stubby side channel) will be merged with the specified [request_extensions]. When Triggers are batched, the RPC's request extensions will be merged with all of the [request_extensions] of the Triggers in the batch. Note that merging of request extensions follows standard protocol buffer semantics; values of singular fields override previous values, and values of repeated fields are appended (In the case of Triggers, Triggers with later fire times will be merged after Triggers with earlier fire times in the same batch). It is not advised to specify extensions with repeated fields on batchable Triggers.",
          "$ref": "MessageSet"
        }
      },
      "description": "Options for Triggers dispatched via RPC.",
      "id": "RpcOptions",
      "type": "object"
    },
    "CircleProto": {
      "properties": {
        "circleId": {
          "format": "int64",
          "type": "string",
          "description": "Circle ID is unique only relative to the owner's Gaia ID. Currently required."
        },
        "ownerGaiaId": {
          "description": "The owner of the circle. Currently required.",
          "type": "string",
          "format": "int64"
        },
        "requiredConsistencyTimestampUsec": {
          "type": "string",
          "description": "If present, then tests for membership in this circle must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this circle supports checking consistency timestamps. For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present.",
          "format": "int64"
        }
      },
      "id": "CircleProto",
      "description": "Represents a Google+ Circle. Currently (12/2011), a Circle is identical to the ContactGroup with matching parameters, but Circle must only be used for true Circles and not other Focus groups, and should be preferred over ContactGroup where applicable. Soon it may become more efficient to check membership in a Circle than in a ContactGroup (see http://go/superglue). Support for this principal type is currently (12/2011) incomplete -- e.g., Keystore does not support it yet (see b/5703421).",
      "type": "object"
    },
    "UserInfo": {
      "id": "UserInfo",
      "description": "Contains info regarding the updater of an Activity Feed item. Next Id: 8",
      "properties": {
        "updaterCountToShow": {
          "type": "integer",
          "format": "int32",
          "description": "The number of updaters for clients to show depending on UpdaterCountDisplayType."
        },
        "updaterToShowEmail": {
          "description": "The email of the updater for clients to show used for Gmail items. For Drive Notifications, this is the email of the user who triggered the Drive Notification email. This field will be populated if we can extract such information from the Drive Notification email. This is not the actual sender of the email, as the sender is always comments-noreply@docs.google.com.",
          "type": "string"
        },
        "updaterToShowUserId": {
          "description": "The updater for clients to show used for Dynamite Chat items.",
          "$ref": "UserId"
        },
        "updaterToShowName": {
          "type": "string",
          "description": "The display name of the updater for clients to show used for Gmail items. For non-Drive Notification items, this field will always be populated. If the display name cannot be found for the user, the fallback string will be the email address. For Drive Notification items, this is the name of the user who triggered the Drive notification email. This field will be populated if we can extract such information from the Drive Notification email. If the name cannot be extracted, then the email will be the fallback string, which is used as the display name text in the UI when needed. This is not the actual sender of the email, as the sender is always comments-noreply@docs.google.com."
        },
        "updaterToShowGaiaId": {
          "description": "The gaia id of the updater for clients to show used for Gmail items. If the updater is an external user, the email field below should be populated.",
          "type": "string",
          "format": "int64"
        },
        "updaterCountDisplayType": {
          "enum": [
            "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED",
            "NO_DISPLAY_COUNT",
            "EXACT_COUNT",
            "NONZERO_COUNT"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "No additional updaters where involved. Shows up in clients as \"$USERNAME replied\".",
            "A precise updater count is known and the value set in updater_count_to_show should be used. If set, updater_count_to_show is set to the total number of updaters minus the one set in updater_to_show. Shows up in clients as \"$USERNAME and $NUM others replied\".",
            "A precise updater count could not be calculated, but there is at least one. Any value set in updater_count_to_show should NOT be used. Shows up in clients as \"$USERNAME and others replied\"."
          ],
          "description": "Describes how updater_count_to_show should be used."
        },
        "driveNotificationAvatarUrl": {
          "type": "string",
          "description": "Avatar url of the user who triggered the Drive Notification email. This field will be populated if we can extract such information from the Drive Notification email. This should only be used to fetch user avatars when updater_to_show_email is not populated. This field is not set for non-Drive Notification items."
        }
      },
      "type": "object"
    },
    "EmailAddress": {
      "type": "object",
      "id": "EmailAddress",
      "description": "A person's email address.",
      "properties": {
        "type": {
          "description": "The type of the email account. Acceptable values are: \"custom\", \"home\", \"other\", \"work\".",
          "type": "string"
        },
        "customType": {
          "description": "If the value of type is custom, this property contains the custom type string.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates if this is the user's primary email. Only one entry can be marked as primary."
        },
        "emailUrl": {
          "type": "string",
          "description": "The URL to send email."
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address."
        }
      }
    },
    "AppsDynamiteStorageTextParagraph": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text that's shown in the widget."
        }
      },
      "description": "A paragraph of text that supports formatting. See [Text formatting](workspace/add-ons/concepts/widgets#text_formatting\") for details.",
      "id": "AppsDynamiteStorageTextParagraph"
    },
    "AppsDynamiteStorageSelectionInputSelectionItem": {
      "id": "AppsDynamiteStorageSelectionInputSelectionItem",
      "type": "object",
      "description": "The item in the switch control. A radio button, at most one of the items is selected.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value associated with this item. The client should use this as a form input value."
        },
        "selected": {
          "description": "If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored.",
          "type": "boolean"
        },
        "text": {
          "type": "string",
          "description": "The text to be displayed."
        }
      }
    },
    "Source": {
      "type": "object",
      "id": "Source",
      "properties": {
        "name": {
          "type": "string",
          "description": "Source name for content indexed by the Indexing API."
        },
        "predefinedSource": {
          "enum": [
            "NONE",
            "QUERY_HISTORY",
            "PERSON",
            "GOOGLE_DRIVE",
            "GOOGLE_GMAIL",
            "GOOGLE_SITES",
            "GOOGLE_GROUPS",
            "GOOGLE_CALENDAR",
            "GOOGLE_KEEP"
          ],
          "description": "Predefined content source for Google Apps.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Suggests queries issued by the user in the past. Only valid when used with the suggest API. Ignored when used in the query API.",
            "Suggests people in the organization. Only valid when used with the suggest API. Results in an error when used in the query API.",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        }
      },
      "description": "Defines sources for the suggest/search APIs."
    },
    "AppsDynamiteStorageDecoratedText": {
      "type": "object",
      "id": "AppsDynamiteStorageDecoratedText",
      "properties": {
        "startIcon": {
          "$ref": "AppsDynamiteStorageIcon",
          "description": "The icon displayed in front of the text."
        },
        "switchControl": {
          "description": "A switch widget can be clicked to change its state or trigger an action.",
          "$ref": "AppsDynamiteStorageDecoratedTextSwitchControl"
        },
        "icon": {
          "description": "Deprecated in favor of start_icon.",
          "$ref": "AppsDynamiteStorageIcon"
        },
        "bottomLabel": {
          "type": "string",
          "description": "The formatted text label that shows below the main text."
        },
        "topLabel": {
          "description": "The formatted text label that shows above the main text.",
          "type": "string"
        },
        "button": {
          "$ref": "AppsDynamiteStorageButton",
          "description": "A button that can be clicked to trigger an action."
        },
        "wrapText": {
          "description": "The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated.",
          "type": "boolean"
        },
        "endIcon": {
          "description": "An icon displayed after the text.",
          "$ref": "AppsDynamiteStorageIcon"
        },
        "onClick": {
          "description": "Only the top and bottom label and content region are clickable.",
          "$ref": "AppsDynamiteStorageOnClick"
        },
        "text": {
          "type": "string",
          "description": "Required. The main widget formatted text. See Text formatting for details."
        }
      },
      "description": "A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text."
    },
    "ObjectDefinition": {
      "type": "object",
      "description": "The definition for an object within a data source.",
      "properties": {
        "options": {
          "description": "The optional object-specific options.",
          "$ref": "ObjectOptions"
        },
        "name": {
          "type": "string",
          "description": "The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters."
        },
        "propertyDefinitions": {
          "items": {
            "$ref": "PropertyDefinition"
          },
          "type": "array",
          "description": "The property definitions for the object. The maximum number of elements is 1000."
        }
      },
      "id": "ObjectDefinition"
    },
    "MessageId": {
      "type": "object",
      "description": "Primary key for Message resource.",
      "id": "MessageId",
      "properties": {
        "parentId": {
          "$ref": "MessageParentId",
          "description": "ID of the Message's immediate parent."
        },
        "messageId": {
          "description": "Opaque, server-assigned ID of the Message. While this ID is guaranteed to be unique within the Space, it's not guaranteed to be globally unique.",
          "type": "string"
        }
      }
    },
    "UpdateCcRecipients": {
      "type": "object",
      "properties": {
        "ccRecipients": {
          "items": {
            "$ref": "Recipient"
          },
          "type": "array"
        }
      },
      "id": "UpdateCcRecipients"
    },
    "NamedProperty": {
      "type": "object",
      "id": "NamedProperty",
      "properties": {
        "booleanValue": {
          "type": "boolean"
        },
        "objectValues": {
          "$ref": "ObjectValues"
        },
        "doubleValues": {
          "$ref": "DoubleValues"
        },
        "name": {
          "type": "string",
          "description": "The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters."
        },
        "dateValues": {
          "$ref": "DateValues"
        },
        "enumValues": {
          "$ref": "EnumValues"
        },
        "textValues": {
          "$ref": "TextValues"
        },
        "integerValues": {
          "$ref": "IntegerValues"
        },
        "timestampValues": {
          "$ref": "TimestampValues"
        },
        "htmlValues": {
          "$ref": "HtmlValues"
        }
      },
      "description": "A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`."
    },
    "MembershipChangeEvent": {
      "type": "object",
      "properties": {
        "participantId": {
          "items": {
            "$ref": "StoredParticipantId"
          },
          "type": "array"
        },
        "leaveReason": {
          "enum": [
            "LEAVE_REASON_UNKNOWN",
            "FORCE_HISTORY_POLICY_CHANGE",
            "USER_INITIATED"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "This should only be set when MembershipChange type is LEAVE.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "JOIN",
            "LEAVE"
          ]
        }
      },
      "id": "MembershipChangeEvent"
    },
    "MdbUserProto": {
      "properties": {
        "gaiaId": {
          "description": "Do not set this field. Contact credentials-eng@ if you believe you absolutely need to use it. This is the @prod.google.com Gaia ID that corresponds to the MDB user, see go/authn-merge for details. This field may always be safely ignored when performing an authorization check.",
          "format": "int64",
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "id": "MdbUserProto",
      "type": "object",
      "description": "An entity from the MDB namespace that is to be interpreted as a user. If using this for authorization, you should only do an exact match on the peer role against user_name."
    },
    "UpdateToRecipients": {
      "properties": {
        "toRecipients": {
          "items": {
            "$ref": "Recipient"
          },
          "type": "array"
        }
      },
      "id": "UpdateToRecipients",
      "type": "object"
    },
    "VoicePhoneNumberI18nData": {
      "properties": {
        "isValid": {
          "type": "boolean",
          "description": "When present, indicates the number is valid according to the libphonenumber's isValidNumber API (see https://code.google.com/p/libphonenumber/)."
        },
        "internationalNumber": {
          "description": "Display number formatted using the INTERNATIONAL format.",
          "type": "string"
        },
        "nationalNumber": {
          "description": "Display number formatted using the NATIONAL format.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "A region (country, territory, continent, etc), as defined by Unicode's \"CLDR\", itself based on ISO 3166 (UN country codes). For details, see https://www.corp.google.com/~engdocs/java/com/google/i18n/identifiers/RegionCode.html"
        },
        "countryCode": {
          "description": "The country calling code for this number, as defined by the ITU. For example, this would be 1 for NANPA countries, and 33 for France (for more info see i18n.phonenumbers.PhoneNumber.country_code).",
          "format": "int32",
          "type": "integer"
        },
        "validationResult": {
          "description": "When set to a non-default value, indicates the validation reason that is set when phone number is invalid (is_valid is false).",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "IS_POSSIBLE",
            "INVALID_COUNTRY_CODE",
            "TOO_SHORT",
            "TOO_LONG",
            "IS_POSSIBLE_LOCAL_ONLY",
            "INVALID_LENGTH"
          ]
        }
      },
      "id": "VoicePhoneNumberI18nData",
      "type": "object"
    },
    "AddonComposeUiActionMarkup": {
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Default. When unspecified, no action is taken.",
            "Dismisses the add-on compose UI."
          ],
          "enum": [
            "UNSPECIFIED",
            "DISMISS"
          ],
          "type": "string"
        }
      },
      "id": "AddonComposeUiActionMarkup"
    },
    "ImageCropStyle": {
      "type": "object",
      "description": "Represents a crop style that can be applied to an image.",
      "id": "ImageCropStyle",
      "properties": {
        "aspectRatio": {
          "type": "number",
          "description": "The aspect ratio to use if the crop type is RECTANGLE_CUSTOM.",
          "format": "double"
        },
        "type": {
          "description": "The crop type.",
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "type": "string"
        }
      }
    },
    "AppsDynamiteStorageGrid": {
      "type": "object",
      "id": "AppsDynamiteStorageGrid",
      "description": "Represents a Grid widget that displays items in a configurable grid layout.",
      "properties": {
        "borderStyle": {
          "description": "The border style to apply to each grid item.",
          "$ref": "AppsDynamiteStorageBorderStyle"
        },
        "onClick": {
          "$ref": "AppsDynamiteStorageOnClick",
          "description": "This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters."
        },
        "items": {
          "items": {
            "$ref": "AppsDynamiteStorageGridGridItem"
          },
          "description": "The items to display in the grid.",
          "type": "array"
        },
        "columnCount": {
          "format": "int32",
          "description": "The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).",
          "type": "integer"
        },
        "title": {
          "description": "The text that displays in the grid header.",
          "type": "string"
        }
      }
    },
    "Status": {
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "id": "Status"
    },
    "Attachment": {
      "id": "Attachment",
      "type": "object",
      "description": "Attachments that follow the message text.",
      "properties": {
        "attachmentId": {
          "type": "string",
          "description": "To identify an attachment within repeated in a message"
        },
        "cardAddOnData": {
          "description": "Card AddOn attachment with the possibility for specifying editable widgets.",
          "$ref": "AppsDynamiteStorageCard"
        },
        "slackDataImageUrlHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The height of image url as fetched by fife. This field is asynchronously filled."
        },
        "slackData": {
          "$ref": "AppsDynamiteV1ApiCompatV1Attachment",
          "description": "Slack attachment."
        },
        "appId": {
          "description": "The userId for the bot/app that created this data, to be used for attribution of attachments when the attachment was not created by the message sender.",
          "$ref": "UserId"
        },
        "addOnData": {
          "description": "Revised version of Gmail AddOn attachment approved by API design review.",
          "$ref": "GoogleChatV1ContextualAddOnMarkup"
        },
        "deprecatedAddOnData": {
          "description": "Deprecated version of Gmail AddOn attachment.",
          "$ref": "ContextualAddOnMarkup"
        }
      }
    },
    "AppsDynamiteSharedGroupDetails": {
      "properties": {
        "description": {
          "description": "A simple text that describes the purpose of a single Group, the general theme of the topics to be posted and/or the denominator of the Group participants.",
          "type": "string"
        },
        "guidelines": {
          "type": "string",
          "description": "A simple text describing the rules and expectations from members when participating in conversation."
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedGroupDetails",
      "description": "NEXT TAG: 3 A GroupDetails proto will store the information pertaining to single Group."
    },
    "HtmlValues": {
      "description": "List of html values.",
      "id": "HtmlValues",
      "type": "object",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The maximum allowable length for html values is 2048 characters."
        }
      }
    },
    "ChatClientActionMarkup": {
      "id": "ChatClientActionMarkup",
      "type": "object",
      "properties": {},
      "description": "Actions handled by Chat Clients."
    },
    "BroadcastStats": {
      "type": "object",
      "properties": {
        "estimatedViewerCount": {
          "type": "string",
          "format": "int64",
          "description": "Estimated concurrent viewer count."
        }
      },
      "id": "BroadcastStats",
      "description": "Statistics of the broadcast session."
    },
    "DriveClientActionMarkup": {
      "id": "DriveClientActionMarkup",
      "type": "object",
      "properties": {
        "requestFileScope": {
          "$ref": "RequestFileScope"
        }
      }
    },
    "PinnedItemId": {
      "properties": {
        "driveId": {
          "type": "string",
          "description": "Identifier for a Drive file (e.g. Docs, Sheets, Slides)."
        }
      },
      "type": "object",
      "id": "PinnedItemId"
    },
    "SourceCrowdingConfig": {
      "type": "object",
      "properties": {
        "numSuggestions": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0."
        },
        "numResults": {
          "description": "Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "SourceCrowdingConfig",
      "description": "Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host \"crowd out\" other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source."
    },
    "AppsDynamiteSharedDocument": {
      "properties": {
        "fileId": {
          "type": "string",
          "description": "Unique file ID."
        },
        "title": {
          "type": "string",
          "description": "Title of the document."
        },
        "mimeType": {
          "description": "Used to determine which icon to render (e.g. docs, slides, sheets)",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "Time the document was last modified.",
          "format": "google-datetime",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "URL of the document."
        },
        "justification": {
          "$ref": "AppsDynamiteSharedJustification",
          "description": "Justification to explain why this document is being suggested."
        }
      },
      "type": "object",
      "description": "Data for rendering a document.",
      "id": "AppsDynamiteSharedDocument"
    },
    "AppsDynamiteSharedCardClickSuggestion": {
      "type": "object",
      "properties": {
        "actionId": {
          "description": "Identify the button/action that created the suggestion. A simple example would be a card button within the stream, or the id which can identify a specific suggestion.",
          "type": "string"
        },
        "suggestionMessageId": {
          "$ref": "MessageId",
          "description": "The message_id for the message that was posted by the app/bot."
        }
      },
      "id": "AppsDynamiteSharedCardClickSuggestion",
      "description": "Card click which identifies one suggestion provided by the app/bot."
    },
    "ChatConserverDynamitePlaceholderMetadataTasksMetadata": {
      "description": "A Tasks message in Dynamite.",
      "properties": {},
      "id": "ChatConserverDynamitePlaceholderMetadataTasksMetadata",
      "type": "object"
    },
    "PrefWritten": {
      "description": "PREF_WRITTEN",
      "type": "object",
      "id": "PrefWritten",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ItemContent": {
      "type": "object",
      "properties": {
        "inlineContent": {
          "format": "byte",
          "description": "Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB).",
          "type": "string"
        },
        "hash": {
          "type": "string",
          "description": "Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters."
        },
        "contentDataRef": {
          "description": "Upload reference ID of a previously uploaded content via write method.",
          "$ref": "UploadItemRef"
        },
        "contentFormat": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "HTML",
            "TEXT",
            "RAW"
          ],
          "enumDescriptions": [
            "Invalid value.",
            "contentFormat is HTML.",
            "contentFormat is free text.",
            "contentFormat is raw bytes."
          ]
        }
      },
      "id": "ItemContent",
      "description": "Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded."
    },
    "FuseboxPrefUpdatePreState": {
      "description": "If the Value field is not set this means the pref did not exist.",
      "id": "FuseboxPrefUpdatePreState",
      "type": "object",
      "properties": {
        "value": {
          "format": "byte",
          "type": "string"
        }
      }
    },
    "TextValues": {
      "description": "List of text values.",
      "type": "object",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The maximum allowable length for text values is 2048 characters."
        }
      },
      "id": "TextValues"
    },
    "AppsDynamiteStorageAction": {
      "description": "An action that describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "properties": {
        "loadIndicator": {
          "enum": [
            "SPINNER",
            "NONE"
          ],
          "enumDescriptions": [
            "Displays a spinner to indicate that content is loading.",
            "Nothing is displayed."
          ],
          "type": "string"
        },
        "interaction": {
          "type": "string",
          "enum": [
            "INTERACTION_UNSPECIFIED",
            "OPEN_DIALOG"
          ],
          "enumDescriptions": [
            "Default value if interaction is not specified.",
            "A dialog opens by clicking the button."
          ]
        },
        "function": {
          "description": "Apps Script function to invoke when the containing element is clicked/activated.",
          "type": "string"
        },
        "persistValues": {
          "description": "Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all actions, as this locks the UI to ensure no changes are made by the user while the action is being processed.",
          "type": "boolean"
        },
        "parameters": {
          "items": {
            "$ref": "AppsDynamiteStorageActionActionParameter"
          },
          "type": "array",
          "description": "List of action parameters."
        }
      },
      "type": "object",
      "id": "AppsDynamiteStorageAction"
    },
    "CardCapabilityMetadata": {
      "id": "CardCapabilityMetadata",
      "type": "object",
      "properties": {
        "requiredCapabilities": {
          "description": "NEXT TAG : 2",
          "items": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUPPORTS_BASE_CARDS"
            ],
            "enumDescriptions": [
              "",
              "NEXT TAG : 2"
            ]
          },
          "type": "array"
        }
      }
    },
    "AppsDynamiteSharedReaction": {
      "properties": {
        "createTimestamp": {
          "format": "int64",
          "type": "string",
          "description": "When the first emoji of this type was added."
        },
        "currentUserParticipated": {
          "type": "boolean",
          "description": "Whether the current user reacted using this emoji. Note: Unlike most properties of messages, this is different per-user."
        },
        "count": {
          "description": "The total number of users who have reacted.",
          "format": "int32",
          "type": "integer"
        },
        "emoji": {
          "$ref": "AppsDynamiteSharedEmoji"
        }
      },
      "id": "AppsDynamiteSharedReaction",
      "type": "object"
    },
    "FuseboxItem": {
      "id": "FuseboxItem",
      "properties": {
        "references": {
          "$ref": "References",
          "description": "References to attachments, video attachments in Youtube and Hangout messages."
        },
        "triggers": {
          "$ref": "Triggers"
        },
        "labels": {
          "$ref": "Labels"
        },
        "attributes": {
          "$ref": "Attributes"
        },
        "history": {
          "$ref": "History"
        },
        "creationTimeMicroseconds": {
          "type": "string",
          "format": "uint64",
          "description": "The creation time of the Item in micro seconds."
        },
        "itemKey": {
          "$ref": "MultiKey",
          "description": "The key is used to refer to an item. Note that every field of the MultiKey is unique to the Item, and thus the Item can be looked up by any of the fields."
        },
        "parts": {
          "description": "Type-specific data are represented as extensions to the ItemParts message.",
          "$ref": "ItemParts"
        },
        "snippet": {
          "description": "The snippet is a brief bit of text describing this item.",
          "type": "string"
        },
        "matchInfo": {
          "$ref": "MatchInfo"
        },
        "threadLocator": {
          "description": "A base64 encoded and encrypted string generated from the Gaia Id and the thread id. Used to generate the permalink for this thread, exposed from Gmail API.",
          "type": "string"
        },
        "lastModificationTimeUs": {
          "format": "uint64",
          "type": "string",
          "description": "The modification time of the Item in micro seconds. Modifications to the message include label addition, deletion, etc."
        },
        "readTs": {
          "type": "string",
          "format": "int64",
          "description": "The read timestamp at which this item was read. This is a temporary field used to check if two items streamed during dual reading were read at the same timestamp. This will be populated by Fusebox RPCs. \"DO NOT USE UNLESS YOU TALK TO FUSEBOX TEAM (gmail-fusebox@)\"."
        },
        "lockerReferences": {
          "description": "go/lockpicker Locker counterpart of references.",
          "$ref": "References"
        },
        "version": {
          "format": "uint64",
          "description": "The latest history operation id that resulted in a mutation of the item.",
          "type": "string"
        },
        "threadKey": {
          "description": "The key of the Thread with which this Item is associated.",
          "$ref": "MultiKey"
        }
      },
      "type": "object",
      "description": "The Item message is the read interface for user data (traditionally referred to as a \"message\", such as a mail message or a chat message, but generalized to encompass other types such as tasks) and stored in Tingle. Each Item is associated with a single Thread. An Item contains three classes of data. (1): Item \"fields\" are common to items of all message types (e.g. mail, chat, task, etc.) and are identified by the ItemFieldSpec.FetchType enum when fetching Items. (2): Item \"attributes\" represent data associated with an Item that is stored on behalf of the client but to which the fusebox and storage layers are otherwise agnostic. (3): Item \"parts\" are application-defined protocol buffers that affect how the Item is indexed. Item parts are referenced as extensions to the ItemParts message. By default the application specifies the index terms associated with an Item part. For performance sensitive applications, the storage layer can be modified to understand and index data types natively."
    },
    "CallSettings": {
      "description": "Effective settings of the ongoing conference.",
      "type": "object",
      "id": "CallSettings",
      "properties": {
        "attendanceReportEnabled": {
          "type": "boolean",
          "description": "Indicates whether the attendance report is currently enabled or disabled."
        },
        "reactionsLock": {
          "description": "Indicates whether the reactions lock is currently on or off.",
          "type": "boolean"
        },
        "accessLock": {
          "type": "boolean",
          "description": "Indicates whether the access lock is currently on or off."
        },
        "presentLock": {
          "description": "Indicates whether the present lock is currently on or off.",
          "type": "boolean"
        },
        "accessType": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Anyone with meeting join information (url, phone access...) can join, no knocking required. (Subject to organization policies)",
            "Members of the Host's organization, invited external users, and dial-in users can join without knocking, everyone else must knock. (Subject to organization policies)",
            "Only participants invited by a host can automatically join, everyone else must knock and be admitted. (Subject to organization policies) Participants cannot dial out from the meeting. And only hosts can accept knocks."
          ],
          "enum": [
            "ACCESS_TYPE_UNSPECIFIED",
            "ACCESS_TYPE_OPEN",
            "ACCESS_TYPE_TRUSTED",
            "ACCESS_TYPE_RESTRICTED"
          ],
          "description": "The current access type of the conference.",
          "type": "string"
        },
        "audioLock": {
          "type": "boolean",
          "description": "Indicates whether the audio lock is currently on or off."
        },
        "allowJoiningBeforeHost": {
          "type": "boolean",
          "description": "Whether users can join this conference before a host (Host or Cohost)."
        },
        "cseEnabled": {
          "description": "Whether Client-side Encryption is enabled for this conference.",
          "type": "boolean"
        },
        "videoLock": {
          "type": "boolean",
          "description": "Indicates whether the video lock is currently on or off."
        },
        "moderationEnabled": {
          "description": "Indicates whether moderation is currently on or off.",
          "type": "boolean"
        },
        "chatLock": {
          "type": "boolean",
          "description": "Indicates whether the chat lock is currently on or off."
        }
      }
    },
    "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent": {
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the event (at the time the message was generated).",
          "type": "string"
        },
        "endTime": {
          "description": "The end time of the event.",
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime"
        },
        "startTime": {
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime",
          "description": "The start time of the event."
        },
        "eventId": {
          "type": "string",
          "description": "ID of the event."
        }
      },
      "id": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent"
    },
    "AppsDynamiteSharedTasksAnnotationDataCompletionChange": {
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationDataCompletionChange",
      "properties": {}
    },
    "IntegrationConfigMutation": {
      "id": "IntegrationConfigMutation",
      "type": "object",
      "properties": {
        "addPinnedItem": {
          "$ref": "PinnedItemId",
          "description": "Add a pinned tab using its identifier."
        },
        "addApp": {
          "description": "Add an app using its identifier.",
          "$ref": "AppId"
        },
        "removeApp": {
          "description": "Remove an active app using its identifier.",
          "$ref": "AppId"
        },
        "removePinnedItem": {
          "description": "Remove an active pinned tab using its identifier.",
          "$ref": "PinnedItemId"
        }
      }
    },
    "Image": {
      "type": "object",
      "id": "Image",
      "properties": {
        "imageUrl": {
          "type": "string",
          "description": "Image url specified by developers. Server side, we will wrap with FIFE so client apps can configure size/cropping/etc."
        },
        "altText": {
          "type": "string",
          "description": "The alternative text of this image which will be used for accessibility."
        },
        "aspectRatio": {
          "type": "number",
          "format": "double",
          "description": "The aspect ratio of this image (width/height)."
        },
        "onClick": {
          "$ref": "OnClick"
        }
      }
    },
    "ChatProto": {
      "type": "object",
      "id": "ChatProto",
      "properties": {
        "memberType": {
          "format": "int32",
          "type": "integer",
          "description": "The type of Chat members to consider, e.g. \"all members\" vs. \"invitee\" These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See chat.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with chat. Currently required."
        },
        "chatId": {
          "description": "Chat IDs consist of alphanumeric characters and colons. Currently required.",
          "type": "string"
        }
      },
      "description": "Represents the invitees or other users associated with a Babel Chat (see http://goto/babel). Corresponds to GroupType CHAT in //social/graph/storage/proto/data.proto."
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply": {
      "properties": {
        "replyType": {
          "type": "string",
          "enumDescriptions": [
            "",
            "The thread reply feed item is for the root message poster.",
            "The thread reply feed item is for a thread follower who's not the root message poster."
          ],
          "enum": [
            "UNSPECIFIED",
            "ROOT",
            "FOLLOWER"
          ],
          "description": "Reply type of the thread reply feed item. The field is not persisted in storage. It's populated when constructing Activity Feed payload."
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply",
      "description": "Existence of this attribute indicates that the AF item is for thread reply."
    },
    "RoomRenameMetadata": {
      "properties": {
        "prevName": {
          "description": "NEXT_TAG: 3",
          "type": "string"
        },
        "newName": {
          "type": "string"
        }
      },
      "id": "RoomRenameMetadata",
      "type": "object"
    },
    "FolderAttribute": {
      "description": "This is the content of //imapsync/folder attribute.",
      "id": "FolderAttribute",
      "type": "object",
      "properties": {
        "folder": {
          "description": "List of all IMAP folders where the message presents.",
          "type": "array",
          "items": {
            "$ref": "Folder"
          }
        }
      }
    },
    "Principal": {
      "description": "Reference to a user, group, or domain.",
      "properties": {
        "gsuitePrincipal": {
          "$ref": "GSuitePrincipal",
          "description": "This principal is a Google Workspace user, group or domain."
        },
        "userResourceName": {
          "type": "string",
          "description": "This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID}"
        },
        "groupResourceName": {
          "description": "This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID}",
          "type": "string"
        }
      },
      "id": "Principal",
      "type": "object"
    },
    "Attributes": {
      "properties": {
        "attribute": {
          "type": "array",
          "items": {
            "$ref": "Attribute"
          }
        }
      },
      "type": "object",
      "id": "Attributes"
    },
    "IncomingWebhookChangedMetadata": {
      "id": "IncomingWebhookChangedMetadata",
      "type": "object",
      "description": "Annotation metadata to display system messages for incoming webhook events. Next Tag: 7",
      "properties": {
        "type": {
          "enum": [
            "UNSPECIFIED",
            "ADDED",
            "UPDATED",
            "REMOVED",
            "UPDATED_NAME",
            "UPDATED_AVATAR",
            "UPDATED_NAME_AND_AVATAR"
          ],
          "type": "string",
          "description": "Used in Spanner storage, BE API responses and FE API responses.",
          "enumDescriptions": [
            "",
            "",
            "TODO (b/154857280): remove UPDATED field.",
            "",
            "",
            "",
            ""
          ]
        },
        "oldIncomingWebhookName": {
          "type": "string",
          "description": "Only populated for UPDATED_NAME and UPDATED_NAME_AND_AVATAR events, where the webhook name was changed. Used in Spanner storage, BE API responses and FE API responses."
        },
        "obfuscatedIncomingWebhookId": {
          "description": "The webhook id of the incoming webhook in question. This field should not be used to load webhook information dynamically and is only present for debugging purposes. Used in Spanner storage, BE API responses and FE API responses.",
          "type": "string"
        },
        "initiatorProfile": {
          "description": "Complete profile when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in. Used in FE API responses.",
          "$ref": "User"
        },
        "initiatorId": {
          "description": "The user id of the user whose action triggered this system message. Used in Spanner storage, BE API responses and FE API responses.",
          "$ref": "UserId"
        },
        "incomingWebhookName": {
          "description": "The webhook name at the time of the change. Used in Spanner storage, BE API responses and FE API responses.",
          "type": "string"
        }
      }
    },
    "AppsDynamiteStorageImageCropStyle": {
      "id": "AppsDynamiteStorageImageCropStyle",
      "description": "Represents the crop style applied to an image.",
      "properties": {
        "aspectRatio": {
          "description": "The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.",
          "type": "number",
          "format": "double"
        },
        "type": {
          "enum": [
            "IMAGE_CROP_TYPE_UNSPECIFIED",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "type": "string",
          "description": "The crop type."
        }
      },
      "type": "object"
    },
    "BroadcastAccess": {
      "id": "BroadcastAccess",
      "type": "object",
      "properties": {
        "accessPolicy": {
          "enum": [
            "BROADCASTING_ACCESS_POLICY_UNSPECIFIED",
            "ORGANIZATION",
            "PUBLIC"
          ],
          "enumDescriptions": [
            "Used only when broadcast is not enabled, or an unknown enum value is used.",
            "Only authenticated Google accounts belonging to the same organization as the meeting organizer can access the broadcast.",
            "Anyone with the broadcast view URL can access the broadcast."
          ],
          "description": "The policy that controls the broadcast's viewer access.",
          "type": "string"
        },
        "viewUrl": {
          "description": "A URL that can be used to access the broadcast of the meeting. This field will be empty if broadcast is not enabled. It will be populated by the backend. Clients cannot modify the value.",
          "type": "string"
        }
      },
      "description": "Broadcast access information of a meeting space."
    },
    "MembershipChangedMetadata": {
      "properties": {
        "affectedMembers": {
          "description": "List of users and rosters whose membership status changed.",
          "items": {
            "$ref": "MemberId"
          },
          "type": "array"
        },
        "affectedMemberships": {
          "type": "array",
          "items": {
            "$ref": "AffectedMembership"
          }
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Non-member -\u003e Can join. Multiple groups and users.",
            "Can join -\u003e Member. One user.",
            "Non-member -\u003e Member. Multiple users.",
            "Can join -\u003e Non-member. One group or user.",
            "Member -\u003e Can join. One user.",
            "Bot added to the room.",
            "Bot removed from the room.",
            "This signifies the user is kicked because the user's OTR policy is conflicted with the room history settings. Joined -\u003e Non-member. One user.",
            "MembershipRole changed. Multiple users.",
            "The room is now joinable by an"
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "INVITED",
            "JOINED",
            "ADDED",
            "REMOVED",
            "LEFT",
            "BOT_ADDED",
            "BOT_REMOVED",
            "KICKED_DUE_TO_OTR_CONFLICT",
            "ROLE_UPDATED",
            "ROLE_TARGET_AUDIENCE_UPDATED"
          ]
        },
        "initiatorType": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "The type of the user who initiated this membership change.",
          "enum": [
            "INITIATOR_TYPE_UNSPECIFIED",
            "INITIATOR_TYPE_END_USER",
            "INITIATOR_TYPE_ADMIN"
          ]
        },
        "initiator": {
          "description": "The user whose action triggered this system message.",
          "$ref": "UserId"
        },
        "affectedMemberProfiles": {
          "items": {
            "$ref": "Member"
          },
          "type": "array"
        },
        "initiatorProfile": {
          "$ref": "User",
          "description": "Complete member profiles, when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in."
        }
      },
      "description": "Annotation metadata to display system messages for membership changes. Next Tag: 8",
      "id": "MembershipChangedMetadata",
      "type": "object"
    },
    "GoogleChatV1ContextualAddOnMarkupCard": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the card."
        },
        "sections": {
          "description": "Sections are separated by a line divider.",
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkupCardSection"
          },
          "type": "array"
        },
        "cardActions": {
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkupCardCardAction"
          },
          "type": "array",
          "description": "The actions of this card."
        },
        "header": {
          "description": "The header of the card. A header usually contains a title and an image.",
          "$ref": "GoogleChatV1ContextualAddOnMarkupCardCardHeader"
        }
      },
      "description": "A card is a UI element that can contain UI widgets such as texts, images.",
      "id": "GoogleChatV1ContextualAddOnMarkupCard",
      "type": "object"
    },
    "AppsDynamiteSharedJustificationPerson": {
      "description": "Data for rendering a person associated with a document.",
      "properties": {
        "user": {
          "description": "Obfuscated user ID.",
          "$ref": "UserId"
        },
        "isRecipient": {
          "description": "Whether the person is the recipient of the suggestions.",
          "type": "boolean"
        }
      },
      "id": "AppsDynamiteSharedJustificationPerson",
      "type": "object"
    },
    "ListDataSourceResponse": {
      "properties": {
        "sources": {
          "items": {
            "$ref": "DataSource"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      },
      "id": "ListDataSourceResponse",
      "type": "object"
    },
    "Collaboration": {
      "description": "Information about a collaboration session.",
      "id": "Collaboration",
      "properties": {
        "attachmentId": {
          "type": "string",
          "description": "The attachment being collaborated on."
        },
        "initiator": {
          "$ref": "UserDisplayInfo",
          "description": "Display info of the user who initiated the collaboration session."
        },
        "uri": {
          "description": "The uri of the artifact being collaborated on.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedDimension": {
      "properties": {
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "Dimension for the uploaded attachments.",
      "id": "AppsDynamiteSharedDimension"
    },
    "GatewayAccess": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether third-party gateway accesses are enabled for this meeting space. If enabled, the actual access code can be retrieved by calling the GetGatewayAccess RPC method."
        }
      },
      "description": "Details on the third-party interoperability settings for the meeting space.",
      "id": "GatewayAccess",
      "type": "object"
    },
    "WhiteboardInfo": {
      "description": "Information on a whiteboard attached to an active conference. A whiteboard is a Jam document.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the whiteboard document."
        },
        "uri": {
          "type": "string",
          "description": "The uri for whiteboard document."
        },
        "id": {
          "type": "string",
          "description": "The Cosmo Id of the whiteboard document (Jam)."
        }
      },
      "type": "object",
      "id": "WhiteboardInfo"
    },
    "HangoutEvent": {
      "properties": {
        "participantId": {
          "items": {
            "$ref": "StoredParticipantId"
          },
          "type": "array"
        },
        "hangoutDurationSecs": {
          "format": "int64",
          "type": "string"
        },
        "mediaType": {
          "enum": [
            "AUDIO_VIDEO",
            "AUDIO_ONLY",
            "PUSH_TO_TALK"
          ],
          "enumDescriptions": [
            "",
            "",
            "A user has started a PTT broadcast. When receiving a notification with this HangoutMediaType, other users in the conversation will take different actions depending on their active clients: a) If there is a recent \"reasonable\" active client, the user will join hangout and play audio. b) If there is no \"reasonable\" active client an invite will be displayed on all clients."
          ],
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "START_HANGOUT",
            "JOIN_HANGOUT",
            "LEAVE_HANGOUT",
            "END_HANGOUT",
            "HANGOUT_COMING_SOON",
            "ONGOING_HANGOUT"
          ]
        }
      },
      "type": "object",
      "id": "HangoutEvent"
    },
    "RecordingSessionInfo": {
      "description": "Information about a recording session.",
      "type": "object",
      "id": "RecordingSessionInfo",
      "properties": {
        "recordingSessionId": {
          "description": "A unique server-generated ID for the recording session.",
          "type": "string"
        },
        "sessionStateInfo": {
          "$ref": "SessionStateInfo",
          "description": "Recording session's state information."
        },
        "ownerEmail": {
          "type": "string",
          "description": "Input only. Deprecated field, should not be used."
        }
      }
    },
    "ListSearchApplicationsResponse": {
      "id": "ListSearchApplicationsResponse",
      "properties": {
        "searchApplications": {
          "type": "array",
          "items": {
            "$ref": "SearchApplication"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PushItemRequest": {
      "type": "object",
      "id": "PushItemRequest",
      "properties": {
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "item": {
          "description": "Item to push onto the queue.",
          "$ref": "PushItem"
        }
      }
    },
    "AllAuthenticatedUsersProto": {
      "id": "AllAuthenticatedUsersProto",
      "description": "Represents a principal who has authenticated as any kind of user which the application understands. This is typically used for \"wiki-like\" security, where anyone is allowed access so long as they can be held accountable for that access. Since the purpose is knowing whom to blame, it is up to the application to decide what kinds of users it knows how to blame. For example, an application might choose to include GAIA users in \"all authenticated users\", but not include MDB users. Nothing here.",
      "type": "object",
      "properties": {}
    },
    "ContentReportSummary": {
      "id": "ContentReportSummary",
      "description": "Summarized info of content reports. Usually less expensive to fetch than to fetch all detailed reports. Set only when the request asks for it.",
      "properties": {
        "numberReports": {
          "format": "int32",
          "type": "integer",
          "description": "Total number of reports attached to this (revision of) message."
        },
        "numberReportsAllRevisions": {
          "description": "Totoal number of reports attached to all revisions of this message (i.e. since creation). Set only when the request asks for it.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VideoInfo": {
      "description": "Next tag: 2",
      "type": "object",
      "id": "VideoInfo",
      "properties": {
        "duration": {
          "format": "int32",
          "description": "Duration of the video in milliseconds. This field can be absent for recently uploaded video or inaccurate sometimes.",
          "type": "integer"
        }
      }
    },
    "UrlMetadata": {
      "id": "UrlMetadata",
      "type": "object",
      "description": "Annotation metadata for a Weblink. In case of pasted link it can qualify to be other types in addition to being a URL - like DRIVE_DOC/DRIVE_SHEET and so on. The URL metadata will also be present and it's up to the client to decide which metadata to render it with. These fields are filled in using page render service.",
      "properties": {
        "url": {
          "description": "The original URL.",
          "$ref": "SafeUrlProto"
        },
        "imageUrl": {
          "type": "string",
          "description": "Representative image of the website."
        },
        "title": {
          "type": "string",
          "description": "Title of the Weblink."
        },
        "imageWidth": {
          "description": "Dimensions of the image: width. This field is string to match with page render service response. Deprecated. Use int_image_height instead.",
          "type": "string"
        },
        "gwsUrl": {
          "$ref": "SafeUrlProto",
          "description": "The signed GWS URL."
        },
        "gwsUrlExpirationTimestamp": {
          "description": "The expiration timestamp for GWS URL, only set when gws_url is set.",
          "type": "string",
          "format": "int64"
        },
        "intImageWidth": {
          "format": "int32",
          "description": "Dimensions of the image: width.",
          "type": "integer"
        },
        "mimeType": {
          "description": "Mime type of the content (Currently mapped from Page Render Service ItemType) Note that this is not necessarily the mime type of the http resource. For example a text/html from youtube or vimeo may actually be classified as a video type. Then we shall mark it as video/* since we don't know exactly what type of video it is.",
          "type": "string"
        },
        "shouldNotRender": {
          "description": "If the UrlMetadata is missing data for rendering a chip. Deprecated. Use Annotation.ChipRenderType instead.",
          "type": "boolean"
        },
        "redirectUrl": {
          "description": "The stable redirect URL pointing to frontend server.",
          "$ref": "SafeUrlProto"
        },
        "intImageHeight": {
          "type": "integer",
          "description": "Dimensions of the image: height.",
          "format": "int32"
        },
        "domain": {
          "type": "string",
          "description": "Domain for this url. If it's an IP address the address is returned."
        },
        "snippet": {
          "description": "Snippet/small description of the weblink.",
          "type": "string"
        },
        "imageHeight": {
          "type": "string",
          "description": "Dimensions of the image: height. This field is string to match with page render service response. Deprecated. Use int_image_height instead."
        },
        "urlSource": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "Set by the server, when it detects a URL in the message text",
            "Set by the client, when the user adds a link as a custom hyperlink. Validated by the server and persisted in storage."
          ],
          "enum": [
            "URL_SOURCE_UNKNOWN",
            "SERVER_SUPPLIED_POLICY_VIOLATION",
            "AUTO_DETECTED_PLAIN_TEXT",
            "RICH_TEXT"
          ]
        }
      }
    },
    "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime": {
      "type": "object",
      "id": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime",
      "properties": {
        "allDay": {
          "$ref": "Date",
          "description": "All day event."
        },
        "timed": {
          "description": "Non all day event.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "IntegerFacetingOptions": {
      "description": "Used to specify integer faceting options.",
      "properties": {
        "integerBuckets": {
          "items": {
            "type": "string",
            "format": "int64"
          },
          "type": "array",
          "description": "Buckets for given integer values should be in strictly ascending order. For example, if values supplied are (1,5,10,100), the following facet buckets will be formed {\u003c1, [1,5), [5-10), [10-100), \u003e=100}."
        }
      },
      "id": "IntegerFacetingOptions",
      "type": "object"
    },
    "AppsDynamiteStorageDateTimePicker": {
      "properties": {
        "label": {
          "type": "string",
          "description": "The label for the field that displays to the user."
        },
        "name": {
          "description": "The name of the text input that's used in formInput, and uniquely identifies this input.",
          "type": "string"
        },
        "onChangeAction": {
          "$ref": "AppsDynamiteStorageAction",
          "description": "Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation."
        },
        "type": {
          "description": "The type of the date/time picker.",
          "enumDescriptions": [
            "The user can select a date and time.",
            "The user can only select a date.",
            "The user can only select a time."
          ],
          "type": "string",
          "enum": [
            "DATE_AND_TIME",
            "DATE_ONLY",
            "TIME_ONLY"
          ]
        },
        "timezoneOffsetDate": {
          "type": "integer",
          "format": "int32",
          "description": "The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone setting on the client side."
        },
        "valueMsEpoch": {
          "type": "string",
          "format": "int64",
          "description": "The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to represent 3am."
        }
      },
      "type": "object",
      "description": "The widget that lets users to specify a date and time.",
      "id": "AppsDynamiteStorageDateTimePicker"
    },
    "ImageComponent": {
      "type": "object",
      "id": "ImageComponent",
      "properties": {
        "imageUrl": {
          "type": "string"
        },
        "altText": {
          "type": "string"
        },
        "borderStyle": {
          "$ref": "BorderStyle"
        },
        "cropStyle": {
          "$ref": "ImageCropStyle"
        }
      },
      "description": "NOTE: Through future refactoring work, this image component will eventually be used in the Image widget, and will likely replace the Icon proto as well."
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupEditConferenceDataActionMarkup": {
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupEditConferenceDataActionMarkup",
      "properties": {
        "conferenceData": {
          "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkup",
          "description": "The conference data to add to the Google Calendar event."
        }
      },
      "type": "object"
    },
    "ResourceRoleProto": {
      "properties": {
        "objectPart": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "applicationId": {
          "type": "string"
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "description": "A type of sharing target that points to some resource's ACL. Used to refer to the set of Principals that have the given privilege ('role_id') for the given resource ('application_id', 'object_id', 'object_part'). The meaning of 'role_id' is interpreted only by implementations of AclRpcService and is usually dependent on 'application_id' All fields except object_part are required. If present, object_part must be non-empty.",
      "id": "ResourceRoleProto"
    },
    "ImapsyncFolderAttributeFolderMessageFlags": {
      "id": "ImapsyncFolderAttributeFolderMessageFlags",
      "properties": {
        "seen": {
          "type": "boolean",
          "description": "Seen state of the message."
        },
        "flagged": {
          "type": "boolean",
          "description": "Flagged state of the message."
        }
      },
      "type": "object"
    },
    "JobsettedServerSpec": {
      "id": "JobsettedServerSpec",
      "properties": {
        "portName": {
          "description": "E.g. \"gateway\", \"stubby\" etc. Leave unset to use the default unnamed port.",
          "type": "string"
        },
        "serverName": {
          "type": "string",
          "description": "E.g. \"satellite-server\", \"bigtop-sync\", etc."
        }
      },
      "type": "object",
      "description": "Identifies a jobsetted server as a target for Trigger dispatch."
    },
    "Settings": {
      "properties": {
        "reactionsLock": {
          "description": "The reactions lock of the meeting space that lets owner control whether the participants can send reactions.",
          "type": "boolean"
        },
        "presentLock": {
          "description": "The present lock of the meeting space that lets owner control whether the participants can present their screen.",
          "type": "boolean"
        },
        "attendanceReportEnabled": {
          "description": "Whether attendance report is enabled for the meeting space.",
          "type": "boolean"
        },
        "cseEnabled": {
          "description": "Whether Client-side Encryption is enabled for the meeting space.",
          "type": "boolean"
        },
        "allowJoiningBeforeHost": {
          "type": "boolean",
          "description": "Whether users can join before host in the conferences of this meeting space."
        },
        "cohostArtifactSharingEnabled": {
          "type": "boolean",
          "description": "Whether meeting artifacts will be shared with cohosts."
        },
        "accessType": {
          "enum": [
            "ACCESS_TYPE_UNSPECIFIED",
            "ACCESS_TYPE_OPEN",
            "ACCESS_TYPE_TRUSTED",
            "ACCESS_TYPE_RESTRICTED"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Anyone with meeting join information (url, phone access...) can join, no knocking required. (Subject to organization policies)",
            "Members of the Host's organization, invited external users, and dial-in users can join without knocking, everyone else must knock. (Subject to organization policies)",
            "Only participants invited by a host can automatically join, everyone else must knock and be admitted. (Subject to organization policies) Participants cannot dial out from the meeting. And only hosts can accept knocks."
          ],
          "type": "string",
          "description": "The access type of the meeting space."
        },
        "moderationEnabled": {
          "type": "boolean",
          "description": "Indicates whether the meeting space is moderated."
        },
        "accessLock": {
          "description": "The access lock of the meeting space that lets hosts control who can join the meeting.",
          "type": "boolean"
        },
        "chatLock": {
          "type": "boolean",
          "description": "The chat lock of the meeting space that lets owner control whether the participants can send chat messages."
        },
        "defaultAsViewer": {
          "type": "boolean",
          "description": "Whether the default role is viewer or not."
        }
      },
      "id": "Settings",
      "description": "Settings of a meeting space that can be edited by users with corresponding manage privilege. These settings are always populated in responses.",
      "type": "object"
    },
    "BotInfo": {
      "id": "BotInfo",
      "properties": {
        "appAllowlistStatus": {
          "enum": [
            "UNSPECIFIED_STATUS",
            "ALLOWED",
            "ALL_APPS_DISABLED_BY_ADMIN",
            "APP_NOT_ALLOWLISTED_BY_ADMIN"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "For both ALL_APPS_DISABLED_BY_ADMIN and APP_NOT_ALLOWLISTED_BY_ADMIN, the app should still be visible in the catalog, but usage of the app will be disabled. Indicates that all apps have been disabled by the dasher admin.",
            "Indicates that the customer is using allowlisting, but that the bot is not allowlisted."
          ]
        },
        "botName": {
          "description": "Non-unique, user-defined display name of the Bot. This field should be populated if the request is FetchBotCategories/ListBotCatalogEntries.",
          "type": "string"
        },
        "supportHomeScreen": {
          "description": "If the app supports a home screen.",
          "type": "boolean"
        },
        "description": {
          "description": "Short description for the bot.",
          "type": "string"
        },
        "botAvatarUrl": {
          "description": "URL for the avatar picture of the User in dynamite. This field should be populated if the request is FetchBotCategories/ListBotCatalogEntries",
          "type": "string"
        },
        "status": {
          "enumDescriptions": [
            "",
            "",
            "Bot has been disabled by the bot developer. No one can @mention or interact with the bot."
          ],
          "description": "Indicates whether bot is enabled/disabled.",
          "type": "string",
          "enum": [
            "UNKNOWN_STATUS",
            "ENABLED",
            "DISABLED_BY_DEVELOPER"
          ]
        },
        "developerName": {
          "type": "string",
          "description": "Name of bot developer."
        },
        "marketPlaceBannerUrl": {
          "description": "URL for the banner image in GSuite Market Place. The banner will be 220x140.",
          "type": "string"
        },
        "supportUrls": {
          "description": "Urls with additional information related to the bot. This field should always be set even if all the fields within it are empty, so that it is convenient for clients to work with this field in javascript.",
          "$ref": "SupportUrls"
        },
        "appId": {
          "description": "Identifier of the application associated with the bot.",
          "$ref": "AppId"
        },
        "supportedUses": {
          "description": "The supported uses are limited according to the user that made the request. If the user does not have permission to use the bot, the list will be empty. This could occur for non whitelisted bots in the catalog.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "CAN_ADD_TO_DM",
              "CAN_ADD_TO_ROOM",
              "CAN_ADD_TO_HUMAN_DM"
            ],
            "enumDescriptions": [
              "",
              "",
              "",
              ""
            ]
          }
        }
      },
      "type": "object",
      "description": "Bot-specific profile information."
    },
    "AppsDynamiteSharedAssistantSessionContext": {
      "description": "Session context specific for Assistant suggestions.",
      "properties": {
        "contextualSessionId": {
          "type": "string",
          "description": "Unique identifier populated by the contextual request handler for each vertical (Ex: File Suggestions, Smart Scheduling, etc.) that can be used to track sessions end-to-end. May span multiple users (sender-specific)."
        }
      },
      "id": "AppsDynamiteSharedAssistantSessionContext",
      "type": "object"
    },
    "CalendarClientActionMarkup": {
      "type": "object",
      "properties": {
        "editConferenceDataActionMarkup": {
          "description": "An action that adds conference data to the Google Calendar event.",
          "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupEditConferenceDataActionMarkup"
        },
        "addAttachmentsActionMarkup": {
          "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkup",
          "description": "An action that adds attachments to the Google Calendar event."
        },
        "editAttendeesActionMarkup": {
          "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupEditAttendeesActionMarkup",
          "description": "An action that adds attendees to the Google Calendar event."
        }
      },
      "id": "CalendarClientActionMarkup"
    },
    "BooleanPropertyOptions": {
      "id": "BooleanPropertyOptions",
      "type": "object",
      "description": "The options for boolean properties.",
      "properties": {
        "operatorOptions": {
          "$ref": "BooleanOperatorOptions",
          "description": "If set, describes how the boolean should be used as a search operator."
        }
      }
    },
    "FixedFooter": {
      "description": "A persistent (sticky) footer that is added to the bottom of the card.",
      "properties": {
        "buttons": {
          "items": {
            "$ref": "Button"
          },
          "type": "array"
        },
        "secondaryButton": {
          "$ref": "TextButton"
        },
        "primaryButton": {
          "$ref": "TextButton"
        }
      },
      "type": "object",
      "id": "FixedFooter"
    },
    "GridItem": {
      "properties": {
        "textAlignment": {
          "type": "string",
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "title": {
          "description": "Text properties.",
          "type": "string"
        },
        "image": {
          "$ref": "ImageComponent"
        },
        "identifier": {
          "description": "A user-specified identifier for this grid item. This identifier will be returned in the parent Grid's on_click callback's parameters.",
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "layout": {
          "enumDescriptions": [
            "",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "enum": [
            "NOT_SET",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ],
          "type": "string"
        }
      },
      "id": "GridItem",
      "type": "object"
    },
    "CustomerIndexStats": {
      "properties": {
        "itemCountByStatus": {
          "items": {
            "$ref": "ItemCountByStatus"
          },
          "type": "array",
          "description": "Number of items aggregrated by status code."
        },
        "date": {
          "$ref": "Date",
          "description": "The date for which statistics were calculated."
        }
      },
      "id": "CustomerIndexStats",
      "description": "Aggregation of items by status code as of the specified date.",
      "type": "object"
    },
    "SourceConfig": {
      "description": "Configurations for a source while processing a Search or Suggest request.",
      "type": "object",
      "properties": {
        "scoringConfig": {
          "$ref": "SourceScoringConfig",
          "description": "The scoring configuration for the source."
        },
        "source": {
          "description": "The source for which this configuration is to be used.",
          "$ref": "Source"
        },
        "crowdingConfig": {
          "$ref": "SourceCrowdingConfig",
          "description": "The crowding configuration for the source."
        }
      },
      "id": "SourceConfig"
    },
    "DeleteMetadata": {
      "type": "object",
      "properties": {},
      "id": "DeleteMetadata",
      "description": "A message delete in Dynamite inserts a Babel-only item containing this field. This is only inserted for messages before the source-of-truth flip. See go/hsc-message-deletions for more details."
    },
    "IconImage": {
      "type": "object",
      "id": "IconImage",
      "properties": {
        "icon": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ],
          "type": "string",
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ]
        },
        "iconUrl": {
          "type": "string"
        },
        "altText": {
          "type": "string",
          "description": "The alternative text of this icon_url which will be used for accessibility."
        },
        "imageStyle": {
          "description": "The image cropping style. Note that icons with a CIRCLE style are rendered larger than the default icon size.",
          "enumDescriptions": [
            "No value specified.",
            "Applies a square crop.",
            "Applies a circular crop.",
            "Applies a rectangular crop with a custom aspect ratio.",
            "Applies a rectangular crop with a 4:3 aspect ratio."
          ],
          "enum": [
            "CROP_TYPE_NOT_SET",
            "SQUARE",
            "CIRCLE",
            "RECTANGLE_CUSTOM",
            "RECTANGLE_4_3"
          ],
          "type": "string"
        }
      }
    },
    "DoubleValues": {
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "id": "DoubleValues",
      "type": "object",
      "description": "List of double values."
    },
    "PreState": {
      "description": "State of the thread previous to the update. This really just describes the label state of all messages before the update.",
      "type": "object",
      "properties": {
        "messageKey": {
          "$ref": "MultiKey"
        },
        "threadKey": {
          "$ref": "MultiKey"
        },
        "syncIds": {
          "type": "array",
          "description": "Note that there can be fewer sync ids than label ids.",
          "items": {
            "format": "uint32",
            "type": "integer"
          }
        },
        "labelIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "PreState"
    },
    "AppsDynamiteStorageOpenLink": {
      "properties": {
        "openAs": {
          "type": "string",
          "enumDescriptions": [
            "The link opens as a full size window (if that's the frame used by the client.",
            "The link opens as an overlay, such as a pop-up."
          ],
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ]
        },
        "appUri": {
          "description": "Represents the platform specific uri/intent to open on each client. For example: A companion_url will open in a companion window on the web. An iOS URL and android intent will open in the corresponding hosting apps. If these platform specific URLs can't be handled correctly, i.e. if the companion isn't supported on web and the hosting apps aren't available on the mobile platforms then the `uri` will open in a new browser window on all the platforms.",
          "$ref": "AppsDynamiteStorageOpenLinkAppUri"
        },
        "url": {
          "description": "The URL to open.",
          "type": "string"
        },
        "onClose": {
          "enum": [
            "NOTHING",
            "RELOAD"
          ],
          "enumDescriptions": [
            "Doesn’t reload the card after the child window closes. Reloads the card after the child window closes. If used in conjunction with [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas), the child window acts as a modal dialog and the main card is blocked until the child window closes.",
            ""
          ],
          "type": "string"
        }
      },
      "id": "AppsDynamiteStorageOpenLink",
      "type": "object"
    },
    "SearchItemsByViewUrlResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "items": {
          "items": {
            "$ref": "Item"
          },
          "type": "array"
        }
      },
      "id": "SearchItemsByViewUrlResponse"
    },
    "QuerySuggestion": {
      "description": "This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.",
      "properties": {},
      "id": "QuerySuggestion",
      "type": "object"
    },
    "AttributeSet": {
      "properties": {
        "messageKeys": {
          "type": "array",
          "items": {
            "$ref": "MultiKey"
          }
        },
        "attributeValue": {
          "description": "The serialized attribute_value as persisted in the storage layer. The application is responsible for deserializing it to an Attribute.Value if appropriate.",
          "type": "string",
          "format": "byte"
        },
        "attributeId": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "An attribute was added to some (subset of the) messages in this thread.",
      "id": "AttributeSet"
    },
    "ResetSearchApplicationRequest": {
      "type": "object",
      "id": "ResetSearchApplicationRequest",
      "properties": {
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        }
      }
    },
    "AppsDynamiteSharedAppProfile": {
      "properties": {
        "name": {
          "description": "Displayed user name.",
          "type": "string"
        },
        "avatarEmoji": {
          "description": "Displayed user avatar emoji.",
          "type": "string"
        },
        "avatarUrl": {
          "description": "Displayed user avatar url.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedAppProfile",
      "description": "Optional field for apps overriding display info"
    },
    "ChatContentExtension": {
      "type": "object",
      "id": "ChatContentExtension",
      "properties": {
        "annotation": {
          "description": "Annotations to decorate this event.",
          "items": {
            "$ref": "EventAnnotation"
          },
          "type": "array"
        },
        "groupLinkSharingModificationEvent": {
          "description": "Group-link sharing toggle event.",
          "$ref": "GroupLinkSharingModificationEvent"
        },
        "hangoutEvent": {
          "description": "Audio/video Hangout event.",
          "$ref": "HangoutEvent"
        },
        "otrChatMessageEvent": {
          "$ref": "OtrChatMessageEvent",
          "description": "Metadata for off-the-record message."
        },
        "otrModificationEvent": {
          "$ref": "OtrModificationEvent"
        },
        "inviteAcceptedEvent": {
          "$ref": "InviteAcceptedEvent",
          "description": "Invite accepted events. Note: this is only used ephemerally to sync to Gmail. No actual cent is stored in Papyrus."
        },
        "renameEvent": {
          "$ref": "RenameEvent"
        },
        "dynamitePlaceholderMetadata": {
          "description": "This metadata informs how the placeholder string will be localized dynamically in Hangouts. See go/localization-of-system-messages. This is only used as part of REGULAR_CHAT_MESSAGE events.",
          "$ref": "ChatConserverDynamitePlaceholderMetadata"
        },
        "eventOtrStatus": {
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ],
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ],
          "type": "string",
          "description": "Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have an expiration_timestamp (for example enterprise retention users) we need to store the otr status."
        },
        "membershipChangeEvent": {
          "description": "Join/leave events.",
          "$ref": "MembershipChangeEvent"
        }
      },
      "description": "NEXT ID: 12"
    },
    "ContextualAddOnMarkup": {
      "id": "ContextualAddOnMarkup",
      "properties": {
        "cards": {
          "description": "A card must contain a header and at least 1 section.",
          "items": {
            "$ref": "Card"
          },
          "type": "array"
        },
        "toolbar": {
          "description": "Deprecated.",
          "$ref": "Toolbar"
        }
      },
      "type": "object",
      "description": "The markup for developers to specify the contents of a contextual AddOn. A contextual AddOn is triggered in context of an email. For that email, there can be N items that are associated with the email (e.g. contacts, sales lead, meeting information). Each item is represented as a \"card\". A card has two views, collapsed and detailed. If there are more than 1 card, the cards are show as a list of collapsed views. The end user can expand into the detailed view for each of those cards. In the detailed view, developers have the freedom to use a variety of \"widgets\" to construct it. The model here is to restrict (make consistent for end users) the navigation of the N cards but providing developers the freedom to build the detailed view that can best represent their use case/content. Go http://go/aoig-widgets1 to see the mocks. Post v1, we plan to support new AddOn use cases that will require different and separate 'templates'. For example, a compose triggered AddOn which will support a new set of use cases with different user interaction patterns. As a result, we will likely need a very different template than this one."
    },
    "PrivateMessageInfo": {
      "type": "object",
      "description": "Private message information specific to a given user. DEPRECATED: Use the privateMessageViewer field in CreateMessageInfo instead.",
      "properties": {
        "annotations": {
          "items": {
            "$ref": "Annotation"
          },
          "type": "array",
          "description": "Annotations private to {@code userId}."
        },
        "userId": {
          "description": "Required. The elements in this struct are visible to this user.",
          "$ref": "UserId"
        },
        "contextualAddOnMarkup": {
          "items": {
            "$ref": "GoogleChatV1ContextualAddOnMarkup"
          },
          "type": "array"
        },
        "attachments": {
          "type": "array",
          "description": "Attachments private to {@code userId}.",
          "items": {
            "$ref": "Attachment"
          }
        },
        "text": {
          "description": "Text private to {@code user_id}. Initial restriction: Only one of public text or private text is rendered on the client. So if public text is set, private text is ignored.",
          "type": "string"
        },
        "gsuiteIntegrationMetadata": {
          "type": "array",
          "items": {
            "$ref": "GsuiteIntegrationMetadata"
          }
        }
      },
      "id": "PrivateMessageInfo"
    },
    "ResultCounts": {
      "properties": {
        "sourceResultCounts": {
          "type": "array",
          "description": "Result count information for each source with results.",
          "items": {
            "$ref": "SourceResultCount"
          }
        }
      },
      "description": "Result count information",
      "type": "object",
      "id": "ResultCounts"
    },
    "FilterDeleted": {
      "description": "A filter was deleted.",
      "type": "object",
      "properties": {},
      "id": "FilterDeleted"
    },
    "CommunalLabelTag": {
      "description": "An individual instance (or \"tag\") of a label configured as a communal type that's associated with a message.",
      "type": "object",
      "id": "CommunalLabelTag",
      "properties": {
        "creatorUserId": {
          "type": "string",
          "description": "Gaia ID of the user who added the tag, if any. Not present for any tags automatically created by server-side processing.",
          "format": "int64"
        },
        "labelId": {
          "description": "A string ID representing the label. Possible ID values are documented at go/chat-labels-howto:ids. Example: \"^*t_p\" for \"Pinned\".",
          "type": "string"
        }
      }
    },
    "CaribouAttributeValue": {
      "id": "CaribouAttributeValue",
      "properties": {
        "intValue": {
          "format": "int32",
          "type": "integer"
        },
        "stringValue": {
          "type": "string"
        },
        "booleanValue": {
          "type": "boolean",
          "description": "Tags 1 through 15 are reserved for the most commonly used fields."
        },
        "longValue": {
          "type": "string",
          "format": "int64"
        },
        "rawByteValue": {
          "description": "Generally, applications should avoid storing raw bytes and instead store structured data as protocol buffer extensions. This both reduces the amount of ad-hoc attribute parsing code as well as eliminates an intermediate copy of the data when deserializing the value. The rawByteValue field is mainly provided for compatibility with attributes stored before the introduction of the Attribute.Value.",
          "type": "string",
          "format": "byte"
        }
      },
      "type": "object"
    },
    "DataLossPreventionMetadata": {
      "description": "Annotation metadata for Data Loss Prevention that pertains to DLP violation on message send or edit events. It is used for client -\u003e BE communication and other downstream process in BE (e.g. storage and audit logging), and it should never be returned to the client.",
      "id": "DataLossPreventionMetadata",
      "properties": {
        "warnAcknowledged": {
          "description": "Flag set by client on message resend to bypass WARN violation.",
          "type": "boolean"
        },
        "dlpScanSummary": {
          "$ref": "DlpScanSummary",
          "description": "The DLP scan summary that should only be set after the message is scanned in the Chat backend."
        }
      },
      "type": "object"
    },
    "Person": {
      "type": "object",
      "description": "Object to represent a person.",
      "id": "Person",
      "properties": {
        "photos": {
          "items": {
            "$ref": "Photo"
          },
          "description": "A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results.",
          "type": "array"
        },
        "name": {
          "description": "The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.",
          "type": "string"
        },
        "obfuscatedId": {
          "type": "string",
          "description": "Obfuscated ID of a person."
        },
        "emailAddresses": {
          "type": "array",
          "description": "The person's email addresses",
          "items": {
            "$ref": "EmailAddress"
          }
        },
        "phoneNumbers": {
          "description": "The person's phone numbers",
          "items": {
            "$ref": "PhoneNumber"
          },
          "type": "array"
        },
        "personNames": {
          "description": "The person's name",
          "type": "array",
          "items": {
            "$ref": "Name"
          }
        }
      }
    },
    "ImapSyncDelete": {
      "properties": {
        "msgId": {
          "type": "string",
          "format": "uint64"
        },
        "mappings": {
          "$ref": "FolderAttribute",
          "description": "Contains the value of //imapsync/folder attribute of deleted message."
        }
      },
      "type": "object",
      "description": "Message delete history record extension that exports //imapsync/folder attribute of deleted messages which have ^is label.",
      "id": "ImapSyncDelete"
    },
    "AppsDynamiteSharedMessageInfo": {
      "id": "AppsDynamiteSharedMessageInfo",
      "description": "Information that references a Dynamite chat message. This is only used for Activity Feed messages.",
      "type": "object",
      "properties": {
        "messageType": {
          "enum": [
            "MESSAGE_TYPE_UNSPECIFIED",
            "INLINE_REPLY"
          ],
          "enumDescriptions": [
            "Default value where type is not specified.",
            "The source chat message is a threaded reply to another message."
          ],
          "type": "string",
          "description": "The type of the source chat message."
        },
        "topicReadTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "Timestamp of when the topic containing the message has been read by the user. This is populated if the message references an inline reply, in which case the space may be marked as read but the topic still has unread messages."
        },
        "messageId": {
          "$ref": "MessageId",
          "description": "Id of the source chat message. This is kept here because the top-level message ID to refers the AF message ID."
        }
      }
    },
    "TimestampPropertyOptions": {
      "id": "TimestampPropertyOptions",
      "description": "The options for timestamp properties.",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the timestamp should be used as a search operator.",
          "$ref": "TimestampOperatorOptions"
        }
      },
      "type": "object"
    },
    "RecordingEvent": {
      "id": "RecordingEvent",
      "properties": {
        "deviceId": {
          "type": "string",
          "description": "The initiator of the latest event of the recording. It will be set for all user events (`type` is 100-199) and unset for all server events (`type` is 200-299)."
        },
        "type": {
          "description": "The type of event.",
          "enum": [
            "RECORDING_EVENT_UNSPECIFIED",
            "USER_ACTION",
            "STARTED_BY_USER",
            "STOPPED_BY_USER",
            "CANCELLED_BY_USER",
            "CANCELLED_INITIALIZATION_FAILED",
            "CANCELLED_INITIATOR_LEFT",
            "ACTIVE_ABOUT_TO_STOP_TOO_LONG",
            "STOPPED_TOO_LONG",
            "STOPPED_ALL_DEVICES_LEFT",
            "STOPPED_INTERNAL_FAILURES"
          ],
          "enumDescriptions": [
            "This is never used.",
            "Deprecated, use detailed user actions instead.",
            "Recording was started or is being started by a user.",
            "Recording was stopped by a user.",
            "Recording was cancelled by a user.",
            "Recording was cancelled by the server because of a failure during recording initialization.",
            "Recording was cancelled by the server because the recording initiator left the conference during initialization. When the initiator leaves after the recording is started, no event is triggered.",
            "Recording is about to be stopped by the server because the recording is about to reach the maximum duration.",
            "Recording was stopped because the recording reached the maximum duration.",
            "Recording was stopped because there were no devices left in the conference.",
            "Recording was stopped because of an internal error."
          ],
          "type": "string"
        }
      },
      "description": "A recording event is something that happens to the recording in a conference.",
      "type": "object"
    },
    "SearchApplicationSessionStats": {
      "properties": {
        "date": {
          "description": "The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned.",
          "$ref": "Date"
        },
        "searchSessionsCount": {
          "description": "The count of search sessions on the day",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "SearchApplicationSessionStats",
      "type": "object"
    },
    "AppsDynamiteSharedPhoneNumber": {
      "id": "AppsDynamiteSharedPhoneNumber",
      "type": "object",
      "properties": {
        "value": {
          "description": "The actual phone number.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The phone number type, e.g., work, mobile, etc."
        }
      }
    },
    "ResultDisplayField": {
      "description": "Display Fields for Search Results",
      "type": "object",
      "id": "ResultDisplayField",
      "properties": {
        "property": {
          "description": "The name value pair for the property.",
          "$ref": "NamedProperty"
        },
        "label": {
          "type": "string",
          "description": "The display label for the property."
        },
        "operatorName": {
          "description": "The operator name of the property.",
          "type": "string"
        }
      }
    },
    "GetSearchApplicationQueryStatsResponse": {
      "id": "GetSearchApplicationQueryStatsResponse",
      "properties": {
        "stats": {
          "type": "array",
          "description": "Query stats per date for a search application.",
          "items": {
            "$ref": "SearchApplicationQueryStats"
          }
        },
        "totalQueryCount": {
          "description": "Total successful query count (status code 200) for the given date range.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response format for getting query stats for a search application between given dates."
    },
    "ContentReportJustification": {
      "type": "object",
      "id": "ContentReportJustification",
      "properties": {
        "userJustification": {
          "type": "string",
          "description": "Optional. User-generated free-text justification for the content report."
        }
      }
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkupAddonAttachment": {
      "type": "object",
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkupAddonAttachment",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the attachment."
        },
        "iconUrl": {
          "description": "Link to the resource's icon.",
          "type": "string"
        },
        "resourceUrl": {
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "description": "MIME type of the content in resource_url."
        }
      }
    },
    "OnClick": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string",
          "description": "This can be used as a short form for OpenLink with the default OpenAs and OnClose. It may be undeprecated if this proves to be handy for developers."
        },
        "action": {
          "$ref": "FormAction"
        },
        "openLink": {
          "$ref": "OpenLink"
        },
        "openLinkAction": {
          "description": "An add-on triggers this action when the form action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some preparation work is required for web client to do before the open link action response comes back.",
          "$ref": "FormAction"
        }
      },
      "id": "OnClick"
    },
    "DynamiteMessagesScoringInfo": {
      "description": "This is the proto for holding message level scoring information. This data is used for logging in query-api server and for testing purposes.",
      "properties": {
        "commonContactCount": {
          "type": "string",
          "format": "int64"
        },
        "joinedSpaceAffinityScore": {
          "format": "double",
          "type": "number"
        },
        "commonCountToContactListCountRatio": {
          "format": "double",
          "type": "number"
        },
        "creatorGaiaId": {
          "type": "string",
          "format": "int64"
        },
        "spaceMembershipCount": {
          "type": "string",
          "format": "int64"
        },
        "creatorInSearcherContactList": {
          "type": "boolean"
        },
        "messageSenderAffinityScore": {
          "type": "number",
          "format": "double"
        },
        "finalScore": {
          "type": "number",
          "format": "double"
        },
        "topicalityScore": {
          "type": "number",
          "format": "double"
        },
        "commonCountToMembershipCountRatio": {
          "type": "number",
          "format": "double"
        },
        "spaceId": {
          "type": "string",
          "format": "int64"
        },
        "unjoinedSpaceAffinityScore": {
          "type": "number",
          "format": "double"
        },
        "dasContactCount": {
          "type": "string",
          "format": "int64"
        },
        "lastReadTimestampAgeInDays": {
          "type": "number",
          "format": "double"
        },
        "freshnessScore": {
          "format": "double",
          "type": "number"
        },
        "messageAgeInDays": {
          "format": "double",
          "type": "number"
        }
      },
      "id": "DynamiteMessagesScoringInfo",
      "type": "object"
    },
    "BotResponse": {
      "id": "BotResponse",
      "properties": {
        "responseType": {
          "enum": [
            "UNKNOWN_RESPONSE_TYPE",
            "ERROR",
            "SETUP_REQUIRED",
            "DISABLED_BY_ADMIN",
            "DISABLED_BY_DEVELOPER",
            "PRIVATE",
            "APP_SUGGESTION"
          ],
          "enumDescriptions": [
            "",
            "Bot fails to respond because of deadline_exceeded or failing to parse bot message.",
            "Bot requires auth or config",
            "Bot fails to respond because it is disabled by domain admin",
            "Bot fails to respond because it is disabled by the bot's developer",
            "Message to bot should be permanently private.",
            "A suggestion to promote an app."
          ],
          "type": "string"
        },
        "requiredAction": {
          "enumDescriptions": [
            "",
            "Bot requires configuration.",
            "Bot requires authentication."
          ],
          "enum": [
            "UNKNOWN_SETUP_TYPE",
            "CONFIGURATION",
            "AUTHENTICATION"
          ],
          "type": "string"
        },
        "setupUrl": {
          "type": "string",
          "description": "URL for setting up bot."
        },
        "botId": {
          "$ref": "UserId"
        }
      },
      "type": "object",
      "description": "Information about a bot response, branched from shared/bot_response.proto without frontend User proto as we never store it."
    },
    "CompositeFilter": {
      "properties": {
        "subFilters": {
          "items": {
            "$ref": "Filter"
          },
          "description": "Sub filters.",
          "type": "array"
        },
        "logicOperator": {
          "description": "The logic operator of the sub filter.",
          "enumDescriptions": [
            "Logical operators, which can only be applied to sub filters.",
            "",
            "NOT can only be applied on a single sub filter."
          ],
          "enum": [
            "AND",
            "OR",
            "NOT"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "id": "CompositeFilter"
    },
    "AppsDynamiteSharedOrganizationInfo": {
      "description": "Contains info about the entity that something is, or is owned by.",
      "properties": {
        "consumerInfo": {
          "$ref": "AppsDynamiteSharedOrganizationInfoConsumerInfo"
        },
        "customerInfo": {
          "$ref": "AppsDynamiteSharedOrganizationInfoCustomerInfo"
        }
      },
      "id": "AppsDynamiteSharedOrganizationInfo",
      "type": "object"
    },
    "TombstoneMetadata": {
      "description": "Tombstoning is the act of leaving a contextual trace when deleting a message. See more: go/tombstone-prd, go/hub-dynamite-tombstones-server-design-v2.",
      "properties": {
        "tombstoneType": {
          "enumDescriptions": [
            "This should not be used.",
            "User deleted their own message.",
            "The space owner deleted a message in their space.",
            "The customer admin deleted a message in a space or DM owned by the customer. (go/chat-customer-owned-data)",
            "App scheduled deletion of their own message. See go/bme-dd.",
            "User deleted their own message via an app. See go/chat-api-delete-message.",
            "The space owner deleted a message in their space via an app. See go/chat-api-delete-message."
          ],
          "enum": [
            "TOMBSTONE_UNSPECIFIED",
            "CREATOR",
            "ROOM_OWNER",
            "ADMIN",
            "APP_MESSAGE_EXPIRY",
            "CREATOR_VIA_APP",
            "ROOM_OWNER_VIA_APP"
          ],
          "description": "Indicates the type of Tombstone.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "TombstoneMetadata"
    },
    "GoogleChatV1WidgetMarkupOnClick": {
      "type": "object",
      "description": "An onclick action (e.g. open a link).",
      "id": "GoogleChatV1WidgetMarkupOnClick",
      "properties": {
        "openLink": {
          "$ref": "GoogleChatV1WidgetMarkupOpenLink",
          "description": "This onclick triggers an open link action if specified."
        },
        "action": {
          "$ref": "GoogleChatV1WidgetMarkupFormAction",
          "description": "A form action will be triggered by this onclick if specified."
        }
      }
    },
    "InviteAcceptedEvent": {
      "type": "object",
      "id": "InviteAcceptedEvent",
      "properties": {
        "participantId": {
          "items": {
            "$ref": "StoredParticipantId"
          },
          "type": "array"
        }
      }
    },
    "GoogleChatV1ContextualAddOnMarkupCardCardHeader": {
      "id": "GoogleChatV1ContextualAddOnMarkupCardCardHeader",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both lines."
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image in the card header."
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageStyle": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Square border.",
            "Circular border."
          ],
          "description": "The image's type (e.g. square border or circular border).",
          "enum": [
            "IMAGE_STYLE_UNSPECIFIED",
            "IMAGE",
            "AVATAR"
          ]
        }
      }
    },
    "Value": {
      "type": "object",
      "id": "Value",
      "properties": {
        "stringValue": {
          "type": "string"
        },
        "dateValue": {
          "$ref": "Date"
        },
        "integerValue": {
          "format": "int64",
          "type": "string"
        },
        "doubleValue": {
          "format": "double",
          "type": "number"
        },
        "booleanValue": {
          "type": "boolean"
        },
        "timestampValue": {
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "Definition of a single value with generic type."
    },
    "SearchResponse": {
      "properties": {
        "spellResults": {
          "items": {
            "$ref": "SpellResult"
          },
          "type": "array",
          "description": "Suggested spelling for the query."
        },
        "errorInfo": {
          "$ref": "ErrorInfo",
          "description": "Error information about the response."
        },
        "resultCountEstimate": {
          "type": "string",
          "format": "int64",
          "description": "The estimated result count for this query."
        },
        "resultCounts": {
          "description": "Expanded result count information.",
          "$ref": "ResultCounts"
        },
        "resultCountExact": {
          "format": "int64",
          "type": "string",
          "description": "The exact result count for this query."
        },
        "hasMoreResults": {
          "type": "boolean",
          "description": "Whether there are more search results matching the query."
        },
        "facetResults": {
          "items": {
            "$ref": "FacetResult"
          },
          "description": "Repeated facet results.",
          "type": "array"
        },
        "debugInfo": {
          "$ref": "ResponseDebugInfo",
          "description": "Debugging information about the response."
        },
        "results": {
          "items": {
            "$ref": "SearchResult"
          },
          "description": "Results from a search query.",
          "type": "array"
        },
        "queryInterpretation": {
          "description": "Query interpretation result for user query. Empty if query interpretation is disabled.",
          "$ref": "QueryInterpretation"
        },
        "structuredResults": {
          "description": "Structured results for the user query. These results are not counted against the page_size.",
          "type": "array",
          "items": {
            "$ref": "StructuredResult"
          }
        }
      },
      "id": "SearchResponse",
      "description": "The search API response.",
      "type": "object"
    },
    "GoogleChatV1WidgetMarkup": {
      "description": "A widget is a UI element that presents texts, images, etc.",
      "type": "object",
      "id": "GoogleChatV1WidgetMarkup",
      "properties": {
        "buttons": {
          "description": "A list of buttons. Buttons is also oneof data and only one of these fields should be set.",
          "type": "array",
          "items": {
            "$ref": "GoogleChatV1WidgetMarkupButton"
          }
        },
        "keyValue": {
          "description": "Display a key value item in this widget.",
          "$ref": "GoogleChatV1WidgetMarkupKeyValue"
        },
        "textParagraph": {
          "$ref": "GoogleChatV1WidgetMarkupTextParagraph",
          "description": "Display a text paragraph in this widget."
        },
        "image": {
          "description": "Display an image in this widget.",
          "$ref": "GoogleChatV1WidgetMarkupImage"
        }
      }
    },
    "IndexItemRequest": {
      "type": "object",
      "properties": {
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        },
        "indexItemOptions": {
          "$ref": "IndexItemOptions"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        },
        "item": {
          "$ref": "Item",
          "description": "The name of the item. Format: datasources/{source_id}/items/{item_id}"
        },
        "mode": {
          "enumDescriptions": [
            "The priority is not specified in the update request. Leaving priority unspecified results in an update failure.",
            "For real-time updates.",
            "For changes that are executed after the response is sent back to the caller."
          ],
          "enum": [
            "UNSPECIFIED",
            "SYNCHRONOUS",
            "ASYNCHRONOUS"
          ],
          "description": "Required. The RequestMode for this request.",
          "type": "string"
        }
      },
      "id": "IndexItemRequest"
    },
    "PostiniUserProto": {
      "id": "PostiniUserProto",
      "type": "object",
      "properties": {
        "postiniUserId": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "See http://s/?fileprint=//depot/google3/security/authentication/postini/auth_token.proto"
    },
    "SourceResultCount": {
      "id": "SourceResultCount",
      "description": "Per source result count information.",
      "type": "object",
      "properties": {
        "resultCountEstimate": {
          "format": "int64",
          "type": "string",
          "description": "The estimated result count for this source."
        },
        "resultCountExact": {
          "description": "The exact result count for this source.",
          "type": "string",
          "format": "int64"
        },
        "source": {
          "description": "The source the result count information is associated with.",
          "$ref": "Source"
        },
        "hasMoreResults": {
          "description": "Whether there are more search results for this source.",
          "type": "boolean"
        }
      }
    },
    "DmId": {
      "properties": {
        "dmId": {
          "description": "Unique server assigned Id, per Direct Message Space.",
          "type": "string"
        }
      },
      "id": "DmId",
      "type": "object"
    },
    "GsuiteIntegrationMetadata": {
      "properties": {
        "callData": {
          "description": "Data used to render call artifacts.",
          "$ref": "AppsDynamiteSharedCallAnnotationData"
        },
        "activityFeedData": {
          "$ref": "AppsDynamiteSharedActivityFeedAnnotationData"
        },
        "clientType": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_CLIENT_TYPE",
            "MEET",
            "TASKS",
            "CALENDAR_EVENT",
            "ASSISTANT",
            "ACTIVITY_FEED_SERVICE"
          ]
        },
        "assistantData": {
          "$ref": "AppsDynamiteSharedAssistantAnnotationData"
        },
        "indexableTexts": {
          "description": "A list of all strings that are to be indexed for this 1P chip. Each string in this list would be the contents of a single string field in the 1P chip. Eg. For Tasks[title = “hello world”, description = “good bye”]. If we want to index only the title, this would be set to [“hello world”]. If both title and description, then this would be [“hello world”, “good bye”]. Please make sure that the contents of this field is a subset of strings that are rendered as part of the 1P Chip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "calendarEventData": {
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationData"
        },
        "tasksData": {
          "$ref": "AppsDynamiteSharedTasksAnnotationData"
        }
      },
      "description": "Annotation metadata for an GsuiteIntegration artifact.",
      "type": "object",
      "id": "GsuiteIntegrationMetadata"
    },
    "MessageAdded": {
      "id": "MessageAdded",
      "description": "A message was added. Specifying id and initial labels.",
      "properties": {
        "syncIds": {
          "type": "array",
          "description": "Note that there can be fewer sync ids than label ids.",
          "items": {
            "type": "integer",
            "format": "uint32"
          }
        },
        "attributeIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "messageKey": {
          "$ref": "MultiKey"
        },
        "labelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "PeopleSuggestion": {
      "type": "object",
      "description": "This field contains information about the person being suggested.",
      "id": "PeopleSuggestion",
      "properties": {
        "person": {
          "description": "Suggested person. All fields of the person object might not be populated.",
          "$ref": "Person"
        }
      }
    },
    "DoublePropertyOptions": {
      "id": "DoublePropertyOptions",
      "type": "object",
      "properties": {
        "operatorOptions": {
          "description": "If set, describes how the double should be used as a search operator.",
          "$ref": "DoubleOperatorOptions"
        }
      },
      "description": "The options for double properties."
    },
    "QueryInterpretationOptions": {
      "description": "Options to interpret user query.",
      "properties": {
        "enableVerbatimMode": {
          "type": "boolean",
          "description": "Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental result retrieval, and usage of synonyms including custom ones. Nl interpretation will be disabled if either one of the two flags is true."
        },
        "disableNlInterpretation": {
          "type": "boolean",
          "description": "Flag to disable natural language (NL) interpretation of queries. Default is false, Set to true to disable natural language interpretation. NL interpretation only applies to predefined datasources."
        },
        "disableSupplementalResults": {
          "type": "boolean",
          "description": "Use this flag to disable supplemental results for a query. Supplemental results setting chosen at SearchApplication level will take precedence if set to True."
        }
      },
      "type": "object",
      "id": "QueryInterpretationOptions"
    },
    "LabelCreated": {
      "type": "object",
      "properties": {},
      "description": "A label was created.",
      "id": "LabelCreated"
    },
    "UnreserveItemsRequest": {
      "type": "object",
      "id": "UnreserveItemsRequest",
      "properties": {
        "connectorName": {
          "type": "string",
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}"
        },
        "queue": {
          "description": "The name of a queue to unreserve items from.",
          "type": "string"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        }
      }
    },
    "LanguageConfig": {
      "type": "object",
      "description": "The language configuration for the session.",
      "id": "LanguageConfig",
      "properties": {
        "spokenLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The spoken language(s) in BCP47 language code."
        }
      }
    },
    "FacetBucket": {
      "type": "object",
      "id": "FacetBucket",
      "description": "A bucket in a facet is the basic unit of operation. A bucket can comprise either a single value OR a contiguous range of values, depending on the type of the field bucketed. FacetBucket is currently used only for returning the response object.",
      "properties": {
        "value": {
          "$ref": "Value"
        },
        "percentage": {
          "type": "integer",
          "description": "Percent of results that match the bucket value. The returned value is between (0-100], and is rounded down to an integer if fractional. If the value is not explicitly returned, it represents a percentage value that rounds to 0. Percentages are returned for all searches, but are an estimate. Because percentages are always returned, you should render percentages instead of counts.",
          "format": "int32"
        },
        "filter": {
          "$ref": "Filter",
          "description": "Filter to be passed in the search request if the corresponding bucket is selected."
        },
        "count": {
          "description": "Number of results that match the bucket value. Counts are only returned for searches when count accuracy is ensured. Cloud Search does not guarantee facet counts for any query and facet counts might be present only intermittently, even for identical queries. Do not build dependencies on facet count existence; instead use facet ount percentages which are always returned.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ItemMetadata": {
      "description": "Available metadata fields for the item.",
      "properties": {
        "mimeType": {
          "description": "The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.",
          "type": "string"
        },
        "searchQualityMetadata": {
          "description": "Additional search quality metadata of the item",
          "$ref": "SearchQualityMetadata"
        },
        "containerName": {
          "type": "string",
          "description": "The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters."
        },
        "contentLanguage": {
          "description": "The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters.",
          "type": "string"
        },
        "contextAttributes": {
          "items": {
            "$ref": "ContextAttribute"
          },
          "type": "array",
          "description": "A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10."
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "The time when the item was last modified in the source repository.",
          "type": "string"
        },
        "keywords": {
          "description": "Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "The time when the item was created in the source repository.",
          "type": "string",
          "format": "google-datetime"
        },
        "title": {
          "description": "The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.",
          "type": "string"
        },
        "objectType": {
          "type": "string",
          "description": "The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters."
        },
        "sourceRepositoryUrl": {
          "type": "string",
          "description": "Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters."
        },
        "interactions": {
          "items": {
            "$ref": "Interaction"
          },
          "description": "A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.",
          "type": "array"
        },
        "hash": {
          "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ItemMetadata"
    },
    "ThreadKeySet": {
      "type": "object",
      "description": "The ThreadKey was set on some (subset of the) messages in this thread.",
      "properties": {
        "newThreadKey": {
          "$ref": "MultiKey",
          "description": "The new thread_key for this thread"
        },
        "messageKeys": {
          "items": {
            "$ref": "MultiKey"
          },
          "description": "Messages on which the thread_key was changed.",
          "type": "array"
        }
      },
      "id": "ThreadKeySet"
    },
    "ObjectDisplayOptions": {
      "id": "ObjectDisplayOptions",
      "description": "The display options for an object.",
      "properties": {
        "metalines": {
          "items": {
            "$ref": "Metaline"
          },
          "description": "Defines the properties that are displayed in the metalines of the search results. The property values are displayed in the order given here. If a property holds multiple values, all of the values are displayed before the next properties. For this reason, it is a good practice to specify singular properties before repeated properties in this list. All of the properties must set is_returnable to true. The maximum number of metalines is 3.",
          "type": "array"
        },
        "objectDisplayLabel": {
          "description": "The user friendly label to display in the search result to indicate the type of the item. This is OPTIONAL; if not provided, an object label isn't displayed on the context line of the search results. The maximum length is 64 characters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HostProto": {
      "properties": {
        "hostName": {
          "type": "string",
          "description": "Lower-case, fully qualified hostname."
        },
        "hostOwner": {
          "description": "If present, then any checks that compare this Principal to LOAS peer info must confirm the peer's machine owner is equal to 'host_owner'. If absent, then any peer machine owner is acceptable.",
          "type": "string"
        }
      },
      "description": "Represents a single host. Optionally, the MDB owner of the host can be specified.",
      "id": "HostProto",
      "type": "object"
    },
    "AppsDynamiteStorageImage": {
      "description": "An image that is specified by a URL and can have an onClick action.",
      "type": "object",
      "id": "AppsDynamiteStorageImage",
      "properties": {
        "altText": {
          "type": "string",
          "description": "The alternative text of this image, used for accessibility."
        },
        "imageUrl": {
          "description": "An image URL.",
          "type": "string"
        },
        "onClick": {
          "$ref": "AppsDynamiteStorageOnClick"
        }
      }
    },
    "SearchResult": {
      "properties": {
        "title": {
          "description": "Title of the search result.",
          "type": "string"
        },
        "clusteredResults": {
          "items": {
            "$ref": "SearchResult"
          },
          "type": "array",
          "description": "If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be empty."
        },
        "debugInfo": {
          "$ref": "ResultDebugInfo",
          "description": "Debugging information about this search result."
        },
        "snippet": {
          "description": "The concatenation of all snippets (summaries) available for this result.",
          "$ref": "Snippet"
        },
        "metadata": {
          "description": "Metadata of the search result.",
          "$ref": "Metadata"
        },
        "url": {
          "description": "The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn't be changed.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SearchResult",
      "description": "Results containing indexed information for a document."
    },
    "Menu": {
      "type": "object",
      "description": "This is deprecated and please use SelectionControl by setting type to DROPDOWN.",
      "properties": {
        "name": {
          "description": "The name of the text field which is will be used in FormInput.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "MenuItem"
          },
          "type": "array"
        },
        "label": {
          "type": "string",
          "description": "Label used to be displayed ahead of the menu. It is optional."
        },
        "onChange": {
          "$ref": "FormAction",
          "description": "If specified, form is submitted when selection changed. If not specified, developer will need to specify a separate button."
        }
      },
      "id": "Menu"
    },
    "LabelUpdate": {
      "description": "HistoryRecord for changes associated with a label, namely: LABEL_CREATED LABEL_DELETED LABEL_RENAMED LABEL_UPDATED",
      "properties": {
        "labelRenamed": {
          "$ref": "LabelRenamed"
        },
        "labelCreated": {
          "$ref": "LabelCreated"
        },
        "canonicalName": {
          "type": "string"
        },
        "labelDeleted": {
          "$ref": "LabelDeleted"
        },
        "labelUpdated": {
          "$ref": "LabelUpdated"
        },
        "syncId": {
          "type": "integer",
          "format": "uint32"
        },
        "labelId": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "LabelUpdate"
    },
    "RequestOptions": {
      "description": "Shared request options for all RPC methods.",
      "id": "RequestOptions",
      "type": "object",
      "properties": {
        "timeZone": {
          "description": "Current user's time zone id, such as \"America/Los_Angeles\" or \"Australia/Sydney\". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.",
          "type": "string"
        },
        "debugOptions": {
          "description": "Debug options of the request",
          "$ref": "DebugOptions"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. From Suggest API perspective, for 3p suggest this is used as a hint while making predictions to add language boosting."
        },
        "searchApplicationId": {
          "description": "The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922).",
          "type": "string"
        }
      }
    },
    "Toolbar": {
      "id": "Toolbar",
      "properties": {
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string",
          "description": "Background color of the toolbar in RBG hex representation."
        },
        "iconUrl": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "The Toolbar markup has been deprecated. The information is now specified in the manifest."
    },
    "Labels": {
      "properties": {
        "id": {
          "description": "The ids of the labels attached to the Item, e.g. \"^i\", \"^x_1\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "displayName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The display name of the labels. This is populated (instead of the id) when the request fetch_spec has LABEL_DISPLAY_NAMES."
        }
      },
      "type": "object",
      "id": "Labels"
    },
    "GroupRetentionSettingsUpdatedMetaData": {
      "type": "object",
      "properties": {
        "initiator": {
          "description": "The user who triggered the retention settings update",
          "$ref": "UserId"
        },
        "retentionSettings": {
          "description": "The updated space retention settings",
          "$ref": "AppsDynamiteSharedRetentionSettings"
        }
      },
      "id": "GroupRetentionSettingsUpdatedMetaData"
    },
    "AutoCompleteItem": {
      "type": "object",
      "id": "AutoCompleteItem",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "Item": {
      "properties": {
        "structuredData": {
          "description": "The structured data for the item that should conform to a registered object definition in the schema for the data source.",
          "$ref": "ItemStructuredData"
        },
        "queue": {
          "description": "Queue this item belongs to. The maximum length is 100 characters.",
          "type": "string"
        },
        "metadata": {
          "description": "The metadata information.",
          "$ref": "ItemMetadata"
        },
        "version": {
          "description": "Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).",
          "type": "string",
          "format": "byte"
        },
        "content": {
          "$ref": "ItemContent",
          "description": "Item content to be indexed and made text searchable."
        },
        "payload": {
          "description": "Additional state connector can store for this item. The maximum length is 10000 bytes.",
          "format": "byte",
          "type": "string"
        },
        "acl": {
          "description": "Access control list for this item.",
          "$ref": "ItemAcl"
        },
        "itemType": {
          "description": "The type for this item.",
          "enum": [
            "UNSPECIFIED",
            "CONTENT_ITEM",
            "CONTAINER_ITEM",
            "VIRTUAL_CONTAINER_ITEM"
          ],
          "enumDescriptions": [
            "",
            "An item that is indexed for the only purpose of serving information. These items cannot be referred in containerName or inheritAclFrom fields.",
            "An item that gets indexed and whose purpose is to supply other items with ACLs and/or contain other items.",
            "An item that does not get indexed, but otherwise has the same purpose as CONTAINER_ITEM."
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.",
          "type": "string"
        },
        "status": {
          "$ref": "ItemStatus",
          "description": "Status of the item. Output only field."
        }
      },
      "description": "Represents a single object that is an item in the search index, such as a file, folder, or a database record.",
      "type": "object",
      "id": "Item"
    },
    "Grid": {
      "properties": {
        "onClick": {
          "$ref": "OnClick",
          "description": "This callback will be reused by each individual GridItem, but with the item's identifier and index in the items list added to the callback's parameters."
        },
        "items": {
          "items": {
            "$ref": "GridItem"
          },
          "type": "array",
          "description": "The items to display in the grid."
        },
        "borderStyle": {
          "$ref": "BorderStyle",
          "description": "The border style to apply to each grid item."
        },
        "title": {
          "description": "The text to display in the grid header.",
          "type": "string"
        },
        "numColumns": {
          "format": "int32",
          "type": "integer",
          "description": "The number of columns to display in the grid. Note that a default value will be used if this field is not specified, and that default value will be different depending on where the grid is shown (dialog vs companion)."
        }
      },
      "type": "object",
      "id": "Grid"
    },
    "BabelPlaceholderMetadata": {
      "type": "object",
      "description": "Annotation metadata for Babel-only items that signals which type of placeholder message should be displayed in Babel clients.",
      "id": "BabelPlaceholderMetadata",
      "properties": {
        "hangoutVideoMetadata": {
          "$ref": "HangoutVideoEventMetadata"
        },
        "editMetadata": {
          "$ref": "EditMetadata"
        },
        "deleteMetadata": {
          "$ref": "DeleteMetadata"
        }
      }
    },
    "ImapUpdate": {
      "description": "HistoryRecord for changes associated with IMAP, namely: IMAP_UIDS_REASSIGN",
      "properties": {
        "imapUidsReassign": {
          "$ref": "ImapUidsReassign"
        }
      },
      "type": "object",
      "id": "ImapUpdate"
    },
    "AppsDynamiteStorageOpenLinkAppUriIntent": {
      "id": "AppsDynamiteStorageOpenLinkAppUriIntent",
      "properties": {
        "extraData": {
          "description": "A list of extra data for the android intent. For example, for a calendar event edit intent, the event title information can be passed as extra data.",
          "items": {
            "$ref": "AppsDynamiteStorageOpenLinkAppUriIntentExtraData"
          },
          "type": "array"
        },
        "intentAction": {
          "description": "An android intent action string for the {@link android.content.Intent} object. For example: for the view intent action type, a valid value will be android.content.Intent.ACTION_VIEW.",
          "type": "string"
        }
      },
      "description": "Android intent.",
      "type": "object"
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemNudge": {
      "description": "Existence of this attribute indicates that the AF item is for a message nudge item.",
      "type": "object",
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemNudge",
      "properties": {
        "nudgeType": {
          "description": "Nudge type of the nudge feed item.",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "REPLY",
            "FOLLOW_UP"
          ],
          "enumDescriptions": [
            "",
            "The message receiver is nudged since the message may require a reply.",
            "The message creator is nudged since the message may require a follow-up."
          ]
        }
      }
    },
    "AppsDynamiteSharedSegmentedMembershipCount": {
      "id": "AppsDynamiteSharedSegmentedMembershipCount",
      "type": "object",
      "properties": {
        "membershipState": {
          "enum": [
            "MEMBER_UNKNOWN",
            "MEMBER_INVITED",
            "MEMBER_JOINED",
            "MEMBER_NOT_A_MEMBER",
            "MEMBER_FAILED"
          ],
          "enumDescriptions": [
            "Default state, do not use",
            "An invitation to the space has been sent",
            "User has joined the space",
            "User is not a member",
            "This state should never be stored in Spanner. It is a state for responses to the clients to indicate that membership mutations have failed and the member is in its previous state."
          ],
          "type": "string"
        },
        "memberType": {
          "enumDescriptions": [
            "default value",
            "member is a human user",
            "member is a roster"
          ],
          "type": "string",
          "enum": [
            "MEMBER_TYPE_UNSPECIFIED",
            "HUMAN_USER",
            "ROSTER_MEMBER"
          ]
        },
        "membershipCount": {
          "description": "count of members with given type and state",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Contains info on membership count for member types: HUMAN_USER, APP_USER & ROSTER_MEMBER different states: INVITED, JOINED"
    },
    "AppsDynamiteSharedOriginAppSuggestion": {
      "type": "object",
      "description": "Stores the suggestion provided by apps/bots.",
      "properties": {
        "appId": {
          "$ref": "AppId"
        },
        "cardClickSuggestion": {
          "$ref": "AppsDynamiteSharedCardClickSuggestion"
        }
      },
      "id": "AppsDynamiteSharedOriginAppSuggestion"
    },
    "Snippet": {
      "description": "Snippet of the search result, which summarizes the content of the resulting page.",
      "id": "Snippet",
      "type": "object",
      "properties": {
        "matchRanges": {
          "items": {
            "$ref": "MatchRange"
          },
          "type": "array",
          "description": "The matched ranges in the snippet."
        },
        "snippet": {
          "description": "The snippet of the document. The snippet of the document. May contain escaped HTML character that should be unescaped prior to rendering.",
          "type": "string"
        }
      }
    },
    "RestrictItem": {
      "id": "RestrictItem",
      "type": "object",
      "description": "Information relevant only to a restrict entry. NextId: 12",
      "properties": {
        "driveMimeTypeRestrict": {
          "$ref": "DriveMimeTypeRestrict",
          "description": "Drive Types."
        },
        "searchOperator": {
          "description": "The search restrict (e.g. \"after:2017-09-11 before:2017-09-12\").",
          "type": "string"
        },
        "driveFollowUpRestrict": {
          "$ref": "DriveFollowUpRestrict"
        },
        "driveLocationRestrict": {
          "$ref": "DriveLocationRestrict"
        },
        "driveTimeSpanRestrict": {
          "$ref": "DriveTimeSpanRestrict"
        }
      }
    },
    "AppsDynamiteSharedEmoji": {
      "properties": {
        "customEmoji": {
          "$ref": "AppsDynamiteSharedCustomEmoji",
          "description": "A custom emoji."
        },
        "unicode": {
          "description": "A basic emoji represented by a unicode string.",
          "type": "string"
        }
      },
      "id": "AppsDynamiteSharedEmoji",
      "type": "object"
    },
    "TaskActionMarkup": {
      "properties": {
        "reloadTasks": {
          "type": "boolean"
        }
      },
      "id": "TaskActionMarkup",
      "type": "object"
    },
    "DebugOptions": {
      "type": "object",
      "description": "Shared request debug options for all cloudsearch RPC methods.",
      "properties": {
        "enableDebugging": {
          "type": "boolean",
          "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field."
        }
      },
      "id": "DebugOptions"
    },
    "GoogleChatV1WidgetMarkupKeyValue": {
      "type": "object",
      "description": "A UI element contains a key (label) and a value (content). And this element may also contain some actions such as onclick button.",
      "id": "GoogleChatV1WidgetMarkupKeyValue",
      "properties": {
        "content": {
          "type": "string",
          "description": "The text of the content. Formatted text supported and always required."
        },
        "bottomLabel": {
          "type": "string",
          "description": "The text of the bottom label. Formatted text supported."
        },
        "button": {
          "description": "A button that can be clicked to trigger an action.",
          "$ref": "GoogleChatV1WidgetMarkupButton"
        },
        "contentMultiline": {
          "description": "If the content should be multiline.",
          "type": "boolean"
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "icon": {
          "type": "string",
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "description": "An enum value that will be replaced by the Chat API with the corresponding icon image."
        },
        "topLabel": {
          "description": "The text of the top label. Formatted text supported.",
          "type": "string"
        },
        "onClick": {
          "$ref": "GoogleChatV1WidgetMarkupOnClick",
          "description": "The onclick action. Only the top label, bottom label and content region are clickable."
        }
      }
    },
    "CardAction": {
      "description": "When an AddOn Card is shown in detailed view, a card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser.",
      "type": "object",
      "properties": {
        "onClick": {
          "$ref": "OnClick"
        },
        "actionLabel": {
          "description": "The label used to be displayed in the action menu item.",
          "type": "string"
        }
      },
      "id": "CardAction"
    },
    "PhoneAccess": {
      "id": "PhoneAccess",
      "description": "Phone access contains information required to dial into a conference using a regional phone number and a PIN that is specific to that phone number.",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "description": "The phone number to dial for this meeting space in E.164 format. Full phone number with a leading '+' character.",
          "type": "string"
        },
        "languageCode": {
          "description": "The BCP 47/LDML language code for the language associated with this phone access. To be parsed by the i18n LanguageCode utility. Examples: \"es-419\" for Latin American Spanish, \"fr-CA\" for Canadian French.",
          "type": "string"
        },
        "pin": {
          "type": "string",
          "description": "The PIN that users must enter after dialing the given number. The PIN consists of only decimal digits and the length may vary."
        },
        "formattedPhoneNumber": {
          "description": "The phone number to dial for this meeting space in INTERNATIONAL format. Full phone number with a leading '+' character and whitespace separations.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "The CLDR/ISO 3166 region code for the country associated with this phone access. To be parsed by the i18n RegionCode utility. Example: \"SE\" for Sweden."
        }
      }
    },
    "AppsDynamiteSharedTasksAnnotationDataCreation": {
      "properties": {},
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationDataCreation"
    },
    "MenuItem": {
      "id": "MenuItem",
      "type": "object",
      "properties": {
        "selected": {
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "The value associated with this item which will be sent back to app scripts. Client should use as a form input value."
        },
        "text": {
          "description": "The text to be displayed.",
          "type": "string"
        }
      }
    },
    "AppsDynamiteStorageDivider": {
      "description": "A divider that appears in between widgets.",
      "id": "AppsDynamiteStorageDivider",
      "type": "object",
      "properties": {}
    },
    "DlpScanSummary": {
      "properties": {
        "scanId": {
          "description": "The scan ID of the corresponding {@link DlpViolationScanRecord} in the {@link EphemeralDlpScans} Spanner table. This can be used to fetch additional details about the scan, e.g. for audit logging.",
          "type": "string"
        },
        "scanOutcome": {
          "enumDescriptions": [
            "",
            "This means no violation is detected on the given message/attachment.",
            "Violation is detected. The message/attachment will be blocked (or deleted if this happens in failure recovery), the user will be warned, and the violation will be logged to BIP.",
            "Violation is detected. The user will be warned, and the violation will be logged to BIP.",
            "Violation is detected and will be logged to BIP (no user-facing action performed).",
            "Rule fetch and evaluation were attempted but an exception occurred.",
            "Rule fetch was attempted but failed, so rule evaluation could not be performed.",
            "Rule fetch and evaluation were attempted but the scanning timed out.",
            "Rule fetch completed and evaluation were attempted, but all of the rules failed to be evaluated.",
            "An IllegalStateException is thrown when executing DLP on attachments. This could happen if the space row is missing.",
            "Rule fetch and evaluation is skipped because DLP is not enabled for the user.",
            "Rule fetch and evaluation are skipped because the user sending message is consumer.",
            "Rule fetch and evaluation are skipped because the user sending message is a non-human user (i.e. a bot).",
            "Rule fetch and evaluation are skipped because there is no message to scan. Deprecated: this should not happen since there must be message or attachment for DLP scan.",
            "Rule fetch and evaluation are skipped because the user has acknowledged the warning on the message that triggered the Warn violation and sent the message anyway.",
            "Scanning was skipped because the message originated from Interop or Babel.",
            "Scanning was skipped because the message was sent while the space is in migration mode. See go/migration-mode for details.",
            "Rule fetch happened, but rule evaluation is skipped because no rules were found.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given action params.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given trigger.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned permanent failure while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned an empty response while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because file type is unsupported.",
            "Rules were fetched but some evaluations failed. No violation was found in the rules that were successfully evaluated.",
            "Rules were fetched but some evaluations failed. A blocking violation was found in the rules that were successfully evaluated. The message/attachment will be blocked, the user will be notified, and the violation will be logged to BIP. A blocking violation takes precedence over all other violation types.",
            "Rules were fetched but some evaluations failed. A warn violation was found in the rules that were successfully evaluated. The user will be warned, and the violation will be logged to BIP.",
            "Rules were fetched but some evaluations failed. An audit-only violation was found in the rules that were successfully evaluated. The violation will be logged to BIP (no user-facing action performed)."
          ],
          "enum": [
            "SCAN_UNKNOWN_OUTCOME",
            "SCAN_SUCCEEDED_NO_VIOLATION",
            "SCAN_SUCCEEDED_BLOCK",
            "SCAN_SUCCEEDED_WARN",
            "SCAN_SUCCEEDED_AUDIT_ONLY",
            "SCAN_FAILURE_EXCEPTION",
            "SCAN_FAILURE_RULE_FETCH_FAILED",
            "SCAN_FAILURE_TIMEOUT",
            "SCAN_FAILURE_ALL_RULES_FAILED",
            "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS",
            "SCAN_SKIPPED_EXPERIMENT_DISABLED",
            "SCAN_SKIPPED_CONSUMER",
            "SCAN_SKIPPED_NON_HUMAN_USER",
            "SCAN_SKIPPED_NO_MESSAGE",
            "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING",
            "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN",
            "SCAN_SKIPPED_MESSAGE_SENT_DURING_SPACE_MIGRATION",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE",
            "SCAN_RULE_EVALUATION_SKIPPED_UNSUPPORTED_FILE_TYPE",
            "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION",
            "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK",
            "SCAN_SUCCEEDED_WITH_FAILURES_WARN",
            "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
          ],
          "description": "The outcome of a DLP Scan. If this is set, scan_not_applicable_for_context should not be true.",
          "type": "string"
        },
        "scanNotApplicableForContext": {
          "type": "boolean",
          "description": "Indicates that was no attempt to scan a message or attachment because it was not applicable in the given context (e.g. atomic mutuate). If this is true, scan_outcome should not be set. This flag is used to identify messages that DLP did not attempt to scan for monitoring scan coverage. Contents that DLP attempted to scan but skipped can be identified by DlpScanOutcome.SCAN_SKIPPED_* reasons."
        }
      },
      "id": "DlpScanSummary",
      "type": "object",
      "description": "A summary of a DLP scan event. This is a summary and should contain the minimum amount of data required to identify and process DLP scans. It is written to Starcast and encoded & returned to the client on attachment upload."
    },
    "AppsDynamiteSharedFindDocumentSuggestion": {
      "type": "object",
      "id": "AppsDynamiteSharedFindDocumentSuggestion",
      "properties": {
        "showActionButtons": {
          "description": "Whether to show the action buttons in the card for the suggestions.",
          "type": "boolean"
        },
        "documentSuggestions": {
          "items": {
            "$ref": "AppsDynamiteSharedDocument"
          },
          "description": "List of documents to render as suggestions.",
          "type": "array"
        }
      },
      "description": "Data for a FindDocument suggestion type."
    },
    "UploadItemRef": {
      "description": "Represents an upload session reference. This reference is created via upload method. This reference is valid for 30 days after its creation. Updating of item content may refer to this uploaded content via contentDataRef.",
      "id": "UploadItemRef",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the content reference. The maximum length is 2048 characters."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedSegmentedMembershipCounts": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteSharedSegmentedMembershipCount"
          }
        }
      },
      "id": "AppsDynamiteSharedSegmentedMembershipCounts"
    },
    "AppsDynamiteV1ApiCompatV1Action": {
      "type": "object",
      "id": "AppsDynamiteV1ApiCompatV1Action",
      "description": "Interactive objects inside a message. Documentation: - https://api.slack.com/docs/message-buttons",
      "properties": {
        "name": {
          "description": "Unique identifier for this action.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Action type - currently only \"button\"."
        },
        "value": {
          "description": "Payload for this action. Will be sent to the action handler along with name.",
          "type": "string"
        },
        "text": {
          "description": "User-facing label for the action.",
          "type": "string"
        },
        "confirm": {
          "$ref": "AppsDynamiteV1ApiCompatV1ActionConfirm",
          "description": "Confirmation dialog config."
        },
        "style": {
          "description": "Button style (\"default\", \"primary\", or \"danger\").",
          "type": "string"
        }
      }
    },
    "ChatConserverDynamitePlaceholderMetadataVideoCallMetadata": {
      "type": "object",
      "id": "ChatConserverDynamitePlaceholderMetadataVideoCallMetadata",
      "properties": {
        "meetingUrl": {
          "type": "string"
        }
      },
      "description": "A Meet initiated in Dynamite and its URL."
    },
    "AppsDynamiteSharedVideoReference": {
      "description": "Reference to a transcoded video attachment.",
      "id": "AppsDynamiteSharedVideoReference",
      "properties": {
        "format": {
          "type": "array",
          "description": "Available transcode format. Value is defined in video/storage/proto/content_header.proto",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "status": {
          "type": "string",
          "description": "Transcode status",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN_STATUS",
            "SUCCESS",
            "ERROR",
            "NOT_APPLICABLE",
            "THUMBNAIL_SUCCESS",
            "GO_LIVE_SUCCESS"
          ]
        }
      },
      "type": "object"
    },
    "DriveFollowUpRestrict": {
      "type": "object",
      "description": "Drive follow-up search restricts (e.g. \"followup:suggestions\").",
      "properties": {
        "type": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "UNSPECIFIED",
            "FOLLOWUP_SUGGESTIONS",
            "FOLLOWUP_ACTION_ITEMS"
          ],
          "type": "string"
        }
      },
      "id": "DriveFollowUpRestrict"
    },
    "TopicStateUpdate": {
      "properties": {
        "topicState": {
          "$ref": "TopicState"
        }
      },
      "id": "TopicStateUpdate",
      "type": "object"
    },
    "MultiKey": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string",
          "description": "A server-assigned ID. This ID must be used only by Gmail and is constructed using millesecond ts \u003c\u003c 20 + randomness. The ID affects the sort order of the index.",
          "format": "uint64"
        },
        "clientAssignedPermId": {
          "description": "A client-assigned string based key.",
          "type": "string"
        }
      },
      "description": "A union-like type for identifiying an object in storage. MultiKeys contain multiple key fields, each in a separate key space. At least one key field must be set. More than one key field may be set as long as all key values refer to the same object. All objects in storage have unique server_id keys. All MultiKeys returned from storage to storage clients will always have the server_id field set. When creating an object, if a MultiKey without a server_id is supplied to storage, the storage system will auto-assign a server ID to the new object. For all other storage requests (i.e. those not creating new objects), clients may omit server_id (as long as they supply another key). Instead of server ids, clients can specify string based client_assigned_perm_id keys. Mail message drafts are a prime example of these kinds of objects. Each time a user saves a new version of a draft, the storage system needs to create a new object with the updated draft content and needs to delete the object containing the old content. The new object gets a new SERVER_ID but should get the same CLIENT_ASSIGNED_PERM_ID as the now-deleted object containing the old content. Carrying forward the perm ID allows it to be used to consistently refer to the same logical object across revisions. These perm IDs save sync clients from having to deal with changing object IDs. For example, assume there's a mail message in storage with SERVER_ID = 123 and CLIENT_ASSIGNED_PERM_ID = \"foo\". The following are all valid ways of addressing the object using MultiKeys: 1) MultiKey { server_id = 123 } 2) MultiKey { server_id = 123, client_assigned_perm_id = \"foo\" } 3) MultiKey { client_assigned_perm_id = \"foo\" } Multikeys are never serialized in the storage. The individual keys are extracted and processed separately. Both the integer ids as well as string ids are indexed for efficient retrieval using the same fields in the backend. See go/tingle-multikeys for more information on background and motivation.",
      "id": "MultiKey"
    },
    "ItemStructuredData": {
      "properties": {
        "object": {
          "description": "The structured data object that should conform to a registered object definition in the schema for the data source.",
          "$ref": "StructuredDataObject"
        },
        "hash": {
          "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Available structured data fields for the item.",
      "id": "ItemStructuredData"
    },
    "ClusterInfo": {
      "type": "object",
      "description": "ClusterInfo contains clustering related information for a particular thread that would be sent as part of the conversation view. Today, this information would be used by iOS notification server to identify whether the thread belongs to a cluster. If the thread belongs to a grouped cluster, it would identify whether the cluster is throttled.",
      "id": "ClusterInfo",
      "properties": {
        "clusterId": {
          "type": "array",
          "description": "IDs of the highest priority clusters to which the thread belongs to. If this field is not present, the thread does not belong to any cluster and would be shown in the inbox, unclustered.",
          "items": {
            "type": "string"
          }
        },
        "throttled": {
          "description": "If the thread belongs to a grouped cluster and all of those clusters are throttled, then this field is set to true.",
          "type": "boolean"
        }
      }
    },
    "GSuitePrincipal": {
      "properties": {
        "gsuiteDomain": {
          "type": "boolean",
          "description": "This principal represents all users of the Google Workspace domain of the customer."
        },
        "gsuiteUserEmail": {
          "description": "This principal references a Google Workspace user account.",
          "type": "string"
        },
        "gsuiteGroupEmail": {
          "type": "string",
          "description": "This principal references a Google Workspace group name."
        }
      },
      "id": "GSuitePrincipal",
      "type": "object"
    },
    "GoogleDocsResultInfo": {
      "description": "A message containing information about a specific result. This information is passed to the scorer and beyond; in particular, GWS relies on it to format the result in the UI. Split from GoogleDocsMetadata in case we later want to reuse the message.",
      "type": "object",
      "properties": {
        "cosmoNameSpace": {
          "description": "For Cosmo objects, the Cosmo namespace the object was in. This allows downstream clients to identify whether a document was created in Writely or Kix, Presently or Punch, or whether it was uploaded from GDrive. See storage_cosmo.Id.NAME_SPACE for a list of all Cosmo name spaces.",
          "format": "int32",
          "type": "integer"
        },
        "cosmoId": {
          "description": "The storage identifier for the object in Cosmo. This field is intended to used by Stratus/Moonshine integration only. It should not be exposed externally (please refer to encrypted_id for that purpose).",
          "$ref": "Id"
        },
        "encryptedId": {
          "description": "The encrypted (user-visible) id of this object. Knowing the id is sufficient to create a canonical URL for this document.",
          "type": "string"
        },
        "shareScope": {
          "$ref": "ShareScope",
          "description": "The visibility indicator in the UI will be based upon this."
        },
        "mimeType": {
          "description": "The mimetype of the document.",
          "type": "string"
        },
        "attachmentSha1": {
          "type": "string",
          "description": "The SHA1 hash of the object in Drive, if any."
        }
      },
      "id": "GoogleDocsResultInfo"
    },
    "DocumentInfo": {
      "properties": {
        "whiteboardInfo": {
          "$ref": "WhiteboardInfo",
          "description": "A whiteboard document."
        }
      },
      "id": "DocumentInfo",
      "description": "Information on a document attached to an active conference.",
      "type": "object"
    },
    "AppsDynamiteStorageGridGridItem": {
      "properties": {
        "id": {
          "description": "A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters.",
          "type": "string"
        },
        "layout": {
          "enum": [
            "GRID_ITEM_LAYOUT_UNSPECIFIED",
            "TEXT_BELOW",
            "TEXT_ABOVE"
          ],
          "enumDescriptions": [
            "No layout specified.",
            "The title and subtitle are shown below the grid item's image.",
            "The title and subtitle are shown above the grid item's image."
          ],
          "type": "string",
          "description": "The layout to use for the grid item."
        },
        "image": {
          "description": "The image that displays in the grid item.",
          "$ref": "AppsDynamiteStorageImageComponent"
        },
        "subtitle": {
          "description": "The grid item's subtitle.",
          "type": "string"
        },
        "textAlignment": {
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "type": "string",
          "description": "The horizontal alignment of the grid item's text."
        },
        "title": {
          "type": "string",
          "description": "The grid item's title."
        }
      },
      "description": "Represents a single item in the grid layout.",
      "type": "object",
      "id": "AppsDynamiteStorageGridGridItem"
    },
    "AppsDynamiteStorageCard": {
      "description": "A card is a UI element that can contain UI widgets such as text and images. For more information, see Cards . For example, the following JSON creates a card that has a header with the name, position, icons, and link for a contact, followed by a section with contact information like email and phone number. ``` { \"header\": { \"title\": \"Heba Salam\", \"subtitle\": \"Software Engineer\", \"imageStyle\": \"ImageStyle.AVATAR\", \"imageUrl\": \"https://example.com/heba_salam.png\", \"imageAltText\": \"Avatar for Heba Salam\" }, \"sections\" : [ { \"header\": \"Contact Info\", \"widgets\": [ { \"decorated_text\": { \"icon\": { \"knownIcon\": \"EMAIL\" }, \"content\": \"heba.salam@example.com\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PERSON\" }, \"content\": \"Online\" } }, { \"decoratedText\": { \"icon\": { \"knownIcon\": \"PHONE\" }, \"content\": \"+1 (555) 555-1234\" } }, { \"buttons\": [ { \"textButton\": { \"text\": \"Share\", }, \"onClick\": { \"openLink\": { \"url\": \"https://example.com/share\" } } }, { \"textButton\": { \"text\": \"Edit\", }, \"onClick\": { \"action\": { \"function\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"EDIT\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } } ] } ], \"collapsible\": true, \"uncollapsibleWidgetsCount\": 3 } ], \"cardActions\": [ { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ], \"name\": \"contact-card-K3wB6arF2H9L\" } ```",
      "type": "object",
      "id": "AppsDynamiteStorageCard",
      "properties": {
        "header": {
          "$ref": "AppsDynamiteStorageCardCardHeader",
          "description": "The header of the card. A header usually contains a title and an image."
        },
        "name": {
          "type": "string",
          "description": "Name of the card, which is used as a identifier for the card in card navigation."
        },
        "sections": {
          "items": {
            "$ref": "AppsDynamiteStorageCardSection"
          },
          "type": "array",
          "description": "Sections are separated by a line divider."
        },
        "cardActions": {
          "items": {
            "$ref": "AppsDynamiteStorageCardCardAction"
          },
          "description": "The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options: ``` \"card_actions\": [ { \"actionLabel\": \"Setting\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```",
          "type": "array"
        }
      }
    },
    "SearchRequest": {
      "description": "The search API request.",
      "properties": {
        "facetOptions": {
          "items": {
            "$ref": "FacetOptions"
          },
          "type": "array"
        },
        "requestOptions": {
          "description": "Request options, such as the search application and user timezone.",
          "$ref": "RequestOptions"
        },
        "queryInterpretationOptions": {
          "description": "Options to interpret the user query.",
          "$ref": "QueryInterpretationOptions"
        },
        "query": {
          "type": "string",
          "description": "The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "description": "Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested."
        },
        "contextAttributes": {
          "type": "array",
          "description": "Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.",
          "items": {
            "$ref": "ContextAttribute"
          }
        },
        "dataSourceRestrictions": {
          "description": "The sources to use for querying. If not specified, all data sources from the current search application are used.",
          "type": "array",
          "items": {
            "$ref": "DataSourceRestriction"
          }
        },
        "start": {
          "format": "int32",
          "description": "Starting index of the results.",
          "type": "integer"
        },
        "sortOptions": {
          "$ref": "SortOptions",
          "description": "The options for sorting the search results"
        }
      },
      "type": "object",
      "id": "SearchRequest"
    },
    "AppsDynamiteSharedUserBlockRelationship": {
      "description": "User-block relationship",
      "type": "object",
      "properties": {
        "hasBlockedRequester": {
          "type": "boolean"
        },
        "isBlockedByRequester": {
          "type": "boolean"
        }
      },
      "id": "AppsDynamiteSharedUserBlockRelationship"
    },
    "Color": {
      "properties": {
        "red": {
          "type": "number",
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "format": "float"
        },
        "green": {
          "format": "float",
          "type": "number",
          "description": "The amount of green in the color as a value in the interval [0, 1]."
        },
        "alpha": {
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).",
          "format": "float",
          "type": "number"
        },
        "blue": {
          "format": "float",
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "type": "number"
        }
      },
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...",
      "type": "object",
      "id": "Color"
    },
    "QueryCountByStatus": {
      "properties": {
        "statusCode": {
          "type": "integer",
          "description": "This represents the http status code.",
          "format": "int32"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      },
      "id": "QueryCountByStatus",
      "type": "object"
    },
    "PaygateInfo": {
      "properties": {
        "callEndingSoonWarningTime": {
          "description": "Time when client should show message that the call is ending soon.",
          "type": "string",
          "format": "google-datetime"
        },
        "callEndingTime": {
          "format": "google-datetime",
          "description": "Time when the call will end if the user does not upgrade (after in-call upgrade support check has been implemented).",
          "type": "string"
        },
        "showUpgradePromos": {
          "description": "This boolean is used by clients to decide whether the user should be shown promos to upgrade.",
          "type": "boolean"
        }
      },
      "description": "Information provided to clients so that they can show upgrade promos and warnings on call ending early (for non-paying users).",
      "id": "PaygateInfo",
      "type": "object"
    },
    "AppsDynamiteSharedMessageIntegrationPayload": {
      "id": "AppsDynamiteSharedMessageIntegrationPayload",
      "type": "object",
      "description": "The payload(restricted to 1P applications) to be stored with a specific message.",
      "properties": {
        "tasksMessageIntegrationPayload": {
          "$ref": "AppsDynamiteSharedTasksMessageIntegrationPayload"
        },
        "projectNumber": {
          "description": "Pantheon project number used to identify the calling app.",
          "format": "int64",
          "type": "string"
        },
        "type": {
          "enum": [
            "PAYLOAD_TYPE_UNSPECIFIED",
            "TASKS"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "description": "An enum indicating which 1P application's payload this is. This field is required to add 1P payload.",
          "type": "string"
        }
      }
    },
    "UpdateBody": {
      "type": "object",
      "id": "UpdateBody",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UNSPECIFIED_ACTION_TYPE",
            "IN_PLACE_INSERT",
            "INSERT_AT_START",
            "INSERT_AT_END",
            "REPLACE"
          ],
          "enumDescriptions": [
            "Default value when nothing is set for Type.",
            "Indicates this action is to perform an in-place insertion. By default the content is inserted at the current cursor position, if there is selected content, it replaces the selected content.",
            "Indicates this action is to perform insert at the start of the message body.",
            "Indicates this action is to perform insert at the end of the message body.",
            "Indicates this action is to replace the message body."
          ]
        },
        "insertContents": {
          "type": "array",
          "items": {
            "$ref": "InsertContent"
          },
          "description": "A repeated field that contains a series of content to insert into the draft that the user is currently editing. The content can contain HTML content or plain text content."
        }
      }
    },
    "References": {
      "properties": {
        "references": {
          "type": "array",
          "items": {
            "$ref": "Reference"
          }
        }
      },
      "type": "object",
      "id": "References"
    },
    "Name": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The read-only display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header."
        }
      },
      "description": "A person's name.",
      "id": "Name",
      "type": "object"
    },
    "AppsDynamiteSharedChatItemGroupInfo": {
      "description": "Information about the space that the item originated from. This will be used to display Activity Feed items from rooms, and only contain the necessary information, such as the space name and group attributes. NEXT TAG: 6",
      "id": "AppsDynamiteSharedChatItemGroupInfo",
      "type": "object",
      "properties": {
        "groupReadTimeUsec": {
          "format": "int64",
          "description": "Timestamp of when the group containing the message has been read by the user.",
          "type": "string"
        },
        "attributeCheckerGroupType": {
          "enumDescriptions": [
            "LINT.IfChange",
            "A 1:1 DM that has two human users. Deprecated. Use IMMUTABLE_MEMBERSHIP_HUMAN_DM instead.",
            "A 1:1 DM between a human user and a bot.",
            "A group DM that has multiple human users with immutable group membership. Deprecated. Use IMMUTABLE_MEMBERSHIP_HUMAN_DM instead.",
            "A flat room that contains a single thread.",
            "A threaded room. Topics in this room are threaded, and users can reply to any topic.",
            "A DM with immutable group membership. It can be a 1:1 DM or a group DM with multiple human users.",
            "A post room. Topics in this room are organized in a post/reply style. See the design doc for more details: go/PostRoomsInDynamite. Deprecated. Post rooms are no longer supported.",
            "Represents an Activity Feed space. These groups are modeled like flat rooms and contain items for users to catch up on important things. Each user should only have one group of this type. See go/activity-feed. Deprecated: The go/activity-feed project is cancelled and this should no longer be used. LINT.ThenChange(//depot/google3/logs/proto/apps_dynamite/dynamite_visual_element_entry.proto:LoggingGroupType,//depot/google3/java/com/google/apps/dynamite/v1/web/ui/group/groups.js:LoggingGroupType)"
          ],
          "description": "This is needed to determine what type of group the source message came from to support click-to-source.",
          "type": "string",
          "enum": [
            "ATTRIBUTE_CHECKER_GROUP_TYPE_UNSPECIFIED",
            "ONE_TO_ONE_HUMAN_DM",
            "ONE_TO_ONE_BOT_DM",
            "IMMUTABLE_MEMBERSHIP_GROUP_DM",
            "FLAT_ROOM",
            "THREADED_ROOM",
            "IMMUTABLE_MEMBERSHIP_HUMAN_DM",
            "POST_ROOM",
            "ACTIVITY_FEED"
          ]
        },
        "inlineThreadingEnabled": {
          "description": "Indicates whether the group has inline replies enabled. If enabled, clients will render the space with inline replies.",
          "type": "boolean"
        },
        "groupName": {
          "type": "string"
        }
      }
    },
    "AppsDynamiteStorageDecoratedTextSwitchControl": {
      "properties": {
        "onChangeAction": {
          "$ref": "AppsDynamiteStorageAction",
          "description": "The action when the switch state is changed."
        },
        "value": {
          "type": "string",
          "description": "The value is what is passed back in the callback."
        },
        "name": {
          "type": "string",
          "description": "The name of the switch widget that's used in formInput."
        },
        "selected": {
          "type": "boolean",
          "description": "If the switch is selected."
        },
        "controlType": {
          "type": "string",
          "enumDescriptions": [
            "",
            "Deprecated in favor of `CHECK_BOX`.",
            ""
          ],
          "enum": [
            "SWITCH",
            "CHECKBOX",
            "CHECK_BOX"
          ],
          "description": "The control type, either switch or checkbox."
        }
      },
      "type": "object",
      "id": "AppsDynamiteStorageDecoratedTextSwitchControl"
    },
    "SelectionControl": {
      "properties": {
        "items": {
          "type": "array",
          "description": "For radio button, at most one of the items will be selected.",
          "items": {
            "$ref": "SelectionItem"
          }
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN"
          ]
        },
        "name": {
          "description": "The name of the text field which is will be used in FormInput.",
          "type": "string"
        },
        "onChange": {
          "$ref": "FormAction",
          "description": "If specified, form is submitted when selection changed. If not specified, developer will need to specify a separate button."
        },
        "label": {
          "description": "Label used to be displayed ahead of the selection control. It is optional.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SelectionControl"
    },
    "Annotation": {
      "id": "Annotation",
      "description": "NOTE WHEN ADDING NEW PROTO FIELDS: Be sure to add datapol annotations to new fields with potential PII, so they get scrubbed when logging protos for errors. NEXT TAG: 29",
      "properties": {
        "consentedAppUnfurlMetadata": {
          "$ref": "ConsentedAppUnfurlMetadata"
        },
        "slashCommandMetadata": {
          "$ref": "SlashCommandMetadata"
        },
        "incomingWebhookChangedMetadata": {
          "$ref": "IncomingWebhookChangedMetadata"
        },
        "type": {
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "URL",
            "DRIVE_FILE",
            "DRIVE_DOC",
            "DRIVE_SHEET",
            "DRIVE_SLIDE",
            "DRIVE_FORM",
            "USER_MENTION",
            "SLASH_COMMAND",
            "CONSENTED_APP_UNFURL",
            "VIDEO",
            "FORMAT_DATA",
            "IMAGE",
            "PDF",
            "VIDEO_CALL",
            "UPLOAD_METADATA",
            "GSUITE_INTEGRATION",
            "CUSTOM_EMOJI",
            "CARD_CAPABILITY",
            "DATA_LOSS_PREVENTION",
            "REQUIRED_MESSAGE_FEATURES_METADATA",
            "MEMBERSHIP_CHANGED",
            "ROOM_UPDATED",
            "GROUP_RETENTION_SETTINGS_UPDATED",
            "BABEL_PLACEHOLDER",
            "READ_RECEIPTS_SETTINGS_UPDATED",
            "INCOMING_WEBHOOK_CHANGED",
            "INTEGRATION_CONFIG_UPDATED",
            "INVITATION"
          ],
          "description": "Type of the Annotation.",
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "These can have overlaps, i.e. same message can have multiple of these. For example a Drive link to a PDF can have URL, DRIVE_FILE and PDF all set Links",
            "Any drive file",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Any video, not just youtube, the url decides how to play",
            "UI should not be concerned with FORMAT_DATA",
            "",
            "",
            "For Thor integration",
            "Blobstore uploads",
            "Generic annotation for gsuite integrations",
            "",
            "Card capability for in-stream widgets.",
            "",
            "Clients can use this to see whether they support the entire message, or show a fallback chip otherwise.",
            "Annotation types for system messages. Clients should never set this.",
            "",
            "",
            "",
            "",
            "",
            "",
            "Message-level annotations. First message of an invite. Should not be set by clients."
          ]
        },
        "videoCallMetadata": {
          "$ref": "VideoCallMetadata"
        },
        "userMentionMetadata": {
          "$ref": "UserMentionMetadata",
          "description": "Metadata that clients can set for annotations. LINT.IfChange In-text annotations"
        },
        "babelPlaceholderMetadata": {
          "$ref": "BabelPlaceholderMetadata"
        },
        "gsuiteIntegrationMetadata": {
          "$ref": "GsuiteIntegrationMetadata",
          "description": "Metadata for 1P integrations like tasks, calendar. These are supported only through integration server as 1P integrations use the integration API (which in turn uses backend API with special permissions) to post messages. Clients should never set this. LINT.IfChange"
        },
        "dataLossPreventionMetadata": {
          "$ref": "DataLossPreventionMetadata"
        },
        "readReceiptsSettingsMetadata": {
          "$ref": "ReadReceiptsSettingsUpdatedMetadata"
        },
        "chipRenderType": {
          "type": "string",
          "description": "Whether the annotation should be rendered as a chip. If this is missing or unspecified, fallback to should_not_render on the metadata.",
          "enumDescriptions": [
            "",
            "Clients must render the annotation as a chip, and if they cannot render this many Annotations, show a fallback card.",
            "Client can render the annotation if it has room to render it.",
            "Client should not render the annotation as a chip."
          ],
          "enum": [
            "CHIP_RENDER_TYPE_UNSPECIFIED",
            "RENDER",
            "RENDER_IF_POSSIBLE",
            "DO_NOT_RENDER"
          ]
        },
        "cardCapabilityMetadata": {
          "description": "LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java)",
          "$ref": "CardCapabilityMetadata"
        },
        "groupRetentionSettingsUpdated": {
          "$ref": "GroupRetentionSettingsUpdatedMetaData"
        },
        "urlMetadata": {
          "$ref": "UrlMetadata"
        },
        "length": {
          "format": "int32",
          "description": "Length of the text_body substring beginning from start_index the Annotation corresponds to.",
          "type": "integer"
        },
        "serverInvalidated": {
          "description": "Whether or not the annotation is invalidated by the server. Example of situations for invalidation include: when the URL is malformed, or when Drive item ID is rejected by Drive Service.",
          "type": "boolean"
        },
        "customEmojiMetadata": {
          "$ref": "CustomEmojiMetadata"
        },
        "driveMetadata": {
          "description": "Chip annotations",
          "$ref": "DriveMetadata"
        },
        "requiredMessageFeaturesMetadata": {
          "description": "Metadata that defines all of the required features that must be rendered in the message. Clients can use this to see whether they support the entire message, or show a fallback chip otherwise. See go/message-quoting-client-to-server for details. LINT.ThenChange( //depot/google3/java/com/google/apps/dynamite/v1/allshared/parser/AnnotationSanitizer.java, //depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java, //depot/google3/java/com/google/caribou/eli/mediation/chat/AnnotationConverter.java )",
          "$ref": "RequiredMessageFeaturesMetadata"
        },
        "startIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Start index (0-indexed) of the Message text the Annotation corresponds to, inclusive."
        },
        "youtubeMetadata": {
          "$ref": "YoutubeMetadata"
        },
        "integrationConfigUpdated": {
          "$ref": "IntegrationConfigUpdatedMetadata",
          "description": "LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java)"
        },
        "membershipChanged": {
          "$ref": "MembershipChangedMetadata",
          "description": "Metadata for system messages. Clients should never set this. LINT.IfChange"
        },
        "uploadMetadata": {
          "$ref": "UploadMetadata"
        },
        "roomUpdated": {
          "$ref": "RoomUpdatedMetadata"
        },
        "uniqueId": {
          "description": "* A unique server-assigned ID for this annotation. This is helpful in matching annotation objects when fetched from service. All uploads should have a unique_id after the message they are attached to is successfully sent. Url annotations that originally were uploads (i.e. policy violations) will have a unique_id after the message they are attached to is successfully sent. No other url annotations should have a unique_id. All drive annotations should have a unique_id after the message they are attached to is successfully sent.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "* A client-assigned ID for this annotation. This is helpful in matching the back-filled annotations to the original annotations on client side, without having to re-parse the message. There is no guarantee an annotation has a local_id, it's a purely client used and controlled field with no guarantee of uniqueness."
        },
        "formatMetadata": {
          "$ref": "FormatMetadata"
        }
      },
      "type": "object"
    },
    "MessageParentId": {
      "type": "object",
      "properties": {
        "topicId": {
          "$ref": "TopicId",
          "description": "ID of the Topic this Message is posted to. NEXT TAG : 5"
        }
      },
      "id": "MessageParentId",
      "description": "Primary key identifying Message resource's immediate parent. For top-level Messages, either topic_id or chat_id is populated. For replies, message_id is populated with the topic Message's ID."
    },
    "FormatMetadata": {
      "id": "FormatMetadata",
      "type": "object",
      "properties": {
        "formatType": {
          "description": "LINT.ThenChange(//depot/google3/apps/dynamite/v1/web/datakeys/annotated_span.proto)",
          "enumDescriptions": [
            "Default value for the enum.",
            "",
            "",
            "",
            "",
            "Inline monospace.",
            "",
            "Multi-line monospace block.",
            "",
            "",
            "Encloses BULLETED_LIST_ITEM annotations.",
            "Must cover the whole line including the newline",
            "character at the end. Not used anymore."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "BOLD",
            "ITALIC",
            "STRIKE",
            "SOURCE_CODE",
            "MONOSPACE",
            "HIDDEN",
            "MONOSPACE_BLOCK",
            "UNDERLINE",
            "FONT_COLOR",
            "BULLETED_LIST",
            "BULLETED_LIST_ITEM",
            "CLIENT_HIDDEN"
          ],
          "type": "string"
        },
        "fontColor": {
          "format": "uint32",
          "type": "integer",
          "description": "Font color is set if and only if format_type is FONT_COLOR. The components are stored as (alpha \u003c\u003c 24) | (red \u003c\u003c 16) | (green \u003c\u003c 8) | blue. Clients should always set the alpha component to 0xFF. NEXT TAG: 3"
        }
      },
      "description": "Annotation metadata for markup formatting"
    },
    "TextParagraph": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "id": "TextParagraph"
    },
    "UserMentionMetadata": {
      "properties": {
        "gender": {
          "description": "Gender of the mentioned user. One of \"female\", \"male\" or \"other\". Used for choosing accurate translations for strings that contain the UserMention, when these need to be constructed (e.g. task assignment update message). This field should remain empty when clients resolve a UserMention. It will be filled in when a UserMention is generated by the Integration Server.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "INVITE",
            "UNINVITE",
            "MENTION",
            "MENTION_ALL",
            "FAILED_TO_ADD"
          ],
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "",
            "",
            "",
            "",
            "Server-generated user mention, for clients to strikethrough."
          ]
        },
        "inviteeInfo": {
          "description": "Invitee UserId and email used when mentioned. This field should remain empty when type == MENTION_ALL. Invitee_info.email is only used when a user is @-mentioned with an email address, and it will be empty when clients get messages from Backend.",
          "$ref": "InviteeInfo"
        },
        "displayName": {
          "description": "Display name of the mentioned user. This field should remain empty when clients resolve a UserMention annotation. It will be filled in when a UserMention is generated by the Integration Server.",
          "type": "string"
        },
        "id": {
          "description": "To be deprecated. Use invitee_info field instead. ID of the User mentioned. This field should remain empty when type == MENTION_ALL.",
          "$ref": "UserId"
        }
      },
      "id": "UserMentionMetadata",
      "type": "object",
      "description": "Annotation metadata for user mentions (+/@/-)."
    },
    "AppsDynamiteStorageSuggestions": {
      "properties": {
        "items": {
          "description": "A list of suggestions items which will be used in are used in autocomplete.",
          "items": {
            "$ref": "AppsDynamiteStorageSuggestionsSuggestionItem"
          },
          "type": "array"
        }
      },
      "id": "AppsDynamiteStorageSuggestions",
      "description": "A container wrapping elements necessary for showing suggestion items used in text input autocomplete.",
      "type": "object"
    },
    "CloudPrincipalProto": {
      "description": "Principal associated with a Cloud Principal representing third party user.",
      "id": "CloudPrincipalProto",
      "type": "object",
      "properties": {
        "id": {
          "description": "Format: \"{identity-pool}:{subject}#\" Details: go/cloud-principal-identifiers",
          "type": "string"
        }
      }
    },
    "AppsDynamiteSharedAssistantUnfulfillableRequest": {
      "id": "AppsDynamiteSharedAssistantUnfulfillableRequest",
      "description": "Data for a response to an unfulfillable request.",
      "type": "object",
      "properties": {}
    },
    "DriveTimeSpanRestrict": {
      "id": "DriveTimeSpanRestrict",
      "properties": {
        "type": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "Not Enabled",
            "Not Enabled"
          ],
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "TODAY",
            "YESTERDAY",
            "LAST_7_DAYS",
            "LAST_30_DAYS",
            "LAST_90_DAYS"
          ]
        }
      },
      "type": "object",
      "description": "The time span search restrict (e.g. \"after:2017-09-11 before:2017-09-12\")."
    },
    "FuseboxItemThreadMatchInfo": {
      "properties": {
        "rank": {
          "$ref": "Rank",
          "description": "The rank of this ItemThread in the result set of the query. This rank may be used to sort ItemThreads in proper order. Ranks are specific to a query, and stable for a given query at a specific time."
        },
        "lastMatchingItemId": {
          "description": "The server id of the last item that matched the query. This is always set, regardless of the compute_matching_items_per_thread option. This is the value by which search results are sorted, in descending (i.e. newest first) order.",
          "format": "uint64",
          "type": "string"
        },
        "clusterId": {
          "description": "If SearchQuery.Options.Clustering is present, the query will be treated as a cluster query, and this field may be populated with the cluster ID of the cluster to which this thread belongs, if any. The cluster ID will be a label on the message.",
          "type": "string"
        },
        "lastMatchingItemKey": {
          "description": "The MultiKey of the last item that matched the query. This is always set, regardless of the compute_matching_items_per_thread option. This is the value by which search results are sorted, in descending (i.e. newest first) order.",
          "$ref": "MultiKey"
        },
        "matchingItemKey": {
          "description": "If SearchQuery.Options.compute_matching_items_per_thread, this field will contain the keys of all items that matched the query, in ascending order. Note that this option requires extra computation.",
          "type": "array",
          "items": {
            "$ref": "MultiKey"
          }
        }
      },
      "type": "object",
      "id": "FuseboxItemThreadMatchInfo",
      "description": "In the context of a search, the MatchInfo contains information about which Items matched the query."
    },
    "AppsDynamiteSharedChatItemActivityInfoFeedItemReactions": {
      "type": "object",
      "description": "Existence of this attribute indicates that the AF item is for message reactions, but it is intentionally left empty since the list of reactions can be found in the top-level Message.Reactions.",
      "properties": {},
      "id": "AppsDynamiteSharedChatItemActivityInfoFeedItemReactions"
    },
    "FreshnessOptions": {
      "id": "FreshnessOptions",
      "description": "Indicates which freshness property to use when adjusting search ranking for an item. Fresher, more recent dates indicate higher quality. Use the freshness option property that best works with your data. For fileshare documents, last modified time is most relevant. For calendar event data, the time when the event occurs is a more relevant freshness indicator. In this way, calendar events that occur closer to the time of the search query are considered higher quality and ranked accordingly.",
      "properties": {
        "freshnessDuration": {
          "type": "string",
          "description": "The duration after which an object should be considered stale. The default value is 180 days (in seconds).",
          "format": "google-duration"
        },
        "freshnessProperty": {
          "description": "This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OpenLink": {
      "id": "OpenLink",
      "properties": {
        "url": {
          "type": "string"
        },
        "onClose": {
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "NOTHING",
            "RELOAD_ADD_ON"
          ],
          "type": "string"
        },
        "loadIndicator": {
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "NONE",
            "SPINNER"
          ],
          "description": "Next available ID: 5"
        },
        "openAs": {
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "FULL_SIZE",
            "OVERLAY"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedOrganizationInfoConsumerInfo": {
      "id": "AppsDynamiteSharedOrganizationInfoConsumerInfo",
      "type": "object",
      "description": "Intentionally empty. Used to disambiguate consumer and customer use cases in oneof below.",
      "properties": {}
    },
    "SuggestResult": {
      "properties": {
        "suggestedQuery": {
          "type": "string",
          "description": "The suggested query that will be used for search, when the user clicks on the suggestion"
        },
        "querySuggestion": {
          "$ref": "QuerySuggestion",
          "description": "This field will be present if the suggested query is a word/phrase completion."
        },
        "source": {
          "description": "The source of the suggestion.",
          "$ref": "Source"
        },
        "peopleSuggestion": {
          "description": "This is present when the suggestion indicates a person. It contains more information about the person - like their email ID, name etc.",
          "$ref": "PeopleSuggestion"
        }
      },
      "description": "One suggestion result.",
      "type": "object",
      "id": "SuggestResult"
    },
    "EventAnnotation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "id": "EventAnnotation"
    },
    "AppsDynamiteSharedChatItemActivityInfo": {
      "properties": {
        "feedItemNudge": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemNudge"
        },
        "feedItemReactions": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemReactions"
        },
        "feedItemThreadReply": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply"
        },
        "feedItemUserMention": {
          "$ref": "AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention"
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedChatItemActivityInfo"
    },
    "SigningKeyPossessorProto": {
      "properties": {
        "serializedVerificationKey": {
          "description": "The actual verification key bytes corresponding to the above type.",
          "type": "string",
          "format": "byte"
        },
        "keymasterKeyType": {
          "type": "integer",
          "description": "This value must be from the KeyMetadata.Type enum in keymaster.proto.",
          "format": "int32"
        },
        "serializedVerificationKeyset": {
          "description": "The binary serialized Keymaster SerializedReader of a public keyset. The keyset must contain exactly one key. N.B.: If this field is populated, serialized_verification_key should be set to the empty string and keymaster_key_type should be set to zero.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Represents a principal who possesses a signing key corresponding to the verification key or keyset described here.",
      "id": "SigningKeyPossessorProto",
      "type": "object"
    },
    "SearchQualityMetadata": {
      "type": "object",
      "properties": {
        "quality": {
          "type": "number",
          "description": "An indication of the quality of the item, used to influence search quality. Value should be between 0.0 (lowest quality) and 1.0 (highest quality). The default value is 0.0.",
          "format": "double"
        }
      },
      "description": "Additional search quality metadata of the item.",
      "id": "SearchQualityMetadata"
    },
    "UpdateSchemaRequest": {
      "type": "object",
      "properties": {
        "validateOnly": {
          "description": "If true, the schema will be checked for validity, but will not be registered with the data source, even if valid.",
          "type": "boolean"
        },
        "schema": {
          "description": "The new schema for the source.",
          "$ref": "Schema"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        }
      },
      "id": "UpdateSchemaRequest"
    },
    "FieldViolation": {
      "properties": {
        "field": {
          "type": "string",
          "description": "Path of field with violation."
        },
        "description": {
          "type": "string",
          "description": "The description of the error."
        }
      },
      "type": "object",
      "id": "FieldViolation"
    },
    "TriggerAction": {
      "properties": {
        "dataInt": {
          "format": "int64",
          "type": "string"
        },
        "data": {
          "description": "Clients should use extensions on the Trigger message instead.",
          "format": "byte",
          "type": "string"
        },
        "action": {
          "type": "string",
          "enumDescriptions": [
            "",
            "No-op",
            "No-op",
            "This action begins the message expunge process. It will trigger a purge attempt for all messages that have this trigger.",
            "When this trigger fires, the current retention policy will be loaded from the policy management system and stored into the preference cache (if necessary). This will also create new expunge triggers if necessary.",
            "When this trigger fires, the message should be used to update the user's importance model. See http://go/io-tingle for more details.",
            "Sends the trigger to the master Caribou server via the Stubby TriggerHandlerService interface (defined in caribou/coproc/proto/trigger_handler.proto). The trigger is handled at fire time in the account's primary replica, and only in non-primary replicas after a delay.",
            "Similar to ACTION_INVOKE_CS, but instead of sending the trigger to the master Caribou server, sends it to a Stratus server that also implements the TriggerHandlerService. This Stratus server is specified via FLAGS_triggers_stratus_server_address. The trigger is handled at fire time in the account's primary replica, and only in non-primary replicas after a delay.",
            "This action begins the message's PDH expunge. It will trigger a expunge (from pdh) attempt for all messages that have this trigger.",
            "When this trigger fires, based on the latest retention policy: 1. messages that need to be deleted will be deleted through the CS trigger handler 2. ^deleted messages that need to be expunged will be expunged",
            "Similar to ACTION_INVOKE_CS, but instead of sending the trigger to the master Caribou server, sends it to a jobsetted server in the user's master jobset using the consistent-hash homing algorithm. The jobsetted_server_spec must be specified when using this TriggerAction.",
            "Send the trigger to a Tasks server that implements the TriggerHandlerService. Dispatched via GSLB target specified by FLAGS_triggers_tasks_server_address.",
            "Send the trigger to a SmartMail Publisher server that implements the TriggerHandlerService. Dispatched via GSLB target specified by FLAGS_triggers_publisher_server_address.",
            "Send the trigger to an Observer server that implements the TriggerHandlerService. Dispatched via GSLB target specified by FLAGS_triggers_observer_server_address.",
            "Push a set of history records to PDH.",
            "Send the trigger to the stubby dispatcher, which routes the RPC using the value of Trigger.dispatch_id as the RoutingInfo.extension_tag field. Dispatched via the GSLB target specified by FLAGS_triggers_stubby_dispatcher_address.",
            "Backfills a set of records from an account and pushes them to PDH.",
            "Move messages from ^deleted to ^all. This trigger will only undelete messages that were deleted before the fire time of the trigger. Also, messages whose blobs are already deleted will not be undeleted. This is an account trigger.",
            "This trigger will undelete messages that were ^deleted arbitrarily long in the past and a trash label will be applied to these undeleted messages. This is an account trigger that will be written when the Vault admin enables end user access for the Vault customer. This trigger shares its implementation with the ACTION_MESSAGE_UNDELETE trigger.",
            "Send the trigger to a groups server that implements the TriggerHandlerService. Dispatched via GSLB target specified by FLAGS_triggers_groups_server_address.",
            "This trigger will be executed once per newly created account. It will be created as part of the first transaction written to the account. The trigger can also be written as part of an SVF in case we want to re-initialize every account.",
            "Send the trigger to an Observer server that implements the TriggerHandlerService for wipeout purpose. Dispatched via GSLB target specified by FLAGS_triggers_observer_server_address. It behaves differently from the invoke observer trigger (ACTION_INVOKE_OBSERVER) and should be batched separately. Tingle always fires this kind of action trigger for ^deleted messages.",
            "Begins the message expunge similar to ACTION_MESSAGE_EXPUNGE but doesn't check if the message was deleted at least 30 days back. To be used ONLY for service removal. See go/gmail-service-removal for more details.",
            "Sends RPC to everclear for the message expunge.",
            "Send the trigger to the S/MIME certificate issuer server. Dispatched via the GSLB target specified by FLAGS_triggers_smime_certificate_issuer_server_address.",
            "The retention trigger that will be written to implement Groups retention.",
            "Dispatches the permanent backup trigger to Satellite through Stubby dispatcher.",
            "Process the debug log trigger by adding message body before dispatching to the Caribou Server through Stubby Dispatcher.",
            "This trigger deletes expired temporary preferences. See go/tingle-temp-prefs for more details.",
            "Similar to ACTION_QUERY_RETENTION but uses the MessageRetention policies to trash/delete the messages: cs/caribou/base/lib/proto/data_retention.proto .",
            "This trigger deletes expired HistoryRecords. See go/history-record-cleanup for more details.",
            "This trigger relabels messages asynchronously. See go/fusebox-bulk-api for more details.",
            "Dispatches the image processing trigger to Satellite through Stubby dispatcher. See go/gmail-photo-sharing for details.",
            "Trigger for executing comparison logic between the output of ApplyDataRetention idle task and CaribouDataRetention trigger.",
            "Trigger for backfill relevancy score. see go/gmail-relevancy-scoring-write for detail.",
            "Trigger to backfill gaps left by pdh pushed via push notification. see go/tingle-moonshine-push-v2",
            "Begins the message expunge similar to ACTION_MESSAGE_EXPUNGE but fires within one day. To be used ONLY for auto save drafts. See go/faster-auto-save-draft-deletion for more details."
          ],
          "enum": [
            "ACTION_NONE",
            "ACTION_DELETE",
            "ACTION_CREATE_NEW_TRIGGER",
            "ACTION_MESSAGE_EXPUNGE",
            "ACTION_RETENTION_POLICY_UPDATE",
            "ACTION_UPDATE_ICEBOX_MODEL",
            "ACTION_INVOKE_CS",
            "ACTION_INVOKE_STRATUS",
            "ACTION_PDH_EXPUNGE",
            "ACTION_QUERY_RETENTION",
            "ACTION_INVOKE_JOBSETTED_PRIMARY",
            "ACTION_INVOKE_TASKS_SERVER",
            "ACTION_INVOKE_PUBLISHER",
            "ACTION_INVOKE_OBSERVER",
            "ACTION_PUSH_HISTORY_TO_PDH",
            "ACTION_INVOKE_STUBBY_DISPATCHER",
            "ACTION_PDH_BACKFILL",
            "ACTION_MESSAGE_UNDELETE",
            "ACTION_VAULT_END_USER_ACCESS",
            "ACTION_INVOKE_GROUPS",
            "ACTION_ACCOUNT_INITIALIZATION",
            "ACTION_INVOKE_OBSERVER_WIPEOUT",
            "ACTION_SERVICE_REMOVED_MESSAGE_EXPUNGE",
            "ACTION_EVERCLEAR_EXPUNGE",
            "ACTION_INVOKE_SMIME_CERTIFICATE_ISSUER",
            "ACTION_GROUPS_QUERY_RETENTION",
            "ACTION_INVOKE_SATELLITE_BACKUP",
            "ACTION_INVOKE_DEBUG_LOG",
            "ACTION_PREFERENCE_CLEANUP",
            "ACTION_CARIBOU_DATA_RETENTION",
            "ACTION_HISTORY_CLEANUP",
            "ACTION_ITEM_BULK_RELABEL",
            "ACTION_INVOKE_SATELLITE_IMAGE_PROCESSING",
            "ACTION_CARIBOU_DATA_RETENTION_DIFF",
            "ACTION_RELEVANCY_SCORE_BACKFILL",
            "ACTION_PDH_PUSH_NOTIFICATION_BACKFILL",
            "ACTION_AUTO_SAVE_DRAFT_EXPUNGE"
          ]
        }
      },
      "id": "TriggerAction",
      "type": "object"
    },
    "Reference": {
      "id": "Reference",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "LINT.ThenChange(//depot/google3/storage/slice/production/gmail/ user_data_tables.pi)"
        },
        "contentType": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "key": {
          "description": "LINT.IfChange",
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "blobId": {
          "type": "string"
        }
      },
      "description": "All fields in this proto are now columns in spanner see google3/storage/slice/production/gmail/user_data_tables.pi for documentation."
    },
    "Id": {
      "id": "Id",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local identifier for the DirEntry (local to the creator's account). local_id + app_name is guaranteed to be unique within the creator account, but not across all User accounts. The string is case sensitive. Ignore if name_space==GAIA. NB For name_space==COSMO, all local_id's should be defined in google3/java/com/google/storage/cosmo/server/api/SpecialObjectIds.java as they have a special predefined meaning. See cosmo.client.CosmoIdFactory.createObjectId(long,String) for IMPORTANT recommendations when generating IDs."
        },
        "nameSpace": {
          "type": "integer",
          "format": "int32",
          "description": "The name space in which this id is unique (typically the application that created it). Values should be drawn from the above enum, but for experimentation, use values greater than 1000."
        },
        "creatorUserId": {
          "format": "uint64",
          "description": "The User account in which the DirEntry was originally created. If name_space==GAIA, then it's the gaia_id of the user this id is referring to.",
          "type": "string"
        }
      },
      "description": "Identifies a particular object, including both Users and DirEntries. This Id is unique across the entire server instance, such as the production or qa instance.",
      "type": "object"
    },
    "Provenance": {
      "type": "object",
      "id": "Provenance",
      "description": "This field records where the ItemScope was retrieved, if it was created via a web fetch.",
      "properties": {
        "inputUrl": {
          "description": "The url originally passed in the PRS request, which should be used to re-discover the content. Note that this URL may be a forwarding service or link shortener (bit.ly), so it should not be assumed to be canonical, but should be used for navigation back to the original source of the itemscope.",
          "type": "string"
        },
        "retrievedTimestampMsec": {
          "type": "string",
          "format": "uint64",
          "description": "The server retrieved timestamp (in msec)."
        },
        "retrievedUrl": {
          "type": "string",
          "description": "The final URL that was the actual source of the itemscope, after any redirects."
        },
        "annotationBlob": {
          "description": "Annotation blob from Annotation Service.",
          "format": "byte",
          "type": "string"
        },
        "itemtype": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Contains exact types as parsed, whether or not we recognized that type at parse time. If an itemscope is created by merging SchemaOrg markup and open graph markup then the first itemtype would be schemaorg type, the second would be open graph and so on. example: http://schema.org/VideoObject, og:video.movie Plain text; usually a URL"
        },
        "canonicalUrl": {
          "type": "string",
          "description": "Canonical url of the retrieved_url, if one was resolved during retrieval, for example, if a rel=\"canonical\" link tag was provided in the retrieved web page."
        }
      }
    },
    "VoicePhoneNumber": {
      "id": "VoicePhoneNumber",
      "description": "Represents both long and short phone number that can be called or texted. Short telephone numbers are used to reach local services. Short numbers and their purpose differ from country to country. These numbers in US are in the form of N11 which is a three-digit abbreviated dialing telephone number.",
      "properties": {
        "i18nData": {
          "description": "Additional data that could be added using the libphonenumber API.",
          "$ref": "VoicePhoneNumberI18nData"
        },
        "e164": {
          "type": "string",
          "description": "E.164 formatted full phone number with leading +. This field also represents encoded form of short telephone numbers in E.164 format. e.g. \"911\" is encoded as \"+1911\"."
        }
      },
      "type": "object"
    },
    "RepositoryError": {
      "description": "Errors when the connector is communicating to the source repository.",
      "properties": {
        "type": {
          "enum": [
            "UNKNOWN",
            "NETWORK_ERROR",
            "DNS_ERROR",
            "CONNECTION_ERROR",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "SERVER_ERROR",
            "QUOTA_EXCEEDED",
            "SERVICE_UNAVAILABLE",
            "CLIENT_ERROR"
          ],
          "type": "string",
          "description": "The type of error.",
          "enumDescriptions": [
            "Unknown error.",
            "Unknown or unreachable host.",
            "DNS problem, such as the DNS server is not responding.",
            "Cannot connect to the repository server.",
            "Failed authentication due to incorrect credentials.",
            "Service account is not authorized for the repository.",
            "Repository server error.",
            "Quota exceeded.",
            "Server temporarily unavailable.",
            "Client-related error, such as an invalid request from the connector to the repository server."
          ]
        },
        "errorMessage": {
          "type": "string",
          "description": "Message that describes the error. The maximum allowable length of the message is 8192 characters."
        },
        "httpStatusCode": {
          "format": "int32",
          "type": "integer",
          "description": "Error codes. Matches the definition of HTTP status codes."
        }
      },
      "type": "object",
      "id": "RepositoryError"
    },
    "VPCSettings": {
      "id": "VPCSettings",
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "description": "The resource name of the GCP Project to be used for VPC SC policy check. VPC security settings on this project will be honored for Cloud Search APIs after project_name has been updated through CustomerService. Format: projects/{project_id}"
        }
      }
    },
    "ResultDebugInfo": {
      "properties": {
        "formattedDebugInfo": {
          "description": "General debug info formatted for display.",
          "type": "string"
        }
      },
      "id": "ResultDebugInfo",
      "description": "Debugging information about the result.",
      "type": "object"
    },
    "ItemThread": {
      "properties": {
        "threadKey": {
          "description": "The MultiKey that identifies this thread. This value never changes, i.e. remains constant across modifications to the thread, including addition, relabeling, or deletion of contained Items. As such, the thread key may not necessarily correspond to the key of an contained Item. Legacy note: The \"server_id\" of the thread key is equivalent to the notion of the \"original thread id\" in the CSS API.",
          "$ref": "MultiKey"
        },
        "item": {
          "type": "array",
          "description": "The Items in the ItemThread. In the context of a search, the list of Items may be a subset of those that logically belong to the ItemThread. The details of which items are included are available in the ItemThreadView returned in the overall rpc response.",
          "items": {
            "$ref": "FuseboxItem"
          }
        },
        "clusterInfo": {
          "$ref": "ClusterInfo"
        },
        "snippet": {
          "type": "string",
          "description": "A snippet summarizing the thread. This field is only populated for searches."
        },
        "version": {
          "type": "string",
          "description": "The latest history operation id that resulted in a mutation of any item in the thread.",
          "format": "uint64"
        },
        "threadLocator": {
          "description": "A base64 encoded and encrypted string generated from the Gaia Id and the thread id. Used to generate the permalink for this thread, exposed from Gmail API.",
          "type": "string"
        },
        "topicState": {
          "$ref": "TopicState",
          "description": "Next available id : 10"
        },
        "matchInfo": {
          "$ref": "FuseboxItemThreadMatchInfo"
        },
        "lastItemId": {
          "description": "The server id of the last item returned in the ItemThread. This can be deduced from the [item] list but is provided for convenience. When manually constructing an ItemThreadViewSpec to perform operations on the ItemThread, this value can be used as the [high_item_id_watermark].",
          "type": "string",
          "format": "uint64"
        }
      },
      "id": "ItemThread",
      "type": "object",
      "description": "An ItemThread is an ordered list of Items. An ItemThread corresponds to a \"conversation\" in the context of mail. An Item belongs to exactly one ItemThread."
    },
    "AppsDynamiteSharedBackendUploadMetadata": {
      "type": "object",
      "id": "AppsDynamiteSharedBackendUploadMetadata",
      "properties": {
        "groupId": {
          "$ref": "GroupId",
          "description": "GroupId to which this attachment is uploaded."
        },
        "blobPath": {
          "type": "string",
          "description": "Blobstore path for the uploaded attachment"
        },
        "contentName": {
          "description": "The original file name for the content, not the full path.",
          "type": "string"
        },
        "dlpScanOutcome": {
          "description": "The results of the Data Loss Prevention (DLP) scan of the attachment. DEPRECATED: use dlp_scan_summary instead.",
          "enumDescriptions": [
            "",
            "This means no violation is detected on the given message/attachment.",
            "Violation is detected. The message/attachment will be blocked (or deleted if this happens in failure recovery), the user will be warned, and the violation will be logged to BIP.",
            "Violation is detected. The user will be warned, and the violation will be logged to BIP.",
            "Violation is detected and will be logged to BIP (no user-facing action performed).",
            "Rule fetch and evaluation were attempted but an exception occurred.",
            "Rule fetch was attempted but failed, so rule evaluation could not be performed.",
            "Rule fetch and evaluation were attempted but the scanning timed out.",
            "Rule fetch completed and evaluation were attempted, but all of the rules failed to be evaluated.",
            "An IllegalStateException is thrown when executing DLP on attachments. This could happen if the space row is missing.",
            "Rule fetch and evaluation is skipped because DLP is not enabled for the user.",
            "Rule fetch and evaluation are skipped because the user sending message is consumer.",
            "Rule fetch and evaluation are skipped because the user sending message is a non-human user (i.e. a bot).",
            "Rule fetch and evaluation are skipped because there is no message to scan. Deprecated: this should not happen since there must be message or attachment for DLP scan.",
            "Rule fetch and evaluation are skipped because the user has acknowledged the warning on the message that triggered the Warn violation and sent the message anyway.",
            "Scanning was skipped because the message originated from Interop or Babel.",
            "Scanning was skipped because the message was sent while the space is in migration mode. See go/migration-mode for details.",
            "Rule fetch happened, but rule evaluation is skipped because no rules were found.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given action params.",
            "Rule fetch happened, but rule evaluation is skipped because none of the rules are applicable to the given trigger.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned permanent failure while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because Changeling returned an empty response while converting the attachment to text.",
            "Rule fetch happened, but rule evaluation is skipped because file type is unsupported.",
            "Rules were fetched but some evaluations failed. No violation was found in the rules that were successfully evaluated.",
            "Rules were fetched but some evaluations failed. A blocking violation was found in the rules that were successfully evaluated. The message/attachment will be blocked, the user will be notified, and the violation will be logged to BIP. A blocking violation takes precedence over all other violation types.",
            "Rules were fetched but some evaluations failed. A warn violation was found in the rules that were successfully evaluated. The user will be warned, and the violation will be logged to BIP.",
            "Rules were fetched but some evaluations failed. An audit-only violation was found in the rules that were successfully evaluated. The violation will be logged to BIP (no user-facing action performed)."
          ],
          "type": "string",
          "enum": [
            "SCAN_UNKNOWN_OUTCOME",
            "SCAN_SUCCEEDED_NO_VIOLATION",
            "SCAN_SUCCEEDED_BLOCK",
            "SCAN_SUCCEEDED_WARN",
            "SCAN_SUCCEEDED_AUDIT_ONLY",
            "SCAN_FAILURE_EXCEPTION",
            "SCAN_FAILURE_RULE_FETCH_FAILED",
            "SCAN_FAILURE_TIMEOUT",
            "SCAN_FAILURE_ALL_RULES_FAILED",
            "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS",
            "SCAN_SKIPPED_EXPERIMENT_DISABLED",
            "SCAN_SKIPPED_CONSUMER",
            "SCAN_SKIPPED_NON_HUMAN_USER",
            "SCAN_SKIPPED_NO_MESSAGE",
            "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING",
            "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN",
            "SCAN_SKIPPED_MESSAGE_SENT_DURING_SPACE_MIGRATION",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS",
            "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR",
            "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE",
            "SCAN_RULE_EVALUATION_SKIPPED_UNSUPPORTED_FILE_TYPE",
            "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION",
            "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK",
            "SCAN_SUCCEEDED_WITH_FAILURES_WARN",
            "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
          ]
        },
        "contentSize": {
          "type": "string",
          "format": "int64",
          "description": "Scotty reported content size by default. http://google3/uploader/agent/scotty_agent.proto?l=101&rcl=140889785"
        },
        "dlpScanSummary": {
          "description": "Summary of a Data Loss Prevention (DLP) scan of the attachment. Attachments are evaluated in the backend when they are uploaded.",
          "$ref": "DlpScanSummary"
        },
        "videoId": {
          "description": "VideoID of the video attachments. This ID shall meets the Youtube ID format of 16 hex characters. For example, '4c14b8825af6059b' is a valid ID.",
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "description": "Type is from Scotty's best_guess by default: http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785"
        },
        "uploadTimestampUsec": {
          "format": "int64",
          "type": "string",
          "description": "Timestamp of when user finished uploading the content."
        },
        "quoteReplyMessageId": {
          "$ref": "MessageId",
          "description": "The message id of a quote reply referencing this attachment. When present, this attachment has been quoted in a reply message. Normally, the attachment is fetched through the message id in the blob_path, but in the case of a quote reply, the blob_path would contain the quoted message id. Thus this message id field is needed to fetch the quote reply message instead. This field is conditionally populated at read time for quotes and never persisted in storage. See go/message-quoting-attachments for more context."
        },
        "isClientSideTranscodedVideo": {
          "type": "boolean",
          "description": "If the uploaded file is a video that has been transcoded on the client side Next tag: 18"
        },
        "uploadIp": {
          "type": "string",
          "description": "User IP address at upload time. Ex. \"123.1.2.3\". Used by Ares abuse scanning."
        },
        "videoThumbnailBlobId": {
          "description": "Full Blobstore ID for the video thumbnail.",
          "type": "string"
        },
        "sha256": {
          "description": "The SHA256 hash of the attachment bytes.",
          "format": "byte",
          "type": "string"
        },
        "virusScanResult": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "The document violates Google's policy for executables and archives."
          ],
          "type": "string",
          "description": "Result for a virus scan.",
          "enum": [
            "UNKNOWN_VIRUS_SCAN_RESULT",
            "CLEAN",
            "INFECTED",
            "ERROR",
            "POLICY_VIOLATION"
          ]
        },
        "originalDimension": {
          "$ref": "AppsDynamiteSharedDimension",
          "description": "Original dimension of the content. Only set for image attachments."
        }
      },
      "description": "Metadata used only in Dynamite backend for uploaded attachments."
    },
    "RecordingInfo": {
      "description": "This message is deprecated, please use RecordingSessionInfo instead. Information about recording in the current conference.",
      "properties": {
        "producerDeviceId": {
          "description": "The device resource name of the producer device for the currently active recording. Note that, after the producer drops/leaves the conference, this field will be cleaned up by the server after a delay.",
          "type": "string"
        },
        "ownerDisplayName": {
          "description": "The display name of the owner of the recording output. Email notifications about uploaded recordings will also be sent to this owner.",
          "type": "string"
        },
        "recordingApplicationType": {
          "type": "string",
          "description": "The application type of the current active recording. `RECORDING_APPLICATION_TYPE_UNSPECIFIED` if `recording_status` is inactive.",
          "enum": [
            "RECORDING_APPLICATION_TYPE_UNSPECIFIED",
            "RECORDING",
            "GLIVE_STREAM",
            "BROADCAST"
          ],
          "enumDescriptions": [
            "This is never used.",
            "A meeting recording saved to a video file in Google Drive.",
            "A *Google Live* managed stream.",
            "A meeting broadcast."
          ]
        },
        "recordingStatus": {
          "type": "string",
          "enum": [
            "RECORDING_UNSPECIFIED",
            "RECORDING_INACTIVE",
            "RECORDING_STARTING",
            "RECORDING_STARTED"
          ],
          "enumDescriptions": [
            "This value is never used.",
            "The conference is not being recorded. This can mean either that no recording has been started, or that a previous recording has stopped.",
            "Recording is about to begin. The status will be updated to RECORDING_STARTED when the recording actually starts, which happens when all the backend plumbing is set up.",
            "The recording is started. Any media sent to the conference may be included in the resulting recording."
          ],
          "description": "The current status of the recording. This can be used by clients to show a recording dot or similar to indicated to the user that a recording is taking place."
        },
        "latestRecordingEvent": {
          "$ref": "RecordingEvent",
          "description": "The latest recording event. This can be used by clients to help explain what is going on, why recording stopped, etc. This will always be set if there is or was an active recording, which means there can be latest event when recording is INACTIVE."
        },
        "recordingId": {
          "type": "string",
          "description": "An identifier for the current recording, if any. This is returned whenever recording_status is either `RECORDING_STARTING` or `RECORDING_STARTED`."
        }
      },
      "id": "RecordingInfo",
      "type": "object"
    },
    "ActionParameter": {
      "id": "ActionParameter",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "description": "List of string parameters that developers can specify when the above action method (in apps script) is invoked. An example use case is for 3 snooze buttons: snooze now, snooze 1 day, snooze next week. Developers can have action method = snooze() and pass the snooze type and snooze time in list of string parameters."
    },
    "WrappedResourceKey": {
      "type": "object",
      "properties": {
        "resourceKey": {
          "type": "string",
          "description": "Resource key of the Drive item. This field should be unset if, depending on the context, the item does not have a resource key, or if none was specified. This must never be logged."
        }
      },
      "id": "WrappedResourceKey",
      "description": "A wrapper around a raw resource key. The secret should never be logged, and this proto annotates those secret fields to ensure that they are not. Clients are encouraged to use this proto rather than defining their own, to ensure that secrets are correctly annotated."
    },
    "AppsDynamiteSharedChatItem": {
      "description": "Next Id: 5",
      "type": "object",
      "id": "AppsDynamiteSharedChatItem",
      "properties": {
        "activityInfo": {
          "type": "array",
          "description": "Information needed to render the specific type of feed item.",
          "items": {
            "$ref": "AppsDynamiteSharedChatItemActivityInfo"
          }
        },
        "messageInfo": {
          "description": "Additional information about the original chat message that isn't captured in the top-level message proto.",
          "$ref": "AppsDynamiteSharedMessageInfo"
        },
        "groupInfo": {
          "description": "Only populated on read path and should not be persisted in storage.",
          "$ref": "AppsDynamiteSharedChatItemGroupInfo"
        }
      }
    },
    "Section": {
      "properties": {
        "collapsable": {
          "description": "Indicating whether this section is collapsable. If a section is collapsable, the description must be given.",
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "description": "The header of the section, text formatted supported."
        },
        "numUncollapsableWidgets": {
          "type": "integer",
          "format": "int32",
          "description": "The number of uncollapsable widgets. For example, when a section contains 5 widgets and the num_uncollapsable_widget are set to be 2, The first 2 widgets will always shown and the last 3 is collapsed as default. Only when collapsable is set to be true, the num_uncollapsable_widget will be taken into account."
        },
        "widgets": {
          "type": "array",
          "description": "A section must contain at least 1 widget.",
          "items": {
            "$ref": "WidgetMarkup"
          }
        }
      },
      "description": "Sections are separated by a line divider. They contain a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, AddOns have a narrow fixed width, so there is currently no need for layout properties (e.g. float).",
      "type": "object",
      "id": "Section"
    },
    "EditorClientActionMarkup": {
      "properties": {
        "requestFileScopeForActiveDocument": {
          "$ref": "RequestFileScopeForActiveDocument"
        }
      },
      "type": "object",
      "id": "EditorClientActionMarkup"
    },
    "AppsDynamiteSharedTasksAnnotationDataAssigneeChange": {
      "properties": {
        "oldAssignee": {
          "description": "Obfuscated user ID of previous assignee. Not set if the task was originally not assigned.",
          "$ref": "UserId"
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationDataAssigneeChange"
    },
    "AppsDynamiteSharedRetentionSettings": {
      "description": "The settings of retention period of a message or topic.",
      "properties": {
        "state": {
          "enumDescriptions": [
            "",
            "The message/topic should be kept permanently.",
            "The message/topic should be kept with a 24-hour TTL."
          ],
          "type": "string",
          "description": "The retention state.",
          "enum": [
            "UNKNOWN_RETENTION_STATE",
            "PERMANENT",
            "EPHEMERAL_ONE_DAY"
          ]
        },
        "expiryTimestamp": {
          "type": "string",
          "description": "The timestamp after which the message/topic should be removed, in microseconds since the epoch, when state == EPHEMERAL_ONE_DAY. The value should not be set in other cases.",
          "format": "int64"
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedRetentionSettings"
    },
    "Photo": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the photo."
        }
      },
      "description": "A person's photo.",
      "type": "object",
      "id": "Photo"
    },
    "SlashCommandMetadata": {
      "description": "Annotation metadata for slash commands (/).",
      "id": "SlashCommandMetadata",
      "type": "object",
      "properties": {
        "commandId": {
          "format": "int64",
          "description": "Unique id for the slash command.",
          "type": "string"
        },
        "id": {
          "$ref": "UserId",
          "description": "ID of the bot which owns the slash command."
        },
        "triggersDialog": {
          "description": "Whether or not this slash command should trigger a dialog.",
          "type": "boolean"
        },
        "type": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "If a bot is added by a Slash Command, it means the bot was invoked by the user but hasn't yet been added to the group. Attaching an ADD annotation both add and invoke the bot.",
            "",
            "Server-generated slash command metadata, for clients to strikethrough."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "ADD",
            "INVOKE",
            "FAILED_TO_ADD"
          ],
          "type": "string"
        },
        "argumentsHint": {
          "description": "Hint string for the arguments expected by the slash command.",
          "type": "string"
        },
        "commandName": {
          "description": "Name of the slash command.",
          "type": "string"
        }
      }
    },
    "UserMentionData": {
      "id": "UserMentionData",
      "properties": {
        "user": {
          "description": "If the principal is backed by a gaia id, DO NOT use this field. Use user_gaia_id/user_id fields instead.",
          "$ref": "PrincipalProto"
        },
        "userId": {
          "type": "string",
          "description": "An obfuscated gaia ID:"
        },
        "userGaiaId": {
          "format": "int64",
          "type": "string",
          "description": "An unobfuscated gaia ID:"
        },
        "email": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "Person metadata, for USER_MENTION segments. Should always contain at least one of user_gaia_id, user_id, email or user. The exact set of populated fields may differ depending on the context and the level in the serving stack; for example, emails will be elided on the viewing path. But as a general rule, a proto having any one of the four is valid, subject to the standard constraints of the applied annotations -- that is, communication between servers and clients will ignore jspb.ignore fields, and communication between servers and other servers (or between servers and storage) will ignore client_only fields. For more on the annotations, see the comments in social/common/segment_annotations.proto"
    },
    "AppsDynamiteStorageBorderStyle": {
      "type": "object",
      "properties": {
        "cornerRadius": {
          "description": "The corner radius for the border.",
          "type": "integer",
          "format": "int32"
        },
        "strokeColor": {
          "$ref": "Color",
          "description": "The colors to use when the type is `BORDER_TYPE_STROKE`."
        },
        "type": {
          "type": "string",
          "enum": [
            "BORDER_TYPE_UNSPECIFIED",
            "NO_BORDER",
            "STROKE"
          ],
          "description": "The border type.",
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ]
        }
      },
      "id": "AppsDynamiteStorageBorderStyle",
      "description": "Represents the complete border style applied to widgets."
    },
    "AppsDynamiteSharedAssistantFeedbackContext": {
      "type": "object",
      "id": "AppsDynamiteSharedAssistantFeedbackContext",
      "properties": {
        "feedbackChips": {
          "items": {
            "$ref": "AppsDynamiteSharedAssistantFeedbackContextFeedbackChip"
          },
          "type": "array",
          "description": "Specifies a list of feedback chips to show"
        },
        "thumbsFeedback": {
          "enumDescriptions": [
            "Unspecified thumbs state",
            "Thumbs are not selected",
            "Thumbs up selected",
            "Thumbs down selected"
          ],
          "enum": [
            "THUMBS_FEEDBACK_UNSPECIFIED",
            "NONE_SELECTED",
            "UP",
            "DOWN"
          ],
          "type": "string",
          "description": "Whether the thumbs feedback is provided"
        }
      },
      "description": "Data needed to render feedback on the Assistant card"
    },
    "SupportUrls": {
      "properties": {
        "privacyPolicyUrl": {
          "type": "string",
          "description": "Link to the privacy policy webpage for the bot. May be empty."
        },
        "gwmUrl": {
          "type": "string",
          "description": "Link to GWM page of the app. May be empty."
        },
        "deletionPolicyUrl": {
          "description": "Link to the deletion policy webpage for the bot. Configured by Pantheon, may be empty.",
          "type": "string"
        },
        "tosUrl": {
          "description": "Link to the terms of service webpage for the bot. May be empty.",
          "type": "string"
        },
        "adminConfigUrl": {
          "description": "Link to the admin configuration webpage for the bot. Configured by Pantheon, may be empty.",
          "type": "string"
        },
        "supportUrl": {
          "description": "Link to the support webpage for the developer of the bot. May be empty.",
          "type": "string"
        },
        "setupUrl": {
          "description": "Link to the setup webpage for the bot. Configured by Pantheon, may be empty.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "SupportUrls",
      "description": "Urls with additional bot related information."
    },
    "StructuredResult": {
      "id": "StructuredResult",
      "description": "Structured results that are returned as part of search request.",
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "Representation of a person"
        }
      }
    },
    "Filter": {
      "type": "object",
      "id": "Filter",
      "properties": {
        "valueFilter": {
          "$ref": "ValueFilter"
        },
        "compositeFilter": {
          "$ref": "CompositeFilter"
        }
      },
      "description": "A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND."
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup": {
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup",
      "properties": {
        "meetingCode": {
          "type": "string",
          "description": "A meeting code for accessing the conference. Maximum 128 characters long."
        },
        "features": {
          "type": "array",
          "items": {
            "enumDescriptions": [
              "Unknown feature.",
              "Applies to `PHONE` entry point. A call to a toll number is charged to the calling party. A number can't be toll and toll-free at the same time.",
              "Applies to `PHONE` entry point. For the calling party, a call to a toll-free number is free of charge. A number can't be toll and toll-free at the same time."
            ],
            "type": "string",
            "enum": [
              "UNKNOWN_FEATURE",
              "TOLL",
              "TOLL_FREE"
            ]
          },
          "description": "Features of the entry point, such as being toll or toll-free. One entry point can have multiple features."
        },
        "pin": {
          "description": "A PIN for accessing the conference. Maximum 128 characters long.",
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "The label of the entry point to display to the user. Maximum 512 characters long."
        },
        "type": {
          "enumDescriptions": [
            "Unknown conference type.",
            "A video conference.",
            "A phone conference.",
            "Used to provide a link to further conference joining information.",
            "A conference using [Session Initiation Protocol](https://en.wikipedia.org/wiki/Session_Initiation_Protocol)"
          ],
          "type": "string",
          "description": "The type of the entry point. Required.",
          "enum": [
            "UNKNOWN",
            "VIDEO",
            "PHONE",
            "MORE",
            "SIP"
          ]
        },
        "uri": {
          "description": "A URI for joining the conference. Supports tel: and http(s): and should be at most 1300 characters long. Required.",
          "type": "string"
        },
        "accessCode": {
          "type": "string",
          "description": "An access code for accessing the conference. Maximum 128 characters long."
        },
        "regionCode": {
          "description": "The CLDR/ISO 3166 region code for the country associated with this entry point. Applicable only to `Type.PHONE`.",
          "type": "string"
        },
        "passcode": {
          "description": "A passcode for accessing the conference. Maximum 128 characters long.",
          "type": "string"
        },
        "password": {
          "type": "string",
          "description": "A password for accessing the conference. Maximum 128 characters long."
        }
      },
      "type": "object",
      "description": "A way to join the conference."
    },
    "TextButton": {
      "id": "TextButton",
      "properties": {
        "onClick": {
          "$ref": "OnClick"
        },
        "disabled": {
          "type": "boolean"
        },
        "altText": {
          "description": "The alternative text used for accessibility Next field number: 7.",
          "type": "string"
        },
        "style": {
          "enum": [
            "UNSPECIFIED",
            "TEXT",
            "FILLED"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "Simple text button with ripple touch feedback.",
            "Button with solid background."
          ]
        },
        "backgroundColor": {
          "description": "Optional color of the button's background in RAISE mode. The default is the secondary color from addon's manifest.",
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Text color can be set via HTML markup."
        }
      },
      "type": "object"
    },
    "GaiaGroupProto": {
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int64",
          "type": "string"
        }
      },
      "id": "GaiaGroupProto"
    },
    "CapTokenHolderProto": {
      "properties": {
        "tokenHmacSha1Prefix": {
          "description": "The hash of the corresponding capability token. The value is defined to be identical to the one in acl.proto's CapTokenMetadata: 10-byte prefix of HMAC-SHA1 of the token. The HMAC key is the following fixed (non-secret) 512-bit value: 79b1c8f4 82baf523 b8a9ab4a e960f438 c45be041 11f1f222 e8a3f64d aeb05e3d c3576acc ec649194 aede422c 4e48e0d1 ff21234a a6ed6b49 a7fa592e efd7bba3",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "CapTokenHolderProto",
      "description": "Represents a principal which possesses a particular secret string whose cryptographic hash is specified here. CapTokens (\"Capability Tokens\") are used in ACLProto. It's expected that ACLs with CapTokenHolders will strongly enforce them by Keystore-wrapping crypto keys for the corresponding CapTokens.",
      "type": "object"
    },
    "PollItemsRequest": {
      "type": "object",
      "id": "PollItemsRequest",
      "properties": {
        "limit": {
          "format": "int32",
          "description": "Maximum number of items to return. The maximum value is 100 and the default value is 20.",
          "type": "integer"
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "statusCodes": {
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
              "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
              "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
              "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
              "API has accepted the up-to-date data of this item."
            ],
            "enum": [
              "CODE_UNSPECIFIED",
              "ERROR",
              "MODIFIED",
              "NEW_ITEM",
              "ACCEPTED"
            ]
          },
          "type": "array",
          "description": "Limit the items polled to the ones with these statuses."
        },
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        },
        "queue": {
          "type": "string",
          "description": "Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters."
        }
      }
    },
    "OtrChatMessageEvent": {
      "type": "object",
      "id": "OtrChatMessageEvent",
      "properties": {
        "messageOtrStatus": {
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ],
          "type": "string",
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ]
        },
        "expirationTimestampUsec": {
          "format": "int64",
          "type": "string"
        },
        "kansasVersionInfo": {
          "type": "string"
        },
        "kansasRowId": {
          "type": "string"
        }
      }
    },
    "DatePropertyOptions": {
      "properties": {
        "operatorOptions": {
          "$ref": "DateOperatorOptions",
          "description": "If set, describes how the date should be used as a search operator."
        }
      },
      "description": "The options for date properties.",
      "id": "DatePropertyOptions",
      "type": "object"
    },
    "FormAction": {
      "type": "object",
      "id": "FormAction",
      "properties": {
        "persistValues": {
          "type": "boolean",
          "description": "Indicates whether form values persist after the action. When false, the Apps Script is responsible for persisting values, by setting any form field values using the formInputs in the event. Disabling this behavior can be used if the add-on needs the ability to clear form fields, for example, as with persistent values, there is no means for clearing existing values. When disabling persistent values, it is strongly recommended that the add-on use LoadIndicator.SPINNER for all events, as this locks the UI to ensure no changes are made by the user while the action is being processed. When using LoadIndicator.NONE for any of the actions, persistent values are recommended, as it ensures that any changes made by the user after form / on change actions are sent to the server are not overwritten by the response. Persistent values disabled by default. While we recommend persistent values be used in the typical use case, we do not enable by default, as doing so would change the current behavior of existing add-ons in prod."
        },
        "actionMethodName": {
          "description": "Apps script function that should be invoked in the developer's apps script when the containing element is clicked/activated.",
          "type": "string"
        },
        "parameters": {
          "items": {
            "$ref": "ActionParameter"
          },
          "type": "array"
        },
        "loadIndicator": {
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "SPINNER",
            "NONE"
          ]
        }
      }
    },
    "HistoryRecord": {
      "properties": {
        "prefUpdate": {
          "$ref": "PrefUpdate"
        },
        "type": {
          "enum": [
            "UNKNOWN",
            "INTERNAL",
            "MESSAGE_ADDED",
            "MESSAGE_DELETED",
            "LABEL_ADDED",
            "LABEL_REMOVED",
            "ATTRIBUTE_SET",
            "ATTRIBUTE_REMOVED",
            "THREAD_KEY_SET",
            "LABEL_CREATED",
            "LABEL_DELETED",
            "LABEL_RENAMED",
            "LABEL_UPDATED",
            "PREF_WRITTEN",
            "PREF_DELETED",
            "FILTER_CREATED",
            "FILTER_DELETED",
            "IMAP_UIDS_REASSIGN",
            "TOPIC_STATE_UPDATED",
            "TXN_DEBUG_INFO"
          ],
          "enumDescriptions": [
            "Represents a type that is deprecated or not known by the executing code. Even if Fusebox sends a HistoryRecord with Type not UNKNOWN, it may send Type values that are not yet defined on the client-side, in which case they will be appear as Type.UNKNOWN on the client.",
            "Represents a change internal to the Fusebox. HistoryRecords for Fusebox internal changes contribute to the user's version, which is defined as the latest HistoryRecord's record_id. INTERNAL HistoryRecords exist to allow a client to update its notion of the latest record_id it has processed, but do not necessarily contain any other information.",
            "ThreadUpdate:",
            "",
            "",
            "",
            "",
            "",
            "",
            "LabelUpdate:",
            "",
            "",
            "",
            "PrefUpdate:",
            "",
            "FilterUpdate:",
            "",
            "IMAP",
            "EAI",
            "TXN_DEBUG_INFO"
          ],
          "type": "string"
        },
        "filterUpdate": {
          "$ref": "FilterUpdate"
        },
        "imapUpdate": {
          "$ref": "ImapUpdate"
        },
        "threadUpdate": {
          "$ref": "ThreadUpdate"
        },
        "labelUpdate": {
          "$ref": "LabelUpdate"
        },
        "clientContext": {
          "$ref": "ClientContext",
          "description": "This will almost always be set, but there are corner cases in which the information is not available, and thus applications must handle its absence appropriately."
        },
        "transactionContext": {
          "$ref": "TransactionContext",
          "description": "This will almost always be set, but there are corner cases in which the information is not available, and thus applications must handle its absence appropriately."
        },
        "txnDebugInfo": {
          "$ref": "TransactionDebugInfo"
        },
        "recordId": {
          "type": "string",
          "description": "Each HistoryRecord has a unique id. Ids are monotonically increasing, and not necessarily contiguous.",
          "format": "uint64"
        }
      },
      "id": "HistoryRecord",
      "type": "object"
    },
    "ErrorMessage": {
      "description": "Error message per source response.",
      "type": "object",
      "id": "ErrorMessage",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "source": {
          "$ref": "Source"
        }
      }
    },
    "AppsDynamiteSharedActivityFeedAnnotationData": {
      "properties": {
        "chatItem": {
          "$ref": "AppsDynamiteSharedChatItem"
        },
        "sharedUserInfo": {
          "description": "Only populated on read path and should not be persisted in storage.",
          "$ref": "UserInfo"
        },
        "activityFeedMessageId": {
          "description": "Unique id of the Activity Feed message used by clients to implement click-to-source. This is the same messageId as the top-level id field for the Activity Feed item.",
          "$ref": "MessageId"
        },
        "userInfo": {
          "description": "Use shared_user_info instead.",
          "$ref": "AppsDynamiteSharedActivityFeedAnnotationDataUserInfo"
        },
        "activityFeedMessageCreateTime": {
          "description": "Timestamp of when the Activity Feed message that contains this annotation was created. This is roughly when the activity happened, such as when a reaction happened, but will have at least some small delay, since the Activity Feed message is created asynchronously after. This timestamp should only be used for display when the activity create time is not available in the Chat UI, like the time of a reaction.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "Next Id: 7",
      "type": "object",
      "id": "AppsDynamiteSharedActivityFeedAnnotationData"
    },
    "AppsDynamiteStorageColumnsColumn": {
      "type": "object",
      "properties": {
        "horizontalAlignment": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified alignment.",
            "Alignment to the start position.",
            "Alignment to the center position.",
            "Alignment to the end position."
          ],
          "enum": [
            "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "description": "The horizontal alignment of the column."
        },
        "horizontalSizeStyle": {
          "description": "Specifies how the column content is sized horizontally.",
          "enum": [
            "HORIZONTAL_SIZE_STYLE_UNSPECIFIED",
            "FILL_AVAILABLE_SPACE",
            "FILL_MINIMUM_SPACE"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Fills up the available horizontal width. Default value if unspecified.",
            "Fills up the minimum horizontal width."
          ],
          "type": "string"
        },
        "widgets": {
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteStorageColumnsColumnWidgets"
          },
          "description": "LINT.ThenChange(//depot/google3/google/apps/card/v1/card.proto) Array of widgets included in the column."
        },
        "verticalAlignment": {
          "enum": [
            "VERTICAL_ALIGNMENT_UNSPECIFIED",
            "CENTER",
            "TOP",
            "BOTTOM"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Aligns the widget in the center of the column. Default value if unspecified.",
            "Aligns the widget at the top of the column.",
            "Aligns the widget at the bottom of the column."
          ],
          "type": "string",
          "description": "The vertical alignment of the column."
        }
      },
      "description": "Represents a Column that consists of widgets stacked vertically.",
      "id": "AppsDynamiteStorageColumnsColumn"
    },
    "ImapSessionContext": {
      "id": "ImapSessionContext",
      "type": "object",
      "properties": {
        "os": {
          "type": "string",
          "enum": [
            "UNKNOWN_OS",
            "ANDROID_OS",
            "IOS_OS",
            "BLACKBERRY_OS",
            "WIN_PHONE_OS",
            "FIRE_OS",
            "MAX_MOBILE_OS_VALUE",
            "WINDOWS_OS",
            "LINUX_OS",
            "MAC_OS",
            "CHROME_OS",
            "PLAYSTATION_OS",
            "XBOX_OS",
            "TIZEN_OS",
            "APPLE_TV_OS",
            "KAI_OS",
            "ANDROID_THINGS_OS",
            "CAST_OS",
            "STADIA_OS"
          ],
          "enumDescriptions": [
            "",
            "Mobile operating systems (1-99).",
            "",
            "",
            "",
            "Amazon Fire OS (for Kindle Fire devices or Fire TV).",
            "Tag for the maximum enum value that represents a mobile OS. Enum values (strictly) between UNKNOWN_OS and this value represent mobile OSes. This should never appear in real data.",
            "PC operating systems.",
            "",
            "",
            "",
            "The OS powering Playstation consoles. Ignores OS changes across console generations.",
            "The Windows-derived OS used on Xbox consoles.",
            "Tizen OS, popular in Samsung TVs, watches and more.",
            "Apple tvOS (powering the Apple TV).",
            "KaiOS, a fork from Firefox OS that is between a full smartphone and a feature phone. Notably, it supports the Google Assistant. go/kaiosama",
            "Android optimized for IoT devices. go/things",
            "Cast family devices, including Chromecast, Google Home, and third-party speaker with integrated Assistant.",
            "Stadia on Cast devices. This is not truly an OS, but it's a temporary setting since Stadia uses a different sign-in flow (and is revoked differently) from Cast. See http://go/stadia-in-google-account. Do not use without discussing with id-devices-eng@."
          ]
        },
        "possiblyTrimmedModel": {
          "$ref": "PossiblyTrimmedModel"
        },
        "deviceType": {
          "enumDescriptions": [
            "Unknown device type.",
            "PCs (incl. Macs). Desktops, laptops and various niche form factors that typically run desktop-class OSes (all-in-ones, HTPCs etc.).",
            "Primarily used for phones, but also set as default for OSes that are predominantly for phones (Android, iOS etc.) when we can't determine otherwise.",
            "Tablets.",
            "Mobile devices which are not phones, but are capable of storing and playing digital media such as audio, images, and video files. Example: iPod.",
            "Smart TVs which interact with Google products without an external additional device. Includes TV sets which run Android TV directly. Refers to actual TV screens, rather than connected boxes or dongles.",
            "Devices whose primary purpose is playing games. Examples: Xbox, Playstation.",
            "Add-on devices (i.e. devices which require connecting to another device, such as screens/TVs/speakers) whose primary purpose is media consumption (excludes physical TV screens). Examples: Chromecast, Roku, Apple TV, Nexus Player.",
            "Examples: Google Home, Amazon Echo.",
            "Examples: Google Home Display (Quartz/Manhattan/Jasper/Dragonglass), Amazon Echo Spot, Amazon Echo Show.",
            "Other connected home devices which do not fit in any of the above categories; that is, neither media- or gaming-focused, nor primarily a voice-enabled speaker.",
            "Wearable devices such as smartwatches.",
            "Google Glass.",
            "Examples: Android Auto (Embedded mode, not mirrored from phone).",
            "Standalone VR headsets, such as the Lenovo Mirage Solo. Does not include phone-based VR (such as Daydream View or Gear VR) or PC/Console-based such as Oculus Rift, HTC Vive and PSVR; in such cases, the form factor may be PHONE, PC or GAME_CONSOLE as applicable."
          ],
          "enum": [
            "UNKNOWN",
            "PC",
            "MOBILE",
            "TABLET",
            "PORTABLE_MEDIA_PLAYER",
            "TV",
            "GAME_CONSOLE",
            "MEDIA_PLAYER",
            "SMART_SPEAKER",
            "SMART_DISPLAY",
            "CONNECTED_HOME_OTHER",
            "WEARABLE",
            "GLASS",
            "CAR",
            "VR_HEADSET"
          ],
          "description": "User agent information",
          "type": "string"
        },
        "app": {
          "enumDescriptions": [
            "Unknown",
            "Browsers Google Chrome",
            "Mozilla Firefox",
            "Microsoft Internet Explorer",
            "Apple Safari",
            "Opera",
            "Tag #7 used to be CHROME_WEBVIEW, which was deprecated and replaced by CHROME_WEBVIEW_APP. When adding a new browser, skip #7 for safety. Microsoft Edge",
            "MSIE in Compatibility View. See b/22467241.",
            "Browser not otherwise specified",
            "Samsung browser on Android",
            "UC Browser",
            "Android's legacy default AOSP browser (distinct",
            "from customized OEM flavours). Yandex Browser",
            "Amazon Silk browser",
            "Popoular browser in Vietnam",
            "Tag for the maximum enum value that represents a browser. Enum values (strictly) between OTHER_APP and this value represent browsers. This should never appear in real data.",
            "Email apps Gmail",
            "Inbox by Gmail",
            "Native Android email app",
            "(replaced by Gmail in Lollipop) Samsung mail",
            "Motorola email app",
            "Boxer",
            "Mail.dll by Limilabs",
            "BlackBerry Internet Service",
            "Microsoft Outlook",
            "Apple apps (mail, contacts & calendar)",
            "Chrome Webview",
            "Safari Webview",
            "Chrome Sync",
            "Includes both Now and Search on GSA.",
            "Maps",
            "Calendar",
            "Google+",
            "Hangouts Classic",
            "Hangouts Meet",
            "Jamboard app (go/jamboard)",
            "Google Voice",
            "Photos",
            "Drive Sync",
            "Drive",
            "Docs",
            "Sheets",
            "Slides",
            "Keep",
            "WhatsApp in Drive",
            "Translate",
            "YouTube",
            "YouTube Music",
            "YouTube Gaming",
            "YouTube Kids",
            "YouTube Capture",
            "YouTube Creator Studio",
            "YouTube Go",
            "YouTube TV",
            "YouTube VR",
            "Google Play",
            "Google Play Music",
            "Google Play Books",
            "Google Play Movies & TV",
            "Google Play Newsstand",
            "Google Play Games",
            "Pokemon GO (uses Google to sign in)",
            "Allo",
            "Duo",
            "Google Classroom",
            "Google Trips",
            "Google Pay (formerly Android Pay)",
            "Waze",
            "Google Assistant standalone app. iOS only,",
            "since on Android OPA is integrated in GSA. Gboard - the Google Keyboard",
            "Google News & Weather",
            "Google Home app (rebranded from Chromecast app)",
            "Google Earth",
            "Google Street View",
            "Tez payment app for India (go/paisa)",
            "Google Analytics",
            "AdSense",
            "AdWords",
            "Google Express (formerly Shopping Express)",
            "Android Wear companion app",
            "Google My Business",
            "Google Family Link",
            "Google Opinion Rewards",
            "Google Wallet",
            "Google Arts & Culture",
            "Android Device Manager",
            "Google Go",
            "Files Go",
            "Datally",
            "Google Wifi (incl. OnHub)",
            "Stadia (go/stadia)",
            "Battlestar (go/battlestar)",
            "SmartLock",
            "Non-browser, non-mail, non-first-party apps LogDog (https://getlogdog.com/)",
            "Do not remove this fields - remvoing them caused issues in the past (see cl/180425348 for reference).",
            ""
          ],
          "type": "string",
          "enum": [
            "OTHER_APP",
            "CHROME",
            "FIREFOX",
            "MSIE",
            "SAFARI",
            "OPERA",
            "EDGE",
            "MSIE_COMPATIBILITY",
            "OTHER_BROWSER",
            "SAMSUNG_BROWSER",
            "UC_BROWSER",
            "ANDROID_BROWSER",
            "YANDEX_BROWSER",
            "SILK_BROWSER",
            "COC_COC_BROWSER",
            "MAX_BROWSER_APP_VALUE",
            "GMAIL_APP",
            "GMAIL_INBOX_APP",
            "ANDROID_EMAIL_APP",
            "SAMSUNG_MAIL_APP",
            "MOTO_EMAIL_APP",
            "BOXER_APP",
            "LIMILABS_MAIL_DLL",
            "BIS_APP",
            "OUTLOOK_MAIL_APP",
            "APPLE_NATIVE_APP",
            "CHROME_WEBVIEW_APP",
            "SAFARI_WEBVIEW_APP",
            "CHROME_SYNC_APP",
            "GSA_APP",
            "GMM_APP",
            "CALENDAR_APP",
            "PLUS_APP",
            "HANGOUTS_APP",
            "HANGOUTS_MEET_APP",
            "JAMBOARD_APP",
            "VOICE_APP",
            "PHOTOS_APP",
            "DRIVE_SYNC_APP",
            "DRIVE_APP",
            "DOCS_APP",
            "SHEETS_APP",
            "SLIDES_APP",
            "KEEP_APP",
            "WHATS_APP_IN_DRIVE_APP",
            "TRANSLATE_APP",
            "YOUTUBE_APP",
            "YOUTUBE_MUSIC_APP",
            "YOUTUBE_GAMING_APP",
            "YOUTUBE_KIDS_APP",
            "YOUTUBE_CAPTURE_APP",
            "YOUTUBE_CREATOR_APP",
            "YOUTUBE_GO_APP",
            "YOUTUBE_TV_APP",
            "YOUTUBE_VR_APP",
            "PLAY_APP",
            "PLAY_MUSIC_APP",
            "PLAY_BOOKS_APP",
            "PLAY_MOVIES_APP",
            "PLAY_NEWSSTAND_APP",
            "PLAY_GAMES_APP",
            "POKEMON_GO_APP",
            "ALLO_APP",
            "DUO_APP",
            "CLASSROOM_APP",
            "TRIPS_APP",
            "GOOGLE_PAY_APP",
            "WAZE_APP",
            "ASSISTANT_APP",
            "GBOARD_APP",
            "NEWS_APP",
            "HOME_APP",
            "EARTH_APP",
            "STREET_VIEW_APP",
            "TEZ_APP",
            "GOOGLE_ANALYTICS_APP",
            "ADSENSE_APP",
            "ADWORDS_APP",
            "EXPRESS_APP",
            "WEAR_APP",
            "GOOGLE_MY_BUSINESS_APP",
            "FAMILY_LINK_APP",
            "OPINION_REWARDS_APP",
            "WALLET_APP",
            "ARTS_AND_CULTURE_APP",
            "ANDROID_DEVICE_MANAGER_APP",
            "GOOGLE_GO_APP",
            "FILES_GO_APP",
            "DATALLY_APP",
            "WIFI_APP",
            "STADIA_APP",
            "BATTLESTAR_APP",
            "SMART_LOCK_APP",
            "LOGDOG_APP",
            "DEPRECATED_MAC_OSX_MAIL_APP",
            "DEPRECATED_IOS_MAIL_APP"
          ]
        },
        "osVersion": {
          "$ref": "OsVersion"
        },
        "guidFingerprint": {
          "description": "As agreed with Bond team, this holds the fingerprint of any \"aguid\" or \"guid\" provided by the ID command. The fingerprint should be calculated by fingerprint2011. Note that not all clients will provide aguid or guid through ID command.",
          "format": "uint64",
          "type": "string"
        }
      }
    },
    "GaiaUserProto": {
      "description": "A Gaia account, which may represent a user, device, service account, etc. For prod (@prod.google.com) accounts, use MdbUserProto instead.",
      "type": "object",
      "id": "GaiaUserProto",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "StructuredDataObject": {
      "type": "object",
      "description": "A structured data object consisting of named properties.",
      "properties": {
        "properties": {
          "items": {
            "$ref": "NamedProperty"
          },
          "type": "array",
          "description": "The properties for the object. The maximum number of elements is 1000."
        }
      },
      "id": "StructuredDataObject"
    },
    "AppsDynamiteStorageSelectionInput": {
      "description": "A widget that creates a UI item (for example, a drop-down list) with options for users to select.",
      "properties": {
        "label": {
          "description": "The label displayed ahead of the switch control.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "The selection type is a checkbox.",
            "The selection type is a radio button.",
            "The selection type is a switch.",
            "The selection type is a dropdown.",
            "The selection type is multi-select"
          ],
          "type": "string",
          "enum": [
            "CHECK_BOX",
            "RADIO_BUTTON",
            "SWITCH",
            "DROPDOWN",
            "MULTI_SELECT"
          ]
        },
        "items": {
          "items": {
            "$ref": "AppsDynamiteStorageSelectionInputSelectionItem"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "The name of the text input which is used in formInput."
        },
        "onChangeAction": {
          "description": "If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button.",
          "$ref": "AppsDynamiteStorageAction"
        }
      },
      "type": "object",
      "id": "AppsDynamiteStorageSelectionInput"
    },
    "Rank": {
      "description": "The rank contains a tuple of numbers which may be used as a general sort order. The rank should be treated as an ordered set of numbers, where the ordering is done in descending order of the most significant rank member. For example, given the following ranks described as (primary, secondary): (1,1), (1,2), (2,2) (2,1) The descending rank-order is: (2,2) \u003e (2,1) \u003e (1,2) \u003e (1,1)",
      "type": "object",
      "id": "Rank",
      "properties": {
        "primary": {
          "type": "string",
          "format": "int64",
          "description": "The primary rank is the most significant rank member. This rank element should always be present. Items with higher primary rank are always considered of higher rank than those of lower primary rank."
        },
        "secondary": {
          "description": "The secondary rank may be used to rank items of identical primary rank. This rank element should always be present.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ChatConserverDynamitePlaceholderMetadataBotMessageMetadata": {
      "properties": {},
      "description": "A bot sent a message in Dynamite.",
      "id": "ChatConserverDynamitePlaceholderMetadataBotMessageMetadata",
      "type": "object"
    },
    "AppId": {
      "properties": {
        "gsuiteAppType": {
          "type": "string",
          "description": "Enum indicating which 1P App this is when app_type is GSUITE_APP. Determined & set by the 1P API as a convenience for all users of this identifier(Eg. clients, chime, backend etc.) to map to 1P properties.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Powered by Bullseye",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "GSUITE_APP_TYPE_UNSPECIFIED",
            "TASKS_APP",
            "CALENDAR_APP",
            "DOCS_APP",
            "SHEETS_APP",
            "SLIDES_APP",
            "MEET_APP",
            "ASSISTIVE_SUGGESTION_APP",
            "CONTACTS_APP",
            "ACTIVITY_FEED_APP",
            "DRIVE_APP",
            "CHAT_IN_MEET_APP"
          ]
        },
        "appType": {
          "enumDescriptions": [
            "",
            "3P APP eg. external Bots(Asana Bot), 1P Bots(Drive Bot).",
            "1P APP eg. Tasks, Meet, Docs, Calendar..",
            "Asynchronous messages via an incoming webhook."
          ],
          "enum": [
            "APP_TYPE_UNSPECIFIED",
            "APP",
            "GSUITE_APP",
            "INCOMING_WEBHOOK"
          ],
          "description": "Enum indicating the type of App this is.",
          "type": "string"
        },
        "id": {
          "description": "Numeric identifier of the App. Set to Project number for 1/3P Apps. For Webhook, this is WebhookId. Determined & set by the 1P API from App credentials on the side channel.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "Identifier of an App.",
      "type": "object",
      "id": "AppId"
    },
    "HtmlOperatorOptions": {
      "description": "Used to provide a search operator for html properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "type": "object",
      "id": "HtmlOperatorOptions",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the html property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:\u003cvalue\u003e* show results only where the value of the property named *subjectLine* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator return all items where *\u003cvalue\u003e* matches the value of any html properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      }
    },
    "Metaline": {
      "id": "Metaline",
      "description": "A metaline is a list of properties that are displayed along with the search result to provide context.",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "DisplayedProperty"
          },
          "description": "The list of displayed properties for the metaline. The maximum number of properties is 5."
        }
      },
      "type": "object"
    },
    "RequiredMessageFeaturesMetadata": {
      "description": "A list of capabilities that are used in this message.",
      "properties": {
        "requiredFeatures": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "REQUIRED_FEATURE_UNSPECIFIED",
              "REQUIRED_FEATURE_MESSAGE_QUOTING",
              "REQUIRED_FEATURE_TOMBSTONES_IN_DMS_AND_UFRS",
              "REQUIRED_FEATURE_CUSTOM_HYPERLINK"
            ],
            "enumDescriptions": [
              "",
              "",
              "",
              ""
            ]
          }
        }
      },
      "type": "object",
      "id": "RequiredMessageFeaturesMetadata"
    },
    "GoogleChatV1WidgetMarkupImage": {
      "properties": {
        "onClick": {
          "description": "The onclick action.",
          "$ref": "GoogleChatV1WidgetMarkupOnClick"
        },
        "aspectRatio": {
          "format": "double",
          "type": "number",
          "description": "The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the native aspect ratio of the image. If unset, the server fills it by prefetching the image."
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the image."
        }
      },
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupImage",
      "description": "An image that is specified by a URL and can have an onclick action."
    },
    "TimestampOperatorOptions": {
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property. For example, if operatorName is *closedon* and the property's name is *closeDate*, then queries like *closedon:\u003cvalue\u003e* show results only where the value of the property named *closeDate* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "lessThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is earlier than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "greaterThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the timestamp property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is later than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      },
      "id": "TimestampOperatorOptions",
      "type": "object",
      "description": "Used to provide a search operator for timestamp properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "ZwiebackSessionProto": {
      "properties": {
        "zwiebackSessionId": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "See go/zwieback. New uses of Zwieback sessions must be approved via go/zwieback-request.",
      "type": "object",
      "id": "ZwiebackSessionProto"
    },
    "GoogleDocsMetadata": {
      "id": "GoogleDocsMetadata",
      "description": "The corpus specific metadata for office-type documents, from Google Docs and other sources. This message is passed to the scorer and beyond. Next tag: 9",
      "properties": {
        "numViewers": {
          "type": "integer",
          "format": "int32",
          "description": "Size of untruncated viewers list."
        },
        "lastContentModifiedTimestamp": {
          "description": "The last time this document was modified, in seconds since epoch. Only counts content modifications.",
          "type": "string",
          "format": "int64"
        },
        "typeInfo": {
          "description": "Contains additional information about the document depending on its type.",
          "$ref": "TypeInfo"
        },
        "numSubscribers": {
          "format": "int32",
          "type": "integer",
          "description": "Contains number of subscribers for the document."
        },
        "resultInfo": {
          "description": "Additional per-result information, akin to Gmail's SingleThreadResponse. Note: GWS no longer seems to use this field, but there's still one reference to it for Scribe, so we can't remove it.",
          "$ref": "GoogleDocsResultInfo"
        },
        "fileExtension": {
          "type": "string",
          "description": "The file extension of the document. NOTE: As of October 2018 this field is not backfilled for old documents."
        },
        "documentType": {
          "enum": [
            "UNKNOWN",
            "DOCUMENT",
            "PRESENTATION",
            "SPREADSHEET",
            "PDF",
            "IMAGE",
            "BINARY_BLOB",
            "FUSION_TABLE",
            "FOLDER",
            "DRAWING",
            "VIDEO",
            "FORM",
            "DRAFT_SITE",
            "DRAFT_SITE_PAGE",
            "JAM",
            "SHORTCUT",
            "SCRIPT"
          ],
          "type": "string",
          "description": "The conceptual type (presentation, document, etc.) of this document.",
          "enumDescriptions": [
            "If the type is unknown or not represented in this enum.",
            "Writely, Word, etc.",
            "Presently, PowerPoint, etc.",
            "Trix, Excel, etc.",
            "File types for Gdrive objects are below.",
            "",
            "Fall-back for unknown Gdrive types.",
            "",
            "",
            "",
            "",
            "",
            "For Atari page and site drafts",
            "",
            "Jamboard Jams (go/jam)",
            "Drive Shortcuts (go/shortcuts)",
            ""
          ]
        },
        "aclInfo": {
          "$ref": "AclInfo",
          "description": "Contains number of users and groups which can access the document."
        }
      },
      "type": "object"
    },
    "EnumValuePair": {
      "properties": {
        "stringValue": {
          "type": "string",
          "description": "The string value of the EnumValuePair. The maximum length is 32 characters."
        },
        "integerValue": {
          "type": "integer",
          "description": "The integer value of the EnumValuePair which must be non-negative. Optional.",
          "format": "int32"
        }
      },
      "type": "object",
      "description": "The enumeration value pair defines two things: a required string value and an optional integer value. The string value defines the necessary query term required to retrieve that item, such as *p0* for a priority item. The integer value determines the ranking of that string value relative to other enumerated values for the same property. For example, you might associate *p0* with *0* and define another enum pair such as *p1* and *1*. You must use the integer value in combination with ordered ranking to set the ranking of a given value relative to other enumerated values for the same property name. Here, a ranking order of DESCENDING for *priority* properties results in a ranking boost for items indexed with a value of *p0* compared to items indexed with a value of *p1*. Without a specified ranking order, the integer value has no effect on item ranking.",
      "id": "EnumValuePair"
    },
    "PropertyDefinition": {
      "description": "The definition of a property within an object.",
      "id": "PropertyDefinition",
      "properties": {
        "doublePropertyOptions": {
          "$ref": "DoublePropertyOptions"
        },
        "name": {
          "description": "The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.",
          "type": "string"
        },
        "booleanPropertyOptions": {
          "$ref": "BooleanPropertyOptions"
        },
        "textPropertyOptions": {
          "$ref": "TextPropertyOptions"
        },
        "isRepeatable": {
          "description": "Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.",
          "type": "boolean"
        },
        "htmlPropertyOptions": {
          "$ref": "HtmlPropertyOptions"
        },
        "isSortable": {
          "description": "Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.",
          "type": "boolean"
        },
        "isFacetable": {
          "type": "boolean",
          "description": "Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties."
        },
        "isSuggestable": {
          "description": "Indicates that the property can be used for generating query suggestions.",
          "type": "boolean"
        },
        "displayOptions": {
          "$ref": "PropertyDisplayOptions",
          "description": "The options that determine how the property is displayed in the Cloud Search results page if it's specified to be displayed in the object's display options."
        },
        "timestampPropertyOptions": {
          "$ref": "TimestampPropertyOptions"
        },
        "enumPropertyOptions": {
          "$ref": "EnumPropertyOptions"
        },
        "integerPropertyOptions": {
          "$ref": "IntegerPropertyOptions"
        },
        "datePropertyOptions": {
          "$ref": "DatePropertyOptions"
        },
        "isWildcardSearchable": {
          "description": "Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)",
          "type": "boolean"
        },
        "objectPropertyOptions": {
          "$ref": "ObjectPropertyOptions"
        },
        "isReturnable": {
          "type": "boolean",
          "description": "Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object."
        }
      },
      "type": "object"
    },
    "SortOptions": {
      "id": "SortOptions",
      "type": "object",
      "properties": {
        "operatorName": {
          "description": "The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable.",
          "type": "string"
        },
        "sortOrder": {
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "description": "Ascending is the default sort order",
          "enum": [
            "ASCENDING",
            "DESCENDING"
          ]
        }
      }
    },
    "GetCustomerQueryStatsResponse": {
      "type": "object",
      "id": "GetCustomerQueryStatsResponse",
      "properties": {
        "totalQueryCount": {
          "description": "Total successful query count (status code 200) for the given date range.",
          "type": "string",
          "format": "int64"
        },
        "stats": {
          "type": "array",
          "items": {
            "$ref": "CustomerQueryStats"
          }
        }
      }
    },
    "BorderStyle": {
      "type": "object",
      "properties": {
        "cornerRadius": {
          "description": "The corner radius for the border.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "enumDescriptions": [
            "No value specified.",
            "No border.",
            "Outline."
          ],
          "enum": [
            "BORDER_TYPE_NOT_SET",
            "NO_BORDER",
            "STROKE"
          ],
          "type": "string",
          "description": "The border type."
        },
        "strokeColor": {
          "description": "The colors to use when the type is STROKE.",
          "type": "string"
        }
      },
      "id": "BorderStyle",
      "description": "Represents a complete border style that can be applied to widgets."
    },
    "FacetResult": {
      "type": "object",
      "properties": {
        "objectType": {
          "type": "string",
          "description": "Object type for which facet results are returned. Can be empty."
        },
        "buckets": {
          "description": "FacetBuckets for values in response containing at least a single result with the corresponding filter.",
          "type": "array",
          "items": {
            "$ref": "FacetBucket"
          }
        },
        "sourceName": {
          "description": "Source name for which facet results are returned. Will not be empty.",
          "type": "string"
        },
        "operatorName": {
          "type": "string",
          "description": "The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions"
        }
      },
      "id": "FacetResult",
      "description": "Source specific facet response"
    },
    "PushItem": {
      "properties": {
        "payload": {
          "format": "byte",
          "type": "string",
          "description": "Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes."
        },
        "contentHash": {
          "type": "string",
          "description": "Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters."
        },
        "repositoryError": {
          "description": "Populate this field to store Connector or repository error details. This information is displayed in the Admin Console. This field may only be populated when the Type is REPOSITORY_ERROR.",
          "$ref": "RepositoryError"
        },
        "queue": {
          "description": "Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters.",
          "type": "string"
        },
        "metadataHash": {
          "type": "string",
          "description": "The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters."
        },
        "type": {
          "description": "The type of the push operation that defines the push behavior.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "MODIFIED",
            "NOT_MODIFIED",
            "REPOSITORY_ERROR",
            "REQUEUE"
          ],
          "enumDescriptions": [
            "Default UNSPECIFIED. Specifies that the push operation should not modify ItemStatus",
            "Indicates that the repository document has been modified or updated since the previous update call. This changes status to MODIFIED state for an existing item. If this is called on a non existing item, the status is changed to NEW_ITEM.",
            "Item in the repository has not been modified since the last update call. This push operation will set status to ACCEPTED state.",
            "Connector is facing a repository error regarding this item. Change status to REPOSITORY_ERROR state. Item is unreserved and rescheduled at a future time determined by exponential backoff.",
            "Call push with REQUEUE only for items that have been reserved. This action unreserves the item and resets its available time to the wall clock time."
          ]
        },
        "structuredDataHash": {
          "type": "string",
          "description": "Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters."
        }
      },
      "description": "Represents an item to be pushed to the indexing queue.",
      "type": "object",
      "id": "PushItem"
    },
    "PollItemsResponse": {
      "id": "PollItemsResponse",
      "type": "object",
      "properties": {
        "items": {
          "description": "Set of items from the queue available for connector to process. These items have the following subset of fields populated: version metadata.hash structured_data.hash content.hash payload status queue",
          "items": {
            "$ref": "Item"
          },
          "type": "array"
        }
      }
    },
    "LdapGroupProto": {
      "properties": {
        "groupName": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "LdapGroupProto"
    },
    "SuggestResponse": {
      "type": "object",
      "id": "SuggestResponse",
      "properties": {
        "suggestResults": {
          "description": "List of suggestions.",
          "items": {
            "$ref": "SuggestResult"
          },
          "type": "array"
        }
      },
      "description": "Response of the suggest API."
    },
    "YouTubeBroadcastStats": {
      "type": "object",
      "description": "Statistics of the YouTube broadcast session.",
      "id": "YouTubeBroadcastStats",
      "properties": {
        "estimatedViewerCount": {
          "format": "int64",
          "type": "string",
          "description": "Estimated concurrent viewer count."
        }
      }
    },
    "SimpleSecretLabelProto": {
      "description": "SimpleSecretProto (in authenticator.proto) and SimpleSecretHolderProto (below) share the notion of a \"label\", which identifies a particular secret without (hopefully) revealing the secret. Note that a SimpleSecretLabel only disambiguates between secrets used to get access to some particular object. Two different secrets that apply to two different objects could have the same label. For example, in the common sharing model, each object has no more than one \"auth key\". Therefore, the label for an auth key simply has type = AUTH_KEY with no additional information. In theory, we could add some sort of resource ID to SimpleSecretLabel to make it more explicit. However, in practice, this is never really needed. A SimpleSecret for one object is never used to authorize a request on some other object, so there is no ambiguity. Also, since SimpleSecrets must obviously be unguessable, there is no risk that a SimpleSecret intended for one object will accidentally grant access to another.",
      "properties": {
        "inviteId": {
          "type": "string",
          "format": "int64",
          "description": "Used when type == INVITE."
        },
        "capabilityId": {
          "description": "***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops using CAP_TOKEN labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label appears in a SimpleSecretHolder Principal, |capability_id| must be filled in to identify one of the capabilities on the ACL. When a CAP_TOKEN label appears in a SimpleSecret Authenticator, it is NOT necessary to fill in |capability_id| -- ACL Service will find the ID by searching all capabilities on the ACL for one associated with the token given by the SimpleSecret's secret data. If |capability_id| is specified, though, then the Authenticator will only be accepted if it actually matches that particular token ID.",
          "type": "integer",
          "format": "int32"
        },
        "genericLabel": {
          "description": "Used when type = GENERIC_SECRET",
          "type": "string",
          "format": "byte"
        },
        "type": {
          "type": "string",
          "enum": [
            "INVALID",
            "AUTH_KEY",
            "INVITE",
            "GENERIC_SECRET",
            "CAP_TOKEN",
            "REKE"
          ],
          "description": "This is optional because required enums cannot be extended.",
          "enumDescriptions": [
            "Used as a default value.",
            "The singleton auth key for a common-sharing ACL. No other fields of SimpleSecretLabelProto need to be filled in, since there is only one of these per ACL. The corresponding secret is the auth key encoded in 64-bit big-endian.",
            "A common-sharing invite token. |invite_id| (below) must be set to identify the invite. The corresponding secret is the SecretMaterial, as defined by InviteToken.SecretMaterial in acl.proto, encoded in 64-bit big-endian. If there is no SecretMaterial, the secret should be omitted; in this case the invite ID itself is the secret, which is less secure.",
            "A generic secret value. Do not use this if any more specific type is appropriate.",
            "***DEPRECATED (3-Oct-2011)*** Use the new CapTokenProto and CapTokenHolderProto instead. A capability token. The corresponding secret is an arbitrary-length random byte string (recommended: 128 bits). |capability_id| may be filled in (see below). See CapTokenMetadata in acl.proto.",
            "Identifies a principal that can perform a successful REKE handshake. The holder is not authenticated by presenting a SimpleSecretProto, but rather by knowing either the REKE resumption ticket secret or the private key corresponding to a public key specified outside the PrincipalProto. For more information, see: http://goto.google.com/loas2cert"
          ]
        }
      },
      "id": "SimpleSecretLabelProto",
      "type": "object"
    },
    "RosterId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Opaque, server-assigned ID of the Roster."
        }
      },
      "id": "RosterId",
      "description": "Primary key for Roster resource."
    },
    "Button": {
      "properties": {
        "textButton": {
          "$ref": "TextButton"
        },
        "imageButton": {
          "$ref": "ImageButton"
        }
      },
      "id": "Button",
      "type": "object"
    },
    "PackagingServiceClient": {
      "properties": {
        "type": {
          "enumDescriptions": [
            "Client for Android app.",
            "Client for iOS app."
          ],
          "type": "string",
          "description": "Type of Google API Console client.",
          "enum": [
            "ANDROID",
            "IOS"
          ]
        },
        "iosBundleId": {
          "description": "iOS app's bundle ID to generate the deep-link URI.",
          "type": "string"
        },
        "androidPackageName": {
          "type": "string",
          "description": "Android app's package name to generate the deep-link URI."
        },
        "iosAppStoreId": {
          "description": "iOS app's App Store ID to generate the App Store URL when app is not installed on device.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Developers register a client in Google API Console to get the deep-linking feature on Google+ posts or frames about their apps. The client data is stored in this proto.",
      "id": "PackagingServiceClient"
    },
    "GoogleChatV1WidgetMarkupTextParagraph": {
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "description": "A paragraph of text. Formatted text supported.",
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupTextParagraph"
    },
    "AttributeRemoved": {
      "properties": {
        "messageKeys": {
          "type": "array",
          "items": {
            "$ref": "MultiKey"
          }
        },
        "attributeId": {
          "type": "string"
        }
      },
      "id": "AttributeRemoved",
      "description": "An attribute was deleted from some (subset of the) messages in this thread.",
      "type": "object"
    },
    "SelectionItem": {
      "id": "SelectionItem",
      "type": "object",
      "properties": {
        "selected": {
          "type": "boolean",
          "description": "If more than one items are selected for RADIO_BUTTON and DROPDOWN, the first selected item is treated as sElected and the after ones are all ignored."
        },
        "text": {
          "type": "string",
          "description": "The text to be displayed."
        },
        "value": {
          "type": "string",
          "description": "The value associated with this item which will be sent back to app scripts. Client should use as a form input value."
        }
      }
    },
    "StoredParticipantId": {
      "id": "StoredParticipantId",
      "type": "object",
      "properties": {
        "gaiaId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "UploadMetadata": {
      "description": "Annotation metadata for user Upload artifacts.",
      "properties": {
        "clonedDriveId": {
          "type": "string",
          "description": "Reference to a Drive ID, if this upload file has been previously cloned to Drive. Note: this is deprecated in favor of the AuthorizedItemId below."
        },
        "localId": {
          "type": "string",
          "description": "A copy of the LocalId in Annotation. This field is supposed to be filled by server only."
        },
        "virusScanResult": {
          "enum": [
            "UNKNOWN_VIRUS_SCAN_RESULT",
            "CLEAN",
            "INFECTED",
            "ERROR",
            "POLICY_VIOLATION"
          ],
          "type": "string",
          "description": "Result for a virus scan. It's duplicated in the above field apps.dynamite.shared.BackendUploadMetadata",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "The document violates Google's policy for executables and archives."
          ]
        },
        "dlpMetricsMetadata": {
          "description": "The metrics metadata of the Data Loss Prevention attachment scan.",
          "$ref": "AppsDynamiteSharedDlpMetricsMetadata"
        },
        "contentName": {
          "description": "The original file name for the content, not the full path.",
          "type": "string"
        },
        "videoReference": {
          "description": "Reference to a transcoded video attachment. Only set for video attachments.",
          "$ref": "AppsDynamiteSharedVideoReference"
        },
        "backendUploadMetadata": {
          "description": "Information about the uploaded attachment that is only used in Backend. This field will NOT be sent out of Google.",
          "$ref": "AppsDynamiteSharedBackendUploadMetadata"
        },
        "contentType": {
          "type": "string",
          "description": "Type is from Scotty's best_guess by default: http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785"
        },
        "clonedAuthorizedItemId": {
          "description": "The \"new\" secure identifier for Drive files. Should be used instead of the deprecated string drive_id field above. This should only be set if the upload file has been added to Drive. Note that older Drive files that do not have a ResourceKey should still use this field, with the resource_key field unset.",
          "$ref": "AuthorizedItemId"
        },
        "attachmentToken": {
          "type": "string",
          "description": "Opaque token. Clients shall simply pass it back to the Backend. There is no guarantee the attachment_token returned on subsequent reads is the same even if nothing has changed. This field will NOT be saved into storage."
        },
        "latestVirusScanTimestamp": {
          "description": "The timestamp of the most recent virus scan completed (in microseconds).",
          "format": "int64",
          "type": "string"
        },
        "clonedDriveAction": {
          "type": "string",
          "enum": [
            "DRIVE_ACTION_UNSPECIFIED",
            "ADD_TO_DRIVE",
            "ORGANIZE",
            "ADD_SHORTCUT",
            "ADD_ANOTHER_SHORTCUT"
          ],
          "description": "DriveAction for organizing the cloned version of this upload in Drive, if the file has been added to Drive. This field is not set if the file has not been added to Drive. Additionally, this field is only set when part of a FileResult in a ListFilesResponse.",
          "enumDescriptions": [
            "No organize action should be shown.",
            "Show \"Add to Drive\" button, for adding file that doesn't exist in Drive to Drive. Note that deleted Drive files that still exist (i.e. in your Trash) will still be ORGANIZE (this is consistent with Gmail Drive attachments).",
            "Show \"Move\" button, for organizing a Drive file the user has permission to move.",
            "Show \"Add shortcut\" button, for adding a shortcut to a Drive file the user does not have permission to move.",
            "Show \"Add another shortcut\" button, for Drive files the user has already created a shortcut to."
          ]
        },
        "originalDimension": {
          "$ref": "AppsDynamiteSharedDimension",
          "description": "Original dimension of the content. Only set for image attachments."
        }
      },
      "type": "object",
      "id": "UploadMetadata"
    },
    "TransactionContext": {
      "id": "TransactionContext",
      "properties": {
        "writeTimestampUs": {
          "format": "int64",
          "description": "The microsecond timestamp of the transaction.",
          "type": "string"
        },
        "endingRecordId": {
          "format": "uint64",
          "type": "string",
          "description": "The last HistoryRecord of the transaction. Note that this may correspond to a record that is filtered by Tingle (and thus not returned to the client). See http://b/9513464."
        },
        "startingRecordId": {
          "type": "string",
          "description": "The first HistoryRecord of the transaction. Note that this may be a record of type INTERNAL.",
          "format": "uint64"
        }
      },
      "type": "object",
      "description": "Storage information pertaining to the transaction with which a HistoryRecord is associated."
    },
    "SafeUrlProto": {
      "id": "SafeUrlProto",
      "properties": {
        "privateDoNotAccessOrElseSafeUrlWrappedValue": {
          "type": "string",
          "description": "IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message."
        }
      },
      "description": "Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.",
      "type": "object"
    },
    "CoActivity": {
      "type": "object",
      "properties": {
        "coActivityApp": {
          "description": "Identifies the app handling this co-activity.",
          "type": "string",
          "enumDescriptions": [
            "Should never be used.",
            "Main YouTube app, for watching videos.",
            "Spotify music.",
            "Uno game.",
            "HeadsUp game.",
            "Kahoot! educational software.",
            "GQueues task manager.",
            "YouTube Music",
            "Samsung Notes",
            "."
          ],
          "enum": [
            "CO_ACTIVITY_APP_UNSPECIFIED",
            "CO_ACTIVITY_APP_YOU_TUBE_MAIN",
            "CO_ACTIVITY_APP_SPOTIFY",
            "CO_ACTIVITY_APP_UNO",
            "CO_ACTIVITY_APP_HEADSUP",
            "CO_ACTIVITY_APP_KAHOOT",
            "CO_ACTIVITY_APP_GQUEUES",
            "CO_ACTIVITY_APP_YOU_TUBE_MUSIC",
            "CO_ACTIVITY_APP_SAMSUNG_NOTES",
            "CO_ACTIVITY_APP_HAPPY_AARDVARK"
          ]
        },
        "activityTitle": {
          "description": "The title of the activity in this co-activity session. For example, this might be the title of the video being co-watched, or the name of the round of a game being co-played.",
          "type": "string"
        }
      },
      "description": "Metadata about a co-activity session.",
      "id": "CoActivity"
    },
    "AppsDynamiteSharedMeetMetadata": {
      "properties": {
        "meetingUrl": {
          "type": "string",
          "description": "Required. A URL, in the format \"https://meet.google.com/*\" (e.g. https://meet.google.com/cxv-zbgj-wzw), to identify and access the meeting space."
        },
        "meetingCode": {
          "type": "string",
          "description": "Required. A globally unique code (e.g. \"cxv-zbgj-wzw\") that points to a meeting space. Note: Meeting codes may be regenerated, which will cause old meeting codes to become invalid."
        }
      },
      "id": "AppsDynamiteSharedMeetMetadata",
      "type": "object",
      "description": "Metadata specific for a Meet call that are required to generate call artifacts."
    },
    "ChatConserverDynamitePlaceholderMetadata": {
      "type": "object",
      "properties": {
        "tasksMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataTasksMetadata"
        },
        "spaceUrl": {
          "type": "string",
          "description": "The space URL embedded in the localized string."
        },
        "botMessageMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataBotMessageMetadata"
        },
        "editMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataEditMetadata"
        },
        "videoCallMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataVideoCallMetadata"
        },
        "attachmentMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataAttachmentMetadata"
        },
        "calendarEventMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata"
        },
        "deleteMetadata": {
          "$ref": "ChatConserverDynamitePlaceholderMetadataDeleteMetadata"
        }
      },
      "id": "ChatConserverDynamitePlaceholderMetadata",
      "description": "Metadata used as inputs to the localization that is performed on Dynamite-originated messages that are incompatible with Hangouts clients. See go/localization-of-system-messages for more details."
    },
    "IntegerOperatorOptions": {
      "type": "object",
      "id": "IntegerOperatorOptions",
      "properties": {
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the integer property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "lessThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the integer property using the less-than operator. For example, if lessThanOperatorName is *prioritybelow* and the property's name is *priorityVal*, then queries like *prioritybelow:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* is less than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "greaterThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the integer property using the greater-than operator. For example, if greaterThanOperatorName is *priorityabove* and the property's name is *priorityVal*, then queries like *priorityabove:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* is greater than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      },
      "description": "Used to provide a search operator for integer properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "EmbedClientItem": {
      "properties": {
        "type": {
          "items": {
            "enumDescriptions": [
              "Largely deprecated, effectively an error condition and should not be in storage.",
              "Embeds V2 types",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "The action of checking in, as opposed to a \"check-in\".",
              "",
              "",
              "The act of commenting, which might result in a comment.",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "Boswell story (see goto/boswell)",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "A photo stored in photo service owned by a Google account user. This is distinct from PlusPhoto as it isn't tied to GPlus, but is instead intended to be a more general photo tied to a google user.",
              "A photo album in photo service owned by a Google account user. This is distinct from PlusPhotoAlbum as it isn't tied to GPlus, but is instead intended to be a general photo album tied to a google user.",
              "An embed used to create a single photo in photo service. This type is never stored but is used to create a GOOGLE_USER_PHOTO_V2 or PLUS_PHOTO_V2 embed.",
              "Embeds V1 types",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "CREATIVE_WORK subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "EVENT subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "ORGANIZATION subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "PLACE subtypes",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "NOTE(jpanzer): This is a badly designed hierarchy and we should avoid depending on Event properties inside UserInteractions as much as possible IMHO.",
              "",
              "Intangibles, primarily used as sub-objects of other types",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "CREATIVE_WORK extensions",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "Single frame for http://goto/carousel.",
              "EVENT extensions",
              "No declared proto. Used only as a base type for now.",
              "",
              "",
              "",
              "",
              "NOTE(melchang): These correspond to http://schema.org/WebPage/Community and http://schema.org/WebPage/CommunityInvite. See b/7653610 for why these are \"SQUARE\" and not \"COMMUNITY\".",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "Data visualizations. See http://code.google.com/apis/chart/index.html",
              "",
              "A collection of people that have been recommended to a user.",
              "A Google+ post.",
              "An http://schema.org/Date unstructured ISO-8859 timestamp string.",
              "Embed representing a collection of multiple Drive objects.",
              "https://schema.org/NewsMediaOrganization",
              "Deprecated in favor of DYNAMITE_MESSAGE_METADATA",
              "Used for Dynamite message metadata in Hangouts"
            ],
            "enum": [
              "UNKNOWN",
              "ACTION_V2",
              "ADD_ACTION_V2",
              "AGGREGATE_RATING_V2",
              "ARTICLE_V2",
              "ASSESS_ACTION_V2",
              "AUDIO_OBJECT_V2",
              "BASIC_INTERACTION_V2",
              "BLOG_POSTING_V2",
              "BLOG_V2",
              "BOOK_V2",
              "BUY_ACTION_V2",
              "CHECK_IN_ACTION_V2",
              "CHECKIN_V2",
              "COLLEXION_V2",
              "COMMENT_ACTION_V2",
              "COMMENT_V2",
              "COMMUNICATE_ACTION_V2",
              "CONSUME_ACTION_V2",
              "CREATE_ACTION_V2",
              "CREATIVE_WORK_V2",
              "DISCOVER_ACTION_V2",
              "DOCUMENT_OBJECT_V2",
              "DRAWING_OBJECT_V2",
              "DRIVE_OBJECT_V2",
              "EMOTISHARE_V2",
              "ENTRY_POINT_V2",
              "EVENT_TIME_V2",
              "EVENT_V2",
              "FILE_OBJECT_V2",
              "FIND_ACTION_V2",
              "FINANCIAL_QUOTE_V2",
              "FORM_OBJECT_V2",
              "GEO_COORDINATES_V2",
              "GOOGLE_OFFER_V2",
              "HANGOUT_CHAT_MESSAGE",
              "HANGOUT_QUOTE",
              "HANGOUT_V2",
              "HOA_PLUS_EVENT_V2",
              "IMAGE_OBJECT_V2",
              "INTERACT_ACTION_V2",
              "INTERACTION_V2",
              "LISTEN_ACTION_V2",
              "LOCAL_BUSINESS_V2",
              "LOCAL_PLUS_PHOTO_ALBUM_V2",
              "MAGAZINE_V2",
              "MEDIA_OBJECT_V2",
              "MOBILE_APPLICATION_V2",
              "MOVIE_V2",
              "MUSIC_ALBUM_V2",
              "MUSIC_GROUP_V2",
              "MUSIC_PLAYLIST_V2",
              "MUSIC_RECORDING_V2",
              "NEWS_ARTICLE_V2",
              "OFFER_V2",
              "ORGANIZATION_V2",
              "ORGANIZE_ACTION_V2",
              "PERSON_V2",
              "PLACE_REVIEW_V2",
              "PLACE_V2",
              "PLAN_ACTION_V2",
              "PLAY_MUSIC_ALBUM_V2",
              "PLAY_MUSIC_TRACK_V2",
              "PLAY_OBJECT_V2",
              "PLUS_AUDIO_V2",
              "PLUS_EVENT_V2",
              "PLUS_MEDIA_COLLECTION_V2",
              "PLUS_MEDIA_OBJECT_V2",
              "PLUS_PAGE_V2",
              "PLUS_PHOTOS_ADDED_TO_COLLECTION_V2",
              "PLUS_PHOTO_ALBUM_V2",
              "PLUS_PHOTO_COLLECTION_V2",
              "PLUS_PHOTO_V2",
              "PLUS_POST_V2",
              "PLUS_RESHARE_V2",
              "PLUS_SOFTWARE_APPLICATION_V2",
              "POLL_OPTION_V2",
              "POLL_V2",
              "POSTAL_ADDRESS_V2",
              "PRESENTATION_OBJECT_V2",
              "PRODUCT_REVIEW_V2",
              "RATING_V2",
              "REACT_ACTION_V2",
              "RESERVATION_V2",
              "RESERVE_ACTION_V2",
              "REVIEW_V2",
              "REVIEW_ACTION_V2",
              "SOFTWARE_APPLICATION_V2",
              "SPREADSHEET_OBJECT_V2",
              "SQUARE_INVITE_V2",
              "SQUARE_V2",
              "STICKER_V2",
              "STORY_V2",
              "THING_V2",
              "TRADE_ACTION_V2",
              "DEPRECATED_TOUR_OBJECT_V2",
              "TV_EPISODE_V2",
              "TV_SERIES_V2",
              "UPDATE_ACTION_V2",
              "VIEW_ACTION_V2",
              "VIDEO_OBJECT_V2",
              "VIDEO_GALLERY_V2",
              "WANT_ACTION_V2",
              "WEB_PAGE_V2",
              "WRITE_ACTION_V2",
              "YOUTUBE_CHANNEL_V2",
              "GOOGLE_USER_PHOTO_V2",
              "GOOGLE_USER_PHOTO_ALBUM",
              "GOOGLE_PHOTO_RECIPE",
              "THING",
              "CREATIVE_WORK",
              "EVENT",
              "INTANGIBLE",
              "ORGANIZATION",
              "PERSON",
              "PLACE",
              "PRODUCT",
              "ARTICLE",
              "BLOG_POSTING",
              "NEWS_ARTICLE",
              "SCHOLARLY_ARTICLE",
              "BLOG",
              "BOOK",
              "COMMENT",
              "ITEM_LIST",
              "MAP",
              "MEDIA_OBJECT",
              "AUDIO_OBJECT",
              "IMAGE_OBJECT",
              "MUSIC_VIDEO_OBJECT",
              "VIDEO_OBJECT",
              "MOVIE",
              "MUSIC_PLAYLIST",
              "MUSIC_ALBUM",
              "MUSIC_RECORDING",
              "PAINTING",
              "PHOTOGRAPH",
              "RECIPE",
              "REVIEW",
              "SCULPTURE",
              "SOFTWARE_APPLICATION",
              "MOBILE_APPLICATION",
              "WEB_APPLICATION",
              "TV_EPISODE",
              "TV_SEASON",
              "TV_SERIES",
              "WEB_PAGE",
              "ABOUT_PAGE",
              "CHECKOUT_PAGE",
              "COLLECTION_PAGE",
              "IMAGE_GALLERY",
              "VIDEO_GALLERY",
              "CONTACT_PAGE",
              "ITEM_PAGE",
              "PROFILE_PAGE",
              "SEARCH_RESULTS_PAGE",
              "WEB_PAGE_ELEMENT",
              "SITE_NAVIGATION_ELEMENT",
              "TABLE",
              "WP_AD_BLOCK",
              "WP_FOOTER",
              "WP_HEADER",
              "WP_SIDEBAR",
              "APP_INVITE",
              "EMOTISHARE",
              "BUSINESS_EVENT",
              "CHILDRENS_EVENT",
              "COMEDY_EVENT",
              "DANCE_EVENT",
              "EDUCATION_EVENT",
              "FESTIVAL",
              "FOOD_EVENT",
              "LITERARY_EVENT",
              "MUSIC_EVENT",
              "SALE_EVENT",
              "SOCIAL_EVENT",
              "SPORTS_EVENT",
              "THEATER_EVENT",
              "VISUAL_ARTS_EVENT",
              "RESERVATION",
              "TRAVEL_EVENT",
              "CORPORATION",
              "EDUCATIONAL_ORGANIZATION",
              "COLLEGE_OR_UNIVERSITY",
              "ELEMENTARY_SCHOOL",
              "HIGH_SCHOOL",
              "MIDDLE_SCHOOL",
              "PRESCHOOL",
              "SCHOOL",
              "GOVERNMENT_ORGANIZATION",
              "LOCAL_BUSINESS",
              "ANIMAL_SHELTER",
              "AUTOMOTIVE_BUSINESS",
              "AUTO_BODY_SHOP",
              "AUTO_DEALER",
              "AUTO_PARTS_STORE",
              "AUTO_RENTAL",
              "AUTO_REPAIR",
              "AUTO_WASH",
              "GAS_STATION",
              "MOTORCYCLE_DEALER",
              "MOTORCYCLE_REPAIR",
              "CHILD_CARE",
              "DRY_CLEANING_OR_LAUNDRY",
              "EMERGENCY_SERVICE",
              "FIRE_STATION",
              "HOSPITAL",
              "POLICE_STATION",
              "EMPLOYMENT_AGENGY",
              "ENTERTAINMENT_BUSINESS",
              "ADULT_ENTERTAINMENT",
              "AMUSEMENT_PARK",
              "ART_GALLERY",
              "CASINO",
              "COMEDY_CLUB",
              "MOVIE_THEATER",
              "NIGHT_CLUB",
              "FINANCIAL_SERVICE",
              "ACCOUNTING_SERVICE",
              "AUTOMATED_TELLER",
              "BANK_OR_CREDIT_UNION",
              "INSURANCE_AGENCY",
              "FOOD_ESTABLISHMENT",
              "BAKERY",
              "BAR_OR_PUB",
              "BREWERY",
              "CAFE_OR_COFFEE_SHOP",
              "FAST_FOOD_RESTAURANT",
              "ICE_CREAM_SHOP",
              "RESTAURANT",
              "WINERY",
              "GOVERNMENT_OFFICE",
              "POST_OFFICE",
              "HEALTH_AND_BEAUTY_BUSINESS",
              "BEAUTY_SALON",
              "DAY_SPA",
              "HAIR_SALON",
              "HEALTH_CLUB",
              "NAIL_SALON",
              "TATTOO_PARLOR",
              "HOME_AND_CONSTRUCTION_BUSINESS",
              "ELECTRICIAN",
              "GENERAL_CONTRACTOR",
              "HVAC_BUSINESS",
              "HOUSE_PAINTER",
              "LOCKSMITH",
              "MOVING_COMPANY",
              "PLUMBER",
              "ROOFING_CONTRACTOR",
              "INTERNET_CAFE",
              "LIBRARY",
              "LODGING_BUSINESS",
              "BED_AND_BREAKFAST",
              "HOSTEL",
              "HOTEL",
              "MOTEL",
              "MEDICAL_ORGANIZATION",
              "DENTIST",
              "MEDICAL_CLINIC",
              "OPTICIAN",
              "PHARMACY",
              "PHYSICIAN",
              "VETERINARY_CARE",
              "PROFESSIONAL_SERVICE",
              "ATTORNEY",
              "NOTARY",
              "RADIO_STATION",
              "REAL_ESTATE_AGENT",
              "RECYCLING_CENTER",
              "SELF_STORAGE",
              "SHOPPING_CENTER",
              "SPORTS_ACTIVITY_LOCATION",
              "BOWLING_ALLEY",
              "EXERCISE_GYM",
              "GOLF_COURSE",
              "PUBLIC_SWIMMING_POOL",
              "SKI_RESORT",
              "SPORTS_CLUB",
              "STADIUM_OR_ARENA",
              "TENNIS_COMPLEX",
              "STORE",
              "BIKE_STORE",
              "BOOK_STORE",
              "CLOTHING_STORE",
              "COMPUTER_STORE",
              "CONVENIENCE_STORE",
              "DEPARTMENT_STORE",
              "ELECTRONICS_STORE",
              "FLORIST",
              "FURNITURE_STORE",
              "GARDEN_STORE",
              "GROCERY_STORE",
              "HARDWARE_STORE",
              "HOBBY_SHOP",
              "HOME_GOODS_STORE",
              "JEWELRY_STORE",
              "LIQUOR_STORE",
              "MENS_CLOTHING_STORE",
              "MOBILE_PHONE_STORE",
              "MOVIE_RENTAL_STORE",
              "MUSIC_STORE",
              "OFFICE_EQUIPMENT_STORE",
              "OUTLET_STORE",
              "PAWN_SHOP",
              "PET_STORE",
              "SHOE_STORE",
              "SPORTING_GOODS_STORE",
              "TIRE_SHOP",
              "TOY_STORE",
              "WHOLESALE_STORE",
              "TELEVISION_STATION",
              "TOURIST_INFORMATION_CENTER",
              "TRAVEL_AGENCY",
              "PERFORMING_GROUP",
              "MUSIC_GROUP",
              "ADMINISTRATIVE_AREA",
              "CITY",
              "COUNTRY",
              "STATE",
              "CIVIC_STRUCTURE",
              "AIRPORT",
              "AQUARIUM",
              "BEACH",
              "BUS_STATION",
              "BUS_STOP",
              "CAMPGROUND",
              "CEMETERY",
              "CREMATORIUM",
              "EVENT_VENUE",
              "GOVERNMENT_BUILDING",
              "CITY_HALL",
              "COURTHOUSE",
              "DEFENCE_ESTABLISHMENT",
              "EMBASSY",
              "LEGISLATIVE_BUILDING",
              "MUSEUM",
              "MUSIC_VENUE",
              "PARK",
              "PARKING_FACILITY",
              "PERFORMING_ARTS_THEATER",
              "PLACE_OF_WORSHIP",
              "BUDDHIST_TEMPLE",
              "CATHOLIC_CHURCH",
              "CHURCH",
              "HINDU_TEMPLE",
              "MOSQUE",
              "SYNAGOGUE",
              "PLAYGROUND",
              "R_V_PARK",
              "RESIDENCE",
              "APARTMENT_COMPLEX",
              "GATED_RESIDENCE_COMMUNITY",
              "SINGLE_FAMILY_RESIDENCE",
              "TOURIST_ATTRACTION",
              "SUBWAY_STATION",
              "TAXI_STAND",
              "TRAIN_STATION",
              "ZOO",
              "LANDFORM",
              "BODY_OF_WATER",
              "CANAL",
              "LAKE_BODY_OF_WATER",
              "OCEAN_BODY_OF_WATER",
              "POND",
              "RESERVOIR",
              "RIVER_BODY_OF_WATER",
              "SEA_BODY_OF_WATER",
              "WATERFALL",
              "CONTINENT",
              "MOUNTAIN",
              "VOLCANO",
              "LANDMARKS_OR_HISTORICAL_BUILDINGS",
              "USER_INTERACTION",
              "USER_PLUS_ONES",
              "ENUMERATION",
              "BOOK_FORMAT_TYPE",
              "ITEM_AVAILABILITY",
              "OFFER_ITEM_CONDITION",
              "JOB_POSTING",
              "LANGUAGE",
              "OFFER",
              "QUANTITY",
              "DISTANCE",
              "DURATION",
              "ENERGY",
              "MASS",
              "RATING",
              "AGGREGATE_RATING",
              "STRUCTURED_VALUE",
              "CONTACT_POINT",
              "POSTAL_ADDRESS",
              "GEO_COORDINATES",
              "GEO_SHAPE",
              "NUTRITION_INFORMATION",
              "PRESENTATION_OBJECT",
              "DOCUMENT_OBJECT",
              "SPREADSHEET_OBJECT",
              "FORM_OBJECT",
              "DRAWING_OBJECT",
              "PLACE_REVIEW",
              "FILE_OBJECT",
              "PLAY_MUSIC_TRACK",
              "PLAY_MUSIC_ALBUM",
              "MAGAZINE",
              "CAROUSEL_FRAME",
              "PLUS_EVENT",
              "HANGOUT",
              "HANGOUT_BROADCAST",
              "HANGOUT_CONSUMER",
              "CHECKIN",
              "EXAMPLE_OBJECT",
              "SQUARE",
              "SQUARE_INVITE",
              "PLUS_PHOTO",
              "PLUS_PHOTO_ALBUM",
              "LOCAL_PLUS_PHOTO_ALBUM",
              "PRODUCT_REVIEW",
              "FINANCIAL_QUOTE",
              "DEPRECATED_TOUR_OBJECT",
              "PLUS_PAGE",
              "GOOGLE_CHART",
              "PLUS_PHOTOS_ADDED_TO_COLLECTION",
              "RECOMMENDED_PEOPLE",
              "PLUS_POST",
              "DATE",
              "DRIVE_OBJECT_COLLECTION",
              "NEWS_MEDIA_ORGANIZATION",
              "DYNAMITE_ATTACHMENT_METADATA",
              "DYNAMITE_MESSAGE_METADATA"
            ],
            "type": "string"
          },
          "description": "The first value in `type` determines which extension field will be set. When creating an EmbedClientItem, you only need to set the first (primary) type in this field. When the server receives the item, it will populate the full type list using the parent annotations in the ItemType enum.",
          "type": "array"
        },
        "id": {
          "description": "The ID of the embed. This corresponds to the schema.org ID, as represented in the ItemScope.id field.",
          "type": "string"
        },
        "deepLinkData": {
          "$ref": "DeepLinkData",
          "description": "Deep-linking data to take the user to the right place in a mobile app. This is only used for preview and attribution. Links that are specific to a given embed type should live on that specific embed's proto by using Link. See http://goto.google.com/mariana-design."
        },
        "provenance": {
          "$ref": "Provenance",
          "description": "The provenance of the embed, populated when the embed originated from a web fetch. The provenance captures information about the web page the embed had originated, like the URL that was retrieved and the retrieved URL's canonical form. This is useful in the case where the URL shared by the URL redirects (e.g., in the case of a shortened URL)."
        },
        "canonicalId": {
          "description": "The canonical ID of the embed. If absent, the canonical ID is equal to the ID; if present, then the canonical ID represents an \"equivalence class\" of embeds which really refer to the same object. (For example, the URLs http://www.foo.com/ and http://foo.com/ refer to the same object) This field may be updated periodically by background processes.",
          "type": "string"
        },
        "signature": {
          "description": "Signature of the embed, used for verification.",
          "type": "string"
        },
        "renderId": {
          "description": "The ID used to identify the embed during rendering. This field will match ID, if set, otherwise it will be the ID of the parent activity. This field is only populated on the server for client use and is not persisted to storage.",
          "type": "string"
        },
        "transientData": {
          "description": "Transient generic data that will not be saved on the server.",
          "$ref": "TransientData"
        }
      },
      "description": "Represents an embedded object in an update. This is a wrapper class that can contain a single specific item proto in an extension field. Think of it as a base class like `Message` in Java. Each item proto must declare that it extends this proto: message ExampleObject { option (item_type) = EXAMPLE_OBJECT; extend EmbedClientItem { optional ExampleObject example_object = ; } } See go/es-embeds for details.",
      "id": "EmbedClientItem",
      "type": "object"
    },
    "GetSearchApplicationSessionStatsResponse": {
      "properties": {
        "stats": {
          "items": {
            "$ref": "SearchApplicationSessionStats"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "GetSearchApplicationSessionStatsResponse"
    },
    "ContextAttribute": {
      "properties": {
        "values": {
          "type": "array",
          "description": "Text values of the attribute. The maximum number of elements is 10. The maximum length of an element in the array is 32 characters. The value will be normalized (lower-cased) before being matched.",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the attribute. It should not be empty. The maximum length is 32 characters. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The name will be normalized (lower-cased) before being matched.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ContextAttribute",
      "description": "A named attribute associated with an item which can be used for influencing the ranking of the item based on the context in the request."
    },
    "MessageInfo": {
      "id": "MessageInfo",
      "properties": {
        "searcherMembershipState": {
          "enumDescriptions": [
            "Default state, do not use",
            "An invitation to the space has been sent",
            "User has joined the space",
            "User is not a member",
            "This state should never be stored in Spanner. It is a state for responses to the clients to indicate that membership mutations have failed and the member is in its previous state."
          ],
          "description": "Searcher's membership state in the space where the message is posted.",
          "type": "string",
          "enum": [
            "MEMBER_UNKNOWN",
            "MEMBER_INVITED",
            "MEMBER_JOINED",
            "MEMBER_NOT_A_MEMBER",
            "MEMBER_FAILED"
          ]
        },
        "message": {
          "description": "The content of a matching message.",
          "$ref": "Message"
        }
      },
      "type": "object"
    },
    "SheetsClientActionMarkup": {
      "properties": {
        "customFunctionReturnValueMarkup": {
          "$ref": "CustomFunctionReturnValueMarkup"
        }
      },
      "id": "SheetsClientActionMarkup",
      "type": "object"
    },
    "IndexItemOptions": {
      "id": "IndexItemOptions",
      "type": "object",
      "properties": {
        "allowUnknownGsuitePrincipals": {
          "description": "Specifies if the index request should allow Google Workspace principals that do not exist or are deleted.",
          "type": "boolean"
        }
      }
    },
    "BabelMessageProps": {
      "id": "BabelMessageProps",
      "properties": {
        "clientGeneratedId": {
          "type": "string",
          "description": "Babel clients locally generate this ID to dedupe against the async fanout.",
          "format": "int64"
        },
        "messageContent": {
          "$ref": "ChatConserverMessageContent",
          "description": "Stores message segments (text content) and attachments (media URLs)."
        },
        "wasUpdatedByBackfill": {
          "description": "Whether or not these message properties were backfilled by go/dinnertrain.",
          "type": "boolean"
        },
        "eventId": {
          "type": "string",
          "description": "Primary identifier used by Hangouts Classic for its events (messages)."
        },
        "contentExtension": {
          "description": "Stores additional Babel-specific properties (such as event metadata).",
          "$ref": "ChatContentExtension"
        },
        "deliveryMedium": {
          "description": "Stores the delivery source of messages (such as phone number for SMS).",
          "$ref": "DeliveryMedium"
        }
      },
      "description": "Container for Babel (Hangouts Classic) only message properties. The properties here will not be consumed by Dynamite clients. They are relevant only for Hangouts Classic.",
      "type": "object"
    },
    "TimestampValues": {
      "description": "List of timestamp values.",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "format": "google-datetime",
            "type": "string"
          }
        }
      },
      "id": "TimestampValues",
      "type": "object"
    },
    "GoogleChatV1WidgetMarkupOpenLink": {
      "type": "object",
      "id": "GoogleChatV1WidgetMarkupOpenLink",
      "description": "A link that opens a new window.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to open."
        }
      }
    },
    "AclInfo": {
      "description": "Next tag: 4",
      "properties": {
        "groupsCount": {
          "description": "Number of groups which have at least read access to the document.",
          "format": "int32",
          "type": "integer"
        },
        "usersCount": {
          "description": "Number of users which have at least read access to the document.",
          "format": "int32",
          "type": "integer"
        },
        "scope": {
          "type": "string",
          "description": "The scope to which the content was shared.",
          "enum": [
            "LIMITED",
            "DASHER_DOMAIN_WITH_LINK",
            "DASHER_DOMAIN",
            "PUBLIC_WITH_LINK",
            "PUBLIC",
            "TEAM_DRIVE"
          ],
          "enumDescriptions": [
            "Explicit set of people and groups.",
            "Anybody at the same domain with the link.",
            "Now it works only for google.com. Anybody at the same domain. Now it works only",
            "for google.com. Anybody with the link.",
            "Anybody.",
            "Special tag to indicate TeamDrive scope."
          ]
        }
      },
      "id": "AclInfo",
      "type": "object"
    },
    "AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage": {
      "properties": {},
      "type": "object",
      "description": "Used for task card attachments on custom user messages that should be kept as is without generating an i18n event message, e.g. the user starts a conversation from an existing task. IMPORTANT: please don't populate this field yet as it could break existing flows until it's implemented. See code at http://shortn/_CM74CdENMx used by http://shortn/_5o85POJY8Q.",
      "id": "AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage"
    },
    "ReadReceiptsSettingsUpdatedMetadata": {
      "id": "ReadReceiptsSettingsUpdatedMetadata",
      "type": "object",
      "properties": {
        "readReceiptsEnabled": {
          "type": "boolean",
          "description": "The new read receipts state."
        }
      }
    },
    "AbuseReportingConfig": {
      "properties": {
        "writtenUgcAllowed": {
          "description": "Whether the current call may include user generated content (chat, polls, Q&A...) in its abuse reports.",
          "type": "boolean"
        },
        "recordingAllowed": {
          "description": "Whether the current call may include video recordings in its abuse reports.",
          "type": "boolean"
        }
      },
      "id": "AbuseReportingConfig",
      "type": "object",
      "description": "Abuse reporting configuration outlining what is supported in this conference."
    },
    "ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata": {
      "properties": {},
      "id": "ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata",
      "type": "object",
      "description": "A Calendar event message in Dynamite."
    },
    "GetCustomerSessionStatsResponse": {
      "properties": {
        "stats": {
          "items": {
            "$ref": "CustomerSessionStats"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "GetCustomerSessionStatsResponse"
    },
    "ItemAcl": {
      "id": "ItemAcl",
      "type": "object",
      "description": "Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).",
      "properties": {
        "owners": {
          "type": "array",
          "items": {
            "$ref": "Principal"
          },
          "description": "Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5."
        },
        "readers": {
          "type": "array",
          "items": {
            "$ref": "Principal"
          },
          "description": "List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000."
        },
        "aclInheritanceType": {
          "description": "Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.",
          "enumDescriptions": [
            "The default value when this item does not inherit an ACL. Use NOT_APPLICABLE when inheritAclFrom is empty. An item without ACL inheritance can still have ACLs supplied by its own readers and deniedReaders fields.",
            "During an authorization conflict, the ACL of the child item determines its read access.",
            "During an authorization conflict, the ACL of the parent item specified in the inheritAclFrom field determines read access.",
            "Access is granted only if this item and the parent item specified in the inheritAclFrom field both permit read access."
          ],
          "type": "string",
          "enum": [
            "NOT_APPLICABLE",
            "CHILD_OVERRIDE",
            "PARENT_OVERRIDE",
            "BOTH_PERMIT"
          ]
        },
        "inheritAclFrom": {
          "type": "string",
          "description": "The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters."
        },
        "deniedReaders": {
          "type": "array",
          "description": "List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.",
          "items": {
            "$ref": "Principal"
          }
        }
      }
    },
    "IntegerValues": {
      "type": "object",
      "id": "IntegerValues",
      "description": "List of integer values.",
      "properties": {
        "values": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "TextOperatorOptions": {
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the text property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:\u003cvalue\u003e* show results only where the value of the property named *subjectLine* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any text properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "exactMatchWithOperator": {
          "description": "If true, the text value is tokenized as one atomic value in operator searches and facet matches. For example, if the operator name is \"genre\" and the value is \"science-fiction\" the query restrictions \"genre:science\" and \"genre:fiction\" doesn't match the item; \"genre:science-fiction\" does. Text value matching is case-sensitive and does not remove special characters. If false, the text is tokenized. For example, if the value is \"science-fiction\" the queries \"genre:science\" and \"genre:fiction\" matches the item.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "TextOperatorOptions",
      "description": "Used to provide a search operator for text properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "ConsentedAppUnfurlMetadata": {
      "id": "ConsentedAppUnfurlMetadata",
      "properties": {
        "clientSpecifiedAppId": {
          "description": "Client specified AppId, which will not be sanitized and is untrusted.",
          "$ref": "UserId"
        }
      },
      "type": "object",
      "description": "Annotation metadata app unfurl consent."
    },
    "PrincipalProto": {
      "description": "A Principal represents something to which permissions are assigned, often but not always a user or group of some kind. It is most appropriate for use in ACLs and authorization checks. Callers should prefer to use the wrapper classes in google3/security/credentials/public/principal.h google3/java/com/google/security/credentials/Principal.java google3/security/credentials/go/principal.go unless direct proto access is essential. If you update this protocol buffer, please update the wrapper classes as well. LINT.IfChange",
      "id": "PrincipalProto",
      "properties": {
        "capTokenHolder": {
          "description": "scope = CAP_TOKEN_HOLDER",
          "$ref": "CapTokenHolderProto"
        },
        "rbacRole": {
          "description": "scope = RBAC_ROLE",
          "$ref": "RbacRoleProto"
        },
        "zwiebackSession": {
          "description": "scope = ZWIEBACK_SESSION",
          "$ref": "ZwiebackSessionProto"
        },
        "oauthConsumer": {
          "description": "scope = OAUTH_CONSUMER;",
          "$ref": "OAuthConsumerProto"
        },
        "mdbGroup": {
          "description": "scope = MDB_GROUP",
          "$ref": "MdbGroupProto"
        },
        "gaiaUser": {
          "description": "scope = GAIA_USER",
          "$ref": "GaiaUserProto"
        },
        "rbacSubject": {
          "$ref": "RbacSubjectProto",
          "description": "scope = RBAC_SUBJECT"
        },
        "gaiaGroup": {
          "$ref": "GaiaGroupProto",
          "description": "scope = GAIA_GROUP"
        },
        "signingKeyPossessor": {
          "$ref": "SigningKeyPossessorProto",
          "description": "scope = SIGNING_KEY_POSSESSOR"
        },
        "mdbUser": {
          "description": "scope = MDB_USER",
          "$ref": "MdbUserProto"
        },
        "postiniUser": {
          "$ref": "PostiniUserProto",
          "description": "scope = POSTINI_USER"
        },
        "chat": {
          "$ref": "ChatProto",
          "description": "scope = CHAT"
        },
        "allAuthenticatedUsers": {
          "description": "scope = ALL_AUTHENTICATED_USERS",
          "$ref": "AllAuthenticatedUsersProto"
        },
        "contactGroup": {
          "description": "scope = CONTACT_GROUP",
          "$ref": "ContactGroupProto"
        },
        "ldapUser": {
          "$ref": "LdapUserProto",
          "description": "scope = LDAP_USER"
        },
        "resourceRole": {
          "$ref": "ResourceRoleProto",
          "description": "scope = RESOURCE_ROLE"
        },
        "socialGraphNode": {
          "description": "scope = SOCIAL_GRAPH_NODE",
          "$ref": "SocialGraphNodeProto"
        },
        "host": {
          "description": "scope = HOST",
          "$ref": "HostProto"
        },
        "event": {
          "$ref": "EventProto",
          "description": "scope = EVENT"
        },
        "circle": {
          "$ref": "CircleProto",
          "description": "scope = CIRCLE"
        },
        "youtubeUser": {
          "description": "scope = YOUTUBE_USER",
          "$ref": "YoutubeUserProto"
        },
        "simpleSecretHolder": {
          "description": "scope = SIMPLE_SECRET_HOLDER",
          "$ref": "SimpleSecretHolderProto"
        },
        "cloudPrincipal": {
          "description": "scope = CLOUD_PRINCIPAL",
          "$ref": "CloudPrincipalProto"
        },
        "scope": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "next tag: 29"
          ],
          "type": "string",
          "description": "This is only optional because required enums cannot be extended. Currently required.",
          "enum": [
            "INVALID",
            "GAIA_USER",
            "GAIA_GROUP",
            "LDAP_USER",
            "LDAP_GROUP",
            "MDB_USER",
            "MDB_GROUP",
            "POSTINI_USER",
            "CONTACT_GROUP",
            "SIMPLE_SECRET_HOLDER",
            "SIGNING_KEY_POSSESSOR",
            "ALL_AUTHENTICATED_USERS",
            "OAUTH_CONSUMER",
            "HOST",
            "SOCIAL_GRAPH_NODE",
            "EMAIL_OWNER",
            "CAP_TOKEN_HOLDER",
            "CIRCLE",
            "SQUARE",
            "EVENT",
            "RESOURCE_ROLE",
            "CHAT",
            "YOUTUBE_USER",
            "UNUSED_ZWIEBACK_SESSION",
            "ZWIEBACK_SESSION",
            "RBAC_ROLE",
            "RBAC_SUBJECT",
            "CLOUD_PRINCIPAL"
          ]
        },
        "emailOwner": {
          "$ref": "EmailOwnerProto",
          "description": "scope = EMAIL_OWNER"
        },
        "square": {
          "description": "scope = SQUARE",
          "$ref": "SquareProto"
        },
        "ldapGroup": {
          "description": "scope = LDAP_GROUP",
          "$ref": "LdapGroupProto"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedJustification": {
      "properties": {
        "actionType": {
          "description": "Type of action performed on the document.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified action.",
            "Commented on document.",
            "Created document.",
            "Edited document.",
            "Presented document.",
            "Shared document.",
            "Viewed document.",
            "Resolved comment on document.",
            "Sent document over chat/email."
          ],
          "enum": [
            "ACTION_TYPE_UNSPECIFIED",
            "COMMENTED",
            "CREATED",
            "EDITED",
            "PRESENTED",
            "SHARED",
            "VIEWED",
            "COMMENT_RESOLVED",
            "SENT"
          ]
        },
        "topics": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Words or phrases from the user's query that describes the document content. (Ex: Users query is \"Can you share the document about Bullseye?\" the extracted topic would be \"Bullseye\")."
        },
        "actionTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time the action took place."
        },
        "documentOwner": {
          "$ref": "AppsDynamiteSharedJustificationPerson",
          "description": "Owner of the document."
        }
      },
      "type": "object",
      "description": "Data for rendering a justification for a document.",
      "id": "AppsDynamiteSharedJustification"
    },
    "MessageSet": {
      "properties": {},
      "description": "This is proto2's version of MessageSet.",
      "type": "object",
      "id": "MessageSet"
    },
    "AppsDynamiteStorageTextInput": {
      "properties": {
        "label": {
          "description": "At least one of label and hintText must be specified.",
          "type": "string"
        },
        "initialSuggestions": {
          "description": "The initial suggestions made before any user input.",
          "$ref": "AppsDynamiteStorageSuggestions"
        },
        "name": {
          "description": "The name of the text input which is used in formInput.",
          "type": "string"
        },
        "type": {
          "description": "The style of the text, for example, a single line or multiple lines.",
          "type": "string",
          "enumDescriptions": [
            "The text is put into a single line.",
            "The text is put into multiple lines."
          ],
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ]
        },
        "value": {
          "type": "string",
          "description": "The default value when there is no input from the user."
        },
        "hintText": {
          "type": "string",
          "description": "The hint text."
        },
        "autoCompleteAction": {
          "description": "The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion items.",
          "$ref": "AppsDynamiteStorageAction"
        },
        "onChangeAction": {
          "$ref": "AppsDynamiteStorageAction",
          "description": "The onChange action, for example, invoke a function."
        }
      },
      "description": "A text input is a UI item where users can input text. A text input can also have an onChange action and suggestions.",
      "type": "object",
      "id": "AppsDynamiteStorageTextInput"
    },
    "AppsDynamiteStorageIcon": {
      "type": "object",
      "properties": {
        "altText": {
          "description": "The description of the icon, used for accessibility. The default value is provided if you don't specify one.",
          "type": "string"
        },
        "knownIcon": {
          "description": "The icon specified by the string name of a list of known icons",
          "type": "string"
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        },
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "description": "The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon.",
          "type": "string",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ]
        }
      },
      "id": "AppsDynamiteStorageIcon"
    },
    "AckInfo": {
      "properties": {
        "unackedDeviceIds": {
          "items": {
            "type": "string"
          },
          "description": "Output only. IDs of meeting devices (at most ten are provided) that have not acked yet.",
          "readOnly": true,
          "type": "array"
        },
        "unackedDeviceCount": {
          "description": "Output only. Number of meeting devices that have not acked yet.",
          "type": "integer",
          "readOnly": true,
          "format": "int32"
        }
      },
      "type": "object",
      "description": "Information about how devices in a meeting have acked for a session/operation.",
      "id": "AckInfo"
    },
    "SearchApplicationUserStats": {
      "type": "object",
      "properties": {
        "thirtyDaysActiveUsersCount": {
          "format": "int64",
          "type": "string",
          "description": "The count of unique active users in the past thirty days"
        },
        "oneDayActiveUsersCount": {
          "format": "int64",
          "description": "The count of unique active users in the past one day",
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned."
        },
        "sevenDaysActiveUsersCount": {
          "type": "string",
          "description": "The count of unique active users in the past seven days",
          "format": "int64"
        }
      },
      "id": "SearchApplicationUserStats"
    },
    "Interaction": {
      "properties": {
        "type": {
          "enum": [
            "UNSPECIFIED",
            "VIEW",
            "EDIT"
          ],
          "type": "string",
          "enumDescriptions": [
            "Invalid value.",
            "This interaction indicates the user viewed the item.",
            "This interaction indicates the user edited the item."
          ]
        },
        "interactionTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded."
        },
        "principal": {
          "$ref": "Principal",
          "description": "The user that acted on the item."
        }
      },
      "type": "object",
      "id": "Interaction",
      "description": "Represents an interaction between a user and an item."
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkup": {
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkup",
      "type": "object",
      "properties": {
        "conferenceSolutionId": {
          "description": "An identifier of the conferencing solution. Must match a value from the deployment's `calendar.conferenceSolution.id` field.",
          "type": "string"
        },
        "note": {
          "description": "Additional notes (such as instructions from the administrator, legal notices) to display to the user. Can contain HTML. Max length 2048 characters.",
          "type": "string"
        },
        "parameters": {
          "description": "Additional add-on parameters. Maximum 300 parameters are allowed.",
          "items": {
            "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupParameter"
          },
          "type": "array"
        },
        "error": {
          "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError",
          "description": "If set, it means an error occurred during conference creation."
        },
        "entryPoints": {
          "items": {
            "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup"
          },
          "description": "Entry points to the conference. Maximum 300 entry points are allowed.",
          "type": "array"
        },
        "conferenceId": {
          "description": "Unique identifier for this conference data. Maximum 512 characters long.",
          "type": "string"
        }
      },
      "description": "Markup that defines conference data associated to a Google Calendar event."
    },
    "EmailOwnerProto": {
      "description": "Represents a verified owner of the given email address. Note that a single address may have many owners, and a single user may own many addresses. (All lower-case, in display form -- see com.google.gaia.client.GaiaEmail)",
      "type": "object",
      "id": "EmailOwnerProto",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupParameter": {
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupParameter",
      "type": "object",
      "description": "Solution-specific parameters that are persisted with the event data and, if an update or delete is needed, are passed to the add-on. For example: `[{key: 'sessionKey', value: '123'}, {key: 'meetingId', value: '456'}]`",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the parameter. Maximum 50 characters long. Required."
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter. Maximum 1024 characters long. Required."
        }
      }
    },
    "SuggestRequest": {
      "description": "Request of suggest API.",
      "type": "object",
      "id": "SuggestRequest",
      "properties": {
        "dataSourceRestrictions": {
          "items": {
            "$ref": "DataSourceRestriction"
          },
          "description": "The sources to use for suggestions. If not specified, the data sources are taken from the current search application. NOTE: Suggestions are only supported for the following sources: * Third-party data sources * PredefinedSource.PERSON * PredefinedSource.GOOGLE_DRIVE",
          "type": "array"
        },
        "query": {
          "description": "Partial query for which autocomplete suggestions will be shown. For example, if the query is \"sea\", then the server might return \"season\", \"search\", \"seagull\" and so on.",
          "type": "string"
        },
        "requestOptions": {
          "$ref": "RequestOptions",
          "description": "Request options, such as the search application and user timezone."
        }
      }
    },
    "AppsDynamiteStorageButton": {
      "properties": {
        "onClick": {
          "$ref": "AppsDynamiteStorageOnClick",
          "description": "The action to perform when the button is clicked."
        },
        "altText": {
          "description": "The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead.",
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "description": "If true, the button is displayed in a disabled state and doesn't respond to user actions."
        },
        "color": {
          "$ref": "Color",
          "description": "If set, the button is filled with a solid background."
        },
        "text": {
          "description": "The text of the button.",
          "type": "string"
        },
        "icon": {
          "$ref": "AppsDynamiteStorageIcon",
          "description": "The icon image."
        }
      },
      "type": "object",
      "description": "A button. Can be a text button or an image button.",
      "id": "AppsDynamiteStorageButton"
    },
    "BooleanOperatorOptions": {
      "id": "BooleanOperatorOptions",
      "type": "object",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the operator name required in the query in order to isolate the boolean property. For example, if operatorName is *closed* and the property's name is *isClosed*, then queries like *closed:\u003cvalue\u003e* show results only where the value of the property named *isClosed* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        }
      },
      "description": "Used to provide a search operator for boolean properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched."
    },
    "PersonalLabelTag": {
      "id": "PersonalLabelTag",
      "type": "object",
      "properties": {
        "labelId": {
          "description": "A string ID representing the label. Possible ID values are documented at go/chat-labels-howto:ids. Examples: \"^t\" for \"Starred\", \"^nu\" for \"Nudged\".",
          "type": "string"
        }
      },
      "description": "An individual instance (or \"tag\") of a label configured as a personal type that's associated with a message."
    },
    "CustomFunctionReturnValueMarkup": {
      "id": "CustomFunctionReturnValueMarkup",
      "type": "object",
      "description": "The result of a user running a custom function.",
      "properties": {
        "errorMessage": {
          "description": "The error message to show to the user if something went wrong.",
          "type": "string"
        },
        "value": {
          "type": "any",
          "description": "The value that resulted from running the custom function."
        }
      }
    },
    "ContentReport": {
      "type": "object",
      "properties": {
        "reportJustification": {
          "$ref": "ContentReportJustification",
          "description": "Additional user-provided justification on the report. Optional."
        },
        "revisionCreateTimestamp": {
          "type": "string",
          "format": "google-datetime",
          "description": "Create timestamp of the revisions of the message when it's reported. Always populated when it is in a response."
        },
        "reporterUserId": {
          "$ref": "UserId",
          "description": "User ID of the reporter. Always populated when it is in a response."
        },
        "reportType": {
          "$ref": "AppsDynamiteSharedContentReportType",
          "description": "Type of the report. Always populated when it is in a response."
        },
        "reportCreateTimestamp": {
          "type": "string",
          "description": "The time at which the report is generated. Always populated when it is in a response.",
          "format": "google-datetime"
        }
      },
      "id": "ContentReport"
    },
    "StreamViewerStats": {
      "properties": {
        "estimatedViewerCount": {
          "type": "string",
          "description": "The estimate of the current viewer count.",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "Information about viewers of the stream.",
      "id": "StreamViewerStats"
    },
    "ResultDisplayMetadata": {
      "type": "object",
      "properties": {
        "objectTypeLabel": {
          "description": "The display label for the object.",
          "type": "string"
        },
        "metalines": {
          "description": "The metalines content to be displayed with the result.",
          "items": {
            "$ref": "ResultDisplayLine"
          },
          "type": "array"
        }
      },
      "id": "ResultDisplayMetadata"
    },
    "InsertContent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "The content to be inserted."
        },
        "contentType": {
          "enum": [
            "UNSPECIFIED_CONTENT_TYPE",
            "TEXT",
            "MUTABLE_HTML",
            "IMMUTABLE_HTML"
          ],
          "type": "string",
          "description": "The type of inserted content.",
          "enumDescriptions": [
            "Default value when nothing is set for ContentType.",
            "Specifies that the content is in plain text.",
            "Specifies that the content is in HTML and is mutable (can be edited).",
            "Specifies that the content is in HTML and is immutable (cannot be edited)."
          ]
        },
        "mimeType": {
          "enumDescriptions": [
            "Default value when nothing is set for EmailMimeType.",
            "Specifies that the inserted content is in plain text.",
            "Specifies that the inserted content is in HTML."
          ],
          "enum": [
            "UNSPECIFIED_EMAIL_MIME_TYPE",
            "PLAIN_TEXT",
            "HTML"
          ],
          "type": "string"
        }
      },
      "id": "InsertContent"
    },
    "PhoneNumber": {
      "properties": {
        "phoneNumber": {
          "description": "The phone number of the person.",
          "type": "string"
        },
        "type": {
          "enum": [
            "OTHER",
            "MOBILE",
            "OFFICE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object",
      "id": "PhoneNumber",
      "description": "A person's Phone Number"
    },
    "AclFixStatus": {
      "type": "object",
      "id": "AclFixStatus",
      "description": "The message reconstructed based on information in the response of /PermissionFixOptionsService.Query (or the Apiary API that wraps it). Indicates the ability of the requester to change the access to the Drive file for the room roster or the DM members. Used in GetMessagePreviewMetadataResponse only.",
      "properties": {
        "outOfDomainWarningEmailAddress": {
          "items": {
            "type": "string"
          },
          "description": "List of recipient email addresses for which an out-of-domain-sharing warning must be shown, stating that these email addresses are not in the Google Apps organization that the requested item belong to. Empty if all recipients are in the same Google Apps organization.",
          "type": "array"
        },
        "fixability": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "ALREADY_ACCESSIBLE",
            "CAN_FIX",
            "CANNOT_FIX",
            "ACL_FIXER_ERROR"
          ],
          "type": "string"
        },
        "fixableEmailAddress": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of recipient email addresses for which access can be granted. This field contains the same email addresses from the GetMessagePreviewMetadata request if all recipients can be successfully added to the ACL as determined by Drive ACL Fixer. For now, the field is non-empty if and only if the \"fixability\" value is \"CAN_FIX\"."
        }
      }
    },
    "OsVersion": {
      "id": "OsVersion",
      "type": "object",
      "properties": {
        "majorVersion": {
          "format": "int32",
          "type": "integer"
        },
        "minorVersion": {
          "format": "int32",
          "type": "integer"
        },
        "tertiaryVersion": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DataSource": {
      "properties": {
        "shortName": {
          "type": "string",
          "description": "A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *\u003cvalue\u003e* then queries like *source:\u003cvalue\u003e* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters."
        },
        "itemsVisibility": {
          "items": {
            "$ref": "GSuitePrincipal"
          },
          "type": "array",
          "description": "This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility."
        },
        "returnThumbnailUrls": {
          "description": "Can a user request to get thumbnail URI for Items indexed in this data source.",
          "type": "boolean"
        },
        "indexingServiceAccounts": {
          "description": "List of service accounts that have indexing access.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disableServing": {
          "description": "Disable serving any search or assist results.",
          "type": "boolean"
        },
        "displayName": {
          "description": "Required. Display name of the datasource The maximum length is 300 characters.",
          "type": "string"
        },
        "disableModifications": {
          "type": "boolean",
          "description": "If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data."
        },
        "operationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IDs of the Long Running Operations (LROs) currently running for this schema."
        },
        "name": {
          "type": "string",
          "description": "The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource."
        }
      },
      "id": "DataSource",
      "type": "object",
      "description": "Datasource is a logical namespace for items to be indexed. All items must belong to a datasource. This is the prerequisite before items can be indexed into Cloud Search."
    },
    "AppsDynamiteSharedCalendarEventAnnotationData": {
      "type": "object",
      "properties": {
        "calendarEvent": {
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent"
        },
        "eventCreation": {
          "description": "Notification about the creation of an event.",
          "$ref": "AppsDynamiteSharedCalendarEventAnnotationDataEventCreation"
        }
      },
      "id": "AppsDynamiteSharedCalendarEventAnnotationData"
    },
    "TransientData": {
      "properties": {},
      "description": "Transient generic data that will not be saved on the server.",
      "type": "object",
      "id": "TransientData"
    },
    "MessageProps": {
      "description": "Container for storing properties applicable to messages. For now (until storage consolidation is complete), it will only be used for babel props. In the future it could be used to house Dynamite properties for experimenting/rapid prototyping.",
      "type": "object",
      "properties": {
        "babelProps": {
          "$ref": "BabelMessageProps"
        }
      },
      "id": "MessageProps"
    },
    "CustomerQueryStats": {
      "id": "CustomerQueryStats",
      "type": "object",
      "properties": {
        "date": {
          "description": "The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned.",
          "$ref": "Date"
        },
        "queryCountByStatus": {
          "type": "array",
          "items": {
            "$ref": "QueryCountByStatus"
          }
        }
      }
    },
    "EnumValues": {
      "id": "EnumValues",
      "type": "object",
      "description": "List of enum values.",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "description": "The maximum allowable length for string values is 32 characters.",
          "type": "array"
        }
      }
    },
    "AclFixRequest": {
      "description": "The request set by clients to instruct Backend how the user intend to fix the ACL. Technically it's not a request to ACL Fixer, because Backend uses /DriveService.Share to modify Drive ACLs.",
      "properties": {
        "recipientEmails": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "For Spaces messages: This field is ignored. For DMs messages: The list of email addresses that should be added to the Drive item's ACL. In general, the list should not be empty when the boolean \"should_fix\" field is set; otherwise, the list should be empty. During transition - when clients do not specify this field but the \"should_fix\" is true, we follow the legacy behavior: share to all users in the DM regardless of emails. This behavior is being phased out."
        },
        "shouldFix": {
          "description": "Whether to attempt to fix the ACL by adding the room or DM members to the Drive file's ACL.",
          "type": "boolean"
        },
        "role": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "UNKNOWN",
            "READER",
            "COMMENTER",
            "WRITER"
          ]
        }
      },
      "type": "object",
      "id": "AclFixRequest"
    },
    "AppsDynamiteStorageColumnsColumnWidgets": {
      "properties": {
        "textInput": {
          "description": "TextInput widget.",
          "$ref": "AppsDynamiteStorageTextInput"
        },
        "selectionInput": {
          "description": "SelectionInput widget.",
          "$ref": "AppsDynamiteStorageSelectionInput"
        },
        "decoratedText": {
          "$ref": "AppsDynamiteStorageDecoratedText",
          "description": "DecoratedText widget."
        },
        "image": {
          "$ref": "AppsDynamiteStorageImage",
          "description": "Image widget."
        },
        "dateTimePicker": {
          "$ref": "AppsDynamiteStorageDateTimePicker",
          "description": "DateTimePicker widget."
        },
        "buttonList": {
          "description": "ButtonList widget.",
          "$ref": "AppsDynamiteStorageButtonList"
        },
        "textParagraph": {
          "description": "Text paragraph widget.",
          "$ref": "AppsDynamiteStorageTextParagraph"
        }
      },
      "id": "AppsDynamiteStorageColumnsColumnWidgets",
      "description": "LINT.IfChange The `column` widget can contain these widgets.",
      "type": "object"
    },
    "LegacyUploadMetadata": {
      "properties": {
        "uploadMetadata": {
          "description": "The blob in this UploadMetadata has been uploaded to shared drive. This UploadMetadata is no longer attached to a message. go/shared-drive-data-migration.",
          "$ref": "UploadMetadata"
        },
        "legacyUniqueId": {
          "description": "A unique ID generated from legacy UploadMetadata. This is used for interopping URLs after uploading blob to shared drive. Links in Classic might break without this. go/drive-file-attachment-interop-from-dynamite.",
          "type": "string"
        }
      },
      "id": "LegacyUploadMetadata",
      "type": "object",
      "description": "The original UploadMetadata that this DriveMetadata was converted from."
    },
    "Date": {
      "type": "object",
      "description": "Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.",
      "id": "Date",
      "properties": {
        "year": {
          "description": "Year of date. Must be from 1 to 9999.",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "description": "Month of date. Must be from 1 to 12.",
          "type": "integer",
          "format": "int32"
        },
        "day": {
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LinkData": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title is an optional field that provides a short string that describes the link or its destination. User interfaces often use title as a tooltip or for accessibility purposes. However, they are of course free to present this data in any form. This field is plain text."
        },
        "linkTarget": {
          "description": "link_target is the URL to navigate to when clicked. This could be the original URL, or a URL signed by the GWS URL signing service.",
          "type": "string"
        },
        "linkType": {
          "enumDescriptions": [
            "No link type specified.",
            "This indicates that the link target points to the same object related to this segment. Example: A YouTube link with text=\"0.07\" and link_target: \"https://www.youtube.com/watch?v=leHVmSqd4_w&t=0m07s\" points to the same YouTube video where this segment appears. See http://go/ignore-badwords-filtering-for-selflink for adding link_type design document."
          ],
          "description": "LinkType is an optional field that provides additional information regarding link target. For example, link type can be identified as the SELF_LINK when the request was executed from the same link as the link target.",
          "type": "string",
          "enum": [
            "UNKNOWN_LINK_TYPE",
            "SELF_LINK"
          ]
        },
        "displayUrl": {
          "description": "If we wish to show the user a different (e.g. shortened) version of the URL for display purposes, then that version should be set here. If this field isn't set, link_target will be used for both purposes.",
          "type": "string"
        },
        "attachmentRenderHint": {
          "description": "The hint to use when rendering the associated attachment. Ignored if there is no associated attachment.",
          "enumDescriptions": [
            "No rendering hint; should not be used (equivalent to having no hint)",
            "Render any associated attachment at the end of the block, after all sibling Segments. Leave the link in place in the text and render it normally as well.",
            "Render any associated attachment inline in the text in place of the link text, forcing a line break before and after the attachment so the text and the attachment are \"interleaved\". If this is not possible, render as if AFTER."
          ],
          "type": "string",
          "enum": [
            "ATTACHMENT_RENDER_HINT_UNKNOWN",
            "ATTACHMENT_RENDER_HINT_AFTER",
            "ATTACHMENT_RENDER_HINT_INTERLEAVED"
          ]
        },
        "attachment": {
          "description": "An Attachment represents the structured entity to which we are linking. It contains an Embed (apps/tacotown/proto/embeds/embed_client.proto) with fields specific to the appropriate type of linked entity. For example, if we are linking to a photo album, the Embed may include the album ID and gaia ID of the creator. Clients that understand the Embed type within the Attachment may construct and/or decorate their link appropriately e.g. to make use of type-specific functionality or first-party integrations. The link_target and (if appropriate) display_url fields must still be set even when an Attachment is present, so that clients who do not know how to interpret the Attachment can fall back to those fields, and render the Segment as an ordinary web link. N.B. Even when an Attachment is present, the intention of a \"LINK\" Segment is for the Segment to be presented inline with the rest of the text of a post or comment, with a clickable link or other UI suitable for inlining (though the client may modify the UI based on Attachment data, e.g. to add appropriate hovers, icons, etc.). When an entity is intended to be rendered separately from the main body of the post/comment, a separate Attachment proto can be added outside the set of Segments. N.B. Within the Attachment, fields of EmbedClientItem have their own visibility annotations, which should be enforced separately from Segment visibility annotations. See: apps/tacotown/proto/embeds/embed_annotations.proto",
          "$ref": "SocialCommonAttachmentAttachment"
        }
      },
      "id": "LinkData",
      "description": "Link metadata, for LINK segments. Anchor text should be stored in the \"text\" field of the Segment, which can also serve as a fallback."
    },
    "AutoComplete": {
      "type": "object",
      "id": "AutoComplete",
      "properties": {
        "items": {
          "items": {
            "$ref": "AutoCompleteItem"
          },
          "type": "array"
        }
      }
    },
    "SearchItemsByViewUrlRequest": {
      "type": "object",
      "properties": {
        "viewUrl": {
          "type": "string",
          "description": "Specify the full view URL to find the corresponding item. The maximum length is 2048 characters."
        },
        "debugOptions": {
          "$ref": "DebugOptions",
          "description": "Common debug options."
        },
        "pageToken": {
          "type": "string",
          "description": "The next_page_token value returned from a previous request, if any."
        }
      },
      "id": "SearchItemsByViewUrlRequest"
    },
    "AppsDynamiteSharedCustomEmoji": {
      "type": "object",
      "properties": {
        "createTimeMicros": {
          "format": "int64",
          "type": "string",
          "description": "Time when the Emoji was created, in microseconds. This field may be present in Spanner, within the server, or in public APIs."
        },
        "updateTimeMicros": {
          "format": "int64",
          "type": "string"
        },
        "creatorUserId": {
          "description": "This field should *never* be persisted to Spanner.",
          "$ref": "UserId"
        },
        "ephemeralUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. A short-lived URL clients can use for directly accessing a custom emoji image. This field is intended for API consumption, and should *never* be persisted to Spanner."
        },
        "shortcode": {
          "type": "string",
          "description": "User-provided, human-readable ID for the custom emoji. Users are expected to observe this field in the UI instead of the UUID. This shortcode should be unique within an organization, but has no global uniqueness guarantees, unlike the UUID. This field should *never* be persisted to Spanner."
        },
        "contentType": {
          "description": "Content type of the file used to upload the emoji. Used for takeout. Written to Spanner when the emoji is created.",
          "type": "string"
        },
        "readToken": {
          "type": "string",
          "description": "Opaque token that clients use to construct the URL for accessing the custom emoji’s image data. This field is intended for API consumption, and should *never* be persisted to Spanner."
        },
        "state": {
          "type": "string",
          "enum": [
            "EMOJI_STATE_UNSPECIFIED",
            "EMOJI_ENABLED",
            "EMOJI_SYSTEM_DISABLED",
            "EMOJI_HIDDEN",
            "EMOJI_DELETED"
          ],
          "description": "Snapshot of the current state of the emoji, which may differ from the source-of-truth in the CustomEmojis table. This field should *never* be persisted to Spanner.",
          "enumDescriptions": [
            "",
            "Emoji is visible and available to be used, subject to access control requirements.",
            "Emoji can no longer be used (e.g. due to a shortcode conflict), but is not removed from existing embeddings.",
            "Emoji is hidden from pickers, so new usages are not allowed, but is not removed from existing embeddings.",
            "Emoji is removed everywhere and is not available to end-users."
          ]
        },
        "blobId": {
          "type": "string",
          "description": "ID for the underlying image data in Blobstore. This field should *only* be present in Spanner or within the server, but should not be exposed in public APIs."
        },
        "uuid": {
          "description": "Unique key for a custom emoji resource. Required. This field is *always* populated.",
          "type": "string"
        },
        "deleteTimeMicros": {
          "description": "Time when the emoji was deleted, in microseconds. This field may be present in Spanner, within the server, or in public APIs. Only present if the emoji has been deleted.",
          "type": "string",
          "format": "int64"
        },
        "ownerCustomerId": {
          "description": "This field should *never* be persisted to Spanner.",
          "$ref": "CustomerId"
        }
      },
      "description": "Proto representation of a custom emoji. May be used in both APIs and in Spanner, but certain fields should be restricted to one or the other. See the per-field documentation for details. NEXT_TAG: 14",
      "id": "AppsDynamiteSharedCustomEmoji"
    },
    "FilterUpdate": {
      "id": "FilterUpdate",
      "type": "object",
      "description": "HistoryRecord for changes associated with a filter, namely: FILTER_CREATED FILTER_DELETED",
      "properties": {
        "filterCreated": {
          "$ref": "FilterCreated"
        },
        "filterDeleted": {
          "$ref": "FilterDeleted"
        },
        "filterId": {
          "type": "string"
        }
      }
    },
    "AuditLoggingSettings": {
      "properties": {
        "project": {
          "type": "string",
          "description": "The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}"
        },
        "logAdminReadActions": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc."
        },
        "logDataReadActions": {
          "type": "boolean",
          "description": "Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc."
        },
        "logDataWriteActions": {
          "description": "Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Represents the settings for Cloud audit logging",
      "id": "AuditLoggingSettings"
    },
    "QueryInterpretationConfig": {
      "type": "object",
      "properties": {
        "forceVerbatimMode": {
          "type": "boolean",
          "description": "Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental results retrieval, and usage of synonyms including custom ones. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for verbatim mode."
        },
        "forceDisableSupplementalResults": {
          "description": "Set this flag to disable supplemental results retrieval, setting a flag here will not retrieve supplemental results for queries associated with a given search application. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for supplemental results.",
          "type": "boolean"
        }
      },
      "id": "QueryInterpretationConfig",
      "description": "Default options to interpret user query."
    },
    "ReactionInfo": {
      "properties": {
        "emoji": {
          "type": "string",
          "description": "Unicode string representing a single emoji."
        }
      },
      "description": "Contains information about an emoji reaction.",
      "id": "ReactionInfo",
      "type": "object"
    },
    "ImageKeyValue": {
      "properties": {
        "icon": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Add new items in alphabetical order. Next Available ID: 34"
          ],
          "type": "string",
          "enum": [
            "NONE",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EDIT",
            "EDIT_NOTE",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "OPEN_IN_NEW",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ]
        },
        "iconUrl": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "onClick": {
          "$ref": "OnClick"
        }
      },
      "description": "This is deprecated and please use KeyValue.",
      "type": "object",
      "id": "ImageKeyValue"
    },
    "FilterOptions": {
      "type": "object",
      "id": "FilterOptions",
      "description": "Filter options to be applied on query.",
      "properties": {
        "filter": {
          "$ref": "Filter",
          "description": "Generic filter to restrict the search, such as `lang:en`, `site:xyz`."
        },
        "objectType": {
          "type": "string",
          "description": "If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum length is 256 characters."
        }
      }
    },
    "InviteeInfo": {
      "id": "InviteeInfo",
      "description": "Invitee information from a Dynamite invitation. See go/dynamite-invitee-mgmt.",
      "type": "object",
      "properties": {
        "email": {
          "description": "Email as typed by the user when invited to Room or DM. This value will be canonicalized and hashed before retained in storage.",
          "type": "string"
        },
        "userId": {
          "description": "Unique, immutable ID of the User.",
          "$ref": "UserId"
        }
      }
    },
    "DateOperatorOptions": {
      "id": "DateOperatorOptions",
      "type": "object",
      "description": "Optional. Provides a search operator for date properties. Search operators let users restrict the query to specific fields relevant to the type of item being searched.",
      "properties": {
        "operatorName": {
          "type": "string",
          "description": "Indicates the actual string required in the query in order to isolate the date property. For example, suppose an issue tracking schema object has a property named *closeDate* that specifies an operator with an operatorName of *closedon*. For searches on that data, queries like *closedon:\u003cvalue\u003e* show results only where the value of the *closeDate* property matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the indexed datasource. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters."
        },
        "greaterThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the date property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property's name is *closeDate*, then queries like *closedafter:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is later than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        },
        "lessThanOperatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the date property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property's name is *closeDate*, then queries like *closedbefore:\u003cvalue\u003e* show results only where the value of the property named *closeDate* is earlier than *\u003cvalue\u003e*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      }
    },
    "Formatting": {
      "description": "Formatting information for a segment.",
      "type": "object",
      "id": "Formatting",
      "properties": {
        "highlight": {
          "type": "boolean",
          "description": "This indicates that the segment should be rendered as highlighted or visually emphasized."
        },
        "style": {
          "enum": [
            "UNKNOWN_STYLE",
            "HEADING_1",
            "HEADING_2",
            "HEADING_3",
            "HEADING_4"
          ],
          "enumDescriptions": [
            "This represents a style that is unknown (e.g. a new style was introduced but not supported by older mobile app versions) and should generally not be used as a value in a proto. If the segment does not need to be rendered with a special style, the 'style' field should simply be left unset. A reasonable fallback for an unknown style is to render the segment in the default style.",
            "The most important heading to the least important heading.",
            "",
            "",
            ""
          ],
          "description": "If set, this indicates that the segment should be rendered with the specified style. The absence of an explicit style represents \"no style\", i.e. the segment can be rendered with the default style chosen by the application.",
          "type": "string"
        },
        "bold": {
          "type": "boolean"
        },
        "underline": {
          "type": "boolean"
        },
        "italics": {
          "type": "boolean"
        },
        "strikethrough": {
          "type": "boolean"
        }
      }
    },
    "DateValues": {
      "description": "List of date values.",
      "type": "object",
      "id": "DateValues",
      "properties": {
        "values": {
          "items": {
            "$ref": "Date"
          },
          "type": "array"
        }
      }
    },
    "Media": {
      "type": "object",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "Name of the media resource."
        }
      },
      "description": "Media resource.",
      "id": "Media"
    },
    "StartUploadItemRequest": {
      "id": "StartUploadItemRequest",
      "description": "Start upload file request.",
      "type": "object",
      "properties": {
        "connectorName": {
          "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
          "type": "string"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        }
      }
    },
    "GoogleChatV1WidgetMarkupFormActionActionParameter": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The name of the parameter for the action script."
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter."
        }
      },
      "id": "GoogleChatV1WidgetMarkupFormActionActionParameter",
      "type": "object",
      "description": "List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze 1 day, snooze next week. You might use action method = snooze(), passing the snooze type and snooze time in the list of string parameters."
    },
    "OtrModificationEvent": {
      "id": "OtrModificationEvent",
      "properties": {
        "newOtrToggle": {
          "type": "string",
          "enum": [
            "ENABLED",
            "DISABLED"
          ],
          "enumDescriptions": [
            "The conversation can be toggled",
            "The conversation cannot be toggled"
          ]
        },
        "oldOtrToggle": {
          "enum": [
            "ENABLED",
            "DISABLED"
          ],
          "enumDescriptions": [
            "The conversation can be toggled",
            "The conversation cannot be toggled"
          ],
          "type": "string"
        },
        "oldOtrStatus": {
          "type": "string",
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ],
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ]
        },
        "newOtrStatus": {
          "enumDescriptions": [
            "The conversation is completely off the record.",
            "The conversation is completely on the record."
          ],
          "enum": [
            "OFF_THE_RECORD",
            "ON_THE_RECORD"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppsDynamiteStorageColumns": {
      "description": "Represents a Columns widget that displays a single row of columns.",
      "id": "AppsDynamiteStorageColumns",
      "properties": {
        "wrapStyle": {
          "type": "string",
          "description": "Controls how the column resizes based on screen width.",
          "enumDescriptions": [
            "Unspecified.",
            "Column widgets don't wrap.",
            "Column Widgets wrap."
          ],
          "enum": [
            "WRAP_STYLE_UNSPECIFIED",
            "NOWRAP",
            "WRAP"
          ]
        },
        "columnItems": {
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteStorageColumnsColumn"
          },
          "description": "Each card supports up to 2 columns."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedAssistantFeedbackContextFeedbackChip": {
      "description": "Suggestion chips for users to indicate positive or negative feedback",
      "id": "AppsDynamiteSharedAssistantFeedbackContextFeedbackChip",
      "properties": {
        "feedbackChipType": {
          "enumDescriptions": [
            "Unspecified type of feedback chip",
            "Bad/noisy triggering",
            "Incorrect files were presented",
            "The Assistant card triggered appropriately",
            "The correct files were presented",
            "The feature is disruptive",
            "Other reason"
          ],
          "type": "string",
          "enum": [
            "FEEDBACK_CHIP_TYPE_UNSPECIFIED",
            "WRONG_TRIGGER",
            "WRONG_FILE",
            "CORRECT_TRIGGER",
            "CORRECT_FILE",
            "DISRUPTIVE",
            "OTHER"
          ],
          "description": "What type of chip to display"
        },
        "state": {
          "enum": [
            "FEEDBACK_CHIP_STATE_UNSPECIFIED",
            "SELECTED",
            "UNSELECTED"
          ],
          "enumDescriptions": [
            "Unspecified selection state",
            "Chip is selected",
            "Chip is not selected"
          ],
          "description": "Whether the chip has been selected",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedAvatarInfo": {
      "properties": {
        "emoji": {
          "$ref": "AppsDynamiteSharedEmoji"
        }
      },
      "id": "AppsDynamiteSharedAvatarInfo",
      "type": "object"
    },
    "TypeInfo": {
      "properties": {
        "videoInfo": {
          "description": "Contains additional video information only if document_type is VIDEO.",
          "$ref": "VideoInfo"
        }
      },
      "id": "TypeInfo",
      "description": "Next tag: 2",
      "type": "object"
    },
    "UpdateBccRecipients": {
      "properties": {
        "bccRecipients": {
          "type": "array",
          "items": {
            "$ref": "Recipient"
          }
        }
      },
      "type": "object",
      "id": "UpdateBccRecipients"
    },
    "GoogleChatV1ContextualAddOnMarkupCardCardAction": {
      "properties": {
        "actionLabel": {
          "description": "The label used to be displayed in the action menu item.",
          "type": "string"
        },
        "onClick": {
          "$ref": "GoogleChatV1WidgetMarkupOnClick",
          "description": "The onclick action for this action item."
        }
      },
      "description": "A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser. Not supported by Google Chat apps.",
      "type": "object",
      "id": "GoogleChatV1ContextualAddOnMarkupCardCardAction"
    },
    "SessionStateInfo": {
      "description": "Information about the state of a (recording, broadcast, transcription...) session in a conference.",
      "id": "SessionStateInfo",
      "properties": {
        "sessionState": {
          "description": "State of the session.",
          "enumDescriptions": [
            "Unspecified session state.",
            "The session is starting.",
            "The session is active/ongoing.",
            "The session has stopped."
          ],
          "enum": [
            "SESSION_STATE_UNSPECIFIED",
            "STARTING",
            "ACTIVE",
            "STOPPED"
          ],
          "type": "string"
        },
        "ackInfo": {
          "description": "Output only. The ack info of the session.",
          "$ref": "AckInfo",
          "readOnly": true
        },
        "sessionStopReason": {
          "readOnly": true,
          "enum": [
            "SESSION_STOP_REASON_UNSPECIFIED",
            "USER_ACTION",
            "STOPPED_INITIALIZATION_FAILED",
            "STOPPED_TOO_LONG",
            "STOPPED_ALL_DEVICES_LEFT",
            "STOPPED_INTERNAL_FAILURES",
            "STOPPED_YOU_TUBE_LIVE_EVENT_ENDED"
          ],
          "description": "Output only. The reason the session was transitioned to STOPPED state.",
          "enumDescriptions": [
            "Session stop reason unspecified.",
            "Stopped by user action.",
            "Stopped by the server because of an initialization failure.",
            "Stopped because the session reached the maximum duration.",
            "Stopped because there were no devices left in the conference.",
            "Stopped because of an internal error.",
            "Stopped because the broadcast event ended on YouTube."
          ],
          "type": "string"
        },
        "lastActorDeviceId": {
          "readOnly": true,
          "description": "Output only. The device id of the actor is set if the current state is a result of a user action, is empty otherwise.",
          "type": "string"
        },
        "languageConfig": {
          "description": "Immutable. The language configuration used by this session. When empty, captions will be disabled. It's a required field for transcription sessions.",
          "$ref": "LanguageConfig"
        },
        "maxEndTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The max end time of the session, at this time the session will be force stopped/terminated. Clients are expected to use this timestamp to warn users about the force stop."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedTasksAnnotationData": {
      "description": "This is the internal version of the API proto at google3/google/chat/v1/gsuite_message_integration.proto",
      "type": "object",
      "id": "AppsDynamiteSharedTasksAnnotationData",
      "properties": {
        "completionChange": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataCompletionChange"
        },
        "deletionChange": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataDeletionChange"
        },
        "taskId": {
          "type": "string",
          "description": "ID of task. Will be used to create deep links to Tasks."
        },
        "creation": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataCreation"
        },
        "taskProperties": {
          "description": "Task properties after the update has been applied.",
          "$ref": "AppsDynamiteSharedTasksAnnotationDataTaskProperties"
        },
        "assigneeChange": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataAssigneeChange"
        },
        "userDefinedMessage": {
          "$ref": "AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage"
        }
      }
    },
    "UpdateDataSourceRequest": {
      "properties": {
        "source": {
          "$ref": "DataSource"
        },
        "debugOptions": {
          "description": "Common debug options.",
          "$ref": "DebugOptions"
        },
        "updateMask": {
          "description": "Only applies to [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch). Update mask to control which fields to update. Example field paths: `name`, `displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the source, that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UpdateDataSourceRequest"
    },
    "AppsDynamiteSharedTasksAnnotationDataTaskProperties": {
      "description": "All relevant task properties for a Chat message.",
      "id": "AppsDynamiteSharedTasksAnnotationDataTaskProperties",
      "type": "object",
      "properties": {
        "deleted": {
          "description": "Whether the task is marked as deleted.",
          "type": "boolean"
        },
        "startTime": {
          "format": "google-datetime",
          "description": "Set if the task has both a date and a time. Source of truth in Tasks BE: http://shortn/_u6cr0F5ttE",
          "type": "string"
        },
        "startDate": {
          "$ref": "Date",
          "description": "Set if the task has a date but no time. Source of truth in Tasks BE: http://shortn/_wyT7eB4Ixv"
        },
        "description": {
          "type": "string",
          "description": "The description of the task. If Task original description's length is greater than 1024, then Task BE sends the truncated description to Dynamite Integration Server."
        },
        "assignee": {
          "$ref": "UserId",
          "description": "Obfuscated user ID of new assignee. Not set if the task doesn't have an assignee."
        },
        "completed": {
          "description": "Whether the task is marked as completed.",
          "type": "boolean"
        },
        "title": {
          "type": "string",
          "description": "The title of the task."
        }
      }
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "response": {
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        }
      },
      "type": "object",
      "id": "Operation"
    },
    "QuerySource": {
      "description": "List of sources that the user can search using the query API.",
      "properties": {
        "displayName": {
          "description": "Display name of the data source.",
          "type": "string"
        },
        "operators": {
          "items": {
            "$ref": "QueryOperator"
          },
          "description": "List of all operators applicable for this source.",
          "type": "array"
        },
        "shortName": {
          "description": "A short name or alias for the source. This value can be used with the 'source' operator.",
          "type": "string"
        },
        "source": {
          "description": "The name of the source",
          "$ref": "Source"
        }
      },
      "id": "QuerySource",
      "type": "object"
    },
    "AppsDynamiteSharedAssistantAnnotationData": {
      "type": "object",
      "description": "This is the internal version of the API proto at google3/google/chat/v1/gsuite_message_integration.proto Data used to render Assistant suggestions. See go/bullseye-rendering.",
      "id": "AppsDynamiteSharedAssistantAnnotationData",
      "properties": {
        "unfulfillable": {
          "description": "Set when the initial query was unfulfillable. Only an on-demand unfulfillable query will result in a response (not a proactive query). 1. On-demand: user explicitly invokes the bot 2. Proactive: bot makes proactive suggestion (when available) by listening to all user messages.",
          "$ref": "AppsDynamiteSharedAssistantUnfulfillableRequest"
        },
        "suggestion": {
          "description": "The suggestion to render in the card.",
          "$ref": "AppsDynamiteSharedAssistantSuggestion"
        }
      }
    },
    "SimpleSecretHolderProto": {
      "type": "object",
      "description": "Represents a principal which possesses a particular, presumably secret, string. Useful for things like \"auth keys,\" used for anonymous sharing. Since representing this principal with the actual secret included reveals the secret, it's best if the requisite condition is enforced in some other way, for example via Keystore wrapping attributes (Keystore will unwrap only if the specified secret, aka \"attribute\", is presented). All that's stored here is an identifying label.",
      "id": "SimpleSecretHolderProto",
      "properties": {
        "label": {
          "$ref": "SimpleSecretLabelProto",
          "description": "A descriptive label to help identify a relevant ACL entry or otherwise disambiguate this instance."
        }
      }
    },
    "AppsDynamiteSharedCallAnnotationData": {
      "description": "Data used to render Meet or Google Voice chips in Chat. See go/dynamite-calling-artifacts-in-chat.",
      "type": "object",
      "properties": {
        "callMetadata": {
          "$ref": "AppsDynamiteSharedCallMetadata",
          "description": "Required. Call metadata required to create the call artifacts. For now, the metadata contains only the call id to identify the call. This field allows additional data (e.g. voice call type) to be added if needed in the future."
        },
        "callEndedTimestamp": {
          "type": "string",
          "description": "Timestamp when the call ended. Used to render the call ended system message.",
          "format": "google-datetime"
        },
        "callStatus": {
          "enumDescriptions": [
            "Default value for the enum. DO NOT USE.",
            "Indicates that the call has started.",
            "Indicates that the call is missed.",
            "Indicates that the call has ended."
          ],
          "type": "string",
          "description": "Required. Indicates the call status for the space. Used to determine the chip's state.",
          "enum": [
            "CALL_STATUS_UNSPECIFIED",
            "CALL_STARTED",
            "CALL_MISSED",
            "CALL_ENDED"
          ]
        }
      },
      "id": "AppsDynamiteSharedCallAnnotationData"
    },
    "GetCustomerSearchApplicationStatsResponse": {
      "properties": {
        "averageSearchApplicationCount": {
          "type": "string",
          "format": "int64",
          "description": "Average search application count for the given date range."
        },
        "stats": {
          "type": "array",
          "description": "Search application stats by date.",
          "items": {
            "$ref": "CustomerSearchApplicationStats"
          }
        }
      },
      "type": "object",
      "id": "GetCustomerSearchApplicationStatsResponse",
      "description": "Response format for search application stats for a customer."
    },
    "RequestFileScopeForActiveDocument": {
      "id": "RequestFileScopeForActiveDocument",
      "type": "object",
      "properties": {}
    },
    "ItemCountByStatus": {
      "id": "ItemCountByStatus",
      "properties": {
        "statusCode": {
          "enum": [
            "CODE_UNSPECIFIED",
            "ERROR",
            "MODIFIED",
            "NEW_ITEM",
            "ACCEPTED"
          ],
          "description": "Status of the items.",
          "enumDescriptions": [
            "Input-only value. Used with Items.list to list all items in the queue, regardless of status.",
            "Error encountered by Cloud Search while processing this item. Details of the error are in repositoryError.",
            "Item has been modified in the repository, and is out of date with the version previously accepted into Cloud Search.",
            "Item is known to exist in the repository, but is not yet accepted by Cloud Search. An item can be in this state when Items.push has been called for an item of this name that did not exist previously.",
            "API has accepted the up-to-date data of this item."
          ],
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "string",
          "description": "Number of items matching the status code."
        },
        "indexedItemsCount": {
          "type": "string",
          "description": "Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "DeepLinkData": {
      "properties": {
        "url": {
          "description": "Analogous web presence. Used as desktop fallback or when no native link data is present.",
          "type": "string"
        },
        "client": {
          "items": {
            "$ref": "PackagingServiceClient"
          },
          "description": "The data for a Google API Console client is entered by a developer during client registration and is stored in PackagingService.",
          "type": "array"
        },
        "appId": {
          "format": "int64",
          "type": "string",
          "description": "Application ID (or project ID) from Google API Console."
        },
        "deepLinkId": {
          "description": "The ID for non-URL content. Embeds may either have no analogous web presence or prefer a native mobile experience if supported. In the case of no web presence, instead of setting the \"url\" field of an embed, such developers will set this field and other content fields, e.g. thumbnail, title, description. If set, this field is used to construct the deep-link URI. Note that the native experience is preferred over the web link and the web link is used as a fallback.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DeepLinkData",
      "description": "Deep-linking data is used to construct a deep-link URI for an activity or frame's embed, such that on click, the user is taken to the right place in a mobile app. If the app is not installed, the user is taken to the app store. If not on mobile, an analogous web uri is used."
    },
    "AppsDynamiteV1ApiCompatV1Attachment": {
      "id": "AppsDynamiteV1ApiCompatV1Attachment",
      "description": "Richly formatted attachments. Documentation: - https://api.slack.com/docs/message-attachments",
      "type": "object",
      "properties": {
        "author_name": {
          "description": "User name to display as the author of the message.",
          "type": "string"
        },
        "mrkdwn_in": {
          "type": "array",
          "description": "List of fields to apply formatting to.",
          "items": {
            "type": "string"
          }
        },
        "author_link": {
          "type": "string",
          "description": "URL that the user name should link to."
        },
        "thumb_url": {
          "description": "URL of a thumbnail image to display to the right of the attachment body.",
          "type": "string"
        },
        "image_url": {
          "description": "URL of an image to display in an image chip.",
          "type": "string"
        },
        "ts": {
          "description": "UNIX timestamp of the attachment.",
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "Title string of this attachment.",
          "type": "string"
        },
        "footer_icon": {
          "description": "Avatar URL displayed to the left of the footer.",
          "type": "string"
        },
        "fields": {
          "items": {
            "$ref": "AppsDynamiteV1ApiCompatV1Field"
          },
          "type": "array",
          "description": "Columns of text inside the attachment body."
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "AppsDynamiteV1ApiCompatV1Action"
          },
          "description": "Array of actions (currently only buttons)."
        },
        "fallback": {
          "type": "string",
          "description": "Fallback plain-text string for clients that don't support attachments."
        },
        "pretext": {
          "type": "string",
          "description": "A string to show above the attachment."
        },
        "author_icon": {
          "type": "string",
          "description": "Avatar URL for the user."
        },
        "callback_id": {
          "type": "string",
          "description": "Unique identifier for the collection of buttons within this attachment. Will be sent back to the action handler URL when a button is clicked."
        },
        "footer": {
          "description": "A string displayed at the bottom of the attachment.",
          "type": "string"
        },
        "attachment_type": {
          "type": "string",
          "description": "Undocumented - used in interactive button examples. The only valid value appears to be \"default\"."
        },
        "text": {
          "description": "Main text.",
          "type": "string"
        },
        "title_link": {
          "type": "string",
          "description": "URL that the title string should link to."
        },
        "color": {
          "type": "string",
          "description": "A color \"bar\" to display to the left of the attachment."
        }
      }
    },
    "DataSourceRestriction": {
      "properties": {
        "filterOptions": {
          "description": "Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: \"objecttype\", \"type\" and \"mimetype\". For now, schema specific filters cannot be used to filter suggestions.",
          "type": "array",
          "items": {
            "$ref": "FilterOptions"
          }
        },
        "source": {
          "$ref": "Source",
          "description": "The source of restriction."
        }
      },
      "id": "DataSourceRestriction",
      "type": "object",
      "description": "Restriction on Datasource."
    },
    "AppsDynamiteStorageButtonList": {
      "properties": {
        "buttons": {
          "items": {
            "$ref": "AppsDynamiteStorageButton"
          },
          "type": "array"
        }
      },
      "description": "A list of buttons layed out horizontally.",
      "id": "AppsDynamiteStorageButtonList",
      "type": "object"
    },
    "LdapUserProto": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        }
      },
      "id": "LdapUserProto"
    },
    "CustomEmojiMetadata": {
      "properties": {
        "customEmoji": {
          "$ref": "AppsDynamiteSharedCustomEmoji"
        }
      },
      "type": "object",
      "id": "CustomEmojiMetadata"
    },
    "ChatConserverDynamitePlaceholderMetadataAttachmentMetadata": {
      "properties": {
        "filename": {
          "type": "string"
        }
      },
      "description": "An attachment uploaded in Dynamite and its filename.",
      "id": "ChatConserverDynamitePlaceholderMetadataAttachmentMetadata",
      "type": "object"
    },
    "ProcessingError": {
      "id": "ProcessingError",
      "properties": {
        "code": {
          "enum": [
            "PROCESSING_ERROR_CODE_UNSPECIFIED",
            "MALFORMED_REQUEST",
            "UNSUPPORTED_CONTENT_FORMAT",
            "INDIRECT_BROKEN_ACL",
            "ACL_CYCLE"
          ],
          "enumDescriptions": [
            "Input only value. Use this value in Items.",
            "Item's ACL, metadata, or content is malformed or in invalid state. FieldViolations contains more details on where the problem is.",
            "Countent format is unsupported.",
            "Items with incomplete ACL information due to inheriting other items with broken ACL or having groups with unmapped descendants.",
            "ACL inheritance graph formed a cycle."
          ],
          "type": "string",
          "description": "Error code indicating the nature of the error."
        },
        "fieldViolations": {
          "description": "In case the item fields are invalid, this field contains the details about the validation errors.",
          "type": "array",
          "items": {
            "$ref": "FieldViolation"
          }
        },
        "errorMessage": {
          "description": "The description of the error.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkup": {
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkup",
      "type": "object",
      "properties": {
        "addonAttachments": {
          "type": "array",
          "items": {
            "$ref": "AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkupAddonAttachment"
          }
        }
      }
    },
    "Folder": {
      "type": "object",
      "id": "Folder",
      "properties": {
        "message": {
          "type": "array",
          "description": "One for each copy of the message in the IMAP folder.",
          "items": {
            "$ref": "ImapsyncFolderAttributeFolderMessage"
          }
        },
        "id": {
          "format": "uint64",
          "type": "string",
          "description": "Folder mapping id."
        }
      }
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "items": {
            "$ref": "Operation"
          },
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array"
        }
      },
      "description": "The response message for Operations.ListOperations.",
      "type": "object"
    },
    "DriveMimeTypeRestrict": {
      "id": "DriveMimeTypeRestrict",
      "description": "Drive mime-type search restricts (e.g. \"type:pdf\").",
      "properties": {
        "type": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "PDF",
            "DOCUMENT",
            "PRESENTATION",
            "SPREADSHEET",
            "FORM",
            "DRAWING",
            "SCRIPT",
            "MAP",
            "IMAGE",
            "AUDIO",
            "VIDEO",
            "FOLDER",
            "ARCHIVE",
            "SITE"
          ]
        }
      },
      "type": "object"
    },
    "HashtagData": {
      "id": "HashtagData",
      "properties": {
        "searchText": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "Hashtag metadata, for HASHTAG segments. For a hashtag, the \"text\" field should contain the display text, and the search_text field should represent the topic being referenced, without the hash symbol; for example, we might have: text = \"#Google\" hashtag_data.search_text = \"Google\" Another example: text = \"#pikachu\" hashtag_data.search_text = \"Pokemon\" Both strings should be considered part of the searchable text. In go/sbe, both are indexed and searchable."
    },
    "ResultDisplayLine": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "ResultDisplayField"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "ResultDisplayLine",
      "description": "The collection of fields that make up a displayed line"
    },
    "Presenter": {
      "properties": {
        "copresenterDeviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The device resource names of other devices which can control the current presentation."
        },
        "presenterDeviceId": {
          "description": "The device resource name of the currently presenting device.",
          "type": "string"
        },
        "byDeviceId": {
          "description": "The device resource name of the device which requested the current presenter to be set. This field can not be modified by clients.",
          "type": "string"
        }
      },
      "description": "Presenter contains information about which device is currently presenting as well as which device requested the presenter to be set.",
      "type": "object",
      "id": "Presenter"
    },
    "InitializeCustomerRequest": {
      "properties": {},
      "description": "Request message for `InitializeCustomer` method.",
      "type": "object",
      "id": "InitializeCustomerRequest"
    },
    "LabelUpdated": {
      "id": "LabelUpdated",
      "description": "A label pref was updated outside of a rename, create, or delete.",
      "properties": {},
      "type": "object"
    },
    "TriggerKey": {
      "id": "TriggerKey",
      "properties": {
        "type": {
          "type": "string",
          "description": "A non-empty string that identifies the type of Trigger. Triggers of the same type may be batched together. The universe of values for the type field should be finite as it is used as a stats key."
        },
        "instanceId": {
          "type": "string",
          "description": "Identifier to distinguish multiple Triggers of the same type (per message or per account)."
        }
      },
      "type": "object",
      "description": "A TriggerKey (type + instance_id) uniquely identifies a trigger within a message for a message-trigger and within an account for an account-trigger."
    },
    "SourceScoringConfig": {
      "id": "SourceScoringConfig",
      "properties": {
        "sourceImportance": {
          "enum": [
            "DEFAULT",
            "LOW",
            "HIGH"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "Importance of the source."
        }
      },
      "type": "object",
      "description": "Set the scoring configuration. This allows modifying the ranking of results for a source."
    },
    "GoogleChatV1ContextualAddOnMarkupCardSection": {
      "properties": {
        "header": {
          "description": "The header of the section, text formatted supported.",
          "type": "string"
        },
        "widgets": {
          "items": {
            "$ref": "GoogleChatV1WidgetMarkup"
          },
          "type": "array",
          "description": "A section must contain at least 1 widget."
        }
      },
      "id": "GoogleChatV1ContextualAddOnMarkupCardSection",
      "type": "object",
      "description": "A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there is currently no need for layout properties (e.g. float)."
    },
    "TextPropertyOptions": {
      "id": "TextPropertyOptions",
      "type": "object",
      "description": "The options for text properties.",
      "properties": {
        "retrievalImportance": {
          "description": "Indicates the search quality importance of the tokens within the field when used for retrieval.",
          "$ref": "RetrievalImportance"
        },
        "operatorOptions": {
          "description": "If set, describes how the property should be used as a search operator.",
          "$ref": "TextOperatorOptions"
        }
      }
    },
    "RoomUpdatedMetadata": {
      "type": "object",
      "properties": {
        "initiatorType": {
          "description": "The type of the user who initiated this room update.",
          "enum": [
            "INITIATOR_TYPE_UNSPECIFIED",
            "INITIATOR_TYPE_END_USER",
            "INITIATOR_TYPE_ADMIN"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "What was updated in the room."
        },
        "groupLinkSharingEnabled": {
          "type": "boolean"
        },
        "initiator": {
          "description": "The user who initiated this room update. Complete member profiles, when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in.",
          "$ref": "User"
        },
        "renameMetadata": {
          "$ref": "RoomRenameMetadata"
        },
        "visibility": {
          "$ref": "AppsDynamiteSharedGroupVisibility",
          "description": "DEPRECATED: See GroupVisibility proto definition."
        },
        "groupDetailsMetadata": {
          "$ref": "GroupDetailsUpdatedMetadata"
        }
      },
      "id": "RoomUpdatedMetadata"
    },
    "AppsDynamiteStorageCardCardAction": {
      "type": "object",
      "id": "AppsDynamiteStorageCardCardAction",
      "properties": {
        "onClick": {
          "$ref": "AppsDynamiteStorageOnClick",
          "description": "The onclick action for this action item."
        },
        "actionLabel": {
          "description": "The label that displays as the action menu item.",
          "type": "string"
        }
      },
      "description": "A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser."
    },
    "SwitchWidget": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value is what is passed back in apps script callback."
        },
        "controlType": {
          "enum": [
            "UNSPECIFIED",
            "SWITCH",
            "CHECKBOX"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the switch widget which is will be used in FormInput."
        },
        "selected": {
          "type": "boolean"
        },
        "onChange": {
          "$ref": "FormAction"
        }
      },
      "id": "SwitchWidget",
      "type": "object"
    },
    "GroupId": {
      "type": "object",
      "id": "GroupId",
      "description": "Id representing a group that could be a space, a chat, or a direct message space. Which ID is set here will determine which group",
      "properties": {
        "dmId": {
          "description": "Unique, immutable ID of the Direct Message Space",
          "$ref": "DmId"
        },
        "spaceId": {
          "description": "Unique, immutable ID of the Space",
          "$ref": "SpaceId"
        }
      }
    },
    "AppsDynamiteSharedActivityFeedAnnotationDataUserInfo": {
      "description": "UserId of the AF item updater to show and the updater count to show.",
      "id": "AppsDynamiteSharedActivityFeedAnnotationDataUserInfo",
      "type": "object",
      "properties": {
        "updaterCountDisplayType": {
          "enumDescriptions": [
            "",
            "A precise updater count is known and the value set in updater_count_to_show should be used.",
            "A precise updater count could not be calculated, but there is at least one. Any value set in updater_count_to_show should NOT be used."
          ],
          "enum": [
            "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED",
            "EXACT_COUNT",
            "NONZERO_COUNT"
          ],
          "description": "Describes how updater_count_to_show should be used.",
          "type": "string"
        },
        "updaterToShow": {
          "description": "The updater for clients to show.",
          "$ref": "UserId"
        },
        "updaterCountToShow": {
          "type": "integer",
          "description": "The number of updaters for clients to show, currently set to the total number of updaters minus the one set in updater_to_show.",
          "format": "int32"
        }
      }
    },
    "QuotedMessageMetadata": {
      "id": "QuotedMessageMetadata",
      "description": "Quote metadata: go/message-quoting-be-dd-v2. This proto is only used on the read path. For the request proto, refer to `QuotedMessagePayload`. Fields are either derived from storage directly from the Item this metadata belongs to, or is hydrated at read time from another Item read. Note: QuotedMessageMetadata proto is similar to Message proto with less field. Reasons to differtiate QuotedMessageMetadata from Message are: 1. Not all fields for original message is applicable for quoted message. (E.g. reactions, is_inline_reply, etc.), thus separting out for confusion. 2. We don't support nested message quoting. For more detailed discussion, please see http://shortn/_VsSXQb2C7P. For future reference: if your new feature/field will be supported in message quoting feature (go/chat-quoting-prd), you will need to add that field within QuotedMessageMetadata",
      "type": "object",
      "properties": {
        "lastUpdateTimeWhenQuotedMicros": {
          "type": "string",
          "description": "The `last_update_time` of the original message when the client initiated the quote creation. This is derived from the request payload passed from clients. Used to fetch the quoted message contents at a specific time on the read path. This field is populated from storage directly.",
          "format": "int64"
        },
        "lastEditTimeMicros": {
          "readOnly": true,
          "format": "int64",
          "type": "string",
          "description": "Output only. Time when the quoted message was last edited by a user at the time when quoting action happens. Time is in microseconds."
        },
        "textBody": {
          "readOnly": true,
          "description": "Output only. Snapshot of the text body of the quoted message.",
          "type": "string"
        },
        "creatorId": {
          "$ref": "UserId",
          "readOnly": true,
          "description": "Output only. ID of the User who posted the quoted message. This includes information to identify if the quoted message was posted by an App on behalf of a user."
        },
        "messageState": {
          "type": "string",
          "description": "Output only. The state of the quoted message. Used by clients to display tombstones for quotes that reference a deleted message.",
          "readOnly": true,
          "enum": [
            "MESSAGE_STATE_UNSPECIFIED",
            "MESSAGE_STATE_ACTIVE",
            "MESSAGE_STATE_DELETED",
            "MESSAGE_STATE_OTR_EDITED"
          ],
          "enumDescriptions": [
            "",
            "The original message is present in storage and not deleted; the message contents can be hydrated.",
            "The original message has been deleted; the message contents cannot be hydrated.",
            "The OTR original message was edited and therefore no longer retrievable from storage; the message contents cannot be hydrated. See go/message-quoting-otr-edits for more context."
          ]
        },
        "retentionSettings": {
          "$ref": "AppsDynamiteSharedRetentionSettings",
          "description": "Output only. The retention (OTR) settings of the quoted message.",
          "readOnly": true
        },
        "messageId": {
          "description": "MessageId of the original message that is being quoted. This is derived from the request payload passed from clients. This field is populated from storage directly.",
          "$ref": "MessageId"
        },
        "botAttachmentState": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The bot attachment state of the quoted message. Used by clients to display a bot attachment indicator in the UI.",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "BOT_ATTACHMENT_STATE_UNSPECIFIED",
            "BOT_ATTACHMENT_STATE_HAS_BOT_ATTACHMENT",
            "BOT_ATTACHMENT_STATE_NO_BOT_ATTACHMENT"
          ]
        },
        "updaterId": {
          "$ref": "UserId",
          "readOnly": true,
          "description": "Output only. ID of the User who last updated (created/edited/deleted) the quoted message at the time when quoting action happens. This includes information to identify if the quoted message was posted by an App on behalf of a user."
        },
        "annotations": {
          "description": "Output only. Snapshot of the annotations of the quoted message.",
          "items": {
            "$ref": "Annotation"
          },
          "type": "array",
          "readOnly": true
        },
        "uploadMetadata": {
          "description": "Output only. Upload metadata of the quoted message.",
          "items": {
            "$ref": "UploadMetadata"
          },
          "readOnly": true,
          "type": "array"
        },
        "appProfile": {
          "description": "Output only. Custom display profile info for apps. Will be empty for real users.",
          "$ref": "AppsDynamiteSharedAppProfile",
          "readOnly": true
        },
        "createTimeMicros": {
          "format": "int64",
          "description": "Output only. Time when the quoted message was posted in microseconds.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "TextKeyValue": {
      "description": "This is deprecated and please use KeyValue.",
      "type": "object",
      "properties": {
        "onClick": {
          "$ref": "OnClick"
        },
        "key": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      },
      "id": "TextKeyValue"
    },
    "GmailClientActionMarkup": {
      "id": "GmailClientActionMarkup",
      "type": "object",
      "properties": {
        "openCreatedDraftActionMarkup": {
          "$ref": "OpenCreatedDraftActionMarkup"
        },
        "taskAction": {
          "$ref": "TaskActionMarkup"
        },
        "updateDraftActionMarkup": {
          "$ref": "UpdateDraftActionMarkup"
        },
        "addonComposeUiActionMarkup": {
          "$ref": "AddonComposeUiActionMarkup"
        }
      }
    },
    "AppsDynamiteStorageSuggestionsSuggestionItem": {
      "id": "AppsDynamiteStorageSuggestionsSuggestionItem",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "description": "A suggestion item. Only supports text for now.",
      "type": "object"
    },
    "UserId": {
      "id": "UserId",
      "properties": {
        "originAppId": {
          "$ref": "AppId",
          "description": "Optional. Identifier of the App involved (directly or on behalf of a human creator) in creating this message. This is not set if the user posted a message directly, but is used in the case of, for example, a message being generated by a 1P integration based on a user action (creating an event, creating a task etc). This should only be used on the BE. For clients, please use the field in the FE message proto instead (google3/apps/dynamite/v1/frontend/api/message.proto?q=origin_app_id)."
        },
        "id": {
          "description": "Opaque, server-assigned ID of the User.",
          "type": "string"
        },
        "actingUserId": {
          "description": "Optional. Opaque, server-assigned ID of the user profile associated with App/user acting on behalf of the human user. This is currently only set when a 3P application is acting on the user's behalf.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Notes on HUMAN type: 1) Leaving UserId.UserType field empty will return HUMAN as default value. This is expected because all the existing UserIds are without explicitly setting UserType, most of which are HUMAN Ids. For Bot Ids we will always set BOT in UserType field. 2) DO NOT explicitly set HUMAN as type. This is a proto2 issue, that a UserId with explicitly set default value HUMAN as type is NOT equal to an id without setting the field. aka. UserId id1 = UserId.newBuilder() .setId(\"dummy\").setType(UserType.HUMAN).build(); UserId id2 = UserId.newBuilder().setId(\"dummy\").build(); AssertThat(id1).isNotEqual(id2); AssertThat(id2.getType()).isEqualTo(UserType.HUMAN);",
            ""
          ],
          "enum": [
            "HUMAN",
            "BOT"
          ],
          "description": "Clients do not need to send UserType to Backend, but Backend will always send this field to clients per the following rule: 1. For HUMAN Ids, the field is empty but by default .getType() will return HUMAN. 2. For BOT Ids, the field is ALWAYS set to BOT."
        }
      },
      "type": "object",
      "description": "Primary key for User resource."
    },
    "CustomerUserStats": {
      "id": "CustomerUserStats",
      "properties": {
        "sevenDaysActiveUsersCount": {
          "description": "The count of unique active users in the past seven days",
          "format": "int64",
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned."
        },
        "oneDayActiveUsersCount": {
          "format": "int64",
          "description": "The count of unique active users in the past one day",
          "type": "string"
        },
        "thirtyDaysActiveUsersCount": {
          "description": "The count of unique active users in the past thirty days",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrefDeleted": {
      "description": "PREF_DELETED",
      "type": "object",
      "properties": {},
      "id": "PrefDeleted"
    },
    "PropertyDisplayOptions": {
      "properties": {
        "displayLabel": {
          "description": "The user friendly label for the property that is used if the property is specified to be displayed in ObjectDisplayOptions. If provided, the display label is shown in front of the property values when the property is part of the object display options. For example, if the property value is '1', the value by itself may not be useful context for the user. If the display name given was 'priority', then the user sees 'priority : 1' in the search results which provides clear context to search users. This is OPTIONAL; if not given, only the property values are displayed. The maximum length is 64 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The display options for a property.",
      "id": "PropertyDisplayOptions"
    },
    "DisplayedProperty": {
      "description": "A reference to a top-level property within the object that should be displayed in search results. The values of the chosen properties is displayed in the search results along with the display label for that property if one is specified. If a display label is not specified, only the values is shown.",
      "id": "DisplayedProperty",
      "properties": {
        "propertyName": {
          "type": "string",
          "description": "The name of the top-level property as defined in a property definition for the object. If the name is not a defined property in the schema, an error is given when attempting to update the schema."
        }
      },
      "type": "object"
    },
    "AppsDynamiteSharedSpaceInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "segmentedMembershipCounts": {
          "$ref": "AppsDynamiteSharedSegmentedMembershipCounts",
          "description": "Member counts object with types of members and their respective counts."
        },
        "groupId": {
          "$ref": "GroupId"
        },
        "avatarUrl": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isExternal": {
          "description": "Whether this is a space that enables guest access",
          "type": "boolean"
        },
        "userMembershipState": {
          "description": "searching user's membership state in this space",
          "enumDescriptions": [
            "Default state, do not use",
            "An invitation to the space has been sent",
            "User has joined the space",
            "User is not a member",
            "This state should never be stored in Spanner. It is a state for responses to the clients to indicate that membership mutations have failed and the member is in its previous state."
          ],
          "type": "string",
          "enum": [
            "MEMBER_UNKNOWN",
            "MEMBER_INVITED",
            "MEMBER_JOINED",
            "MEMBER_NOT_A_MEMBER",
            "MEMBER_FAILED"
          ]
        },
        "inviterEmail": {
          "type": "string",
          "description": "The email address of the user that invited the calling user to the room, if available. This field will only be populated for direct invites, it will be empty if the user was indirectly invited to the group."
        },
        "avatarInfo": {
          "$ref": "AppsDynamiteSharedAvatarInfo"
        },
        "numMembers": {
          "format": "int32",
          "description": "Deprecated. Use segmented_membership_counts instead which also includes other counts such as rosters.",
          "type": "integer"
        }
      },
      "description": "Defines the representation of a single matching space.",
      "id": "AppsDynamiteSharedSpaceInfo"
    },
    "GoogleChatV1WidgetMarkupButton": {
      "id": "GoogleChatV1WidgetMarkupButton",
      "type": "object",
      "description": "A button. Can be a text button or an image button.",
      "properties": {
        "imageButton": {
          "description": "A button with image and onclick action.",
          "$ref": "GoogleChatV1WidgetMarkupImageButton"
        },
        "textButton": {
          "$ref": "GoogleChatV1WidgetMarkupTextButton",
          "description": "A button with text and onclick action."
        }
      }
    },
    "CustomerSearchApplicationStats": {
      "description": "Search application stats for a customer for the given date.",
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "type": "string",
          "description": "The count of search applications for the date."
        },
        "date": {
          "description": "The date for which search application stats were calculated.",
          "$ref": "Date"
        }
      },
      "id": "CustomerSearchApplicationStats"
    },
    "MdbGroupProto": {
      "description": "An entity from the MDB namespace that is to be interpreted as a group. If using this for authorization, you should do an exact match of the peer role against group_name or any of the names in the Chubby expansion of the MDB group named group_name.",
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        }
      },
      "id": "MdbGroupProto"
    },
    "QueryItem": {
      "id": "QueryItem",
      "type": "object",
      "description": "Information relevant only to a query entry.",
      "properties": {
        "isSynthetic": {
          "description": "True if the text was generated by means other than a previous user search.",
          "type": "boolean"
        }
      }
    },
    "UnmappedIdentity": {
      "id": "UnmappedIdentity",
      "type": "object",
      "properties": {
        "externalIdentity": {
          "$ref": "Principal",
          "description": "The resource name for an external user."
        },
        "resolutionStatusCode": {
          "enumDescriptions": [
            "Input-only value. Used to list all unmapped identities regardless of status.",
            "The unmapped identity was not found in IDaaS, and needs to be provided by the user.",
            "The identity source associated with the identity was either not found or deleted.",
            "IDaaS does not understand the identity source, probably because the schema was modified in a non compatible way.",
            "The number of users associated with the external identity is too large.",
            "Internal error."
          ],
          "enum": [
            "CODE_UNSPECIFIED",
            "NOT_FOUND",
            "IDENTITY_SOURCE_NOT_FOUND",
            "IDENTITY_SOURCE_MISCONFIGURED",
            "TOO_MANY_MAPPINGS_FOUND",
            "INTERNAL_ERROR"
          ],
          "type": "string",
          "description": "The resolution status for the external identity."
        }
      }
    },
    "ResponseDebugInfo": {
      "type": "object",
      "description": "Debugging information about the response.",
      "id": "ResponseDebugInfo",
      "properties": {
        "formattedDebugInfo": {
          "description": "General debug info formatted for display.",
          "type": "string"
        }
      }
    },
    "SpaceId": {
      "properties": {
        "spaceId": {
          "description": "Unique, immutable ID of the Space",
          "type": "string"
        }
      },
      "id": "SpaceId",
      "description": "Primary key for Space resource.",
      "type": "object"
    },
    "QueryOperator": {
      "description": "The definition of a operator that can be used in a Search/Suggest request.",
      "properties": {
        "isReturnable": {
          "type": "boolean",
          "description": "Will the property associated with this facet be returned as part of search results."
        },
        "enumValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator."
        },
        "lessThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name that can be used to isolate the property using the less-than operator."
        },
        "isSuggestable": {
          "description": "Can get suggestions for this field.",
          "type": "boolean"
        },
        "displayName": {
          "description": "Display name of the operator",
          "type": "string"
        },
        "objectType": {
          "description": "The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.",
          "type": "string"
        },
        "isRepeatable": {
          "description": "Indicates if multiple values can be set for this property.",
          "type": "boolean"
        },
        "isSortable": {
          "type": "boolean",
          "description": "Can this operator be used to sort results."
        },
        "isFacetable": {
          "description": "Can this operator be used to get facets.",
          "type": "boolean"
        },
        "operatorName": {
          "type": "string",
          "description": "The name of the operator."
        },
        "type": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "INTEGER",
            "DOUBLE",
            "TIMESTAMP",
            "BOOLEAN",
            "ENUM",
            "DATE",
            "TEXT",
            "HTML"
          ],
          "description": "The type of the operator.",
          "enumDescriptions": [
            "Invalid value.",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "greaterThanOperatorName": {
          "type": "string",
          "description": "Indicates the operator name that can be used to isolate the property using the greater-than operator."
        }
      },
      "type": "object",
      "id": "QueryOperator"
    },
    "LabelRemoved": {
      "type": "object",
      "id": "LabelRemoved",
      "description": "A label was removed from some (subset of the) messages in this thread.",
      "properties": {
        "labelName": {
          "type": "string"
        },
        "messageKeys": {
          "items": {
            "$ref": "MultiKey"
          },
          "type": "array"
        },
        "syncId": {
          "type": "integer",
          "format": "uint32"
        },
        "labelId": {
          "type": "string"
        }
      }
    },
    "Divider": {
      "properties": {},
      "id": "Divider",
      "type": "object"
    },
    "SocialCommonAttachmentAttachment": {
      "properties": {
        "id": {
          "description": "An id to uniquely identify an attachment when several attachments are in a collection.",
          "type": "string"
        },
        "embedItem": {
          "$ref": "EmbedClientItem",
          "description": "An embed represents an external entity. See go/es-embeds."
        }
      },
      "type": "object",
      "id": "SocialCommonAttachmentAttachment",
      "description": "An Attachment represents a linked entity associated with a piece of social content. This may be a 1st-party or 3rd-party entity. In the Papyrus context, an Attachment is part of a Cent, and sits alongside the main content of the cent, which is represented as a sequence of Segments. Right now an Attachment is just a wrapper around an Embed, but we provide the extra layer of abstraction since, as Embeds move to separate storage in Briefcase, we may want to add additional fields that are not part of the Embed proper, but that (for example) relate to the usage of the linked content within the particular post/cent."
    },
    "GetDataSourceIndexStatsResponse": {
      "id": "GetDataSourceIndexStatsResponse",
      "type": "object",
      "properties": {
        "stats": {
          "type": "array",
          "items": {
            "$ref": "DataSourceIndexStats"
          },
          "description": "Summary of indexed item counts, one for each day in the requested range."
        },
        "averageIndexedItemCount": {
          "description": "Average item count for the given date range for which billing is done.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "DynamiteSpacesScoringInfo": {
      "id": "DynamiteSpacesScoringInfo",
      "type": "object",
      "description": "This is the proto for holding space level scoring information. This data is used for logging in query-api server and for testing purposes.",
      "properties": {
        "commonContactCountAffinityScore": {
          "type": "number",
          "format": "double"
        },
        "numAucContacts": {
          "type": "string",
          "format": "int64"
        },
        "contactsIntersectionCount": {
          "format": "double",
          "type": "number"
        },
        "affinityScore": {
          "type": "number",
          "format": "double"
        },
        "freshnessScore": {
          "format": "double",
          "type": "number"
        },
        "smallContactListAffinityScore": {
          "type": "number",
          "format": "double"
        },
        "lastReadTimestampSecs": {
          "type": "string",
          "format": "int64"
        },
        "memberMetadataCount": {
          "type": "number",
          "format": "double"
        },
        "finalScore": {
          "format": "double",
          "type": "number"
        },
        "topicalityScore": {
          "format": "double",
          "type": "number"
        },
        "smallUnjoinedSpacesAffinityScore": {
          "type": "number",
          "format": "double"
        },
        "joinedSpacesAffinityScore": {
          "type": "number",
          "format": "double"
        },
        "messageScore": {
          "type": "number",
          "format": "double"
        },
        "lastMessagePostedTimestampSecs": {
          "format": "int64",
          "type": "string"
        },
        "spaceCreationTimestampSecs": {
          "type": "string",
          "format": "int64"
        },
        "spaceAgeInDays": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "GoogleChatV1WidgetMarkupImageButton": {
      "type": "object",
      "description": "An image button with an onclick action.",
      "id": "GoogleChatV1WidgetMarkupImageButton",
      "properties": {
        "icon": {
          "enum": [
            "ICON_UNSPECIFIED",
            "AIRPLANE",
            "BOOKMARK",
            "BUS",
            "CAR",
            "CLOCK",
            "CONFIRMATION_NUMBER_ICON",
            "DOLLAR",
            "DESCRIPTION",
            "EMAIL",
            "EVENT_PERFORMER",
            "EVENT_SEAT",
            "FLIGHT_ARRIVAL",
            "FLIGHT_DEPARTURE",
            "HOTEL",
            "HOTEL_ROOM_TYPE",
            "INVITE",
            "MAP_PIN",
            "MEMBERSHIP",
            "MULTIPLE_PEOPLE",
            "OFFER",
            "PERSON",
            "PHONE",
            "RESTAURANT_ICON",
            "SHOPPING_CART",
            "STAR",
            "STORE",
            "TICKET",
            "TRAIN",
            "VIDEO_CAMERA",
            "VIDEO_PLAY"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "description": "The icon specified by an enum that indices to an icon provided by Chat API."
        },
        "onClick": {
          "description": "The onclick action.",
          "$ref": "GoogleChatV1WidgetMarkupOnClick"
        },
        "name": {
          "type": "string",
          "description": "The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify."
        },
        "iconUrl": {
          "type": "string",
          "description": "The icon specified by a URL."
        }
      }
    },
    "AppsDynamiteStorageCardCardHeader": {
      "type": "object",
      "id": "AppsDynamiteStorageCardCardHeader",
      "properties": {
        "imageUrl": {
          "description": "The URL of the image in the card header.",
          "type": "string"
        },
        "title": {
          "description": "The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.",
          "type": "string"
        },
        "imageAltText": {
          "description": "The alternative text of this image which is used for accessibility.",
          "type": "string"
        },
        "subtitle": {
          "description": "The subtitle of the card header.",
          "type": "string"
        },
        "imageType": {
          "enumDescriptions": [
            "Applies no cropping to the image.",
            "Applies a circular mask to the image."
          ],
          "type": "string",
          "enum": [
            "SQUARE",
            "CIRCLE"
          ],
          "description": "The image's type."
        }
      }
    },
    "ListItemNamesForUnmappedIdentityResponse": {
      "type": "object",
      "id": "ListItemNamesForUnmappedIdentityResponse",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "itemNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TextField": {
      "id": "TextField",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "",
            ""
          ],
          "enum": [
            "SINGLE_LINE",
            "MULTIPLE_LINE"
          ]
        },
        "name": {
          "description": "The name of the text field which is will be used in FormInput.",
          "type": "string"
        },
        "autoCompleteCallback": {
          "$ref": "FormAction",
          "description": "The refresh function which returns AutoComplete based on the user's input text. If the callback is not specified, auto complete will be purely done in client side based on the auto_complete items."
        },
        "value": {
          "description": "The default value when no input from user.",
          "type": "string"
        },
        "autoComplete": {
          "description": "The initial set of auto complete items without any user input.",
          "$ref": "AutoComplete"
        },
        "maxLines": {
          "type": "integer",
          "format": "int32"
        },
        "onChange": {
          "$ref": "FormAction"
        },
        "label": {
          "description": "One of label or hint_text is required to be specified by the developers.",
          "type": "string"
        },
        "autoCompleteMultipleSelections": {
          "type": "boolean",
          "description": "When set to true, a user can input multiple auto-complet items."
        },
        "hintText": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnumOperatorOptions": {
      "type": "object",
      "properties": {
        "operatorName": {
          "description": "Indicates the operator name required in the query in order to isolate the enum property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:\u003cvalue\u003e* show results only where the value of the property named *priorityVal* matches *\u003cvalue\u003e*. By contrast, a search that uses the same *\u003cvalue\u003e* without an operator returns all items where *\u003cvalue\u003e* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.",
          "type": "string"
        }
      },
      "description": "Used to provide a search operator for enum properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched. For example, if you provide no operator for a *priority* enum property with possible values *p0* and *p1*, a query that contains the term *p0* returns items that have *p0* as the value of the *priority* property, as well as any items that contain the string *p0* in other fields. If you provide an operator name for the enum, such as *priority*, then search users can use that operator to refine results to only items that have *p0* as this property's value, with the query *priority:p0*.",
      "id": "EnumOperatorOptions"
    },
    "AppsDynamiteV1ApiCompatV1Field": {
      "description": "A column of text in an attachment. Documentation: - https://api.slack.com/docs/message-attachments",
      "id": "AppsDynamiteV1ApiCompatV1Field",
      "properties": {
        "short": {
          "type": "boolean",
          "description": "Whether the field can be shown side-by-side with another field."
        },
        "title": {
          "description": "The heading text, shown in bold.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The text value of the field."
        }
      },
      "type": "object"
    },
    "ObjectOptions": {
      "properties": {
        "displayOptions": {
          "$ref": "ObjectDisplayOptions",
          "description": "The options that determine how the object is displayed in the Cloud Search results page."
        },
        "suggestionFilteringOperators": {
          "description": "Operators that can be used to filter suggestions. For Suggest API, only operators mentioned here will be honored in the FilterOptions. Only TEXT and ENUM operators are supported. NOTE: \"objecttype\", \"type\" and \"mimetype\" are already supported. This property is to configure schema specific operators. Even though this is an array, only one operator can be specified. This is an array for future extensibility. Operators mapping to multiple properties within the same object are not supported. If the operator spans across different object types, this option has to be set once for each object definition.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "freshnessOptions": {
          "$ref": "FreshnessOptions",
          "description": "The freshness options for an object."
        }
      },
      "description": "The options for an object.",
      "id": "ObjectOptions",
      "type": "object"
    },
    "UserDisplayInfo": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The name to show for this user"
        },
        "avatarUrl": {
          "type": "string",
          "description": "The avatar to show for this user"
        }
      },
      "description": "Resource for displaying user info",
      "type": "object",
      "id": "UserDisplayInfo"
    },
    "OAuthConsumerProto": {
      "description": "Represents an OAuth consumer, a/k/a AuthSub target. These principals are identified by domain name (e.g., example.com). Historically, Dasher domain GAIA group IDs have been used instead, but that doesn't work: http://go/tricky-gaia-ids",
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        }
      },
      "id": "OAuthConsumerProto"
    },
    "SquareProto": {
      "type": "object",
      "description": "Represents the set of members (of a given type) in a Google+ Square (see http://go/squares). A Square with default member_type is currently (1/2012) identical to the GaiaGroup with the same ID, but that is expected to change soon (see http://go/superglue). Support for this principal type is currently (1/2012) incomplete -- e.g., Keystore does not support it yet (see b/5703421).",
      "id": "SquareProto",
      "properties": {
        "memberType": {
          "description": "The type of Square members to consider, e.g. \"all members\" vs. \"owners\" vs. \"admins\". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See square.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with square. Currently required.",
          "format": "int32",
          "type": "integer"
        },
        "squareId": {
          "type": "string",
          "format": "int64",
          "description": "Currently required."
        }
      }
    },
    "AppsDynamiteSharedContentReportType": {
      "description": "Denotes a type of content report a user can send.",
      "properties": {
        "systemViolation": {
          "description": "Required. Google-defined system violation, covering the most common violations.",
          "enum": [
            "VIOLATION_UNSPECIFIED",
            "HARASSMENT",
            "DISCRIMINATION",
            "EXPLICIT_CONTENT",
            "SPAM",
            "CONFIDENTIAL_INFORMATION",
            "SENSITIVE_INFORMATION",
            "FRAUD",
            "MALWARE",
            "ILLEGAL_ACTIVITIES",
            "OTHER"
          ],
          "enumDescriptions": [
            "Default value if unset. Do not use directly. This value should not appear as a selectable violation during content reporting.",
            "\"Harassment, offensive, or rude behavior\"",
            "\"Discrimination or harmful stereotypes against anyone, including protected groups\"",
            "\"Explicit content that's graphic, violent, or otherwise inappropriate\"",
            "\"Spam\"",
            "\"Confidential information\"",
            "\"Sensitive information\"",
            "Phishing, impersonation/misrepresentation, or deceiving other users into sharing information under false pretenses.",
            "Malware, viruses, Trojan horses, corrupted files, destructive code, etc.",
            "Promoting, organizing, or engaging in illegal activities.",
            "\"Something else\""
          ],
          "type": "string"
        }
      },
      "type": "object",
      "id": "AppsDynamiteSharedContentReportType"
    },
    "HostAppActionMarkup": {
      "id": "HostAppActionMarkup",
      "type": "object",
      "description": "Actions handled by individual host apps.",
      "properties": {
        "sheetsAction": {
          "description": "Actions handled by Sheets.",
          "$ref": "SheetsClientActionMarkup"
        },
        "editorAction": {
          "$ref": "EditorClientActionMarkup",
          "description": "Actions handled by Docs, Sheets, or Slides."
        },
        "calendarAction": {
          "description": "Actions handled by Calendar.",
          "$ref": "CalendarClientActionMarkup"
        },
        "chatAction": {
          "description": "Actions handled by Chat.",
          "$ref": "ChatClientActionMarkup"
        },
        "gmailAction": {
          "description": "Actions handled by Gmail.",
          "$ref": "GmailClientActionMarkup"
        },
        "driveAction": {
          "$ref": "DriveClientActionMarkup",
          "description": "Actions handled by Drive."
        }
      }
    },
    "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError": {
      "id": "AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError",
      "description": "Represents an error that occurred during conference creation.",
      "properties": {
        "authenticationUrl": {
          "description": "If the error type is `AUTHENTICATION`, the add-on can provide a URL allowing users to log in. Maximum 1300 characters long.",
          "type": "string"
        },
        "type": {
          "enum": [
            "UNKNOWN",
            "AUTHENTICATION",
            "TEMPORARY",
            "PERMANENT",
            "PERMISSION_DENIED",
            "CONFERENCE_SOLUTION_FORBIDDEN"
          ],
          "type": "string",
          "description": "The type of error. Required.",
          "enumDescriptions": [
            "Unknown error.",
            "An authentication error.",
            "A temporary error.",
            "A permanent error.",
            "The user isn't allowed to perform some action in the third-party conferencing system.",
            "The user isn't allowed to use the selected conference solution (but might be allowed to use other solutions offered by the add-on)."
          ]
        }
      },
      "type": "object"
    },
    "MatchInfo": {
      "properties": {
        "matchingImageReferenceKey": {
          "description": "Reference keys for image attachments that matches search query.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "MatchInfo"
    },
    "ThreadUpdate": {
      "description": "HistoryRecord for changes associated with a thread, namely: MESSAGE_ADDED MESSAGE_DELETED LABEL_ADDED LABEL_REMOVED ATTRIBUTE_SET ATTRIBUTE_REMOVED THREAD_KEY_SET All label_ids refer to the (unchanging) value as defined by the Label.id field in labels.proto. In particular, it is *not* the canonical_name.",
      "id": "ThreadUpdate",
      "properties": {
        "attributeRemoved": {
          "$ref": "AttributeRemoved"
        },
        "labelRemoved": {
          "$ref": "LabelRemoved"
        },
        "topicStateUpdate": {
          "$ref": "TopicStateUpdate"
        },
        "originalThreadKey": {
          "$ref": "MultiKey",
          "description": "The first non-empty thread-key on any message in the thread (including deleted messages). This field has been introduced to maintain backward compatibility for clients that are not subthread aware."
        },
        "threadLocator": {
          "type": "string",
          "description": "Thread PLID"
        },
        "lastHistoryRecordId": {
          "format": "uint64",
          "type": "string",
          "description": "Indicates the record id of the last operation that modified this thread."
        },
        "labelAdded": {
          "$ref": "LabelAdded"
        },
        "attributeSet": {
          "$ref": "AttributeSet"
        },
        "threadKey": {
          "$ref": "MultiKey",
          "description": "Affected thread"
        },
        "messageDeleted": {
          "$ref": "MessageDeleted"
        },
        "messageAdded": {
          "$ref": "MessageAdded"
        },
        "threadKeySet": {
          "$ref": "ThreadKeySet"
        },
        "preState": {
          "type": "array",
          "items": {
            "$ref": "PreState"
          },
          "description": "The PreStates of all messages before the transaction. These are suppressed if the client requested that prestates not be included in the output of the GetHistoryRequest."
        }
      },
      "type": "object"
    },
    "RequestFileScope": {
      "id": "RequestFileScope",
      "properties": {
        "itemId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleChatV1WidgetMarkupFormAction": {
      "id": "GoogleChatV1WidgetMarkupFormAction",
      "properties": {
        "actionMethodName": {
          "description": "The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. The same method name can be used for several elements that trigger a common behavior if desired.",
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "GoogleChatV1WidgetMarkupFormActionActionParameter"
          },
          "description": "List of action parameters."
        }
      },
      "description": "A form action describes the behavior when the form is submitted. For example, an Apps Script can be invoked to handle the form.",
      "type": "object"
    },
    "AppsDynamiteV1ApiCompatV1ActionConfirm": {
      "id": "AppsDynamiteV1ApiCompatV1ActionConfirm",
      "description": "Confirmation dialog config.",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Confirmation dialog title."
        },
        "text": {
          "type": "string",
          "description": "Confirmation dialog body text."
        },
        "ok_text": {
          "type": "string",
          "description": "\"OK\" button label."
        },
        "dismiss_text": {
          "type": "string",
          "description": "\"Cancel\" button label."
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud_search.settings.query": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.debug": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.settings.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.query": {
          "description": "Search your organization's data in the Cloud Search index"
        },
        "https://www.googleapis.com/auth/cloud_search.stats": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.stats.indexing": {
          "description": "Index and serve your organization's data with Cloud Search"
        },
        "https://www.googleapis.com/auth/cloud_search.settings": {
          "description": "Index and serve your organization's data with Cloud Search"
        }
      }
    }
  },
  "id": "cloudsearch:v1",
  "mtlsRootUrl": "https://cloudsearch.mtls.googleapis.com/",
  "ownerDomain": "google.com"
}

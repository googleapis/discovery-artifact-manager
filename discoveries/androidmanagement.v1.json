{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/androidmanagement": {
          "description": "Manage Android devices and apps for your customers"
        }
      }
    }
  },
  "title": "Android Management API",
  "description": "The Android Management API provides remote enterprise management of Android devices and apps.",
  "revision": "20220921",
  "documentationLink": "https://developers.google.com/android/management",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "version": "v1",
  "id": "androidmanagement:v1",
  "basePath": "",
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "Android Management",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "parameters": {
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "description": "Data format for response."
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    }
  },
  "ownerDomain": "google.com",
  "resources": {
    "enterprises": {
      "methods": {
        "patch": {
          "path": "v1/{+name}",
          "id": "androidmanagement.enterprises.patch",
          "description": "Updates an enterprise.",
          "response": {
            "$ref": "Enterprise"
          },
          "parameters": {
            "name": {
              "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
              "location": "path",
              "pattern": "^enterprises/[^/]+$",
              "required": true,
              "type": "string"
            },
            "updateMask": {
              "type": "string",
              "description": "The field mask indicating the fields to update. If not set, all modifiable fields will be modified.",
              "format": "google-fieldmask",
              "location": "query"
            }
          },
          "request": {
            "$ref": "Enterprise"
          },
          "scopes": [
            "https://www.googleapis.com/auth/androidmanagement"
          ],
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/enterprises/{enterprisesId}",
          "httpMethod": "PATCH"
        },
        "get": {
          "id": "androidmanagement.enterprises.get",
          "flatPath": "v1/enterprises/{enterprisesId}",
          "httpMethod": "GET",
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "required": true,
              "location": "path",
              "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
              "type": "string",
              "pattern": "^enterprises/[^/]+$"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/androidmanagement"
          ],
          "description": "Gets an enterprise.",
          "response": {
            "$ref": "Enterprise"
          }
        },
        "create": {
          "parameterOrder": [],
          "response": {
            "$ref": "Enterprise"
          },
          "path": "v1/enterprises",
          "description": "Creates an enterprise. This is the last step in the enterprise signup flow.",
          "flatPath": "v1/enterprises",
          "scopes": [
            "https://www.googleapis.com/auth/androidmanagement"
          ],
          "httpMethod": "POST",
          "parameters": {
            "enterpriseToken": {
              "location": "query",
              "type": "string",
              "description": "The enterprise token appended to the callback URL. Set this when creating a customer-managed enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises)."
            },
            "projectId": {
              "location": "query",
              "type": "string",
              "description": "The ID of the Google Cloud Platform project which will own the enterprise."
            },
            "signupUrlName": {
              "type": "string",
              "description": "The name of the SignupUrl used to sign up for the enterprise. Set this when creating a customer-managed enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).",
              "location": "query"
            },
            "agreementAccepted": {
              "type": "boolean",
              "location": "query",
              "description": "Whether the enterprise admin has seen and agreed to the managed Google Play Agreement (https://www.android.com/enterprise/terms/). Do not set this field for any customer-managed enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises). Set this to field to true for all EMM-managed enterprises (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises)."
            }
          },
          "id": "androidmanagement.enterprises.create",
          "request": {
            "$ref": "Enterprise"
          }
        },
        "delete": {
          "id": "androidmanagement.enterprises.delete",
          "description": "Deletes an enterprise. Only available for EMM-managed enterprises.",
          "flatPath": "v1/enterprises/{enterprisesId}",
          "parameterOrder": [
            "name"
          ],
          "path": "v1/{+name}",
          "scopes": [
            "https://www.googleapis.com/auth/androidmanagement"
          ],
          "response": {
            "$ref": "Empty"
          },
          "parameters": {
            "name": {
              "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
              "required": true,
              "location": "path",
              "pattern": "^enterprises/[^/]+$",
              "type": "string"
            }
          },
          "httpMethod": "DELETE"
        },
        "list": {
          "parameters": {
            "pageSize": {
              "type": "integer",
              "format": "int32",
              "description": "The requested page size. The actual page size may be fixed to a min or max value.",
              "location": "query"
            },
            "projectId": {
              "description": "Required. The Cloud project ID of the EMM managing the enterprises.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "A token identifying a page of results returned by the server."
            },
            "view": {
              "enumDescriptions": [
                "The API will default to the BASIC view for the List method.",
                "Includes name and enterprise_display_name fields."
              ],
              "enum": [
                "ENTERPRISE_VIEW_UNSPECIFIED",
                "BASIC"
              ],
              "type": "string",
              "location": "query",
              "description": "Specifies which Enterprise fields to return. This method only supports BASIC."
            }
          },
          "response": {
            "$ref": "ListEnterprisesResponse"
          },
          "flatPath": "v1/enterprises",
          "httpMethod": "GET",
          "description": "Lists EMM-managed enterprises. Only BASIC fields are returned.",
          "path": "v1/enterprises",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/androidmanagement"
          ],
          "id": "androidmanagement.enterprises.list"
        }
      },
      "resources": {
        "policies": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListPoliciesResponse"
              },
              "path": "v1/{+parent}/policies",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "A token identifying a page of results returned by the server.",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "pattern": "^enterprises/[^/]+$",
                  "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
                  "location": "path",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "format": "int32",
                  "description": "The requested page size. The actual page size may be fixed to a min or max value.",
                  "type": "integer"
                }
              },
              "flatPath": "v1/enterprises/{enterprisesId}/policies",
              "description": "Lists policies for a given enterprise.",
              "id": "androidmanagement.enterprises.policies.list",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ]
            },
            "delete": {
              "description": "Deletes a policy. This operation is only permitted if no devices are currently referencing the policy.",
              "id": "androidmanagement.enterprises.policies.delete",
              "flatPath": "v1/enterprises/{enterprisesId}/policies/{policiesId}",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}.",
                  "pattern": "^enterprises/[^/]+/policies/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              }
            },
            "patch": {
              "request": {
                "$ref": "Policy"
              },
              "id": "androidmanagement.enterprises.policies.patch",
              "path": "v1/{+name}",
              "response": {
                "$ref": "Policy"
              },
              "httpMethod": "PATCH",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/enterprises/{enterprisesId}/policies/{policiesId}",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "description": "Updates or creates a policy.",
              "parameters": {
                "name": {
                  "description": "The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}.",
                  "type": "string",
                  "pattern": "^enterprises/[^/]+/policies/[^/]+$",
                  "location": "path",
                  "required": true
                },
                "updateMask": {
                  "location": "query",
                  "format": "google-fieldmask",
                  "description": "The field mask indicating the fields to update. If not set, all modifiable fields will be modified.",
                  "type": "string"
                }
              }
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "flatPath": "v1/enterprises/{enterprisesId}/policies/{policiesId}",
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}.",
                  "pattern": "^enterprises/[^/]+/policies/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Policy"
              },
              "description": "Gets a policy.",
              "path": "v1/{+name}",
              "httpMethod": "GET",
              "id": "androidmanagement.enterprises.policies.get"
            }
          }
        },
        "webTokens": {
          "methods": {
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "description": "Creates a web token to access an embeddable managed Google Play web UI for a given enterprise.",
              "id": "androidmanagement.enterprises.webTokens.create",
              "path": "v1/{+parent}/webTokens",
              "httpMethod": "POST",
              "flatPath": "v1/enterprises/{enterprisesId}/webTokens",
              "request": {
                "$ref": "WebToken"
              },
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "pattern": "^enterprises/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
                  "required": true
                }
              },
              "response": {
                "$ref": "WebToken"
              }
            }
          }
        },
        "enrollmentTokens": {
          "methods": {
            "delete": {
              "flatPath": "v1/enterprises/{enterprisesId}/enrollmentTokens/{enrollmentTokensId}",
              "parameterOrder": [
                "name"
              ],
              "id": "androidmanagement.enterprises.enrollmentTokens.delete",
              "httpMethod": "DELETE",
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "description": "Deletes an enrollment token. This operation invalidates the token, preventing its future use.",
              "response": {
                "$ref": "Empty"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^enterprises/[^/]+/enrollmentTokens/[^/]+$",
                  "description": "The name of the enrollment token in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}."
                }
              }
            },
            "list": {
              "flatPath": "v1/enterprises/{enterprisesId}/enrollmentTokens",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "location": "path",
                  "description": "Required. The name of the enterprise in the form enterprises/{enterpriseId}.",
                  "pattern": "^enterprises/[^/]+$",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "description": "The requested page size. The service may return fewer than this value. If unspecified, at most 10 items will be returned. The maximum value is 100; values above 100 will be coerced to 100.",
                  "location": "query"
                },
                "pageToken": {
                  "location": "query",
                  "description": "A token identifying a page of results returned by the server.",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "ListEnrollmentTokensResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/enrollmentTokens",
              "id": "androidmanagement.enterprises.enrollmentTokens.list",
              "description": "Lists active, unexpired enrollment tokens for a given enterprise. The list items contain only a partial view of EnrollmentToken: all the fields but name and expiration_timestamp are empty. This method is meant to help manage active enrollment tokens lifecycle. For security reasons, it's recommended to delete active enrollment tokens as soon as they're not intended to be used anymore.",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ]
            },
            "get": {
              "parameters": {
                "name": {
                  "pattern": "^enterprises/[^/]+/enrollmentTokens/[^/]+$",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. The name of the enrollment token in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}."
                }
              },
              "flatPath": "v1/enterprises/{enterprisesId}/enrollmentTokens/{enrollmentTokensId}",
              "httpMethod": "GET",
              "id": "androidmanagement.enterprises.enrollmentTokens.get",
              "parameterOrder": [
                "name"
              ],
              "description": "Gets an active, unexpired enrollment token. Only a partial view of EnrollmentToken is returned: all the fields but name and expiration_timestamp are empty. This method is meant to help manage active enrollment tokens lifecycle. For security reasons, it's recommended to delete active enrollment tokens as soon as they're not intended to be used anymore.",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "path": "v1/{+name}",
              "response": {
                "$ref": "EnrollmentToken"
              }
            },
            "create": {
              "id": "androidmanagement.enterprises.enrollmentTokens.create",
              "path": "v1/{+parent}/enrollmentTokens",
              "parameters": {
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
                  "pattern": "^enterprises/[^/]+$"
                }
              },
              "flatPath": "v1/enterprises/{enterprisesId}/enrollmentTokens",
              "httpMethod": "POST",
              "response": {
                "$ref": "EnrollmentToken"
              },
              "description": "Creates an enrollment token for a given enterprise. It's up to the caller's responsibility to manage the lifecycle of newly created tokens and deleting them when they're not intended to be used anymore. Once an enrollment token has been created, it's not possible to retrieve the token's content anymore using AM API. It is recommended for EMMs to securely store the token if it's intended to be reused.",
              "request": {
                "$ref": "EnrollmentToken"
              },
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "parameterOrder": [
                "parent"
              ]
            }
          }
        },
        "webApps": {
          "methods": {
            "get": {
              "path": "v1/{+name}",
              "description": "Gets a web app.",
              "id": "androidmanagement.enterprises.webApps.get",
              "response": {
                "$ref": "WebApp"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "flatPath": "v1/enterprises/{enterprisesId}/webApps/{webAppsId}",
              "parameters": {
                "name": {
                  "description": "The name of the web app in the form enterprises/{enterpriseId}/webApp/{packageName}.",
                  "location": "path",
                  "pattern": "^enterprises/[^/]+/webApps/[^/]+$",
                  "type": "string",
                  "required": true
                }
              }
            },
            "delete": {
              "parameterOrder": [
                "name"
              ],
              "id": "androidmanagement.enterprises.webApps.delete",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^enterprises/[^/]+/webApps/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "The name of the web app in the form enterprises/{enterpriseId}/webApps/{packageName}."
                }
              },
              "description": "Deletes a web app.",
              "path": "v1/{+name}",
              "flatPath": "v1/enterprises/{enterprisesId}/webApps/{webAppsId}",
              "response": {
                "$ref": "Empty"
              }
            },
            "list": {
              "id": "androidmanagement.enterprises.webApps.list",
              "parameters": {
                "pageSize": {
                  "type": "integer",
                  "description": "The requested page size. This is a hint and the actual page size in the response may be different.",
                  "format": "int32",
                  "location": "query"
                },
                "parent": {
                  "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^enterprises/[^/]+$"
                },
                "pageToken": {
                  "type": "string",
                  "description": "A token identifying a page of results returned by the server.",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "ListWebAppsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1/enterprises/{enterprisesId}/webApps",
              "httpMethod": "GET",
              "path": "v1/{+parent}/webApps",
              "description": "Lists web apps for a given enterprise."
            },
            "create": {
              "request": {
                "$ref": "WebApp"
              },
              "path": "v1/{+parent}/webApps",
              "id": "androidmanagement.enterprises.webApps.create",
              "parameters": {
                "parent": {
                  "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
                  "pattern": "^enterprises/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "description": "Creates a web app.",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1/enterprises/{enterprisesId}/webApps",
              "response": {
                "$ref": "WebApp"
              }
            },
            "patch": {
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "updateMask": {
                  "description": "The field mask indicating the fields to update. If not set, all modifiable fields will be modified.",
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string"
                },
                "name": {
                  "required": true,
                  "location": "path",
                  "description": "The name of the web app in the form enterprises/{enterpriseId}/webApps/{packageName}.",
                  "pattern": "^enterprises/[^/]+/webApps/[^/]+$",
                  "type": "string"
                }
              },
              "httpMethod": "PATCH",
              "description": "Updates a web app.",
              "id": "androidmanagement.enterprises.webApps.patch",
              "flatPath": "v1/enterprises/{enterprisesId}/webApps/{webAppsId}",
              "response": {
                "$ref": "WebApp"
              },
              "request": {
                "$ref": "WebApp"
              }
            }
          }
        },
        "devices": {
          "resources": {
            "operations": {
              "methods": {
                "delete": {
                  "httpMethod": "DELETE",
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "pattern": "^enterprises/[^/]+/devices/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource to be deleted.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "id": "androidmanagement.enterprises.devices.operations.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/androidmanagement"
                  ]
                },
                "get": {
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^enterprises/[^/]+/devices/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource."
                    }
                  },
                  "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations/{operationsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/androidmanagement"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "path": "v1/{+name}",
                  "id": "androidmanagement.enterprises.devices.operations.get",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "cancel": {
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Empty"
                  },
                  "path": "v1/{+name}:cancel",
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "required": true,
                      "pattern": "^enterprises/[^/]+/devices/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations/{operationsId}:cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/androidmanagement"
                  ],
                  "id": "androidmanagement.enterprises.devices.operations.cancel"
                },
                "list": {
                  "scopes": [
                    "https://www.googleapis.com/auth/androidmanagement"
                  ],
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The standard list filter."
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "The name of the operation's parent resource.",
                      "pattern": "^enterprises/[^/]+/devices/[^/]+/operations$",
                      "location": "path"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The standard list page size.",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "httpMethod": "GET",
                  "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations",
                  "id": "androidmanagement.enterprises.devices.operations.list",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  }
                }
              }
            }
          },
          "methods": {
            "list": {
              "id": "androidmanagement.enterprises.devices.list",
              "description": "Lists devices for a given enterprise.",
              "response": {
                "$ref": "ListDevicesResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "description": "The requested page size. The actual page size may be fixed to a min or max value.",
                  "location": "query",
                  "type": "integer"
                },
                "parent": {
                  "location": "path",
                  "required": true,
                  "description": "The name of the enterprise in the form enterprises/{enterpriseId}.",
                  "type": "string",
                  "pattern": "^enterprises/[^/]+$"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A token identifying a page of results returned by the server."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "path": "v1/{+parent}/devices",
              "flatPath": "v1/enterprises/{enterprisesId}/devices",
              "httpMethod": "GET"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "id": "androidmanagement.enterprises.devices.patch",
              "httpMethod": "PATCH",
              "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "request": {
                "$ref": "Device"
              },
              "response": {
                "$ref": "Device"
              },
              "description": "Updates a device.",
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.",
                  "pattern": "^enterprises/[^/]+/devices/[^/]+$",
                  "required": true,
                  "type": "string"
                },
                "updateMask": {
                  "location": "query",
                  "description": "The field mask indicating the fields to update. If not set, all modifiable fields will be modified.",
                  "format": "google-fieldmask",
                  "type": "string"
                }
              }
            },
            "delete": {
              "path": "v1/{+name}",
              "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "wipeDataFlags": {
                  "enumDescriptions": [
                    "This value is ignored.",
                    "Preserve the factory reset protection data on the device.",
                    "Additionally wipe the device's external storage (such as SD cards)."
                  ],
                  "description": "Optional flags that control the device wiping behavior.",
                  "enum": [
                    "WIPE_DATA_FLAG_UNSPECIFIED",
                    "PRESERVE_RESET_PROTECTION_DATA",
                    "WIPE_EXTERNAL_STORAGE"
                  ],
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^enterprises/[^/]+/devices/[^/]+$"
                },
                "wipeReasonMessage": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. A short message displayed to the user before wiping the work profile on personal devices. This has no effect on company owned devices. The maximum message length is 200 characters."
                }
              },
              "response": {
                "$ref": "Empty"
              },
              "id": "androidmanagement.enterprises.devices.delete",
              "parameterOrder": [
                "name"
              ],
              "description": "Deletes a device. This operation wipes the device."
            },
            "issueCommand": {
              "path": "v1/{+name}:issueCommand",
              "parameterOrder": [
                "name"
              ],
              "id": "androidmanagement.enterprises.devices.issueCommand",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "request": {
                "$ref": "Command"
              },
              "description": "Issues a command to a device. The Operation resource returned contains a Command in its metadata field. Use the get operation method to get the status of the command.",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.",
                  "pattern": "^enterprises/[^/]+/devices/[^/]+$",
                  "required": true
                }
              },
              "response": {
                "$ref": "Operation"
              },
              "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}:issueCommand"
            },
            "get": {
              "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}",
              "response": {
                "$ref": "Device"
              },
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.",
                  "required": true,
                  "pattern": "^enterprises/[^/]+/devices/[^/]+$",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ],
              "id": "androidmanagement.enterprises.devices.get",
              "description": "Gets a device.",
              "path": "v1/{+name}"
            }
          }
        },
        "applications": {
          "methods": {
            "get": {
              "description": "Gets info about an application.",
              "flatPath": "v1/enterprises/{enterprisesId}/applications/{applicationsId}",
              "httpMethod": "GET",
              "parameters": {
                "languageCode": {
                  "type": "string",
                  "location": "query",
                  "description": "The preferred language for localized application info, as a BCP47 tag (e.g. \"en-US\", \"de\"). If not specified the default language of the application will be used."
                },
                "name": {
                  "description": "The name of the application in the form enterprises/{enterpriseId}/applications/{package_name}.",
                  "type": "string",
                  "location": "path",
                  "pattern": "^enterprises/[^/]+/applications/[^/]+$",
                  "required": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "id": "androidmanagement.enterprises.applications.get",
              "path": "v1/{+name}",
              "response": {
                "$ref": "Application"
              },
              "scopes": [
                "https://www.googleapis.com/auth/androidmanagement"
              ]
            }
          }
        }
      }
    },
    "signupUrls": {
      "methods": {
        "create": {
          "parameters": {
            "projectId": {
              "type": "string",
              "description": "The ID of the Google Cloud Platform project which will own the enterprise.",
              "location": "query"
            },
            "callbackUrl": {
              "location": "query",
              "description": "The callback URL that the admin will be redirected to after successfully creating an enterprise. Before redirecting there the system will add a query parameter to this URL named enterpriseToken which will contain an opaque token to be used for the create enterprise request. The URL will be parsed then reformatted in order to add the enterpriseToken parameter, so there may be some minor formatting changes.",
              "type": "string"
            }
          },
          "path": "v1/signupUrls",
          "flatPath": "v1/signupUrls",
          "description": "Creates an enterprise signup URL.",
          "httpMethod": "POST",
          "id": "androidmanagement.signupUrls.create",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/androidmanagement"
          ],
          "response": {
            "$ref": "SignupUrl"
          }
        }
      }
    }
  },
  "version_module": true,
  "discoveryVersion": "v1",
  "batchPath": "batch",
  "baseUrl": "https://androidmanagement.googleapis.com/",
  "schemas": {
    "KeyguardDismissAuthAttemptEvent": {
      "id": "KeyguardDismissAuthAttemptEvent",
      "properties": {
        "strongAuthMethodUsed": {
          "description": "Whether a strong form of authentication (password, PIN, or pattern) was used to unlock device.",
          "type": "boolean"
        },
        "success": {
          "type": "boolean",
          "description": "Whether the unlock attempt was successful."
        }
      },
      "type": "object",
      "description": "An attempt was made to unlock the device."
    },
    "OncCertificateProvider": {
      "description": "This feature is not generally available.",
      "type": "object",
      "id": "OncCertificateProvider",
      "properties": {
        "certificateReferences": {
          "items": {
            "type": "string"
          },
          "description": "This feature is not generally available.",
          "type": "array"
        },
        "contentProviderEndpoint": {
          "description": "This feature is not generally available.",
          "$ref": "ContentProviderEndpoint"
        }
      }
    },
    "SigninDetail": {
      "type": "object",
      "properties": {
        "signinEnrollmentToken": {
          "type": "string",
          "description": "An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only field generated by the server."
        },
        "signinUrl": {
          "description": "Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The sign-in endpoint should finish authentication flow with a URL in the form of https://enterprise.google.com/android/enroll?et= for a successful login, or https://enterprise.google.com/android/enroll/invalid for a failed login.",
          "type": "string"
        },
        "allowPersonalUsage": {
          "enumDescriptions": [
            "Personal usage restriction is not specified",
            "Personal usage is allowed",
            "Personal usage is disallowed"
          ],
          "type": "string",
          "enum": [
            "ALLOW_PERSONAL_USAGE_UNSPECIFIED",
            "PERSONAL_USAGE_ALLOWED",
            "PERSONAL_USAGE_DISALLOWED"
          ],
          "description": "Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device."
        },
        "qrCode": {
          "description": "A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON. This is a read-only field generated by the server.",
          "type": "string"
        }
      },
      "description": "A resource containing sign in details for an enterprise.",
      "id": "SigninDetail"
    },
    "UserFacingMessage": {
      "type": "object",
      "description": "Provides a user-facing message with locale info. The maximum message length is 4096 characters.",
      "properties": {
        "localizedMessages": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map containing pairs, where locale is a well-formed BCP 47 language (https://www.w3.org/International/articles/language-tags/) code, such as en-US, es-ES, or fr."
        },
        "defaultMessage": {
          "description": "The default message displayed if no localized message is specified or the user's locale doesn't match with any of the localized messages. A default message must be provided if any localized messages are provided.",
          "type": "string"
        }
      },
      "id": "UserFacingMessage"
    },
    "ListEnrollmentTokensResponse": {
      "description": "Response to a request to list enrollment tokens for a given enterprise.",
      "id": "ListEnrollmentTokensResponse",
      "type": "object",
      "properties": {
        "enrollmentTokens": {
          "items": {
            "$ref": "EnrollmentToken"
          },
          "description": "The list of enrollment tokens.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "If there are more results, a token to retrieve next page of results."
        }
      }
    },
    "AdvancedSecurityOverrides": {
      "id": "AdvancedSecurityOverrides",
      "type": "object",
      "description": "Security policies set to secure values by default. To maintain the security posture of a device, we don't recommend overriding any of the default values.",
      "properties": {
        "developerSettings": {
          "enumDescriptions": [
            "Unspecified. Defaults to DEVELOPER_SETTINGS_DISABLED.",
            "Default. Disables all developer settings and prevents the user from accessing them.",
            "Allows all developer settings. The user can access and optionally configure the settings."
          ],
          "description": "Controls access to developer settings: developer options and safe boot. Replaces safeBootDisabled (deprecated) and debuggingFeaturesAllowed (deprecated).",
          "type": "string",
          "enum": [
            "DEVELOPER_SETTINGS_UNSPECIFIED",
            "DEVELOPER_SETTINGS_DISABLED",
            "DEVELOPER_SETTINGS_ALLOWED"
          ]
        },
        "personalAppsThatCanReadWorkNotifications": {
          "items": {
            "type": "string"
          },
          "description": "Personal apps that can read work profile notifications using a NotificationListenerService (https://developer.android.com/reference/android/service/notification/NotificationListenerService). By default, no personal apps (aside from system apps) can read work notifications. Each value in the list must be a package name.",
          "type": "array"
        },
        "googlePlayProtectVerifyApps": {
          "type": "string",
          "enum": [
            "GOOGLE_PLAY_PROTECT_VERIFY_APPS_UNSPECIFIED",
            "VERIFY_APPS_ENFORCED",
            "VERIFY_APPS_USER_CHOICE"
          ],
          "enumDescriptions": [
            "Unspecified. Defaults to VERIFY_APPS_ENFORCED.",
            "Default. Force-enables app verification.",
            "Allows the user to choose whether to enable app verification."
          ],
          "description": "Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced. Replaces ensureVerifyAppsEnabled (deprecated)."
        },
        "untrustedAppsPolicy": {
          "enumDescriptions": [
            "Unspecified. Defaults to DISALLOW_INSTALL.",
            "Default. Disallow untrusted app installs on entire device.",
            "For devices with work profiles, allow untrusted app installs in the device's personal profile only.",
            "Allow untrusted app installs on entire device."
          ],
          "description": "The policy for untrusted apps (apps from unknown sources) enforced on the device. Replaces install_unknown_sources_allowed (deprecated).",
          "type": "string",
          "enum": [
            "UNTRUSTED_APPS_POLICY_UNSPECIFIED",
            "DISALLOW_INSTALL",
            "ALLOW_INSTALL_IN_PERSONAL_PROFILE_ONLY",
            "ALLOW_INSTALL_DEVICE_WIDE"
          ]
        },
        "commonCriteriaMode": {
          "description": "Controls Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC). Enabling Common Criteria Mode increases certain security components on a device, including AES-GCM encryption of Bluetooth Long Term Keys, and Wi-Fi configuration stores.Warning: Common Criteria Mode enforces a strict security model typically only required for IT products used in national security systems and other highly sensitive organizations. Standard device use may be affected. Only enabled if required.",
          "enumDescriptions": [
            "Unspecified. Defaults to COMMON_CRITERIA_MODE_DISABLED.",
            "Default. Disables Common Criteria Mode.",
            "Enables Common Criteria Mode."
          ],
          "enum": [
            "COMMON_CRITERIA_MODE_UNSPECIFIED",
            "COMMON_CRITERIA_MODE_DISABLED",
            "COMMON_CRITERIA_MODE_ENABLED"
          ],
          "type": "string"
        }
      }
    },
    "WipeAction": {
      "type": "object",
      "id": "WipeAction",
      "properties": {
        "preserveFrp": {
          "description": "Whether the factory-reset protection data is preserved on the device. This setting doesn’t apply to work profiles.",
          "type": "boolean"
        },
        "wipeAfterDays": {
          "description": "Number of days the policy is non-compliant before the device or work profile is wiped. wipeAfterDays must be greater than blockAfterDays.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "An action to reset a fully managed device or delete a work profile. Note: blockAction must also be specified."
    },
    "KeyIntegrityViolationEvent": {
      "properties": {
        "applicationUid": {
          "format": "int32",
          "description": "UID of the application which owns the key",
          "type": "integer"
        },
        "keyAlias": {
          "type": "string",
          "description": "Alias of the key."
        }
      },
      "type": "object",
      "id": "KeyIntegrityViolationEvent",
      "description": "A cryptographic key including user installed, admin installed and system maintained private key is determined to be corrupted due to storage corruption, hardware failure or some OS issue. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile."
    },
    "ApplicationPolicy": {
      "description": "Policy for an individual app.",
      "properties": {
        "alwaysOnVpnLockdownExemption": {
          "enum": [
            "ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED",
            "VPN_LOCKDOWN_ENFORCED",
            "VPN_LOCKDOWN_EXEMPTION"
          ],
          "enumDescriptions": [
            "Unspecified. Defaults to VPN_LOCKDOWN_ENFORCED.",
            "The app respects the always-on VPN lockdown setting.",
            "The app is exempt from the always-on VPN lockdown setting."
          ],
          "type": "string",
          "description": "Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy."
        },
        "managedConfiguration": {
          "description": "Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: *type* *JSON value* BOOL true or false STRING string INTEGER number CHOICE string MULTISELECT array of strings HIDDEN string BUNDLE_ARRAY array of objects ",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "installType": {
          "enumDescriptions": [
            "Unspecified. Defaults to AVAILABLE.",
            "The app is automatically installed and can be removed by the user.",
            "The app is automatically installed and can't be removed by the user.",
            "The app is blocked and can't be installed. If the app was installed under a previous policy, it will be uninstalled.",
            "The app is available to install.",
            "The app is automatically installed and can't be removed by the user and will prevent setup from completion until installation is complete.",
            "The app is automatically installed in kiosk mode: it's set as the preferred home intent and whitelisted for lock task mode. Device setup won't complete until the app is installed. After installation, users won't be able to remove the app. You can only set this installType for one app per policy. When this is present in the policy, status bar will be automatically disabled."
          ],
          "description": "The type of installation to perform.",
          "enum": [
            "INSTALL_TYPE_UNSPECIFIED",
            "PREINSTALLED",
            "FORCE_INSTALLED",
            "BLOCKED",
            "AVAILABLE",
            "REQUIRED_FOR_SETUP",
            "KIOSK"
          ],
          "type": "string"
        },
        "packageName": {
          "type": "string",
          "description": "The package name of the app. For example, com.google.android.youtube for the YouTube app."
        },
        "lockTaskAllowed": {
          "description": "Whether the app is allowed to lock itself in full-screen mode. DEPRECATED. Use InstallType KIOSK or kioskCustomLauncherEnabled to to configure a dedicated device.",
          "type": "boolean"
        },
        "accessibleTrackIds": {
          "description": "List of the app’s track IDs that a device belonging to the enterprise can access. If the list contains multiple track IDs, devices receive the latest version among all accessible tracks. If the list contains no track IDs, devices only have access to the app’s production track. More details about each track are available in AppTrackInfo.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "managedConfigurationTemplate": {
          "description": "The managed configurations template for the app, saved from the managed configurations iframe. This field is ignored if managed_configuration is set.",
          "$ref": "ManagedConfigurationTemplate"
        },
        "extensionConfig": {
          "$ref": "ExtensionConfig",
          "description": "Configuration to enable this app as an extension app, with the capability of interacting with Android Device Policy offline.This field can be set for at most one app."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the app is disabled. When disabled, the app data is still preserved."
        },
        "permissionGrants": {
          "type": "array",
          "description": "Explicit permission grants or denials for the app. These values override the default_permission_policy and permission_grants which apply to all apps.",
          "items": {
            "$ref": "PermissionGrant"
          }
        },
        "connectedWorkAndPersonalApp": {
          "description": "Controls whether the app can communicate with itself across a device’s work and personal profiles, subject to user consent.",
          "enum": [
            "CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED",
            "CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED",
            "CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified. Defaults to CONNECTED_WORK_AND_PERSONAL_APPS_DISALLOWED.",
            "Default. Prevents the app from communicating cross-profile.",
            "Allows the app to communicate across profiles after receiving user consent."
          ]
        },
        "defaultPermissionPolicy": {
          "description": "The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps.",
          "enum": [
            "PERMISSION_POLICY_UNSPECIFIED",
            "PROMPT",
            "GRANT",
            "DENY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Policy not specified. If no policy is specified for a permission at any level, then the PROMPT behavior is used by default.",
            "Prompt the user to grant a permission.",
            "Automatically grant a permission.",
            "Automatically deny a permission."
          ]
        },
        "minimumVersionCode": {
          "format": "int32",
          "type": "integer",
          "description": "The minimum version of the app that runs on the device. If set, the device attempts to update the app to at least this version code. If the app is not up-to-date, the device will contain a NonComplianceDetail with non_compliance_reason set to APP_NOT_UPDATED. The app must already be published to Google Play with a version code greater than or equal to this value. At most 20 apps may specify a minimum version code per policy."
        },
        "autoUpdateMode": {
          "type": "string",
          "enum": [
            "AUTO_UPDATE_MODE_UNSPECIFIED",
            "AUTO_UPDATE_DEFAULT",
            "AUTO_UPDATE_POSTPONED",
            "AUTO_UPDATE_HIGH_PRIORITY"
          ],
          "description": "Controls the auto-update mode for the app.",
          "enumDescriptions": [
            "Unspecified. Defaults to AUTO_UPDATE_DEFAULT.",
            "The app is automatically updated with low priority to minimize the impact on the user.The app is updated when all of the following constraints are met: The device is not actively used. The device is connected to an unmetered network. The device is charging.The device is notified about a new update within 24 hours after it is published by the developer, after which the app is updated the next time the constraints above are met.",
            "The app is not automatically updated for a maximum of 90 days after the app becomes out of date.90 days after the app becomes out of date, the latest available version is installed automatically with low priority (see AUTO_UPDATE_DEFAULT). After the app is updated it is not automatically updated again until 90 days after it becomes out of date again.The user can still manually update the app from the Play Store at any time.",
            "The app is updated as soon as possible. No constraints are applied.The device is notified immediately about a new update after it becomes available."
          ]
        },
        "delegatedScopes": {
          "description": "The scopes delegated to the app from Android Device Policy.",
          "items": {
            "type": "string",
            "enum": [
              "DELEGATED_SCOPE_UNSPECIFIED",
              "CERT_INSTALL",
              "MANAGED_CONFIGURATIONS",
              "BLOCK_UNINSTALL",
              "PERMISSION_GRANT",
              "PACKAGE_ACCESS",
              "ENABLE_SYSTEM_APP",
              "NETWORK_ACTIVITY_LOGS",
              "SECURITY_LOGS"
            ],
            "enumDescriptions": [
              "No delegation scope specified.",
              "Grants access to certificate installation and management.",
              "Grants access to managed configurations management.",
              "Grants access to blocking uninstallation.",
              "Grants access to permission policy and permission grant state.",
              "Grants access to package access state.",
              "Grants access for enabling system apps.",
              "Grants access to network activity logs. Allows the delegated application to call setNetworkLoggingEnabled (https://developer.android.com/reference/android/app/admin/DevicePolicyManager#setNetworkLoggingEnabled%28android.content.ComponentName,%20boolean%29), isNetworkLoggingEnabled (https://developer.android.com/reference/android/app/admin/DevicePolicyManager#isNetworkLoggingEnabled%28android.content.ComponentName%29) and retrieveNetworkLogs (https://developer.android.com/reference/android/app/admin/DevicePolicyManager#retrieveNetworkLogs%28android.content.ComponentName,%20long%29) methods. This scope can be delegated to at most one application. Supported for fully managed devices on Android 10 and above. Supported for a work profile on Android 12 and above. When delegation is supported and set, NETWORK_ACTIVITY_LOGS is ignored.",
              "Grants access to security logs. Allows the delegated application to call setSecurityLoggingEnabled (https://developer.android.com/reference/android/app/admin/DevicePolicyManager#setSecurityLoggingEnabled%28android.content.ComponentName,%20boolean%29), isSecurityLoggingEnabled (https://developer.android.com/reference/android/app/admin/DevicePolicyManager#isSecurityLoggingEnabled%28android.content.ComponentName%29), retrieveSecurityLogs (https://developer.android.com/reference/android/app/admin/DevicePolicyManager#retrieveSecurityLogs%28android.content.ComponentName%29) and retrievePreRebootSecurityLogs (https://developer.android.com/reference/android/app/admin/DevicePolicyManager#retrievePreRebootSecurityLogs%28android.content.ComponentName%29) methods. This scope can be delegated to at most one application. Supported for fully managed devices and company-owned devices with a work profile on Android 12 and above. When delegation is supported and set, SECURITY_LOGS is ignored."
            ]
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "ApplicationPolicy"
    },
    "PersistentPreferredActivity": {
      "properties": {
        "categories": {
          "description": "The intent categories to match in the filter. An intent includes the categories that it requires, all of which must be included in the filter in order to match. In other words, adding a category to the filter has no impact on matching unless that category is specified in the intent.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The intent actions to match in the filter. If any actions are included in the filter, then an intent's action must be one of those values for it to match. If no actions are included, the intent action is ignored."
        },
        "receiverActivity": {
          "description": "The activity that should be the default intent handler. This should be an Android component name, e.g. com.android.enterprise.app/.MainActivity. Alternatively, the value may be the package name of an app, which causes Android Device Policy to choose an appropriate activity from the app to handle the intent.",
          "type": "string"
        }
      },
      "id": "PersistentPreferredActivity",
      "type": "object",
      "description": "A default activity for handling intents that match a particular intent filter. Note: To set up a kiosk, use InstallType to KIOSK rather than use persistent preferred activities."
    },
    "AppVersion": {
      "properties": {
        "versionCode": {
          "type": "integer",
          "format": "int32",
          "description": "Unique increasing identifier for the app version."
        },
        "trackIds": {
          "description": "Track identifiers that the app version is published in. This does not include the production track (see production instead).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "versionString": {
          "description": "The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be \"1.4\").",
          "type": "string"
        },
        "production": {
          "description": "If the value is True, it indicates that this version is a production track.",
          "type": "boolean"
        }
      },
      "id": "AppVersion",
      "description": "This represents a single version of the app.",
      "type": "object"
    },
    "KeyDestructionEvent": {
      "properties": {
        "success": {
          "description": "Whether the operation was successful.",
          "type": "boolean"
        },
        "applicationUid": {
          "type": "integer",
          "format": "int32",
          "description": "UID of the application which owns the key."
        },
        "keyAlias": {
          "description": "Alias of the key.",
          "type": "string"
        }
      },
      "description": "A cryptographic key including user installed, admin installed and system maintained private key is removed from the device either by the user or management. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.",
      "type": "object",
      "id": "KeyDestructionEvent"
    },
    "HardwareStatus": {
      "properties": {
        "fanSpeeds": {
          "description": "Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system.",
          "type": "array",
          "items": {
            "format": "float",
            "type": "number"
          }
        },
        "skinTemperatures": {
          "description": "Current device skin temperatures in Celsius.",
          "items": {
            "format": "float",
            "type": "number"
          },
          "type": "array"
        },
        "cpuUsages": {
          "description": "CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported in the system.",
          "items": {
            "format": "float",
            "type": "number"
          },
          "type": "array"
        },
        "gpuTemperatures": {
          "description": "Current GPU temperatures in Celsius for each GPU on the device.",
          "type": "array",
          "items": {
            "format": "float",
            "type": "number"
          }
        },
        "createTime": {
          "description": "The time the measurements were taken.",
          "format": "google-datetime",
          "type": "string"
        },
        "cpuTemperatures": {
          "items": {
            "type": "number",
            "format": "float"
          },
          "type": "array",
          "description": "Current CPU temperatures in Celsius for each CPU on the device."
        },
        "batteryTemperatures": {
          "description": "Current battery temperatures in Celsius for each battery on the device.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "description": "Hardware status. Temperatures may be compared to the temperature thresholds available in hardwareInfo to determine hardware health.",
      "id": "HardwareStatus",
      "type": "object"
    },
    "OncWifiContext": {
      "properties": {
        "wifiGuid": {
          "type": "string",
          "description": "The GUID of non-compliant Wi-Fi configuration."
        }
      },
      "description": "Additional context for non-compliance related to Wi-Fi configuration.",
      "id": "OncWifiContext",
      "type": "object"
    },
    "ProxyInfo": {
      "type": "object",
      "id": "ProxyInfo",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port of the direct proxy."
        },
        "pacUri": {
          "description": "The URI of the PAC script used to configure the proxy.",
          "type": "string"
        },
        "excludedHosts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For a direct proxy, the hosts for which the proxy is bypassed. The host names may contain wildcards such as *.example.com."
        },
        "host": {
          "type": "string",
          "description": "The host of the direct proxy."
        }
      },
      "description": "Configuration info for an HTTP proxy. For a direct proxy, set the host, port, and excluded_hosts fields. For a PAC script proxy, set the pac_uri field."
    },
    "KioskCustomization": {
      "properties": {
        "systemErrorWarnings": {
          "description": "Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the \"close app\" option on the UI.",
          "enumDescriptions": [
            "Unspecified, defaults to ERROR_AND_WARNINGS_MUTED.",
            "All system error dialogs such as crash and app not responding (ANR) are displayed.",
            "All system error dialogs, such as crash and app not responding (ANR) are blocked. When blocked, the system force-stops the app as if the user closes the app from the UI."
          ],
          "enum": [
            "SYSTEM_ERROR_WARNINGS_UNSPECIFIED",
            "ERROR_AND_WARNINGS_ENABLED",
            "ERROR_AND_WARNINGS_MUTED"
          ],
          "type": "string"
        },
        "deviceSettings": {
          "type": "string",
          "description": "Specifies whether the Settings app is allowed in kiosk mode.",
          "enumDescriptions": [
            "Unspecified, defaults to SETTINGS_ACCESS_ALLOWED.",
            "Access to the Settings app is allowed in kiosk mode.",
            "Access to the Settings app is not allowed in kiosk mode."
          ],
          "enum": [
            "DEVICE_SETTINGS_UNSPECIFIED",
            "SETTINGS_ACCESS_ALLOWED",
            "SETTINGS_ACCESS_BLOCKED"
          ]
        },
        "powerButtonActions": {
          "enumDescriptions": [
            "Unspecified, defaults to POWER_BUTTON_AVAILABLE.",
            "The power menu (e.g. Power off, Restart) is shown when a user long-presses the Power button of a device in kiosk mode.",
            "The power menu (e.g. Power off, Restart) is not shown when a user long-presses the Power button of a device in kiosk mode. Note: this may prevent users from turning off the device."
          ],
          "description": "Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button.",
          "type": "string",
          "enum": [
            "POWER_BUTTON_ACTIONS_UNSPECIFIED",
            "POWER_BUTTON_AVAILABLE",
            "POWER_BUTTON_BLOCKED"
          ]
        },
        "statusBar": {
          "type": "string",
          "enum": [
            "STATUS_BAR_UNSPECIFIED",
            "NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED",
            "NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED",
            "SYSTEM_INFO_ONLY"
          ],
          "enumDescriptions": [
            "Unspecified, defaults to INFO_AND_NOTIFICATIONS_DISABLED.",
            "System info and notifications are shown on the status bar in kiosk mode.Note: For this policy to take effect, the device's home button must be enabled using kioskCustomization.systemNavigation.",
            "System info and notifications are disabled in kiosk mode.",
            "Only system info is shown on the status bar."
          ],
          "description": "Specifies whether system info and notifications are disabled in kiosk mode."
        },
        "systemNavigation": {
          "enumDescriptions": [
            "Unspecified, defaults to NAVIGATION_DISABLED.",
            "Home and overview buttons are enabled.",
            "The home and Overview buttons are not accessible.",
            "Only the home button is enabled."
          ],
          "description": "Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.",
          "type": "string",
          "enum": [
            "SYSTEM_NAVIGATION_UNSPECIFIED",
            "NAVIGATION_ENABLED",
            "NAVIGATION_DISABLED",
            "HOME_BUTTON_ONLY"
          ]
        }
      },
      "id": "KioskCustomization",
      "description": "Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.",
      "type": "object"
    },
    "ExternalData": {
      "type": "object",
      "properties": {
        "sha256Hash": {
          "type": "string",
          "description": "The base-64 encoded SHA-256 hash of the content hosted at url. If the content doesn't match this hash, Android Device Policy won't use the data."
        },
        "url": {
          "description": "The absolute URL to the data, which must use either the http or https scheme. Android Device Policy doesn't provide any credentials in the GET request, so the URL must be publicly accessible. Including a long, random component in the URL may be used to prevent attackers from discovering the URL.",
          "type": "string"
        }
      },
      "id": "ExternalData",
      "description": "Data hosted at an external location. The data is to be downloaded by Android Device Policy and verified against the hash."
    },
    "ListPoliciesResponse": {
      "properties": {
        "nextPageToken": {
          "description": "If there are more results, a token to retrieve next page of results.",
          "type": "string"
        },
        "policies": {
          "items": {
            "$ref": "Policy"
          },
          "description": "The list of policies.",
          "type": "array"
        }
      },
      "description": "Response to a request to list policies for a given enterprise.",
      "type": "object",
      "id": "ListPoliciesResponse"
    },
    "KeyedAppState": {
      "id": "KeyedAppState",
      "properties": {
        "lastUpdateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time the app state was most recently updated."
        },
        "message": {
          "description": "Optionally, a free-form message string to explain the app state. If the state was triggered by a particular value (e.g. a managed configuration value), it should be included in the message.",
          "type": "string"
        },
        "key": {
          "description": "The key for the app state. Acts as a point of reference for what the app is providing state for. For example, when providing managed configuration feedback, this key could be the managed configuration key.",
          "type": "string"
        },
        "severity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "INFO",
            "ERROR"
          ],
          "enumDescriptions": [
            "Unspecified severity level.",
            "Information severity level.",
            "Error severity level. This should only be set for genuine error conditions that a management organization needs to take action to fix."
          ],
          "description": "The severity of the app state.",
          "type": "string"
        },
        "createTime": {
          "description": "The creation time of the app state on the device.",
          "type": "string",
          "format": "google-datetime"
        },
        "data": {
          "type": "string",
          "description": "Optionally, a machine-readable value to be read by the EMM. For example, setting values that the admin can choose to query against in the EMM console (e.g. “notify me if the battery_warning data \u003c 10”)."
        }
      },
      "description": "Keyed app state reported by the app.",
      "type": "object"
    },
    "ManagedPropertyEntry": {
      "properties": {
        "name": {
          "description": "The human-readable name of the value. Localized.",
          "type": "string"
        },
        "value": {
          "description": "The machine-readable value of the entry, which should be used in the configuration. Not localized.",
          "type": "string"
        }
      },
      "id": "ManagedPropertyEntry",
      "description": "An entry of a managed property.",
      "type": "object"
    },
    "BlockAction": {
      "id": "BlockAction",
      "description": "An action to block access to apps and data on a fully managed device or in a work profile. This action also triggers a device or work profile to displays a user-facing notification with information (where possible) on how to correct the compliance issue. Note: wipeAction must also be specified.",
      "properties": {
        "blockScope": {
          "type": "string",
          "description": "Specifies the scope of this BlockAction. Only applicable to devices that are company-owned.",
          "enumDescriptions": [
            "Unspecified. Defaults to BLOCK_SCOPE_WORK_PROFILE.",
            "Block action is only applied to apps in the work profile. Apps in the personal profile are unaffected.",
            "Block action is applied to the entire device, including apps in the personal profile."
          ],
          "enum": [
            "BLOCK_SCOPE_UNSPECIFIED",
            "BLOCK_SCOPE_WORK_PROFILE",
            "BLOCK_SCOPE_DEVICE"
          ]
        },
        "blockAfterDays": {
          "format": "int32",
          "description": "Number of days the policy is non-compliant before the device or work profile is blocked. To block access immediately, set to 0. blockAfterDays must be less than wipeAfterDays.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExtensionConfig": {
      "properties": {
        "notificationReceiver": {
          "type": "string",
          "description": "Fully qualified class name of the receiver service class for Android Device Policy to notify the extension app of any local command status updates."
        },
        "signingKeyFingerprintsSha256": {
          "items": {
            "type": "string"
          },
          "description": "Hex-encoded SHA-256 hash of the signing certificate of the extension app. Only hexadecimal string representations of 64 characters are valid.If not specified, the signature for the corresponding package name is obtained from the Play Store instead.If this list is empty, the signature of the extension app on the device must match the signature obtained from the Play Store for the app to be able to communicate with Android Device Policy.If this list is not empty, the signature of the extension app on the device must match one of the entries in this list for the app to be able to communicate with Android Device Policy.In production use cases, it is recommended to leave this empty.",
          "type": "array"
        }
      },
      "id": "ExtensionConfig",
      "type": "object",
      "description": "Configuration to enable an app as an extension app, with the capability of interacting with Android Device Policy offline."
    },
    "BatchUsageLogEvents": {
      "description": "Batched event logs of events from the device.",
      "id": "BatchUsageLogEvents",
      "type": "object",
      "properties": {
        "retrievalTime": {
          "format": "google-datetime",
          "description": "The device timestamp when the batch of events were collected from the device.",
          "type": "string"
        },
        "device": {
          "type": "string",
          "description": "The name of the device in the form ‘enterprises/{enterpriseId}/devices/{deviceId}’"
        },
        "user": {
          "type": "string",
          "description": "The resource name of the user that owns this device in the form ‘enterprises/{enterpriseId}/users/{userId}’."
        },
        "usageLogEvents": {
          "type": "array",
          "description": "The list of UsageLogEvent that were reported by the device, sorted chronologically by the event time.",
          "items": {
            "$ref": "UsageLogEvent"
          }
        }
      }
    },
    "UsageLogEvent": {
      "type": "object",
      "properties": {
        "certAuthorityInstalledEvent": {
          "description": "A new root certificate was installed into the system's trusted credential storage. Part of SECURITY_LOGS.",
          "$ref": "CertAuthorityInstalledEvent"
        },
        "keyGeneratedEvent": {
          "description": "A cryptographic key including user installed, admin installed and system maintained private key is installed on the device either by the user or management. Part of SECURITY_LOGS.",
          "$ref": "KeyGeneratedEvent"
        },
        "keyIntegrityViolationEvent": {
          "description": "A cryptographic key including user installed, admin installed and system maintained private key is determined to be corrupted due to storage corruption, hardware failure or some OS issue. Part of SECURITY_LOGS.",
          "$ref": "KeyIntegrityViolationEvent"
        },
        "keyguardDismissedEvent": {
          "$ref": "KeyguardDismissedEvent",
          "description": "The keyguard was dismissed. Part of SECURITY_LOGS."
        },
        "wipeFailureEvent": {
          "$ref": "WipeFailureEvent",
          "description": "The work profile or company-owned device failed to wipe when requested. This could be user initiated or admin initiated e.g. delete was received. Part of SECURITY_LOGS."
        },
        "eventTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Device timestamp when the event was logged."
        },
        "loggingStartedEvent": {
          "description": "usageLog policy has been enabled. Part of SECURITY_LOGS.",
          "$ref": "LoggingStartedEvent"
        },
        "dnsEvent": {
          "$ref": "DnsEvent",
          "description": "A DNS lookup event was initiated through the standard network stack. Part of NETWORK_ACTIVITY_LOGS."
        },
        "adbShellInteractiveEvent": {
          "$ref": "AdbShellInteractiveEvent",
          "description": "An ADB interactive shell was opened via “adb shell”. Part of SECURITY_LOGS."
        },
        "osStartupEvent": {
          "$ref": "OsStartupEvent",
          "description": "Device was started. Part of SECURITY_LOGS."
        },
        "certValidationFailureEvent": {
          "description": "An X.509v3 certificate failed to validate, currently this validation is performed on the Wi-FI access point and failure may be due to a mismatch upon server certificate validation. However it may in the future include other validation events of an X.509v3 certificate. Part of SECURITY_LOGS.",
          "$ref": "CertValidationFailureEvent"
        },
        "keyguardSecuredEvent": {
          "description": "The device was locked either by user or timeout. Part of SECURITY_LOGS.",
          "$ref": "KeyguardSecuredEvent"
        },
        "keyguardDismissAuthAttemptEvent": {
          "description": "An attempt was made to unlock the device. Part of SECURITY_LOGS.",
          "$ref": "KeyguardDismissAuthAttemptEvent"
        },
        "adbShellCommandEvent": {
          "description": "A shell command was issued over ADB via “adb shell command”. Part of SECURITY_LOGS.",
          "$ref": "AdbShellCommandEvent"
        },
        "logBufferSizeCriticalEvent": {
          "description": "The audit log buffer has reached 90% of its capacity, therefore older events may be dropped. Part of SECURITY_LOGS.",
          "$ref": "LogBufferSizeCriticalEvent"
        },
        "remoteLockEvent": {
          "$ref": "RemoteLockEvent",
          "description": "The device or profile has been remotely locked via the LOCK command. Part of SECURITY_LOGS."
        },
        "appProcessStartEvent": {
          "description": "An app process was started. Part of SECURITY_LOGS.",
          "$ref": "AppProcessStartEvent"
        },
        "filePushedEvent": {
          "description": "A file was uploaded onto the device. Part of SECURITY_LOGS.",
          "$ref": "FilePushedEvent"
        },
        "certAuthorityRemovedEvent": {
          "$ref": "CertAuthorityRemovedEvent",
          "description": "A root certificate was removed from the system's trusted credential storage. Part of SECURITY_LOGS."
        },
        "keyDestructionEvent": {
          "$ref": "KeyDestructionEvent",
          "description": "A cryptographic key including user installed, admin installed and system maintained private key is removed from the device either by the user or management. Part of SECURITY_LOGS."
        },
        "eventId": {
          "format": "int64",
          "type": "string",
          "description": "Unique id of the event."
        },
        "eventType": {
          "enum": [
            "EVENT_TYPE_UNSPECIFIED",
            "ADB_SHELL_COMMAND",
            "ADB_SHELL_INTERACTIVE",
            "APP_PROCESS_START",
            "KEYGUARD_DISMISSED",
            "KEYGUARD_DISMISS_AUTH_ATTEMPT",
            "KEYGUARD_SECURED",
            "FILE_PULLED",
            "FILE_PUSHED",
            "CERT_AUTHORITY_INSTALLED",
            "CERT_AUTHORITY_REMOVED",
            "CERT_VALIDATION_FAILURE",
            "CRYPTO_SELF_TEST_COMPLETED",
            "KEY_DESTRUCTION",
            "KEY_GENERATED",
            "KEY_IMPORT",
            "KEY_INTEGRITY_VIOLATION",
            "LOGGING_STARTED",
            "LOGGING_STOPPED",
            "LOG_BUFFER_SIZE_CRITICAL",
            "MEDIA_MOUNT",
            "MEDIA_UNMOUNT",
            "OS_SHUTDOWN",
            "OS_STARTUP",
            "REMOTE_LOCK",
            "WIPE_FAILURE",
            "CONNECT",
            "DNS"
          ],
          "type": "string",
          "description": "The particular usage log event type that was reported on the device. Use this to determine which event field to access.",
          "enumDescriptions": [
            "This value is not used",
            "Indicates adb_shell_command_event has been set.",
            "Indicates adb_shell_interactive_event has been set.",
            "Indicates app_process_start_event has been set.",
            "Indicates keyguard_dismissed_event has been set.",
            "Indicates keyguard_dismiss_auth_attempt_event has been set.",
            "Indicates keyguard_secured_event has been set.",
            "Indicates file_pulled_event has been set.",
            "Indicates file_pushed_event has been set.",
            "Indicates cert_authority_installed_event has been set.",
            "Indicates cert_authority_removed_event has been set.",
            "Indicates cert_validation_failure_event has been set.",
            "Indicates crypto_self_test_completed_event has been set.",
            "Indicates key_destruction_event has been set.",
            "Indicates key_generated_event has been set.",
            "Indicates key_import_event has been set.",
            "Indicates key_integrity_violation_event has been set.",
            "Indicates logging_started_event has been set.",
            "Indicates logging_stopped_event has been set.",
            "Indicates log_buffer_size_critical_event has been set.",
            "Indicates media_mount_event has been set.",
            "Indicates media_unmount_event has been set.",
            "Indicates os_shutdown_event has been set.",
            "Indicates os_startup_event has been set.",
            "Indicates remote_lock_event has been set.",
            "Indicates wipe_failure_event has been set.",
            "Indicates connect_event has been set.",
            "Indicates dns_event has been set."
          ]
        },
        "osShutdownEvent": {
          "$ref": "OsShutdownEvent",
          "description": "Device was shutdown. Part of SECURITY_LOGS."
        },
        "loggingStoppedEvent": {
          "$ref": "LoggingStoppedEvent",
          "description": "usageLog policy has been disabled. Part of SECURITY_LOGS."
        },
        "connectEvent": {
          "$ref": "ConnectEvent",
          "description": "A TCP connect event was initiated through the standard network stack. Part of NETWORK_ACTIVITY_LOGS."
        },
        "cryptoSelfTestCompletedEvent": {
          "description": "Validates whether Android’s built-in cryptographic library (BoringSSL) is valid. Should always succeed on device boot, if it fails, the device should be considered untrusted. Part of SECURITY_LOGS.",
          "$ref": "CryptoSelfTestCompletedEvent"
        },
        "filePulledEvent": {
          "$ref": "FilePulledEvent",
          "description": "A file was downloaded from the device. Part of SECURITY_LOGS."
        },
        "keyImportEvent": {
          "$ref": "KeyImportEvent",
          "description": "A cryptographic key including user installed, admin installed and system maintained private key is imported on the device either by the user or management. Part of SECURITY_LOGS."
        },
        "mediaUnmountEvent": {
          "description": "Removable media was unmounted. Part of SECURITY_LOGS.",
          "$ref": "MediaUnmountEvent"
        },
        "mediaMountEvent": {
          "$ref": "MediaMountEvent",
          "description": "Removable media was mounted. Part of SECURITY_LOGS."
        }
      },
      "description": "An event logged on the device.",
      "id": "UsageLogEvent"
    },
    "ConnectEvent": {
      "description": "A TCP connect event was initiated through the standard network stack.",
      "properties": {
        "destinationPort": {
          "type": "integer",
          "format": "int32",
          "description": "The destination port of the connect call."
        },
        "destinationIpAddress": {
          "type": "string",
          "description": "The destination IP address of the connect call."
        },
        "packageName": {
          "type": "string",
          "description": "The package name of the UID that performed the connect call."
        }
      },
      "type": "object",
      "id": "ConnectEvent"
    },
    "PermissionGrant": {
      "type": "object",
      "description": "Configuration for an Android permission and its grant state.",
      "id": "PermissionGrant",
      "properties": {
        "policy": {
          "type": "string",
          "enumDescriptions": [
            "Policy not specified. If no policy is specified for a permission at any level, then the PROMPT behavior is used by default.",
            "Prompt the user to grant a permission.",
            "Automatically grant a permission.",
            "Automatically deny a permission."
          ],
          "description": "The policy for granting the permission.",
          "enum": [
            "PERMISSION_POLICY_UNSPECIFIED",
            "PROMPT",
            "GRANT",
            "DENY"
          ]
        },
        "permission": {
          "description": "The Android permission or group, e.g. android.permission.READ_CALENDAR or android.permission_group.CALENDAR.",
          "type": "string"
        }
      }
    },
    "IssueCommandResponse": {
      "id": "IssueCommandResponse",
      "description": "Response on issuing a command. This is currently empty as a placeholder.",
      "properties": {},
      "type": "object"
    },
    "SystemUpdate": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of system update to configure.",
          "enum": [
            "SYSTEM_UPDATE_TYPE_UNSPECIFIED",
            "AUTOMATIC",
            "WINDOWED",
            "POSTPONE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Follow the default update behavior for the device, which typically requires the user to accept system updates.",
            "Install automatically as soon as an update is available.",
            "Install automatically within a daily maintenance window. This also configures Play apps to be updated within the window. This is strongly recommended for kiosk devices because this is the only way apps persistently pinned to the foreground can be updated by Play.If autoUpdateMode is set to AUTO_UPDATE_HIGH_PRIORITY for an app, then the maintenance window is ignored for that app and it is updated as soon as possible even outside of the maintenance window.",
            "Postpone automatic install up to a maximum of 30 days."
          ]
        },
        "endMinutes": {
          "format": "int32",
          "description": "If the type is WINDOWED, the end of the maintenance window, measured as the number of minutes after midnight in device's local time. This value must be between 0 and 1439, inclusive. If this value is less than start_minutes, then the maintenance window spans midnight. If the maintenance window specified is smaller than 30 minutes, the actual window is extended to 30 minutes beyond the start time.",
          "type": "integer"
        },
        "startMinutes": {
          "description": "If the type is WINDOWED, the start of the maintenance window, measured as the number of minutes after midnight in the device's local time. This value must be between 0 and 1439, inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "freezePeriods": {
          "items": {
            "$ref": "FreezePeriod"
          },
          "description": "An annually repeating time period in which over-the-air (OTA) system updates are postponed to freeze the OS version running on a device. To prevent freezing the device indefinitely, each freeze period must be separated by at least 60 days.",
          "type": "array"
        }
      },
      "id": "SystemUpdate",
      "description": "Configuration for managing system updates"
    },
    "ApplicationReportingSettings": {
      "type": "object",
      "properties": {
        "includeRemovedApps": {
          "description": "Whether removed apps are included in application reports.",
          "type": "boolean"
        }
      },
      "description": "Settings controlling the behavior of application reports.",
      "id": "ApplicationReportingSettings"
    },
    "NetworkInfo": {
      "description": "Device network info.",
      "type": "object",
      "id": "NetworkInfo",
      "properties": {
        "networkOperatorName": {
          "description": "Alphabetic name of current registered operator. For example, Vodafone.",
          "type": "string"
        },
        "imei": {
          "description": "IMEI number of the GSM device. For example, A1000031212.",
          "type": "string"
        },
        "wifiMacAddress": {
          "description": "Wi-Fi MAC address of the device. For example, 7c:11:11:11:11:11.",
          "type": "string"
        },
        "telephonyInfos": {
          "description": "Provides telephony information associated with each SIM card on the device. Only supported on fully managed devices starting from Android API level 23.",
          "type": "array",
          "items": {
            "$ref": "TelephonyInfo"
          }
        },
        "meid": {
          "type": "string",
          "description": "MEID number of the CDMA device. For example, A00000292788E1."
        }
      }
    },
    "SoftwareInfo": {
      "properties": {
        "systemUpdateInfo": {
          "$ref": "SystemUpdateInfo",
          "description": "Information about a potential pending system update."
        },
        "bootloaderVersion": {
          "description": "The system bootloader version number, e.g. 0.6.7.",
          "type": "string"
        },
        "primaryLanguageCode": {
          "type": "string",
          "description": "An IETF BCP 47 language code for the primary locale on the device."
        },
        "androidDevicePolicyVersionName": {
          "type": "string",
          "description": "The Android Device Policy app version as displayed to the user."
        },
        "androidDevicePolicyVersionCode": {
          "description": "The Android Device Policy app version code.",
          "format": "int32",
          "type": "integer"
        },
        "deviceBuildSignature": {
          "type": "string",
          "description": "SHA-256 hash of android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the system package, which can be used to verify that the system build hasn't been modified."
        },
        "deviceKernelVersion": {
          "description": "Kernel version, for example, 2.6.32.9-g103d848.",
          "type": "string"
        },
        "androidVersion": {
          "description": "The user-visible Android version string. For example, 6.0.1.",
          "type": "string"
        },
        "securityPatchLevel": {
          "type": "string",
          "description": "Security patch level, e.g. 2016-05-01."
        },
        "androidBuildTime": {
          "description": "Build time.",
          "type": "string",
          "format": "google-datetime"
        },
        "androidBuildNumber": {
          "type": "string",
          "description": "Android build ID string meant for displaying to the user. For example, shamu-userdebug 6.0.1 MOB30I 2756745 dev-keys."
        }
      },
      "description": "Information about device software.",
      "id": "SoftwareInfo",
      "type": "object"
    },
    "FilePulledEvent": {
      "id": "FilePulledEvent",
      "type": "object",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "The path of the file being pulled."
        }
      },
      "description": "A file was downloaded from the device."
    },
    "CryptoSelfTestCompletedEvent": {
      "properties": {
        "success": {
          "description": "Whether the test succeeded.",
          "type": "boolean"
        }
      },
      "id": "CryptoSelfTestCompletedEvent",
      "description": "Validates whether Android’s built-in cryptographic library (BoringSSL) is valid. Should always succeed on device boot, if it fails, the device should be considered untrusted.",
      "type": "object"
    },
    "KeyguardDismissedEvent": {
      "description": "The keyguard was dismissed. Intentionally empty.",
      "type": "object",
      "properties": {},
      "id": "KeyguardDismissedEvent"
    },
    "LaunchAppAction": {
      "description": "An action to launch an app.",
      "id": "LaunchAppAction",
      "type": "object",
      "properties": {
        "packageName": {
          "type": "string",
          "description": "Package name of app to be launched"
        }
      }
    },
    "PowerManagementEvent": {
      "properties": {
        "createTime": {
          "type": "string",
          "description": "The creation time of the event.",
          "format": "google-datetime"
        },
        "eventType": {
          "description": "Event type.",
          "type": "string",
          "enum": [
            "POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED",
            "BATTERY_LEVEL_COLLECTED",
            "POWER_CONNECTED",
            "POWER_DISCONNECTED",
            "BATTERY_LOW",
            "BATTERY_OKAY",
            "BOOT_COMPLETED",
            "SHUTDOWN"
          ],
          "enumDescriptions": [
            "Unspecified. No events have this type.",
            "Battery level was measured.",
            "The device started charging.",
            "The device stopped charging.",
            "The device entered low-power mode.",
            "The device exited low-power mode.",
            "The device booted.",
            "The device shut down."
          ]
        },
        "batteryLevel": {
          "description": "For BATTERY_LEVEL_COLLECTED events, the battery level as a percentage.",
          "type": "number",
          "format": "float"
        }
      },
      "type": "object",
      "description": "A power management event.",
      "id": "PowerManagementEvent"
    },
    "MediaUnmountEvent": {
      "type": "object",
      "description": "Removable media was unmounted.",
      "id": "MediaUnmountEvent",
      "properties": {
        "mountPoint": {
          "type": "string",
          "description": "Mount point."
        },
        "volumeLabel": {
          "description": "Volume label. Redacted to empty string on organization-owned managed profile devices.",
          "type": "string"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "A policy resource represents a group of settings that govern the behavior of a managed device and the apps installed on it.",
      "type": "object",
      "properties": {
        "networkEscapeHatchEnabled": {
          "description": "Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily connect to a network in order to refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue booting. This prevents being unable to connect to a network if there is no suitable network in the last policy and the device boots into an app in lock task mode, or the user is otherwise unable to reach device settings.Note: Setting wifiConfigDisabled to true will override this setting under specific circumstances. Please see wifiConfigDisabled for further details.",
          "type": "boolean"
        },
        "keyguardDisabled": {
          "description": "If true, this disables the Lock Screen (https://source.android.com/docs/core/display/multi_display/lock-screen) for primary and/or secondary displays.",
          "type": "boolean"
        },
        "networkResetDisabled": {
          "description": "Whether resetting network settings is disabled.",
          "type": "boolean"
        },
        "cameraDisabled": {
          "type": "boolean",
          "description": "If camera_access is set to any value other than CAMERA_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether cameras are disabled: If true, all cameras are disabled, otherwise they are available. For fully managed devices this field applies for all apps on the device. For work profiles, this field applies only to apps in the work profile, and the camera access of apps outside the work profile is unaffected."
        },
        "unmuteMicrophoneDisabled": {
          "description": "If microphone_access is set to any value other than MICROPHONE_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether microphones are disabled: If true, all microphones are disabled, otherwise they are available. This is available only on fully managed devices.",
          "type": "boolean"
        },
        "passwordRequirements": {
          "$ref": "PasswordRequirements",
          "description": "Password requirements. The field password_requirements.require_password_unlock must not be set. DEPRECATED - Use passwordPolicies.Note:Complexity-based values of PasswordQuality, that is, COMPLEXITY_LOW, COMPLEXITY_MEDIUM, and COMPLEXITY_HIGH, cannot be used here. unified_lock_settings cannot be used here."
        },
        "installUnknownSourcesAllowed": {
          "type": "boolean",
          "description": "This field has no effect."
        },
        "tetheringConfigDisabled": {
          "type": "boolean",
          "description": "Whether configuring tethering and portable hotspots is disabled."
        },
        "installAppsDisabled": {
          "description": "Whether user installation of apps is disabled.",
          "type": "boolean"
        },
        "autoDateAndTimeZone": {
          "description": "Whether auto date, time, and time zone are enabled on a company-owned device. If this is set, then autoTimeRequired is ignored.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified. Defaults to AUTO_DATE_AND_TIME_ZONE_USER_CHOICE.",
            "Auto date, time, and time zone are left to user's choice.",
            "Enforce auto date, time, and time zone on the device."
          ],
          "enum": [
            "AUTO_DATE_AND_TIME_ZONE_UNSPECIFIED",
            "AUTO_DATE_AND_TIME_ZONE_USER_CHOICE",
            "AUTO_DATE_AND_TIME_ZONE_ENFORCED"
          ]
        },
        "ensureVerifyAppsEnabled": {
          "type": "boolean",
          "description": "Whether app verification is force-enabled."
        },
        "vpnConfigDisabled": {
          "description": "Whether configuring VPN is disabled.",
          "type": "boolean"
        },
        "androidDevicePolicyTracks": {
          "type": "array",
          "items": {
            "enum": [
              "APP_TRACK_UNSPECIFIED",
              "PRODUCTION",
              "BETA"
            ],
            "type": "string",
            "enumDescriptions": [
              "This value is ignored.",
              "The production track, which provides the latest stable release.",
              "The beta track, which provides the latest beta release."
            ]
          },
          "description": "The app tracks for Android Device Policy the device can access. The device receives the latest version among all accessible tracks. If no tracks are specified, then the device only uses the production track."
        },
        "version": {
          "format": "int64",
          "description": "The version of the policy. This is a read-only field. The version is incremented each time the policy is updated.",
          "type": "string"
        },
        "encryptionPolicy": {
          "enumDescriptions": [
            "This value is ignored, i.e. no encryption required",
            "Encryption required but no password required to boot",
            "Encryption required with password required to boot"
          ],
          "enum": [
            "ENCRYPTION_POLICY_UNSPECIFIED",
            "ENABLED_WITHOUT_PASSWORD",
            "ENABLED_WITH_PASSWORD"
          ],
          "description": "Whether encryption is enabled",
          "type": "string"
        },
        "openNetworkConfiguration": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          },
          "description": "Network configuration for the device. See configure networks for more information.",
          "type": "object"
        },
        "minimumApiLevel": {
          "format": "int32",
          "description": "The minimum allowed Android API level.",
          "type": "integer"
        },
        "blockApplicationsEnabled": {
          "type": "boolean",
          "description": "Whether applications other than the ones configured in applications are blocked from being installed. When set, applications that were installed under a previous policy but no longer appear in the policy are automatically uninstalled."
        },
        "smsDisabled": {
          "type": "boolean",
          "description": "Whether sending and receiving SMS messages is disabled."
        },
        "shortSupportMessage": {
          "description": "A message displayed to the user in the settings screen wherever functionality has been disabled by the admin. If the message is longer than 200 characters it may be truncated.",
          "$ref": "UserFacingMessage"
        },
        "crossProfilePolicies": {
          "$ref": "CrossProfilePolicies",
          "description": "Cross-profile policies applied on the device."
        },
        "setUserIconDisabled": {
          "type": "boolean",
          "description": "Whether changing the user icon is disabled."
        },
        "advancedSecurityOverrides": {
          "$ref": "AdvancedSecurityOverrides",
          "description": "Security policies set to secure values by default. To maintain the security posture of a device, we don't recommend overriding any of the default values."
        },
        "usageLog": {
          "description": "Configuration of device activity logging.",
          "$ref": "UsageLog"
        },
        "passwordPolicies": {
          "description": "Password requirement policies. Different policies can be set for work profile or fully managed devices by setting the password_scope field in the policy.",
          "type": "array",
          "items": {
            "$ref": "PasswordRequirements"
          }
        },
        "maximumTimeToLock": {
          "format": "int64",
          "type": "string",
          "description": "Maximum time in milliseconds for user activity until the device locks. A value of 0 means there is no restriction."
        },
        "wifiConfigDisabled": {
          "type": "boolean",
          "description": "Whether configuring Wi-Fi access points is disabled. Note: If a network connection can't be made at boot time and configuring Wi-Fi is disabled then network escape hatch will be shown in order to refresh the device policy (see networkEscapeHatchEnabled)."
        },
        "playStoreMode": {
          "description": "This mode controls which apps are available to the user in the Play Store and the behavior on the device when apps are removed from the policy.",
          "type": "string",
          "enum": [
            "PLAY_STORE_MODE_UNSPECIFIED",
            "WHITELIST",
            "BLACKLIST"
          ],
          "enumDescriptions": [
            "Unspecified. Defaults to WHITELIST.",
            "Only apps that are in the policy are available and any app not in the policy will be automatically uninstalled from the device.",
            "All apps are available and any app that should not be on the device should be explicitly marked as 'BLOCKED' in the applications policy."
          ]
        },
        "statusBarDisabled": {
          "type": "boolean",
          "description": "Whether the status bar is disabled. This disables notifications, quick settings, and other screen overlays that allow escape from full-screen mode. DEPRECATED. To disable the status bar on a kiosk device, use InstallType KIOSK or kioskCustomLauncherEnabled."
        },
        "bluetoothDisabled": {
          "type": "boolean",
          "description": "Whether bluetooth is disabled. Prefer this setting over bluetooth_config_disabled because bluetooth_config_disabled can be bypassed by the user."
        },
        "keyguardDisabledFeatures": {
          "items": {
            "type": "string",
            "enum": [
              "KEYGUARD_DISABLED_FEATURE_UNSPECIFIED",
              "CAMERA",
              "NOTIFICATIONS",
              "UNREDACTED_NOTIFICATIONS",
              "TRUST_AGENTS",
              "DISABLE_FINGERPRINT",
              "DISABLE_REMOTE_INPUT",
              "FACE",
              "IRIS",
              "BIOMETRICS",
              "ALL_FEATURES"
            ],
            "enumDescriptions": [
              "This value is ignored.",
              "Disable the camera on secure keyguard screens (e.g. PIN).",
              "Disable showing all notifications on secure keyguard screens.",
              "Disable unredacted notifications on secure keyguard screens.",
              "Ignore trust agent state on secure keyguard screens.",
              "Disable fingerprint sensor on secure keyguard screens.",
              "On devices running Android 6 and below, disables text entry into notifications on secure keyguard screens. Has no effect on Android 7 and above.",
              "Disable face authentication on secure keyguard screens.",
              "Disable iris authentication on secure keyguard screens.",
              "Disable all biometric authentication on secure keyguard screens.",
              "Disable all current and future keyguard customizations."
            ]
          },
          "type": "array",
          "description": "Disabled keyguard customizations, such as widgets."
        },
        "adjustVolumeDisabled": {
          "type": "boolean",
          "description": "Whether adjusting the master volume is disabled. Also mutes the device."
        },
        "defaultPermissionPolicy": {
          "enum": [
            "PERMISSION_POLICY_UNSPECIFIED",
            "PROMPT",
            "GRANT",
            "DENY"
          ],
          "description": "The default permission policy for runtime permission requests.",
          "type": "string",
          "enumDescriptions": [
            "Policy not specified. If no policy is specified for a permission at any level, then the PROMPT behavior is used by default.",
            "Prompt the user to grant a permission.",
            "Automatically grant a permission.",
            "Automatically deny a permission."
          ]
        },
        "locationMode": {
          "description": "The degree of location detection enabled.",
          "enum": [
            "LOCATION_MODE_UNSPECIFIED",
            "HIGH_ACCURACY",
            "SENSORS_ONLY",
            "BATTERY_SAVING",
            "OFF",
            "LOCATION_USER_CHOICE",
            "LOCATION_ENFORCED",
            "LOCATION_DISABLED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Defaults to LOCATION_USER_CHOICE.",
            "On Android 8 and below, all location detection methods are enabled, including GPS, networks, and other sensors. On Android 9 and above, this is equivalent to LOCATION_ENFORCED.",
            "On Android 8 and below, only GPS and other sensors are enabled. On Android 9 and above, this is equivalent to LOCATION_ENFORCED.",
            "On Android 8 and below, only the network location provider is enabled. On Android 9 and above, this is equivalent to LOCATION_ENFORCED.",
            "On Android 8 and below, location setting and accuracy are disabled. On Android 9 and above, this is equivalent to LOCATION_DISABLED.",
            "Location setting is not restricted on the device. No specific behavior is set or enforced.",
            "Enable location setting on the device.",
            "Disable location setting on the device."
          ]
        },
        "preferentialNetworkService": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified. Defaults to PREFERENTIAL_NETWORK_SERVICES_DISABLED.",
            "Preferential network service is disabled on the work profile.",
            "Preferential network service is enabled on the work profile."
          ],
          "enum": [
            "PREFERENTIAL_NETWORK_SERVICE_UNSPECIFIED",
            "PREFERENTIAL_NETWORK_SERVICE_DISABLED",
            "PREFERENTIAL_NETWORK_SERVICE_ENABLED"
          ],
          "description": "Controls whether preferential network service is enabled on the work profile. For example, an organization may have an agreement with a carrier that all of the work data from its employees' devices will be sent via a network service dedicated for enterprise use. An example of a supported preferential network service is the enterprise slice on 5G networks. This has no effect on fully managed devices."
        },
        "screenCaptureDisabled": {
          "description": "Whether screen capture is disabled.",
          "type": "boolean"
        },
        "addUserDisabled": {
          "type": "boolean",
          "description": "Whether adding new users and profiles is disabled."
        },
        "funDisabled": {
          "type": "boolean",
          "description": "Whether the user is allowed to have fun. Controls whether the Easter egg game in Settings is disabled."
        },
        "statusReportingSettings": {
          "description": "Status reporting settings",
          "$ref": "StatusReportingSettings"
        },
        "credentialsConfigDisabled": {
          "description": "Whether configuring user credentials is disabled.",
          "type": "boolean"
        },
        "usbFileTransferDisabled": {
          "type": "boolean",
          "description": "Whether transferring files over USB is disabled. This is supported only on company-owned devices."
        },
        "setWallpaperDisabled": {
          "type": "boolean",
          "description": "Whether changing the wallpaper is disabled."
        },
        "autoTimeRequired": {
          "description": "Whether auto time is required, which prevents the user from manually setting the date and time. If autoDateAndTimeZone is set, this field is ignored.",
          "type": "boolean"
        },
        "permissionGrants": {
          "type": "array",
          "description": "Explicit permission or group grants or denials for all apps. These values override the default_permission_policy.",
          "items": {
            "$ref": "PermissionGrant"
          }
        },
        "factoryResetDisabled": {
          "description": "Whether factory resetting from settings is disabled.",
          "type": "boolean"
        },
        "cellBroadcastsConfigDisabled": {
          "type": "boolean",
          "description": "Whether configuring cell broadcast is disabled."
        },
        "mountPhysicalMediaDisabled": {
          "description": "Whether the user mounting physical external media is disabled.",
          "type": "boolean"
        },
        "permittedInputMethods": {
          "$ref": "PackageNameList",
          "description": "If present, only the input methods provided by packages in this list are permitted. If this field is present, but the list is empty, then only system input methods are permitted."
        },
        "frpAdminEmails": {
          "items": {
            "type": "string"
          },
          "description": "Email addresses of device administrators for factory reset protection. When the device is factory reset, it will require one of these admins to log in with the Google account email and password to unlock the device. If no admins are specified, the device won't provide factory reset protection.",
          "type": "array"
        },
        "safeBootDisabled": {
          "description": "Whether rebooting the device into safe boot is disabled.",
          "type": "boolean"
        },
        "dataRoamingDisabled": {
          "type": "boolean",
          "description": "Whether roaming data services are disabled."
        },
        "wifiConfigsLockdownEnabled": {
          "description": "DEPRECATED - Use wifi_config_disabled.",
          "type": "boolean"
        },
        "accountTypesWithManagementDisabled": {
          "type": "array",
          "description": "Account types that can't be managed by the user.",
          "items": {
            "type": "string"
          }
        },
        "cameraAccess": {
          "enum": [
            "CAMERA_ACCESS_UNSPECIFIED",
            "CAMERA_ACCESS_USER_CHOICE",
            "CAMERA_ACCESS_DISABLED",
            "CAMERA_ACCESS_ENFORCED"
          ],
          "type": "string",
          "enumDescriptions": [
            "If camera_disabled is true, this is equivalent to CAMERA_ACCESS_DISABLED. Otherwise, this is equivalent to CAMERA_ACCESS_USER_CHOICE.",
            "The field camera_disabled is ignored. This is the default device behaviour: all cameras on the device are available. On Android 12 and above, the user can use the camera access toggle.",
            "The field camera_disabled is ignored. All cameras on the device are disabled (for fully managed devices, this applies device-wide and for work profiles this applies only to the work profile).There are no explicit restrictions placed on the camera access toggle on Android 12 and above: on fully managed devices, the camera access toggle has no effect as all cameras are disabled. On devices with a work profile, this toggle has no effect on apps in the work profile, but it affects apps outside the work profile.",
            "The field camera_disabled is ignored. All cameras on the device are available. On fully managed devices running Android 12 and above, the user is unable to use the camera access toggle. On devices which are not fully managed or which run Android 11 or below, this is equivalent to CAMERA_ACCESS_USER_CHOICE."
          ],
          "description": "Controls the use of the camera and whether the user has access to the camera access toggle."
        },
        "microphoneAccess": {
          "description": "Controls the use of the microphone and whether the user has access to the microphone access toggle. This applies only on fully managed devices.",
          "enum": [
            "MICROPHONE_ACCESS_UNSPECIFIED",
            "MICROPHONE_ACCESS_USER_CHOICE",
            "MICROPHONE_ACCESS_DISABLED",
            "MICROPHONE_ACCESS_ENFORCED"
          ],
          "type": "string",
          "enumDescriptions": [
            "If unmute_microphone_disabled is true, this is equivalent to MICROPHONE_ACCESS_DISABLED. Otherwise, this is equivalent to MICROPHONE_ACCESS_USER_CHOICE.",
            "The field unmute_microphone_disabled is ignored. This is the default device behaviour: the microphone on the device is available. On Android 12 and above, the user can use the microphone access toggle.",
            "The field unmute_microphone_disabled is ignored. The microphone on the device is disabled (for fully managed devices, this applies device-wide).The microphone access toggle has no effect as the microphone is disabled.",
            "The field unmute_microphone_disabled is ignored. The microphone on the device is available. On devices running Android 12 and above, the user is unable to use the microphone access toggle. On devices which run Android 11 or below, this is equivalent to MICROPHONE_ACCESS_USER_CHOICE."
          ]
        },
        "applications": {
          "items": {
            "$ref": "ApplicationPolicy"
          },
          "description": "Policy applied to apps.",
          "type": "array"
        },
        "shareLocationDisabled": {
          "description": "Whether location sharing is disabled. share_location_disabled is supported for both fully managed devices and personally owned work profiles.",
          "type": "boolean"
        },
        "outgoingBeamDisabled": {
          "description": "Whether using NFC to beam data from apps is disabled.",
          "type": "boolean"
        },
        "policyEnforcementRules": {
          "items": {
            "$ref": "PolicyEnforcementRule"
          },
          "type": "array",
          "description": "Rules that define the behavior when a particular policy can not be applied on device"
        },
        "removeUserDisabled": {
          "description": "Whether removing other users is disabled.",
          "type": "boolean"
        },
        "alwaysOnVpnPackage": {
          "description": "Configuration for an always-on VPN connection. Use with vpn_config_disabled to prevent modification of this setting.",
          "$ref": "AlwaysOnVpnPackage"
        },
        "createWindowsDisabled": {
          "description": "Whether creating windows besides app windows is disabled.",
          "type": "boolean"
        },
        "longSupportMessage": {
          "$ref": "UserFacingMessage",
          "description": "A message displayed to the user in the device administators settings screen."
        },
        "uninstallAppsDisabled": {
          "description": "Whether user uninstallation of applications is disabled. This prevents apps from being uninstalled, even those removed using applications",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}."
        },
        "outgoingCallsDisabled": {
          "type": "boolean",
          "description": "Whether outgoing calls are disabled."
        },
        "skipFirstUseHintsEnabled": {
          "description": "Flag to skip hints on the first use. Enterprise admin can enable the system recommendation for apps to skip their user tutorial and other introductory hints on first start-up.",
          "type": "boolean"
        },
        "appAutoUpdatePolicy": {
          "enum": [
            "APP_AUTO_UPDATE_POLICY_UNSPECIFIED",
            "CHOICE_TO_THE_USER",
            "NEVER",
            "WIFI_ONLY",
            "ALWAYS"
          ],
          "type": "string",
          "enumDescriptions": [
            "The auto-update policy is not set. Equivalent to CHOICE_TO_THE_USER.",
            "The user can control auto-updates.",
            "Apps are never auto-updated.",
            "Apps are auto-updated over Wi-Fi only.",
            "Apps are auto-updated at any time. Data charges may apply."
          ],
          "description": "Deprecated. Use autoUpdateMode instead.When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect.The app auto update policy, which controls when automatic app updates can be applied."
        },
        "oncCertificateProviders": {
          "type": "array",
          "description": "This feature is not generally available.",
          "items": {
            "$ref": "OncCertificateProvider"
          }
        },
        "kioskCustomLauncherEnabled": {
          "description": "Whether the kiosk custom launcher is enabled. This replaces the home screen with a launcher that locks down the device to the apps installed via the applications setting. Apps appear on a single page in alphabetical order. Use kioskCustomization to further configure the kiosk device behavior.",
          "type": "boolean"
        },
        "debuggingFeaturesAllowed": {
          "type": "boolean",
          "description": "Whether the user is allowed to enable debugging features."
        },
        "personalUsagePolicies": {
          "$ref": "PersonalUsagePolicies",
          "description": "Policies managing personal usage on a company-owned device."
        },
        "usbMassStorageEnabled": {
          "description": "Whether USB storage is enabled. Deprecated.",
          "type": "boolean"
        },
        "privateKeySelectionEnabled": {
          "description": "Allows showing UI on a device for a user to choose a private key alias if there are no matching rules in ChoosePrivateKeyRules. For devices below Android P, setting this may leave enterprise keys vulnerable.",
          "type": "boolean"
        },
        "persistentPreferredActivities": {
          "type": "array",
          "description": "Default intent handler activities.",
          "items": {
            "$ref": "PersistentPreferredActivity"
          }
        },
        "bluetoothContactSharingDisabled": {
          "description": "Whether bluetooth contact sharing is disabled.",
          "type": "boolean"
        },
        "bluetoothConfigDisabled": {
          "description": "Whether configuring bluetooth is disabled.",
          "type": "boolean"
        },
        "modifyAccountsDisabled": {
          "type": "boolean",
          "description": "Whether adding or removing accounts is disabled."
        },
        "stayOnPluggedModes": {
          "description": "The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear maximum_time_to_lock so that the device doesn't lock itself while it stays on.",
          "items": {
            "enum": [
              "BATTERY_PLUGGED_MODE_UNSPECIFIED",
              "AC",
              "USB",
              "WIRELESS"
            ],
            "enumDescriptions": [
              "This value is ignored.",
              "Power source is an AC charger.",
              "Power source is a USB port.",
              "Power source is wireless."
            ],
            "type": "string"
          },
          "type": "array"
        },
        "deviceOwnerLockScreenInfo": {
          "$ref": "UserFacingMessage",
          "description": "The device owner information to be shown on the lock screen."
        },
        "kioskCustomization": {
          "description": "Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.",
          "$ref": "KioskCustomization"
        },
        "permittedAccessibilityServices": {
          "description": "Specifies permitted accessibility services. If the field is not set, any accessibility service can be used. If the field is set, only the accessibility services in this list and the system's built-in accessibility service can be used. In particular, if the field is set to empty, only the system's built-in accessibility servicess can be used. This can be set on fully managed devices and on work profiles. When applied to a work profile, this affects both the personal profile and the work profile.",
          "$ref": "PackageNameList"
        },
        "mobileNetworksConfigDisabled": {
          "description": "Whether configuring mobile networks is disabled.",
          "type": "boolean"
        },
        "choosePrivateKeyRules": {
          "type": "array",
          "description": "Rules for determining apps' access to private keys. See ChoosePrivateKeyRule for details.",
          "items": {
            "$ref": "ChoosePrivateKeyRule"
          }
        },
        "setupActions": {
          "items": {
            "$ref": "SetupAction"
          },
          "description": "Action to take during the setup process. At most one action may be specified.",
          "type": "array"
        },
        "systemUpdate": {
          "description": "The system update policy, which controls how OS updates are applied. If the update type is WINDOWED, the update window will automatically apply to Play app updates as well.",
          "$ref": "SystemUpdate"
        },
        "recommendedGlobalProxy": {
          "description": "The network-independent global HTTP proxy. Typically proxies should be configured per-network in open_network_configuration. However for unusual configurations like general internal filtering a global HTTP proxy may be useful. If the proxy is not accessible, network access may break. The global proxy is only a recommendation and some apps may ignore it.",
          "$ref": "ProxyInfo"
        },
        "complianceRules": {
          "items": {
            "$ref": "ComplianceRule"
          },
          "type": "array",
          "description": "Rules declaring which mitigating actions to take when a device is not compliant with its policy. When the conditions for multiple rules are satisfied, all of the mitigating actions for the rules are taken. There is a maximum limit of 100 rules. Use policy enforcement rules instead."
        }
      }
    },
    "Operation": {
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}."
        },
        "response": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      }
    },
    "NonComplianceDetailCondition": {
      "type": "object",
      "properties": {
        "nonComplianceReason": {
          "type": "string",
          "enumDescriptions": [
            "This value is disallowed.",
            "The setting is not supported in the API level of the Android version running on the device.",
            "The management mode (profile owner, device owner, etc.) doesn't support the setting.",
            "The user has not taken required action to comply with the setting.",
            "The setting has an invalid value.",
            "The app required to implement the policy is not installed.",
            "The policy is not supported by the version of Android Device Policy on the device.",
            "A blocked app is installed.",
            "The setting hasn't been applied at the time of the report, but is expected to be applied shortly.",
            "The setting can't be applied to the app because the app doesn't support it, for example because its target SDK version is not high enough.",
            "The app is installed, but it hasn't been updated to the minimum version code specified by policy."
          ],
          "description": "The reason the device is not in compliance with the setting. If not set, then this condition matches any reason.",
          "enum": [
            "NON_COMPLIANCE_REASON_UNSPECIFIED",
            "API_LEVEL",
            "MANAGEMENT_MODE",
            "USER_ACTION",
            "INVALID_VALUE",
            "APP_NOT_INSTALLED",
            "UNSUPPORTED",
            "APP_INSTALLED",
            "PENDING",
            "APP_INCOMPATIBLE",
            "APP_NOT_UPDATED"
          ]
        },
        "packageName": {
          "description": "The package name of the app that's out of compliance. If not set, then this condition matches any package name.",
          "type": "string"
        },
        "settingName": {
          "type": "string",
          "description": "The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name."
        }
      },
      "description": "A compliance rule condition which is satisfied if there exists any matching NonComplianceDetail for the device. A NonComplianceDetail matches a NonComplianceDetailCondition if all the fields which are set within the NonComplianceDetailCondition match the corresponding NonComplianceDetail fields.",
      "id": "NonComplianceDetailCondition"
    },
    "PolicyEnforcementRule": {
      "type": "object",
      "description": "A rule that defines the actions to take if a device or work profile is not compliant with the policy specified in settingName.",
      "properties": {
        "settingName": {
          "description": "The top-level policy to enforce. For example, applications or passwordPolicies.",
          "type": "string"
        },
        "wipeAction": {
          "description": "An action to reset a fully managed device or delete a work profile. Note: blockAction must also be specified.",
          "$ref": "WipeAction"
        },
        "blockAction": {
          "$ref": "BlockAction",
          "description": "An action to block access to apps and data on a fully managed device or in a work profile. This action also triggers a user-facing notification with information (where possible) on how to correct the compliance issue. Note: wipeAction must also be specified."
        }
      },
      "id": "PolicyEnforcementRule"
    },
    "WebToken": {
      "id": "WebToken",
      "description": "A web token used to access the managed Google Play iframe.",
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "WEB_TOKEN_PERMISSION_UNSPECIFIED",
              "APPROVE_APPS"
            ],
            "enumDescriptions": [
              "This value is ignored.",
              "The permission to approve apps for the enterprise."
            ]
          },
          "description": "Permissions available to an admin in the embedded UI. An admin must have all of these permissions in order to view the UI. This field is deprecated."
        },
        "name": {
          "description": "The name of the web token, which is generated by the server during creation in the form enterprises/{enterpriseId}/webTokens/{webTokenId}.",
          "type": "string"
        },
        "enabledFeatures": {
          "description": "The features to enable. Use this if you want to control exactly which feature(s) will be activated; leave empty to allow all features.Restrictions / things to note: - If no features are listed here, all features are enabled — this is the default behavior where you give access to all features to your admins. - This must not contain any FEATURE_UNSPECIFIED values. - Repeated values are ignored ",
          "type": "array",
          "items": {
            "enumDescriptions": [
              "Unspecified feature.",
              "The Managed Play search apps page (https://developers.google.com/android/management/apps#search-apps).",
              "The private apps page (https://developers.google.com/android/management/apps#private-apps).",
              "The Web Apps page (https://developers.google.com/android/management/apps#web-apps).",
              "The organize apps page (https://developers.google.com/android/management/apps#organize-apps).",
              "The managed configurations page (https://developers.google.com/android/management/managed-configurations-iframe).",
              "The zero-touch iframe (https://developers.google.com/android/management/zero-touch-iframe)."
            ],
            "type": "string",
            "enum": [
              "FEATURE_UNSPECIFIED",
              "PLAY_SEARCH",
              "PRIVATE_APPS",
              "WEB_APPS",
              "STORE_BUILDER",
              "MANAGED_CONFIGURATIONS",
              "ZERO_TOUCH_CUSTOMER_MANAGEMENT"
            ]
          }
        },
        "value": {
          "type": "string",
          "description": "The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server."
        },
        "parentFrameUrl": {
          "type": "string",
          "description": "The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the https scheme."
        }
      }
    },
    "UsageLog": {
      "id": "UsageLog",
      "properties": {
        "enabledLogTypes": {
          "items": {
            "type": "string",
            "enumDescriptions": [
              "This value is not used.",
              "Enable logging of on-device security events, like when the device password is incorrectly entered or removable storage is mounted. See UsageLogEvent for a complete description of the logged security events. Supported for fully managed devices on Android 7 and above. Supported for company-owned devices with a work profile on Android 12 and above, on which only security events from the work profile are logged. Can be overridden by the application delegated scope SECURITY_LOGS",
              "Enable logging of on-device network events, like DNS lookups and TCP connections. See UsageLogEvent for a complete description of the logged network events. Supported for fully managed devices on Android 8 and above. Supported for company-owned devices with a work profile on Android 12 and above, on which only network events from the work profile are logged. Can be overridden by the application delegated scope NETWORK_ACTIVITY_LOGS"
            ],
            "enum": [
              "LOG_TYPE_UNSPECIFIED",
              "SECURITY_LOGS",
              "NETWORK_ACTIVITY_LOGS"
            ]
          },
          "type": "array",
          "description": "Specifies which log types are enabled. Note that users will receive on-device messaging when usage logging is enabled."
        },
        "uploadOnCellularAllowed": {
          "items": {
            "enum": [
              "LOG_TYPE_UNSPECIFIED",
              "SECURITY_LOGS",
              "NETWORK_ACTIVITY_LOGS"
            ],
            "type": "string",
            "enumDescriptions": [
              "This value is not used.",
              "Enable logging of on-device security events, like when the device password is incorrectly entered or removable storage is mounted. See UsageLogEvent for a complete description of the logged security events. Supported for fully managed devices on Android 7 and above. Supported for company-owned devices with a work profile on Android 12 and above, on which only security events from the work profile are logged. Can be overridden by the application delegated scope SECURITY_LOGS",
              "Enable logging of on-device network events, like DNS lookups and TCP connections. See UsageLogEvent for a complete description of the logged network events. Supported for fully managed devices on Android 8 and above. Supported for company-owned devices with a work profile on Android 12 and above, on which only network events from the work profile are logged. Can be overridden by the application delegated scope NETWORK_ACTIVITY_LOGS"
            ]
          },
          "description": "Specifies which of the enabled log types can be uploaded over mobile data. By default logs are queued for upload when the device connects to WiFi.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "Controls types of device activity logs collected from the device and reported via Pub/Sub notification (https://developers.google.com/android/management/notifications)."
    },
    "DnsEvent": {
      "description": "A DNS lookup event was initiated through the standard network stack.",
      "id": "DnsEvent",
      "type": "object",
      "properties": {
        "packageName": {
          "type": "string",
          "description": "The package name of the UID that performed the DNS lookup."
        },
        "hostname": {
          "description": "The hostname that was looked up.",
          "type": "string"
        },
        "totalIpAddressesReturned": {
          "type": "string",
          "format": "int64",
          "description": "The number of IP addresses returned from the DNS lookup event. May be higher than the amount of ip_addresses if there were too many addresses to log."
        },
        "ipAddresses": {
          "type": "array",
          "description": "The (possibly truncated) list of the IP addresses returned for DNS lookup (max 10 IPv4 or IPv6 addresses).",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WebApp": {
      "description": "A web app.",
      "id": "WebApp",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the web app, which is generated by the server during creation in the form enterprises/{enterpriseId}/webApps/{packageName}."
        },
        "displayMode": {
          "enumDescriptions": [
            "Not used.",
            "Opens the web app with a minimal set of browser UI elements for controlling navigation and viewing the page URL.",
            "Opens the web app to look and feel like a standalone native application. The browser UI elements and page URL are not visible, however the system status bar and back button are visible.",
            "Opens the web app in full screen without any visible controls. The browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area."
          ],
          "type": "string",
          "description": "The display mode of the web app.",
          "enum": [
            "DISPLAY_MODE_UNSPECIFIED",
            "MINIMAL_UI",
            "STANDALONE",
            "FULL_SCREEN"
          ]
        },
        "icons": {
          "type": "array",
          "description": "A list of icons for the web app. Must have at least one element.",
          "items": {
            "$ref": "WebAppIcon"
          }
        },
        "startUrl": {
          "type": "string",
          "description": "The start URL, i.e. the URL that should load when the user opens the application."
        },
        "title": {
          "type": "string",
          "description": "The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon)."
        },
        "versionCode": {
          "type": "string",
          "format": "int64",
          "description": "The current version of the app.Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date."
        }
      }
    },
    "TelephonyInfo": {
      "properties": {
        "carrierName": {
          "description": "The carrier name associated with this SIM card.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The phone number associated with this SIM card.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Telephony information associated with a given SIM card on the device. Only supported on fully managed devices starting from Android API level 23.",
      "id": "TelephonyInfo"
    },
    "ComplianceRule": {
      "type": "object",
      "id": "ComplianceRule",
      "properties": {
        "apiLevelCondition": {
          "description": "A condition which is satisfied if the Android Framework API level on the device doesn't meet a minimum requirement.",
          "$ref": "ApiLevelCondition"
        },
        "nonComplianceDetailCondition": {
          "$ref": "NonComplianceDetailCondition",
          "description": "A condition which is satisfied if there exists any matching NonComplianceDetail for the device."
        },
        "packageNamesToDisable": {
          "description": "If set, the rule includes a mitigating action to disable apps specified in the list, but app data is preserved.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disableApps": {
          "type": "boolean",
          "description": "If set to true, the rule includes a mitigating action to disable apps so that the device is effectively disabled, but app data is preserved. If the device is running an app in locked task mode, the app will be closed and a UI showing the reason for non-compliance will be displayed."
        }
      },
      "description": "A rule declaring which mitigating actions to take when a device is not compliant with its policy. For every rule, there is always an implicit mitigating action to set policy_compliant to false for the Device resource, and display a message on the device indicating that the device is not compliant with its policy. Other mitigating actions may optionally be taken as well, depending on the field values in the rule."
    },
    "SecurityPosture": {
      "type": "object",
      "properties": {
        "postureDetails": {
          "description": "Additional details regarding the security posture of the device.",
          "items": {
            "$ref": "PostureDetail"
          },
          "type": "array"
        },
        "devicePosture": {
          "enumDescriptions": [
            "Unspecified. There is no posture detail for this posture value.",
            "This device is secure.",
            "This device may be more vulnerable to malicious actors than is recommended for use with corporate data.",
            "This device may be compromised and corporate data may be accessible to unauthorized actors."
          ],
          "description": "Device's security posture value.",
          "type": "string",
          "enum": [
            "POSTURE_UNSPECIFIED",
            "SECURE",
            "AT_RISK",
            "POTENTIALLY_COMPROMISED"
          ]
        }
      },
      "description": "The security posture of the device, as determined by the current device state and the policies applied.",
      "id": "SecurityPosture"
    },
    "OsShutdownEvent": {
      "id": "OsShutdownEvent",
      "properties": {},
      "type": "object",
      "description": "Device was shutdown. Intentionally empty."
    },
    "ContentProviderEndpoint": {
      "type": "object",
      "id": "ContentProviderEndpoint",
      "properties": {
        "signingCertsSha256": {
          "type": "array",
          "description": "Required. This feature is not generally available.",
          "items": {
            "type": "string"
          }
        },
        "uri": {
          "description": "This feature is not generally available.",
          "type": "string"
        },
        "packageName": {
          "description": "This feature is not generally available.",
          "type": "string"
        }
      },
      "description": "This feature is not generally available."
    },
    "SetupAction": {
      "properties": {
        "description": {
          "$ref": "UserFacingMessage",
          "description": "Description of this action."
        },
        "launchApp": {
          "$ref": "LaunchAppAction",
          "description": "An action to launch an app. The app will be launched with an intent containing an extra with key com.google.android.apps.work.clouddpc.EXTRA_LAUNCHED_AS_SETUP_ACTION set to the boolean value true to indicate that this is a setup action flow."
        },
        "title": {
          "description": "Title of this action.",
          "$ref": "UserFacingMessage"
        }
      },
      "id": "SetupAction",
      "description": "An action executed during setup.",
      "type": "object"
    },
    "CertAuthorityRemovedEvent": {
      "description": "A root certificate was removed from the system's trusted credential storage. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.",
      "properties": {
        "success": {
          "description": "Whether the removal succeeded.",
          "type": "boolean"
        },
        "userId": {
          "format": "int32",
          "type": "integer",
          "description": "The user in which the certificate removal event occurred. Only available for devices running Android 11 and above."
        },
        "certificate": {
          "description": "Subject of the certificate.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CertAuthorityRemovedEvent"
    },
    "ChoosePrivateKeyRule": {
      "type": "object",
      "properties": {
        "privateKeyAlias": {
          "type": "string",
          "description": "The alias of the private key to be used."
        },
        "urlPattern": {
          "type": "string",
          "description": "The URL pattern to match against the URL of the request. If not set or empty, it matches all URLs. This uses the regular expression syntax of java.util.regex.Pattern."
        },
        "packageNames": {
          "description": "The package names to which this rule applies. The hash of the signing certificate for each app is verified against the hash provided by Play. If no package names are specified, then the alias is provided to all apps that call KeyChain.choosePrivateKeyAlias (https://developer.android.com/reference/android/security/KeyChain#choosePrivateKeyAlias%28android.app.Activity,%20android.security.KeyChainAliasCallback,%20java.lang.String[],%20java.security.Principal[],%20java.lang.String,%20int,%20java.lang.String%29) or any overloads (but not without calling KeyChain.choosePrivateKeyAlias, even on Android 11 and above). Any app with the same Android UID as a package specified here will have access when they call KeyChain.choosePrivateKeyAlias.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Controls apps' access to private keys. The rule determines which private key, if any, Android Device Policy grants to the specified app. Access is granted either when the app calls KeyChain.choosePrivateKeyAlias (https://developer.android.com/reference/android/security/KeyChain#choosePrivateKeyAlias%28android.app.Activity,%20android.security.KeyChainAliasCallback,%20java.lang.String[],%20java.security.Principal[],%20java.lang.String,%20int,%20java.lang.String%29) (or any overloads) to request a private key alias for a given URL, or for rules that are not URL-specific (that is, if urlPattern is not set, or set to the empty string or .*) on Android 11 and above, directly so that the app can call KeyChain.getPrivateKey (https://developer.android.com/reference/android/security/KeyChain#getPrivateKey%28android.content.Context,%20java.lang.String%29), without first having to call KeyChain.choosePrivateKeyAlias.When an app calls KeyChain.choosePrivateKeyAlias if more than one choosePrivateKeyRules matches, the last matching rule defines which key alias to return.",
      "id": "ChoosePrivateKeyRule"
    },
    "AppTrackInfo": {
      "description": "Id to name association of a app track.",
      "properties": {
        "trackAlias": {
          "type": "string",
          "description": "The track name associated with the trackId, set in the Play Console. The name is modifiable from Play Console."
        },
        "trackId": {
          "description": "The unmodifiable unique track identifier, taken from the releaseTrackId in the URL of the Play Console page that displays the app’s track information.",
          "type": "string"
        }
      },
      "id": "AppTrackInfo",
      "type": "object"
    },
    "DeviceSettings": {
      "type": "object",
      "properties": {
        "developmentSettingsEnabled": {
          "description": "Whether developer mode is enabled on the device.",
          "type": "boolean"
        },
        "adbEnabled": {
          "description": "Whether ADB (https://developer.android.com/studio/command-line/adb.html) is enabled on the device.",
          "type": "boolean"
        },
        "encryptionStatus": {
          "description": "Encryption status from DevicePolicyManager.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified. No device should have this type.",
            "Encryption is not supported by the device.",
            "Encryption is supported by the device, but is not currently active.",
            "Encryption is not currently active, but is currently being activated.",
            "Encryption is active.",
            "Encryption is active, but an encryption key is not set by the user.",
            "Encryption is active, and the encryption key is tied to the user profile."
          ],
          "enum": [
            "ENCRYPTION_STATUS_UNSPECIFIED",
            "UNSUPPORTED",
            "INACTIVE",
            "ACTIVATING",
            "ACTIVE",
            "ACTIVE_DEFAULT_KEY",
            "ACTIVE_PER_USER"
          ]
        },
        "isDeviceSecure": {
          "description": "Whether the device is secured with PIN/password.",
          "type": "boolean"
        },
        "unknownSourcesEnabled": {
          "description": "Whether installing apps from unknown sources is enabled.",
          "type": "boolean"
        },
        "verifyAppsEnabled": {
          "description": "Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced on the device.",
          "type": "boolean"
        },
        "isEncrypted": {
          "description": "Whether the storage encryption is enabled.",
          "type": "boolean"
        }
      },
      "id": "DeviceSettings",
      "description": "Information about security related device settings on device."
    },
    "Enterprise": {
      "id": "Enterprise",
      "description": "The configuration applied to an enterprise.",
      "properties": {
        "pubsubTopic": {
          "type": "string",
          "description": "The topic which Pub/Sub notifications are published to, in the form projects/{project}/topics/{topic}. This field is only required if Pub/Sub notifications are enabled."
        },
        "signinDetails": {
          "description": "Sign-in details of the enterprise.",
          "type": "array",
          "items": {
            "$ref": "SigninDetail"
          }
        },
        "termsAndConditions": {
          "items": {
            "$ref": "TermsAndConditions"
          },
          "type": "array",
          "description": "Terms and conditions that must be accepted when provisioning a device for this enterprise. A page of terms is generated for each value in this list."
        },
        "enabledNotificationTypes": {
          "type": "array",
          "description": "The types of Google Pub/Sub notifications enabled for the enterprise.",
          "items": {
            "enum": [
              "NOTIFICATION_TYPE_UNSPECIFIED",
              "ENROLLMENT",
              "COMPLIANCE_REPORT",
              "STATUS_REPORT",
              "COMMAND",
              "USAGE_LOGS"
            ],
            "enumDescriptions": [
              "This value is ignored.",
              "A notification sent when a device enrolls.",
              "Deprecated.",
              "A notification sent when a device issues a status report.",
              "A notification sent when a device command has completed.",
              "A notification sent when device sends BatchUsageLogEvents."
            ],
            "type": "string"
          }
        },
        "logo": {
          "$ref": "ExternalData",
          "description": "An image displayed as a logo during device provisioning. Supported types are: image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/webp, image/vnd.wap.wbmp, image/x-adobe-dng."
        },
        "appAutoApprovalEnabled": {
          "type": "boolean",
          "description": "Deprecated and unused."
        },
        "primaryColor": {
          "description": "A color in RGB format that indicates the predominant color to display in the device management app UI. The color components are stored as follows: (red \u003c\u003c 16) | (green \u003c\u003c 8) | blue, where the value of each component is between 0 and 255, inclusive.",
          "format": "int32",
          "type": "integer"
        },
        "enterpriseDisplayName": {
          "description": "The name of the enterprise displayed to users.",
          "type": "string"
        },
        "contactInfo": {
          "$ref": "ContactInfo",
          "description": "The enterprise contact info of an EMM-managed enterprise."
        },
        "name": {
          "type": "string",
          "description": "The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId}."
        }
      },
      "type": "object"
    },
    "Empty": {
      "id": "Empty",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } ",
      "type": "object"
    },
    "ApiLevelCondition": {
      "type": "object",
      "properties": {
        "minApiLevel": {
          "description": "The minimum desired Android Framework API level. If the device doesn't meet the minimum requirement, this condition is satisfied. Must be greater than zero.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "A compliance rule condition which is satisfied if the Android Framework API level on the device doesn't meet a minimum requirement. There can only be one rule with this type of condition per policy.",
      "id": "ApiLevelCondition"
    },
    "KeyGeneratedEvent": {
      "description": "A cryptographic key including user installed, admin installed and system maintained private key is installed on the device either by the user or management.This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.",
      "type": "object",
      "properties": {
        "success": {
          "description": "Whether the operation was successful.",
          "type": "boolean"
        },
        "keyAlias": {
          "type": "string",
          "description": "Alias of the key."
        },
        "applicationUid": {
          "description": "UID of the application which generated the key.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "KeyGeneratedEvent"
    },
    "LoggingStartedEvent": {
      "properties": {},
      "type": "object",
      "description": "usageLog policy has been enabled. Intentionally empty.",
      "id": "LoggingStartedEvent"
    },
    "AppProcessInfo": {
      "type": "object",
      "description": "Information about a process. It contains process name, start time, app Uid, app Pid, seinfo tag, hash of the base APK.",
      "id": "AppProcessInfo",
      "properties": {
        "seinfo": {
          "description": "SELinux policy info.",
          "type": "string"
        },
        "processName": {
          "description": "Process name.",
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "description": "Process start time.",
          "format": "google-datetime"
        },
        "uid": {
          "type": "integer",
          "format": "int32",
          "description": "UID of the package."
        },
        "pid": {
          "format": "int32",
          "description": "Process ID.",
          "type": "integer"
        },
        "apkSha256Hash": {
          "type": "string",
          "description": "SHA-256 hash of the base APK, in hexadecimal format."
        },
        "packageNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Package names of all packages that are associated with the particular user ID. In most cases, this will be a single package name, the package that has been assigned that user ID. If multiple application share a UID then all packages sharing UID will be included."
        }
      }
    },
    "ManagedProperty": {
      "properties": {
        "defaultValue": {
          "type": "any",
          "description": "The default value of the property. BUNDLE_ARRAY properties don't have a default value."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the property, providing more detail of what it affects. Localized."
        },
        "key": {
          "type": "string",
          "description": "The unique key that the app uses to identify the property, e.g. \"com.google.android.gm.fieldname\"."
        },
        "entries": {
          "items": {
            "$ref": "ManagedPropertyEntry"
          },
          "type": "array",
          "description": "For CHOICE or MULTISELECT properties, the list of possible entries."
        },
        "nestedProperties": {
          "type": "array",
          "description": "For BUNDLE_ARRAY properties, the list of nested properties. A BUNDLE_ARRAY property is at most two levels deep.",
          "items": {
            "$ref": "ManagedProperty"
          }
        },
        "title": {
          "type": "string",
          "description": "The name of the property. Localized."
        },
        "type": {
          "type": "string",
          "description": "The type of the property.",
          "enum": [
            "MANAGED_PROPERTY_TYPE_UNSPECIFIED",
            "BOOL",
            "STRING",
            "INTEGER",
            "CHOICE",
            "MULTISELECT",
            "HIDDEN",
            "BUNDLE",
            "BUNDLE_ARRAY"
          ],
          "enumDescriptions": [
            "Not used.",
            "A property of boolean type.",
            "A property of string type.",
            "A property of integer type.",
            "A choice of one item from a set.",
            "A choice of multiple items from a set.",
            "A hidden restriction of string type (the default value can be used to pass along information that can't be modified, such as a version code).",
            "A bundle of properties",
            "An array of property bundles."
          ]
        }
      },
      "id": "ManagedProperty",
      "type": "object",
      "description": "Managed property."
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "MediaMountEvent": {
      "type": "object",
      "id": "MediaMountEvent",
      "description": "Removable media was mounted.",
      "properties": {
        "volumeLabel": {
          "type": "string",
          "description": "Volume label. Redacted to empty string on organization-owned managed profile devices."
        },
        "mountPoint": {
          "description": "Mount point.",
          "type": "string"
        }
      }
    },
    "PasswordPoliciesContext": {
      "type": "object",
      "id": "PasswordPoliciesContext",
      "description": "Additional context for non-compliance related to password policies.",
      "properties": {
        "passwordPolicyScope": {
          "type": "string",
          "description": "The scope of non-compliant password.",
          "enumDescriptions": [
            "The scope is unspecified. The password requirements are applied to the work profile for work profile devices and the whole device for fully managed or dedicated devices.",
            "The password requirements are only applied to the device.",
            "The password requirements are only applied to the work profile."
          ],
          "enum": [
            "SCOPE_UNSPECIFIED",
            "SCOPE_DEVICE",
            "SCOPE_PROFILE"
          ]
        }
      }
    },
    "AppProcessStartEvent": {
      "type": "object",
      "id": "AppProcessStartEvent",
      "description": "An app process was started. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.",
      "properties": {
        "processInfo": {
          "description": "Information about a process.",
          "$ref": "AppProcessInfo"
        }
      }
    },
    "Device": {
      "id": "Device",
      "properties": {
        "securityPosture": {
          "$ref": "SecurityPosture",
          "description": "Device's security posture value that reflects how secure the device is."
        },
        "hardwareStatusSamples": {
          "type": "array",
          "items": {
            "$ref": "HardwareStatus"
          },
          "description": "Hardware status samples in chronological order. This information is only available if hardwareStatusEnabled is true in the device's policy."
        },
        "displays": {
          "description": "Detailed information about displays on the device. This information is only available if displayInfoEnabled is true in the device's policy.",
          "items": {
            "$ref": "Display"
          },
          "type": "array"
        },
        "policyCompliant": {
          "description": "Whether the device is compliant with its policy.",
          "type": "boolean"
        },
        "nonComplianceDetails": {
          "description": "Details about policy settings that the device is not compliant with.",
          "items": {
            "$ref": "NonComplianceDetail"
          },
          "type": "array"
        },
        "appliedPolicyVersion": {
          "type": "string",
          "format": "int64",
          "description": "The version of the policy currently applied to the device."
        },
        "userName": {
          "type": "string",
          "description": "The resource name of the user that owns this device in the form enterprises/{enterpriseId}/users/{userId}."
        },
        "appliedState": {
          "type": "string",
          "enum": [
            "DEVICE_STATE_UNSPECIFIED",
            "ACTIVE",
            "DISABLED",
            "DELETED",
            "PROVISIONING"
          ],
          "description": "The state currently applied to the device.",
          "enumDescriptions": [
            "This value is disallowed.",
            "The device is active.",
            "The device is disabled.",
            "The device was deleted. This state is never returned by an API call, but is used in the final status report when the device acknowledges the deletion. If the device is deleted via the API call, this state is published to Pub/Sub. If the user deletes the work profile or resets the device, the device state will remain unknown to the server.",
            "The device is being provisioned. Newly enrolled devices are in this state until they have a policy applied."
          ]
        },
        "softwareInfo": {
          "description": "Detailed information about the device software. This information is only available if softwareInfoEnabled is true in the device's policy.",
          "$ref": "SoftwareInfo"
        },
        "disabledReason": {
          "$ref": "UserFacingMessage",
          "description": "If the device state is DISABLED, an optional message that is displayed on the device indicating the reason the device is disabled. This field can be modified by a patch request."
        },
        "appliedPasswordPolicies": {
          "description": "The password requirements currently applied to the device. The applied requirements may be slightly different from those specified in passwordPolicies in some cases. fieldPath is set based on passwordPolicies.",
          "items": {
            "$ref": "PasswordRequirements"
          },
          "type": "array"
        },
        "user": {
          "description": "The user who owns the device.",
          "$ref": "User"
        },
        "systemProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of selected system properties name and value related to the device. This information is only available if systemPropertiesEnabled is true in the device's policy."
        },
        "deviceSettings": {
          "$ref": "DeviceSettings",
          "description": "Device settings information. This information is only available if deviceSettingsEnabled is true in the device's policy."
        },
        "enrollmentTime": {
          "description": "The time of device enrollment.",
          "format": "google-datetime",
          "type": "string"
        },
        "lastPolicySyncTime": {
          "description": "The last time the device fetched its policy.",
          "format": "google-datetime",
          "type": "string"
        },
        "applicationReports": {
          "type": "array",
          "description": "Reports for apps installed on the device. This information is only available when application_reports_enabled is true in the device's policy.",
          "items": {
            "$ref": "ApplicationReport"
          }
        },
        "previousDeviceNames": {
          "description": "If the same physical device has been enrolled multiple times, this field contains its previous device names. The serial number is used as the unique identifier to determine if the same physical device has enrolled previously. The names are in chronological order.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "commonCriteriaModeInfo": {
          "description": "Information about Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC).This information is only available if statusReportingSettings.commonCriteriaModeEnabled is true in the device's policy.",
          "$ref": "CommonCriteriaModeInfo"
        },
        "powerManagementEvents": {
          "type": "array",
          "description": "Power management events on the device in chronological order. This information is only available if powerManagementEventsEnabled is true in the device's policy.",
          "items": {
            "$ref": "PowerManagementEvent"
          }
        },
        "lastStatusReportTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The last time the device sent a status report."
        },
        "ownership": {
          "description": "Ownership of the managed device.",
          "enumDescriptions": [
            "Ownership is unspecified.",
            "Device is company-owned.",
            "Device is personally-owned."
          ],
          "enum": [
            "OWNERSHIP_UNSPECIFIED",
            "COMPANY_OWNED",
            "PERSONALLY_OWNED"
          ],
          "type": "string"
        },
        "lastPolicyComplianceReportTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Deprecated."
        },
        "state": {
          "type": "string",
          "enum": [
            "DEVICE_STATE_UNSPECIFIED",
            "ACTIVE",
            "DISABLED",
            "DELETED",
            "PROVISIONING"
          ],
          "enumDescriptions": [
            "This value is disallowed.",
            "The device is active.",
            "The device is disabled.",
            "The device was deleted. This state is never returned by an API call, but is used in the final status report when the device acknowledges the deletion. If the device is deleted via the API call, this state is published to Pub/Sub. If the user deletes the work profile or resets the device, the device state will remain unknown to the server.",
            "The device is being provisioned. Newly enrolled devices are in this state until they have a policy applied."
          ],
          "description": "The state to be applied to the device. This field can be modified by a patch request. Note that when calling enterprises.devices.patch, ACTIVE and DISABLED are the only allowable values. To enter the device into a DELETED state, call enterprises.devices.delete."
        },
        "hardwareInfo": {
          "description": "Detailed information about the device hardware.",
          "$ref": "HardwareInfo"
        },
        "managementMode": {
          "enumDescriptions": [
            "This value is disallowed.",
            "Device owner. Android Device Policy has full control over the device.",
            "Profile owner. Android Device Policy has control over a managed profile on the device."
          ],
          "type": "string",
          "description": "The type of management mode Android Device Policy takes on the device. This influences which policy settings are supported.",
          "enum": [
            "MANAGEMENT_MODE_UNSPECIFIED",
            "DEVICE_OWNER",
            "PROFILE_OWNER"
          ]
        },
        "name": {
          "description": "The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.",
          "type": "string"
        },
        "enrollmentTokenName": {
          "type": "string",
          "description": "If the device was enrolled with an enrollment token, this field contains the name of the token."
        },
        "networkInfo": {
          "description": "Device network information. This information is only available if networkInfoEnabled is true in the device's policy.",
          "$ref": "NetworkInfo"
        },
        "appliedPolicyName": {
          "type": "string",
          "description": "The name of the policy currently applied to the device."
        },
        "apiLevel": {
          "description": "The API level of the Android platform version running on the device.",
          "type": "integer",
          "format": "int32"
        },
        "enrollmentTokenData": {
          "type": "string",
          "description": "If the device was enrolled with an enrollment token with additional data provided, this field contains that data."
        },
        "memoryEvents": {
          "items": {
            "$ref": "MemoryEvent"
          },
          "description": "Events related to memory and storage measurements in chronological order. This information is only available if memoryInfoEnabled is true in the device's policy.",
          "type": "array"
        },
        "memoryInfo": {
          "description": "Memory information: contains information about device memory and storage.",
          "$ref": "MemoryInfo"
        },
        "policyName": {
          "type": "string",
          "description": "The name of the policy applied to the device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device's user is applied. This field can be modified by a patch request. You can specify only the policyId when calling enterprises.devices.patch, as long as the policyId doesn’t contain any slashes. The rest of the policy name is inferred."
        }
      },
      "description": "A device owned by an enterprise. Unless otherwise noted, all fields are read-only and can't be modified by enterprises.devices.patch.",
      "type": "object"
    },
    "KeyImportEvent": {
      "id": "KeyImportEvent",
      "type": "object",
      "description": "A cryptographic key including user installed, admin installed and system maintained private key is imported on the device either by the user or management. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.",
      "properties": {
        "applicationUid": {
          "description": "UID of the application which imported the key",
          "format": "int32",
          "type": "integer"
        },
        "keyAlias": {
          "type": "string",
          "description": "Alias of the key."
        },
        "success": {
          "description": "Whether the operation was successful.",
          "type": "boolean"
        }
      }
    },
    "FreezePeriod": {
      "description": "A system freeze period. When a device’s clock is within the freeze period, all incoming system updates (including security patches) are blocked and won’t be installed. When a device is outside the freeze period, normal update behavior applies. Leap years are ignored in freeze period calculations, in particular: * If Feb. 29th is set as the start or end date of a freeze period, the freeze period will start or end on Feb. 28th instead. * When a device’s system clock reads Feb. 29th, it’s treated as Feb. 28th. * When calculating the number of days in a freeze period or the time between two freeze periods, Feb. 29th is ignored and not counted as a day.Note: For Freeze Periods to take effect, SystemUpdateType cannot be specified as SYSTEM_UPDATE_TYPE_UNSPECIFIED, because freeze periods require a defined policy to be specified.",
      "properties": {
        "endDate": {
          "$ref": "Date",
          "description": "The end date (inclusive) of the freeze period. Must be no later than 90 days from the start date. If the end date is earlier than the start date, the freeze period is considered wrapping year-end. Note: year must not be set. For example, {\"month\": 1,\"date\": 30}."
        },
        "startDate": {
          "$ref": "Date",
          "description": "The start date (inclusive) of the freeze period. Note: year must not be set. For example, {\"month\": 1,\"date\": 30}."
        }
      },
      "id": "FreezePeriod",
      "type": "object"
    },
    "User": {
      "description": "A user belonging to an enterprise.",
      "id": "User",
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "description": "A unique identifier you create for this user, such as user342 or asset#44418. This field must be set when the user is created and can't be updated. This field must not contain personally identifiable information (PII). This identifier must be 1024 characters or less; otherwise, the update policy request will fail.",
          "type": "string"
        }
      }
    },
    "CommonCriteriaModeInfo": {
      "id": "CommonCriteriaModeInfo",
      "description": "Information about Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC).This information is only available if statusReportingSettings.commonCriteriaModeEnabled is true in the device's policy.",
      "type": "object",
      "properties": {
        "commonCriteriaModeStatus": {
          "description": "Whether Common Criteria Mode is enabled.",
          "enumDescriptions": [
            "Unknown status.",
            "Common Criteria Mode is currently disabled.",
            "Common Criteria Mode is currently enabled."
          ],
          "type": "string",
          "enum": [
            "COMMON_CRITERIA_MODE_STATUS_UNKNOWN",
            "COMMON_CRITERIA_MODE_DISABLED",
            "COMMON_CRITERIA_MODE_ENABLED"
          ]
        }
      }
    },
    "OsStartupEvent": {
      "properties": {
        "verityMode": {
          "enumDescriptions": [
            "Unknown value.",
            "Indicates that the device will be restarted when corruption is detected.",
            "Indicates that an I/O error will be returned for an attempt to read corrupted data blocks (also known as eio boot state).",
            "Indicates that dm-verity is disabled on device."
          ],
          "description": "dm-verity mode.",
          "type": "string",
          "enum": [
            "DM_VERITY_MODE_UNSPECIFIED",
            "ENFORCING",
            "IO_ERROR",
            "DISABLED"
          ]
        },
        "verifiedBootState": {
          "description": "Verified Boot state.",
          "type": "string",
          "enum": [
            "VERIFIED_BOOT_STATE_UNSPECIFIED",
            "GREEN",
            "YELLOW",
            "ORANGE"
          ],
          "enumDescriptions": [
            "Unknown value.",
            "Indicates that there is a full chain of trust extending from the bootloader to verified partitions including the bootloader, boot partition, and all verified partitions.",
            "Indicates that the boot partition has been verified using the embedded certificate and the signature is valid.",
            "Indicates that the device may be freely modified. Device integrity is left to the user to verify out-of-band."
          ]
        }
      },
      "description": "Device was started.",
      "type": "object",
      "id": "OsStartupEvent"
    },
    "StatusReportingSettings": {
      "type": "object",
      "properties": {
        "applicationReportingSettings": {
          "description": "Application reporting settings. Only applicable if application_reports_enabled is true.",
          "$ref": "ApplicationReportingSettings"
        },
        "systemPropertiesEnabled": {
          "type": "boolean",
          "description": "Whether system properties reporting is enabled."
        },
        "displayInfoEnabled": {
          "description": "Whether displays reporting is enabled. Report data is not available for personally owned devices with work profiles.",
          "type": "boolean"
        },
        "softwareInfoEnabled": {
          "description": "Whether software info reporting is enabled.",
          "type": "boolean"
        },
        "commonCriteriaModeEnabled": {
          "type": "boolean",
          "description": "Whether Common Criteria Mode reporting is enabled."
        },
        "applicationReportsEnabled": {
          "type": "boolean",
          "description": "Whether app reports are enabled."
        },
        "memoryInfoEnabled": {
          "description": "Whether memory event reporting is enabled.",
          "type": "boolean"
        },
        "powerManagementEventsEnabled": {
          "type": "boolean",
          "description": "Whether power management event reporting is enabled. Report data is not available for personally owned devices with work profiles."
        },
        "networkInfoEnabled": {
          "type": "boolean",
          "description": "Whether network info reporting is enabled."
        },
        "hardwareStatusEnabled": {
          "type": "boolean",
          "description": "Whether hardware status reporting is enabled. Report data is not available for personally owned devices with work profiles."
        },
        "deviceSettingsEnabled": {
          "description": "Whether device settings reporting is enabled.",
          "type": "boolean"
        }
      },
      "id": "StatusReportingSettings",
      "description": "Settings controlling the behavior of status reports."
    },
    "LoggingStoppedEvent": {
      "id": "LoggingStoppedEvent",
      "description": "usageLog policy has been disabled. Intentionally empty.",
      "properties": {},
      "type": "object"
    },
    "MemoryInfo": {
      "description": "Information about device memory and storage.",
      "type": "object",
      "id": "MemoryInfo",
      "properties": {
        "totalRam": {
          "type": "string",
          "format": "int64",
          "description": "Total RAM on device in bytes."
        },
        "totalInternalStorage": {
          "type": "string",
          "description": "Total internal storage on device in bytes.",
          "format": "int64"
        }
      }
    },
    "CrossProfilePolicies": {
      "type": "object",
      "description": "Cross-profile policies applied on the device.",
      "properties": {
        "crossProfileDataSharing": {
          "description": "Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately.",
          "enum": [
            "CROSS_PROFILE_DATA_SHARING_UNSPECIFIED",
            "CROSS_PROFILE_DATA_SHARING_DISALLOWED",
            "DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED",
            "CROSS_PROFILE_DATA_SHARING_ALLOWED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified. Defaults to DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED.",
            "Prevents data from being shared from both the personal profile to the work profile and the work profile to the personal profile.",
            "Default. Prevents users from sharing data from the work profile to apps in the personal profile. Personal data can be shared with work apps.",
            "Data from either profile can be shared with the other profile."
          ]
        },
        "crossProfileCopyPaste": {
          "description": "Whether text copied from one profile (personal or work) can be pasted in the other profile.",
          "enum": [
            "CROSS_PROFILE_COPY_PASTE_UNSPECIFIED",
            "COPY_FROM_WORK_TO_PERSONAL_DISALLOWED",
            "CROSS_PROFILE_COPY_PASTE_ALLOWED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified. Defaults to COPY_FROM_WORK_TO_PERSONAL_DISALLOWED",
            "Default. Prevents users from pasting into the personal profile text copied from the work profile. Text copied from the personal profile can be pasted into the work profile, and text copied from the work profile can be pasted into the work profile.",
            "Text copied in either profile can be pasted in the other profile."
          ]
        },
        "showWorkContactsInPersonalProfile": {
          "enum": [
            "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED",
            "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED",
            "SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED"
          ],
          "type": "string",
          "description": "Whether contacts stored in the work profile can be shown in personal profile contact searches and incoming calls.",
          "enumDescriptions": [
            "Unspecified. Defaults to SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED.",
            "Prevents work profile contacts from appearing in personal profile contact searches and incoming calls",
            "Default. Allows work profile contacts to appear in personal profile contact searches and incoming calls"
          ]
        }
      },
      "id": "CrossProfilePolicies"
    },
    "SpecificNonComplianceContext": {
      "type": "object",
      "id": "SpecificNonComplianceContext",
      "description": "Additional context for SpecificNonComplianceReason.",
      "properties": {
        "passwordPoliciesContext": {
          "$ref": "PasswordPoliciesContext",
          "description": "Additional context for non-compliance related to password policies. See PASSWORD_POLICIES_PASSWORD_EXPIRED and PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT."
        },
        "oncWifiContext": {
          "description": "Additional context for non-compliance related to Wi-Fi configuration. See ONC_WIFI_INVALID_VALUE and ONC_WIFI_API_LEVEL",
          "$ref": "OncWifiContext"
        }
      }
    },
    "Display": {
      "description": "Device display information.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the display."
        },
        "density": {
          "format": "int32",
          "type": "integer",
          "description": "Display density expressed as dots-per-inch."
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Display width in pixels."
        },
        "height": {
          "description": "Display height in pixels.",
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "enumDescriptions": [
            "This value is disallowed.",
            "Display is off.",
            "Display is on.",
            "Display is dozing in a low power state",
            "Display is dozing in a suspended low power state."
          ],
          "enum": [
            "DISPLAY_STATE_UNSPECIFIED",
            "OFF",
            "ON",
            "DOZE",
            "SUSPENDED"
          ],
          "description": "State of the display.",
          "type": "string"
        },
        "displayId": {
          "description": "Unique display id.",
          "format": "int32",
          "type": "integer"
        },
        "refreshRate": {
          "description": "Refresh rate of the display in frames per second.",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "id": "Display"
    },
    "PackageNameList": {
      "properties": {
        "packageNames": {
          "items": {
            "type": "string"
          },
          "description": "A list of package names.",
          "type": "array"
        }
      },
      "description": "A list of package names.",
      "type": "object",
      "id": "PackageNameList"
    },
    "TermsAndConditions": {
      "properties": {
        "header": {
          "$ref": "UserFacingMessage",
          "description": "A short header which appears above the HTML content."
        },
        "content": {
          "$ref": "UserFacingMessage",
          "description": "A well-formatted HTML string. It will be parsed on the client with android.text.Html#fromHtml."
        }
      },
      "id": "TermsAndConditions",
      "description": "A terms and conditions page to be accepted during provisioning.",
      "type": "object"
    },
    "PerAppResult": {
      "description": "The result of an attempt to clear the data of a single app.",
      "properties": {
        "clearingResult": {
          "enum": [
            "CLEARING_RESULT_UNSPECIFIED",
            "SUCCESS",
            "APP_NOT_FOUND",
            "APP_PROTECTED",
            "API_LEVEL"
          ],
          "description": "The result of an attempt to clear the data of a single app.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified result.",
            "This app’s data was successfully cleared.",
            "This app’s data could not be cleared because the app was not found.",
            "This app’s data could not be cleared because the app is protected. For example, this may apply to apps critical to the functioning of the device, such as Google Play Store.",
            "This app’s data could not be cleared because the device API level does not support this command."
          ]
        }
      },
      "type": "object",
      "id": "PerAppResult"
    },
    "CertAuthorityInstalledEvent": {
      "description": "A new root certificate was installed into the system's trusted credential storage. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.",
      "id": "CertAuthorityInstalledEvent",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Whether the installation event succeeded."
        },
        "certificate": {
          "type": "string",
          "description": "Subject of the certificate."
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "The user in which the certificate install event happened. Only available for devices running Android 11 and above."
        }
      }
    },
    "ListWebAppsResponse": {
      "type": "object",
      "description": "Response to a request to list web apps for a given enterprise.",
      "properties": {
        "webApps": {
          "type": "array",
          "description": "The list of web apps.",
          "items": {
            "$ref": "WebApp"
          }
        },
        "nextPageToken": {
          "description": "If there are more results, a token to retrieve next page of results.",
          "type": "string"
        }
      },
      "id": "ListWebAppsResponse"
    },
    "Status": {
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "description": "The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "WipeFailureEvent": {
      "id": "WipeFailureEvent",
      "properties": {},
      "description": "The work profile or company-owned device failed to wipe when requested. This could be user initiated or admin initiated e.g. delete was received. Intentionally empty.",
      "type": "object"
    },
    "Command": {
      "id": "Command",
      "properties": {
        "type": {
          "enumDescriptions": [
            "This value is disallowed.",
            "Lock the device, as if the lock screen timeout had expired.",
            "Reset the user's password.",
            "Reboot the device. Only supported on fully managed devices running Android 7.0 (API level 24) or higher.",
            "Removes the work profile and all policies from a company-owned Android 8.0+ device, relinquishing the device for personal use. Apps and data associated with the personal profile(s) are preserved. The device will be deleted from the server after it acknowledges the command.",
            "Clears the application data of specified apps. This is supported on Android 9 and above. Note that an application can store data outside of its application data, for example in external storage or in a user dictionary. See also clear_apps_data_params."
          ],
          "type": "string",
          "description": "The type of the command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "LOCK",
            "RESET_PASSWORD",
            "REBOOT",
            "RELINQUISH_OWNERSHIP",
            "CLEAR_APP_DATA"
          ]
        },
        "userName": {
          "description": "The resource name of the user that owns the device in the form enterprises/{enterpriseId}/users/{userId}. This is automatically generated by the server based on the device the command is sent to.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "The timestamp at which the command was created. The timestamp is automatically generated by the server.",
          "type": "string"
        },
        "clearAppsDataStatus": {
          "readOnly": true,
          "description": "Output only. Status of the CLEAR_APP_DATA command to clear the data of specified apps from the device. See ClearAppsDataStatus.",
          "$ref": "ClearAppsDataStatus"
        },
        "errorCode": {
          "enum": [
            "COMMAND_ERROR_CODE_UNSPECIFIED",
            "UNKNOWN",
            "API_LEVEL",
            "MANAGEMENT_MODE",
            "INVALID_VALUE",
            "UNSUPPORTED"
          ],
          "type": "string",
          "description": "If the command failed, an error code explaining the failure. This is not set when the command is cancelled by the caller.",
          "enumDescriptions": [
            "There was no error.",
            "An unknown error occurred.",
            "The API level of the device does not support this command.",
            "The management mode (profile owner, device owner, etc.) does not support the command.",
            "The command has an invalid parameter value.",
            "The device doesn't support the command. Updating Android Device Policy to the latest version may resolve the issue."
          ]
        },
        "duration": {
          "type": "string",
          "description": "The duration for which the command is valid. The command will expire if not executed by the device during this time. The default duration if unspecified is ten minutes. There is no maximum duration.",
          "format": "google-duration"
        },
        "newPassword": {
          "description": "For commands of type RESET_PASSWORD, optionally specifies the new password.",
          "type": "string"
        },
        "resetPasswordFlags": {
          "type": "array",
          "description": "For commands of type RESET_PASSWORD, optionally specifies flags.",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "This value is ignored.",
              "Don't allow other admins to change the password again until the user has entered it.",
              "Don't ask for user credentials on device boot.",
              "Lock the device after password reset."
            ],
            "enum": [
              "RESET_PASSWORD_FLAG_UNSPECIFIED",
              "REQUIRE_ENTRY",
              "DO_NOT_ASK_CREDENTIALS_ON_BOOT",
              "LOCK_NOW"
            ]
          }
        },
        "clearAppsDataParams": {
          "description": "Parameters for the CLEAR_APP_DATA command to clear the data of specified apps from the device. See ClearAppsDataParams. If this is set, then it is suggested that type should not be set. In this case, the server automatically sets it to CLEAR_APP_DATA. It is also acceptable to explicitly set type to CLEAR_APP_DATA.",
          "$ref": "ClearAppsDataParams"
        }
      },
      "type": "object",
      "description": "A command."
    },
    "NonComplianceDetail": {
      "description": "Provides detail about non-compliance with a policy setting.",
      "properties": {
        "fieldPath": {
          "description": "For settings with nested fields, if a particular nested field is out of compliance, this specifies the full path to the offending field. The path is formatted in the same way the policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the field name is followed by a dot then by a subfield name. 2) For array-typed fields, the field name is followed by the array index enclosed in brackets. For example, to indicate a problem with the url field in the externalData field in the 3rd application, the path would be applications[2].externalData.url",
          "type": "string"
        },
        "specificNonComplianceReason": {
          "enumDescriptions": [
            "Specific non-compliance reason is not specified. Fields in specific_non_compliance_context are not set.",
            "User needs to confirm credentials by entering the screen lock. Fields in specific_non_compliance_context are not set. nonComplianceReason is set to USER_ACTION.",
            "The device or profile password has expired. passwordPoliciesContext is set. nonComplianceReason is set to USER_ACTION.",
            "The device password does not satisfy password requirements. passwordPoliciesContext is set. nonComplianceReason is set to USER_ACTION.",
            "There is an incorrect value in ONC Wi-Fi configuration. fieldPath specifies which field value is incorrect. oncWifiContext is set. nonComplianceReason is set to INVALID_VALUE.",
            "The ONC Wi-Fi setting is not supported in the API level of the Android version running on the device. fieldPath specifies which field value is not supported. oncWifiContext is set. nonComplianceReason is set to API_LEVEL."
          ],
          "type": "string",
          "enum": [
            "SPECIFIC_NON_COMPLIANCE_REASON_UNSPECIFIED",
            "PASSWORD_POLICIES_USER_CREDENTIALS_CONFIRMATION_REQUIRED",
            "PASSWORD_POLICIES_PASSWORD_EXPIRED",
            "PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT",
            "ONC_WIFI_INVALID_VALUE",
            "ONC_WIFI_API_LEVEL"
          ],
          "description": "The policy-specific reason the device is not in compliance with the setting."
        },
        "packageName": {
          "type": "string",
          "description": "The package name indicating which app is out of compliance, if applicable."
        },
        "specificNonComplianceContext": {
          "$ref": "SpecificNonComplianceContext",
          "description": "Additional context for specific_non_compliance_reason."
        },
        "currentValue": {
          "description": "If the policy setting could not be applied, the current value of the setting on the device.",
          "type": "any"
        },
        "nonComplianceReason": {
          "enum": [
            "NON_COMPLIANCE_REASON_UNSPECIFIED",
            "API_LEVEL",
            "MANAGEMENT_MODE",
            "USER_ACTION",
            "INVALID_VALUE",
            "APP_NOT_INSTALLED",
            "UNSUPPORTED",
            "APP_INSTALLED",
            "PENDING",
            "APP_INCOMPATIBLE",
            "APP_NOT_UPDATED"
          ],
          "type": "string",
          "description": "The reason the device is not in compliance with the setting.",
          "enumDescriptions": [
            "This value is disallowed.",
            "The setting is not supported in the API level of the Android version running on the device.",
            "The management mode (profile owner, device owner, etc.) doesn't support the setting.",
            "The user has not taken required action to comply with the setting.",
            "The setting has an invalid value.",
            "The app required to implement the policy is not installed.",
            "The policy is not supported by the version of Android Device Policy on the device.",
            "A blocked app is installed.",
            "The setting hasn't been applied at the time of the report, but is expected to be applied shortly.",
            "The setting can't be applied to the app because the app doesn't support it, for example because its target SDK version is not high enough.",
            "The app is installed, but it hasn't been updated to the minimum version code specified by policy."
          ]
        },
        "settingName": {
          "type": "string",
          "description": "The name of the policy setting. This is the JSON field name of a top-level Policy field."
        },
        "installationFailureReason": {
          "description": "If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app can't be installed or updated.",
          "type": "string",
          "enum": [
            "INSTALLATION_FAILURE_REASON_UNSPECIFIED",
            "INSTALLATION_FAILURE_REASON_UNKNOWN",
            "IN_PROGRESS",
            "NOT_FOUND",
            "NOT_COMPATIBLE_WITH_DEVICE",
            "NOT_APPROVED",
            "PERMISSIONS_NOT_ACCEPTED",
            "NOT_AVAILABLE_IN_COUNTRY",
            "NO_LICENSES_REMAINING",
            "NOT_ENROLLED",
            "USER_INVALID"
          ],
          "enumDescriptions": [
            "This value is disallowed.",
            "An unknown condition is preventing the app from being installed. Some potential reasons are that the device doesn't have enough storage, the device network connection is unreliable, or the installation is taking longer than expected. The installation will be retried automatically.",
            "The installation is still in progress.",
            "The app was not found in Play.",
            "The app is incompatible with the device.",
            "The app has not been approved by the admin.",
            "The app has new permissions that have not been accepted by the admin.",
            "The app is not available in the user's country.",
            "There are no licenses available to assign to the user.",
            "The enterprise is no longer enrolled with Managed Google Play or the admin has not accepted the latest Managed Google Play Terms of Service.",
            "The user is no longer valid. The user may have been deleted or disabled."
          ]
        }
      },
      "id": "NonComplianceDetail",
      "type": "object"
    },
    "ListEnterprisesResponse": {
      "id": "ListEnterprisesResponse",
      "type": "object",
      "description": "Response to a request to list enterprises.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "If there are more results, a token to retrieve next page of results."
        },
        "enterprises": {
          "type": "array",
          "description": "The list of enterprises.",
          "items": {
            "$ref": "Enterprise"
          }
        }
      }
    },
    "RemoteLockEvent": {
      "properties": {
        "adminUserId": {
          "type": "integer",
          "description": "User ID of the admin app from the which the change was requested.",
          "format": "int32"
        },
        "targetUserId": {
          "format": "int32",
          "description": "User ID in which the change was requested in.",
          "type": "integer"
        },
        "adminPackageName": {
          "description": "Package name of the admin app requesting the change.",
          "type": "string"
        }
      },
      "description": "The device or profile has been remotely locked via the LOCK command.",
      "type": "object",
      "id": "RemoteLockEvent"
    },
    "FilePushedEvent": {
      "type": "object",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "The path of the file being pushed."
        }
      },
      "description": "A file was uploaded onto the device.",
      "id": "FilePushedEvent"
    },
    "ApplicationReport": {
      "description": "Information reported about an installed app.",
      "id": "ApplicationReport",
      "type": "object",
      "properties": {
        "versionCode": {
          "format": "int32",
          "description": "The app version code, which can be used to determine whether one version is more recent than another.",
          "type": "integer"
        },
        "signingKeyCertFingerprints": {
          "items": {
            "type": "string"
          },
          "description": "The SHA-1 hash of each android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the app package. Each byte of each hash value is represented as a two-digit hexadecimal number.",
          "type": "array"
        },
        "packageName": {
          "description": "Package name of the app.",
          "type": "string"
        },
        "applicationSource": {
          "description": "The source of the package.",
          "enumDescriptions": [
            "The app was sideloaded from an unspecified source.",
            "This is a system app from the device's factory image.",
            "This is an updated system app.",
            "The app was installed from the Google Play Store."
          ],
          "type": "string",
          "enum": [
            "APPLICATION_SOURCE_UNSPECIFIED",
            "SYSTEM_APP_FACTORY_VERSION",
            "SYSTEM_APP_UPDATED_VERSION",
            "INSTALLED_FROM_PLAY_STORE"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the app."
        },
        "keyedAppStates": {
          "items": {
            "$ref": "KeyedAppState"
          },
          "description": "List of keyed app states reported by the app.",
          "type": "array"
        },
        "packageSha256Hash": {
          "description": "The SHA-256 hash of the app's APK file, which can be used to verify the app hasn't been modified. Each byte of the hash value is represented as a two-digit hexadecimal number.",
          "type": "string"
        },
        "installerPackageName": {
          "description": "The package name of the app that installed this app.",
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "ApplicationEvent"
          },
          "description": "List of app events. The most recent 20 events are stored in the list.",
          "type": "array"
        },
        "versionName": {
          "type": "string",
          "description": "The app version as displayed to the user."
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "App state is unspecified",
            "App was removed from the device",
            "App is installed on the device"
          ],
          "description": "Application state.",
          "enum": [
            "APPLICATION_STATE_UNSPECIFIED",
            "REMOVED",
            "INSTALLED"
          ]
        }
      }
    },
    "PersonalApplicationPolicy": {
      "description": "Policies for apps in the personal profile of a company-owned device with a work profile.",
      "properties": {
        "packageName": {
          "type": "string",
          "description": "The package name of the application."
        },
        "installType": {
          "enumDescriptions": [
            "Unspecified. Defaults to AVAILABLE.",
            "The app is blocked and can't be installed in the personal profile.",
            "The app is available to install in the personal profile."
          ],
          "type": "string",
          "description": "The type of installation to perform.",
          "enum": [
            "INSTALL_TYPE_UNSPECIFIED",
            "BLOCKED",
            "AVAILABLE"
          ]
        }
      },
      "id": "PersonalApplicationPolicy",
      "type": "object"
    },
    "AdbShellInteractiveEvent": {
      "properties": {},
      "id": "AdbShellInteractiveEvent",
      "type": "object",
      "description": "An ADB interactive shell was opened via “adb shell”. Intentionally empty."
    },
    "ApplicationPermission": {
      "id": "ApplicationPermission",
      "type": "object",
      "properties": {
        "description": {
          "description": "A longer description of the permission, providing more detail on what it affects. Localized.",
          "type": "string"
        },
        "permissionId": {
          "description": "An opaque string uniquely identifying the permission. Not localized.",
          "type": "string"
        },
        "name": {
          "description": "The name of the permission. Localized.",
          "type": "string"
        }
      },
      "description": "A permission required by the app."
    },
    "Application": {
      "id": "Application",
      "properties": {
        "author": {
          "type": "string",
          "description": "The name of the author of the apps (for example, the app developer)."
        },
        "appPricing": {
          "description": "Whether this app is free, free with in-app purchases, or paid. If the pricing is unspecified, this means the app is not generally available anymore (even though it might still be available to people who own it).",
          "type": "string",
          "enumDescriptions": [
            "Unknown pricing, used to denote an approved app that is not generally available.",
            "The app is free.",
            "The app is free, but offers in-app purchases.",
            "The app is paid."
          ],
          "enum": [
            "APP_PRICING_UNSPECIFIED",
            "FREE",
            "FREE_WITH_IN_APP_PURCHASE",
            "PAID"
          ]
        },
        "appTracks": {
          "items": {
            "$ref": "AppTrackInfo"
          },
          "type": "array",
          "description": "Application tracks visible to the enterprise."
        },
        "minAndroidSdkVersion": {
          "description": "The minimum Android SDK necessary to run the app.",
          "format": "int32",
          "type": "integer"
        },
        "fullDescription": {
          "description": "Full app description, if available.",
          "type": "string"
        },
        "permissions": {
          "description": "The permissions required by the app.",
          "type": "array",
          "items": {
            "$ref": "ApplicationPermission"
          }
        },
        "availableCountries": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The countries which this app is available in as per ISO 3166-1 alpha-2."
        },
        "contentRating": {
          "description": "The content rating for this app.",
          "type": "string",
          "enum": [
            "CONTENT_RATING_UNSPECIFIED",
            "THREE_YEARS",
            "SEVEN_YEARS",
            "TWELVE_YEARS",
            "SIXTEEN_YEARS",
            "EIGHTEEN_YEARS"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Content suitable for ages 3 and above only.",
            "Content suitable for ages 7 and above only.",
            "Content suitable for ages 12 and above only.",
            "Content suitable for ages 16 and above only.",
            "Content suitable for ages 18 and above only."
          ]
        },
        "recentChanges": {
          "type": "string",
          "description": "A localised description of the recent changes made to the app."
        },
        "description": {
          "description": "The localized promotional description, if available.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the app in the form enterprises/{enterprise}/applications/{package_name}."
        },
        "features": {
          "items": {
            "enumDescriptions": [
              "Unspecified.",
              "The app is a VPN."
            ],
            "enum": [
              "APP_FEATURE_UNSPECIFIED",
              "VPN_APP"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Noteworthy features (if any) of this app."
        },
        "screenshotUrls": {
          "description": "A list of screenshot links representing the app.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "managedProperties": {
          "items": {
            "$ref": "ManagedProperty"
          },
          "type": "array",
          "description": "The set of managed properties available to be pre-configured for the app."
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The approximate time (within 7 days) the app was last published.",
          "readOnly": true
        },
        "appVersions": {
          "description": "Versions currently available for this app.",
          "type": "array",
          "items": {
            "$ref": "AppVersion"
          }
        },
        "category": {
          "type": "string",
          "description": "The app category (e.g. RACING, SOCIAL, etc.)"
        },
        "playStoreUrl": {
          "type": "string",
          "description": "A link to the (consumer) Google Play details page for the app."
        },
        "iconUrl": {
          "description": "A link to an image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 512 x 512.",
          "type": "string"
        },
        "title": {
          "description": "The title of the app. Localized.",
          "type": "string"
        },
        "smallIconUrl": {
          "type": "string",
          "description": "A link to a smaller image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 128 x 128."
        },
        "distributionChannel": {
          "description": "How and to whom the package is made available.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Package is available through the Play store and not restricted to a specific enterprise.",
            "Package is a private app (restricted to an enterprise) but hosted by Google.",
            "Private app (restricted to an enterprise) and is privately hosted."
          ],
          "enum": [
            "DISTRIBUTION_CHANNEL_UNSPECIFIED",
            "PUBLIC_GOOGLE_HOSTED",
            "PRIVATE_GOOGLE_HOSTED",
            "PRIVATE_SELF_HOSTED"
          ]
        }
      },
      "type": "object",
      "description": "Information about an app."
    },
    "ListDevicesResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "If there are more results, a token to retrieve next page of results."
        },
        "devices": {
          "items": {
            "$ref": "Device"
          },
          "description": "The list of devices.",
          "type": "array"
        }
      },
      "description": "Response to a request to list devices for a given enterprise.",
      "id": "ListDevicesResponse"
    },
    "HardwareInfo": {
      "description": "Information about device hardware. The fields related to temperature thresholds are only available if hardwareStatusEnabled is true in the device's policy.",
      "type": "object",
      "properties": {
        "batteryShutdownTemperatures": {
          "type": "array",
          "items": {
            "format": "float",
            "type": "number"
          },
          "description": "Battery shutdown temperature thresholds in Celsius for each battery on the device."
        },
        "skinThrottlingTemperatures": {
          "items": {
            "format": "float",
            "type": "number"
          },
          "description": "Device skin throttling temperature thresholds in Celsius.",
          "type": "array"
        },
        "skinShutdownTemperatures": {
          "type": "array",
          "description": "Device skin shutdown temperature thresholds in Celsius.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "hardware": {
          "type": "string",
          "description": "Name of the hardware. For example, Angler."
        },
        "deviceBasebandVersion": {
          "description": "Baseband version. For example, MDM9625_104662.22.05.34p.",
          "type": "string"
        },
        "manufacturer": {
          "description": "Manufacturer. For example, Motorola.",
          "type": "string"
        },
        "gpuShutdownTemperatures": {
          "description": "GPU shutdown temperature thresholds in Celsius for each GPU on the device.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "serialNumber": {
          "description": "The device serial number.",
          "type": "string"
        },
        "cpuThrottlingTemperatures": {
          "items": {
            "type": "number",
            "format": "float"
          },
          "type": "array",
          "description": "CPU throttling temperature thresholds in Celsius for each CPU on the device."
        },
        "brand": {
          "type": "string",
          "description": "Brand of the device. For example, Google."
        },
        "cpuShutdownTemperatures": {
          "type": "array",
          "items": {
            "format": "float",
            "type": "number"
          },
          "description": "CPU shutdown temperature thresholds in Celsius for each CPU on the device."
        },
        "enterpriseSpecificId": {
          "readOnly": true,
          "description": "Output only. ID that uniquely identifies a personally-owned device in a particular organization. On the same physical device when enrolled with the same organization, this ID persists across setups and even factory resets. This ID is available on personally-owned devices with a work profile on devices running Android 12 and above.",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "The model of the device. For example, Asus Nexus 7."
        },
        "batteryThrottlingTemperatures": {
          "type": "array",
          "description": "Battery throttling temperature thresholds in Celsius for each battery on the device.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "gpuThrottlingTemperatures": {
          "description": "GPU throttling temperature thresholds in Celsius for each GPU on the device.",
          "type": "array",
          "items": {
            "format": "float",
            "type": "number"
          }
        }
      },
      "id": "HardwareInfo"
    },
    "ContactInfo": {
      "type": "object",
      "description": "Contact details for managed Google Play enterprises.",
      "properties": {
        "euRepresentativeName": {
          "description": "The name of the EU representative.",
          "type": "string"
        },
        "contactEmail": {
          "description": "Email address for a point of contact, which will be used to send important announcements related to managed Google Play.",
          "type": "string"
        },
        "euRepresentativeEmail": {
          "description": "The email of the EU representative. The email is validated but not verified.",
          "type": "string"
        },
        "dataProtectionOfficerName": {
          "description": "The name of the data protection officer.",
          "type": "string"
        },
        "euRepresentativePhone": {
          "type": "string",
          "description": "The phone number of the EU representative. The phone number is validated but not verified."
        },
        "dataProtectionOfficerPhone": {
          "type": "string",
          "description": "The phone number of the data protection officer The phone number is validated but not verified."
        },
        "dataProtectionOfficerEmail": {
          "type": "string",
          "description": "The email of the data protection officer. The email is validated but not verified."
        }
      },
      "id": "ContactInfo"
    },
    "MemoryEvent": {
      "type": "object",
      "description": "An event related to memory and storage measurements.",
      "properties": {
        "byteCount": {
          "format": "int64",
          "description": "The number of free bytes in the medium, or for EXTERNAL_STORAGE_DETECTED, the total capacity in bytes of the storage medium.",
          "type": "string"
        },
        "eventType": {
          "type": "string",
          "enum": [
            "MEMORY_EVENT_TYPE_UNSPECIFIED",
            "RAM_MEASURED",
            "INTERNAL_STORAGE_MEASURED",
            "EXTERNAL_STORAGE_DETECTED",
            "EXTERNAL_STORAGE_REMOVED",
            "EXTERNAL_STORAGE_MEASURED"
          ],
          "enumDescriptions": [
            "Unspecified. No events have this type.",
            "Free space in RAM was measured.",
            "Free space in internal storage was measured.",
            "A new external storage medium was detected. The reported byte count is the total capacity of the storage medium.",
            "An external storage medium was removed. The reported byte count is zero.",
            "Free space in an external storage medium was measured."
          ],
          "description": "Event type."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The creation time of the event."
        }
      },
      "id": "MemoryEvent"
    },
    "PersonalUsagePolicies": {
      "description": "Policies controlling personal usage on a company-owned device with a work profile.",
      "type": "object",
      "id": "PersonalUsagePolicies",
      "properties": {
        "personalApplications": {
          "items": {
            "$ref": "PersonalApplicationPolicy"
          },
          "type": "array",
          "description": "Policy applied to applications in the personal profile."
        },
        "cameraDisabled": {
          "type": "boolean",
          "description": "Whether camera is disabled."
        },
        "accountTypesWithManagementDisabled": {
          "description": "Account types that can't be managed by the user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "screenCaptureDisabled": {
          "description": "Whether screen capture is disabled.",
          "type": "boolean"
        },
        "personalPlayStoreMode": {
          "enumDescriptions": [
            "Unspecified. Defaults to BLOCKLIST.",
            "All Play Store apps are available for installation in the personal profile, except those whose installType is BLOCKED in personalApplications.",
            "All Play Store apps are available for installation in the personal profile, except those whose installType is BLOCKED in personalApplications.",
            "Only apps explicitly specified in personalApplications with installType set to AVAILABLE are allowed to be installed in the personal profile."
          ],
          "enum": [
            "PLAY_STORE_MODE_UNSPECIFIED",
            "BLACKLIST",
            "BLOCKLIST",
            "ALLOWLIST"
          ],
          "type": "string",
          "description": "Used together with personalApplications to control how apps in the personal profile are allowed or blocked."
        },
        "maxDaysWithWorkOff": {
          "type": "integer",
          "description": "Controls how long the work profile can stay off. The duration must be at least 3 days.",
          "format": "int32"
        }
      }
    },
    "AdbShellCommandEvent": {
      "type": "object",
      "description": "A shell command was issued over ADB via “adb shell command”.",
      "properties": {
        "shellCmd": {
          "type": "string",
          "description": "Shell command that was issued over ADB via \"adb shell command\". Redacted to empty string on organization-owned managed profile devices."
        }
      },
      "id": "AdbShellCommandEvent"
    },
    "AlwaysOnVpnPackage": {
      "description": "Configuration for an always-on VPN connection.",
      "properties": {
        "packageName": {
          "description": "The package name of the VPN app.",
          "type": "string"
        },
        "lockdownEnabled": {
          "description": "Disallows networking when the VPN is not connected.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "AlwaysOnVpnPackage"
    },
    "PostureDetail": {
      "description": "Additional details regarding the security posture of the device.",
      "id": "PostureDetail",
      "properties": {
        "securityRisk": {
          "description": "A specific security risk that negatively affects the security posture of the device.",
          "type": "string",
          "enum": [
            "SECURITY_RISK_UNSPECIFIED",
            "UNKNOWN_OS",
            "COMPROMISED_OS",
            "HARDWARE_BACKED_EVALUATION_FAILED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "SafetyNet detects that the device is running an unknown OS (basicIntegrity check succeeds but ctsProfileMatch fails).",
            "SafetyNet detects that the device is running a compromised OS (basicIntegrity check fails).",
            "SafetyNet detects that the device does not have a strong guarantee of system integrity, such as a hardware-backed keystore (https://developer.android.com/training/articles/security-key-attestation)."
          ]
        },
        "advice": {
          "description": "Corresponding admin-facing advice to mitigate this security risk and improve the security posture of the device.",
          "items": {
            "$ref": "UserFacingMessage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EnrollmentToken": {
      "id": "EnrollmentToken",
      "properties": {
        "value": {
          "type": "string",
          "description": "The token value that's passed to the device and authorizes the device to enroll. This is a read-only field generated by the server."
        },
        "user": {
          "description": "The user associated with this enrollment token. If it's specified when the enrollment token is created and the user does not exist, the user will be created. This field must not contain personally identifiable information. Only the account_identifier field needs to be set.",
          "$ref": "User"
        },
        "duration": {
          "type": "string",
          "format": "google-duration",
          "description": "The length of time the enrollment token is valid, ranging from 1 minute to Durations.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Durations.html#MAX_VALUE), approximately 10,000 years. If not specified, the default duration is 1 hour. Please note that if requested duration causes the resulting expiration_timestamp to exceed Timestamps.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Timestamps.html#MAX_VALUE), then expiration_timestamp is coerced to Timestamps.MAX_VALUE."
        },
        "expirationTimestamp": {
          "format": "google-datetime",
          "description": "The expiration time of the token. This is a read-only field generated by the server.",
          "type": "string"
        },
        "qrCode": {
          "description": "A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON.",
          "type": "string"
        },
        "name": {
          "description": "The name of the enrollment token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}.",
          "type": "string"
        },
        "additionalData": {
          "description": "Optional, arbitrary data associated with the enrollment token. This could contain, for example, the ID of an org unit the device is assigned to after enrollment. After a device enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data must be 1024 characters or less; otherwise, the creation request will fail.",
          "type": "string"
        },
        "oneTimeOnly": {
          "description": "Whether the enrollment token is for one time use only. If the flag is set to true, only one device can use it for registration.",
          "type": "boolean"
        },
        "policyName": {
          "description": "The name of the policy initially applied to the enrolled device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device’s user is applied. If user_name is also not specified, enterprises/{enterpriseId}/policies/default is applied by default. When updating this field, you can specify only the policyId as long as the policyId doesn’t contain any slashes. The rest of the policy name will be inferred.",
          "type": "string"
        },
        "allowPersonalUsage": {
          "enum": [
            "ALLOW_PERSONAL_USAGE_UNSPECIFIED",
            "PERSONAL_USAGE_ALLOWED",
            "PERSONAL_USAGE_DISALLOWED"
          ],
          "enumDescriptions": [
            "Personal usage restriction is not specified",
            "Personal usage is allowed",
            "Personal usage is disallowed"
          ],
          "type": "string",
          "description": "Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device."
        }
      },
      "type": "object",
      "description": "An enrollment token."
    },
    "ApplicationEvent": {
      "description": "An app-related event.",
      "type": "object",
      "properties": {
        "eventType": {
          "enumDescriptions": [
            "This value is disallowed.",
            "The app was installed.",
            "The app was changed, for example, a component was enabled or disabled.",
            "The app data was cleared.",
            "The app was removed.",
            "A new version of the app has been installed, replacing the old version.",
            "The app was restarted.",
            "The app was pinned to the foreground.",
            "The app was unpinned."
          ],
          "type": "string",
          "description": "App event type.",
          "enum": [
            "APPLICATION_EVENT_TYPE_UNSPECIFIED",
            "INSTALLED",
            "CHANGED",
            "DATA_CLEARED",
            "REMOVED",
            "REPLACED",
            "RESTARTED",
            "PINNED",
            "UNPINNED"
          ]
        },
        "createTime": {
          "type": "string",
          "description": "The creation time of the event.",
          "format": "google-datetime"
        }
      },
      "id": "ApplicationEvent"
    },
    "ClearAppsDataParams": {
      "description": "Parameters associated with the CLEAR_APP_DATA command to clear the data of specified apps from the device.",
      "type": "object",
      "properties": {
        "packageNames": {
          "items": {
            "type": "string"
          },
          "description": "The package names of the apps whose data will be cleared when the command is executed.",
          "type": "array"
        }
      },
      "id": "ClearAppsDataParams"
    },
    "KeyguardSecuredEvent": {
      "properties": {},
      "description": "The device was locked either by user or timeout. Intentionally empty.",
      "id": "KeyguardSecuredEvent",
      "type": "object"
    },
    "PasswordRequirements": {
      "id": "PasswordRequirements",
      "description": "Requirements for the password used to unlock a device.",
      "type": "object",
      "properties": {
        "unifiedLockSettings": {
          "enumDescriptions": [
            "Unspecified. Defaults to ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK.",
            "A common lock for the device and the work profile is allowed.",
            "A separate lock for the work profile is required."
          ],
          "description": "Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is reported with nonComplianceReason set to USER_ACTION.",
          "type": "string",
          "enum": [
            "UNIFIED_LOCK_SETTINGS_UNSPECIFIED",
            "ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK",
            "REQUIRE_SEPARATE_WORK_LOCK"
          ]
        },
        "maximumFailedPasswordsForWipe": {
          "type": "integer",
          "format": "int32",
          "description": "Number of incorrect device-unlock passwords that can be entered before a device is wiped. A value of 0 means there is no restriction."
        },
        "requirePasswordUnlock": {
          "enum": [
            "REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED",
            "USE_DEFAULT_DEVICE_TIMEOUT",
            "REQUIRE_EVERY_DAY"
          ],
          "description": "The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile.",
          "enumDescriptions": [
            "Unspecified. Defaults to USE_DEFAULT_DEVICE_TIMEOUT.",
            "The timeout period is set to the device’s default.",
            "The timeout period is set to 24 hours."
          ],
          "type": "string"
        },
        "passwordMinimumLength": {
          "format": "int32",
          "type": "integer",
          "description": "The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, or COMPLEX."
        },
        "passwordMinimumLowerCase": {
          "format": "int32",
          "type": "integer",
          "description": "Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX."
        },
        "passwordMinimumNumeric": {
          "description": "Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX.",
          "type": "integer",
          "format": "int32"
        },
        "passwordMinimumLetters": {
          "format": "int32",
          "type": "integer",
          "description": "Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX."
        },
        "passwordHistoryLength": {
          "format": "int32",
          "type": "integer",
          "description": "The length of the password history. After setting this field, the user won't be able to enter a new password that is the same as any password in the history. A value of 0 means there is no restriction."
        },
        "passwordExpirationTimeout": {
          "format": "google-duration",
          "description": "Password expiration timeout.",
          "type": "string"
        },
        "passwordQuality": {
          "enumDescriptions": [
            "There are no password requirements.",
            "The device must be secured with a low-security biometric recognition technology, at minimum. This includes technologies that can recognize the identity of an individual that are roughly equivalent to a 3-digit PIN (false detection is less than 1 in 1,000).This, when applied on personally owned work profile devices on Android 12 device-scoped, will be treated as COMPLEXITY_LOW for application. See PasswordQuality for details.",
            "A password is required, but there are no restrictions on what the password must contain.This, when applied on personally owned work profile devices on Android 12 device-scoped, will be treated as COMPLEXITY_LOW for application. See PasswordQuality for details.",
            "The password must contain numeric characters.This, when applied on personally owned work profile devices on Android 12 device-scoped, will be treated as COMPLEXITY_MEDIUM for application. See PasswordQuality for details.",
            "The password must contain numeric characters with no repeating (4444) or ordered (1234, 4321, 2468) sequences.This, when applied on personally owned work profile devices on Android 12 device-scoped, will be treated as COMPLEXITY_MEDIUM for application. See PasswordQuality for details.",
            "The password must contain alphabetic (or symbol) characters.This, when applied on personally owned work profile devices on Android 12 device-scoped, will be treated as COMPLEXITY_HIGH for application. See PasswordQuality for details.",
            "The password must contain both numeric and alphabetic (or symbol) characters.This, when applied on personally owned work profile devices on Android 12 device-scoped, will be treated as COMPLEXITY_HIGH for application. See PasswordQuality for details.",
            "The password must meet the minimum requirements specified in passwordMinimumLength, passwordMinimumLetters, passwordMinimumSymbols, etc. For example, if passwordMinimumSymbols is 2, the password must contain at least two symbols.This, when applied on personally owned work profile devices on Android 12 device-scoped, will be treated as COMPLEXITY_HIGH for application. In this case, the requirements in passwordMinimumLength, passwordMinimumLetters, passwordMinimumSymbols, etc are not applied. See PasswordQuality for details.",
            "Define the low password complexity band as: pattern PIN with repeating (4444) or ordered (1234, 4321, 2468) sequencesThis sets the minimum complexity band which the password must meet.Enforcement varies among different Android versions, management modes and password scopes. See PasswordQuality for details.",
            "Define the medium password complexity band as: PIN with no repeating (4444) or ordered (1234, 4321, 2468) sequences, length at least 4 alphabetic, length at least 4 alphanumeric, length at least 4This sets the minimum complexity band which the password must meet.Enforcement varies among different Android versions, management modes and password scopes. See PasswordQuality for details.",
            "Define the high password complexity band as:On Android 12 and above: PIN with no repeating (4444) or ordered (1234, 4321, 2468) sequences, length at least 8 alphabetic, length at least 6 alphanumeric, length at least 6This sets the minimum complexity band which the password must meet.Enforcement varies among different Android versions, management modes and password scopes. See PasswordQuality for details."
          ],
          "description": "The required password quality.",
          "type": "string",
          "enum": [
            "PASSWORD_QUALITY_UNSPECIFIED",
            "BIOMETRIC_WEAK",
            "SOMETHING",
            "NUMERIC",
            "NUMERIC_COMPLEX",
            "ALPHABETIC",
            "ALPHANUMERIC",
            "COMPLEX",
            "COMPLEXITY_LOW",
            "COMPLEXITY_MEDIUM",
            "COMPLEXITY_HIGH"
          ]
        },
        "passwordScope": {
          "description": "The scope that the password requirement applies to.",
          "enum": [
            "SCOPE_UNSPECIFIED",
            "SCOPE_DEVICE",
            "SCOPE_PROFILE"
          ],
          "enumDescriptions": [
            "The scope is unspecified. The password requirements are applied to the work profile for work profile devices and the whole device for fully managed or dedicated devices.",
            "The password requirements are only applied to the device.",
            "The password requirements are only applied to the work profile."
          ],
          "type": "string"
        },
        "passwordMinimumUpperCase": {
          "description": "Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX.",
          "format": "int32",
          "type": "integer"
        },
        "passwordMinimumSymbols": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX."
        },
        "passwordMinimumNonLetter": {
          "format": "int32",
          "type": "integer",
          "description": "Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX."
        }
      }
    },
    "SignupUrl": {
      "properties": {
        "url": {
          "type": "string",
          "description": "A URL where an enterprise admin can register their enterprise. The page can't be rendered in an iframe."
        },
        "name": {
          "description": "The name of the resource. Use this value in the signupUrl field when calling enterprises.create to complete the enterprise signup flow.",
          "type": "string"
        }
      },
      "id": "SignupUrl",
      "type": "object",
      "description": "An enterprise signup URL."
    },
    "SystemUpdateInfo": {
      "id": "SystemUpdateInfo",
      "description": "Information about a potential pending system update.",
      "properties": {
        "updateReceivedTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the update was first available. A zero value indicates that this field is not set. This field is set only if an update is available (that is, updateStatus is neither UPDATE_STATUS_UNKNOWN nor UP_TO_DATE)."
        },
        "updateStatus": {
          "enumDescriptions": [
            "It is unknown whether there is a pending system update. This happens when, for example, the device API level is less than 26, or if the version of Android Device Policy is outdated.",
            "There is no pending system update available on the device.",
            "There is a pending system update available, but its type is not known.",
            "There is a pending security update available.",
            "There is a pending OS update available."
          ],
          "enum": [
            "UPDATE_STATUS_UNKNOWN",
            "UP_TO_DATE",
            "UNKNOWN_UPDATE_AVAILABLE",
            "SECURITY_UPDATE_AVAILABLE",
            "OS_UPDATE_AVAILABLE"
          ],
          "description": "The status of an update: whether an update exists and what type it is.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogBufferSizeCriticalEvent": {
      "description": "The usageLog buffer on the device has reached 90% of its capacity, therefore older events may be dropped. Intentionally empty.",
      "id": "LogBufferSizeCriticalEvent",
      "type": "object",
      "properties": {}
    },
    "Date": {
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp",
      "properties": {
        "day": {
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "id": "Date"
    },
    "ClearAppsDataStatus": {
      "description": "Status of the CLEAR_APP_DATA command to clear the data of specified apps from the device.",
      "id": "ClearAppsDataStatus",
      "type": "object",
      "properties": {
        "results": {
          "type": "object",
          "additionalProperties": {
            "$ref": "PerAppResult"
          },
          "description": "The per-app results, a mapping from package names to the respective clearing result."
        }
      }
    },
    "ManagedConfigurationTemplate": {
      "description": "The managed configurations template for the app, saved from the managed configurations iframe.",
      "properties": {
        "configurationVariables": {
          "description": "Optional, a map containing configuration variables defined for the configuration.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "templateId": {
          "description": "The ID of the managed configurations template.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ManagedConfigurationTemplate"
    },
    "CertValidationFailureEvent": {
      "type": "object",
      "properties": {
        "failureReason": {
          "description": "The reason why certification validation failed.",
          "type": "string"
        }
      },
      "id": "CertValidationFailureEvent",
      "description": "An X.509v3 certificate failed to validate, currently this validation is performed on the Wi-FI access point and failure may be due to a mismatch upon server certificate validation. However it may in the future include other validation events of an X.509v3 certificate."
    },
    "WebAppIcon": {
      "description": "An icon for a web app. Supported formats are: png, jpg and webp.",
      "id": "WebAppIcon",
      "properties": {
        "imageData": {
          "type": "string",
          "description": "The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 \"Base 64 Encoding with URL and Filename Safe Alphabet\"). - The image type can be png or jpg. - The image should ideally be square. - The image should ideally have a size of 512x512. "
        }
      },
      "type": "object"
    }
  },
  "name": "androidmanagement",
  "mtlsRootUrl": "https://androidmanagement.mtls.googleapis.com/",
  "rootUrl": "https://androidmanagement.googleapis.com/",
  "servicePath": ""
}

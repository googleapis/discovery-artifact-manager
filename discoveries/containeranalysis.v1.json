{
  "servicePath": "",
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://containeranalysis.mtls.googleapis.com/",
  "version": "v1",
  "baseUrl": "https://containeranalysis.googleapis.com/",
  "id": "containeranalysis:v1",
  "ownerDomain": "google.com",
  "version_module": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "revision": "20220204",
  "title": "Container Analysis API",
  "resources": {
    "projects": {
      "resources": {
        "occurrences": {
          "methods": {
            "delete": {
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
                  "type": "string"
                }
              },
              "path": "v1/{+name}",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.projects.occurrences.delete",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectsId}/occurrences/{occurrencesId}",
              "description": "Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource."
            },
            "create": {
              "parameterOrder": [
                "parent"
              ],
              "description": "Creates a new occurrence.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Occurrence"
              },
              "request": {
                "$ref": "Occurrence"
              },
              "flatPath": "v1/projects/{projectsId}/occurrences",
              "id": "containeranalysis.projects.occurrences.create",
              "parameters": {
                "parent": {
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created.",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "path": "v1/{+parent}/occurrences"
            },
            "getVulnerabilitySummary": {
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1/projects/{projectsId}/occurrences:vulnerabilitySummary",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets a summary of the number and severity of occurrences.",
              "path": "v1/{+parent}/occurrences:vulnerabilitySummary",
              "id": "containeranalysis.projects.occurrences.getVulnerabilitySummary",
              "response": {
                "$ref": "VulnerabilityOccurrencesSummary"
              },
              "parameters": {
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The name of the project to get a vulnerability summary for in the form of `projects/[PROJECT_ID]`.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET"
            },
            "setIamPolicy": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "containeranalysis.projects.occurrences.setIamPolicy",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "parameterOrder": [
                "resource"
              ],
              "description": "Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "response": {
                "$ref": "Policy"
              },
              "httpMethod": "POST",
              "path": "v1/{+resource}:setIamPolicy"
            },
            "get": {
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "type": "string",
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/occurrences/{occurrencesId}",
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the specified occurrence.",
              "id": "containeranalysis.projects.occurrences.get",
              "response": {
                "$ref": "Occurrence"
              },
              "httpMethod": "GET"
            },
            "patch": {
              "parameters": {
                "name": {
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                },
                "updateMask": {
                  "description": "The fields to update.",
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Occurrence"
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Occurrence"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.patch",
              "description": "Updates the specified occurrence.",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/occurrences/{occurrencesId}"
            },
            "batchCreate": {
              "description": "Creates new occurrences in batch.",
              "response": {
                "$ref": "BatchCreateOccurrencesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/occurrences:batchCreate",
              "httpMethod": "POST",
              "parameterOrder": [
                "parent"
              ],
              "id": "containeranalysis.projects.occurrences.batchCreate",
              "request": {
                "$ref": "BatchCreateOccurrencesRequest"
              },
              "flatPath": "v1/projects/{projectsId}/occurrences:batchCreate",
              "parameters": {
                "parent": {
                  "required": true,
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                }
              }
            },
            "testIamPermissions": {
              "description": "Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "path": "v1/{+resource}:testIamPermissions",
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.testIamPermissions",
              "parameters": {
                "resource": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field."
                }
              },
              "httpMethod": "POST",
              "flatPath": "v1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions"
            },
            "getNotes": {
              "httpMethod": "GET",
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.",
              "id": "containeranalysis.projects.occurrences.getNotes",
              "path": "v1/{+name}/notes",
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "required": true,
                  "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
                  "location": "path"
                }
              }
            },
            "list": {
              "description": "Lists occurrences for the specified project.",
              "response": {
                "$ref": "ListOccurrencesResponse"
              },
              "path": "v1/{+parent}/occurrences",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "Number of occurrences to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20.",
                  "format": "int32"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to provide to skip to a particular spot in the list."
                },
                "parent": {
                  "description": "Required. The name of the project to list occurrences for in the form of `projects/[PROJECT_ID]`.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1/projects/{projectsId}/occurrences",
              "id": "containeranalysis.projects.occurrences.list",
              "httpMethod": "GET"
            },
            "getIamPolicy": {
              "flatPath": "v1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy",
              "parameterOrder": [
                "resource"
              ],
              "path": "v1/{+resource}:getIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "parameters": {
                "resource": {
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field."
                }
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.occurrences.getIamPolicy",
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "description": "Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences."
            }
          }
        },
        "notes": {
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "description": "Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "location": "query"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "Number of occurrences to return in the list.",
                      "type": "integer",
                      "location": "query"
                    },
                    "filter": {
                      "description": "The filter expression.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/notes/[^/]+$",
                      "description": "Required. The name of the note to list occurrences for in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/notes/{notesId}/occurrences",
                  "path": "v1/{+name}/occurrences",
                  "id": "containeranalysis.projects.notes.occurrences.list",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "httpMethod": "GET"
                }
              }
            }
          },
          "methods": {
            "setIamPolicy": {
              "path": "v1/{+resource}:setIamPolicy",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ],
              "description": "Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "flatPath": "v1/projects/{projectsId}/notes/{notesId}:setIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "httpMethod": "POST",
              "id": "containeranalysis.projects.notes.setIamPolicy",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "parameters": {
                "resource": {
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "type": "string",
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field."
                }
              }
            },
            "testIamPermissions": {
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$"
                }
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "flatPath": "v1/projects/{projectsId}/notes/{notesId}:testIamPermissions",
              "path": "v1/{+resource}:testIamPermissions",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameterOrder": [
                "resource"
              ],
              "id": "containeranalysis.projects.notes.testIamPermissions"
            },
            "list": {
              "response": {
                "$ref": "ListNotesResponse"
              },
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectsId}/notes",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "location": "path",
                  "description": "Required. The name of the project to list notes for in the form of `projects/[PROJECT_ID]`.",
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Number of notes to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20.",
                  "location": "query",
                  "format": "int32"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/notes",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists notes for the specified project.",
              "id": "containeranalysis.projects.notes.list"
            },
            "getIamPolicy": {
              "path": "v1/{+resource}:getIamPolicy",
              "id": "containeranalysis.projects.notes.getIamPolicy",
              "response": {
                "$ref": "Policy"
              },
              "parameters": {
                "resource": {
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field."
                }
              },
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "description": "Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "resource"
              ],
              "flatPath": "v1/projects/{projectsId}/notes/{notesId}:getIamPolicy",
              "httpMethod": "POST"
            },
            "create": {
              "request": {
                "$ref": "Note"
              },
              "id": "containeranalysis.projects.notes.create",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "noteId": {
                  "location": "query",
                  "description": "Required. The ID to use for this note.",
                  "type": "string"
                },
                "parent": {
                  "location": "path",
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "response": {
                "$ref": "Note"
              },
              "flatPath": "v1/projects/{projectsId}/notes",
              "description": "Creates a new note.",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/notes"
            },
            "batchCreate": {
              "response": {
                "$ref": "BatchCreateNotesResponse"
              },
              "httpMethod": "POST",
              "path": "v1/{+parent}/notes:batchCreate",
              "parameterOrder": [
                "parent"
              ],
              "description": "Creates new notes in batch.",
              "request": {
                "$ref": "BatchCreateNotesRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "containeranalysis.projects.notes.batchCreate",
              "flatPath": "v1/projects/{projectsId}/notes:batchCreate",
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created.",
                  "required": true,
                  "location": "path"
                }
              }
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/projects/{projectsId}/notes/{notesId}",
              "description": "Gets the specified note.",
              "path": "v1/{+name}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/notes/[^/]+$"
                }
              },
              "id": "containeranalysis.projects.notes.get",
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "delete": {
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "containeranalysis.projects.notes.delete",
              "path": "v1/{+name}",
              "response": {
                "$ref": "Empty"
              },
              "flatPath": "v1/projects/{projectsId}/notes/{notesId}",
              "description": "Deletes the specified note.",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "patch": {
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "Note"
              },
              "description": "Updates the specified note.",
              "parameterOrder": [
                "name"
              ],
              "id": "containeranalysis.projects.notes.patch",
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query",
                  "description": "The fields to update."
                },
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "description": "Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1/projects/{projectsId}/notes/{notesId}",
              "response": {
                "$ref": "Note"
              },
              "path": "v1/{+name}"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "default": "json",
      "location": "query",
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    }
  },
  "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.",
  "discoveryVersion": "v1",
  "fullyEncodeReservedExpansion": true,
  "documentationLink": "https://cloud.google.com/container-analysis/api/reference/rest/",
  "protocol": "rest",
  "ownerName": "Google",
  "name": "containeranalysis",
  "batchPath": "batch",
  "basePath": "",
  "canonicalName": "Container Analysis",
  "rootUrl": "https://containeranalysis.googleapis.com/",
  "schemas": {
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep": {
      "properties": {
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
          "readOnly": true
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency."
        },
        "volumes": {
          "type": "array",
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume"
          }
        },
        "timing": {
          "readOnly": true,
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
          "description": "Output only. Stores timing information for executing this build step."
        },
        "name": {
          "type": "string",
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step."
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments."
        },
        "env": {
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.",
          "type": "string"
        },
        "secretEnv": {
          "type": "array",
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "items": {
            "type": "string"
          }
        },
        "waitFor": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully."
        },
        "timeout": {
          "format": "google-duration",
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string"
        },
        "script": {
          "type": "string",
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args."
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "type": "string"
        }
      },
      "description": "A step in the build pipeline.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Results": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Results",
      "description": "Artifacts created by the build pipeline.",
      "type": "object",
      "properties": {
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "artifactTiming": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
          "description": "Time to push all non-container artifacts."
        },
        "images": {
          "type": "array",
          "description": "Container images that were built as a part of the build.",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage"
          }
        },
        "numArtifacts": {
          "format": "int64",
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded.",
          "type": "string"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded."
        }
      }
    },
    "Location": {
      "properties": {
        "path": {
          "type": "string",
          "description": "The path from which we gathered that this package/version is installed."
        },
        "cpeUri": {
          "type": "string",
          "description": "Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package."
        },
        "version": {
          "$ref": "Version",
          "description": "The version installed at this location."
        }
      },
      "type": "object",
      "description": "An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.",
      "id": "Location"
    },
    "Note": {
      "properties": {
        "name": {
          "description": "Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
          "type": "string"
        },
        "package": {
          "$ref": "PackageNote",
          "description": "A note describing a package hosted by various package managers."
        },
        "relatedUrl": {
          "items": {
            "$ref": "RelatedUrl"
          },
          "type": "array",
          "description": "URLs associated with this note."
        },
        "createTime": {
          "description": "Output only. The time this note was created. This field can be used as a filter in list requests.",
          "type": "string",
          "format": "google-datetime"
        },
        "kind": {
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "UPGRADE",
            "COMPLIANCE",
            "DSSE_ATTESTATION"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available package upgrade.",
            "This represents a Compliance Note",
            "This represents a DSSE attestation Note"
          ],
          "description": "Output only. The type of analysis. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "image": {
          "$ref": "ImageNote",
          "description": "A note describing a base image."
        },
        "longDescription": {
          "type": "string",
          "description": "A detailed description of this note."
        },
        "compliance": {
          "description": "A note describing a compliance check.",
          "$ref": "ComplianceNote"
        },
        "upgrade": {
          "$ref": "UpgradeNote",
          "description": "A note describing available package upgrades."
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "Output only. The time this note was last updated. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "relatedNoteNames": {
          "description": "Other notes related to this note.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "vulnerability": {
          "$ref": "VulnerabilityNote",
          "description": "A note describing a package vulnerability."
        },
        "shortDescription": {
          "type": "string",
          "description": "A one sentence description of this note."
        },
        "expirationTime": {
          "format": "google-datetime",
          "description": "Time of expiration for this note. Empty if note does not expire.",
          "type": "string"
        },
        "build": {
          "description": "A note describing build provenance for a verifiable build.",
          "$ref": "BuildNote"
        },
        "deployment": {
          "description": "A note describing something that can be deployed.",
          "$ref": "DeploymentNote"
        },
        "dsseAttestation": {
          "$ref": "DSSEAttestationNote",
          "description": "A note describing a dsse attestation note."
        },
        "attestation": {
          "$ref": "AttestationNote",
          "description": "A note describing an attestation role."
        },
        "discovery": {
          "description": "A note describing the initial analysis of a resource.",
          "$ref": "DiscoveryNote"
        }
      },
      "id": "Note",
      "description": "A type of analysis that can be done for a resource.",
      "type": "object"
    },
    "SetIamPolicyRequest": {
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them."
        }
      },
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "id": "SetIamPolicyRequest"
    },
    "CVSS": {
      "type": "object",
      "properties": {
        "scope": {
          "enum": [
            "SCOPE_UNSPECIFIED",
            "SCOPE_UNCHANGED",
            "SCOPE_CHANGED"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "availabilityImpact": {
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "integrityImpact": {
          "type": "string",
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "baseScore": {
          "format": "float",
          "description": "The base score is a function of the base metric scores.",
          "type": "number"
        },
        "attackVector": {
          "enum": [
            "ATTACK_VECTOR_UNSPECIFIED",
            "ATTACK_VECTOR_NETWORK",
            "ATTACK_VECTOR_ADJACENT",
            "ATTACK_VECTOR_LOCAL",
            "ATTACK_VECTOR_PHYSICAL"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.",
          "type": "string"
        },
        "privilegesRequired": {
          "type": "string",
          "enum": [
            "PRIVILEGES_REQUIRED_UNSPECIFIED",
            "PRIVILEGES_REQUIRED_NONE",
            "PRIVILEGES_REQUIRED_LOW",
            "PRIVILEGES_REQUIRED_HIGH"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "authentication": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "AUTHENTICATION_UNSPECIFIED",
            "AUTHENTICATION_MULTIPLE",
            "AUTHENTICATION_SINGLE",
            "AUTHENTICATION_NONE"
          ]
        },
        "attackComplexity": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "ATTACK_COMPLEXITY_UNSPECIFIED",
            "ATTACK_COMPLEXITY_LOW",
            "ATTACK_COMPLEXITY_HIGH"
          ],
          "type": "string"
        },
        "exploitabilityScore": {
          "format": "float",
          "type": "number"
        },
        "confidentialityImpact": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ]
        },
        "userInteraction": {
          "enum": [
            "USER_INTERACTION_UNSPECIFIED",
            "USER_INTERACTION_NONE",
            "USER_INTERACTION_REQUIRED"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "impactScore": {
          "format": "float",
          "type": "number"
        }
      },
      "description": "Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing multiple versions of CVSS. The intention is that as new versions of CVSS scores get added, we will be able to modify this message rather than adding new protos for each new version of the score.",
      "id": "CVSS"
    },
    "NonCompliantFile": {
      "id": "NonCompliantFile",
      "description": "Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.",
      "properties": {
        "displayCommand": {
          "description": "Command to display the non-compliant files.",
          "type": "string"
        },
        "reason": {
          "type": "string",
          "description": "Explains why a file is non compliant for a CIS check."
        },
        "path": {
          "type": "string",
          "description": "Empty if `display_command` is set."
        }
      },
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo": {
      "description": "A fatal problem encountered during the execution of the build.",
      "type": "object",
      "properties": {
        "detail": {
          "description": "Explains the failure issue in more detail using hard-coded text.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "description": "The name of the failure.",
          "type": "string"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo"
    },
    "BatchCreateOccurrencesResponse": {
      "type": "object",
      "description": "Response for creating occurrences in batch.",
      "id": "BatchCreateOccurrencesResponse",
      "properties": {
        "occurrences": {
          "description": "The occurrences that were created.",
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array"
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Secret": {
      "type": "object",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secret",
      "properties": {
        "secretEnv": {
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets."
        },
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        }
      }
    },
    "FixableTotalByDigest": {
      "description": "Per resource and severity counts of fixable and total vulnerabilities.",
      "id": "FixableTotalByDigest",
      "type": "object",
      "properties": {
        "resourceUri": {
          "description": "The affected resource.",
          "type": "string"
        },
        "totalCount": {
          "description": "The total number of vulnerabilities associated with this resource.",
          "format": "int64",
          "type": "string"
        },
        "fixableCount": {
          "format": "int64",
          "description": "The number of fixable vulnerabilities associated with this resource.",
          "type": "string"
        },
        "severity": {
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "type": "string",
          "description": "The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        }
      }
    },
    "PackageIssue": {
      "id": "PackageIssue",
      "description": "A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).",
      "type": "object",
      "properties": {
        "fixAvailable": {
          "type": "boolean",
          "description": "Output only. Whether a fix is available for this package."
        },
        "fixedVersion": {
          "description": "Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.",
          "$ref": "Version"
        },
        "fixedPackage": {
          "description": "The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.",
          "type": "string"
        },
        "affectedPackage": {
          "type": "string",
          "description": "Required. The package this vulnerability was found in."
        },
        "affectedCpeUri": {
          "description": "Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.",
          "type": "string"
        },
        "affectedVersion": {
          "$ref": "Version",
          "description": "Required. The version of the package that is installed on the resource affected by this vulnerability."
        },
        "fixedCpeUri": {
          "description": "The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.",
          "type": "string"
        },
        "packageType": {
          "type": "string",
          "description": "The type of package (e.g. OS, MAVEN, GO)."
        },
        "effectiveSeverity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "readOnly": true,
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "description": "Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available."
        }
      }
    },
    "Command": {
      "description": "Command describes a step performed as part of the build pipeline.",
      "id": "Command",
      "properties": {
        "name": {
          "description": "Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.",
          "type": "string"
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running this command.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the command(s) that this command depends on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "description": "Optional unique identifier for this command, used in wait_for to reference this command as a dependency."
        },
        "env": {
          "description": "Environment variables set before running this command.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "description": "Command-line arguments used when executing this command.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning": {
      "description": "A non-fatal problem encountered during the execution of the build.",
      "type": "object",
      "properties": {
        "priority": {
          "description": "The priority for this warning.",
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Explanation of the warning generated."
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning"
    },
    "ListOccurrencesResponse": {
      "id": "ListOccurrencesResponse",
      "properties": {
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          },
          "description": "The occurrences requested."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results."
        }
      },
      "description": "Response for listing occurrences.",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Source": {
      "description": "Location of the source in a supported storage service.",
      "properties": {
        "storageSourceManifest": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest",
          "description": "If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher)."
        },
        "repoSource": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        },
        "storageSource": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource",
          "description": "If provided, get the source from this location in Google Cloud Storage."
        }
      },
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Source"
    },
    "Distribution": {
      "type": "object",
      "id": "Distribution",
      "description": "This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.",
      "properties": {
        "description": {
          "type": "string",
          "description": "The distribution channel-specific description of this package."
        },
        "cpeUri": {
          "description": "Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
          "type": "string"
        },
        "url": {
          "description": "The distribution channel-specific homepage for this package.",
          "type": "string"
        },
        "architecture": {
          "description": "The CPU architecture for which packages in this distribution channel were built.",
          "type": "string",
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ],
          "enumDescriptions": [
            "Unknown architecture.",
            "X86 architecture.",
            "X64 architecture."
          ]
        },
        "latestVersion": {
          "description": "The latest available version of this package in this distribution channel.",
          "$ref": "Version"
        },
        "maintainer": {
          "description": "A freeform string denoting the maintainer of this package.",
          "type": "string"
        }
      }
    },
    "DSSEAttestationOccurrence": {
      "id": "DSSEAttestationOccurrence",
      "properties": {
        "statement": {
          "$ref": "InTotoStatement"
        },
        "envelope": {
          "description": "If doing something security critical, make sure to verify the signatures in this metadata.",
          "$ref": "Envelope"
        }
      },
      "type": "object",
      "description": "Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence."
    },
    "Artifact": {
      "type": "object",
      "id": "Artifact",
      "description": "Artifact describes a build product.",
      "properties": {
        "id": {
          "description": "Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.",
          "type": "string"
        },
        "names": {
          "type": "array",
          "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.",
          "items": {
            "type": "string"
          }
        },
        "checksum": {
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.",
          "type": "string"
        }
      }
    },
    "Identity": {
      "id": "Identity",
      "description": "The unique identifier of the update.",
      "properties": {
        "updateId": {
          "description": "The revision independent identifier of the update.",
          "type": "string"
        },
        "revision": {
          "format": "int32",
          "type": "integer",
          "description": "The revision number of the update."
        }
      },
      "type": "object"
    },
    "Binding": {
      "id": "Binding",
      "type": "object",
      "description": "Associates `members`, or principals, with a `role`.",
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "members": {
          "description": "Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "type": "string",
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        }
      }
    },
    "Fingerprint": {
      "type": "object",
      "properties": {
        "v2Name": {
          "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept.",
          "type": "string"
        },
        "v2Blob": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Required. The ordered list of v2 blobs that represent a given image."
        },
        "v1Name": {
          "type": "string",
          "description": "Required. The layer ID of the final layer in the Docker image's v1 representation."
        }
      },
      "id": "Fingerprint",
      "description": "A set of properties that uniquely identify a given Docker image."
    },
    "Completeness": {
      "properties": {
        "arguments": {
          "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
          "type": "boolean"
        },
        "environment": {
          "type": "boolean",
          "description": "If true, the builder claims that recipe.environment is claimed to be complete."
        },
        "materials": {
          "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".",
          "type": "boolean"
        }
      },
      "id": "Completeness",
      "type": "object",
      "description": "Indicates that the builder claims certain fields in this message to be complete."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts": {
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "objects": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects",
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE."
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts"
    },
    "ListNotesResponse": {
      "description": "Response for listing notes.",
      "id": "ListNotesResponse",
      "properties": {
        "nextPageToken": {
          "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.",
          "type": "string"
        },
        "notes": {
          "items": {
            "$ref": "Note"
          },
          "type": "array",
          "description": "The notes requested."
        }
      },
      "type": "object"
    },
    "InTotoStatement": {
      "properties": {
        "predicateType": {
          "description": "`https://slsa.dev/provenance/v0.1` for SlsaProvenance.",
          "type": "string"
        },
        "provenance": {
          "$ref": "InTotoProvenance"
        },
        "slsaProvenance": {
          "$ref": "SlsaProvenance"
        },
        "subject": {
          "items": {
            "$ref": "Subject"
          },
          "type": "array"
        },
        "_type": {
          "description": "Always `https://in-toto.io/Statement/v0.1`.",
          "type": "string"
        }
      },
      "id": "InTotoStatement",
      "type": "object",
      "description": "Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\"."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult": {
      "type": "object",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult",
      "properties": {
        "approvalTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time when the approval decision was made.",
          "format": "google-datetime"
        },
        "approverAccount": {
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.",
          "type": "string",
          "readOnly": true
        },
        "decision": {
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ],
          "type": "string",
          "description": "Required. The decision of this manual approval."
        },
        "comment": {
          "type": "string",
          "description": "Optional. An optional comment for this manual approval result."
        },
        "url": {
          "type": "string",
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build."
        }
      }
    },
    "VulnerabilityOccurrencesSummary": {
      "type": "object",
      "id": "VulnerabilityOccurrencesSummary",
      "properties": {
        "counts": {
          "type": "array",
          "description": "A listing by resource of the number of fixable and total vulnerabilities.",
          "items": {
            "$ref": "FixableTotalByDigest"
          }
        }
      },
      "description": "A summary of how many vulnerability occurrences there are per resource and severity type."
    },
    "Policy": {
      "properties": {
        "version": {
          "type": "integer",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32"
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte",
          "type": "string"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        }
      },
      "id": "Policy",
      "type": "object",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
    },
    "EnvelopeSignature": {
      "id": "EnvelopeSignature",
      "properties": {
        "sig": {
          "format": "byte",
          "type": "string"
        },
        "keyid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageNote": {
      "properties": {
        "resourceUrl": {
          "description": "Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.",
          "type": "string"
        },
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "Required. Immutable. The fingerprint of the base image."
        }
      },
      "description": "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.",
      "id": "ImageNote",
      "type": "object"
    },
    "SlsaMetadata": {
      "type": "object",
      "description": "Other properties of the build.",
      "id": "SlsaMetadata",
      "properties": {
        "buildFinishedOn": {
          "description": "The timestamp of when the build completed.",
          "format": "google-datetime",
          "type": "string"
        },
        "completeness": {
          "$ref": "SlsaCompleteness",
          "description": "Indicates that the builder claims certain fields in this message to be complete."
        },
        "buildStartedOn": {
          "format": "google-datetime",
          "description": "The timestamp of when the build started.",
          "type": "string"
        },
        "buildInvocationId": {
          "type": "string",
          "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec."
        },
        "reproducible": {
          "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.",
          "type": "boolean"
        }
      }
    },
    "Expr": {
      "properties": {
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        }
      },
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "id": "Expr",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption",
      "properties": {
        "name": {
          "type": "string",
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}"
        }
      },
      "type": "object",
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
    },
    "Subject": {
      "id": "Subject",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "digest": {
          "type": "object",
          "description": "`\"\": \"\"` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Occurrence": {
      "properties": {
        "createTime": {
          "description": "Output only. The time this occurrence was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "package": {
          "$ref": "PackageOccurrence",
          "description": "Describes the installation of a package on the linked resource."
        },
        "build": {
          "description": "Describes a verifiable build.",
          "$ref": "BuildOccurrence"
        },
        "deployment": {
          "description": "Describes the deployment of an artifact on a runtime.",
          "$ref": "DeploymentOccurrence"
        },
        "remediation": {
          "description": "A description of actions that can be taken to remedy the note.",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "Output only. The time this occurrence was last updated.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
        },
        "image": {
          "$ref": "ImageOccurrence",
          "description": "Describes how this resource derives from the basis in the associated note."
        },
        "attestation": {
          "description": "Describes an attestation of an artifact.",
          "$ref": "AttestationOccurrence"
        },
        "discovery": {
          "description": "Describes when a resource was discovered.",
          "$ref": "DiscoveryOccurrence"
        },
        "kind": {
          "description": "Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.",
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available package upgrade.",
            "This represents a Compliance Note",
            "This represents a DSSE attestation Note"
          ],
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "UPGRADE",
            "COMPLIANCE",
            "DSSE_ATTESTATION"
          ]
        },
        "upgrade": {
          "description": "Describes an available package upgrade on the linked resource.",
          "$ref": "UpgradeOccurrence"
        },
        "dsseAttestation": {
          "description": "Describes an attestation of an artifact using dsse.",
          "$ref": "DSSEAttestationOccurrence"
        },
        "noteName": {
          "description": "Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "envelope": {
          "$ref": "Envelope",
          "description": "https://github.com/secure-systems-lab/dsse"
        },
        "resourceUri": {
          "description": "Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.",
          "type": "string"
        },
        "vulnerability": {
          "$ref": "VulnerabilityOccurrence",
          "description": "Describes a security vulnerability."
        },
        "compliance": {
          "description": "Describes a compliance violation on a linked resource.",
          "$ref": "ComplianceOccurrence"
        }
      },
      "type": "object",
      "id": "Occurrence",
      "description": "An instance of an analysis type that has been found on a resource."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets": {
      "description": "Secrets and secret environment variables.",
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets",
      "properties": {
        "inline": {
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret"
          },
          "type": "array"
        },
        "secretManager": {
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret"
          },
          "description": "Secrets in Secret Manager and associated secret environment variable."
        }
      }
    },
    "Envelope": {
      "properties": {
        "payload": {
          "format": "byte",
          "type": "string"
        },
        "payloadType": {
          "type": "string"
        },
        "signatures": {
          "items": {
            "$ref": "EnvelopeSignature"
          },
          "type": "array"
        }
      },
      "id": "Envelope",
      "type": "object",
      "description": "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type."
    },
    "BatchCreateOccurrencesRequest": {
      "properties": {
        "occurrences": {
          "items": {
            "$ref": "Occurrence"
          },
          "description": "Required. The occurrences to create. Max allowed length is 1000.",
          "type": "array"
        }
      },
      "id": "BatchCreateOccurrencesRequest",
      "description": "Request to create occurrences in batch.",
      "type": "object"
    },
    "WindowsUpdate": {
      "description": "Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.",
      "id": "WindowsUpdate",
      "type": "object",
      "properties": {
        "identity": {
          "description": "Required - The unique identifier for the update.",
          "$ref": "Identity"
        },
        "categories": {
          "type": "array",
          "description": "The list of categories to which the update belongs.",
          "items": {
            "$ref": "Category"
          }
        },
        "kbArticleIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The Microsoft Knowledge Base article IDs that are associated with the update."
        },
        "supportUrl": {
          "description": "The hyperlink to the support information for the update.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "The localized title of the update."
        },
        "description": {
          "description": "The localized description of the update.",
          "type": "string"
        },
        "lastPublishedTimestamp": {
          "description": "The last published timestamp of the update.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "ListNoteOccurrencesResponse": {
      "id": "ListNoteOccurrencesResponse",
      "description": "Response for listing occurrences for a note.",
      "type": "object",
      "properties": {
        "occurrences": {
          "description": "The occurrences attached to the specified note.",
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to provide to skip to a particular spot in the list."
        }
      }
    },
    "Recipe": {
      "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
      "type": "object",
      "properties": {
        "entryPoint": {
          "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
          "type": "string"
        },
        "arguments": {
          "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form \"Any\".",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array"
        },
        "definedInMaterial": {
          "format": "int64",
          "type": "string",
          "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64."
        },
        "environment": {
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form \"Any\".",
          "type": "array",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        },
        "type": {
          "type": "string",
          "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
        }
      },
      "id": "Recipe"
    },
    "Jwt": {
      "properties": {
        "compactJwt": {
          "description": "The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1",
          "type": "string"
        }
      },
      "id": "Jwt",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Build": {
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "properties": {
        "failureInfo": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo",
          "readOnly": true,
          "description": "Output only. Contains information about the build when status=FAILURE."
        },
        "approval": {
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval",
          "readOnly": true
        },
        "availableSecrets": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets",
          "description": "Secrets and secret environment variables."
        },
        "artifacts": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts",
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps."
        },
        "steps": {
          "type": "array",
          "description": "Required. The operations to be performed on the workspace.",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep"
          }
        },
        "name": {
          "readOnly": true,
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
          "type": "string"
        },
        "substitutions": {
          "description": "Substitutions data for `Build` resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags for annotation of a `Build`. These are not docker tags."
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Secret"
          },
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets"
        },
        "queueTtl": {
          "type": "string",
          "format": "google-duration",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time."
        },
        "warnings": {
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning"
          },
          "readOnly": true,
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "type": "array"
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`."
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true,
          "type": "string"
        },
        "sourceProvenance": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance",
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true
        },
        "statusDetail": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Customer-readable message about the current status."
        },
        "finishTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution."
        },
        "results": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Results",
          "description": "Output only. Results of the build.",
          "readOnly": true
        },
        "options": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions",
          "description": "Special options for this build."
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "projectId": {
          "readOnly": true,
          "description": "Output only. ID of the project.",
          "type": "string"
        },
        "images": {
          "type": "array",
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "items": {
            "type": "string"
          }
        },
        "timeout": {
          "format": "google-duration",
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "type": "string"
        },
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ",
          "type": "string"
        },
        "logUrl": {
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "description": "Output only. Status of the build.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ]
        },
        "timing": {
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "additionalProperties": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          },
          "type": "object",
          "readOnly": true
        },
        "source": {
          "description": "The location of the source files to build.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Source"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. Time at which the request to create the build was received."
        },
        "buildTriggerId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically."
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Build",
      "type": "object"
    },
    "KnowledgeBase": {
      "id": "KnowledgeBase",
      "type": "object",
      "properties": {
        "name": {
          "description": "The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/)."
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Hash": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of hash that was performed.",
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ],
          "type": "string",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ]
        },
        "value": {
          "format": "byte",
          "type": "string",
          "description": "The hash value."
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Hash",
      "description": "Container message for hash values."
    },
    "BuilderConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "id": "BuilderConfig"
    },
    "CloudRepoSourceContext": {
      "properties": {
        "repoId": {
          "$ref": "RepoId",
          "description": "The ID of the repo."
        },
        "aliasContext": {
          "$ref": "AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "revisionId": {
          "type": "string",
          "description": "A revision ID."
        }
      },
      "id": "CloudRepoSourceContext",
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
      "type": "object"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time this operation was created.",
          "type": "string"
        },
        "endTime": {
          "description": "Output only. The time that this operation was marked completed or failed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Metadata for all operations used and required for all operations that created by Container Analysis Providers"
    },
    "BatchCreateNotesResponse": {
      "id": "BatchCreateNotesResponse",
      "properties": {
        "notes": {
          "type": "array",
          "description": "The notes that were created.",
          "items": {
            "$ref": "Note"
          }
        }
      },
      "type": "object",
      "description": "Response for creating notes in batch."
    },
    "RelatedUrl": {
      "id": "RelatedUrl",
      "description": "Metadata for any related URL information.",
      "properties": {
        "label": {
          "description": "Label to describe usage of the URL.",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "Specific URL associated with the resource."
        }
      },
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions": {
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption",
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.",
          "type": "string",
          "format": "int64"
        },
        "machineType": {
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ],
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ]
        },
        "secretEnv": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build."
        },
        "substitutionOption": {
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "type": "string",
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ]
        },
        "sourceProvenanceHash": {
          "description": "Requested hash for SourceProvenance.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ],
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ]
          }
        },
        "logStreamingOption": {
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "type": "string",
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "volumes": {
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume"
          }
        },
        "requestedVerifyOption": {
          "type": "string",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ],
          "description": "Requested verifiability options."
        },
        "logging": {
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "type": "string",
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).",
            "Turn off all logging. No build logs will be captured."
          ],
          "description": "Option to specify the logging mode, which determines if and where build logs are stored."
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workerPool": {
          "description": "This field deprecated; please use `pool.name` instead.",
          "type": "string"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions",
      "description": "Optional arguments to enable specific features of builds."
    },
    "Status": {
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        }
      },
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "VulnerabilityNote": {
      "description": "A security vulnerability that can be found in resources.",
      "type": "object",
      "id": "VulnerabilityNote",
      "properties": {
        "windowsDetails": {
          "description": "Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.",
          "type": "array",
          "items": {
            "$ref": "WindowsDetail"
          }
        },
        "severity": {
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "The note provider assigned severity of this vulnerability."
        },
        "cvssScore": {
          "format": "float",
          "type": "number",
          "description": "The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity."
        },
        "sourceUpdateTime": {
          "format": "google-datetime",
          "description": "The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.",
          "type": "string"
        },
        "details": {
          "description": "Details of all known distros and packages affected by this vulnerability.",
          "items": {
            "$ref": "Detail"
          },
          "type": "array"
        },
        "cvssV3": {
          "$ref": "CVSSv3",
          "description": "The full description of the CVSSv3 for this vulnerability."
        }
      }
    },
    "Category": {
      "type": "object",
      "id": "Category",
      "description": "The category to which the update belongs.",
      "properties": {
        "categoryId": {
          "description": "The identifier of the category.",
          "type": "string"
        },
        "name": {
          "description": "The localized name of the category.",
          "type": "string"
        }
      }
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval",
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "type": "object",
      "properties": {
        "state": {
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "description": "Output only. The state of this build's approval.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ],
          "type": "string",
          "readOnly": true
        },
        "config": {
          "description": "Output only. Configuration for manual approval of this build.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig",
          "readOnly": true
        },
        "result": {
          "readOnly": true,
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult",
          "description": "Output only. Result of manual approval for this Build."
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {}
    },
    "DeploymentOccurrence": {
      "id": "DeploymentOccurrence",
      "properties": {
        "resourceUri": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name."
        },
        "config": {
          "description": "Configuration used to create this deployment.",
          "type": "string"
        },
        "userEmail": {
          "type": "string",
          "description": "Identity of the user that triggered this deployment."
        },
        "platform": {
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Google Container Engine.",
            "Google App Engine: Flexible Environment.",
            "Custom user-defined platform."
          ],
          "description": "Platform hosting this deployment.",
          "type": "string"
        },
        "undeployTime": {
          "format": "google-datetime",
          "description": "End of the lifetime of this deployment.",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "Address of the runtime element hosting this deployment."
        },
        "deployTime": {
          "format": "google-datetime",
          "description": "Required. Beginning of the lifetime of this deployment.",
          "type": "string"
        }
      },
      "description": "The period during which some deployable was active in a runtime.",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage": {
      "properties": {
        "name": {
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`.",
          "type": "string"
        },
        "pushTiming": {
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing the specified image.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
        },
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage",
      "description": "An image built by the pipeline.",
      "type": "object"
    },
    "DSSEHint": {
      "id": "DSSEHint",
      "properties": {
        "humanReadableName": {
          "type": "string",
          "description": "Required. The human readable name of this attestation authority, for example \"cloudbuild-prod\"."
        }
      },
      "type": "object",
      "description": "This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1Volume",
      "properties": {
        "path": {
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        }
      },
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource": {
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "type": "object",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "generation": {
          "type": "string",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        }
      }
    },
    "GerritSourceContext": {
      "description": "A SourceContext referring to a Gerrit project.",
      "properties": {
        "hostUri": {
          "description": "The URI of a running Gerrit instance.",
          "type": "string"
        },
        "aliasContext": {
          "$ref": "AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "gerritProject": {
          "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
          "type": "string"
        },
        "revisionId": {
          "type": "string",
          "description": "A revision (commit) ID."
        }
      },
      "id": "GerritSourceContext",
      "type": "object"
    },
    "ComplianceVersion": {
      "type": "object",
      "id": "ComplianceVersion",
      "properties": {
        "cpeUri": {
          "description": "The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.",
          "type": "string"
        },
        "version": {
          "description": "The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.",
          "type": "string"
        }
      },
      "description": "Describes the CIS benchmark version that is applicable to a given OS and os version."
    },
    "Detail": {
      "description": "A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).",
      "id": "Detail",
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "The name of the vendor of the product."
        },
        "fixedPackage": {
          "description": "The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.",
          "type": "string"
        },
        "isObsolete": {
          "type": "boolean",
          "description": "Whether this detail is obsolete. Occurrences are expected not to point to obsolete details."
        },
        "sourceUpdateTime": {
          "description": "The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.",
          "format": "google-datetime",
          "type": "string"
        },
        "fixedVersion": {
          "description": "The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.",
          "$ref": "Version"
        },
        "description": {
          "description": "A vendor-specific description of this vulnerability.",
          "type": "string"
        },
        "affectedPackage": {
          "description": "Required. The package this vulnerability affects.",
          "type": "string"
        },
        "severityName": {
          "type": "string",
          "description": "The distro assigned severity of this vulnerability."
        },
        "affectedVersionStart": {
          "$ref": "Version",
          "description": "The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail."
        },
        "affectedCpeUri": {
          "description": "Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.",
          "type": "string"
        },
        "affectedVersionEnd": {
          "description": "The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.",
          "$ref": "Version"
        },
        "source": {
          "type": "string",
          "description": "The source from which the information in this Detail was obtained."
        },
        "fixedCpeUri": {
          "description": "The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.",
          "type": "string"
        },
        "packageType": {
          "description": "The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
          "type": "string"
        }
      }
    },
    "DiscoveryOccurrence": {
      "type": "object",
      "properties": {
        "lastScanTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The last time this resource was scanned."
        },
        "continuousAnalysis": {
          "enumDescriptions": [
            "Unknown.",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ],
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "type": "string",
          "description": "Whether the resource is continuously analyzed."
        },
        "cpe": {
          "type": "string",
          "description": "The CPE of the resource being scanned."
        },
        "archiveTime": {
          "description": "Output only. The time occurrences related to this discovery occurrence were archived.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "analysisStatus": {
          "description": "The status of discovery for the resource.",
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "FINISHED_SUCCESS",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has finished successfully.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad state.",
            "The resource is known not to be supported"
          ]
        },
        "analysisStatusError": {
          "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.",
          "$ref": "Status"
        }
      },
      "id": "DiscoveryOccurrence",
      "description": "Provides information about the analysis status of a discovered resource."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance",
      "properties": {
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource"
        },
        "fileHashes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes"
          },
          "readOnly": true,
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file."
        },
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource"
        },
        "resolvedStorageSourceManifest": {
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest"
        }
      },
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "type": "object"
    },
    "CVSSv3": {
      "id": "CVSSv3",
      "description": "Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document",
      "properties": {
        "availabilityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ],
          "type": "string"
        },
        "privilegesRequired": {
          "enum": [
            "PRIVILEGES_REQUIRED_UNSPECIFIED",
            "PRIVILEGES_REQUIRED_NONE",
            "PRIVILEGES_REQUIRED_LOW",
            "PRIVILEGES_REQUIRED_HIGH"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "exploitabilityScore": {
          "type": "number",
          "format": "float"
        },
        "integrityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ],
          "type": "string"
        },
        "attackVector": {
          "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.",
          "type": "string",
          "enum": [
            "ATTACK_VECTOR_UNSPECIFIED",
            "ATTACK_VECTOR_NETWORK",
            "ATTACK_VECTOR_ADJACENT",
            "ATTACK_VECTOR_LOCAL",
            "ATTACK_VECTOR_PHYSICAL"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ]
        },
        "baseScore": {
          "format": "float",
          "description": "The base score is a function of the base metric scores.",
          "type": "number"
        },
        "confidentialityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE"
          ]
        },
        "userInteraction": {
          "enum": [
            "USER_INTERACTION_UNSPECIFIED",
            "USER_INTERACTION_NONE",
            "USER_INTERACTION_REQUIRED"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "impactScore": {
          "format": "float",
          "type": "number"
        },
        "scope": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "SCOPE_UNSPECIFIED",
            "SCOPE_UNCHANGED",
            "SCOPE_CHANGED"
          ],
          "type": "string"
        },
        "attackComplexity": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "enum": [
            "ATTACK_COMPLEXITY_UNSPECIFIED",
            "ATTACK_COMPLEXITY_LOW",
            "ATTACK_COMPLEXITY_HIGH"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildProvenance": {
      "type": "object",
      "id": "BuildProvenance",
      "properties": {
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
          "type": "string"
        },
        "builderVersion": {
          "type": "string",
          "description": "Version string of the builder at the time this build was executed."
        },
        "buildOptions": {
          "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "triggerId": {
          "description": "Trigger identifier if the build was triggered automatically; empty if not.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Time at which the build was created.",
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "description": "Time at which execution of the build was finished.",
          "format": "google-datetime"
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time at which execution of the build was started."
        },
        "sourceProvenance": {
          "description": "Details of the Source input to the build.",
          "$ref": "Source"
        },
        "builtArtifacts": {
          "description": "Output of the build.",
          "type": "array",
          "items": {
            "$ref": "Artifact"
          }
        },
        "id": {
          "description": "Required. Unique identifier of the build.",
          "type": "string"
        },
        "logsUri": {
          "type": "string",
          "description": "URI where any logs for this provenance were written."
        },
        "commands": {
          "type": "array",
          "items": {
            "$ref": "Command"
          },
          "description": "Commands requested by the build."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project."
        }
      },
      "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion."
    },
    "PackageNote": {
      "description": "This represents a particular package that is distributed over various channels. E.g., glibc (aka libc6) is distributed by many, at various versions.",
      "type": "object",
      "id": "PackageNote",
      "properties": {
        "distribution": {
          "description": "The various channels by which a package is distributed.",
          "type": "array",
          "items": {
            "$ref": "Distribution"
          }
        },
        "name": {
          "type": "string",
          "description": "Required. Immutable. The name of the package."
        }
      }
    },
    "AttestationNote": {
      "description": "Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `Authority` for \"QA\" and one for \"build\". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.",
      "id": "AttestationNote",
      "type": "object",
      "properties": {
        "hint": {
          "$ref": "Hint",
          "description": "Hint hints at the purpose of the attestation authority."
        }
      }
    },
    "Metadata": {
      "properties": {
        "reproducible": {
          "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.",
          "type": "boolean"
        },
        "completeness": {
          "description": "Indicates that the builder claims certain fields in this message to be complete.",
          "$ref": "Completeness"
        },
        "buildInvocationId": {
          "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
          "type": "string"
        },
        "buildStartedOn": {
          "description": "The timestamp of when the build started.",
          "type": "string",
          "format": "google-datetime"
        },
        "buildFinishedOn": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp of when the build completed."
        }
      },
      "type": "object",
      "id": "Metadata",
      "description": "Other properties of the build."
    },
    "SlsaRecipe": {
      "id": "SlsaRecipe",
      "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
      "properties": {
        "entryPoint": {
          "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
        },
        "environment": {
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "arguments": {
          "type": "object",
          "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "definedInMaterial": {
          "format": "int64",
          "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects": {
      "type": "object",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects",
      "properties": {
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        },
        "timing": {
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "readOnly": true,
          "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
        },
        "paths": {
          "description": "Path globs used to match files in the build's workspace.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RepoId": {
      "properties": {
        "uid": {
          "description": "A server-assigned, globally unique identifier.",
          "type": "string"
        },
        "projectRepoId": {
          "$ref": "ProjectRepoId",
          "description": "A combination of a project ID and a repo name."
        }
      },
      "description": "A unique identifier for a Cloud Repo.",
      "id": "RepoId",
      "type": "object"
    },
    "WindowsDetail": {
      "type": "object",
      "id": "WindowsDetail",
      "properties": {
        "description": {
          "description": "The description of this vulnerability.",
          "type": "string"
        },
        "cpeUri": {
          "type": "string",
          "description": "Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects."
        },
        "name": {
          "type": "string",
          "description": "Required. The name of this vulnerability."
        },
        "fixingKbs": {
          "type": "array",
          "items": {
            "$ref": "KnowledgeBase"
          },
          "description": "Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix."
        }
      }
    },
    "UpgradeOccurrence": {
      "id": "UpgradeOccurrence",
      "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.",
      "type": "object",
      "properties": {
        "distribution": {
          "description": "Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.",
          "$ref": "UpgradeDistribution"
        },
        "windowsUpdate": {
          "$ref": "WindowsUpdate",
          "description": "Required for Windows OS. Represents the metadata about the Windows update."
        },
        "package": {
          "type": "string",
          "description": "Required for non-Windows OS. The package this Upgrade is for."
        },
        "parsedVersion": {
          "description": "Required for non-Windows OS. The version of the package in a machine + human readable form.",
          "$ref": "Version"
        }
      }
    },
    "TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse",
      "type": "object",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
        }
      }
    },
    "FileHashes": {
      "properties": {
        "fileHash": {
          "description": "Required. Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "Hash"
          }
        }
      },
      "type": "object",
      "description": "Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.",
      "id": "FileHashes"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret",
      "type": "object",
      "properties": {
        "envMap": {
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets."
        },
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*",
          "type": "string"
        }
      },
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value."
    },
    "BuildOccurrence": {
      "type": "object",
      "description": "Details of a build occurrence.",
      "properties": {
        "intotoStatement": {
          "$ref": "InTotoStatement",
          "description": "In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope."
        },
        "provenance": {
          "description": "The actual provenance for the build.",
          "$ref": "BuildProvenance"
        },
        "intotoProvenance": {
          "description": "Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.",
          "$ref": "InTotoProvenance"
        },
        "provenanceBytes": {
          "description": "Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.",
          "type": "string"
        }
      },
      "id": "BuildOccurrence"
    },
    "ComplianceNote": {
      "id": "ComplianceNote",
      "type": "object",
      "properties": {
        "remediation": {
          "type": "string",
          "description": "A description of remediation steps if the compliance check fails."
        },
        "version": {
          "items": {
            "$ref": "ComplianceVersion"
          },
          "type": "array",
          "description": "The OS and config versions the benchmark applies to."
        },
        "cisBenchmark": {
          "$ref": "CisBenchmark"
        },
        "scanInstructions": {
          "type": "string",
          "description": "Serialized scan instructions with a predefined format.",
          "format": "byte"
        },
        "title": {
          "description": "The title that identifies this compliance check.",
          "type": "string"
        },
        "rationale": {
          "type": "string",
          "description": "A rationale for the existence of this compliance check."
        },
        "description": {
          "type": "string",
          "description": "A description about this compliance check."
        }
      }
    },
    "DiscoveryNote": {
      "properties": {
        "analysisKind": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available package upgrade.",
            "This represents a Compliance Note",
            "This represents a DSSE attestation Note"
          ],
          "description": "Required. Immutable. The kind of analysis that is handled by this discovery.",
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "UPGRADE",
            "COMPLIANCE",
            "DSSE_ATTESTATION"
          ]
        }
      },
      "id": "DiscoveryNote",
      "type": "object",
      "description": "A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis."
    },
    "SlsaBuilder": {
      "type": "object",
      "id": "SlsaBuilder",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "BatchCreateNotesRequest": {
      "id": "BatchCreateNotesRequest",
      "description": "Request to create notes in batch.",
      "type": "object",
      "properties": {
        "notes": {
          "additionalProperties": {
            "$ref": "Note"
          },
          "type": "object",
          "description": "Required. The notes to create. Max allowed length is 1000."
        }
      }
    },
    "VulnerabilityOccurrence": {
      "type": "object",
      "description": "An occurrence of a severity vulnerability on a resource.",
      "properties": {
        "longDescription": {
          "description": "Output only. A detailed description of this vulnerability.",
          "type": "string"
        },
        "effectiveSeverity": {
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.",
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ]
        },
        "cvssv3": {
          "description": "The cvss v3 score for the vulnerability.",
          "$ref": "CVSS"
        },
        "shortDescription": {
          "type": "string",
          "description": "Output only. A one sentence description of this vulnerability."
        },
        "severity": {
          "description": "Output only. The note provider assigned severity of this vulnerability.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "type": "string"
        },
        "relatedUrls": {
          "items": {
            "$ref": "RelatedUrl"
          },
          "description": "Output only. URLs related to this vulnerability.",
          "type": "array"
        },
        "cvssScore": {
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.",
          "format": "float",
          "type": "number"
        },
        "fixAvailable": {
          "type": "boolean",
          "description": "Output only. Whether at least one of the affected packages has a fix available."
        },
        "packageIssue": {
          "items": {
            "$ref": "PackageIssue"
          },
          "description": "Required. The set of affected locations and their fixes (if available) within the associated resource.",
          "type": "array"
        },
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.)."
        }
      },
      "id": "VulnerabilityOccurrence"
    },
    "CisBenchmark": {
      "properties": {
        "profileLevel": {
          "format": "int32",
          "type": "integer"
        },
        "severity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ]
        }
      },
      "id": "CisBenchmark",
      "description": "A compliance check that is a CIS benchmark.",
      "type": "object"
    },
    "BuildNote": {
      "type": "object",
      "id": "BuildNote",
      "properties": {
        "builderVersion": {
          "description": "Required. Immutable. Version of the builder which produced this build.",
          "type": "string"
        }
      },
      "description": "Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence."
    },
    "SlsaProvenance": {
      "type": "object",
      "properties": {
        "recipe": {
          "$ref": "SlsaRecipe",
          "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required"
        },
        "materials": {
          "items": {
            "$ref": "Material"
          },
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
          "type": "array"
        },
        "builder": {
          "$ref": "SlsaBuilder",
          "description": "required"
        },
        "metadata": {
          "$ref": "SlsaMetadata"
        }
      },
      "id": "SlsaProvenance"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest": {
      "description": "Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "properties": {
        "generation": {
          "format": "int64",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "description": "Google Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        }
      },
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest",
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource": {
      "properties": {
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision regex.",
          "type": "boolean"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "branchName": {
          "type": "string",
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "repoName": {
          "type": "string",
          "description": "Name of the Cloud Source Repository."
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "substitutions": {
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Location of the source in a Google Cloud Source Repository.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource"
    },
    "GetIamPolicyRequest": {
      "properties": {
        "options": {
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.",
          "$ref": "GetPolicyOptions"
        }
      },
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object",
      "id": "GetIamPolicyRequest"
    },
    "GetPolicyOptions": {
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "id": "GetPolicyOptions",
      "type": "object",
      "properties": {
        "requestedPolicyVersion": {
          "format": "int32",
          "type": "integer",
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        }
      }
    },
    "DeploymentNote": {
      "properties": {
        "resourceUri": {
          "items": {
            "type": "string"
          },
          "description": "Required. Resource URI for the artifact being deployed.",
          "type": "array"
        }
      },
      "description": "An artifact that can be deployed in some runtime.",
      "type": "object",
      "id": "DeploymentNote"
    },
    "Material": {
      "type": "object",
      "id": "Material",
      "properties": {
        "uri": {
          "type": "string"
        },
        "digest": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      }
    },
    "PackageOccurrence": {
      "type": "object",
      "id": "PackageOccurrence",
      "properties": {
        "location": {
          "items": {
            "$ref": "Location"
          },
          "type": "array",
          "description": "Required. All of the places within the filesystem versions of this package have been found."
        },
        "name": {
          "type": "string",
          "description": "Output only. The name of the installed package."
        }
      },
      "description": "Details on how a particular software package was installed on a system."
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes",
      "type": "object",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "ContaineranalysisGoogleDevtoolsCloudbuildV1Hash"
          },
          "description": "Collection of file hashes."
        }
      }
    },
    "SourceContext": {
      "id": "SourceContext",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
      "type": "object",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Labels with user defined metadata."
        },
        "gerrit": {
          "description": "A SourceContext referring to a Gerrit project.",
          "$ref": "GerritSourceContext"
        },
        "cloudRepo": {
          "$ref": "CloudRepoSourceContext",
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo."
        },
        "git": {
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub).",
          "$ref": "GitSourceContext"
        }
      }
    },
    "AliasContext": {
      "description": "An alias to a repo revision.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The alias name."
        },
        "kind": {
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a ref named \"refs/foo/bar\"."
          ],
          "type": "string",
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ],
          "description": "The alias kind."
        }
      },
      "type": "object",
      "id": "AliasContext"
    },
    "DSSEAttestationNote": {
      "id": "DSSEAttestationNote",
      "properties": {
        "hint": {
          "description": "DSSEHint hints at the purpose of the attestation authority.",
          "$ref": "DSSEHint"
        }
      },
      "type": "object"
    },
    "SlsaCompleteness": {
      "id": "SlsaCompleteness",
      "type": "object",
      "description": "Indicates that the builder claims certain fields in this message to be complete.",
      "properties": {
        "materials": {
          "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".",
          "type": "boolean"
        },
        "arguments": {
          "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
          "type": "boolean"
        },
        "environment": {
          "description": "If true, the builder claims that recipe.environment is claimed to be complete.",
          "type": "boolean"
        }
      }
    },
    "InTotoProvenance": {
      "properties": {
        "metadata": {
          "$ref": "Metadata"
        },
        "recipe": {
          "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required",
          "$ref": "Recipe"
        },
        "materials": {
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "builderConfig": {
          "$ref": "BuilderConfig",
          "description": "required"
        }
      },
      "type": "object",
      "id": "InTotoProvenance"
    },
    "UpgradeNote": {
      "type": "object",
      "id": "UpgradeNote",
      "properties": {
        "distributions": {
          "type": "array",
          "description": "Metadata about the upgrade for each specific operating system.",
          "items": {
            "$ref": "UpgradeDistribution"
          }
        },
        "version": {
          "$ref": "Version",
          "description": "Required for non-Windows OS. The version of the package in machine + human readable form."
        },
        "windowsUpdate": {
          "$ref": "WindowsUpdate",
          "description": "Required for Windows OS. Represents the metadata about the Windows update."
        },
        "package": {
          "type": "string",
          "description": "Required for non-Windows OS. The package this Upgrade is for."
        }
      },
      "description": "An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update."
    },
    "TestIamPermissionsRequest": {
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
        }
      },
      "type": "object",
      "description": "Request message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsRequest"
    },
    "ComplianceOccurrence": {
      "id": "ComplianceOccurrence",
      "properties": {
        "nonCompliantFiles": {
          "type": "array",
          "items": {
            "$ref": "NonCompliantFile"
          }
        },
        "nonComplianceReason": {
          "type": "string"
        }
      },
      "description": "An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.",
      "type": "object"
    },
    "Hint": {
      "properties": {
        "humanReadableName": {
          "type": "string",
          "description": "Required. The human readable name of this attestation authority, for example \"qa\"."
        }
      },
      "type": "object",
      "description": "This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
      "id": "Hint"
    },
    "Hash": {
      "properties": {
        "value": {
          "description": "Required. The hash value.",
          "format": "byte",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Required. The type of hash that was performed, e.g. \"SHA-256\"."
        }
      },
      "description": "Container message for hash values.",
      "id": "Hash",
      "type": "object"
    },
    "Version": {
      "description": "Version contains structured information about the version of a package.",
      "id": "Version",
      "type": "object",
      "properties": {
        "fullName": {
          "description": "Human readable version string. This string is of the form :- and is only set when kind is NORMAL.",
          "type": "string"
        },
        "kind": {
          "enum": [
            "VERSION_KIND_UNSPECIFIED",
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ],
          "type": "string",
          "description": "Required. Distinguishes between sentinel MIN/MAX versions and normal versions.",
          "enumDescriptions": [
            "Unknown.",
            "A standard package version.",
            "A special version representing negative infinity.",
            "A special version representing positive infinity."
          ]
        },
        "name": {
          "description": "Required only when version kind is NORMAL. The main part of the version name.",
          "type": "string"
        },
        "epoch": {
          "type": "integer",
          "format": "int32",
          "description": "Used to correct mistakes in the version numbering scheme."
        },
        "inclusive": {
          "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
          "type": "boolean"
        },
        "revision": {
          "type": "string",
          "description": "The iteration of the package build from the above version."
        }
      }
    },
    "Layer": {
      "type": "object",
      "properties": {
        "arguments": {
          "type": "string",
          "description": "The recovered arguments to the Dockerfile directive."
        },
        "directive": {
          "description": "Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.",
          "type": "string"
        }
      },
      "id": "Layer",
      "description": "Layer holds metadata specific to a layer of a Docker image."
    },
    "GitSourceContext": {
      "properties": {
        "url": {
          "description": "Git repository URL.",
          "type": "string"
        },
        "revisionId": {
          "description": "Git commit hash.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
      "id": "GitSourceContext"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig",
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret": {
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret",
      "properties": {
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*",
          "type": "string"
        },
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan": {
      "id": "ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Start of time span."
        },
        "endTime": {
          "description": "End of time span.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "Start and end times for a build execution phase."
    },
    "ProjectRepoId": {
      "type": "object",
      "properties": {
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        },
        "repoName": {
          "description": "The name of the repo. Leave empty for the default repo.",
          "type": "string"
        }
      },
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
      "id": "ProjectRepoId"
    },
    "ImageOccurrence": {
      "id": "ImageOccurrence",
      "description": "Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
      "type": "object",
      "properties": {
        "distance": {
          "description": "Output only. The number of layers by which this image differs from the associated image basis.",
          "format": "int32",
          "type": "integer"
        },
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "Required. The fingerprint of the derived image."
        },
        "layerInfo": {
          "items": {
            "$ref": "Layer"
          },
          "type": "array",
          "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer."
        },
        "baseResourceUrl": {
          "type": "string",
          "description": "Output only. This contains the base image URL for the derived image occurrence."
        }
      }
    },
    "UpgradeDistribution": {
      "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
      "id": "UpgradeDistribution",
      "properties": {
        "classification": {
          "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)",
          "type": "string"
        },
        "severity": {
          "type": "string",
          "description": "The severity as specified by the upstream operating system."
        },
        "cve": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The cve tied to this Upgrade."
        },
        "cpeUri": {
          "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AttestationOccurrence": {
      "id": "AttestationOccurrence",
      "properties": {
        "jwts": {
          "type": "array",
          "description": "One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.",
          "items": {
            "$ref": "Jwt"
          }
        },
        "signatures": {
          "type": "array",
          "description": "One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.",
          "items": {
            "$ref": "Signature"
          }
        },
        "serializedPayload": {
          "format": "byte",
          "type": "string",
          "description": "Required. The serialized payload that is verified by one or more `signatures`."
        }
      },
      "type": "object",
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign."
    },
    "Source": {
      "type": "object",
      "properties": {
        "additionalContexts": {
          "type": "array",
          "items": {
            "$ref": "SourceContext"
          },
          "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field."
        },
        "artifactStorageSourceUri": {
          "type": "string",
          "description": "If provided, the input binary artifacts for the build came from this location."
        },
        "fileHashes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file."
        },
        "context": {
          "description": "If provided, the source code used for the build came from this location.",
          "$ref": "SourceContext"
        }
      },
      "description": "Source describes the location of the source used for the build.",
      "id": "Source"
    },
    "Signature": {
      "description": "Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be \"attached\" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any \"attached\" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).",
      "properties": {
        "publicKeyId": {
          "type": "string",
          "description": "The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\""
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload."
        }
      },
      "type": "object",
      "id": "Signature"
    }
  }
}

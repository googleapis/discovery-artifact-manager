{
  "documentationLink": "https://console.cloud.google.com/apis/library/ideahub.googleapis.com",
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "Ideahub",
  "schemas": {
    "GoogleSearchIdeahubV1betaIdea": {
      "type": "object",
      "description": "A single Idea that we want to show the end user.",
      "properties": {
        "topics": {
          "items": {
            "$ref": "GoogleSearchIdeahubV1betaTopic"
          },
          "description": "The Topics that match the idea.",
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Unique identifier for the idea. Format: ideas/{ideaId}"
        },
        "text": {
          "type": "string",
          "description": "The ideaâ€™s text."
        }
      },
      "id": "GoogleSearchIdeahubV1betaIdea"
    },
    "GoogleSearchIdeahubV1betaIdeaActivity": {
      "type": "object",
      "properties": {
        "ideas": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The Idea IDs for this entry. If empty, topics should be set."
        },
        "topics": {
          "type": "array",
          "description": "The Topic IDs for this entry. If empty, ideas should be set.",
          "items": {
            "type": "string"
          }
        },
        "uri": {
          "type": "string",
          "description": "The uri the activity relates to."
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "POST_DRAFTED",
            "POST_PUBLISHED",
            "POST_DELETED",
            "POST_UNPUBLISHED"
          ],
          "type": "string",
          "enumDescriptions": [
            "An unspecified, unknown type of idea activity.",
            "An idea activity type indicating a post has been drafted.",
            "An idea activity type indicating a post has been published.",
            "An idea activity type indicating a post has been deleted.",
            "An idea activity type indicating a post has been unpublished."
          ],
          "description": "The type of activity performed."
        },
        "name": {
          "description": "Unique identifier for the idea activity. The name is ignored when creating an idea activity. Format: platforms/{platform}/properties/{property}/ideaActivities/{idea_activity}",
          "type": "string"
        }
      },
      "id": "GoogleSearchIdeahubV1betaIdeaActivity",
      "description": "An idea activity entry."
    },
    "GoogleSearchIdeahubV1betaListAvailableLocalesResponse": {
      "type": "object",
      "id": "GoogleSearchIdeahubV1betaListAvailableLocalesResponse",
      "description": "Response for whether ideas are available for a given web property on a platform, for the currently logged-in user.",
      "properties": {
        "availableLocales": {
          "description": "Locales for which ideas are available for the given Creator.",
          "type": "array",
          "items": {
            "$ref": "GoogleSearchIdeahubV1betaAvailableLocale"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      }
    },
    "GoogleSearchIdeahubV1betaAvailableLocale": {
      "properties": {
        "locale": {
          "type": "string",
          "description": "A string in BCP 47 format, without a resource prefix."
        },
        "name": {
          "type": "string",
          "description": "A string in BCP 47 format, prefixed with the platform and property name, and \"locales/\". Format: platforms/{platform}/properties/{property}/locales/{locale}"
        }
      },
      "description": "Represents locales that are available for a web property.",
      "id": "GoogleSearchIdeahubV1betaAvailableLocale",
      "type": "object"
    },
    "GoogleSearchIdeahubV1betaTopic": {
      "description": "Represents a Topic umbrella for a list of questions that a Creator may want to respond to.",
      "properties": {
        "mid": {
          "description": "The mID of the topic.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Unique identifier for the topic. Format: topics/{topic}"
        },
        "displayName": {
          "type": "string",
          "description": "String displayed to the creator indicating the name of the Topic."
        }
      },
      "id": "GoogleSearchIdeahubV1betaTopic",
      "type": "object"
    },
    "GoogleSearchIdeahubV1betaTopicState": {
      "description": "Represents topic state specific to a web property.",
      "type": "object",
      "properties": {
        "saved": {
          "type": "boolean",
          "description": "Whether the topic is saved."
        },
        "name": {
          "type": "string",
          "description": "Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}"
        },
        "dismissed": {
          "description": "Whether the topic is dismissed.",
          "type": "boolean"
        }
      },
      "id": "GoogleSearchIdeahubV1betaTopicState"
    },
    "GoogleSearchIdeahubV1betaListIdeasResponse": {
      "id": "GoogleSearchIdeahubV1betaListIdeasResponse",
      "properties": {
        "ideas": {
          "type": "array",
          "description": "Results for the ListIdeasRequest.",
          "items": {
            "$ref": "GoogleSearchIdeahubV1betaIdea"
          }
        },
        "nextPageToken": {
          "description": "Used to fetch the next page in a subsequent request.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleSearchIdeahubV1betaIdeaState": {
      "properties": {
        "dismissed": {
          "type": "boolean",
          "description": "Whether the idea is dismissed."
        },
        "name": {
          "description": "Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}",
          "type": "string"
        },
        "saved": {
          "description": "Whether the idea is saved.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "GoogleSearchIdeahubV1betaIdeaState",
      "description": "Represents idea state specific to a web property."
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "ownerName": "Google",
  "rootUrl": "https://ideahub.googleapis.com/",
  "resources": {
    "platforms": {
      "resources": {
        "properties": {
          "resources": {
            "topicStates": {
              "methods": {
                "patch": {
                  "path": "v1beta/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleSearchIdeahubV1betaTopicState"
                  },
                  "httpMethod": "PATCH",
                  "parameters": {
                    "updateMask": {
                      "type": "string",
                      "location": "query",
                      "format": "google-fieldmask",
                      "description": "The list of fields to be updated."
                    },
                    "name": {
                      "required": true,
                      "location": "path",
                      "pattern": "^platforms/[^/]+/properties/[^/]+/topicStates/[^/]+$",
                      "description": "Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}",
                      "type": "string"
                    }
                  },
                  "id": "ideahub.platforms.properties.topicStates.patch",
                  "flatPath": "v1beta/platforms/{platformsId}/properties/{propertiesId}/topicStates/{topicStatesId}",
                  "description": "Update a topic state resource.",
                  "request": {
                    "$ref": "GoogleSearchIdeahubV1betaTopicState"
                  }
                }
              }
            },
            "ideaStates": {
              "methods": {
                "patch": {
                  "path": "v1beta/{+name}",
                  "id": "ideahub.platforms.properties.ideaStates.patch",
                  "httpMethod": "PATCH",
                  "description": "Update an idea state resource.",
                  "parameters": {
                    "updateMask": {
                      "location": "query",
                      "description": "The list of fields to be updated.",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "name": {
                      "description": "Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}",
                      "type": "string",
                      "pattern": "^platforms/[^/]+/properties/[^/]+/ideaStates/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta/platforms/{platformsId}/properties/{propertiesId}/ideaStates/{ideaStatesId}",
                  "response": {
                    "$ref": "GoogleSearchIdeahubV1betaIdeaState"
                  },
                  "request": {
                    "$ref": "GoogleSearchIdeahubV1betaIdeaState"
                  }
                }
              }
            },
            "ideaActivities": {
              "methods": {
                "create": {
                  "response": {
                    "$ref": "GoogleSearchIdeahubV1betaIdeaActivity"
                  },
                  "id": "ideahub.platforms.properties.ideaActivities.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "path": "v1beta/{+parent}/ideaActivities",
                  "request": {
                    "$ref": "GoogleSearchIdeahubV1betaIdeaActivity"
                  },
                  "flatPath": "v1beta/platforms/{platformsId}/properties/{propertiesId}/ideaActivities",
                  "parameters": {
                    "parent": {
                      "pattern": "^platforms/[^/]+/properties/[^/]+$",
                      "description": "Required. The parent resource where this idea activity will be created. Format: platforms/{platform}/property/{property}",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "description": "Creates an idea activity entry."
                }
              }
            },
            "ideas": {
              "methods": {
                "list": {
                  "response": {
                    "$ref": "GoogleSearchIdeahubV1betaListIdeasResponse"
                  },
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "pattern": "^platforms/[^/]+/properties/[^/]+$",
                      "location": "path",
                      "description": "Required. If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property}",
                      "required": true
                    },
                    "pageSize": {
                      "type": "integer",
                      "description": "The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000.",
                      "format": "int32",
                      "location": "query"
                    },
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "Allows filtering. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions are implicitly combined, as if the `AND` operator was always used. The `OR` operator is currently unsupported. * Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`. The `false` value is currently unsupported. Examples: * `saved(true)` * `saved(false)` * `dismissed(true)` The length of this field should be no more than 500 characters."
                    },
                    "orderBy": {
                      "location": "query",
                      "type": "string",
                      "description": "Order semantics described below."
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "Used to fetch next page.",
                      "type": "string"
                    }
                  },
                  "description": "List ideas for a given Creator and filter and sort options.",
                  "flatPath": "v1beta/platforms/{platformsId}/properties/{propertiesId}/ideas",
                  "id": "ideahub.platforms.properties.ideas.list",
                  "path": "v1beta/{+parent}/ideas",
                  "parameterOrder": [
                    "parent"
                  ]
                }
              }
            },
            "locales": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "A page token, received from a previous `ListAvailableLocales` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAvailableLocales` must match the call that provided the page token."
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of locales to return. The service may return fewer than this value. If unspecified, at most 100 locales will be returned. The maximum value is 100; values above 100 will be coerced to 100.",
                      "location": "query",
                      "type": "integer"
                    },
                    "parent": {
                      "type": "string",
                      "description": "Required. The web property to check idea availability for Format: platforms/{platform}/property/{property}",
                      "location": "path",
                      "required": true,
                      "pattern": "^platforms/[^/]+/properties/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Returns which locales ideas are available in for a given Creator.",
                  "httpMethod": "GET",
                  "id": "ideahub.platforms.properties.locales.list",
                  "response": {
                    "$ref": "GoogleSearchIdeahubV1betaListAvailableLocalesResponse"
                  },
                  "path": "v1beta/{+parent}/locales",
                  "flatPath": "v1beta/platforms/{platformsId}/properties/{propertiesId}/locales"
                }
              }
            }
          }
        }
      }
    }
  },
  "version_module": true,
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://ideahub.mtls.googleapis.com/",
  "version": "v1beta",
  "servicePath": "",
  "description": "This is an invitation-only API.",
  "basePath": "",
  "id": "ideahub:v1beta",
  "batchPath": "batch",
  "revision": "20230112",
  "parameters": {
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "alt": {
      "location": "query",
      "description": "Data format for response.",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    }
  },
  "ownerDomain": "google.com",
  "discoveryVersion": "v1",
  "protocol": "rest",
  "baseUrl": "https://ideahub.googleapis.com/",
  "name": "ideahub",
  "title": "Idea Hub API"
}

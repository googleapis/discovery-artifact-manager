{
  "parameters": {
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "location": "query",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response."
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "location": "query",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "id": "artifactregistry.projects.locations.operations.get",
                  "httpMethod": "GET"
                }
              }
            },
            "repositories": {
              "methods": {
                "patch": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates a repository.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Repository"
                  },
                  "httpMethod": "PATCH",
                  "id": "artifactregistry.projects.locations.repositories.patch",
                  "parameters": {
                    "updateMask": {
                      "type": "string",
                      "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                      "format": "google-fieldmask",
                      "location": "query"
                    },
                    "name": {
                      "description": "The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\".",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "request": {
                    "$ref": "Repository"
                  }
                },
                "testIamPermissions": {
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "httpMethod": "POST",
                  "description": "Tests if the caller has a list of permissions on a resource.",
                  "parameterOrder": [
                    "resource"
                  ],
                  "id": "artifactregistry.projects.locations.repositories.testIamPermissions",
                  "path": "v1/{+resource}:testIamPermissions",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameters": {
                    "resource": {
                      "required": true,
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  }
                },
                "create": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "repositoryId": {
                      "description": "The repository id to use for this repository.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "description": "Required. The name of the parent resource where the repository will be created.",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "path": "v1/{+parent}/repositories",
                  "id": "artifactregistry.projects.locations.repositories.create",
                  "request": {
                    "$ref": "Repository"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "httpMethod": "POST"
                },
                "get": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "description": "Gets a repository.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Repository"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "Required. The name of the repository to retrieve."
                    }
                  },
                  "httpMethod": "GET",
                  "id": "artifactregistry.projects.locations.repositories.get"
                },
                "getIamPolicy": {
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "options.requestedPolicyVersion": {
                      "format": "int32",
                      "type": "integer",
                      "location": "query",
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                    },
                    "resource": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "path": "v1/{+resource}:getIamPolicy",
                  "id": "artifactregistry.projects.locations.repositories.getIamPolicy",
                  "httpMethod": "GET",
                  "description": "Gets the IAM policy for a given resource.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy"
                },
                "list": {
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of repositories to return. Maximum page size is 1,000.",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous list request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Required. The name of the parent resource whose repositories will be listed."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "response": {
                    "$ref": "ListRepositoriesResponse"
                  },
                  "httpMethod": "GET",
                  "id": "artifactregistry.projects.locations.repositories.list",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/repositories",
                  "description": "Lists repositories."
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "description": "Deletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a google.protobuf.Empty response.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "path": "v1/{+name}",
                  "id": "artifactregistry.projects.locations.repositories.delete",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "Required. The name of the repository to delete.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "setIamPolicy": {
                  "description": "Updates the IAM policy for a given resource.",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "path": "v1/{+resource}:setIamPolicy",
                  "id": "artifactregistry.projects.locations.repositories.setIamPolicy",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              },
              "resources": {
                "aptArtifacts": {
                  "methods": {
                    "import": {
                      "id": "artifactregistry.projects.locations.repositories.aptArtifacts.import",
                      "request": {
                        "$ref": "ImportAptArtifactsRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "location": "path",
                          "type": "string",
                          "required": true
                        }
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import",
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1/{+parent}/aptArtifacts:import"
                    },
                    "upload": {
                      "path": "v1/{+parent}/aptArtifacts:create",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create",
                      "description": "Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "response": {
                        "$ref": "UploadAptArtifactMediaResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "mediaUpload": {
                        "protocols": {
                          "simple": {
                            "multipart": true,
                            "path": "/upload/v1/{+parent}/aptArtifacts:create"
                          }
                        },
                        "accept": [
                          "*/*"
                        ]
                      },
                      "parameters": {
                        "parent": {
                          "required": true,
                          "type": "string",
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "request": {
                        "$ref": "UploadAptArtifactRequest"
                      },
                      "supportsMediaUpload": true,
                      "httpMethod": "POST",
                      "id": "artifactregistry.projects.locations.repositories.aptArtifacts.upload",
                      "parameterOrder": [
                        "parent"
                      ]
                    }
                  }
                },
                "goModules": {
                  "methods": {
                    "upload": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Directly uploads a Go module. The returned Operation will complete once the Go module is uploaded. Package, Version, and File resources are created based on the uploaded Go module.",
                      "parameters": {
                        "parent": {
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "The resource name of the repository where the Go module will be uploaded.",
                          "type": "string"
                        }
                      },
                      "httpMethod": "POST",
                      "supportsMediaUpload": true,
                      "id": "artifactregistry.projects.locations.repositories.goModules.upload",
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/goModules:create",
                            "multipart": true
                          }
                        }
                      },
                      "request": {
                        "$ref": "UploadGoModuleRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+parent}/goModules:create",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/goModules:create",
                      "response": {
                        "$ref": "UploadGoModuleMediaResponse"
                      }
                    }
                  }
                },
                "mavenArtifacts": {
                  "methods": {
                    "get": {
                      "httpMethod": "GET",
                      "id": "artifactregistry.projects.locations.repositories.mavenArtifacts.get",
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/mavenArtifacts/[^/]+$",
                          "description": "Required. The name of the maven artifact.",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "response": {
                        "$ref": "MavenArtifact"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "path": "v1/{+name}",
                      "description": "Gets a maven artifact.",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts/{mavenArtifactsId}"
                    },
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "ListMavenArtifactsResponse"
                      },
                      "path": "v1/{+parent}/mavenArtifacts",
                      "httpMethod": "GET",
                      "description": "Lists maven artifacts.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts",
                      "parameters": {
                        "parent": {
                          "required": true,
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "Required. The name of the parent resource whose maven artifacts will be listed."
                        },
                        "pageSize": {
                          "format": "int32",
                          "location": "query",
                          "type": "integer",
                          "description": "The maximum number of artifacts to return."
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.mavenArtifacts.list",
                      "parameterOrder": [
                        "parent"
                      ]
                    }
                  }
                },
                "yumArtifacts": {
                  "methods": {
                    "upload": {
                      "request": {
                        "$ref": "UploadYumArtifactRequest"
                      },
                      "supportsMediaUpload": true,
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/yumArtifacts:create",
                            "multipart": true
                          }
                        }
                      },
                      "response": {
                        "$ref": "UploadYumArtifactMediaResponse"
                      },
                      "path": "v1/{+parent}/yumArtifacts:create",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "The name of the parent resource where the artifacts will be uploaded."
                        }
                      },
                      "httpMethod": "POST",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create",
                      "id": "artifactregistry.projects.locations.repositories.yumArtifacts.upload"
                    },
                    "import": {
                      "description": "Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
                      "id": "artifactregistry.projects.locations.repositories.yumArtifacts.import",
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import",
                      "httpMethod": "POST",
                      "path": "v1/{+parent}/yumArtifacts:import",
                      "response": {
                        "$ref": "Operation"
                      },
                      "request": {
                        "$ref": "ImportYumArtifactsRequest"
                      }
                    }
                  }
                },
                "pythonPackages": {
                  "methods": {
                    "get": {
                      "id": "artifactregistry.projects.locations.repositories.pythonPackages.get",
                      "description": "Gets a python package.",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pythonPackages/[^/]+$",
                          "description": "Required. The name of the python package.",
                          "type": "string"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages/{pythonPackagesId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "PythonPackage"
                      },
                      "httpMethod": "GET",
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ]
                    },
                    "list": {
                      "path": "v1/{+parent}/pythonPackages",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.pythonPackages.list",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages",
                      "description": "Lists python packages.",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "ListPythonPackagesResponse"
                      },
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        },
                        "parent": {
                          "required": true,
                          "description": "Required. The name of the parent resource whose python packages will be listed.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "description": "The maximum number of artifacts to return.",
                          "format": "int32"
                        }
                      }
                    }
                  }
                },
                "npmPackages": {
                  "methods": {
                    "get": {
                      "path": "v1/{+name}",
                      "description": "Gets a npm package.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages/{npmPackagesId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "id": "artifactregistry.projects.locations.repositories.npmPackages.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameters": {
                        "name": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/npmPackages/[^/]+$",
                          "required": true,
                          "location": "path",
                          "description": "Required. The name of the npm package."
                        }
                      },
                      "response": {
                        "$ref": "NpmPackage"
                      }
                    },
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameters": {
                        "pageToken": {
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Required. The name of the parent resource whose npm packages will be listed.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "The maximum number of artifacts to return.",
                          "format": "int32",
                          "location": "query"
                        }
                      },
                      "response": {
                        "$ref": "ListNpmPackagesResponse"
                      },
                      "path": "v1/{+parent}/npmPackages",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages",
                      "id": "artifactregistry.projects.locations.repositories.npmPackages.list",
                      "description": "Lists npm packages.",
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ]
                    }
                  }
                },
                "packages": {
                  "resources": {
                    "versions": {
                      "methods": {
                        "get": {
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$",
                              "description": "The name of the version to retrieve.",
                              "required": true,
                              "type": "string",
                              "location": "path"
                            },
                            "view": {
                              "enum": [
                                "VERSION_VIEW_UNSPECIFIED",
                                "BASIC",
                                "FULL"
                              ],
                              "location": "query",
                              "enumDescriptions": [
                                "The default / unset value. The API will default to the BASIC view.",
                                "Includes basic information about the version, but not any related tags.",
                                "Include everything."
                              ],
                              "type": "string",
                              "description": "The view that should be returned in the response."
                            }
                          },
                          "description": "Gets a version",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.get",
                          "httpMethod": "GET",
                          "parameterOrder": [
                            "name"
                          ],
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "Version"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ]
                        },
                        "delete": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.delete",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes a version and all of its content. The returned operation will complete once the version has been deleted.",
                          "httpMethod": "DELETE",
                          "parameterOrder": [
                            "name"
                          ],
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "Operation"
                          },
                          "parameters": {
                            "force": {
                              "description": "By default, a version that is tagged may not be deleted. If force=true, the version and any tags pointing to the version are deleted.",
                              "location": "query",
                              "type": "boolean"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the version to delete.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$",
                              "location": "path",
                              "required": true
                            }
                          }
                        },
                        "list": {
                          "path": "v1/{+parent}/versions",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                              "required": true,
                              "type": "string",
                              "location": "path",
                              "description": "The name of the parent resource whose versions will be listed."
                            },
                            "pageSize": {
                              "type": "integer",
                              "location": "query",
                              "format": "int32",
                              "description": "The maximum number of versions to return. Maximum page size is 1,000."
                            },
                            "orderBy": {
                              "location": "query",
                              "type": "string",
                              "description": "Optional. The field to order the results by."
                            },
                            "pageToken": {
                              "type": "string",
                              "description": "The next_page_token value returned from a previous list request, if any.",
                              "location": "query"
                            },
                            "view": {
                              "enumDescriptions": [
                                "The default / unset value. The API will default to the BASIC view.",
                                "Includes basic information about the version, but not any related tags.",
                                "Include everything."
                              ],
                              "description": "The view that should be returned in the response.",
                              "enum": [
                                "VERSION_VIEW_UNSPECIFIED",
                                "BASIC",
                                "FULL"
                              ],
                              "type": "string",
                              "location": "query"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions",
                          "description": "Lists versions.",
                          "response": {
                            "$ref": "ListVersionsResponse"
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.list",
                          "httpMethod": "GET"
                        }
                      }
                    },
                    "tags": {
                      "methods": {
                        "patch": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "response": {
                            "$ref": "Tag"
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.patch",
                          "httpMethod": "PATCH",
                          "description": "Updates a tag.",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "location": "path",
                              "type": "string",
                              "description": "The name of the tag, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1\". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\\-._~:@], anything else must be URL encoded.",
                              "required": true
                            },
                            "updateMask": {
                              "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                              "type": "string",
                              "format": "google-fieldmask",
                              "location": "query"
                            }
                          },
                          "path": "v1/{+name}",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "request": {
                            "$ref": "Tag"
                          }
                        },
                        "delete": {
                          "parameters": {
                            "name": {
                              "location": "path",
                              "description": "The name of the tag to delete.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "type": "string",
                              "required": true
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "description": "Deletes a tag.",
                          "httpMethod": "DELETE",
                          "path": "v1/{+name}",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.delete",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "response": {
                            "$ref": "Empty"
                          }
                        },
                        "create": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
                          "parameters": {
                            "parent": {
                              "required": true,
                              "description": "The name of the parent resource where the tag will be created.",
                              "location": "path",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$"
                            },
                            "tagId": {
                              "description": "The tag id to use for this repository.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.create",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Creates a tag.",
                          "request": {
                            "$ref": "Tag"
                          },
                          "httpMethod": "POST",
                          "path": "v1/{+parent}/tags",
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "Tag"
                          }
                        },
                        "get": {
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "description": "Gets a tag.",
                          "httpMethod": "GET",
                          "response": {
                            "$ref": "Tag"
                          },
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "location": "path",
                              "type": "string",
                              "description": "The name of the tag to retrieve.",
                              "required": true
                            }
                          },
                          "path": "v1/{+name}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.get",
                          "parameterOrder": [
                            "name"
                          ]
                        },
                        "list": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.list",
                          "response": {
                            "$ref": "ListTagsResponse"
                          },
                          "path": "v1/{+parent}/tags",
                          "parameters": {
                            "pageToken": {
                              "location": "query",
                              "type": "string",
                              "description": "The next_page_token value returned from a previous list request, if any."
                            },
                            "pageSize": {
                              "format": "int32",
                              "description": "The maximum number of tags to return. Maximum page size is 10,000.",
                              "type": "integer",
                              "location": "query"
                            },
                            "parent": {
                              "description": "The name of the parent package whose tags will be listed. Example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1",
                              "location": "path",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$"
                            },
                            "filter": {
                              "location": "query",
                              "description": "An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are: * `version` An example of using a filter: * `version=\"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0\"` --\u003e Tags that are applied to the version `1.0` in package `pkg1`.",
                              "type": "string"
                            }
                          },
                          "httpMethod": "GET",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "description": "Lists tags.",
                          "parameterOrder": [
                            "parent"
                          ]
                        }
                      }
                    }
                  },
                  "methods": {
                    "get": {
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Required. The name of the package to retrieve.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$"
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.packages.get",
                      "response": {
                        "$ref": "Package"
                      },
                      "description": "Gets a package.",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}"
                    },
                    "delete": {
                      "path": "v1/{+name}",
                      "id": "artifactregistry.projects.locations.repositories.packages.delete",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                          "type": "string",
                          "location": "path",
                          "description": "Required. The name of the package to delete.",
                          "required": true
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "DELETE",
                      "description": "Deletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted.",
                      "response": {
                        "$ref": "Operation"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}",
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages",
                      "description": "Lists packages.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        },
                        "parent": {
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "Required. The name of the parent resource whose packages will be listed.",
                          "required": true
                        },
                        "pageSize": {
                          "format": "int32",
                          "location": "query",
                          "type": "integer",
                          "description": "The maximum number of packages to return. Maximum page size is 1,000."
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.packages.list",
                      "response": {
                        "$ref": "ListPackagesResponse"
                      },
                      "path": "v1/{+parent}/packages"
                    }
                  }
                },
                "googetArtifacts": {
                  "methods": {
                    "upload": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "supportsMediaUpload": true,
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "UploadGoogetArtifactMediaResponse"
                      },
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.googetArtifacts.upload",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:create",
                      "path": "v1/{+parent}/googetArtifacts:create",
                      "description": "Directly uploads a GooGet artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/googetArtifacts:create",
                            "multipart": true
                          }
                        }
                      },
                      "request": {
                        "$ref": "UploadGoogetArtifactRequest"
                      }
                    },
                    "import": {
                      "path": "v1/{+parent}/googetArtifacts:import",
                      "description": "Imports GooGet artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
                      "id": "artifactregistry.projects.locations.repositories.googetArtifacts.import",
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "request": {
                        "$ref": "ImportGoogetArtifactsRequest"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:import",
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  }
                },
                "kfpArtifacts": {
                  "methods": {
                    "upload": {
                      "request": {
                        "$ref": "UploadKfpArtifactRequest"
                      },
                      "id": "artifactregistry.projects.locations.repositories.kfpArtifacts.upload",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "UploadKfpArtifactMediaResponse"
                      },
                      "description": "Directly uploads a KFP artifact. The returned Operation will complete once the resource is uploaded. Package, Version, and File resources will be created based on the uploaded artifact. Uploaded artifacts that conflict with existing resources will be overwritten.",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "description": "The resource name of the repository where the KFP artifact will be uploaded.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true
                        }
                      },
                      "path": "v1/{+parent}/kfpArtifacts:create",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/kfpArtifacts:create",
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "multipart": true,
                            "path": "/upload/v1/{+parent}/kfpArtifacts:create"
                          }
                        }
                      },
                      "supportsMediaUpload": true
                    }
                  }
                },
                "dockerImages": {
                  "methods": {
                    "get": {
                      "description": "Gets a docker image.",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/dockerImages/[^/]+$",
                          "description": "Required. The name of the docker images.",
                          "required": true
                        }
                      },
                      "path": "v1/{+name}",
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages/{dockerImagesId}",
                      "response": {
                        "$ref": "DockerImage"
                      },
                      "id": "artifactregistry.projects.locations.repositories.dockerImages.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ]
                    },
                    "list": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "parent": {
                          "required": true,
                          "description": "Required. The name of the parent resource whose docker images will be listed.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path"
                        },
                        "orderBy": {
                          "description": "The field to order the results by.",
                          "type": "string",
                          "location": "query"
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The maximum number of artifacts to return.",
                          "location": "query"
                        },
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        }
                      },
                      "httpMethod": "GET",
                      "path": "v1/{+parent}/dockerImages",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "ListDockerImagesResponse"
                      },
                      "description": "Lists docker images.",
                      "id": "artifactregistry.projects.locations.repositories.dockerImages.list"
                    }
                  }
                },
                "files": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "orderBy": {
                          "description": "The field to order the results by.",
                          "type": "string",
                          "location": "query"
                        },
                        "filter": {
                          "description": "An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are: * `name` * `owner` An example of using a filter: * `name=\"projects/p1/locations/us-central1/repositories/repo1/files/a/b/*\"` --\u003e Files with an ID starting with \"a/b/\". * `owner=\"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0\"` --\u003e Files owned by the version `1.0` in package `pkg1`.",
                          "type": "string",
                          "location": "query"
                        },
                        "parent": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "Required. The name of the repository whose files will be listed. For example: \"projects/p1/locations/us-central1/repositories/repo1",
                          "location": "path"
                        },
                        "pageSize": {
                          "format": "int32",
                          "location": "query",
                          "type": "integer",
                          "description": "The maximum number of files to return."
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files",
                      "description": "Lists files.",
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListFilesResponse"
                      },
                      "path": "v1/{+parent}/files",
                      "id": "artifactregistry.projects.locations.repositories.files.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ]
                    },
                    "get": {
                      "id": "artifactregistry.projects.locations.repositories.files.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}",
                      "description": "Gets a file.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1File"
                      },
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "description": "Required. The name of the file to retrieve.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/.*$"
                        }
                      },
                      "httpMethod": "GET"
                    }
                  }
                }
              }
            }
          },
          "methods": {
            "get": {
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "description": "Resource name for the location.",
                  "type": "string"
                }
              },
              "description": "Gets information about a location.",
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "response": {
                "$ref": "Location"
              },
              "id": "artifactregistry.projects.locations.get"
            },
            "list": {
              "httpMethod": "GET",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "flatPath": "v1/projects/{projectsId}/locations",
              "path": "v1/{+name}/locations",
              "parameters": {
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "pageSize": {
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
                  "location": "query",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "description": "Lists information about the supported locations for this service.",
              "parameterOrder": [
                "name"
              ],
              "id": "artifactregistry.projects.locations.list"
            },
            "getVpcscConfig": {
              "id": "artifactregistry.projects.locations.getVpcscConfig",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "description": "Required. The name of the VPCSCConfig resource.",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+/locations/[^/]+/vpcscConfig$",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "VPCSCConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "description": "Retrieves the VPCSC Config for the Project.",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/vpcscConfig"
            },
            "updateVpcscConfig": {
              "id": "artifactregistry.projects.locations.updateVpcscConfig",
              "parameters": {
                "updateMask": {
                  "location": "query",
                  "format": "google-fieldmask",
                  "type": "string",
                  "description": "Field mask to support partial updates."
                },
                "name": {
                  "pattern": "^projects/[^/]+/locations/[^/]+/vpcscConfig$",
                  "type": "string",
                  "location": "path",
                  "description": "The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set",
                  "required": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "description": "Updates the VPCSC Config for the Project.",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/vpcscConfig",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "VPCSCConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "VPCSCConfig"
              }
            }
          }
        }
      },
      "methods": {
        "updateProjectSettings": {
          "flatPath": "v1/projects/{projectsId}/projectSettings",
          "parameterOrder": [
            "name"
          ],
          "request": {
            "$ref": "ProjectSettings"
          },
          "description": "Updates the Settings for the Project.",
          "id": "artifactregistry.projects.updateProjectSettings",
          "httpMethod": "PATCH",
          "path": "v1/{+name}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "ProjectSettings"
          },
          "parameters": {
            "name": {
              "type": "string",
              "pattern": "^projects/[^/]+/projectSettings$",
              "location": "path",
              "description": "The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set",
              "required": true
            },
            "updateMask": {
              "location": "query",
              "format": "google-fieldmask",
              "type": "string",
              "description": "Field mask to support partial updates."
            }
          }
        },
        "getProjectSettings": {
          "flatPath": "v1/projects/{projectsId}/projectSettings",
          "response": {
            "$ref": "ProjectSettings"
          },
          "id": "artifactregistry.projects.getProjectSettings",
          "parameters": {
            "name": {
              "pattern": "^projects/[^/]+/projectSettings$",
              "location": "path",
              "type": "string",
              "description": "Required. The name of the projectSettings resource.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "description": "Retrieves the Settings for the Project."
        }
      }
    }
  },
  "basePath": "",
  "discoveryVersion": "v1",
  "rootUrl": "https://artifactregistry.googleapis.com/",
  "title": "Artifact Registry API",
  "id": "artifactregistry:v1",
  "canonicalName": "Artifact Registry",
  "name": "artifactregistry",
  "fullyEncodeReservedExpansion": true,
  "ownerDomain": "google.com",
  "description": "Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.",
  "schemas": {
    "ListMavenArtifactsResponse": {
      "id": "ListMavenArtifactsResponse",
      "type": "object",
      "description": "The response from listing maven artifacts.",
      "properties": {
        "mavenArtifacts": {
          "type": "array",
          "items": {
            "$ref": "MavenArtifact"
          },
          "description": "The maven artifacts returned."
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.",
          "type": "string"
        }
      }
    },
    "GoModule": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of a Go module."
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time when the Go module is updated.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "createTime": {
          "description": "Output only. The time when the Go module is created.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "description": "The version of the Go module. Must be a valid canonical version as defined in https://go.dev/ref/mod#glos-canonical-version."
        }
      },
      "description": "GoModule represents a Go module.",
      "id": "GoModule"
    },
    "Repository": {
      "properties": {
        "satisfiesPzs": {
          "description": "Output only. If set, the repository satisfies physical zone separation.",
          "readOnly": true,
          "type": "boolean"
        },
        "labels": {
          "type": "object",
          "description": "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mode": {
          "description": "The mode of the repository.",
          "enumDescriptions": [
            "Unspecified mode.",
            "A standard repository storing artifacts.",
            "A virtual repository to serve artifacts from one or more sources.",
            "A remote repository to serve artifacts from a remote source."
          ],
          "enum": [
            "MODE_UNSPECIFIED",
            "STANDARD_REPOSITORY",
            "VIRTUAL_REPOSITORY",
            "REMOTE_REPOSITORY"
          ],
          "type": "string"
        },
        "updateTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time when the repository was last updated."
        },
        "sizeBytes": {
          "description": "Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.",
          "format": "int64",
          "type": "string",
          "readOnly": true
        },
        "virtualRepositoryConfig": {
          "description": "Configuration specific for a Virtual Repository.",
          "$ref": "VirtualRepositoryConfig"
        },
        "name": {
          "type": "string",
          "description": "The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\"."
        },
        "kmsKeyName": {
          "type": "string",
          "description": "The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created."
        },
        "description": {
          "type": "string",
          "description": "The user-provided description of the repository."
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time when the repository was created.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "mavenConfig": {
          "description": "Maven repository config contains repository level configuration for the repositories of maven type.",
          "$ref": "MavenRepositoryConfig"
        },
        "format": {
          "enumDescriptions": [
            "Unspecified package format.",
            "Docker package format.",
            "Maven package format.",
            "NPM package format.",
            "APT package format.",
            "YUM package format.",
            "GooGet package format.",
            "Python package format.",
            "Kubeflow Pipelines package format."
          ],
          "type": "string",
          "description": "The format of packages that are stored in the repository.",
          "enum": [
            "FORMAT_UNSPECIFIED",
            "DOCKER",
            "MAVEN",
            "NPM",
            "APT",
            "YUM",
            "GOOGET",
            "PYTHON",
            "KFP"
          ]
        },
        "remoteRepositoryConfig": {
          "$ref": "RemoteRepositoryConfig",
          "description": "Configuration specific for a Remote Repository."
        },
        "dockerConfig": {
          "description": "Docker repository config contains repository level configuration for the repositories of docker type.",
          "$ref": "DockerRepositoryConfig"
        }
      },
      "description": "A Repository for storing artifacts with a specific format.",
      "id": "Repository",
      "type": "object"
    },
    "ImportAptArtifactsErrorInfo": {
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportAptArtifactsGcsSource"
        },
        "error": {
          "$ref": "Status",
          "description": "The detailed error status."
        }
      },
      "description": "Error information explaining why a package was not imported.",
      "id": "ImportAptArtifactsErrorInfo",
      "type": "object"
    },
    "ImportYumArtifactsMetadata": {
      "type": "object",
      "id": "ImportYumArtifactsMetadata",
      "properties": {},
      "description": "The operation metadata for importing artifacts."
    },
    "ListNpmPackagesResponse": {
      "description": "The response from listing npm packages.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return."
        },
        "npmPackages": {
          "type": "array",
          "items": {
            "$ref": "NpmPackage"
          },
          "description": "The npm packages returned."
        }
      },
      "id": "ListNpmPackagesResponse",
      "type": "object"
    },
    "MavenRepository": {
      "type": "object",
      "id": "MavenRepository",
      "properties": {
        "publicRepository": {
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "MAVEN_CENTRAL"
          ],
          "enumDescriptions": [
            "Unspecified repository.",
            "Maven Central."
          ],
          "type": "string",
          "description": "One of the publicly available Maven repositories supported by Artifact Registry."
        }
      },
      "description": "Configuration for a Maven remote repository."
    },
    "UploadYumArtifactMediaResponse": {
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      },
      "type": "object",
      "description": "The response to upload an artifact.",
      "id": "UploadYumArtifactMediaResponse"
    },
    "Expr": {
      "properties": {
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        },
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        }
      },
      "type": "object",
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."
    },
    "UploadGoModuleMediaResponse": {
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "Operation to be returned to the user."
        }
      },
      "id": "UploadGoModuleMediaResponse",
      "description": "The response to upload a Go module.",
      "type": "object"
    },
    "UploadYumArtifactResponse": {
      "properties": {
        "yumArtifacts": {
          "description": "The Apt artifacts updated.",
          "items": {
            "$ref": "YumArtifact"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "UploadYumArtifactResponse",
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users."
    },
    "UploadAptArtifactRequest": {
      "type": "object",
      "properties": {},
      "id": "UploadAptArtifactRequest",
      "description": "The request to upload an artifact."
    },
    "Version": {
      "id": "Version",
      "properties": {
        "description": {
          "type": "string",
          "description": "Optional. Description of the version, as specified in its metadata."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "type": "object",
          "description": "Output only. Repository-specific Metadata stored against this version. The fields returned are defined by the underlying repository-specific resource. Currently, the resources could be: DockerImage MavenArtifact",
          "readOnly": true
        },
        "name": {
          "description": "The name of the version, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1\". If the package or version ID parts contain slashes, the slashes are escaped.",
          "type": "string"
        },
        "relatedTags": {
          "description": "Output only. A list of related tags. Will contain up to 100 tags that reference this version.",
          "items": {
            "$ref": "Tag"
          },
          "type": "array"
        },
        "createTime": {
          "description": "The time when the version was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "updateTime": {
          "description": "The time when the version was last updated.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes.",
      "type": "object"
    },
    "AptArtifact": {
      "properties": {
        "component": {
          "description": "Output only. Repository component of the artifact.",
          "type": "string",
          "readOnly": true
        },
        "packageType": {
          "readOnly": true,
          "description": "Output only. An artifact is a binary or source package.",
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package.",
            "Source package."
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The Artifact Registry resource name of the artifact."
        },
        "packageName": {
          "description": "Output only. The Apt package name of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "controlFile": {
          "readOnly": true,
          "format": "byte",
          "type": "string",
          "description": "Output only. Contents of the artifact's control metadata file."
        },
        "architecture": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Operating system architecture of the artifact."
        }
      },
      "id": "AptArtifact",
      "type": "object",
      "description": "A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html"
    },
    "ImportGoogetArtifactsRequest": {
      "id": "ImportGoogetArtifactsRequest",
      "description": "The request to import new googet artifacts.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "$ref": "ImportGoogetArtifactsGcsSource",
          "description": "Google Cloud Storage location where input content is located."
        }
      }
    },
    "ListRepositoriesResponse": {
      "type": "object",
      "description": "The response from listing repositories.",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of repositories, or empty if there are no more repositories to return.",
          "type": "string"
        },
        "repositories": {
          "description": "The repositories returned.",
          "items": {
            "$ref": "Repository"
          },
          "type": "array"
        }
      },
      "id": "ListRepositoriesResponse"
    },
    "ProjectSettings": {
      "description": "The Artifact Registry settings that apply to a Project.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set"
        },
        "legacyRedirectionState": {
          "type": "string",
          "enum": [
            "REDIRECTION_STATE_UNSPECIFIED",
            "REDIRECTION_FROM_GCR_IO_DISABLED",
            "REDIRECTION_FROM_GCR_IO_ENABLED",
            "REDIRECTION_FROM_GCR_IO_FINALIZED"
          ],
          "enumDescriptions": [
            "No redirection status has been set.",
            "Redirection is disabled.",
            "Redirection is enabled.",
            "Redirection is enabled, and has been finalized so cannot be reverted."
          ],
          "description": "The redirection state of the legacy repositories in this project."
        }
      },
      "id": "ProjectSettings"
    },
    "VirtualRepositoryConfig": {
      "id": "VirtualRepositoryConfig",
      "properties": {
        "upstreamPolicies": {
          "description": "Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.",
          "items": {
            "$ref": "UpstreamPolicy"
          },
          "type": "array"
        }
      },
      "description": "Virtual repository configuration.",
      "type": "object"
    },
    "ListPythonPackagesResponse": {
      "properties": {
        "pythonPackages": {
          "type": "array",
          "items": {
            "$ref": "PythonPackage"
          },
          "description": "The python packages returned."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return."
        }
      },
      "id": "ListPythonPackagesResponse",
      "description": "The response from listing python packages.",
      "type": "object"
    },
    "UploadYumArtifactMetadata": {
      "description": "The operation metadata for uploading artifacts.",
      "type": "object",
      "properties": {},
      "id": "UploadYumArtifactMetadata"
    },
    "DockerImage": {
      "type": "object",
      "description": "DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest."
        },
        "uri": {
          "description": "Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time when the docker image was last updated."
        },
        "uploadTime": {
          "description": "Time the image was uploaded.",
          "format": "google-datetime",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags attached to this image.",
          "type": "array"
        },
        "imageSizeBytes": {
          "type": "string",
          "description": "Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.",
          "format": "int64"
        },
        "mediaType": {
          "type": "string",
          "description": "Media type of this image, e.g. \"application/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource."
        },
        "buildTime": {
          "format": "google-datetime",
          "description": "The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.",
          "type": "string"
        }
      },
      "id": "DockerImage"
    },
    "Policy": {
      "type": "object",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "id": "Policy",
      "properties": {
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "items": {
            "$ref": "Binding"
          },
          "type": "array"
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        },
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "KfpArtifact": {
      "description": "A detailed representation of a KFP artifact.",
      "type": "object",
      "id": "KfpArtifact",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the KFP artifact. Since users don't directly interact with this resource, the name will be derived from the associated version. For example, when version = \".../versions/sha256:abcdef...\", the name will be \".../kfpArtifacts/sha256:abcdef...\".",
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "The version associated with the KFP artifact. Must follow the Semantic Versioning standard."
        }
      }
    },
    "Location": {
      "id": "Location",
      "type": "object",
      "description": "A resource that represents a Google Cloud location.",
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "labels": {
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        }
      }
    },
    "Operation": {
      "properties": {
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation"
    },
    "VPCSCConfig": {
      "id": "VPCSCConfig",
      "description": "The Artifact Registry VPC SC config that apply to a Project.",
      "properties": {
        "vpcscPolicy": {
          "enum": [
            "VPCSC_POLICY_UNSPECIFIED",
            "DENY",
            "ALLOW"
          ],
          "enumDescriptions": [
            "VPCSC_POLICY_UNSPECIFIED - the VPS SC policy is not defined. When VPS SC policy is not defined - the Service will use the default behavior (VPCSC_DENY).",
            "VPCSC_DENY - repository will block the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter.",
            "VPCSC_ALLOW - repository will allow the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter."
          ],
          "description": "The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).",
          "type": "string"
        },
        "name": {
          "description": "The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UploadGoogetArtifactResponse": {
      "type": "object",
      "id": "UploadGoogetArtifactResponse",
      "properties": {
        "googetArtifacts": {
          "description": "The GooGet artifacts updated.",
          "items": {
            "$ref": "GoogetArtifact"
          },
          "type": "array"
        }
      },
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users."
    },
    "ListDockerImagesResponse": {
      "type": "object",
      "description": "The response from listing docker images.",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.",
          "type": "string"
        },
        "dockerImages": {
          "type": "array",
          "items": {
            "$ref": "DockerImage"
          },
          "description": "The docker images returned."
        }
      },
      "id": "ListDockerImagesResponse"
    },
    "UpstreamPolicy": {
      "id": "UpstreamPolicy",
      "properties": {
        "repository": {
          "description": "A reference to the repository resource, for example: \"projects/p1/locations/us-central1/repositories/repo1\".",
          "type": "string"
        },
        "priority": {
          "description": "Entries with a greater priority value take precedence in the pull order.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The user-provided ID of the upstream policy.",
          "type": "string"
        }
      },
      "description": "Artifact policy configuration for the repository contents.",
      "type": "object"
    },
    "ImportYumArtifactsErrorInfo": {
      "id": "ImportYumArtifactsErrorInfo",
      "description": "Error information explaining why a package was not imported.",
      "properties": {
        "gcsSource": {
          "$ref": "ImportYumArtifactsGcsSource",
          "description": "Google Cloud Storage location requested."
        },
        "error": {
          "$ref": "Status",
          "description": "The detailed error status."
        }
      },
      "type": "object"
    },
    "UploadKfpArtifactMediaResponse": {
      "description": "The response to upload an artifact.",
      "properties": {
        "operation": {
          "description": "Operation that will be returned to the user.",
          "$ref": "Operation"
        }
      },
      "id": "UploadKfpArtifactMediaResponse",
      "type": "object"
    },
    "UploadGoogetArtifactRequest": {
      "id": "UploadGoogetArtifactRequest",
      "type": "object",
      "description": "The request to upload an artifact.",
      "properties": {}
    },
    "GoogleDevtoolsArtifactregistryV1File": {
      "type": "object",
      "id": "GoogleDevtoolsArtifactregistryV1File",
      "properties": {
        "hashes": {
          "type": "array",
          "items": {
            "$ref": "Hash"
          },
          "description": "The hashes of the file content."
        },
        "owner": {
          "description": "The name of the Package or Version that owns this file, if any.",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time when the File was created.",
          "format": "google-datetime"
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64",
          "description": "The size of the File in bytes."
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time when the File was last updated.",
          "format": "google-datetime",
          "readOnly": true
        },
        "fetchTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The time when the last attempt to refresh the file's data was made. Only set when the repository is remote.",
          "format": "google-datetime"
        },
        "name": {
          "type": "string",
          "description": "The name of the file, for example: \"projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt\". If the file ID part contains slashes, they are escaped."
        }
      },
      "description": "Files store content that is potentially associated with Packages or Versions."
    },
    "UploadKfpArtifactMetadata": {
      "properties": {},
      "id": "UploadKfpArtifactMetadata",
      "description": "The operation metadata for uploading KFP artifacts.",
      "type": "object"
    },
    "UploadYumArtifactRequest": {
      "properties": {},
      "id": "UploadYumArtifactRequest",
      "description": "The request to upload an artifact.",
      "type": "object"
    },
    "RemoteRepositoryConfig": {
      "properties": {
        "dockerRepository": {
          "description": "Specific settings for a Docker remote repository.",
          "$ref": "DockerRepository"
        },
        "mavenRepository": {
          "description": "Specific settings for a Maven remote repository.",
          "$ref": "MavenRepository"
        },
        "pythonRepository": {
          "$ref": "PythonRepository",
          "description": "Specific settings for a Python remote repository."
        },
        "description": {
          "type": "string",
          "description": "The description of the remote source."
        },
        "npmRepository": {
          "description": "Specific settings for an Npm remote repository.",
          "$ref": "NpmRepository"
        }
      },
      "id": "RemoteRepositoryConfig",
      "description": "Remote repository configuration.",
      "type": "object"
    },
    "ListTagsResponse": {
      "properties": {
        "tags": {
          "description": "The tags returned.",
          "type": "array",
          "items": {
            "$ref": "Tag"
          }
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of tags, or empty if there are no more tags to return.",
          "type": "string"
        }
      },
      "description": "The response from listing tags.",
      "id": "ListTagsResponse",
      "type": "object"
    },
    "ImportGoogetArtifactsGcsSource": {
      "properties": {
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        },
        "uris": {
          "type": "array",
          "description": "Cloud Storage paths URI (e.g., `gs://my_bucket/my_object`).",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "ImportGoogetArtifactsGcsSource",
      "type": "object",
      "description": "Google Cloud Storage location where the artifacts currently reside."
    },
    "ListVersionsResponse": {
      "description": "The response from listing versions.",
      "type": "object",
      "properties": {
        "versions": {
          "items": {
            "$ref": "Version"
          },
          "description": "The versions returned.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of versions, or empty if there are no more versions to return."
        }
      },
      "id": "ListVersionsResponse"
    },
    "UploadGoModuleRequest": {
      "description": "The request to upload a Go module.",
      "type": "object",
      "properties": {},
      "id": "UploadGoModuleRequest"
    },
    "SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "id": "SetIamPolicyRequest",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      },
      "type": "object"
    },
    "ImportAptArtifactsRequest": {
      "type": "object",
      "id": "ImportAptArtifactsRequest",
      "description": "The request to import new apt artifacts.",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "ImportAptArtifactsGcsSource"
        }
      }
    },
    "TestIamPermissionsRequest": {
      "type": "object",
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "properties": {
        "permissions": {
          "type": "array",
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ImportYumArtifactsRequest": {
      "properties": {
        "gcsSource": {
          "$ref": "ImportYumArtifactsGcsSource",
          "description": "Google Cloud Storage location where input content is located."
        }
      },
      "id": "ImportYumArtifactsRequest",
      "description": "The request to import new yum artifacts.",
      "type": "object"
    },
    "ImportAptArtifactsGcsSource": {
      "id": "ImportAptArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "properties": {
        "uris": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Cloud Storage paths URI (e.g., gs://my_bucket//my_object)."
        },
        "useWildcards": {
          "type": "boolean",
          "description": "Supports URI wildcards for matching multiple objects from a single URI."
        }
      },
      "type": "object"
    },
    "ImportAptArtifactsResponse": {
      "type": "object",
      "id": "ImportAptArtifactsResponse",
      "properties": {
        "aptArtifacts": {
          "items": {
            "$ref": "AptArtifact"
          },
          "type": "array",
          "description": "The Apt artifacts imported."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "ImportAptArtifactsErrorInfo"
          },
          "description": "Detailed error info for packages that were not imported."
        }
      },
      "description": "The response message from importing APT artifacts."
    },
    "MavenRepositoryConfig": {
      "description": "MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.",
      "type": "object",
      "id": "MavenRepositoryConfig",
      "properties": {
        "versionPolicy": {
          "enum": [
            "VERSION_POLICY_UNSPECIFIED",
            "RELEASE",
            "SNAPSHOT"
          ],
          "description": "Version policy defines the versions that the registry will accept.",
          "type": "string",
          "enumDescriptions": [
            "VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.",
            "RELEASE - repository will accept only Release versions.",
            "SNAPSHOT - repository will accept only Snapshot versions."
          ]
        },
        "allowSnapshotOverwrites": {
          "description": "The repository with this flag will allow publishing the same snapshot versions.",
          "type": "boolean"
        }
      }
    },
    "ListFilesResponse": {
      "id": "ListFilesResponse",
      "description": "The response from listing files.",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of files, or empty if there are no more files to return.",
          "type": "string"
        },
        "files": {
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1File"
          },
          "description": "The files returned.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "Tag": {
      "type": "object",
      "id": "Tag",
      "description": "Tags point to a version and represent an alternative name that can be used to access the version.",
      "properties": {
        "version": {
          "type": "string",
          "description": "The name of the version the tag refers to, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811\" If the package or version ID parts contain slashes, the slashes are escaped."
        },
        "name": {
          "type": "string",
          "description": "The name of the tag, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1\". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\\-._~:@], anything else must be URL encoded."
        }
      }
    },
    "ImportGoogetArtifactsErrorInfo": {
      "type": "object",
      "description": "Error information explaining why a package was not imported.",
      "id": "ImportGoogetArtifactsErrorInfo",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportGoogetArtifactsGcsSource"
        },
        "error": {
          "$ref": "Status",
          "description": "The detailed error status."
        }
      }
    },
    "ListPackagesResponse": {
      "description": "The response from listing packages.",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of packages, or empty if there are no more packages to return.",
          "type": "string"
        },
        "packages": {
          "type": "array",
          "description": "The packages returned.",
          "items": {
            "$ref": "Package"
          }
        }
      },
      "id": "ListPackagesResponse",
      "type": "object"
    },
    "Hash": {
      "description": "A hash of file content.",
      "properties": {
        "type": {
          "enum": [
            "HASH_TYPE_UNSPECIFIED",
            "SHA256",
            "MD5"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "SHA256 hash.",
            "MD5 hash."
          ],
          "description": "The algorithm used to compute the hash value.",
          "type": "string"
        },
        "value": {
          "format": "byte",
          "type": "string",
          "description": "The hash value."
        }
      },
      "type": "object",
      "id": "Hash"
    },
    "MavenArtifact": {
      "type": "object",
      "properties": {
        "pomUri": {
          "description": "Required. URL to access the pom file of the artifact. Example: us-west4-maven.pkg.dev/test-project/test-repo/com/google/guava/guava/31.0/guava-31.0.pom",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time the artifact was updated.",
          "type": "string"
        },
        "name": {
          "description": "Required. registry_location, project_id, repository_name and maven_artifact forms a unique artifact For example, \"projects/test-project/locations/us-west4/repositories/test-repo/mavenArtifacts/ com.google.guava:guava:31.0-jre\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"com.google.guava:guava:31.0-jre\" is the maven artifact.",
          "type": "string"
        },
        "artifactId": {
          "type": "string",
          "description": "Artifact ID for the artifact."
        },
        "version": {
          "type": "string",
          "description": "Version of this artifact."
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time the artifact was created.",
          "type": "string"
        },
        "groupId": {
          "type": "string",
          "description": "Group ID for the artifact. Example: com.google.guava"
        }
      },
      "description": "MavenArtifact represents a maven artifact.",
      "id": "MavenArtifact"
    },
    "UploadGoModuleMetadata": {
      "id": "UploadGoModuleMetadata",
      "description": "The operation metadata for uploading go modules.",
      "type": "object",
      "properties": {}
    },
    "TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
        }
      },
      "type": "object"
    },
    "ImportAptArtifactsMetadata": {
      "type": "object",
      "properties": {},
      "id": "ImportAptArtifactsMetadata",
      "description": "The operation metadata for importing artifacts."
    },
    "Package": {
      "id": "Package",
      "type": "object",
      "description": "Packages are named collections of versions.",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the package was created."
        },
        "displayName": {
          "description": "The display name of the package.",
          "type": "string"
        },
        "name": {
          "description": "The name of the package, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes, the slashes are escaped.",
          "type": "string"
        },
        "updateTime": {
          "description": "The time when the package was last updated. This includes publishing a new version of the package.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          }
        }
      }
    },
    "UploadGoogetArtifactMetadata": {
      "description": "The operation metadata for uploading artifacts.",
      "type": "object",
      "properties": {},
      "id": "UploadGoogetArtifactMetadata"
    },
    "GoogetArtifact": {
      "type": "object",
      "description": "A detailed representation of a GooGet artifact.",
      "properties": {
        "architecture": {
          "type": "string",
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true
        },
        "packageName": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The GooGet package name of the artifact."
        },
        "name": {
          "type": "string",
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "readOnly": true
        }
      },
      "id": "GoogetArtifact"
    },
    "UploadAptArtifactMetadata": {
      "description": "The operation metadata for uploading artifacts.",
      "id": "UploadAptArtifactMetadata",
      "type": "object",
      "properties": {}
    },
    "UploadKfpArtifactRequest": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the package version."
        },
        "tags": {
          "type": "array",
          "description": "Tags to be created with the version.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The request to upload an artifact.",
      "type": "object",
      "id": "UploadKfpArtifactRequest"
    },
    "BatchDeleteVersionsMetadata": {
      "properties": {
        "failedVersions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The versions the operation failed to delete."
        }
      },
      "description": "The metadata of an LRO from deleting multiple versions.",
      "type": "object",
      "id": "BatchDeleteVersionsMetadata"
    },
    "ImportGoogetArtifactsResponse": {
      "id": "ImportGoogetArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "type": "object",
      "properties": {
        "googetArtifacts": {
          "type": "array",
          "description": "The GooGet artifacts updated.",
          "items": {
            "$ref": "GoogetArtifact"
          }
        },
        "errors": {
          "items": {
            "$ref": "ImportGoogetArtifactsErrorInfo"
          },
          "type": "array",
          "description": "Detailed error info for packages that were not imported."
        }
      }
    },
    "ImportYumArtifactsResponse": {
      "description": "The response message from importing YUM artifacts.",
      "properties": {
        "yumArtifacts": {
          "description": "The yum artifacts imported.",
          "items": {
            "$ref": "YumArtifact"
          },
          "type": "array"
        },
        "errors": {
          "description": "Detailed error info for packages that were not imported.",
          "type": "array",
          "items": {
            "$ref": "ImportYumArtifactsErrorInfo"
          }
        }
      },
      "id": "ImportYumArtifactsResponse",
      "type": "object"
    },
    "OperationMetadata": {
      "type": "object",
      "id": "OperationMetadata",
      "description": "Metadata type for longrunning-operations, currently empty.",
      "properties": {}
    },
    "DockerRepositoryConfig": {
      "properties": {
        "immutableTags": {
          "type": "boolean",
          "description": "The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created."
        }
      },
      "id": "DockerRepositoryConfig",
      "type": "object",
      "description": "DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type."
    },
    "YumArtifact": {
      "id": "YumArtifact",
      "description": "A detailed representation of a Yum artifact.",
      "properties": {
        "packageType": {
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package (.rpm).",
            "Source package (.srpm)."
          ],
          "description": "Output only. An artifact is a binary or source package.",
          "readOnly": true
        },
        "architecture": {
          "readOnly": true,
          "description": "Output only. Operating system architecture of the artifact.",
          "type": "string"
        },
        "name": {
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "type": "string",
          "readOnly": true
        },
        "packageName": {
          "type": "string",
          "description": "Output only. The yum package name of the artifact.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "PythonRepository": {
      "properties": {
        "publicRepository": {
          "description": "One of the publicly available Python repositories supported by Artifact Registry.",
          "enumDescriptions": [
            "Unspecified repository.",
            "PyPI."
          ],
          "type": "string",
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "PYPI"
          ]
        }
      },
      "id": "PythonRepository",
      "description": "Configuration for a Python remote repository.",
      "type": "object"
    },
    "ImportGoogetArtifactsMetadata": {
      "type": "object",
      "id": "ImportGoogetArtifactsMetadata",
      "properties": {},
      "description": "The operation metadata for importing artifacts."
    },
    "DockerRepository": {
      "description": "Configuration for a Docker remote repository.",
      "properties": {
        "publicRepository": {
          "description": "One of the publicly available Docker repositories supported by Artifact Registry.",
          "type": "string",
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "DOCKER_HUB"
          ],
          "enumDescriptions": [
            "Unspecified repository.",
            "Docker Hub."
          ]
        }
      },
      "type": "object",
      "id": "DockerRepository"
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations.",
      "properties": {
        "locations": {
          "items": {
            "$ref": "Location"
          },
          "type": "array",
          "description": "A list of locations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UploadAptArtifactMediaResponse": {
      "id": "UploadAptArtifactMediaResponse",
      "description": "The response to upload an artifact.",
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "Operation to be returned to the user."
        }
      },
      "type": "object"
    },
    "PythonPackage": {
      "type": "object",
      "description": "PythonPackage represents a python artifact.",
      "properties": {
        "version": {
          "type": "string",
          "description": "Version of this package."
        },
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and python_package forms a unique package name:`projects//locations//repository//pythonPackages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/ python_package:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and python_package:1.0.0\" is the python package."
        },
        "createTime": {
          "type": "string",
          "description": "Output only. Time the package was created.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "uri": {
          "description": "Required. URL to access the package. Example: us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. Time the package was updated.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "packageName": {
          "description": "Package for the artifact.",
          "type": "string"
        }
      },
      "id": "PythonPackage"
    },
    "ImportYumArtifactsGcsSource": {
      "id": "ImportYumArtifactsGcsSource",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs://my_bucket//my_object).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "NpmPackage": {
      "description": "NpmPackage represents an npm artifact.",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. Time the package was created.",
          "type": "string",
          "readOnly": true
        },
        "version": {
          "description": "Version of this package.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and npm_package forms a unique package For example, \"projects/test-project/locations/us-west4/repositories/test-repo/npmPackages/ npm_test:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and npm_test:1.0.0\" is the npm package."
        },
        "updateTime": {
          "description": "Output only. Time the package was updated.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "packageName": {
          "type": "string",
          "description": "Package for the artifact."
        },
        "tags": {
          "description": "Tags attached to this package.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "NpmPackage"
    },
    "Binding": {
      "type": "object",
      "id": "Binding",
      "description": "Associates `members`, or principals, with a `role`.",
      "properties": {
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "role": {
          "type": "string",
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        }
      }
    },
    "UploadAptArtifactResponse": {
      "properties": {
        "aptArtifacts": {
          "items": {
            "$ref": "AptArtifact"
          },
          "type": "array",
          "description": "The Apt artifacts updated."
        }
      },
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "id": "UploadAptArtifactResponse"
    },
    "NpmRepository": {
      "properties": {
        "publicRepository": {
          "type": "string",
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "NPMJS"
          ],
          "enumDescriptions": [
            "Unspecified repository.",
            "npmjs."
          ],
          "description": "One of the publicly available Npm repositories supported by Artifact Registry."
        }
      },
      "id": "NpmRepository",
      "description": "Configuration for a Npm remote repository.",
      "type": "object"
    },
    "UploadGoogetArtifactMediaResponse": {
      "type": "object",
      "description": "The response to upload an artifact.",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      },
      "id": "UploadGoogetArtifactMediaResponse"
    }
  },
  "batchPath": "batch",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "protocol": "rest",
  "documentationLink": "https://cloud.google.com/artifacts/docs/",
  "servicePath": "",
  "version_module": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        },
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud services and see the email address of your Google Account"
        }
      }
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "mtlsRootUrl": "https://artifactregistry.mtls.googleapis.com/",
  "baseUrl": "https://artifactregistry.googleapis.com/",
  "version": "v1",
  "revision": "20230622"
}

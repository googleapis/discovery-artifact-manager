{
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "The name of the operation resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "id": "artifactregistry.projects.locations.operations.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "response": {
                    "$ref": "Operation"
                  }
                }
              }
            },
            "repositories": {
              "resources": {
                "aptArtifacts": {
                  "methods": {
                    "import": {
                      "path": "v1/{+parent}/aptArtifacts:import",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "location": "path",
                          "type": "string",
                          "required": true
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import",
                      "httpMethod": "POST",
                      "request": {
                        "$ref": "ImportAptArtifactsRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "id": "artifactregistry.projects.locations.repositories.aptArtifacts.import",
                      "description": "Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
                      "parameterOrder": [
                        "parent"
                      ]
                    },
                    "upload": {
                      "id": "artifactregistry.projects.locations.repositories.aptArtifacts.upload",
                      "description": "Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "request": {
                        "$ref": "UploadAptArtifactRequest"
                      },
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "UploadAptArtifactMediaResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create",
                      "mediaUpload": {
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/aptArtifacts:create",
                            "multipart": true
                          }
                        },
                        "accept": [
                          "*/*"
                        ]
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+parent}/aptArtifacts:create",
                      "parameters": {
                        "parent": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "supportsMediaUpload": true
                    }
                  }
                },
                "yumArtifacts": {
                  "methods": {
                    "import": {
                      "description": "Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
                      "httpMethod": "POST",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import",
                      "request": {
                        "$ref": "ImportYumArtifactsRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1/{+parent}/yumArtifacts:import",
                      "id": "artifactregistry.projects.locations.repositories.yumArtifacts.import"
                    },
                    "upload": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.yumArtifacts.upload",
                      "supportsMediaUpload": true,
                      "description": "Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "required": true,
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "request": {
                        "$ref": "UploadYumArtifactRequest"
                      },
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "multipart": true,
                            "path": "/upload/v1/{+parent}/yumArtifacts:create"
                          }
                        }
                      },
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "UploadYumArtifactMediaResponse"
                      },
                      "path": "v1/{+parent}/yumArtifacts:create",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create"
                    }
                  }
                },
                "dockerImages": {
                  "methods": {
                    "get": {
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/dockerImages/[^/]+$",
                          "description": "Required. The name of the docker images.",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "DockerImage"
                      },
                      "path": "v1/{+name}",
                      "description": "Gets a docker image.",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.dockerImages.get",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages/{dockerImagesId}"
                    },
                    "list": {
                      "parameters": {
                        "pageSize": {
                          "description": "The maximum number of artifacts to return.",
                          "type": "integer",
                          "location": "query",
                          "format": "int32"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "type": "string"
                        },
                        "parent": {
                          "required": true,
                          "description": "Required. The name of the parent resource whose docker images will be listed.",
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        },
                        "orderBy": {
                          "description": "The field to order the results by.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "ListDockerImagesResponse"
                      },
                      "httpMethod": "GET",
                      "id": "artifactregistry.projects.locations.repositories.dockerImages.list",
                      "description": "Lists docker images.",
                      "path": "v1/{+parent}/dockerImages",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages"
                    }
                  }
                },
                "files": {
                  "methods": {
                    "list": {
                      "response": {
                        "$ref": "ListFilesResponse"
                      },
                      "id": "artifactregistry.projects.locations.repositories.files.list",
                      "description": "Lists files.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        },
                        "orderBy": {
                          "location": "query",
                          "type": "string",
                          "description": "The field to order the results by."
                        },
                        "filter": {
                          "location": "query",
                          "description": "An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are: * `name` * `owner` An example of using a filter: * `name=\"projects/p1/locations/us-central1/repositories/repo1/files/a/b/*\"` --\u003e Files with an ID starting with \"a/b/\". * `owner=\"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0\"` --\u003e Files owned by the version `1.0` in package `pkg1`.",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The maximum number of files to return.",
                          "location": "query",
                          "format": "int32",
                          "type": "integer"
                        },
                        "parent": {
                          "type": "string",
                          "required": true,
                          "description": "Required. The name of the repository whose files will be listed. For example: \"projects/p1/locations/us-central1/repositories/repo1",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path"
                        }
                      },
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files",
                      "path": "v1/{+parent}/files"
                    },
                    "get": {
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "path": "v1/{+name}",
                      "description": "Gets a file.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "GoogleDevtoolsArtifactregistryV1File"
                      },
                      "parameters": {
                        "name": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/files/.*$",
                          "description": "Required. The name of the file to retrieve.",
                          "location": "path",
                          "required": true
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.files.get"
                    }
                  }
                },
                "googetArtifacts": {
                  "methods": {
                    "upload": {
                      "description": "Directly uploads a GooGet artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
                      "response": {
                        "$ref": "UploadGoogetArtifactMediaResponse"
                      },
                      "path": "v1/{+parent}/googetArtifacts:create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "parent": {
                          "description": "The name of the parent resource where the artifacts will be uploaded.",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path"
                        }
                      },
                      "mediaUpload": {
                        "accept": [
                          "*/*"
                        ],
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/googetArtifacts:create",
                            "multipart": true
                          }
                        }
                      },
                      "id": "artifactregistry.projects.locations.repositories.googetArtifacts.upload",
                      "request": {
                        "$ref": "UploadGoogetArtifactRequest"
                      },
                      "httpMethod": "POST",
                      "supportsMediaUpload": true,
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:create"
                    },
                    "import": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:import",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "description": "The name of the parent resource where the artifacts will be imported.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true
                        }
                      },
                      "request": {
                        "$ref": "ImportGoogetArtifactsRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "Operation"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Imports GooGet artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
                      "id": "artifactregistry.projects.locations.repositories.googetArtifacts.import",
                      "path": "v1/{+parent}/googetArtifacts:import"
                    }
                  }
                },
                "goModules": {
                  "methods": {
                    "upload": {
                      "response": {
                        "$ref": "UploadGoModuleMediaResponse"
                      },
                      "mediaUpload": {
                        "protocols": {
                          "simple": {
                            "multipart": true,
                            "path": "/upload/v1/{+parent}/goModules:create"
                          }
                        },
                        "accept": [
                          "*/*"
                        ]
                      },
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path",
                          "description": "The resource name of the repository where the Go module will be uploaded.",
                          "required": true
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/goModules:create",
                      "description": "Directly uploads a Go module. The returned Operation will complete once the Go module is uploaded. Package, Version, and File resources are created based on the uploaded Go module.",
                      "supportsMediaUpload": true,
                      "path": "v1/{+parent}/goModules:create",
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "artifactregistry.projects.locations.repositories.goModules.upload",
                      "request": {
                        "$ref": "UploadGoModuleRequest"
                      }
                    }
                  }
                },
                "npmPackages": {
                  "methods": {
                    "list": {
                      "description": "Lists npm packages.",
                      "id": "artifactregistry.projects.locations.repositories.npmPackages.list",
                      "path": "v1/{+parent}/npmPackages",
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "type": "integer",
                          "location": "query",
                          "description": "The maximum number of artifacts to return."
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "location": "query"
                        },
                        "parent": {
                          "description": "Required. The name of the parent resource whose npm packages will be listed.",
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages",
                      "response": {
                        "$ref": "ListNpmPackagesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "httpMethod": "GET"
                    },
                    "get": {
                      "id": "artifactregistry.projects.locations.repositories.npmPackages.get",
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Gets a npm package.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "NpmPackage"
                      },
                      "path": "v1/{+name}",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the npm package.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/npmPackages/[^/]+$",
                          "type": "string",
                          "location": "path",
                          "required": true
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages/{npmPackagesId}"
                    }
                  }
                },
                "kfpArtifacts": {
                  "methods": {
                    "upload": {
                      "description": "Directly uploads a KFP artifact. The returned Operation will complete once the resource is uploaded. Package, Version, and File resources will be created based on the uploaded artifact. Uploaded artifacts that conflict with existing resources will be overwritten.",
                      "supportsMediaUpload": true,
                      "mediaUpload": {
                        "protocols": {
                          "simple": {
                            "path": "/upload/v1/{+parent}/kfpArtifacts:create",
                            "multipart": true
                          }
                        },
                        "accept": [
                          "*/*"
                        ]
                      },
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+parent}/kfpArtifacts:create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "UploadKfpArtifactMediaResponse"
                      },
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "required": true,
                          "description": "The resource name of the repository where the KFP artifact will be uploaded.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "request": {
                        "$ref": "UploadKfpArtifactRequest"
                      },
                      "id": "artifactregistry.projects.locations.repositories.kfpArtifacts.upload",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/kfpArtifacts:create"
                    }
                  }
                },
                "pythonPackages": {
                  "methods": {
                    "list": {
                      "path": "v1/{+parent}/pythonPackages",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages",
                      "description": "Lists python packages.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "pageSize": {
                          "type": "integer",
                          "description": "The maximum number of artifacts to return.",
                          "location": "query",
                          "format": "int32"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "The next_page_token value returned from a previous list request, if any.",
                          "type": "string"
                        },
                        "parent": {
                          "required": true,
                          "description": "Required. The name of the parent resource whose python packages will be listed.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "response": {
                        "$ref": "ListPythonPackagesResponse"
                      },
                      "id": "artifactregistry.projects.locations.repositories.pythonPackages.list",
                      "httpMethod": "GET"
                    },
                    "get": {
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the python package.",
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/pythonPackages/[^/]+$"
                        }
                      },
                      "response": {
                        "$ref": "PythonPackage"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages/{pythonPackagesId}",
                      "id": "artifactregistry.projects.locations.repositories.pythonPackages.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "path": "v1/{+name}",
                      "httpMethod": "GET",
                      "description": "Gets a python package.",
                      "parameterOrder": [
                        "name"
                      ]
                    }
                  }
                },
                "mavenArtifacts": {
                  "methods": {
                    "get": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Gets a maven artifact.",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the maven artifact.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/mavenArtifacts/[^/]+$",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "path": "v1/{+name}",
                      "response": {
                        "$ref": "MavenArtifact"
                      },
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts/{mavenArtifactsId}",
                      "id": "artifactregistry.projects.locations.repositories.mavenArtifacts.get"
                    },
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "path": "v1/{+parent}/mavenArtifacts",
                      "response": {
                        "$ref": "ListMavenArtifactsResponse"
                      },
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        },
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "Required. The name of the parent resource whose maven artifacts will be listed.",
                          "required": true
                        },
                        "pageSize": {
                          "format": "int32",
                          "type": "integer",
                          "location": "query",
                          "description": "The maximum number of artifacts to return."
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "description": "Lists maven artifacts.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts",
                      "id": "artifactregistry.projects.locations.repositories.mavenArtifacts.list"
                    }
                  }
                },
                "packages": {
                  "methods": {
                    "list": {
                      "description": "Lists packages.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1/{+parent}/packages",
                      "parameters": {
                        "pageSize": {
                          "description": "The maximum number of packages to return. Maximum page size is 1,000.",
                          "type": "integer",
                          "format": "int32",
                          "location": "query"
                        },
                        "parent": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "description": "Required. The name of the parent resource whose packages will be listed.",
                          "location": "path"
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "The next_page_token value returned from a previous list request, if any."
                        }
                      },
                      "response": {
                        "$ref": "ListPackagesResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages",
                      "id": "artifactregistry.projects.locations.repositories.packages.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "httpMethod": "GET"
                    },
                    "get": {
                      "description": "Gets a package.",
                      "httpMethod": "GET",
                      "id": "artifactregistry.projects.locations.repositories.packages.get",
                      "path": "v1/{+name}",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                          "description": "Required. The name of the package to retrieve.",
                          "type": "string",
                          "required": true
                        }
                      },
                      "response": {
                        "$ref": "Package"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-platform.read-only"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}",
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "delete": {
                      "path": "v1/{+name}",
                      "httpMethod": "DELETE",
                      "id": "artifactregistry.projects.locations.repositories.packages.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "type": "string",
                          "description": "Required. The name of the package to delete.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                          "location": "path"
                        }
                      },
                      "description": "Deletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Operation"
                      }
                    }
                  },
                  "resources": {
                    "tags": {
                      "methods": {
                        "create": {
                          "description": "Creates a tag.",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.create",
                          "httpMethod": "POST",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "path": "v1/{+parent}/tags",
                          "request": {
                            "$ref": "Tag"
                          },
                          "parameters": {
                            "tagId": {
                              "type": "string",
                              "description": "The tag id to use for this repository.",
                              "location": "query"
                            },
                            "parent": {
                              "type": "string",
                              "location": "path",
                              "description": "The name of the parent resource where the tag will be created.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                              "required": true
                            }
                          },
                          "response": {
                            "$ref": "Tag"
                          },
                          "parameterOrder": [
                            "parent"
                          ]
                        },
                        "list": {
                          "response": {
                            "$ref": "ListTagsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "path": "v1/{+parent}/tags",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
                          "httpMethod": "GET",
                          "description": "Lists tags.",
                          "parameters": {
                            "pageSize": {
                              "type": "integer",
                              "format": "int32",
                              "location": "query",
                              "description": "The maximum number of tags to return. Maximum page size is 10,000."
                            },
                            "parent": {
                              "location": "path",
                              "required": true,
                              "type": "string",
                              "description": "The name of the parent package whose tags will be listed. For example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$"
                            },
                            "pageToken": {
                              "type": "string",
                              "location": "query",
                              "description": "The next_page_token value returned from a previous list request, if any."
                            },
                            "filter": {
                              "type": "string",
                              "location": "query",
                              "description": "An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are: * `version` An example of using a filter: * `version=\"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0\"` --\u003e Tags that are applied to the version `1.0` in package `pkg1`."
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.list"
                        },
                        "delete": {
                          "parameters": {
                            "name": {
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "required": true,
                              "description": "The name of the tag to delete.",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.delete",
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "DELETE",
                          "description": "Deletes a tag.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "path": "v1/{+name}"
                        },
                        "patch": {
                          "parameterOrder": [
                            "name"
                          ],
                          "description": "Updates a tag.",
                          "path": "v1/{+name}",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.patch",
                          "httpMethod": "PATCH",
                          "request": {
                            "$ref": "Tag"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "name": {
                              "location": "path",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "description": "The name of the tag, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1\". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\\-._~:@], anything else must be URL encoded.",
                              "type": "string"
                            },
                            "updateMask": {
                              "type": "string",
                              "format": "google-fieldmask",
                              "location": "query",
                              "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask"
                            }
                          },
                          "response": {
                            "$ref": "Tag"
                          }
                        },
                        "get": {
                          "httpMethod": "GET",
                          "description": "Gets a tag.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
                          "id": "artifactregistry.projects.locations.repositories.packages.tags.get",
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/tags/[^/]+$",
                              "type": "string",
                              "description": "The name of the tag to retrieve.",
                              "location": "path",
                              "required": true
                            }
                          },
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "Tag"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ]
                        }
                      }
                    },
                    "versions": {
                      "methods": {
                        "delete": {
                          "httpMethod": "DELETE",
                          "path": "v1/{+name}",
                          "parameters": {
                            "name": {
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$",
                              "location": "path",
                              "required": true,
                              "description": "The name of the version to delete."
                            },
                            "force": {
                              "type": "boolean",
                              "description": "By default, a version that is tagged may not be deleted. If force=true, the version and any tags pointing to the version are deleted.",
                              "location": "query"
                            }
                          },
                          "description": "Deletes a version and all of its content. The returned operation will complete once the version has been deleted.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
                          "response": {
                            "$ref": "Operation"
                          },
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.delete",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "name"
                          ]
                        },
                        "list": {
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.list",
                          "parameters": {
                            "pageSize": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The maximum number of versions to return. Maximum page size is 1,000.",
                              "location": "query"
                            },
                            "view": {
                              "enumDescriptions": [
                                "The default / unset value. The API will default to the BASIC view.",
                                "Includes basic information about the version, but not any related tags.",
                                "Include everything."
                              ],
                              "description": "The view that should be returned in the response.",
                              "type": "string",
                              "enum": [
                                "VERSION_VIEW_UNSPECIFIED",
                                "BASIC",
                                "FULL"
                              ],
                              "location": "query"
                            },
                            "pageToken": {
                              "type": "string",
                              "location": "query",
                              "description": "The next_page_token value returned from a previous list request, if any."
                            },
                            "orderBy": {
                              "type": "string",
                              "location": "query",
                              "description": "Optional. The field to order the results by."
                            },
                            "parent": {
                              "required": true,
                              "description": "The name of the parent resource whose versions will be listed.",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                              "location": "path"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ],
                          "path": "v1/{+parent}/versions",
                          "httpMethod": "GET",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions",
                          "description": "Lists versions.",
                          "response": {
                            "$ref": "ListVersionsResponse"
                          },
                          "parameterOrder": [
                            "parent"
                          ]
                        },
                        "get": {
                          "description": "Gets a version",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.get",
                          "httpMethod": "GET",
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "Version"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+/versions/[^/]+$",
                              "description": "The name of the version to retrieve.",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "view": {
                              "enumDescriptions": [
                                "The default / unset value. The API will default to the BASIC view.",
                                "Includes basic information about the version, but not any related tags.",
                                "Include everything."
                              ],
                              "type": "string",
                              "location": "query",
                              "description": "The view that should be returned in the response.",
                              "enum": [
                                "VERSION_VIEW_UNSPECIFIED",
                                "BASIC",
                                "FULL"
                              ]
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloud-platform.read-only"
                          ]
                        },
                        "batchDelete": {
                          "response": {
                            "$ref": "Operation"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions:batchDelete",
                          "parameters": {
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/packages/[^/]+$",
                              "required": true,
                              "location": "path",
                              "description": "The name of the repository holding all requested versions.",
                              "type": "string"
                            }
                          },
                          "path": "v1/{+parent}/versions:batchDelete",
                          "httpMethod": "POST",
                          "request": {
                            "$ref": "BatchDeleteVersionsRequest"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "artifactregistry.projects.locations.repositories.packages.versions.batchDelete",
                          "description": "Deletes multiple versions across a repository. The returned operation will complete once the versions have been deleted.",
                          "parameterOrder": [
                            "parent"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "methods": {
                "list": {
                  "parameters": {
                    "pageSize": {
                      "format": "int32",
                      "location": "query",
                      "type": "integer",
                      "description": "The maximum number of repositories to return. Maximum page size is 1,000."
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous list request, if any.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "location": "path",
                      "description": "Required. The name of the parent resource whose repositories will be listed.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string"
                    }
                  },
                  "description": "Lists repositories.",
                  "response": {
                    "$ref": "ListRepositoriesResponse"
                  },
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/repositories",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "id": "artifactregistry.projects.locations.repositories.list"
                },
                "patch": {
                  "request": {
                    "$ref": "Repository"
                  },
                  "response": {
                    "$ref": "Repository"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\".",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "path": "v1/{+name}",
                  "httpMethod": "PATCH",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "artifactregistry.projects.locations.repositories.patch",
                  "description": "Updates a repository."
                },
                "create": {
                  "id": "artifactregistry.projects.locations.repositories.create",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "path": "v1/{+parent}/repositories",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. The name of the parent resource where the repository will be created."
                    },
                    "repositoryId": {
                      "description": "The repository id to use for this repository.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "Repository"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories"
                },
                "get": {
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "Required. The name of the repository to retrieve."
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Gets a repository.",
                  "response": {
                    "$ref": "Repository"
                  },
                  "httpMethod": "GET",
                  "id": "artifactregistry.projects.locations.repositories.get"
                },
                "getIamPolicy": {
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true,
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    },
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "description": "Gets the IAM policy for a given resource.",
                  "response": {
                    "$ref": "Policy"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy",
                  "path": "v1/{+resource}:getIamPolicy",
                  "id": "artifactregistry.projects.locations.repositories.getIamPolicy",
                  "httpMethod": "GET"
                },
                "delete": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "id": "artifactregistry.projects.locations.repositories.delete",
                  "description": "Deletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a google.protobuf.Empty response.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. The name of the repository to delete.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                    }
                  },
                  "httpMethod": "DELETE",
                  "path": "v1/{+name}"
                },
                "setIamPolicy": {
                  "description": "Updates the IAM policy for a given resource.",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "path": "v1/{+resource}:setIamPolicy",
                  "id": "artifactregistry.projects.locations.repositories.setIamPolicy",
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy"
                },
                "testIamPermissions": {
                  "id": "artifactregistry.projects.locations.repositories.testIamPermissions",
                  "parameters": {
                    "resource": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions",
                  "description": "Tests if the caller has a list of permissions on a resource.",
                  "httpMethod": "POST",
                  "path": "v1/{+resource}:testIamPermissions",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-platform.read-only"
                  ],
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  }
                }
              }
            }
          },
          "methods": {
            "getVpcscConfig": {
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/locations/[^/]+/vpcscConfig$",
                  "description": "Required. The name of the VPCSCConfig resource."
                }
              },
              "description": "Retrieves the VPCSC Config for the Project.",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/vpcscConfig",
              "response": {
                "$ref": "VPCSCConfig"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "id": "artifactregistry.projects.locations.getVpcscConfig"
            },
            "get": {
              "response": {
                "$ref": "Location"
              },
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "description": "Gets information about a location.",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "description": "Resource name for the location.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "id": "artifactregistry.projects.locations.get"
            },
            "updateVpcscConfig": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "VPCSCConfig"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "artifactregistry.projects.locations.updateVpcscConfig",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/vpcscConfig",
              "response": {
                "$ref": "VPCSCConfig"
              },
              "path": "v1/{+name}",
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "required": true,
                  "description": "The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set",
                  "type": "string",
                  "pattern": "^projects/[^/]+/locations/[^/]+/vpcscConfig$",
                  "location": "path"
                },
                "updateMask": {
                  "type": "string",
                  "description": "Field mask to support partial updates.",
                  "location": "query",
                  "format": "google-fieldmask"
                }
              },
              "description": "Updates the VPCSC Config for the Project."
            },
            "list": {
              "id": "artifactregistry.projects.locations.list",
              "parameters": {
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "location": "query",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                },
                "name": {
                  "required": true,
                  "type": "string",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                },
                "pageSize": {
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "location": "query",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "path": "v1/{+name}/locations",
              "flatPath": "v1/projects/{projectsId}/locations",
              "parameterOrder": [
                "name"
              ],
              "description": "Lists information about the supported locations for this service.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-platform.read-only"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "httpMethod": "GET"
            }
          }
        }
      },
      "methods": {
        "getProjectSettings": {
          "id": "artifactregistry.projects.getProjectSettings",
          "response": {
            "$ref": "ProjectSettings"
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only"
          ],
          "flatPath": "v1/projects/{projectsId}/projectSettings",
          "description": "Retrieves the Settings for the Project.",
          "parameters": {
            "name": {
              "required": true,
              "description": "Required. The name of the projectSettings resource.",
              "location": "path",
              "pattern": "^projects/[^/]+/projectSettings$",
              "type": "string"
            }
          },
          "path": "v1/{+name}"
        },
        "updateProjectSettings": {
          "id": "artifactregistry.projects.updateProjectSettings",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "ProjectSettings"
          },
          "flatPath": "v1/projects/{projectsId}/projectSettings",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v1/{+name}",
          "response": {
            "$ref": "ProjectSettings"
          },
          "description": "Updates the Settings for the Project.",
          "parameters": {
            "name": {
              "type": "string",
              "description": "The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set",
              "required": true,
              "location": "path",
              "pattern": "^projects/[^/]+/projectSettings$"
            },
            "updateMask": {
              "format": "google-fieldmask",
              "description": "Field mask to support partial updates.",
              "type": "string",
              "location": "query"
            }
          },
          "parameterOrder": [
            "name"
          ]
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "ownerDomain": "google.com",
  "batchPath": "batch",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "baseUrl": "https://artifactregistry.googleapis.com/",
  "kind": "discovery#restDescription",
  "servicePath": "",
  "ownerName": "Google",
  "mtlsRootUrl": "https://artifactregistry.mtls.googleapis.com/",
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    }
  },
  "protocol": "rest",
  "version_module": true,
  "documentationLink": "https://cloud.google.com/artifacts/docs/",
  "canonicalName": "Artifact Registry",
  "id": "artifactregistry:v1",
  "name": "artifactregistry",
  "schemas": {
    "ListRepositoriesResponse": {
      "type": "object",
      "id": "ListRepositoriesResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of repositories, or empty if there are no more repositories to return."
        },
        "repositories": {
          "description": "The repositories returned.",
          "type": "array",
          "items": {
            "$ref": "Repository"
          }
        }
      },
      "description": "The response from listing repositories."
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      }
    },
    "VirtualRepositoryConfig": {
      "type": "object",
      "description": "Virtual repository configuration.",
      "properties": {
        "upstreamPolicies": {
          "description": "Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.",
          "type": "array",
          "items": {
            "$ref": "UpstreamPolicy"
          }
        }
      },
      "id": "VirtualRepositoryConfig"
    },
    "UploadAptArtifactRequest": {
      "properties": {},
      "type": "object",
      "description": "The request to upload an artifact.",
      "id": "UploadAptArtifactRequest"
    },
    "Package": {
      "id": "Package",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name of the package."
        },
        "name": {
          "description": "The name of the package, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes, the slashes are escaped.",
          "type": "string"
        },
        "updateTime": {
          "description": "The time when the package was last updated. This includes publishing a new version of the package.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "type": "string",
          "description": "The time when the package was created.",
          "format": "google-datetime"
        }
      },
      "description": "Packages are named collections of versions.",
      "type": "object"
    },
    "UploadGoModuleMediaResponse": {
      "id": "UploadGoModuleMediaResponse",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      },
      "description": "The response to upload a Go module.",
      "type": "object"
    },
    "VPCSCConfig": {
      "description": "The Artifact Registry VPC SC config that apply to a Project.",
      "properties": {
        "vpcscPolicy": {
          "enum": [
            "VPCSC_POLICY_UNSPECIFIED",
            "DENY",
            "ALLOW"
          ],
          "type": "string",
          "enumDescriptions": [
            "VPCSC_POLICY_UNSPECIFIED - the VPS SC policy is not defined. When VPS SC policy is not defined - the Service will use the default behavior (VPCSC_DENY).",
            "VPCSC_DENY - repository will block the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter.",
            "VPCSC_ALLOW - repository will allow the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter."
          ],
          "description": "The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny)."
        },
        "name": {
          "type": "string",
          "description": "The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set"
        }
      },
      "type": "object",
      "id": "VPCSCConfig"
    },
    "MavenArtifact": {
      "properties": {
        "version": {
          "type": "string",
          "description": "Version of this artifact."
        },
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time the artifact was created."
        },
        "updateTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time the artifact was updated."
        },
        "artifactId": {
          "description": "Artifact ID for the artifact.",
          "type": "string"
        },
        "name": {
          "description": "Required. registry_location, project_id, repository_name and maven_artifact forms a unique artifact For example, \"projects/test-project/locations/us-west4/repositories/test-repo/mavenArtifacts/ com.google.guava:guava:31.0-jre\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"com.google.guava:guava:31.0-jre\" is the maven artifact.",
          "type": "string"
        },
        "pomUri": {
          "description": "Required. URL to access the pom file of the artifact. Example: us-west4-maven.pkg.dev/test-project/test-repo/com/google/guava/guava/31.0/guava-31.0.pom",
          "type": "string"
        },
        "groupId": {
          "type": "string",
          "description": "Group ID for the artifact. Example: com.google.guava"
        }
      },
      "type": "object",
      "description": "MavenArtifact represents a maven artifact.",
      "id": "MavenArtifact"
    },
    "UploadYumArtifactResponse": {
      "properties": {
        "yumArtifacts": {
          "type": "array",
          "description": "The Yum artifacts updated.",
          "items": {
            "$ref": "YumArtifact"
          }
        }
      },
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "id": "UploadYumArtifactResponse"
    },
    "UploadAptArtifactMetadata": {
      "id": "UploadAptArtifactMetadata",
      "properties": {},
      "description": "The operation metadata for uploading artifacts.",
      "type": "object"
    },
    "Hash": {
      "description": "A hash of file content.",
      "id": "Hash",
      "type": "object",
      "properties": {
        "value": {
          "format": "byte",
          "type": "string",
          "description": "The hash value."
        },
        "type": {
          "enum": [
            "HASH_TYPE_UNSPECIFIED",
            "SHA256",
            "MD5"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "SHA256 hash.",
            "MD5 hash."
          ],
          "description": "The algorithm used to compute the hash value."
        }
      }
    },
    "ImportAptArtifactsResponse": {
      "description": "The response message from importing APT artifacts.",
      "properties": {
        "errors": {
          "items": {
            "$ref": "ImportAptArtifactsErrorInfo"
          },
          "description": "Detailed error info for packages that were not imported.",
          "type": "array"
        },
        "aptArtifacts": {
          "description": "The Apt artifacts imported.",
          "type": "array",
          "items": {
            "$ref": "AptArtifact"
          }
        }
      },
      "type": "object",
      "id": "ImportAptArtifactsResponse"
    },
    "UploadGoogetArtifactRequest": {
      "properties": {},
      "type": "object",
      "id": "UploadGoogetArtifactRequest",
      "description": "The request to upload an artifact."
    },
    "ImportGoogetArtifactsGcsSource": {
      "id": "ImportGoogetArtifactsGcsSource",
      "type": "object",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., `gs://my_bucket/my_object`).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "type": "boolean",
          "description": "Supports URI wildcards for matching multiple objects from a single URI."
        }
      },
      "description": "Google Cloud Storage location where the artifacts currently reside."
    },
    "KfpArtifact": {
      "properties": {
        "name": {
          "readOnly": true,
          "description": "Output only. Resource name of the KFP artifact. Since users don't directly interact with this resource, the name will be derived from the associated version. For example, when version = \".../versions/sha256:abcdef...\", the name will be \".../kfpArtifacts/sha256:abcdef...\".",
          "type": "string"
        },
        "version": {
          "description": "The version associated with the KFP artifact. Must follow the Semantic Versioning standard.",
          "type": "string"
        }
      },
      "id": "KfpArtifact",
      "description": "A detailed representation of a KFP artifact.",
      "type": "object"
    },
    "ImportAptArtifactsRequest": {
      "id": "ImportAptArtifactsRequest",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "ImportAptArtifactsGcsSource"
        }
      },
      "type": "object",
      "description": "The request to import new apt artifacts."
    },
    "ImportYumArtifactsResponse": {
      "description": "The response message from importing YUM artifacts.",
      "id": "ImportYumArtifactsResponse",
      "properties": {
        "errors": {
          "items": {
            "$ref": "ImportYumArtifactsErrorInfo"
          },
          "type": "array",
          "description": "Detailed error info for packages that were not imported."
        },
        "yumArtifacts": {
          "description": "The yum artifacts imported.",
          "items": {
            "$ref": "YumArtifact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CleanupPolicy": {
      "type": "object",
      "properties": {
        "mostRecentVersions": {
          "$ref": "CleanupPolicyMostRecentVersions",
          "description": "Policy condition for retaining a minimum number of versions. May only be specified with a Keep action."
        },
        "action": {
          "enum": [
            "ACTION_UNSPECIFIED",
            "DELETE",
            "KEEP"
          ],
          "enumDescriptions": [
            "Action not specified.",
            "Delete action.",
            "Keep action."
          ],
          "type": "string",
          "description": "Policy action."
        },
        "condition": {
          "description": "Policy condition for matching versions.",
          "$ref": "CleanupPolicyCondition"
        },
        "id": {
          "description": "The user-provided ID of the cleanup policy.",
          "type": "string"
        }
      },
      "description": "Artifact policy configuration for repository cleanup policies.",
      "id": "CleanupPolicy"
    },
    "UploadKfpArtifactMediaResponse": {
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation that will be returned to the user.",
          "$ref": "Operation"
        }
      },
      "id": "UploadKfpArtifactMediaResponse",
      "description": "The response to upload an artifact."
    },
    "DockerRepositoryConfig": {
      "type": "object",
      "id": "DockerRepositoryConfig",
      "description": "DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.",
      "properties": {
        "immutableTags": {
          "type": "boolean",
          "description": "The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created."
        }
      }
    },
    "UploadYumArtifactRequest": {
      "type": "object",
      "description": "The request to upload an artifact.",
      "properties": {},
      "id": "UploadYumArtifactRequest"
    },
    "MavenRepository": {
      "properties": {
        "publicRepository": {
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "MAVEN_CENTRAL"
          ],
          "enumDescriptions": [
            "Unspecified repository.",
            "Maven Central."
          ],
          "type": "string",
          "description": "One of the publicly available Maven repositories supported by Artifact Registry."
        }
      },
      "type": "object",
      "description": "Configuration for a Maven remote repository.",
      "id": "MavenRepository"
    },
    "CleanupPolicyCondition": {
      "properties": {
        "packageNamePrefixes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Match versions by package prefix. Applied on any prefix match."
        },
        "versionAge": {
          "type": "string",
          "description": "DEPRECATED: Use older_than.",
          "format": "google-duration",
          "deprecated": true
        },
        "tagState": {
          "enum": [
            "TAG_STATE_UNSPECIFIED",
            "TAGGED",
            "UNTAGGED",
            "ANY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Tag status not specified.",
            "Applies to tagged versions only.",
            "Applies to untagged versions only.",
            "Applies to all versions."
          ],
          "description": "Match versions by tag status."
        },
        "tagPrefixes": {
          "items": {
            "type": "string"
          },
          "description": "Match versions by tag prefix. Applied on any prefix match.",
          "type": "array"
        },
        "olderThan": {
          "type": "string",
          "description": "Match versions older than a duration.",
          "format": "google-duration"
        },
        "versionNamePrefixes": {
          "description": "Match versions by version name prefix. Applied on any prefix match.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newerThan": {
          "description": "Match versions newer than a duration.",
          "type": "string",
          "format": "google-duration"
        }
      },
      "id": "CleanupPolicyCondition",
      "type": "object",
      "description": "CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied."
    },
    "ImportYumArtifactsMetadata": {
      "id": "ImportYumArtifactsMetadata",
      "description": "The operation metadata for importing artifacts.",
      "properties": {},
      "type": "object"
    },
    "SetIamPolicyRequest": {
      "type": "object",
      "description": "Request message for `SetIamPolicy` method.",
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them."
        }
      },
      "id": "SetIamPolicyRequest"
    },
    "UploadGoogetArtifactResponse": {
      "properties": {
        "googetArtifacts": {
          "type": "array",
          "description": "The GooGet artifacts updated.",
          "items": {
            "$ref": "GoogetArtifact"
          }
        }
      },
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "type": "object",
      "id": "UploadGoogetArtifactResponse"
    },
    "YumRepository": {
      "id": "YumRepository",
      "properties": {
        "publicRepository": {
          "$ref": "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository",
          "description": "One of the publicly available Yum repositories supported by Artifact Registry."
        }
      },
      "type": "object",
      "description": "Configuration for a Yum remote repository."
    },
    "UploadGoogetArtifactMetadata": {
      "type": "object",
      "properties": {},
      "id": "UploadGoogetArtifactMetadata",
      "description": "The operation metadata for uploading artifacts."
    },
    "Operation": {
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      },
      "id": "Operation",
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "Repository": {
      "properties": {
        "sizeBytes": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.",
          "format": "int64"
        },
        "remoteRepositoryConfig": {
          "description": "Configuration specific for a Remote Repository.",
          "$ref": "RemoteRepositoryConfig"
        },
        "virtualRepositoryConfig": {
          "$ref": "VirtualRepositoryConfig",
          "description": "Configuration specific for a Virtual Repository."
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time when the repository was last updated.",
          "format": "google-datetime",
          "readOnly": true
        },
        "description": {
          "description": "The user-provided description of the repository.",
          "type": "string"
        },
        "format": {
          "description": "The format of packages that are stored in the repository.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified package format.",
            "Docker package format.",
            "Maven package format.",
            "NPM package format.",
            "APT package format.",
            "YUM package format.",
            "GooGet package format.",
            "Python package format.",
            "Kubeflow Pipelines package format.",
            "Go package format."
          ],
          "enum": [
            "FORMAT_UNSPECIFIED",
            "DOCKER",
            "MAVEN",
            "NPM",
            "APT",
            "YUM",
            "GOOGET",
            "PYTHON",
            "KFP",
            "GO"
          ]
        },
        "mode": {
          "description": "The mode of the repository.",
          "enum": [
            "MODE_UNSPECIFIED",
            "STANDARD_REPOSITORY",
            "VIRTUAL_REPOSITORY",
            "REMOTE_REPOSITORY"
          ],
          "enumDescriptions": [
            "Unspecified mode.",
            "A standard repository storing artifacts.",
            "A virtual repository to serve artifacts from one or more sources.",
            "A remote repository to serve artifacts from a remote source."
          ],
          "type": "string"
        },
        "cleanupPolicyDryRun": {
          "description": "Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.",
          "type": "boolean"
        },
        "labels": {
          "description": "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "description": "The name of the repository, for example: \"projects/p1/locations/us-central1/repositories/repo1\".",
          "type": "string"
        },
        "dockerConfig": {
          "description": "Docker repository config contains repository level configuration for the repositories of docker type.",
          "$ref": "DockerRepositoryConfig"
        },
        "cleanupPolicies": {
          "description": "Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.",
          "additionalProperties": {
            "$ref": "CleanupPolicy"
          },
          "type": "object"
        },
        "satisfiesPzs": {
          "description": "Output only. If set, the repository satisfies physical zone separation.",
          "readOnly": true,
          "type": "boolean"
        },
        "mavenConfig": {
          "description": "Maven repository config contains repository level configuration for the repositories of maven type.",
          "$ref": "MavenRepositoryConfig"
        },
        "kmsKeyName": {
          "type": "string",
          "description": "The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created."
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time when the repository was created.",
          "readOnly": true,
          "format": "google-datetime"
        }
      },
      "description": "A Repository for storing artifacts with a specific format.",
      "id": "Repository",
      "type": "object"
    },
    "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository": {
      "description": "Publicly available Yum repositories constructed from a common repository base and a custom repository path.",
      "properties": {
        "repositoryPath": {
          "description": "A custom field to define a path to a specific repository from the base.",
          "type": "string"
        },
        "repositoryBase": {
          "type": "string",
          "enum": [
            "REPOSITORY_BASE_UNSPECIFIED",
            "CENTOS",
            "CENTOS_DEBUG",
            "CENTOS_VAULT",
            "CENTOS_STREAM",
            "ROCKY",
            "EPEL"
          ],
          "description": "A common public repository base for Yum.",
          "enumDescriptions": [
            "Unspecified repository base.",
            "CentOS.",
            "CentOS Debug.",
            "CentOS Vault.",
            "CentOS Stream.",
            "Rocky.",
            "Fedora Extra Packages for Enterprise Linux (EPEL)."
          ]
        }
      },
      "type": "object",
      "id": "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository"
    },
    "ImportAptArtifactsGcsSource": {
      "type": "object",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "properties": {
        "uris": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Cloud Storage paths URI (e.g., gs://my_bucket//my_object)."
        },
        "useWildcards": {
          "type": "boolean",
          "description": "Supports URI wildcards for matching multiple objects from a single URI."
        }
      },
      "id": "ImportAptArtifactsGcsSource"
    },
    "ListLocationsResponse": {
      "type": "object",
      "description": "The response message for Locations.ListLocations.",
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Version": {
      "description": "The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes.",
      "id": "Version",
      "type": "object",
      "properties": {
        "relatedTags": {
          "items": {
            "$ref": "Tag"
          },
          "type": "array",
          "description": "Output only. A list of related tags. Will contain up to 100 tags that reference this version."
        },
        "metadata": {
          "description": "Output only. Repository-specific Metadata stored against this version. The fields returned are defined by the underlying repository-specific resource. Currently, the resources could be: DockerImage MavenArtifact",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "readOnly": true,
          "type": "object"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the version was last updated."
        },
        "createTime": {
          "description": "The time when the version was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the version, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1\". If the package or version ID parts contain slashes, the slashes are escaped."
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the version, as specified in its metadata."
        }
      }
    },
    "UploadYumArtifactMetadata": {
      "properties": {},
      "description": "The operation metadata for uploading artifacts.",
      "type": "object",
      "id": "UploadYumArtifactMetadata"
    },
    "TestIamPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse"
    },
    "Binding": {
      "description": "Associates `members`, or principals, with a `role`.",
      "properties": {
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        }
      },
      "id": "Binding",
      "type": "object"
    },
    "NpmRepository": {
      "description": "Configuration for a Npm remote repository.",
      "id": "NpmRepository",
      "type": "object",
      "properties": {
        "publicRepository": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified repository.",
            "npmjs."
          ],
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "NPMJS"
          ],
          "description": "One of the publicly available Npm repositories supported by Artifact Registry."
        }
      }
    },
    "UploadKfpArtifactMetadata": {
      "properties": {},
      "description": "The operation metadata for uploading KFP artifacts.",
      "type": "object",
      "id": "UploadKfpArtifactMetadata"
    },
    "PythonRepository": {
      "id": "PythonRepository",
      "type": "object",
      "properties": {
        "publicRepository": {
          "description": "One of the publicly available Python repositories supported by Artifact Registry.",
          "enumDescriptions": [
            "Unspecified repository.",
            "PyPI."
          ],
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "PYPI"
          ],
          "type": "string"
        }
      },
      "description": "Configuration for a Python remote repository."
    },
    "MavenRepositoryConfig": {
      "properties": {
        "versionPolicy": {
          "type": "string",
          "enumDescriptions": [
            "VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.",
            "RELEASE - repository will accept only Release versions.",
            "SNAPSHOT - repository will accept only Snapshot versions."
          ],
          "enum": [
            "VERSION_POLICY_UNSPECIFIED",
            "RELEASE",
            "SNAPSHOT"
          ],
          "description": "Version policy defines the versions that the registry will accept."
        },
        "allowSnapshotOverwrites": {
          "description": "The repository with this flag will allow publishing the same snapshot versions.",
          "type": "boolean"
        }
      },
      "description": "MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.",
      "id": "MavenRepositoryConfig",
      "type": "object"
    },
    "Location": {
      "type": "object",
      "id": "Location",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given location."
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        }
      },
      "description": "A resource that represents a Google Cloud location."
    },
    "NpmPackage": {
      "description": "NpmPackage represents an npm artifact.",
      "type": "object",
      "id": "NpmPackage",
      "properties": {
        "createTime": {
          "description": "Output only. Time the package was created.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. Time the package was updated.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "packageName": {
          "type": "string",
          "description": "Package for the artifact."
        },
        "version": {
          "type": "string",
          "description": "Version of this package."
        },
        "tags": {
          "description": "Tags attached to this package.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Required. registry_location, project_id, repository_name and npm_package forms a unique package For example, \"projects/test-project/locations/us-west4/repositories/test-repo/npmPackages/ npm_test:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and npm_test:1.0.0\" is the npm package.",
          "type": "string"
        }
      }
    },
    "ListMavenArtifactsResponse": {
      "type": "object",
      "id": "ListMavenArtifactsResponse",
      "description": "The response from listing maven artifacts.",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.",
          "type": "string"
        },
        "mavenArtifacts": {
          "type": "array",
          "items": {
            "$ref": "MavenArtifact"
          },
          "description": "The maven artifacts returned."
        }
      }
    },
    "ImportGoogetArtifactsResponse": {
      "id": "ImportGoogetArtifactsResponse",
      "description": "The response message from importing artifacts.",
      "properties": {
        "errors": {
          "items": {
            "$ref": "ImportGoogetArtifactsErrorInfo"
          },
          "description": "Detailed error info for packages that were not imported.",
          "type": "array"
        },
        "googetArtifacts": {
          "description": "The GooGet artifacts updated.",
          "items": {
            "$ref": "GoogetArtifact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "properties": {
        "version": {
          "type": "integer",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32"
        },
        "bindings": {
          "items": {
            "$ref": "Binding"
          },
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array"
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "Policy",
      "type": "object"
    },
    "CleanupPolicyMostRecentVersions": {
      "type": "object",
      "description": "CleanupPolicyMostRecentVersions is an alternate condition of a CleanupPolicy for retaining a minimum number of versions.",
      "properties": {
        "packageNamePrefixes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of package name prefixes that will apply this rule."
        },
        "keepCount": {
          "type": "integer",
          "description": "Minimum number of versions to keep.",
          "format": "int32"
        }
      },
      "id": "CleanupPolicyMostRecentVersions"
    },
    "GoogleDevtoolsArtifactregistryV1File": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the file, for example: \"projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt\". If the file ID part contains slashes, they are escaped."
        },
        "fetchTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time when the last attempt to refresh the file's data was made. Only set when the repository is remote."
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time when the File was last updated.",
          "readOnly": true
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64",
          "description": "The size of the File in bytes."
        },
        "hashes": {
          "items": {
            "$ref": "Hash"
          },
          "type": "array",
          "description": "The hashes of the file content."
        },
        "owner": {
          "type": "string",
          "description": "The name of the Package or Version that owns this file, if any."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time when the File was created.",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "GoogleDevtoolsArtifactregistryV1File",
      "description": "Files store content that is potentially associated with Packages or Versions."
    },
    "UploadYumArtifactMediaResponse": {
      "type": "object",
      "id": "UploadYumArtifactMediaResponse",
      "properties": {
        "operation": {
          "description": "Operation to be returned to the user.",
          "$ref": "Operation"
        }
      },
      "description": "The response to upload an artifact."
    },
    "ListTagsResponse": {
      "description": "The response from listing tags.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of tags, or empty if there are no more tags to return."
        },
        "tags": {
          "description": "The tags returned.",
          "items": {
            "$ref": "Tag"
          },
          "type": "array"
        }
      },
      "id": "ListTagsResponse",
      "type": "object"
    },
    "UploadGoModuleRequest": {
      "id": "UploadGoModuleRequest",
      "properties": {},
      "type": "object",
      "description": "The request to upload a Go module."
    },
    "ImportGoogetArtifactsMetadata": {
      "type": "object",
      "id": "ImportGoogetArtifactsMetadata",
      "properties": {},
      "description": "The operation metadata for importing artifacts."
    },
    "ListPackagesResponse": {
      "type": "object",
      "description": "The response from listing packages.",
      "id": "ListPackagesResponse",
      "properties": {
        "packages": {
          "description": "The packages returned.",
          "items": {
            "$ref": "Package"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of packages, or empty if there are no more packages to return."
        }
      }
    },
    "Empty": {
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty",
      "properties": {}
    },
    "UpstreamPolicy": {
      "id": "UpstreamPolicy",
      "type": "object",
      "properties": {
        "priority": {
          "description": "Entries with a greater priority value take precedence in the pull order.",
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "description": "A reference to the repository resource, for example: \"projects/p1/locations/us-central1/repositories/repo1\".",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The user-provided ID of the upstream policy."
        }
      },
      "description": "Artifact policy configuration for the repository contents."
    },
    "TestIamPermissionsRequest": {
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array"
        }
      },
      "type": "object",
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method."
    },
    "ImportGoogetArtifactsRequest": {
      "id": "ImportGoogetArtifactsRequest",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "ImportGoogetArtifactsGcsSource"
        }
      },
      "description": "The request to import new googet artifacts.",
      "type": "object"
    },
    "ImportGoogetArtifactsErrorInfo": {
      "description": "Error information explaining why a package was not imported.",
      "properties": {
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        },
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportGoogetArtifactsGcsSource"
        }
      },
      "type": "object",
      "id": "ImportGoogetArtifactsErrorInfo"
    },
    "AptArtifact": {
      "properties": {
        "controlFile": {
          "format": "byte",
          "type": "string",
          "description": "Output only. Contents of the artifact's control metadata file.",
          "readOnly": true
        },
        "packageName": {
          "readOnly": true,
          "description": "Output only. The Apt package name of the artifact.",
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "type": "string"
        },
        "component": {
          "description": "Output only. Repository component of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "architecture": {
          "type": "string",
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true
        },
        "packageType": {
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ],
          "type": "string",
          "readOnly": true,
          "description": "Output only. An artifact is a binary or source package.",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package.",
            "Source package."
          ]
        }
      },
      "type": "object",
      "id": "AptArtifact",
      "description": "A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html"
    },
    "ListDockerImagesResponse": {
      "type": "object",
      "description": "The response from listing docker images.",
      "id": "ListDockerImagesResponse",
      "properties": {
        "dockerImages": {
          "description": "The docker images returned.",
          "type": "array",
          "items": {
            "$ref": "DockerImage"
          }
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.",
          "type": "string"
        }
      }
    },
    "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository": {
      "id": "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository",
      "description": "Publicly available Apt repositories constructed from a common repository base and a custom repository path.",
      "properties": {
        "repositoryBase": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified repository base.",
            "Debian.",
            "Ubuntu LTS/Pro."
          ],
          "description": "A common public repository base for Apt.",
          "enum": [
            "REPOSITORY_BASE_UNSPECIFIED",
            "DEBIAN",
            "UBUNTU"
          ]
        },
        "repositoryPath": {
          "description": "A custom field to define a path to a specific repository from the base.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UploadGoogetArtifactMediaResponse": {
      "id": "UploadGoogetArtifactMediaResponse",
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "Operation to be returned to the user."
        }
      },
      "description": "The response to upload an artifact."
    },
    "AptRepository": {
      "properties": {
        "publicRepository": {
          "$ref": "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository",
          "description": "One of the publicly available Apt repositories supported by Artifact Registry."
        }
      },
      "id": "AptRepository",
      "type": "object",
      "description": "Configuration for an Apt remote repository."
    },
    "ImportAptArtifactsErrorInfo": {
      "id": "ImportAptArtifactsErrorInfo",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportAptArtifactsGcsSource"
        },
        "error": {
          "$ref": "Status",
          "description": "The detailed error status."
        }
      },
      "description": "Error information explaining why a package was not imported.",
      "type": "object"
    },
    "ImportYumArtifactsRequest": {
      "description": "The request to import new yum artifacts.",
      "properties": {
        "gcsSource": {
          "$ref": "ImportYumArtifactsGcsSource",
          "description": "Google Cloud Storage location where input content is located."
        }
      },
      "id": "ImportYumArtifactsRequest",
      "type": "object"
    },
    "DockerRepository": {
      "description": "Configuration for a Docker remote repository.",
      "type": "object",
      "properties": {
        "publicRepository": {
          "description": "One of the publicly available Docker repositories supported by Artifact Registry.",
          "enumDescriptions": [
            "Unspecified repository.",
            "Docker Hub."
          ],
          "enum": [
            "PUBLIC_REPOSITORY_UNSPECIFIED",
            "DOCKER_HUB"
          ],
          "type": "string"
        }
      },
      "id": "DockerRepository"
    },
    "ListPythonPackagesResponse": {
      "description": "The response from listing python packages.",
      "properties": {
        "nextPageToken": {
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.",
          "type": "string"
        },
        "pythonPackages": {
          "type": "array",
          "description": "The python packages returned.",
          "items": {
            "$ref": "PythonPackage"
          }
        }
      },
      "id": "ListPythonPackagesResponse",
      "type": "object"
    },
    "YumArtifact": {
      "id": "YumArtifact",
      "description": "A detailed representation of a Yum artifact.",
      "properties": {
        "packageName": {
          "type": "string",
          "description": "Output only. The yum package name of the artifact.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The Artifact Registry resource name of the artifact."
        },
        "architecture": {
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true,
          "type": "string"
        },
        "packageType": {
          "description": "Output only. An artifact is a binary or source package.",
          "type": "string",
          "enumDescriptions": [
            "Package type is not specified.",
            "Binary package (.rpm).",
            "Source package (.srpm)."
          ],
          "readOnly": true,
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "BINARY",
            "SOURCE"
          ]
        }
      },
      "type": "object"
    },
    "ImportYumArtifactsGcsSource": {
      "id": "ImportYumArtifactsGcsSource",
      "type": "object",
      "description": "Google Cloud Storage location where the artifacts currently reside.",
      "properties": {
        "uris": {
          "description": "Cloud Storage paths URI (e.g., gs://my_bucket//my_object).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useWildcards": {
          "description": "Supports URI wildcards for matching multiple objects from a single URI.",
          "type": "boolean"
        }
      }
    },
    "Tag": {
      "description": "Tags point to a version and represent an alternative name that can be used to access the version.",
      "type": "object",
      "id": "Tag",
      "properties": {
        "version": {
          "type": "string",
          "description": "The name of the version the tag refers to, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811\" If the package or version ID parts contain slashes, the slashes are escaped."
        },
        "name": {
          "description": "The name of the tag, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1\". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\\-._~:@], anything else must be URL encoded.",
          "type": "string"
        }
      }
    },
    "ListVersionsResponse": {
      "type": "object",
      "properties": {
        "versions": {
          "description": "The versions returned.",
          "type": "array",
          "items": {
            "$ref": "Version"
          }
        },
        "nextPageToken": {
          "description": "The token to retrieve the next page of versions, or empty if there are no more versions to return.",
          "type": "string"
        }
      },
      "id": "ListVersionsResponse",
      "description": "The response from listing versions."
    },
    "GoogetArtifact": {
      "id": "GoogetArtifact",
      "description": "A detailed representation of a GooGet artifact.",
      "type": "object",
      "properties": {
        "name": {
          "readOnly": true,
          "description": "Output only. The Artifact Registry resource name of the artifact.",
          "type": "string"
        },
        "architecture": {
          "type": "string",
          "description": "Output only. Operating system architecture of the artifact.",
          "readOnly": true
        },
        "packageName": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The GooGet package name of the artifact."
        }
      }
    },
    "OperationMetadata": {
      "properties": {},
      "type": "object",
      "description": "Metadata type for longrunning-operations, currently empty.",
      "id": "OperationMetadata"
    },
    "ImportAptArtifactsMetadata": {
      "type": "object",
      "id": "ImportAptArtifactsMetadata",
      "description": "The operation metadata for importing artifacts.",
      "properties": {}
    },
    "UploadKfpArtifactRequest": {
      "properties": {
        "description": {
          "description": "Description of the package version.",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "description": "Tags to be created with the version.",
          "type": "array"
        }
      },
      "id": "UploadKfpArtifactRequest",
      "description": "The request to upload an artifact.",
      "type": "object"
    },
    "GoModule": {
      "properties": {
        "updateTime": {
          "description": "Output only. The time when the Go module is updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "version": {
          "description": "The version of the Go module. Must be a valid canonical version as defined in https://go.dev/ref/mod#glos-canonical-version.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name of a Go module."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time when the Go module is created.",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "GoModule",
      "description": "GoModule represents a Go module."
    },
    "RemoteRepositoryConfig": {
      "properties": {
        "npmRepository": {
          "$ref": "NpmRepository",
          "description": "Specific settings for an Npm remote repository."
        },
        "pythonRepository": {
          "description": "Specific settings for a Python remote repository.",
          "$ref": "PythonRepository"
        },
        "dockerRepository": {
          "description": "Specific settings for a Docker remote repository.",
          "$ref": "DockerRepository"
        },
        "yumRepository": {
          "$ref": "YumRepository",
          "description": "Specific settings for a Yum remote repository."
        },
        "aptRepository": {
          "description": "Specific settings for an Apt remote repository.",
          "$ref": "AptRepository"
        },
        "mavenRepository": {
          "$ref": "MavenRepository",
          "description": "Specific settings for a Maven remote repository."
        },
        "description": {
          "type": "string",
          "description": "The description of the remote source."
        }
      },
      "description": "Remote repository configuration.",
      "type": "object",
      "id": "RemoteRepositoryConfig"
    },
    "ImportYumArtifactsErrorInfo": {
      "id": "ImportYumArtifactsErrorInfo",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location requested.",
          "$ref": "ImportYumArtifactsGcsSource"
        },
        "error": {
          "description": "The detailed error status.",
          "$ref": "Status"
        }
      },
      "description": "Error information explaining why a package was not imported."
    },
    "DockerImage": {
      "properties": {
        "tags": {
          "type": "array",
          "description": "Tags attached to this image.",
          "items": {
            "type": "string"
          }
        },
        "buildTime": {
          "format": "google-datetime",
          "description": "The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest."
        },
        "imageSizeBytes": {
          "description": "Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.",
          "type": "string",
          "format": "int64"
        },
        "uri": {
          "description": "Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
          "type": "string"
        },
        "updateTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time when the docker image was last updated."
        },
        "mediaType": {
          "type": "string",
          "description": "Media type of this image, e.g. \"application/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource."
        },
        "uploadTime": {
          "description": "Time the image was uploaded.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime",
      "type": "object",
      "id": "DockerImage"
    },
    "UploadAptArtifactResponse": {
      "description": "The response of the completed artifact upload operation. This response is contained in the Operation and available to users.",
      "properties": {
        "aptArtifacts": {
          "items": {
            "$ref": "AptArtifact"
          },
          "description": "The Apt artifacts updated.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "UploadAptArtifactResponse"
    },
    "UploadGoModuleMetadata": {
      "description": "The operation metadata for uploading go modules.",
      "properties": {},
      "id": "UploadGoModuleMetadata",
      "type": "object"
    },
    "ListNpmPackagesResponse": {
      "id": "ListNpmPackagesResponse",
      "description": "The response from listing npm packages.",
      "properties": {
        "npmPackages": {
          "items": {
            "$ref": "NpmPackage"
          },
          "type": "array",
          "description": "The npm packages returned."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return."
        }
      },
      "type": "object"
    },
    "BatchDeleteVersionsMetadata": {
      "properties": {
        "failedVersions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The versions the operation failed to delete."
        }
      },
      "id": "BatchDeleteVersionsMetadata",
      "description": "The metadata of an LRO from deleting multiple versions.",
      "type": "object"
    },
    "Expr": {
      "properties": {
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        },
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        }
      },
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object"
    },
    "UploadAptArtifactMediaResponse": {
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "Operation to be returned to the user."
        }
      },
      "type": "object",
      "id": "UploadAptArtifactMediaResponse",
      "description": "The response to upload an artifact."
    },
    "PythonPackage": {
      "properties": {
        "name": {
          "description": "Required. registry_location, project_id, repository_name and python_package forms a unique package name:`projects//locations//repository//pythonPackages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/ python_package:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and python_package:1.0.0\" is the python package.",
          "type": "string"
        },
        "updateTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time the package was updated."
        },
        "version": {
          "description": "Version of this package.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Time the package was created.",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "Required. URL to access the package. Example: us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz"
        },
        "packageName": {
          "description": "Package for the artifact.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "PythonPackage represents a python artifact.",
      "id": "PythonPackage"
    },
    "ListFilesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The token to retrieve the next page of files, or empty if there are no more files to return."
        },
        "files": {
          "description": "The files returned.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsArtifactregistryV1File"
          }
        }
      },
      "type": "object",
      "id": "ListFilesResponse",
      "description": "The response from listing files."
    },
    "ProjectSettings": {
      "description": "The Artifact Registry settings that apply to a Project.",
      "id": "ProjectSettings",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set"
        },
        "legacyRedirectionState": {
          "enumDeprecated": [
            false,
            false,
            false,
            true
          ],
          "description": "The redirection state of the legacy repositories in this project.",
          "enumDescriptions": [
            "No redirection status has been set.",
            "Redirection is disabled.",
            "Redirection is enabled.",
            "Redirection is enabled, and has been finalized so cannot be reverted."
          ],
          "type": "string",
          "enum": [
            "REDIRECTION_STATE_UNSPECIFIED",
            "REDIRECTION_FROM_GCR_IO_DISABLED",
            "REDIRECTION_FROM_GCR_IO_ENABLED",
            "REDIRECTION_FROM_GCR_IO_FINALIZED"
          ]
        }
      }
    },
    "BatchDeleteVersionsRequest": {
      "type": "object",
      "properties": {
        "validateOnly": {
          "type": "boolean",
          "description": "If true, the request is performed without deleting data, following AIP-163."
        },
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Required. The names of the versions to delete. A maximum of 10000 versions can be deleted in a batch."
        }
      },
      "id": "BatchDeleteVersionsRequest",
      "description": "The request to delete multiple versions across a repository."
    }
  },
  "title": "Artifact Registry API",
  "rootUrl": "https://artifactregistry.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud services and see the email address of your Google Account"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "basePath": "",
  "description": "Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.",
  "revision": "20230905",
  "version": "v1",
  "fullyEncodeReservedExpansion": true
}

{
  "version_module": true,
  "description": "Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.",
  "canonicalName": "Vision",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-vision": {
          "description": "Apply machine learning models to understand and label images"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "servicePath": "",
  "ownerName": "Google",
  "title": "Cloud Vision API",
  "version": "v1",
  "batchPath": "batch",
  "rootUrl": "https://vision.googleapis.com/",
  "discoveryVersion": "v1",
  "fullyEncodeReservedExpansion": true,
  "kind": "discovery#restDescription",
  "id": "vision:v1",
  "protocol": "rest",
  "resources": {
    "images": {
      "methods": {
        "asyncBatchAnnotate": {
          "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
          "request": {
            "$ref": "AsyncBatchAnnotateImagesRequest"
          },
          "flatPath": "v1/images:asyncBatchAnnotate",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "httpMethod": "POST",
          "path": "v1/images:asyncBatchAnnotate",
          "parameters": {},
          "id": "vision.images.asyncBatchAnnotate",
          "parameterOrder": [],
          "response": {
            "$ref": "Operation"
          }
        },
        "annotate": {
          "description": "Run image detection and annotation for a batch of images.",
          "flatPath": "v1/images:annotate",
          "request": {
            "$ref": "BatchAnnotateImagesRequest"
          },
          "parameters": {},
          "response": {
            "$ref": "BatchAnnotateImagesResponse"
          },
          "path": "v1/images:annotate",
          "parameterOrder": [],
          "id": "vision.images.annotate",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "httpMethod": "POST"
        }
      }
    },
    "operations": {
      "methods": {
        "cancel": {
          "parameters": {
            "name": {
              "description": "The name of the operation resource to be cancelled.",
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^operations/.*$"
            }
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Empty"
          },
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "parameterOrder": [
            "name"
          ],
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "flatPath": "v1/operations/{operationsId}:cancel",
          "path": "v1/{+name}:cancel",
          "id": "vision.operations.cancel"
        },
        "list": {
          "response": {
            "$ref": "ListOperationsResponse"
          },
          "path": "v1/{+name}",
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "location": "path",
              "type": "string",
              "pattern": "^operations$",
              "description": "The name of the operation's parent resource.",
              "required": true
            },
            "filter": {
              "type": "string",
              "location": "query",
              "description": "The standard list filter."
            },
            "pageSize": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "The standard list page size."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The standard list page token."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/operations",
          "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
          "id": "vision.operations.list"
        },
        "delete": {
          "httpMethod": "DELETE",
          "path": "v1/{+name}",
          "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
          "parameters": {
            "name": {
              "description": "The name of the operation resource to be deleted.",
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^operations/.*$"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "response": {
            "$ref": "Empty"
          },
          "flatPath": "v1/operations/{operationsId}",
          "id": "vision.operations.delete"
        },
        "get": {
          "parameters": {
            "name": {
              "description": "The name of the operation resource.",
              "required": true,
              "pattern": "^operations/[^/]+$",
              "location": "path",
              "type": "string"
            }
          },
          "path": "v1/{+name}",
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "id": "vision.operations.get",
          "response": {
            "$ref": "Operation"
          },
          "flatPath": "v1/operations/{operationsId}",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET"
        }
      }
    },
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "productSets": {
              "methods": {
                "list": {
                  "id": "vision.projects.locations.productSets.list",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "description": "Required. The project from which ProductSets should be listed. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "required": true
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The next_page_token returned from a previous List request, if any.",
                      "location": "query"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. Default 10, maximum 100.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    }
                  },
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets",
                  "description": "Lists ProductSets in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100, or less than 1.",
                  "path": "v1/{+parent}/productSets",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListProductSetsResponse"
                  }
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "id": "vision.projects.locations.productSets.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the ProductSet to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
                  "description": "Permanently deletes a ProductSet. Products and ReferenceImages in the ProductSet are not deleted. The actual image files are not deleted from Google Cloud Storage."
                },
                "patch": {
                  "response": {
                    "$ref": "ProductSet"
                  },
                  "request": {
                    "$ref": "ProductSet"
                  },
                  "parameters": {
                    "updateMask": {
                      "format": "google-fieldmask",
                      "description": "The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask path is `display_name`.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "required": true,
                      "description": "The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet."
                    }
                  },
                  "description": "Makes changes to a ProductSet resource. Only display_name can be updated currently. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but missing from the request or longer than 4096 characters.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
                  "path": "v1/{+name}",
                  "id": "vision.projects.locations.productSets.patch",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "PATCH"
                },
                "addProduct": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}:addProduct",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "vision.projects.locations.productSets.addProduct",
                  "path": "v1/{+name}:addProduct",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                      "location": "path"
                    }
                  },
                  "description": "Adds a Product to the specified ProductSet. If the Product is already present, no change is made. One Product can be added to at most 100 ProductSets. Possible errors: * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.",
                  "request": {
                    "$ref": "AddProductToProductSetRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "import": {
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets:import",
                  "description": "Asynchronous API that imports a list of reference images to specified product sets based on a list of image information. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress) `Operation.response` contains `ImportProductSetsResponse`. (results) The input source of this method is a csv file on Google Cloud Storage. For the format of the csv file please see ImportProductSetsGcsSource.csv_file_uri.",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "Required. The project in which the ProductSets should be imported. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "location": "path"
                    }
                  },
                  "id": "vision.projects.locations.productSets.import",
                  "request": {
                    "$ref": "ImportProductSetsRequest"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+parent}/productSets:import"
                },
                "removeProduct": {
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}:removeProduct",
                  "path": "v1/{+name}:removeProduct",
                  "description": "Removes a Product from the specified ProductSet.",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "RemoveProductFromProductSetRequest"
                  },
                  "id": "vision.projects.locations.productSets.removeProduct",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "location": "path",
                      "description": "Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                      "type": "string",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "create": {
                  "description": "Creates and returns a new ProductSet resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing, or is longer than 4096 characters.",
                  "response": {
                    "$ref": "ProductSet"
                  },
                  "parameters": {
                    "productSetId": {
                      "location": "query",
                      "type": "string",
                      "description": "A user-supplied resource id for this ProductSet. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`."
                    },
                    "parent": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path",
                      "description": "Required. The project in which the ProductSet should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`."
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "ProductSet"
                  },
                  "path": "v1/{+parent}/productSets",
                  "id": "vision.projects.locations.productSets.create",
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "get": {
                  "description": "Gets information associated with a ProductSet. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist.",
                  "path": "v1/{+name}",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ProductSet"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "id": "vision.projects.locations.productSets.get",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the ProductSet to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}"
                }
              },
              "resources": {
                "products": {
                  "methods": {
                    "list": {
                      "response": {
                        "$ref": "ListProductsInProductSetResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}/products",
                      "parameters": {
                        "pageToken": {
                          "description": "The next_page_token returned from a previous List request, if any.",
                          "type": "string",
                          "location": "query"
                        },
                        "name": {
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                          "description": "Required. The ProductSet resource for which to retrieve Products. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                          "required": true
                        },
                        "pageSize": {
                          "description": "The maximum number of items to return. Default 10, maximum 100.",
                          "location": "query",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "description": "Lists the Products in a ProductSet, in an unspecified order. If the ProductSet does not exist, the products field of the response will be empty. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.",
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "path": "v1/{+name}/products",
                      "httpMethod": "GET",
                      "id": "vision.projects.locations.productSets.products.list"
                    }
                  }
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "httpMethod": "GET",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "path": "v1/{+name}",
                  "id": "vision.projects.locations.operations.get"
                }
              }
            },
            "products": {
              "resources": {
                "referenceImages": {
                  "methods": {
                    "delete": {
                      "description": "Permanently deletes a reference image. The image metadata will be deleted right away, but search queries against ProductSets containing the image may still work until all related caches are refreshed. The actual image files are not deleted from Google Cloud Storage.",
                      "id": "vision.projects.locations.products.referenceImages.delete",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages/{referenceImagesId}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+/referenceImages/[^/]+$",
                          "description": "Required. The resource name of the reference image to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "httpMethod": "DELETE",
                      "path": "v1/{+name}",
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "list": {
                      "description": "Lists reference images. Possible errors: * Returns NOT_FOUND if the parent product does not exist. * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less than 1.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "httpMethod": "GET",
                      "id": "vision.projects.locations.products.referenceImages.list",
                      "path": "v1/{+parent}/referenceImages",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "A token identifying a page of results to be returned. This is the value of `nextPageToken` returned in a previous reference image list request. Defaults to the first page if not specified."
                        },
                        "parent": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Required. Resource name of the product containing the reference images. Format is `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$"
                        },
                        "pageSize": {
                          "description": "The maximum number of items to return. Default 10, maximum 100.",
                          "location": "query",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListReferenceImagesResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages"
                    },
                    "create": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages",
                      "id": "vision.projects.locations.products.referenceImages.create",
                      "parameters": {
                        "referenceImageId": {
                          "location": "query",
                          "type": "string",
                          "description": "A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`."
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Required. Resource name of the product in which to create the reference image. Format is `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`."
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ReferenceImage"
                      },
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "path": "v1/{+parent}/referenceImages",
                      "description": "Creates and returns a new ReferenceImage resource. The `bounding_poly` field is optional. If `bounding_poly` is not specified, the system will try to detect regions of interest in the image that are compatible with the product_category on the parent product. If it is specified, detection is ALWAYS skipped. The system converts polygons into non-rotated rectangles. Note that the pipeline will resize the image if the image resolution is too large to process (above 50MP). Possible errors: * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if the product does not exist. * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing compatible with the parent product's product_category is detected. * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.",
                      "request": {
                        "$ref": "ReferenceImage"
                      }
                    },
                    "get": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages/{referenceImagesId}",
                      "response": {
                        "$ref": "ReferenceImage"
                      },
                      "parameters": {
                        "name": {
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+/referenceImages/[^/]+$",
                          "description": "Required. The resource name of the ReferenceImage to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`.",
                          "required": true
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "path": "v1/{+name}",
                      "description": "Gets information associated with a ReferenceImage. Possible errors: * Returns NOT_FOUND if the specified image does not exist.",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "id": "vision.projects.locations.products.referenceImages.get"
                    }
                  }
                }
              },
              "methods": {
                "patch": {
                  "request": {
                    "$ref": "Product"
                  },
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
                  "parameters": {
                    "name": {
                      "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.",
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                      "required": true
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "location": "query",
                      "description": "The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask paths include `product_labels`, `display_name`, and `description`.",
                      "type": "string"
                    }
                  },
                  "id": "vision.projects.locations.products.patch",
                  "httpMethod": "PATCH",
                  "description": "Makes changes to a Product resource. Only the `display_name`, `description`, and `labels` fields can be updated right now. If labels are updated, the change will not be reflected in queries until the next index time. Possible errors: * Returns NOT_FOUND if the Product does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but is missing from the request or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is present in update_mask but is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is present in update_mask.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "response": {
                    "$ref": "Product"
                  }
                },
                "get": {
                  "response": {
                    "$ref": "Product"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the Product to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "description": "Gets information associated with a Product. Possible errors: * Returns NOT_FOUND if the Product does not exist.",
                  "httpMethod": "GET",
                  "id": "vision.projects.locations.products.get"
                },
                "delete": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "vision.projects.locations.products.delete",
                  "httpMethod": "DELETE",
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. Resource name of product to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                      "location": "path"
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
                  "description": "Permanently deletes a product and its reference images. Metadata of the product and all its images will be deleted right away, but search queries against ProductSets containing the product may still work until all related caches are refreshed."
                },
                "purge": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "PurgeProductsRequest"
                  },
                  "path": "v1/{+parent}/products:purge",
                  "id": "vision.projects.locations.products.purge",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "description": "Asynchronous API to delete all Products in a ProductSet or all Products that are in no ProductSet. If a Product is a member of the specified ProductSet in addition to other ProductSets, the Product will still be deleted. It is recommended to not delete the specified ProductSet until after this operation has completed. It is also recommended to not add any of the Products involved in the batch delete to a new ProductSet while this operation is running because those Products may still end up deleted. It's not possible to undo the PurgeProducts operation. Therefore, it is recommended to keep the csv files used in ImportProductSets (if that was how you originally built the Product Set) before starting PurgeProducts, in case you need to re-import the data after deletion. If the plan is to purge all of the Products from a ProductSet and then re-use the empty ProductSet to re-import new Products into the empty ProductSet, you must wait until the PurgeProducts operation has finished for that ProductSet. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress)",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products:purge",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "Required. The project and location in which the Products should be deleted. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "location": "path"
                    }
                  }
                },
                "create": {
                  "id": "vision.projects.locations.products.create",
                  "response": {
                    "$ref": "Product"
                  },
                  "description": "Creates and returns a new product resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is missing or invalid.",
                  "path": "v1/{+parent}/products",
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Product"
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project in which the Product should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    },
                    "productId": {
                      "location": "query",
                      "description": "A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ]
                },
                "list": {
                  "id": "vision.projects.locations.products.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/products",
                  "parameters": {
                    "pageSize": {
                      "type": "integer",
                      "description": "The maximum number of items to return. Default 10, maximum 100.",
                      "format": "int32",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "The next_page_token returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "required": true,
                      "type": "string",
                      "description": "Required. The project OR ProductSet from which Products should be listed. Format: `projects/PROJECT_ID/locations/LOC_ID`",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "description": "Lists products in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products",
                  "response": {
                    "$ref": "ListProductsResponse"
                  },
                  "httpMethod": "GET"
                }
              }
            },
            "files": {
              "methods": {
                "annotate": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "vision.projects.locations.files.annotate",
                  "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
                  "parameters": {
                    "parent": {
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "BatchAnnotateFilesResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/files:annotate",
                  "path": "v1/{+parent}/files:annotate",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "BatchAnnotateFilesRequest"
                  }
                },
                "asyncBatchAnnotate": {
                  "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "AsyncBatchAnnotateFilesRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+parent}/files:asyncBatchAnnotate",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/files:asyncBatchAnnotate",
                  "id": "vision.projects.locations.files.asyncBatchAnnotate",
                  "parameters": {
                    "parent": {
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  }
                }
              }
            },
            "images": {
              "methods": {
                "asyncBatchAnnotate": {
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                      "type": "string",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/images:asyncBatchAnnotate",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "AsyncBatchAnnotateImagesRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "path": "v1/{+parent}/images:asyncBatchAnnotate",
                  "id": "vision.projects.locations.images.asyncBatchAnnotate",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "annotate": {
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "description": "Run image detection and annotation for a batch of images.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/images:annotate",
                  "path": "v1/{+parent}/images:annotate",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "id": "vision.projects.locations.images.annotate",
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "BatchAnnotateImagesRequest"
                  },
                  "response": {
                    "$ref": "BatchAnnotateImagesResponse"
                  }
                }
              }
            }
          }
        },
        "images": {
          "methods": {
            "asyncBatchAnnotate": {
              "request": {
                "$ref": "AsyncBatchAnnotateImagesRequest"
              },
              "path": "v1/{+parent}/images:asyncBatchAnnotate",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
                }
              },
              "flatPath": "v1/projects/{projectsId}/images:asyncBatchAnnotate",
              "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
              "id": "vision.projects.images.asyncBatchAnnotate"
            },
            "annotate": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "response": {
                "$ref": "BatchAnnotateImagesResponse"
              },
              "description": "Run image detection and annotation for a batch of images.",
              "id": "vision.projects.images.annotate",
              "flatPath": "v1/projects/{projectsId}/images:annotate",
              "request": {
                "$ref": "BatchAnnotateImagesRequest"
              },
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
                }
              },
              "path": "v1/{+parent}/images:annotate",
              "httpMethod": "POST"
            }
          }
        },
        "operations": {
          "methods": {
            "get": {
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
              "id": "vision.projects.operations.get",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "description": "The name of the operation resource.",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "Operation"
              }
            }
          }
        },
        "files": {
          "methods": {
            "annotate": {
              "request": {
                "$ref": "BatchAnnotateFilesRequest"
              },
              "parameters": {
                "parent": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "flatPath": "v1/projects/{projectsId}/files:annotate",
              "response": {
                "$ref": "BatchAnnotateFilesResponse"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/files:annotate",
              "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
              "id": "vision.projects.files.annotate",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ]
            },
            "asyncBatchAnnotate": {
              "id": "vision.projects.files.asyncBatchAnnotate",
              "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
              "request": {
                "$ref": "AsyncBatchAnnotateFilesRequest"
              },
              "parameters": {
                "parent": {
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
                }
              },
              "path": "v1/{+parent}/files:asyncBatchAnnotate",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "parameterOrder": [
                "parent"
              ],
              "flatPath": "v1/projects/{projectsId}/files:asyncBatchAnnotate",
              "response": {
                "$ref": "Operation"
              }
            }
          }
        }
      }
    },
    "locations": {
      "resources": {
        "operations": {
          "methods": {
            "get": {
              "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^locations/[^/]+/operations/[^/]+$",
                  "description": "The name of the operation resource."
                }
              },
              "id": "vision.locations.operations.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "flatPath": "v1/locations/{locationsId}/operations/{operationsId}",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}"
            }
          }
        }
      }
    },
    "files": {
      "methods": {
        "annotate": {
          "parameterOrder": [],
          "path": "v1/files:annotate",
          "response": {
            "$ref": "BatchAnnotateFilesResponse"
          },
          "parameters": {},
          "id": "vision.files.annotate",
          "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
          "request": {
            "$ref": "BatchAnnotateFilesRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "httpMethod": "POST",
          "flatPath": "v1/files:annotate"
        },
        "asyncBatchAnnotate": {
          "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
          "response": {
            "$ref": "Operation"
          },
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "AsyncBatchAnnotateFilesRequest"
          },
          "flatPath": "v1/files:asyncBatchAnnotate",
          "id": "vision.files.asyncBatchAnnotate",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "path": "v1/files:asyncBatchAnnotate"
        }
      }
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "documentationLink": "https://cloud.google.com/vision/",
  "revision": "20220915",
  "ownerDomain": "google.com",
  "name": "vision",
  "schemas": {
    "BatchAnnotateFilesRequest": {
      "type": "object",
      "description": "A list of requests to annotate files using the BatchAnnotateFiles API.",
      "properties": {
        "requests": {
          "items": {
            "$ref": "AnnotateFileRequest"
          },
          "description": "Required. The list of file annotation requests. Right now we support only one AnnotateFileRequest in BatchAnnotateFilesRequest.",
          "type": "array"
        },
        "parent": {
          "type": "string",
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
        }
      },
      "id": "BatchAnnotateFilesRequest"
    },
    "OperationMetadata": {
      "type": "object",
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "id": "OperationMetadata",
      "properties": {
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the operation result was last updated."
        },
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "description": "Current state of the batch operation."
        },
        "createTime": {
          "description": "The time when the batch request was received.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1ColorInfo": {
      "properties": {
        "pixelFraction": {
          "type": "number",
          "format": "float",
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1]."
        },
        "color": {
          "description": "RGB components of the color.",
          "$ref": "Color"
        },
        "score": {
          "format": "float",
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "type": "number"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1ColorInfo",
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image."
    },
    "GoogleCloudVisionV1p4beta1OutputConfig": {
      "id": "GoogleCloudVisionV1p4beta1OutputConfig",
      "type": "object",
      "properties": {
        "batchSize": {
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.",
          "format": "int32",
          "type": "integer"
        },
        "gcsDestination": {
          "description": "The Google Cloud Storage location to write the output(s) to.",
          "$ref": "GoogleCloudVisionV1p4beta1GcsDestination"
        }
      },
      "description": "The desired output location and metadata."
    },
    "GoogleCloudVisionV1p3beta1Block": {
      "properties": {
        "property": {
          "description": "Additional information detected for the block.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "blockType": {
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ],
          "type": "string",
          "description": "Detected block type (text, image etc) for this block.",
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ]
        },
        "paragraphs": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Paragraph"
          },
          "type": "array",
          "description": "List of paragraphs in this block (if this blocks is of type text)."
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of the OCR results on the block. Range [0, 1]."
        }
      },
      "description": "Logical element on the page.",
      "id": "GoogleCloudVisionV1p3beta1Block",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1Property": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the property."
        },
        "uint64Value": {
          "type": "string",
          "description": "Value of numeric properties.",
          "format": "uint64"
        },
        "value": {
          "type": "string",
          "description": "Value of the property."
        }
      },
      "type": "object",
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "id": "GoogleCloudVisionV1p3beta1Property"
    },
    "ReferenceImage": {
      "properties": {
        "uri": {
          "type": "string",
          "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."
        },
        "name": {
          "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.",
          "type": "string"
        },
        "boundingPolys": {
          "items": {
            "$ref": "BoundingPoly"
          },
          "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).",
          "type": "array"
        }
      },
      "id": "ReferenceImage",
      "type": "object",
      "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes."
    },
    "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak": {
      "id": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak",
      "properties": {
        "isPrefix": {
          "description": "True if break prepends the element.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "description": "Detected break type.",
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ]
        }
      },
      "description": "Detected start or end of a structural component.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1ProductKeyValue": {
      "id": "GoogleCloudVisionV1p2beta1ProductKeyValue",
      "description": "A product label represented as a key-value pair.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        },
        "key": {
          "type": "string",
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult": {
      "description": "Information about the products similar to a single product in a query image.",
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding polygon around the product detected in the query image."
        },
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        },
        "objectAnnotations": {
          "description": "List of generic predictions for the object in the bounding box.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation"
          }
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult"
    },
    "RemoveProductFromProductSetRequest": {
      "properties": {
        "product": {
          "type": "string",
          "description": "Required. The resource name for the Product to be removed from this ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`"
        }
      },
      "description": "Request message for the `RemoveProductFromProductSet` method.",
      "type": "object",
      "id": "RemoveProductFromProductSetRequest"
    },
    "GoogleCloudVisionV1p1beta1OperationMetadata": {
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "id": "GoogleCloudVisionV1p1beta1OperationMetadata",
      "type": "object",
      "properties": {
        "updateTime": {
          "format": "google-datetime",
          "description": "The time when the operation result was last updated.",
          "type": "string"
        },
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "type": "string",
          "description": "Current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ]
        },
        "createTime": {
          "description": "The time when the batch request was received.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1OperationMetadata": {
      "type": "object",
      "properties": {
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "description": "Current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ],
          "type": "string"
        },
        "createTime": {
          "description": "The time when the batch request was received.",
          "format": "google-datetime",
          "type": "string"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the operation result was last updated."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1OperationMetadata",
      "description": "Contains metadata for the BatchAnnotateImages operation."
    },
    "GoogleCloudVisionV1p4beta1ImageAnnotationContext": {
      "properties": {
        "uri": {
          "description": "The URI of the file used to produce the image.",
          "type": "string"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1ImageAnnotationContext",
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1WebDetection": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1WebDetection",
      "properties": {
        "pagesWithMatchingImages": {
          "description": "Web pages containing the matching images from the Internet.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebPage"
          },
          "type": "array"
        },
        "fullMatchingImages": {
          "description": "Fully matching images from the Internet. Can include resized copies of the query image.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          }
        },
        "visuallySimilarImages": {
          "type": "array",
          "description": "The visually similar image results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          }
        },
        "webEntities": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebEntity"
          },
          "type": "array",
          "description": "Deduced entities from similar images on the Internet."
        },
        "partialMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          },
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."
        },
        "bestGuessLabels": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebLabel"
          },
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web."
        }
      },
      "description": "Relevant information for the image from the Internet."
    },
    "GoogleCloudVisionV1p1beta1WebDetection": {
      "type": "object",
      "properties": {
        "webEntities": {
          "description": "Deduced entities from similar images on the Internet.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebEntity"
          }
        },
        "visuallySimilarImages": {
          "type": "array",
          "description": "The visually similar image results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          }
        },
        "pagesWithMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebPage"
          },
          "type": "array",
          "description": "Web pages containing the matching images from the Internet."
        },
        "fullMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          },
          "description": "Fully matching images from the Internet. Can include resized copies of the query image.",
          "type": "array"
        },
        "bestGuessLabels": {
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebLabel"
          },
          "type": "array"
        },
        "partialMatchingImages": {
          "type": "array",
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          }
        }
      },
      "id": "GoogleCloudVisionV1p1beta1WebDetection",
      "description": "Relevant information for the image from the Internet."
    },
    "GoogleCloudVisionV1p2beta1GcsSource": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported."
        }
      },
      "id": "GoogleCloudVisionV1p2beta1GcsSource",
      "description": "The Google Cloud Storage location where the input will be read from."
    },
    "GoogleCloudVisionV1p4beta1CropHintsAnnotation": {
      "properties": {
        "cropHints": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1CropHint"
          },
          "description": "Crop hint results."
        }
      },
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1CropHintsAnnotation"
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebEntity": {
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebEntity",
      "properties": {
        "score": {
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.",
          "format": "float",
          "type": "number"
        },
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Canonical description of the entity, in English."
        }
      },
      "type": "object",
      "description": "Entity deduced from similar images on the Internet."
    },
    "GoogleCloudVisionV1p2beta1OperationMetadata": {
      "id": "GoogleCloudVisionV1p2beta1OperationMetadata",
      "properties": {
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the operation result was last updated."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "description": "Current state of the batch operation."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the batch request was received."
        }
      },
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1OutputConfig": {
      "properties": {
        "batchSize": {
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.",
          "format": "int32",
          "type": "integer"
        },
        "gcsDestination": {
          "$ref": "GoogleCloudVisionV1p1beta1GcsDestination",
          "description": "The Google Cloud Storage location to write the output(s) to."
        }
      },
      "type": "object",
      "description": "The desired output location and metadata.",
      "id": "GoogleCloudVisionV1p1beta1OutputConfig"
    },
    "GoogleCloudVisionV1p3beta1LocationInfo": {
      "properties": {
        "latLng": {
          "$ref": "LatLng",
          "description": "lat/long location coordinates."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1LocationInfo",
      "description": "Detected entity location information."
    },
    "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse": {
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse",
      "properties": {
        "outputConfig": {
          "$ref": "GoogleCloudVisionV1p3beta1OutputConfig",
          "description": "The output location and metadata from AsyncAnnotateFileRequest."
        }
      },
      "description": "The response for a single offline file annotation request."
    },
    "Page": {
      "type": "object",
      "properties": {
        "confidence": {
          "description": "Confidence of the OCR results on the page. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."
        },
        "property": {
          "$ref": "TextProperty",
          "description": "Additional information detected on the page."
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "Block"
          },
          "description": "List of blocks of text, images etc on this page."
        },
        "width": {
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "Page",
      "description": "Detected page from OCR."
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResults": {
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResults",
      "type": "object",
      "properties": {
        "productGroupedResults": {
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult"
          },
          "type": "array"
        },
        "indexTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results."
        },
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult"
          },
          "type": "array",
          "description": "List of results, one for each product match."
        }
      },
      "description": "Results for a product search request."
    },
    "GoogleCloudVisionV1p4beta1LocationInfo": {
      "properties": {
        "latLng": {
          "$ref": "LatLng",
          "description": "lat/long location coordinates."
        }
      },
      "type": "object",
      "description": "Detected entity location information.",
      "id": "GoogleCloudVisionV1p4beta1LocationInfo"
    },
    "GoogleCloudVisionV1p4beta1Product": {
      "description": "A Product contains ReferenceImages.",
      "properties": {
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "description": {
          "type": "string",
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long."
        },
        "name": {
          "type": "string",
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."
        },
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        },
        "productLabels": {
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductKeyValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Product"
    },
    "GoogleCloudVisionV1p4beta1Block": {
      "id": "GoogleCloudVisionV1p4beta1Block",
      "properties": {
        "property": {
          "description": "Additional information detected for the block.",
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty"
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of the OCR results on the block. Range [0, 1]."
        },
        "blockType": {
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ],
          "type": "string",
          "description": "Detected block type (text, image etc) for this block.",
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ]
        },
        "boundingBox": {
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        },
        "paragraphs": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Paragraph"
          },
          "type": "array",
          "description": "List of paragraphs in this block (if this blocks is of type text)."
        }
      },
      "description": "Logical element on the page.",
      "type": "object"
    },
    "AnnotateFileRequest": {
      "properties": {
        "inputConfig": {
          "$ref": "InputConfig",
          "description": "Required. Information about the input file."
        },
        "pages": {
          "description": "Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file.",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "features": {
          "items": {
            "$ref": "Feature"
          },
          "type": "array",
          "description": "Required. Requested features."
        },
        "imageContext": {
          "description": "Additional context that may accompany the image(s) in the file.",
          "$ref": "ImageContext"
        }
      },
      "id": "AnnotateFileRequest",
      "type": "object",
      "description": "A request to annotate one single file, e.g. a PDF, TIFF or GIF file."
    },
    "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation": {
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "score": {
          "format": "float",
          "type": "number",
          "description": "Score of the result. Range [0, 1]."
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "boundingPoly": {
          "description": "Image region to which this object belongs. This must be populated.",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        }
      },
      "type": "object",
      "description": "Set of detected objects with bounding boxes.",
      "id": "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation"
    },
    "Product": {
      "properties": {
        "description": {
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."
        },
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        },
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "productLabels": {
          "items": {
            "$ref": "KeyValue"
          },
          "type": "array",
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."
        }
      },
      "type": "object",
      "id": "Product",
      "description": "A Product contains ReferenceImages."
    },
    "GoogleCloudVisionV1p2beta1AnnotateImageResponse": {
      "description": "Response to an image annotation request.",
      "properties": {
        "productSearchResults": {
          "description": "If present, product search has completed successfully.",
          "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResults"
        },
        "cropHintsAnnotation": {
          "description": "If present, crop hints have completed successfully.",
          "$ref": "GoogleCloudVisionV1p2beta1CropHintsAnnotation"
        },
        "safeSearchAnnotation": {
          "$ref": "GoogleCloudVisionV1p2beta1SafeSearchAnnotation",
          "description": "If present, safe-search annotation has completed successfully."
        },
        "webDetection": {
          "$ref": "GoogleCloudVisionV1p2beta1WebDetection",
          "description": "If present, web detection has completed successfully."
        },
        "logoAnnotations": {
          "type": "array",
          "description": "If present, logo detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          }
        },
        "context": {
          "description": "If present, contextual information is needed to understand where this image comes from.",
          "$ref": "GoogleCloudVisionV1p2beta1ImageAnnotationContext"
        },
        "textAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          },
          "description": "If present, text (OCR) detection has completed successfully."
        },
        "landmarkAnnotations": {
          "description": "If present, landmark detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          },
          "type": "array"
        },
        "faceAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1FaceAnnotation"
          },
          "description": "If present, face detection has completed successfully."
        },
        "fullTextAnnotation": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotation",
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text."
        },
        "localizedObjectAnnotations": {
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation"
          },
          "type": "array"
        },
        "error": {
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.",
          "$ref": "Status"
        },
        "imagePropertiesAnnotation": {
          "$ref": "GoogleCloudVisionV1p2beta1ImageProperties",
          "description": "If present, image properties were extracted successfully."
        },
        "labelAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          },
          "description": "If present, label detection has completed successfully."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1AnnotateImageResponse"
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResultsResult": {
      "description": "Information about a product.",
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult",
      "properties": {
        "image": {
          "description": "The resource name of the image from the product that is the closest match to the query.",
          "type": "string"
        },
        "score": {
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "format": "float",
          "type": "number"
        },
        "product": {
          "description": "The Product.",
          "$ref": "GoogleCloudVisionV1p3beta1Product"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark": {
      "id": "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ],
          "description": "Face landmark type.",
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ]
        },
        "position": {
          "description": "Face landmark position.",
          "$ref": "GoogleCloudVisionV1p1beta1Position"
        }
      },
      "description": "A face-specific landmark (for example, a face feature).",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1Paragraph": {
      "description": "Structural unit of text representing a number of words in certain order.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Paragraph",
      "properties": {
        "property": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the paragraph."
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1].",
          "format": "float"
        },
        "words": {
          "description": "List of all words in this paragraph.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Word"
          }
        },
        "boundingBox": {
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebLabel": {
      "description": "Label to provide extra metadata for the web detection.",
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebLabel",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label for extra metadata."
        },
        "languageCode": {
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FaceAnnotation": {
      "type": "object",
      "id": "FaceAnnotation",
      "description": "A face annotation object contains the results of face detection.",
      "properties": {
        "detectionConfidence": {
          "type": "number",
          "description": "Detection confidence. Range [0, 1].",
          "format": "float"
        },
        "boundingPoly": {
          "$ref": "BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        },
        "blurredLikelihood": {
          "description": "Blurred likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "landmarks": {
          "type": "array",
          "description": "Detected face landmarks.",
          "items": {
            "$ref": "Landmark"
          }
        },
        "landmarkingConfidence": {
          "format": "float",
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number"
        },
        "angerLikelihood": {
          "type": "string",
          "description": "Anger likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "rollAngle": {
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].",
          "type": "number",
          "format": "float"
        },
        "headwearLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Headwear likelihood.",
          "type": "string"
        },
        "underExposedLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Under-exposed likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "sorrowLikelihood": {
          "description": "Sorrow likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "fdBoundingPoly": {
          "$ref": "BoundingPoly",
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."
        },
        "surpriseLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Surprise likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "panAngle": {
          "format": "float",
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "type": "number"
        },
        "joyLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Joy likelihood."
        },
        "tiltAngle": {
          "type": "number",
          "format": "float",
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]."
        }
      }
    },
    "ListProductSetsResponse": {
      "id": "ListProductSetsResponse",
      "type": "object",
      "properties": {
        "productSets": {
          "type": "array",
          "items": {
            "$ref": "ProductSet"
          },
          "description": "List of ProductSets."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      },
      "description": "Response message for the `ListProductSets` method."
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResultsResult": {
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult",
      "properties": {
        "image": {
          "description": "The resource name of the image from the product that is the closest match to the query.",
          "type": "string"
        },
        "score": {
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "format": "float",
          "type": "number"
        },
        "product": {
          "$ref": "GoogleCloudVisionV1p1beta1Product",
          "description": "The Product."
        }
      },
      "type": "object",
      "description": "Information about a product."
    },
    "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse": {
      "id": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse",
      "description": "Response to an async batch file annotation request.",
      "type": "object",
      "properties": {
        "responses": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse"
          },
          "type": "array",
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1ImageAnnotationContext": {
      "type": "object",
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.",
      "id": "GoogleCloudVisionV1p3beta1ImageAnnotationContext",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the file used to produce the image."
        },
        "pageNumber": {
          "format": "int32",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.",
          "type": "integer"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1Word": {
      "id": "GoogleCloudVisionV1p1beta1Word",
      "type": "object",
      "description": "A word representation.",
      "properties": {
        "property": {
          "description": "Additional information detected for the word.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty"
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "type": "number"
        },
        "boundingBox": {
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly"
        },
        "symbols": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Symbol"
          },
          "type": "array",
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order."
        }
      }
    },
    "LatLng": {
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "format": "double",
          "type": "number"
        }
      },
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "type": "object",
      "id": "LatLng"
    },
    "GoogleCloudVisionV1p2beta1LocationInfo": {
      "description": "Detected entity location information.",
      "id": "GoogleCloudVisionV1p2beta1LocationInfo",
      "properties": {
        "latLng": {
          "$ref": "LatLng",
          "description": "lat/long location coordinates."
        }
      },
      "type": "object"
    },
    "AnnotateImageRequest": {
      "properties": {
        "features": {
          "type": "array",
          "description": "Requested features.",
          "items": {
            "$ref": "Feature"
          }
        },
        "imageContext": {
          "description": "Additional context that may accompany the image.",
          "$ref": "ImageContext"
        },
        "image": {
          "$ref": "Image",
          "description": "The image to be processed."
        }
      },
      "type": "object",
      "id": "AnnotateImageRequest",
      "description": "Request for performing Google Cloud Vision API tasks over a user-provided image, with user-requested features, and with context information."
    },
    "GoogleCloudVisionV1p2beta1Product": {
      "id": "GoogleCloudVisionV1p2beta1Product",
      "description": "A Product contains ReferenceImages.",
      "properties": {
        "productCategory": {
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products.",
          "type": "string"
        },
        "description": {
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        },
        "productLabels": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductKeyValue"
          },
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.",
          "type": "array"
        },
        "name": {
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1GcsSource": {
      "type": "object",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1GcsSource",
      "description": "The Google Cloud Storage location where the input will be read from."
    },
    "GoogleCloudVisionV1p1beta1Product": {
      "description": "A Product contains ReferenceImages.",
      "id": "GoogleCloudVisionV1p1beta1Product",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.",
          "type": "string"
        },
        "productLabels": {
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductKeyValue"
          }
        },
        "description": {
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.",
          "type": "string"
        },
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1NormalizedVertex": {
      "id": "GoogleCloudVisionV1p3beta1NormalizedVertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "float",
          "description": "X coordinate."
        },
        "y": {
          "description": "Y coordinate.",
          "format": "float",
          "type": "number"
        }
      }
    },
    "DetectedLanguage": {
      "id": "DetectedLanguage",
      "type": "object",
      "properties": {
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of detected language. Range [0, 1]."
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      },
      "description": "Detected language for a structural component."
    },
    "GoogleCloudVisionV1p3beta1Page": {
      "properties": {
        "blocks": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Block"
          },
          "type": "array",
          "description": "List of blocks of text, images etc on this page."
        },
        "width": {
          "type": "integer",
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32"
        },
        "height": {
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32",
          "type": "integer"
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results on the page. Range [0, 1].",
          "format": "float"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty",
          "description": "Additional information detected on the page."
        }
      },
      "description": "Detected page from OCR.",
      "id": "GoogleCloudVisionV1p3beta1Page",
      "type": "object"
    },
    "WebEntity": {
      "id": "WebEntity",
      "type": "object",
      "description": "Entity deduced from similar images on the Internet.",
      "properties": {
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "score": {
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.",
          "format": "float",
          "type": "number"
        },
        "description": {
          "description": "Canonical description of the entity, in English.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation": {
      "description": "Prediction for what the object in the bounding box is.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation",
      "properties": {
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "score": {
          "format": "float",
          "type": "number",
          "description": "Score of the result. Range [0, 1]."
        }
      }
    },
    "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty": {
      "id": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
      "type": "object",
      "description": "Additional information detected on the structural component.",
      "properties": {
        "detectedLanguages": {
          "description": "A list of detected languages together with confidence.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage"
          }
        },
        "detectedBreak": {
          "description": "Detected start or end of a text segment.",
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1EntityAnnotation": {
      "description": "Set of detected entity features.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Entity textual description, expressed in its `locale` language."
        },
        "topicality": {
          "format": "float",
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].",
          "type": "number"
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Overall score of the result. Range [0, 1]."
        },
        "properties": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Property"
          },
          "type": "array",
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."
        },
        "confidence": {
          "format": "float",
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].",
          "type": "number"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1LocationInfo"
          },
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."
        },
        "mid": {
          "type": "string",
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."
        },
        "locale": {
          "description": "The language code for the locale in which the entity textual `description` is expressed.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1EntityAnnotation"
    },
    "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark": {
      "properties": {
        "type": {
          "description": "Face landmark type.",
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ]
        },
        "position": {
          "$ref": "GoogleCloudVisionV1p2beta1Position",
          "description": "Face landmark position."
        }
      },
      "description": "A face-specific landmark (for example, a face feature).",
      "id": "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark",
      "type": "object"
    },
    "BatchOperationMetadata": {
      "id": "BatchOperationMetadata",
      "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.",
      "properties": {
        "submitTime": {
          "format": "google-datetime",
          "description": "The time when the batch request was submitted to the server.",
          "type": "string"
        },
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is actively being processed.",
            "The request is done and at least one item has been successfully processed.",
            "The request is done and no item has been successfully processed.",
            "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PROCESSING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The current state of the batch operation.",
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1CropHint": {
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "properties": {
        "importanceFraction": {
          "format": "float",
          "description": "Fraction of importance of this salient region with respect to the original image.",
          "type": "number"
        },
        "boundingPoly": {
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "confidence": {
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1CropHint"
    },
    "GoogleCloudVisionV1p2beta1GcsDestination": {
      "properties": {
        "uri": {
          "type": "string",
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."
        }
      },
      "description": "The Google Cloud Storage location where the output will be written to.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1GcsDestination"
    },
    "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak": {
      "description": "Detected start or end of a structural component.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak",
      "properties": {
        "type": {
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ],
          "description": "Detected break type."
        },
        "isPrefix": {
          "description": "True if break prepends the element.",
          "type": "boolean"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1Vertex": {
      "type": "object",
      "properties": {
        "x": {
          "format": "int32",
          "description": "X coordinate.",
          "type": "integer"
        },
        "y": {
          "format": "int32",
          "description": "Y coordinate.",
          "type": "integer"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1Vertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image."
    },
    "Image": {
      "type": "object",
      "id": "Image",
      "description": "Client image to perform Google Cloud Vision API tasks over.",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "Image content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateImages requests. It does not work for AsyncBatchAnnotateImages requests."
        },
        "source": {
          "description": "Google Cloud Storage image location, or publicly-accessible image URL. If both `content` and `source` are provided for an image, `content` takes precedence and is used to perform the image annotation request.",
          "$ref": "ImageSource"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1ReferenceImage": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."
        },
        "boundingPolys": {
          "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
          },
          "type": "array"
        }
      },
      "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.",
      "id": "GoogleCloudVisionV1p3beta1ReferenceImage"
    },
    "GoogleCloudVisionV1p3beta1AsyncBatchAnnotateFilesResponse": {
      "id": "GoogleCloudVisionV1p3beta1AsyncBatchAnnotateFilesResponse",
      "type": "object",
      "properties": {
        "responses": {
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse"
          },
          "type": "array"
        }
      },
      "description": "Response to an async batch file annotation request."
    },
    "OutputConfig": {
      "properties": {
        "gcsDestination": {
          "description": "The Google Cloud Storage location to write the output(s) to.",
          "$ref": "GcsDestination"
        },
        "batchSize": {
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "OutputConfig",
      "description": "The desired output location and metadata.",
      "type": "object"
    },
    "AddProductToProductSetRequest": {
      "type": "object",
      "id": "AddProductToProductSetRequest",
      "description": "Request message for the `AddProductToProductSet` method.",
      "properties": {
        "product": {
          "type": "string",
          "description": "Required. The resource name for the Product to be added to this ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1Page": {
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Block"
          },
          "description": "List of blocks of text, images etc on this page."
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."
        },
        "confidence": {
          "description": "Confidence of the OCR results on the page. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "property": {
          "description": "Additional information detected on the page.",
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty"
        },
        "height": {
          "format": "int32",
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "Detected page from OCR.",
      "id": "GoogleCloudVisionV1p2beta1Page"
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResults": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "description": "List of results, one for each product match.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult"
          }
        },
        "indexTime": {
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "type": "string",
          "format": "google-datetime"
        },
        "productGroupedResults": {
          "type": "array",
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult"
          }
        }
      },
      "description": "Results for a product search request.",
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResults"
    },
    "GoogleCloudVisionV1p4beta1AnnotateFileResponse": {
      "type": "object",
      "properties": {
        "inputConfig": {
          "$ref": "GoogleCloudVisionV1p4beta1InputConfig",
          "description": "Information about the file for which this response is generated."
        },
        "totalPages": {
          "format": "int32",
          "type": "integer",
          "description": "This field gives the total number of pages in the file."
        },
        "responses": {
          "type": "array",
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1AnnotateImageResponse"
          }
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case."
        }
      },
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.",
      "id": "GoogleCloudVisionV1p4beta1AnnotateFileResponse"
    },
    "AsyncBatchAnnotateImagesRequest": {
      "properties": {
        "parent": {
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
          "type": "string"
        },
        "requests": {
          "description": "Required. Individual image annotation requests for this batch.",
          "type": "array",
          "items": {
            "$ref": "AnnotateImageRequest"
          }
        },
        "outputConfig": {
          "description": "Required. The desired output location and metadata (e.g. format).",
          "$ref": "OutputConfig"
        }
      },
      "description": "Request for async image annotation for a list of images.",
      "id": "AsyncBatchAnnotateImagesRequest",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1SafeSearchAnnotation": {
      "type": "object",
      "properties": {
        "violence": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Likelihood that this image contains violent content.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "spoof": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive."
        },
        "medical": {
          "description": "Likelihood that this is a medical image.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "racy": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "adult": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        }
      },
      "id": "GoogleCloudVisionV1p1beta1SafeSearchAnnotation",
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence)."
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebEntity": {
      "type": "object",
      "description": "Entity deduced from similar images on the Internet.",
      "properties": {
        "description": {
          "description": "Canonical description of the entity, in English.",
          "type": "string"
        },
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "score": {
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.",
          "format": "float",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebEntity"
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation": {
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation",
      "description": "Prediction for what the object in the bounding box is.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "score": {
          "format": "float",
          "description": "Score of the result. Range [0, 1].",
          "type": "number"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ImageProperties": {
      "id": "GoogleCloudVisionV1p4beta1ImageProperties",
      "type": "object",
      "properties": {
        "dominantColors": {
          "description": "If present, dominant colors completed successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1DominantColorsAnnotation"
        }
      },
      "description": "Stores image properties, such as dominant colors."
    },
    "GoogleCloudVisionV1p4beta1FaceAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1FaceAnnotation",
      "description": "A face annotation object contains the results of face detection.",
      "properties": {
        "joyLikelihood": {
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Joy likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "fdBoundingPoly": {
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        },
        "landmarkingConfidence": {
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "angerLikelihood": {
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Anger likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "rollAngle": {
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].",
          "format": "float",
          "type": "number"
        },
        "tiltAngle": {
          "format": "float",
          "type": "number",
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]."
        },
        "panAngle": {
          "type": "number",
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "format": "float"
        },
        "surpriseLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Surprise likelihood.",
          "type": "string"
        },
        "landmarks": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark"
          },
          "description": "Detected face landmarks.",
          "type": "array"
        },
        "blurredLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Blurred likelihood."
        },
        "detectionConfidence": {
          "description": "Detection confidence. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "sorrowLikelihood": {
          "description": "Sorrow likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "underExposedLikelihood": {
          "description": "Under-exposed likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "recognitionResult": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1FaceRecognitionResult"
          },
          "description": "Additional recognition information. Only computed if image_context.face_recognition_params is provided, **and** a match is found to a Celebrity in the input CelebritySet. This field is sorted in order of decreasing confidence values."
        },
        "headwearLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Headwear likelihood."
        }
      }
    },
    "WebDetection": {
      "type": "object",
      "description": "Relevant information for the image from the Internet.",
      "properties": {
        "pagesWithMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "WebPage"
          },
          "description": "Web pages containing the matching images from the Internet."
        },
        "visuallySimilarImages": {
          "type": "array",
          "description": "The visually similar image results.",
          "items": {
            "$ref": "WebImage"
          }
        },
        "partialMatchingImages": {
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "WebImage"
          },
          "type": "array"
        },
        "webEntities": {
          "items": {
            "$ref": "WebEntity"
          },
          "description": "Deduced entities from similar images on the Internet.",
          "type": "array"
        },
        "fullMatchingImages": {
          "items": {
            "$ref": "WebImage"
          },
          "description": "Fully matching images from the Internet. Can include resized copies of the query image.",
          "type": "array"
        },
        "bestGuessLabels": {
          "items": {
            "$ref": "WebLabel"
          },
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "type": "array"
        }
      },
      "id": "WebDetection"
    },
    "GoogleCloudVisionV1p1beta1FaceAnnotation": {
      "description": "A face annotation object contains the results of face detection.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1FaceAnnotation",
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        },
        "headwearLikelihood": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Headwear likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "blurredLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Blurred likelihood."
        },
        "landmarks": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark"
          },
          "type": "array",
          "description": "Detected face landmarks."
        },
        "panAngle": {
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "type": "number",
          "format": "float"
        },
        "angerLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Anger likelihood.",
          "type": "string"
        },
        "landmarkingConfidence": {
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "fdBoundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."
        },
        "tiltAngle": {
          "format": "float",
          "type": "number",
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]."
        },
        "underExposedLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Under-exposed likelihood."
        },
        "rollAngle": {
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].",
          "format": "float",
          "type": "number"
        },
        "sorrowLikelihood": {
          "description": "Sorrow likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "surpriseLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Surprise likelihood."
        },
        "joyLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Joy likelihood."
        },
        "detectionConfidence": {
          "format": "float",
          "type": "number",
          "description": "Detection confidence. Range [0, 1]."
        }
      }
    },
    "CropHintsParams": {
      "type": "object",
      "id": "CropHintsParams",
      "description": "Parameters for crop hints annotation request.",
      "properties": {
        "aspectRatios": {
          "items": {
            "type": "number",
            "format": "float"
          },
          "type": "array",
          "description": "Aspect ratios in floats, representing the ratio of the width to the height of the image. For example, if the desired aspect ratio is 4/3, the corresponding float value should be 1.33333. If not specified, the best possible crop is returned. The number of provided aspect ratios is limited to a maximum of 16; any aspect ratios provided after the 16th are ignored."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1LocationInfo": {
      "type": "object",
      "description": "Detected entity location information.",
      "id": "GoogleCloudVisionV1p1beta1LocationInfo",
      "properties": {
        "latLng": {
          "description": "lat/long location coordinates.",
          "$ref": "LatLng"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1OutputConfig": {
      "properties": {
        "batchSize": {
          "format": "int32",
          "type": "integer",
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."
        },
        "gcsDestination": {
          "$ref": "GoogleCloudVisionV1p3beta1GcsDestination",
          "description": "The Google Cloud Storage location to write the output(s) to."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1OutputConfig",
      "description": "The desired output location and metadata.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1OperationMetadata": {
      "properties": {
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the operation result was last updated."
        },
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "type": "string",
          "description": "Current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ]
        },
        "createTime": {
          "type": "string",
          "description": "The time when the batch request was received.",
          "format": "google-datetime"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1OperationMetadata",
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse": {
      "type": "object",
      "description": "The response for a single offline file annotation request.",
      "id": "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse",
      "properties": {
        "outputConfig": {
          "$ref": "GoogleCloudVisionV1p4beta1OutputConfig",
          "description": "The output location and metadata from AsyncAnnotateFileRequest."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ProductKeyValue": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        },
        "key": {
          "type": "string",
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        }
      },
      "description": "A product label represented as a key-value pair.",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1ProductKeyValue"
    },
    "GoogleCloudVisionV1p2beta1Symbol": {
      "id": "GoogleCloudVisionV1p2beta1Symbol",
      "description": "A single symbol representation.",
      "properties": {
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "format": "float"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the symbol."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "text": {
          "type": "string",
          "description": "The actual UTF-8 representation of the symbol."
        }
      },
      "type": "object"
    },
    "Landmark": {
      "id": "Landmark",
      "description": "A face-specific landmark (for example, a face feature).",
      "properties": {
        "position": {
          "description": "Face landmark position.",
          "$ref": "Position"
        },
        "type": {
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ],
          "description": "Face landmark type.",
          "type": "string",
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ]
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1CropHintsAnnotation": {
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "properties": {
        "cropHints": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1CropHint"
          },
          "description": "Crop hint results."
        }
      },
      "id": "GoogleCloudVisionV1p1beta1CropHintsAnnotation",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebPage": {
      "description": "Metadata for web pages.",
      "type": "object",
      "properties": {
        "fullMatchingImages": {
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          },
          "type": "array"
        },
        "partialMatchingImages": {
          "type": "array",
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          }
        },
        "pageTitle": {
          "type": "string",
          "description": "Title for the web page, may contain HTML markups."
        },
        "url": {
          "type": "string",
          "description": "The result web page URL."
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the web page."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebPage"
    },
    "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateFilesResponse": {
      "description": "Response to an async batch file annotation request.",
      "type": "object",
      "properties": {
        "responses": {
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateFilesResponse"
    },
    "GoogleCloudVisionV1p2beta1BoundingPoly": {
      "description": "A bounding polygon for the detected image annotation.",
      "properties": {
        "normalizedVertices": {
          "type": "array",
          "description": "The bounding polygon normalized vertices.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1NormalizedVertex"
          }
        },
        "vertices": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Vertex"
          },
          "description": "The bounding polygon vertices.",
          "type": "array"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1BoundingPoly",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage": {
      "properties": {
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of detected language. Range [0, 1].",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage",
      "type": "object",
      "description": "Detected language for a structural component."
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation": {
      "properties": {
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "score": {
          "type": "number",
          "description": "Score of the result. Range [0, 1].",
          "format": "float"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation",
      "type": "object",
      "description": "Prediction for what the object in the bounding box is."
    },
    "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty": {
      "type": "object",
      "description": "Additional information detected on the structural component.",
      "id": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty",
      "properties": {
        "detectedLanguages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage"
          },
          "description": "A list of detected languages together with confidence.",
          "type": "array"
        },
        "detectedBreak": {
          "description": "Detected start or end of a text segment.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak"
        }
      }
    },
    "InputConfig": {
      "id": "InputConfig",
      "type": "object",
      "description": "The desired input location and metadata.",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte",
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."
        },
        "gcsSource": {
          "$ref": "GcsSource",
          "description": "The Google Cloud Storage location to read the input from."
        },
        "mimeType": {
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1WebDetection": {
      "properties": {
        "visuallySimilarImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "description": "The visually similar image results.",
          "type": "array"
        },
        "partialMatchingImages": {
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "type": "array"
        },
        "webEntities": {
          "description": "Deduced entities from similar images on the Internet.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebEntity"
          },
          "type": "array"
        },
        "bestGuessLabels": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebLabel"
          },
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web."
        },
        "fullMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "type": "array",
          "description": "Fully matching images from the Internet. Can include resized copies of the query image."
        },
        "pagesWithMatchingImages": {
          "description": "Web pages containing the matching images from the Internet.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebPage"
          }
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1WebDetection",
      "description": "Relevant information for the image from the Internet."
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResults": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResults",
      "description": "Results for a product search request.",
      "properties": {
        "indexTime": {
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "type": "string",
          "format": "google-datetime"
        },
        "productGroupedResults": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult"
          },
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."
        },
        "results": {
          "type": "array",
          "description": "List of results, one for each product match.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult"
          }
        }
      }
    },
    "TextProperty": {
      "type": "object",
      "id": "TextProperty",
      "properties": {
        "detectedLanguages": {
          "items": {
            "$ref": "DetectedLanguage"
          },
          "description": "A list of detected languages together with confidence.",
          "type": "array"
        },
        "detectedBreak": {
          "description": "Detected start or end of a text segment.",
          "$ref": "DetectedBreak"
        }
      },
      "description": "Additional information detected on the structural component."
    },
    "GoogleCloudVisionV1p3beta1Position": {
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "properties": {
        "x": {
          "type": "number",
          "format": "float",
          "description": "X coordinate."
        },
        "y": {
          "type": "number",
          "description": "Y coordinate.",
          "format": "float"
        },
        "z": {
          "format": "float",
          "description": "Z coordinate (or depth).",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1Position",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1BoundingPoly": {
      "description": "A bounding polygon for the detected image annotation.",
      "type": "object",
      "properties": {
        "vertices": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Vertex"
          },
          "description": "The bounding polygon vertices.",
          "type": "array"
        },
        "normalizedVertices": {
          "description": "The bounding polygon normalized vertices.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1NormalizedVertex"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1BoundingPoly"
    },
    "Feature": {
      "properties": {
        "type": {
          "enumDescriptions": [
            "Unspecified feature type.",
            "Run face detection.",
            "Run landmark detection.",
            "Run logo detection.",
            "Run label detection.",
            "Run text detection / optical character recognition (OCR). Text detection is optimized for areas of text within a larger image; if the image is a document, use `DOCUMENT_TEXT_DETECTION` instead.",
            "Run dense text document OCR. Takes precedence when both `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` are present.",
            "Run Safe Search to detect potentially unsafe or undesirable content.",
            "Compute a set of image properties, such as the image's dominant colors.",
            "Run crop hints.",
            "Run web detection.",
            "Run Product Search.",
            "Run localizer for object detection."
          ],
          "description": "The feature type.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "FACE_DETECTION",
            "LANDMARK_DETECTION",
            "LOGO_DETECTION",
            "LABEL_DETECTION",
            "TEXT_DETECTION",
            "DOCUMENT_TEXT_DETECTION",
            "SAFE_SEARCH_DETECTION",
            "IMAGE_PROPERTIES",
            "CROP_HINTS",
            "WEB_DETECTION",
            "PRODUCT_SEARCH",
            "OBJECT_LOCALIZATION"
          ]
        },
        "maxResults": {
          "format": "int32",
          "type": "integer",
          "description": "Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`."
        },
        "model": {
          "description": "Model to use for the feature. Supported values: \"builtin/stable\" (the default if unset) and \"builtin/latest\". `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` also support \"builtin/weekly\" for the bleeding edge release updated weekly.",
          "type": "string"
        }
      },
      "description": "The type of Google Cloud Vision API detection to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list.",
      "id": "Feature",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1BoundingPoly": {
      "type": "object",
      "description": "A bounding polygon for the detected image annotation.",
      "id": "GoogleCloudVisionV1p4beta1BoundingPoly",
      "properties": {
        "normalizedVertices": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1NormalizedVertex"
          },
          "description": "The bounding polygon normalized vertices."
        },
        "vertices": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Vertex"
          },
          "description": "The bounding polygon vertices."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1ColorInfo": {
      "id": "GoogleCloudVisionV1p3beta1ColorInfo",
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.",
      "type": "object",
      "properties": {
        "color": {
          "$ref": "Color",
          "description": "RGB components of the color."
        },
        "pixelFraction": {
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "score": {
          "format": "float",
          "type": "number",
          "description": "Image-specific score for this color. Value in range [0, 1]."
        }
      }
    },
    "ListReferenceImagesResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The next_page_token returned from a previous List request, if any.",
          "type": "string"
        },
        "pageSize": {
          "description": "The maximum number of items to return. Default 10, maximum 100.",
          "format": "int32",
          "type": "integer"
        },
        "referenceImages": {
          "items": {
            "$ref": "ReferenceImage"
          },
          "description": "The list of reference images.",
          "type": "array"
        }
      },
      "id": "ListReferenceImagesResponse",
      "description": "Response message for the `ListReferenceImages` method."
    },
    "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "score": {
          "type": "number",
          "description": "Score of the result. Range [0, 1].",
          "format": "float"
        },
        "boundingPoly": {
          "description": "Image region to which this object belongs. This must be populated.",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        }
      },
      "description": "Set of detected objects with bounding boxes."
    },
    "GoogleCloudVisionV1p2beta1DominantColorsAnnotation": {
      "type": "object",
      "properties": {
        "colors": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ColorInfo"
          },
          "type": "array",
          "description": "RGB color values with their score and pixel fraction."
        }
      },
      "description": "Set of dominant colors and their corresponding scores.",
      "id": "GoogleCloudVisionV1p2beta1DominantColorsAnnotation"
    },
    "LatLongRect": {
      "properties": {
        "maxLatLng": {
          "$ref": "LatLng",
          "description": "Max lat/long pair."
        },
        "minLatLng": {
          "$ref": "LatLng",
          "description": "Min lat/long pair."
        }
      },
      "id": "LatLongRect",
      "description": "Rectangle determined by min and max `LatLng` pairs.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1WebDetection": {
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1WebDetection",
      "description": "Relevant information for the image from the Internet.",
      "properties": {
        "visuallySimilarImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          },
          "type": "array",
          "description": "The visually similar image results."
        },
        "bestGuessLabels": {
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebLabel"
          },
          "type": "array"
        },
        "pagesWithMatchingImages": {
          "type": "array",
          "description": "Web pages containing the matching images from the Internet.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebPage"
          }
        },
        "webEntities": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebEntity"
          },
          "description": "Deduced entities from similar images on the Internet."
        },
        "partialMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          },
          "type": "array",
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."
        },
        "fullMatchingImages": {
          "type": "array",
          "description": "Fully matching images from the Internet. Can include resized copies of the query image.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          }
        }
      }
    },
    "GoogleCloudVisionV1p1beta1Position": {
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "type": "object",
      "properties": {
        "y": {
          "type": "number",
          "format": "float",
          "description": "Y coordinate."
        },
        "z": {
          "format": "float",
          "description": "Z coordinate (or depth).",
          "type": "number"
        },
        "x": {
          "description": "X coordinate.",
          "type": "number",
          "format": "float"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1Position"
    },
    "BatchAnnotateImagesRequest": {
      "properties": {
        "requests": {
          "items": {
            "$ref": "AnnotateImageRequest"
          },
          "description": "Required. Individual image annotation requests for this batch.",
          "type": "array"
        },
        "parent": {
          "type": "string",
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
        }
      },
      "type": "object",
      "description": "Multiple image annotation requests are batched into a single service call.",
      "id": "BatchAnnotateImagesRequest"
    },
    "GoogleCloudVisionV1p4beta1TextAnnotation": {
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "properties": {
        "text": {
          "type": "string",
          "description": "UTF-8 text detected on the pages."
        },
        "pages": {
          "description": "List of pages detected by OCR.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Page"
          }
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1TextAnnotation"
    },
    "GoogleCloudVisionV1p1beta1ProductKeyValue": {
      "id": "GoogleCloudVisionV1p1beta1ProductKeyValue",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        },
        "value": {
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        }
      },
      "description": "A product label represented as a key-value pair."
    },
    "GoogleCloudVisionV1p1beta1AnnotateFileResponse": {
      "type": "object",
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.",
      "properties": {
        "inputConfig": {
          "$ref": "GoogleCloudVisionV1p1beta1InputConfig",
          "description": "Information about the file for which this response is generated."
        },
        "totalPages": {
          "type": "integer",
          "format": "int32",
          "description": "This field gives the total number of pages in the file."
        },
        "responses": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1AnnotateImageResponse"
          },
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "type": "array"
        },
        "error": {
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.",
          "$ref": "Status"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1AnnotateFileResponse"
    },
    "ProductSet": {
      "description": "A ProductSet contains Products. A ProductSet can contain a maximum of 1 million reference images. If the limit is exceeded, periodic indexing will fail.",
      "id": "ProductSet",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long."
        },
        "name": {
          "description": "The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.",
          "type": "string"
        },
        "indexTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The time at which this ProductSet was last indexed. Query results will reflect all updates before this time. If this ProductSet has never been indexed, this timestamp is the default value \"1970-01-01T00:00:00Z\". This field is ignored when creating a ProductSet."
        },
        "indexError": {
          "readOnly": true,
          "description": "Output only. If there was an error with indexing the product set, the field is populated. This field is ignored when creating a ProductSet.",
          "$ref": "Status"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1ColorInfo": {
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.",
      "properties": {
        "pixelFraction": {
          "format": "float",
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "type": "number"
        },
        "score": {
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "color": {
          "$ref": "Color",
          "description": "RGB components of the color."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1ColorInfo"
    },
    "GoogleCloudVisionV1p1beta1GcsDestination": {
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1GcsDestination",
      "description": "The Google Cloud Storage location where the output will be written to."
    },
    "GoogleCloudVisionV1p3beta1Word": {
      "properties": {
        "symbols": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Symbol"
          },
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order."
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "type": "number"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the word."
        }
      },
      "description": "A word representation.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1Word"
    },
    "Color": {
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...",
      "id": "Color",
      "type": "object",
      "properties": {
        "green": {
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "float"
        },
        "alpha": {
          "format": "float",
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).",
          "type": "number"
        },
        "blue": {
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "format": "float",
          "type": "number"
        },
        "red": {
          "format": "float",
          "type": "number",
          "description": "The amount of red in the color as a value in the interval [0, 1]."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation": {
      "description": "Set of detected objects with bounding boxes.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation",
      "properties": {
        "score": {
          "format": "float",
          "description": "Score of the result. Range [0, 1].",
          "type": "number"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "Image region to which this object belongs. This must be populated."
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        }
      }
    },
    "BoundingPoly": {
      "properties": {
        "vertices": {
          "description": "The bounding polygon vertices.",
          "type": "array",
          "items": {
            "$ref": "Vertex"
          }
        },
        "normalizedVertices": {
          "type": "array",
          "description": "The bounding polygon normalized vertices.",
          "items": {
            "$ref": "NormalizedVertex"
          }
        }
      },
      "description": "A bounding polygon for the detected image annotation.",
      "id": "BoundingPoly",
      "type": "object"
    },
    "ImageProperties": {
      "description": "Stores image properties, such as dominant colors.",
      "id": "ImageProperties",
      "properties": {
        "dominantColors": {
          "description": "If present, dominant colors completed successfully.",
          "$ref": "DominantColorsAnnotation"
        }
      },
      "type": "object"
    },
    "BatchAnnotateFilesResponse": {
      "description": "A list of file annotation responses.",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "AnnotateFileResponse"
          },
          "description": "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest."
        }
      },
      "type": "object",
      "id": "BatchAnnotateFilesResponse"
    },
    "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark": {
      "type": "object",
      "description": "A face-specific landmark (for example, a face feature).",
      "properties": {
        "position": {
          "$ref": "GoogleCloudVisionV1p3beta1Position",
          "description": "Face landmark position."
        },
        "type": {
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ],
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ],
          "type": "string",
          "description": "Face landmark type."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark"
    },
    "GoogleCloudVisionV1p1beta1Block": {
      "properties": {
        "property": {
          "description": "Additional information detected for the block.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "blockType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ],
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ],
          "description": "Detected block type (text, image etc) for this block."
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results on the block. Range [0, 1].",
          "type": "number"
        },
        "paragraphs": {
          "description": "List of paragraphs in this block (if this blocks is of type text).",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Paragraph"
          }
        }
      },
      "description": "Logical element on the page.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1Block"
    },
    "DetectedBreak": {
      "description": "Detected start or end of a structural component.",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ],
          "description": "Detected break type.",
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "type": "string"
        },
        "isPrefix": {
          "type": "boolean",
          "description": "True if break prepends the element."
        }
      },
      "id": "DetectedBreak",
      "type": "object"
    },
    "ImportProductSetsInputConfig": {
      "description": "The input content for the `ImportProductSets` method.",
      "properties": {
        "gcsSource": {
          "$ref": "ImportProductSetsGcsSource",
          "description": "The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line."
        }
      },
      "id": "ImportProductSetsInputConfig",
      "type": "object"
    },
    "ProductSetPurgeConfig": {
      "description": "Config to control which ProductSet contains the Products to be deleted.",
      "type": "object",
      "properties": {
        "productSetId": {
          "type": "string",
          "description": "The ProductSet that contains the Products to delete. If a Product is a member of product_set_id in addition to other ProductSets, the Product will still be deleted."
        }
      },
      "id": "ProductSetPurgeConfig"
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebImage": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebImage",
      "properties": {
        "score": {
          "description": "(Deprecated) Overall relevancy score for the image.",
          "format": "float",
          "type": "number"
        },
        "url": {
          "description": "The result image URL.",
          "type": "string"
        }
      },
      "description": "Metadata for online images."
    },
    "GoogleCloudVisionV1p4beta1BatchOperationMetadata": {
      "type": "object",
      "properties": {
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is actively being processed.",
            "The request is done and at least one item has been successfully processed.",
            "The request is done and no item has been successfully processed.",
            "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."
          ],
          "type": "string",
          "description": "The current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PROCESSING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ]
        },
        "submitTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the batch request was submitted to the server."
        },
        "endTime": {
          "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.",
      "id": "GoogleCloudVisionV1p4beta1BatchOperationMetadata"
    },
    "GoogleCloudVisionV1p3beta1BoundingPoly": {
      "type": "object",
      "properties": {
        "normalizedVertices": {
          "description": "The bounding polygon normalized vertices.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1NormalizedVertex"
          },
          "type": "array"
        },
        "vertices": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Vertex"
          },
          "description": "The bounding polygon vertices."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1BoundingPoly",
      "description": "A bounding polygon for the detected image annotation."
    },
    "GoogleCloudVisionV1p4beta1Page": {
      "id": "GoogleCloudVisionV1p4beta1Page",
      "properties": {
        "confidence": {
          "description": "Confidence of the OCR results on the page. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "height": {
          "format": "int32",
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "type": "integer"
        },
        "width": {
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32",
          "type": "integer"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty",
          "description": "Additional information detected on the page."
        },
        "blocks": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Block"
          },
          "description": "List of blocks of text, images etc on this page.",
          "type": "array"
        }
      },
      "description": "Detected page from OCR.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult": {
      "description": "Information about the products similar to a single product in a query image.",
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding polygon around the product detected in the query image."
        },
        "objectAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation"
          },
          "description": "List of generic predictions for the object in the bounding box.",
          "type": "array"
        },
        "results": {
          "description": "List of results, one for each product match.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult"
          }
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult"
    },
    "GoogleCloudVisionV1p1beta1DominantColorsAnnotation": {
      "type": "object",
      "description": "Set of dominant colors and their corresponding scores.",
      "id": "GoogleCloudVisionV1p1beta1DominantColorsAnnotation",
      "properties": {
        "colors": {
          "type": "array",
          "description": "RGB color values with their score and pixel fraction.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ColorInfo"
          }
        }
      }
    },
    "GoogleCloudVisionV1p3beta1Product": {
      "id": "GoogleCloudVisionV1p3beta1Product",
      "description": "A Product contains ReferenceImages.",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        },
        "productCategory": {
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products.",
          "type": "string"
        },
        "productLabels": {
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductKeyValue"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long."
        },
        "name": {
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1GcsSource": {
      "description": "The Google Cloud Storage location where the input will be read from.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1GcsSource"
    },
    "AsyncAnnotateFileResponse": {
      "id": "AsyncAnnotateFileResponse",
      "description": "The response for a single offline file annotation request.",
      "type": "object",
      "properties": {
        "outputConfig": {
          "description": "The output location and metadata from AsyncAnnotateFileRequest.",
          "$ref": "OutputConfig"
        }
      }
    },
    "ImageAnnotationContext": {
      "id": "ImageAnnotationContext",
      "properties": {
        "pageNumber": {
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.",
          "type": "integer",
          "format": "int32"
        },
        "uri": {
          "type": "string",
          "description": "The URI of the file used to produce the image."
        }
      },
      "type": "object",
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image."
    },
    "WebPage": {
      "description": "Metadata for web pages.",
      "properties": {
        "partialMatchingImages": {
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "type": "array",
          "items": {
            "$ref": "WebImage"
          }
        },
        "pageTitle": {
          "description": "Title for the web page, may contain HTML markups.",
          "type": "string"
        },
        "fullMatchingImages": {
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "type": "array",
          "items": {
            "$ref": "WebImage"
          }
        },
        "score": {
          "type": "number",
          "description": "(Deprecated) Overall relevancy score for the web page.",
          "format": "float"
        },
        "url": {
          "type": "string",
          "description": "The result web page URL."
        }
      },
      "type": "object",
      "id": "WebPage"
    },
    "GoogleCloudVisionV1p2beta1Word": {
      "properties": {
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "type": "number"
        },
        "property": {
          "description": "Additional information detected for the word.",
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty"
        },
        "symbols": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Symbol"
          },
          "type": "array",
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order."
        }
      },
      "description": "A word representation.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Word"
    },
    "GoogleCloudVisionV1p3beta1CropHintsAnnotation": {
      "properties": {
        "cropHints": {
          "description": "Crop hint results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1CropHint"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "id": "GoogleCloudVisionV1p3beta1CropHintsAnnotation"
    },
    "GoogleCloudVisionV1p1beta1Symbol": {
      "description": "A single symbol representation.",
      "properties": {
        "property": {
          "description": "Additional information detected for the symbol.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty"
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of the OCR results for the symbol. Range [0, 1]."
        },
        "text": {
          "type": "string",
          "description": "The actual UTF-8 representation of the symbol."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1Symbol"
    },
    "GcsDestination": {
      "id": "GcsDestination",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The Google Cloud Storage location where the output will be written to."
    },
    "BatchAnnotateImagesResponse": {
      "properties": {
        "responses": {
          "items": {
            "$ref": "AnnotateImageResponse"
          },
          "type": "array",
          "description": "Individual responses to image annotation requests within the batch."
        }
      },
      "type": "object",
      "description": "Response to a batch image annotation request.",
      "id": "BatchAnnotateImagesResponse"
    },
    "GoogleCloudVisionV1p3beta1ImageProperties": {
      "description": "Stores image properties, such as dominant colors.",
      "id": "GoogleCloudVisionV1p3beta1ImageProperties",
      "properties": {
        "dominantColors": {
          "description": "If present, dominant colors completed successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1DominantColorsAnnotation"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1AnnotateFileResponse": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1AnnotateFileResponse",
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.",
      "properties": {
        "responses": {
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1AnnotateImageResponse"
          }
        },
        "totalPages": {
          "format": "int32",
          "type": "integer",
          "description": "This field gives the total number of pages in the file."
        },
        "error": {
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.",
          "$ref": "Status"
        },
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "GoogleCloudVisionV1p2beta1InputConfig"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1NormalizedVertex": {
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "id": "GoogleCloudVisionV1p1beta1NormalizedVertex",
      "properties": {
        "x": {
          "format": "float",
          "type": "number",
          "description": "X coordinate."
        },
        "y": {
          "description": "Y coordinate.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1Word": {
      "properties": {
        "boundingBox": {
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        },
        "symbols": {
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Symbol"
          }
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results for the word. Range [0, 1]."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the word."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Word",
      "description": "A word representation."
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResultsResult": {
      "description": "Information about a product.",
      "type": "object",
      "properties": {
        "image": {
          "description": "The resource name of the image from the product that is the closest match to the query.",
          "type": "string"
        },
        "score": {
          "format": "float",
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "type": "number"
        },
        "product": {
          "description": "The Product.",
          "$ref": "GoogleCloudVisionV1p2beta1Product"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult"
    },
    "GoogleCloudVisionV1p2beta1OutputConfig": {
      "id": "GoogleCloudVisionV1p2beta1OutputConfig",
      "properties": {
        "gcsDestination": {
          "$ref": "GoogleCloudVisionV1p2beta1GcsDestination",
          "description": "The Google Cloud Storage location to write the output(s) to."
        },
        "batchSize": {
          "format": "int32",
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.",
          "type": "integer"
        }
      },
      "description": "The desired output location and metadata.",
      "type": "object"
    },
    "ImportProductSetsRequest": {
      "properties": {
        "inputConfig": {
          "description": "Required. The input content for the list of requests.",
          "$ref": "ImportProductSetsInputConfig"
        }
      },
      "type": "object",
      "id": "ImportProductSetsRequest",
      "description": "Request message for the `ImportProductSets` method."
    },
    "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty": {
      "description": "Additional information detected on the structural component.",
      "properties": {
        "detectedBreak": {
          "description": "Detected start or end of a text segment.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak"
        },
        "detectedLanguages": {
          "description": "A list of detected languages together with confidence.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty",
      "type": "object"
    },
    "ImageSource": {
      "type": "object",
      "properties": {
        "imageUri": {
          "type": "string",
          "description": "The URI of the source image. Can be either: 1. A Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info. 2. A publicly-accessible image HTTP/HTTPS URL. When fetching images from HTTP/HTTPS URLs, Google cannot guarantee that the request will be completed. Your request may fail if the specified host denies the request (e.g. due to request throttling or DOS prevention), or if Google throttles requests to the site for abuse prevention. You should not depend on externally-hosted images for production applications. When both `gcs_image_uri` and `image_uri` are specified, `image_uri` takes precedence."
        },
        "gcsImageUri": {
          "description": "**Use `image_uri` instead.** The Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info.",
          "type": "string"
        }
      },
      "id": "ImageSource",
      "description": "External image source (Google Cloud Storage or web URL image location)."
    },
    "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse": {
      "id": "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse",
      "properties": {
        "outputConfig": {
          "$ref": "GoogleCloudVisionV1p2beta1OutputConfig",
          "description": "The output location and metadata from AsyncAnnotateFileRequest."
        }
      },
      "type": "object",
      "description": "The response for a single offline file annotation request."
    },
    "AsyncBatchAnnotateFilesRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "description": "Required. Individual async file annotation requests for this batch.",
          "items": {
            "$ref": "AsyncAnnotateFileRequest"
          }
        },
        "parent": {
          "type": "string",
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
        }
      },
      "description": "Multiple async file annotation requests are batched into a single service call.",
      "id": "AsyncBatchAnnotateFilesRequest"
    },
    "CropHint": {
      "properties": {
        "boundingPoly": {
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.",
          "$ref": "BoundingPoly"
        },
        "confidence": {
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "importanceFraction": {
          "description": "Fraction of importance of this salient region with respect to the original image.",
          "type": "number",
          "format": "float"
        }
      },
      "id": "CropHint",
      "type": "object",
      "description": "Single crop hint that is used to generate a new crop when serving an image."
    },
    "GoogleCloudVisionV1p4beta1Celebrity": {
      "id": "GoogleCloudVisionV1p4beta1Celebrity",
      "properties": {
        "description": {
          "type": "string",
          "description": "The Celebrity's description."
        },
        "displayName": {
          "type": "string",
          "description": "The Celebrity's display name."
        },
        "name": {
          "type": "string",
          "description": "The resource name of the preloaded Celebrity. Has the format `builtin/{mid}`."
        }
      },
      "type": "object",
      "description": "A Celebrity is a group of Faces with an identity."
    },
    "GoogleCloudVisionV1p3beta1AnnotateFileResponse": {
      "properties": {
        "totalPages": {
          "format": "int32",
          "type": "integer",
          "description": "This field gives the total number of pages in the file."
        },
        "error": {
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.",
          "$ref": "Status"
        },
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "GoogleCloudVisionV1p3beta1InputConfig"
        },
        "responses": {
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1AnnotateImageResponse"
          }
        }
      },
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1AnnotateFileResponse"
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebImage": {
      "description": "Metadata for online images.",
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebImage",
      "properties": {
        "url": {
          "description": "The result image URL.",
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the image."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1NormalizedVertex": {
      "properties": {
        "y": {
          "type": "number",
          "format": "float",
          "description": "Y coordinate."
        },
        "x": {
          "description": "X coordinate.",
          "type": "number",
          "format": "float"
        }
      },
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1NormalizedVertex"
    },
    "GoogleCloudVisionV1p2beta1Position": {
      "properties": {
        "x": {
          "description": "X coordinate.",
          "type": "number",
          "format": "float"
        },
        "y": {
          "format": "float",
          "type": "number",
          "description": "Y coordinate."
        },
        "z": {
          "format": "float",
          "type": "number",
          "description": "Z coordinate (or depth)."
        }
      },
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Position"
    },
    "GoogleCloudVisionV1p2beta1Property": {
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "id": "GoogleCloudVisionV1p2beta1Property",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value of the property.",
          "type": "string"
        },
        "uint64Value": {
          "description": "Value of numeric properties.",
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "description": "Name of the property.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ImportProductSetsResponse": {
      "id": "GoogleCloudVisionV1p4beta1ImportProductSetsResponse",
      "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.",
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "Status"
          },
          "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0."
        },
        "referenceImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ReferenceImage"
          },
          "type": "array",
          "description": "The list of reference_images that are imported successfully."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1InputConfig": {
      "type": "object",
      "description": "The desired input location and metadata.",
      "id": "GoogleCloudVisionV1p4beta1InputConfig",
      "properties": {
        "content": {
          "format": "byte",
          "type": "string",
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."
        },
        "gcsSource": {
          "description": "The Google Cloud Storage location to read the input from.",
          "$ref": "GoogleCloudVisionV1p4beta1GcsSource"
        },
        "mimeType": {
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.",
          "type": "string"
        }
      }
    },
    "TextAnnotation": {
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "id": "TextAnnotation",
      "type": "object",
      "properties": {
        "pages": {
          "type": "array",
          "items": {
            "$ref": "Page"
          },
          "description": "List of pages detected by OCR."
        },
        "text": {
          "description": "UTF-8 text detected on the pages.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1Paragraph": {
      "id": "GoogleCloudVisionV1p1beta1Paragraph",
      "properties": {
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "words": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Word"
          },
          "type": "array",
          "description": "List of all words in this paragraph."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the paragraph."
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1]."
        }
      },
      "type": "object",
      "description": "Structural unit of text representing a number of words in certain order."
    },
    "LocalizedObjectAnnotation": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "boundingPoly": {
          "description": "Image region to which this object belongs. This must be populated.",
          "$ref": "BoundingPoly"
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "score": {
          "format": "float",
          "description": "Score of the result. Range [0, 1].",
          "type": "number"
        }
      },
      "id": "LocalizedObjectAnnotation",
      "type": "object",
      "description": "Set of detected objects with bounding boxes."
    },
    "GoogleCloudVisionV1p3beta1Paragraph": {
      "description": "Structural unit of text representing a number of words in certain order.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1Paragraph",
      "properties": {
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1]."
        },
        "words": {
          "type": "array",
          "description": "List of all words in this paragraph.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Word"
          }
        },
        "property": {
          "description": "Additional information detected for the paragraph.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebEntity": {
      "properties": {
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."
        },
        "description": {
          "type": "string",
          "description": "Canonical description of the entity, in English."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebEntity",
      "description": "Entity deduced from similar images on the Internet.",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "response": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        }
      },
      "type": "object",
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "EntityAnnotation": {
      "type": "object",
      "id": "EntityAnnotation",
      "properties": {
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1]."
        },
        "score": {
          "format": "float",
          "description": "Overall score of the result. Range [0, 1].",
          "type": "number"
        },
        "description": {
          "description": "Entity textual description, expressed in its `locale` language.",
          "type": "string"
        },
        "mid": {
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).",
          "type": "string"
        },
        "locale": {
          "type": "string",
          "description": "The language code for the locale in which the entity textual `description` is expressed."
        },
        "properties": {
          "items": {
            "$ref": "Property"
          },
          "type": "array",
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."
        },
        "topicality": {
          "type": "number",
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].",
          "format": "float"
        },
        "locations": {
          "type": "array",
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.",
          "items": {
            "$ref": "LocationInfo"
          }
        },
        "boundingPoly": {
          "$ref": "BoundingPoly",
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."
        }
      },
      "description": "Set of detected entity features."
    },
    "GoogleCloudVisionV1p4beta1Vertex": {
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.",
      "properties": {
        "y": {
          "type": "integer",
          "format": "int32",
          "description": "Y coordinate."
        },
        "x": {
          "format": "int32",
          "type": "integer",
          "description": "X coordinate."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Vertex"
    },
    "ProductSearchResults": {
      "properties": {
        "productGroupedResults": {
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.",
          "items": {
            "$ref": "GroupedResult"
          },
          "type": "array"
        },
        "results": {
          "items": {
            "$ref": "Result"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        },
        "indexTime": {
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "Results for a product search request.",
      "type": "object",
      "id": "ProductSearchResults"
    },
    "GoogleCloudVisionV1p4beta1DominantColorsAnnotation": {
      "id": "GoogleCloudVisionV1p4beta1DominantColorsAnnotation",
      "type": "object",
      "properties": {
        "colors": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ColorInfo"
          },
          "description": "RGB color values with their score and pixel fraction.",
          "type": "array"
        }
      },
      "description": "Set of dominant colors and their corresponding scores."
    },
    "Property": {
      "type": "object",
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the property."
        },
        "value": {
          "description": "Value of the property.",
          "type": "string"
        },
        "uint64Value": {
          "description": "Value of numeric properties.",
          "type": "string",
          "format": "uint64"
        }
      },
      "id": "Property"
    },
    "GoogleCloudVisionV1p4beta1CropHint": {
      "type": "object",
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "properties": {
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of this being a salient region. Range [0, 1]."
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale."
        },
        "importanceFraction": {
          "description": "Fraction of importance of this salient region with respect to the original image.",
          "format": "float",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1CropHint"
    },
    "GcsSource": {
      "id": "GcsSource",
      "description": "The Google Cloud Storage location where the input will be read from.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1ImageProperties": {
      "properties": {
        "dominantColors": {
          "$ref": "GoogleCloudVisionV1p2beta1DominantColorsAnnotation",
          "description": "If present, dominant colors completed successfully."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1ImageProperties",
      "description": "Stores image properties, such as dominant colors."
    },
    "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse": {
      "id": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse",
      "description": "The response for a single offline file annotation request.",
      "type": "object",
      "properties": {
        "outputConfig": {
          "description": "The output location and metadata from AsyncAnnotateFileRequest.",
          "$ref": "GoogleCloudVisionV1p1beta1OutputConfig"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1FaceAnnotation": {
      "description": "A face annotation object contains the results of face detection.",
      "type": "object",
      "properties": {
        "joyLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Joy likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "fdBoundingPoly": {
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        },
        "detectionConfidence": {
          "description": "Detection confidence. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "angerLikelihood": {
          "description": "Anger likelihood.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "panAngle": {
          "type": "number",
          "format": "float",
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]."
        },
        "rollAngle": {
          "format": "float",
          "type": "number",
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]."
        },
        "landmarks": {
          "description": "Detected face landmarks.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark"
          }
        },
        "blurredLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Blurred likelihood."
        },
        "headwearLikelihood": {
          "type": "string",
          "description": "Headwear likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "tiltAngle": {
          "format": "float",
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].",
          "type": "number"
        },
        "sorrowLikelihood": {
          "description": "Sorrow likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "boundingPoly": {
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated.",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        },
        "surpriseLikelihood": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Surprise likelihood."
        },
        "underExposedLikelihood": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Under-exposed likelihood."
        },
        "landmarkingConfidence": {
          "format": "float",
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1FaceAnnotation"
    },
    "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation": {
      "id": "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation",
      "description": "Set of detected objects with bounding boxes.",
      "type": "object",
      "properties": {
        "score": {
          "description": "Score of the result. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "boundingPoly": {
          "description": "Image region to which this object belongs. This must be populated.",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1ColorInfo": {
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1ColorInfo",
      "properties": {
        "color": {
          "$ref": "Color",
          "description": "RGB components of the color."
        },
        "score": {
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "pixelFraction": {
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebPage": {
      "description": "Metadata for web pages.",
      "properties": {
        "pageTitle": {
          "description": "Title for the web page, may contain HTML markups.",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The result web page URL."
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the web page."
        },
        "fullMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          },
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "type": "array"
        },
        "partialMatchingImages": {
          "type": "array",
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          }
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebPage"
    },
    "GoogleCloudVisionV1p1beta1Page": {
      "description": "Detected page from OCR.",
      "id": "GoogleCloudVisionV1p1beta1Page",
      "properties": {
        "height": {
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32",
          "type": "integer"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."
        },
        "property": {
          "description": "Additional information detected on the page.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty"
        },
        "confidence": {
          "description": "Confidence of the OCR results on the page. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Block"
          },
          "description": "List of blocks of text, images etc on this page."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebLabel": {
      "type": "object",
      "description": "Label to provide extra metadata for the web detection.",
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebLabel",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label for extra metadata."
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak": {
      "description": "Detected start or end of a structural component.",
      "properties": {
        "type": {
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "description": "Detected break type.",
          "type": "string",
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ]
        },
        "isPrefix": {
          "type": "boolean",
          "description": "True if break prepends the element."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak",
      "type": "object"
    },
    "PurgeProductsRequest": {
      "type": "object",
      "id": "PurgeProductsRequest",
      "properties": {
        "deleteOrphanProducts": {
          "type": "boolean",
          "description": "If delete_orphan_products is true, all Products that are not in any ProductSet will be deleted."
        },
        "force": {
          "description": "The default value is false. Override this value to true to actually perform the purge.",
          "type": "boolean"
        },
        "productSetPurgeConfig": {
          "description": "Specify which ProductSet contains the Products to be deleted.",
          "$ref": "ProductSetPurgeConfig"
        }
      },
      "description": "Request message for the `PurgeProducts` method."
    },
    "GoogleCloudVisionV1p4beta1GcsDestination": {
      "type": "object",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1GcsDestination",
      "description": "The Google Cloud Storage location where the output will be written to."
    },
    "WebLabel": {
      "properties": {
        "label": {
          "type": "string",
          "description": "Label for extra metadata."
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      },
      "type": "object",
      "id": "WebLabel",
      "description": "Label to provide extra metadata for the web detection."
    },
    "Paragraph": {
      "id": "Paragraph",
      "properties": {
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1].",
          "type": "number"
        },
        "words": {
          "description": "List of all words in this paragraph.",
          "type": "array",
          "items": {
            "$ref": "Word"
          }
        },
        "property": {
          "$ref": "TextProperty",
          "description": "Additional information detected for the paragraph."
        },
        "boundingBox": {
          "$ref": "BoundingPoly",
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        }
      },
      "description": "Structural unit of text representing a number of words in certain order.",
      "type": "object"
    },
    "LocationInfo": {
      "description": "Detected entity location information.",
      "properties": {
        "latLng": {
          "$ref": "LatLng",
          "description": "lat/long location coordinates."
        }
      },
      "type": "object",
      "id": "LocationInfo"
    },
    "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateImagesResponse": {
      "description": "Response to an async batch image annotation request.",
      "properties": {
        "outputConfig": {
          "$ref": "GoogleCloudVisionV1p4beta1OutputConfig",
          "description": "The output location and metadata from AsyncBatchAnnotateImagesRequest."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateImagesResponse"
    },
    "WebImage": {
      "description": "Metadata for online images.",
      "type": "object",
      "properties": {
        "score": {
          "description": "(Deprecated) Overall relevancy score for the image.",
          "type": "number",
          "format": "float"
        },
        "url": {
          "description": "The result image URL.",
          "type": "string"
        }
      },
      "id": "WebImage"
    },
    "GoogleCloudVisionV1p4beta1GcsSource": {
      "description": "The Google Cloud Storage location where the input will be read from.",
      "id": "GoogleCloudVisionV1p4beta1GcsSource",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      }
    },
    "KeyValue": {
      "id": "KeyValue",
      "description": "A product label represented as a key-value pair.",
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        },
        "value": {
          "type": "string",
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1Property": {
      "properties": {
        "uint64Value": {
          "format": "uint64",
          "description": "Value of numeric properties.",
          "type": "string"
        },
        "value": {
          "description": "Value of the property.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the property."
        }
      },
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "id": "GoogleCloudVisionV1p4beta1Property",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1SafeSearchAnnotation": {
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1SafeSearchAnnotation",
      "properties": {
        "spoof": {
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "adult": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "racy": {
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "medical": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that this is a medical image.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "violence": {
          "description": "Likelihood that this image contains violent content.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        }
      }
    },
    "GoogleCloudVisionV1p1beta1AnnotateImageResponse": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1AnnotateImageResponse",
      "description": "Response to an image annotation request.",
      "properties": {
        "error": {
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.",
          "$ref": "Status"
        },
        "labelAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          },
          "description": "If present, label detection has completed successfully."
        },
        "cropHintsAnnotation": {
          "$ref": "GoogleCloudVisionV1p1beta1CropHintsAnnotation",
          "description": "If present, crop hints have completed successfully."
        },
        "webDetection": {
          "description": "If present, web detection has completed successfully.",
          "$ref": "GoogleCloudVisionV1p1beta1WebDetection"
        },
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotation"
        },
        "productSearchResults": {
          "description": "If present, product search has completed successfully.",
          "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResults"
        },
        "logoAnnotations": {
          "description": "If present, logo detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          },
          "type": "array"
        },
        "faceAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1FaceAnnotation"
          },
          "description": "If present, face detection has completed successfully.",
          "type": "array"
        },
        "imagePropertiesAnnotation": {
          "description": "If present, image properties were extracted successfully.",
          "$ref": "GoogleCloudVisionV1p1beta1ImageProperties"
        },
        "landmarkAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          },
          "type": "array",
          "description": "If present, landmark detection has completed successfully."
        },
        "context": {
          "$ref": "GoogleCloudVisionV1p1beta1ImageAnnotationContext",
          "description": "If present, contextual information is needed to understand where this image comes from."
        },
        "safeSearchAnnotation": {
          "description": "If present, safe-search annotation has completed successfully.",
          "$ref": "GoogleCloudVisionV1p1beta1SafeSearchAnnotation"
        },
        "textAnnotations": {
          "description": "If present, text (OCR) detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          },
          "type": "array"
        },
        "localizedObjectAnnotations": {
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation"
          }
        }
      }
    },
    "GoogleCloudVisionV1p1beta1CropHint": {
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale."
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "type": "number"
        },
        "importanceFraction": {
          "description": "Fraction of importance of this salient region with respect to the original image.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "id": "GoogleCloudVisionV1p1beta1CropHint"
    },
    "NormalizedVertex": {
      "id": "NormalizedVertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "type": "object",
      "properties": {
        "y": {
          "format": "float",
          "type": "number",
          "description": "Y coordinate."
        },
        "x": {
          "format": "float",
          "description": "X coordinate.",
          "type": "number"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1SafeSearchAnnotation": {
      "type": "object",
      "properties": {
        "spoof": {
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "medical": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Likelihood that this is a medical image."
        },
        "adult": {
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "racy": {
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas."
        },
        "violence": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Likelihood that this image contains violent content.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        }
      },
      "id": "GoogleCloudVisionV1p4beta1SafeSearchAnnotation",
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence)."
    },
    "SafeSearchAnnotation": {
      "id": "SafeSearchAnnotation",
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).",
      "properties": {
        "spoof": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "medical": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that this is a medical image.",
          "type": "string"
        },
        "racy": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "adult": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "type": "string"
        },
        "violence": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Likelihood that this image contains violent content.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "ProductSearchParams": {
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An '=' should be used to connect the key and value. For example, \"(color = red OR color = blue) AND brand = Google\" is acceptable, but \"(color = red OR brand = Google)\" is not acceptable. \"color: red\" is not acceptable because it uses a ':' instead of an '='."
        },
        "productCategories": {
          "description": "The list of product categories to search in. Currently, we only consider the first category, and either \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\", or \"general-v1\" should be specified. The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported but will be deprecated. For new products, please use \"homegoods-v2\", \"apparel-v2\", or \"toys-v2\" for better product search accuracy. It is recommended to migrate existing products to these categories as well.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "productSet": {
          "description": "The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.",
          "type": "string"
        },
        "boundingPoly": {
          "$ref": "BoundingPoly",
          "description": "The bounding polygon around the area of interest in the image. If it is not specified, system discretion will be applied."
        }
      },
      "type": "object",
      "id": "ProductSearchParams",
      "description": "Parameters for a product search request."
    },
    "AnnotateImageResponse": {
      "id": "AnnotateImageResponse",
      "description": "Response to an image annotation request.",
      "properties": {
        "logoAnnotations": {
          "items": {
            "$ref": "EntityAnnotation"
          },
          "description": "If present, logo detection has completed successfully.",
          "type": "array"
        },
        "context": {
          "description": "If present, contextual information is needed to understand where this image comes from.",
          "$ref": "ImageAnnotationContext"
        },
        "textAnnotations": {
          "type": "array",
          "description": "If present, text (OCR) detection has completed successfully.",
          "items": {
            "$ref": "EntityAnnotation"
          }
        },
        "productSearchResults": {
          "description": "If present, product search has completed successfully.",
          "$ref": "ProductSearchResults"
        },
        "localizedObjectAnnotations": {
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.",
          "items": {
            "$ref": "LocalizedObjectAnnotation"
          },
          "type": "array"
        },
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "TextAnnotation"
        },
        "labelAnnotations": {
          "items": {
            "$ref": "EntityAnnotation"
          },
          "type": "array",
          "description": "If present, label detection has completed successfully."
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."
        },
        "cropHintsAnnotation": {
          "$ref": "CropHintsAnnotation",
          "description": "If present, crop hints have completed successfully."
        },
        "webDetection": {
          "description": "If present, web detection has completed successfully.",
          "$ref": "WebDetection"
        },
        "faceAnnotations": {
          "type": "array",
          "description": "If present, face detection has completed successfully.",
          "items": {
            "$ref": "FaceAnnotation"
          }
        },
        "safeSearchAnnotation": {
          "$ref": "SafeSearchAnnotation",
          "description": "If present, safe-search annotation has completed successfully."
        },
        "landmarkAnnotations": {
          "items": {
            "$ref": "EntityAnnotation"
          },
          "type": "array",
          "description": "If present, landmark detection has completed successfully."
        },
        "imagePropertiesAnnotation": {
          "$ref": "ImageProperties",
          "description": "If present, image properties were extracted successfully."
        }
      },
      "type": "object"
    },
    "ColorInfo": {
      "type": "object",
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.",
      "id": "ColorInfo",
      "properties": {
        "score": {
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "pixelFraction": {
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "color": {
          "description": "RGB components of the color.",
          "$ref": "Color"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage": {
      "type": "object",
      "properties": {
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of detected language. Range [0, 1].",
          "format": "float"
        }
      },
      "description": "Detected language for a structural component.",
      "id": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage"
    },
    "AnnotateFileResponse": {
      "type": "object",
      "id": "AnnotateFileResponse",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "AnnotateImageResponse"
          },
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set."
        },
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "InputConfig"
        },
        "totalPages": {
          "type": "integer",
          "description": "This field gives the total number of pages in the file.",
          "format": "int32"
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case."
        }
      },
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses."
    },
    "GoogleCloudVisionV1p1beta1Vertex": {
      "properties": {
        "y": {
          "format": "int32",
          "type": "integer",
          "description": "Y coordinate."
        },
        "x": {
          "format": "int32",
          "description": "X coordinate.",
          "type": "integer"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1Vertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image."
    },
    "TextDetectionParams": {
      "description": "Parameters for text detections. This is used to control TEXT_DETECTION and DOCUMENT_TEXT_DETECTION features.",
      "type": "object",
      "properties": {
        "advancedOcrOptions": {
          "items": {
            "type": "string"
          },
          "description": "A list of advanced OCR options to fine-tune OCR behavior.",
          "type": "array"
        },
        "enableTextDetectionConfidenceScore": {
          "description": "By default, Cloud Vision API only includes confidence score for DOCUMENT_TEXT_DETECTION result. Set the flag to true to include confidence score for TEXT_DETECTION as well.",
          "type": "boolean"
        }
      },
      "id": "TextDetectionParams"
    },
    "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty": {
      "id": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty",
      "properties": {
        "detectedLanguages": {
          "description": "A list of detected languages together with confidence.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage"
          },
          "type": "array"
        },
        "detectedBreak": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak",
          "description": "Detected start or end of a text segment."
        }
      },
      "description": "Additional information detected on the structural component.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebImage": {
      "description": "Metadata for online images.",
      "properties": {
        "url": {
          "description": "The result image URL.",
          "type": "string"
        },
        "score": {
          "description": "(Deprecated) Overall relevancy score for the image.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
    },
    "GoogleCloudVisionV1p4beta1FaceRecognitionResult": {
      "id": "GoogleCloudVisionV1p4beta1FaceRecognitionResult",
      "properties": {
        "celebrity": {
          "description": "The Celebrity that this face was matched to.",
          "$ref": "GoogleCloudVisionV1p4beta1Celebrity"
        },
        "confidence": {
          "description": "Recognition confidence. Range [0, 1].",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Information about a face's identity."
    },
    "GoogleCloudVisionV1p2beta1CropHint": {
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "properties": {
        "boundingPoly": {
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        },
        "importanceFraction": {
          "format": "float",
          "type": "number",
          "description": "Fraction of importance of this salient region with respect to the original image."
        },
        "confidence": {
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "type": "number",
          "format": "float"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1CropHint"
    },
    "GoogleCloudVisionV1p2beta1CropHintsAnnotation": {
      "type": "object",
      "properties": {
        "cropHints": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1CropHint"
          },
          "description": "Crop hint results.",
          "type": "array"
        }
      },
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "id": "GoogleCloudVisionV1p2beta1CropHintsAnnotation"
    },
    "GoogleCloudVisionV1p3beta1BatchOperationMetadata": {
      "type": "object",
      "properties": {
        "state": {
          "description": "The current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PROCESSING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Invalid.",
            "Request is actively being processed.",
            "The request is done and at least one item has been successfully processed.",
            "The request is done and no item has been successfully processed.",
            "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."
          ],
          "type": "string"
        },
        "submitTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the batch request was submitted to the server."
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true."
        }
      },
      "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.",
      "id": "GoogleCloudVisionV1p3beta1BatchOperationMetadata"
    },
    "GoogleCloudVisionV1p3beta1EntityAnnotation": {
      "id": "GoogleCloudVisionV1p3beta1EntityAnnotation",
      "description": "Set of detected entity features.",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1LocationInfo"
          },
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."
        },
        "description": {
          "description": "Entity textual description, expressed in its `locale` language.",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Property"
          },
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."
        },
        "boundingPoly": {
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features.",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "locale": {
          "type": "string",
          "description": "The language code for the locale in which the entity textual `description` is expressed."
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1]."
        },
        "mid": {
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).",
          "type": "string"
        },
        "score": {
          "type": "number",
          "description": "Overall score of the result. Range [0, 1].",
          "format": "float"
        },
        "topicality": {
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].",
          "type": "number",
          "format": "float"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1Paragraph": {
      "description": "Structural unit of text representing a number of words in certain order.",
      "properties": {
        "words": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Word"
          },
          "description": "List of all words in this paragraph."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the paragraph."
        },
        "confidence": {
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Paragraph"
    },
    "Result": {
      "description": "Information about a product.",
      "properties": {
        "product": {
          "$ref": "Product",
          "description": "The Product."
        },
        "score": {
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "type": "number",
          "format": "float"
        },
        "image": {
          "type": "string",
          "description": "The resource name of the image from the product that is the closest match to the query."
        }
      },
      "type": "object",
      "id": "Result"
    },
    "GoogleCloudVisionV1p3beta1Symbol": {
      "id": "GoogleCloudVisionV1p3beta1Symbol",
      "properties": {
        "confidence": {
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "text": {
          "description": "The actual UTF-8 representation of the symbol.",
          "type": "string"
        },
        "boundingBox": {
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "property": {
          "description": "Additional information detected for the symbol.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty"
        }
      },
      "type": "object",
      "description": "A single symbol representation."
    },
    "DominantColorsAnnotation": {
      "description": "Set of dominant colors and their corresponding scores.",
      "type": "object",
      "properties": {
        "colors": {
          "items": {
            "$ref": "ColorInfo"
          },
          "type": "array",
          "description": "RGB color values with their score and pixel fraction."
        }
      },
      "id": "DominantColorsAnnotation"
    },
    "ListProductsResponse": {
      "id": "ListProductsResponse",
      "type": "object",
      "description": "Response message for the `ListProducts` method.",
      "properties": {
        "products": {
          "description": "List of products.",
          "type": "array",
          "items": {
            "$ref": "Product"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1DominantColorsAnnotation": {
      "properties": {
        "colors": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ColorInfo"
          },
          "description": "RGB color values with their score and pixel fraction."
        }
      },
      "description": "Set of dominant colors and their corresponding scores.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1DominantColorsAnnotation"
    },
    "GoogleCloudVisionV1p1beta1Property": {
      "properties": {
        "uint64Value": {
          "format": "uint64",
          "description": "Value of numeric properties.",
          "type": "string"
        },
        "value": {
          "description": "Value of the property.",
          "type": "string"
        },
        "name": {
          "description": "Name of the property.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1Property",
      "description": "A `Property` consists of a user-supplied name/value pair."
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult": {
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult",
      "type": "object",
      "description": "Information about the products similar to a single product in a query image.",
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding polygon around the product detected in the query image."
        },
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        },
        "objectAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation"
          },
          "type": "array",
          "description": "List of generic predictions for the object in the bounding box."
        }
      }
    },
    "GoogleCloudVisionV1p2beta1TextAnnotation": {
      "id": "GoogleCloudVisionV1p2beta1TextAnnotation",
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "properties": {
        "pages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Page"
          },
          "description": "List of pages detected by OCR.",
          "type": "array"
        },
        "text": {
          "description": "UTF-8 text detected on the pages.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1ReferenceImage": {
      "id": "GoogleCloudVisionV1p4beta1ReferenceImage",
      "type": "object",
      "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.",
      "properties": {
        "boundingPolys": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
          },
          "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).",
          "type": "array"
        },
        "name": {
          "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.",
          "type": "string"
        },
        "uri": {
          "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.",
          "type": "string"
        }
      }
    },
    "Symbol": {
      "id": "Symbol",
      "properties": {
        "property": {
          "$ref": "TextProperty",
          "description": "Additional information detected for the symbol."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results for the symbol. Range [0, 1]."
        },
        "boundingBox": {
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "BoundingPoly"
        },
        "text": {
          "type": "string",
          "description": "The actual UTF-8 representation of the symbol."
        }
      },
      "description": "A single symbol representation.",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult",
      "description": "Information about the products similar to a single product in a query image.",
      "properties": {
        "objectAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation"
          },
          "description": "List of generic predictions for the object in the bounding box."
        },
        "results": {
          "description": "List of results, one for each product match.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult"
          }
        },
        "boundingPoly": {
          "description": "The bounding polygon around the product detected in the query image.",
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly"
        }
      }
    },
    "GroupedResult": {
      "id": "GroupedResult",
      "type": "object",
      "description": "Information about the products similar to a single product in a query image.",
      "properties": {
        "boundingPoly": {
          "$ref": "BoundingPoly",
          "description": "The bounding polygon around the product detected in the query image."
        },
        "objectAnnotations": {
          "type": "array",
          "items": {
            "$ref": "ObjectAnnotation"
          },
          "description": "List of generic predictions for the object in the bounding box."
        },
        "results": {
          "items": {
            "$ref": "Result"
          },
          "type": "array",
          "description": "List of results, one for each product match."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebEntity": {
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebEntity",
      "description": "Entity deduced from similar images on the Internet.",
      "properties": {
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "description": {
          "description": "Canonical description of the entity, in English.",
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1FaceAnnotation": {
      "properties": {
        "surpriseLikelihood": {
          "description": "Surprise likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "tiltAngle": {
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].",
          "format": "float",
          "type": "number"
        },
        "rollAngle": {
          "type": "number",
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].",
          "format": "float"
        },
        "headwearLikelihood": {
          "type": "string",
          "description": "Headwear likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "landmarks": {
          "description": "Detected face landmarks.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark"
          }
        },
        "joyLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Joy likelihood."
        },
        "fdBoundingPoly": {
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "panAngle": {
          "format": "float",
          "type": "number",
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]."
        },
        "sorrowLikelihood": {
          "description": "Sorrow likelihood.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "angerLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Anger likelihood."
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        },
        "detectionConfidence": {
          "description": "Detection confidence. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "landmarkingConfidence": {
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "blurredLikelihood": {
          "description": "Blurred likelihood.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "underExposedLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Under-exposed likelihood."
        }
      },
      "description": "A face annotation object contains the results of face detection.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1FaceAnnotation"
    },
    "GoogleCloudVisionV1p3beta1GcsDestination": {
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1GcsDestination",
      "description": "The Google Cloud Storage location where the output will be written to."
    },
    "Word": {
      "properties": {
        "property": {
          "description": "Additional information detected for the word.",
          "$ref": "TextProperty"
        },
        "confidence": {
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "boundingBox": {
          "$ref": "BoundingPoly",
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "symbols": {
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order.",
          "type": "array",
          "items": {
            "$ref": "Symbol"
          }
        }
      },
      "type": "object",
      "id": "Word",
      "description": "A word representation."
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebPage": {
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebPage",
      "properties": {
        "score": {
          "format": "float",
          "type": "number",
          "description": "(Deprecated) Overall relevancy score for the web page."
        },
        "partialMatchingImages": {
          "type": "array",
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          }
        },
        "url": {
          "type": "string",
          "description": "The result web page URL."
        },
        "fullMatchingImages": {
          "type": "array",
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          }
        },
        "pageTitle": {
          "type": "string",
          "description": "Title for the web page, may contain HTML markups."
        }
      },
      "type": "object",
      "description": "Metadata for web pages."
    },
    "ObjectAnnotation": {
      "id": "ObjectAnnotation",
      "type": "object",
      "properties": {
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "score": {
          "description": "Score of the result. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      },
      "description": "Prediction for what the object in the bounding box is."
    },
    "Position": {
      "id": "Position",
      "properties": {
        "z": {
          "type": "number",
          "description": "Z coordinate (or depth).",
          "format": "float"
        },
        "x": {
          "format": "float",
          "type": "number",
          "description": "X coordinate."
        },
        "y": {
          "description": "Y coordinate.",
          "type": "number",
          "format": "float"
        }
      },
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1BatchAnnotateFilesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1AnnotateFileResponse"
          },
          "type": "array",
          "description": "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1BatchAnnotateFilesResponse",
      "description": "A list of file annotation responses."
    },
    "GoogleCloudVisionV1p4beta1EntityAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1EntityAnnotation",
      "properties": {
        "topicality": {
          "format": "float",
          "type": "number",
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1]."
        },
        "confidence": {
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "locale": {
          "type": "string",
          "description": "The language code for the locale in which the entity textual `description` is expressed."
        },
        "properties": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Property"
          },
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.",
          "type": "array"
        },
        "score": {
          "format": "float",
          "description": "Overall score of the result. Range [0, 1].",
          "type": "number"
        },
        "description": {
          "type": "string",
          "description": "Entity textual description, expressed in its `locale` language."
        },
        "mid": {
          "type": "string",
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1LocationInfo"
          },
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."
        },
        "boundingPoly": {
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features.",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        }
      },
      "description": "Set of detected entity features."
    },
    "GoogleCloudVisionV1p1beta1ImageAnnotationContext": {
      "type": "object",
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the file used to produce the image."
        },
        "pageNumber": {
          "type": "integer",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.",
          "format": "int32"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1ImageAnnotationContext"
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebPage": {
      "type": "object",
      "description": "Metadata for web pages.",
      "properties": {
        "partialMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "type": "array"
        },
        "fullMatchingImages": {
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "type": "array"
        },
        "url": {
          "description": "The result web page URL.",
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the web page."
        },
        "pageTitle": {
          "type": "string",
          "description": "Title for the web page, may contain HTML markups."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebPage"
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResultsResult": {
      "description": "Information about a product.",
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult",
      "properties": {
        "product": {
          "$ref": "GoogleCloudVisionV1p4beta1Product",
          "description": "The Product."
        },
        "image": {
          "type": "string",
          "description": "The resource name of the image from the product that is the closest match to the query."
        },
        "score": {
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "items": {
            "$ref": "Operation"
          },
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "WebDetectionParams": {
      "type": "object",
      "id": "WebDetectionParams",
      "description": "Parameters for web detection request.",
      "properties": {
        "includeGeoResults": {
          "type": "boolean",
          "description": "Whether to include results derived from the geo information in the image."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1AnnotateImageResponse": {
      "id": "GoogleCloudVisionV1p3beta1AnnotateImageResponse",
      "type": "object",
      "properties": {
        "productSearchResults": {
          "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResults",
          "description": "If present, product search has completed successfully."
        },
        "landmarkAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          },
          "type": "array",
          "description": "If present, landmark detection has completed successfully."
        },
        "fullTextAnnotation": {
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotation",
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text."
        },
        "labelAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          },
          "description": "If present, label detection has completed successfully.",
          "type": "array"
        },
        "textAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          },
          "description": "If present, text (OCR) detection has completed successfully.",
          "type": "array"
        },
        "context": {
          "description": "If present, contextual information is needed to understand where this image comes from.",
          "$ref": "GoogleCloudVisionV1p3beta1ImageAnnotationContext"
        },
        "webDetection": {
          "$ref": "GoogleCloudVisionV1p3beta1WebDetection",
          "description": "If present, web detection has completed successfully."
        },
        "localizedObjectAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation"
          },
          "type": "array",
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."
        },
        "error": {
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.",
          "$ref": "Status"
        },
        "imagePropertiesAnnotation": {
          "description": "If present, image properties were extracted successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1ImageProperties"
        },
        "safeSearchAnnotation": {
          "description": "If present, safe-search annotation has completed successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1SafeSearchAnnotation"
        },
        "logoAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          },
          "description": "If present, logo detection has completed successfully."
        },
        "faceAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1FaceAnnotation"
          },
          "type": "array",
          "description": "If present, face detection has completed successfully."
        },
        "cropHintsAnnotation": {
          "$ref": "GoogleCloudVisionV1p3beta1CropHintsAnnotation",
          "description": "If present, crop hints have completed successfully."
        }
      },
      "description": "Response to an image annotation request."
    },
    "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark",
      "properties": {
        "position": {
          "$ref": "GoogleCloudVisionV1p4beta1Position",
          "description": "Face landmark position."
        },
        "type": {
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ],
          "type": "string",
          "description": "Face landmark type.",
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ]
        }
      },
      "description": "A face-specific landmark (for example, a face feature)."
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebLabel": {
      "description": "Label to provide extra metadata for the web detection.",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "label": {
          "type": "string",
          "description": "Label for extra metadata."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebLabel",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1Block": {
      "description": "Logical element on the page.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Block",
      "properties": {
        "confidence": {
          "description": "Confidence of the OCR results on the block. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "boundingBox": {
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        },
        "blockType": {
          "description": "Detected block type (text, image etc) for this block.",
          "type": "string",
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ],
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ]
        },
        "paragraphs": {
          "description": "List of paragraphs in this block (if this blocks is of type text).",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Paragraph"
          },
          "type": "array"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the block."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebImage": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebImage",
      "description": "Metadata for online images.",
      "properties": {
        "score": {
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the image.",
          "type": "number"
        },
        "url": {
          "type": "string",
          "description": "The result image URL."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1TextAnnotation": {
      "type": "object",
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "properties": {
        "pages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Page"
          },
          "type": "array",
          "description": "List of pages detected by OCR."
        },
        "text": {
          "type": "string",
          "description": "UTF-8 text detected on the pages."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1TextAnnotation"
    },
    "CancelOperationRequest": {
      "properties": {},
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1InputConfig": {
      "type": "object",
      "description": "The desired input location and metadata.",
      "id": "GoogleCloudVisionV1p3beta1InputConfig",
      "properties": {
        "mimeType": {
          "type": "string",
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported."
        },
        "content": {
          "format": "byte",
          "type": "string",
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."
        },
        "gcsSource": {
          "$ref": "GoogleCloudVisionV1p3beta1GcsSource",
          "description": "The Google Cloud Storage location to read the input from."
        }
      }
    },
    "Status": {
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1Vertex": {
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.",
      "type": "object",
      "properties": {
        "x": {
          "type": "integer",
          "format": "int32",
          "description": "X coordinate."
        },
        "y": {
          "format": "int32",
          "type": "integer",
          "description": "Y coordinate."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1Vertex"
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebLabel": {
      "type": "object",
      "description": "Label to provide extra metadata for the web detection.",
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebLabel",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label for extra metadata."
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      }
    },
    "GoogleCloudVisionV1p2beta1NormalizedVertex": {
      "id": "GoogleCloudVisionV1p2beta1NormalizedVertex",
      "properties": {
        "y": {
          "format": "float",
          "type": "number",
          "description": "Y coordinate."
        },
        "x": {
          "format": "float",
          "description": "X coordinate.",
          "type": "number"
        }
      },
      "type": "object",
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1."
    },
    "AsyncBatchAnnotateFilesResponse": {
      "id": "AsyncBatchAnnotateFilesResponse",
      "type": "object",
      "description": "Response to an async batch file annotation request.",
      "properties": {
        "responses": {
          "items": {
            "$ref": "AsyncAnnotateFileResponse"
          },
          "type": "array",
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak": {
      "id": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "description": "Detected break type.",
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ]
        },
        "isPrefix": {
          "type": "boolean",
          "description": "True if break prepends the element."
        }
      },
      "description": "Detected start or end of a structural component."
    },
    "CropHintsAnnotation": {
      "id": "CropHintsAnnotation",
      "type": "object",
      "properties": {
        "cropHints": {
          "description": "Crop hint results.",
          "items": {
            "$ref": "CropHint"
          },
          "type": "array"
        }
      },
      "description": "Set of crop hints that are used to generate new crops when serving images."
    },
    "AsyncAnnotateFileRequest": {
      "description": "An offline file annotation request.",
      "type": "object",
      "properties": {
        "features": {
          "description": "Required. Requested features.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        },
        "outputConfig": {
          "description": "Required. The desired output location and metadata (e.g. format).",
          "$ref": "OutputConfig"
        },
        "inputConfig": {
          "description": "Required. Information about the input file.",
          "$ref": "InputConfig"
        },
        "imageContext": {
          "description": "Additional context that may accompany the image(s) in the file.",
          "$ref": "ImageContext"
        }
      },
      "id": "AsyncAnnotateFileRequest"
    },
    "GoogleCloudVisionV1p3beta1ProductKeyValue": {
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1ProductKeyValue",
      "description": "A product label represented as a key-value pair.",
      "properties": {
        "value": {
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        },
        "key": {
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation": {
      "description": "Prediction for what the object in the bounding box is.",
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "description": "Score of the result. Range [0, 1].",
          "format": "float"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation"
    },
    "ImageContext": {
      "description": "Image context and/or feature-specific parameters.",
      "properties": {
        "latLongRect": {
          "$ref": "LatLongRect",
          "description": "Not used."
        },
        "languageHints": {
          "type": "array",
          "description": "List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting `language_hints` is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported languages](https://cloud.google.com/vision/docs/languages).",
          "items": {
            "type": "string"
          }
        },
        "productSearchParams": {
          "description": "Parameters for product search.",
          "$ref": "ProductSearchParams"
        },
        "webDetectionParams": {
          "$ref": "WebDetectionParams",
          "description": "Parameters for web detection."
        },
        "cropHintsParams": {
          "description": "Parameters for crop hints annotation request.",
          "$ref": "CropHintsParams"
        },
        "textDetectionParams": {
          "$ref": "TextDetectionParams",
          "description": "Parameters for text detection and document text detection."
        }
      },
      "id": "ImageContext",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1InputConfig": {
      "id": "GoogleCloudVisionV1p2beta1InputConfig",
      "type": "object",
      "properties": {
        "content": {
          "format": "byte",
          "type": "string",
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."
        },
        "gcsSource": {
          "$ref": "GoogleCloudVisionV1p2beta1GcsSource",
          "description": "The Google Cloud Storage location to read the input from."
        },
        "mimeType": {
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.",
          "type": "string"
        }
      },
      "description": "The desired input location and metadata."
    },
    "ImportProductSetsResponse": {
      "id": "ImportProductSetsResponse",
      "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.",
      "properties": {
        "referenceImages": {
          "items": {
            "$ref": "ReferenceImage"
          },
          "type": "array",
          "description": "The list of reference_images that are imported successfully."
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "Status"
          },
          "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage": {
      "type": "object",
      "description": "Detected language for a structural component.",
      "id": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of detected language. Range [0, 1].",
          "format": "float"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1Position": {
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "properties": {
        "z": {
          "type": "number",
          "description": "Z coordinate (or depth).",
          "format": "float"
        },
        "y": {
          "format": "float",
          "description": "Y coordinate.",
          "type": "number"
        },
        "x": {
          "type": "number",
          "format": "float",
          "description": "X coordinate."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Position"
    },
    "GoogleCloudVisionV1p4beta1Symbol": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Symbol",
      "properties": {
        "property": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the symbol."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "format": "float"
        },
        "text": {
          "description": "The actual UTF-8 representation of the symbol.",
          "type": "string"
        }
      },
      "description": "A single symbol representation."
    },
    "AsyncBatchAnnotateImagesResponse": {
      "properties": {
        "outputConfig": {
          "$ref": "OutputConfig",
          "description": "The output location and metadata from AsyncBatchAnnotateImagesRequest."
        }
      },
      "description": "Response to an async batch image annotation request.",
      "type": "object",
      "id": "AsyncBatchAnnotateImagesResponse"
    },
    "GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse"
          },
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."
        }
      },
      "description": "Response to an async batch file annotation request."
    },
    "Vertex": {
      "type": "object",
      "properties": {
        "y": {
          "type": "integer",
          "description": "Y coordinate.",
          "format": "int32"
        },
        "x": {
          "type": "integer",
          "description": "X coordinate.",
          "format": "int32"
        }
      },
      "id": "Vertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image."
    },
    "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage": {
      "id": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage",
      "properties": {
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of detected language. Range [0, 1]."
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      },
      "description": "Detected language for a structural component.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1ImageAnnotationContext": {
      "type": "object",
      "properties": {
        "pageNumber": {
          "format": "int32",
          "type": "integer",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."
        },
        "uri": {
          "type": "string",
          "description": "The URI of the file used to produce the image."
        }
      },
      "id": "GoogleCloudVisionV1p2beta1ImageAnnotationContext",
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image."
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResults": {
      "properties": {
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult"
          },
          "type": "array",
          "description": "List of results, one for each product match."
        },
        "productGroupedResults": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult"
          },
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."
        },
        "indexTime": {
          "type": "string",
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "format": "google-datetime"
        }
      },
      "description": "Results for a product search request.",
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResults",
      "type": "object"
    },
    "ListProductsInProductSetResponse": {
      "properties": {
        "products": {
          "description": "The list of Products.",
          "type": "array",
          "items": {
            "$ref": "Product"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        }
      },
      "id": "ListProductsInProductSetResponse",
      "type": "object",
      "description": "Response message for the `ListProductsInProductSet` method."
    },
    "GoogleCloudVisionV1p1beta1TextAnnotation": {
      "id": "GoogleCloudVisionV1p1beta1TextAnnotation",
      "properties": {
        "pages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Page"
          },
          "type": "array",
          "description": "List of pages detected by OCR."
        },
        "text": {
          "type": "string",
          "description": "UTF-8 text detected on the pages."
        }
      },
      "type": "object",
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail."
    },
    "ImportProductSetsGcsSource": {
      "properties": {
        "csvFileUri": {
          "type": "string",
          "description": "The Google Cloud Storage URI of the input csv file. The URI must start with `gs://`. The format of the input csv file should be one image per line. In each line, there are 8 columns. 1. image-uri 2. image-id 3. product-set-id 4. product-id 5. product-category 6. product-display-name 7. labels 8. bounding-poly The `image-uri`, `product-set-id`, `product-id`, and `product-category` columns are required. All other columns are optional. If the `ProductSet` or `Product` specified by the `product-set-id` and `product-id` values does not exist, then the system will create a new `ProductSet` or `Product` for the image. In this case, the `product-display-name` column refers to display_name, the `product-category` column refers to product_category, and the `labels` column refers to product_labels. The `image-id` column is optional but must be unique if provided. If it is empty, the system will automatically assign a unique id to the image. The `product-display-name` column is optional. If it is empty, the system sets the display_name field for the product to a space (\" \"). You can update the `display_name` later by using the API. If a `Product` with the specified `product-id` already exists, then the system ignores the `product-display-name`, `product-category`, and `labels` columns. The `labels` column (optional) is a line containing a list of comma-separated key-value pairs, in the following format: \"key_1=value_1,key_2=value_2,...,key_n=value_n\" The `bounding-poly` column (optional) identifies one region of interest from the image in the same manner as `CreateReferenceImage`. If you do not specify the `bounding-poly` column, then the system will try to detect regions of interest automatically. At most one `bounding-poly` column is allowed per line. If the image contains multiple regions of interest, add a line to the CSV file that includes the same product information, and the `bounding-poly` values for each region of interest. The `bounding-poly` column must contain an even number of comma-separated numbers, in the format \"p1_x,p1_y,p2_x,p2_y,...,pn_x,pn_y\". Use non-negative integers for absolute bounding polygons, and float values in [0, 1] for normalized bounding polygons. The system will resize the image if the image resolution is too large to process (larger than 20MP)."
        }
      },
      "id": "ImportProductSetsGcsSource",
      "description": "The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1SafeSearchAnnotation": {
      "properties": {
        "adult": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "violence": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that this image contains violent content.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "spoof": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive."
        },
        "medical": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Likelihood that this is a medical image.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "racy": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        }
      },
      "type": "object",
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).",
      "id": "GoogleCloudVisionV1p2beta1SafeSearchAnnotation"
    },
    "GoogleCloudVisionV1p1beta1EntityAnnotation": {
      "id": "GoogleCloudVisionV1p1beta1EntityAnnotation",
      "properties": {
        "score": {
          "format": "float",
          "type": "number",
          "description": "Overall score of the result. Range [0, 1]."
        },
        "description": {
          "description": "Entity textual description, expressed in its `locale` language.",
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Property"
          },
          "type": "array",
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."
        },
        "locale": {
          "description": "The language code for the locale in which the entity textual `description` is expressed.",
          "type": "string"
        },
        "locations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1LocationInfo"
          },
          "type": "array",
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."
        },
        "topicality": {
          "type": "number",
          "format": "float",
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1]."
        },
        "mid": {
          "type": "string",
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
        },
        "confidence": {
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."
        }
      },
      "type": "object",
      "description": "Set of detected entity features."
    },
    "GoogleCloudVisionV1p3beta1ImportProductSetsResponse": {
      "properties": {
        "statuses": {
          "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.",
          "type": "array",
          "items": {
            "$ref": "Status"
          }
        },
        "referenceImages": {
          "description": "The list of reference_images that are imported successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ReferenceImage"
          }
        }
      },
      "type": "object",
      "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.",
      "id": "GoogleCloudVisionV1p3beta1ImportProductSetsResponse"
    },
    "GoogleCloudVisionV1p1beta1InputConfig": {
      "id": "GoogleCloudVisionV1p1beta1InputConfig",
      "type": "object",
      "description": "The desired input location and metadata.",
      "properties": {
        "gcsSource": {
          "description": "The Google Cloud Storage location to read the input from.",
          "$ref": "GoogleCloudVisionV1p1beta1GcsSource"
        },
        "mimeType": {
          "type": "string",
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported."
        },
        "content": {
          "type": "string",
          "format": "byte",
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."
        }
      }
    },
    "Block": {
      "description": "Logical element on the page.",
      "properties": {
        "property": {
          "description": "Additional information detected for the block.",
          "$ref": "TextProperty"
        },
        "paragraphs": {
          "items": {
            "$ref": "Paragraph"
          },
          "description": "List of paragraphs in this block (if this blocks is of type text).",
          "type": "array"
        },
        "boundingBox": {
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "BoundingPoly"
        },
        "blockType": {
          "description": "Detected block type (text, image etc) for this block.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ],
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ]
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results on the block. Range [0, 1]."
        }
      },
      "type": "object",
      "id": "Block"
    },
    "GoogleCloudVisionV1p4beta1AnnotateImageResponse": {
      "id": "GoogleCloudVisionV1p4beta1AnnotateImageResponse",
      "description": "Response to an image annotation request.",
      "properties": {
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotation"
        },
        "productSearchResults": {
          "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResults",
          "description": "If present, product search has completed successfully."
        },
        "context": {
          "$ref": "GoogleCloudVisionV1p4beta1ImageAnnotationContext",
          "description": "If present, contextual information is needed to understand where this image comes from."
        },
        "labelAnnotations": {
          "description": "If present, label detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          },
          "type": "array"
        },
        "textAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          },
          "type": "array",
          "description": "If present, text (OCR) detection has completed successfully."
        },
        "localizedObjectAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation"
          },
          "type": "array",
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."
        },
        "landmarkAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          },
          "type": "array",
          "description": "If present, landmark detection has completed successfully."
        },
        "logoAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          },
          "type": "array",
          "description": "If present, logo detection has completed successfully."
        },
        "error": {
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.",
          "$ref": "Status"
        },
        "imagePropertiesAnnotation": {
          "description": "If present, image properties were extracted successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1ImageProperties"
        },
        "cropHintsAnnotation": {
          "description": "If present, crop hints have completed successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1CropHintsAnnotation"
        },
        "faceAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1FaceAnnotation"
          },
          "description": "If present, face detection has completed successfully."
        },
        "safeSearchAnnotation": {
          "$ref": "GoogleCloudVisionV1p4beta1SafeSearchAnnotation",
          "description": "If present, safe-search annotation has completed successfully."
        },
        "webDetection": {
          "description": "If present, web detection has completed successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1WebDetection"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1ImageProperties": {
      "id": "GoogleCloudVisionV1p1beta1ImageProperties",
      "properties": {
        "dominantColors": {
          "$ref": "GoogleCloudVisionV1p1beta1DominantColorsAnnotation",
          "description": "If present, dominant colors completed successfully."
        }
      },
      "type": "object",
      "description": "Stores image properties, such as dominant colors."
    }
  },
  "baseUrl": "https://vision.googleapis.com/",
  "basePath": "",
  "parameters": {
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    }
  },
  "mtlsRootUrl": "https://vision.mtls.googleapis.com/"
}

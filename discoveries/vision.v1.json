{
  "baseUrl": "https://vision.googleapis.com/",
  "rootUrl": "https://vision.googleapis.com/",
  "resources": {
    "files": {
      "methods": {
        "asyncBatchAnnotate": {
          "id": "vision.files.asyncBatchAnnotate",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "response": {
            "$ref": "Operation"
          },
          "request": {
            "$ref": "AsyncBatchAnnotateFilesRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "path": "v1/files:asyncBatchAnnotate",
          "flatPath": "v1/files:asyncBatchAnnotate",
          "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results)."
        },
        "annotate": {
          "response": {
            "$ref": "BatchAnnotateFilesResponse"
          },
          "parameters": {},
          "request": {
            "$ref": "BatchAnnotateFilesRequest"
          },
          "flatPath": "v1/files:annotate",
          "path": "v1/files:annotate",
          "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "httpMethod": "POST",
          "id": "vision.files.annotate"
        }
      }
    },
    "operations": {
      "methods": {
        "cancel": {
          "path": "v1/{+name}:cancel",
          "parameters": {
            "name": {
              "location": "path",
              "required": true,
              "pattern": "^operations/.*$",
              "type": "string",
              "description": "The name of the operation resource to be cancelled."
            }
          },
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "flatPath": "v1/operations/{operationsId}:cancel",
          "response": {
            "$ref": "Empty"
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "id": "vision.operations.cancel",
          "request": {
            "$ref": "CancelOperationRequest"
          }
        },
        "list": {
          "parameters": {
            "pageToken": {
              "description": "The standard list page token.",
              "location": "query",
              "type": "string"
            },
            "name": {
              "required": true,
              "pattern": "^operations$",
              "location": "path",
              "description": "The name of the operation's parent resource.",
              "type": "string"
            },
            "pageSize": {
              "description": "The standard list page size.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "filter": {
              "description": "The standard list filter.",
              "type": "string",
              "location": "query"
            }
          },
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "flatPath": "v1/operations",
          "id": "vision.operations.list",
          "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "response": {
            "$ref": "ListOperationsResponse"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "httpMethod": "GET",
          "flatPath": "v1/operations/{operationsId}",
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "id": "vision.operations.get",
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Operation"
          },
          "parameters": {
            "name": {
              "pattern": "^operations/[^/]+$",
              "type": "string",
              "description": "The name of the operation resource.",
              "location": "path",
              "required": true
            }
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "id": "vision.operations.delete",
          "flatPath": "v1/operations/{operationsId}",
          "httpMethod": "DELETE",
          "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
          "parameters": {
            "name": {
              "pattern": "^operations/.*$",
              "description": "The name of the operation resource to be deleted.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "v1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Empty"
          }
        }
      }
    },
    "locations": {
      "resources": {
        "operations": {
          "methods": {
            "get": {
              "response": {
                "$ref": "Operation"
              },
              "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/locations/{locationsId}/operations/{operationsId}",
              "parameters": {
                "name": {
                  "description": "The name of the operation resource.",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^locations/[^/]+/operations/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "id": "vision.locations.operations.get",
              "path": "v1/{+name}"
            }
          }
        }
      }
    },
    "images": {
      "methods": {
        "asyncBatchAnnotate": {
          "httpMethod": "POST",
          "parameters": {},
          "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
          "flatPath": "v1/images:asyncBatchAnnotate",
          "id": "vision.images.asyncBatchAnnotate",
          "path": "v1/images:asyncBatchAnnotate",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "request": {
            "$ref": "AsyncBatchAnnotateImagesRequest"
          },
          "response": {
            "$ref": "Operation"
          },
          "parameterOrder": []
        },
        "annotate": {
          "httpMethod": "POST",
          "request": {
            "$ref": "BatchAnnotateImagesRequest"
          },
          "flatPath": "v1/images:annotate",
          "path": "v1/images:annotate",
          "response": {
            "$ref": "BatchAnnotateImagesResponse"
          },
          "id": "vision.images.annotate",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-vision"
          ],
          "parameters": {},
          "description": "Run image detection and annotation for a batch of images.",
          "parameterOrder": []
        }
      }
    },
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "httpMethod": "GET",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "The name of the operation resource.",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "vision.projects.locations.operations.get"
                }
              }
            },
            "images": {
              "methods": {
                "annotate": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/images:annotate",
                  "description": "Run image detection and annotation for a batch of images.",
                  "id": "vision.projects.locations.images.annotate",
                  "response": {
                    "$ref": "BatchAnnotateImagesResponse"
                  },
                  "request": {
                    "$ref": "BatchAnnotateImagesRequest"
                  },
                  "parameters": {
                    "parent": {
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+parent}/images:annotate",
                  "httpMethod": "POST"
                },
                "asyncBatchAnnotate": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/images:asyncBatchAnnotate",
                  "path": "v1/{+parent}/images:asyncBatchAnnotate",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
                    }
                  },
                  "id": "vision.projects.locations.images.asyncBatchAnnotate",
                  "request": {
                    "$ref": "AsyncBatchAnnotateImagesRequest"
                  },
                  "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Operation"
                  }
                }
              }
            },
            "files": {
              "methods": {
                "annotate": {
                  "response": {
                    "$ref": "BatchAnnotateFilesResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
                  "request": {
                    "$ref": "BatchAnnotateFilesRequest"
                  },
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/files:annotate",
                  "path": "v1/{+parent}/files:annotate",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "id": "vision.projects.locations.files.annotate"
                },
                "asyncBatchAnnotate": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
                  "path": "v1/{+parent}/files:asyncBatchAnnotate",
                  "request": {
                    "$ref": "AsyncBatchAnnotateFilesRequest"
                  },
                  "id": "vision.projects.locations.files.asyncBatchAnnotate",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/files:asyncBatchAnnotate"
                }
              }
            },
            "products": {
              "methods": {
                "purge": {
                  "description": "Asynchronous API to delete all Products in a ProductSet or all Products that are in no ProductSet. If a Product is a member of the specified ProductSet in addition to other ProductSets, the Product will still be deleted. It is recommended to not delete the specified ProductSet until after this operation has completed. It is also recommended to not add any of the Products involved in the batch delete to a new ProductSet while this operation is running because those Products may still end up deleted. It's not possible to undo the PurgeProducts operation. Therefore, it is recommended to keep the csv files used in ImportProductSets (if that was how you originally built the Product Set) before starting PurgeProducts, in case you need to re-import the data after deletion. If the plan is to purge all of the Products from a ProductSet and then re-use the empty ProductSet to re-import new Products into the empty ProductSet, you must wait until the PurgeProducts operation has finished for that ProductSet. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress)",
                  "path": "v1/{+parent}/products:purge",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "request": {
                    "$ref": "PurgeProductsRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "parent": {
                      "description": "Required. The project and location in which the Products should be deleted. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "httpMethod": "POST",
                  "id": "vision.projects.locations.products.purge",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products:purge"
                },
                "create": {
                  "id": "vision.projects.locations.products.create",
                  "description": "Creates and returns a new product resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is missing or invalid.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "productId": {
                      "location": "query",
                      "type": "string",
                      "description": "A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`."
                    },
                    "parent": {
                      "description": "Required. The project in which the Product should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "path": "v1/{+parent}/products",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products",
                  "response": {
                    "$ref": "Product"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Product"
                  }
                },
                "delete": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                      "description": "Required. Resource name of product to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "vision.projects.locations.products.delete",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
                  "description": "Permanently deletes a product and its reference images. Metadata of the product and all its images will be deleted right away, but search queries against ProductSets containing the product may still work until all related caches are refreshed.",
                  "httpMethod": "DELETE"
                },
                "patch": {
                  "description": "Makes changes to a Product resource. Only the `display_name`, `description`, and `labels` fields can be updated right now. If labels are updated, the change will not be reflected in queries until the next index time. Possible errors: * Returns NOT_FOUND if the Product does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but is missing from the request or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is present in update_mask but is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is present in update_mask.",
                  "parameters": {
                    "updateMask": {
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string",
                      "description": "The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask paths include `product_labels`, `display_name`, and `description`."
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                      "type": "string",
                      "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "PATCH",
                  "request": {
                    "$ref": "Product"
                  },
                  "id": "vision.projects.locations.products.patch",
                  "response": {
                    "$ref": "Product"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
                  "path": "v1/{+name}"
                },
                "list": {
                  "httpMethod": "GET",
                  "description": "Lists products in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.",
                  "parameters": {
                    "parent": {
                      "description": "Required. The project OR ProductSet from which Products should be listed. Format: `projects/PROJECT_ID/locations/LOC_ID`",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "pageToken": {
                      "description": "The next_page_token returned from a previous List request, if any.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "description": "The maximum number of items to return. Default 10, maximum 100.",
                      "type": "integer"
                    }
                  },
                  "id": "vision.projects.locations.products.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products",
                  "path": "v1/{+parent}/products",
                  "response": {
                    "$ref": "ListProductsResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
                  "description": "Gets information associated with a Product. Possible errors: * Returns NOT_FOUND if the Product does not exist.",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Required. Resource name of the Product to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`"
                    }
                  },
                  "id": "vision.projects.locations.products.get",
                  "response": {
                    "$ref": "Product"
                  }
                }
              },
              "resources": {
                "referenceImages": {
                  "methods": {
                    "get": {
                      "description": "Gets information associated with a ReferenceImage. Possible errors: * Returns NOT_FOUND if the specified image does not exist.",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "ReferenceImage"
                      },
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Required. The resource name of the ReferenceImage to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+/referenceImages/[^/]+$"
                        }
                      },
                      "id": "vision.projects.locations.products.referenceImages.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages/{referenceImagesId}",
                      "path": "v1/{+name}"
                    },
                    "create": {
                      "parameters": {
                        "referenceImageId": {
                          "description": "A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "description": "Required. Resource name of the product in which to create the reference image. Format is `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`."
                        }
                      },
                      "path": "v1/{+parent}/referenceImages",
                      "request": {
                        "$ref": "ReferenceImage"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages",
                      "id": "vision.projects.locations.products.referenceImages.create",
                      "description": "Creates and returns a new ReferenceImage resource. The `bounding_poly` field is optional. If `bounding_poly` is not specified, the system will try to detect regions of interest in the image that are compatible with the product_category on the parent product. If it is specified, detection is ALWAYS skipped. The system converts polygons into non-rotated rectangles. Note that the pipeline will resize the image if the image resolution is too large to process (above 50MP). Possible errors: * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if the product does not exist. * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing compatible with the parent product's product_category is detected. * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "ReferenceImage"
                      }
                    },
                    "list": {
                      "response": {
                        "$ref": "ListReferenceImagesResponse"
                      },
                      "parameters": {
                        "parent": {
                          "description": "Required. Resource name of the product containing the reference images. Format is `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+$",
                          "location": "path",
                          "type": "string"
                        },
                        "pageToken": {
                          "description": "A token identifying a page of results to be returned. This is the value of `nextPageToken` returned in a previous reference image list request. Defaults to the first page if not specified.",
                          "type": "string",
                          "location": "query"
                        },
                        "pageSize": {
                          "location": "query",
                          "format": "int32",
                          "type": "integer",
                          "description": "The maximum number of items to return. Default 10, maximum 100."
                        }
                      },
                      "path": "v1/{+parent}/referenceImages",
                      "httpMethod": "GET",
                      "id": "vision.projects.locations.products.referenceImages.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists reference images. Possible errors: * Returns NOT_FOUND if the parent product does not exist. * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less than 1."
                    },
                    "delete": {
                      "response": {
                        "$ref": "Empty"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages/{referenceImagesId}",
                      "description": "Permanently deletes a reference image. The image metadata will be deleted right away, but search queries against ProductSets containing the image may still work until all related caches are refreshed. The actual image files are not deleted from Google Cloud Storage.",
                      "id": "vision.projects.locations.products.referenceImages.delete",
                      "httpMethod": "DELETE",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/products/[^/]+/referenceImages/[^/]+$",
                          "description": "Required. The resource name of the reference image to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ],
                      "path": "v1/{+name}"
                    }
                  }
                }
              }
            },
            "productSets": {
              "methods": {
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "id": "vision.projects.locations.productSets.get",
                  "response": {
                    "$ref": "ProductSet"
                  },
                  "description": "Gets information associated with a ProductSet. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist.",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
                  "path": "v1/{+name}",
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "Required. Resource name of the ProductSet to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$"
                    }
                  },
                  "httpMethod": "GET"
                },
                "addProduct": {
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "location": "path"
                    }
                  },
                  "id": "vision.projects.locations.productSets.addProduct",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "AddProductToProductSetRequest"
                  },
                  "path": "v1/{+name}:addProduct",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}:addProduct",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "description": "Adds a Product to the specified ProductSet. If the Product is already present, no change is made. One Product can be added to at most 100 ProductSets. Possible errors: * Returns NOT_FOUND if the Product or the ProductSet doesn't exist."
                },
                "create": {
                  "response": {
                    "$ref": "ProductSet"
                  },
                  "request": {
                    "$ref": "ProductSet"
                  },
                  "description": "Creates and returns a new ProductSet resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing, or is longer than 4096 characters.",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "Required. The project in which the ProductSet should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`."
                    },
                    "productSetId": {
                      "location": "query",
                      "type": "string",
                      "description": "A user-supplied resource id for this ProductSet. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`."
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "path": "v1/{+parent}/productSets",
                  "httpMethod": "POST",
                  "id": "vision.projects.locations.productSets.create",
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "patch": {
                  "response": {
                    "$ref": "ProductSet"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "path": "v1/{+name}",
                  "description": "Makes changes to a ProductSet resource. Only display_name can be updated currently. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but missing from the request or longer than 4096 characters.",
                  "parameters": {
                    "updateMask": {
                      "description": "The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask path is `display_name`.",
                      "format": "google-fieldmask",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "description": "The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "location": "path"
                    }
                  },
                  "id": "vision.projects.locations.productSets.patch",
                  "httpMethod": "PATCH",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ProductSet"
                  }
                },
                "removeProduct": {
                  "path": "v1/{+name}:removeProduct",
                  "request": {
                    "$ref": "RemoveProductFromProductSetRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                      "description": "Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`"
                    }
                  },
                  "description": "Removes a Product from the specified ProductSet.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "vision.projects.locations.productSets.removeProduct",
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}:removeProduct"
                },
                "list": {
                  "description": "Lists ProductSets in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100, or less than 1.",
                  "id": "vision.projects.locations.productSets.list",
                  "path": "v1/{+parent}/productSets",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "pageSize": {
                      "description": "The maximum number of items to return. Default 10, maximum 100.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. The project from which ProductSets should be listed. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "location": "path",
                      "type": "string"
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The next_page_token returned from a previous List request, if any.",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "response": {
                    "$ref": "ListProductSetsResponse"
                  }
                },
                "delete": {
                  "description": "Permanently deletes a ProductSet. Products and ReferenceImages in the ProductSet are not deleted. The actual image files are not deleted from Google Cloud Storage.",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "Required. Resource name of the ProductSet to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$"
                    }
                  },
                  "id": "vision.projects.locations.productSets.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
                  "httpMethod": "DELETE"
                },
                "import": {
                  "id": "vision.projects.locations.productSets.import",
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The project in which the ProductSets should be imported. Format is `projects/PROJECT_ID/locations/LOC_ID`.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloud-vision"
                  ],
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "ImportProductSetsRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets:import",
                  "description": "Asynchronous API that imports a list of reference images to specified product sets based on a list of image information. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress) `Operation.response` contains `ImportProductSetsResponse`. (results) The input source of this method is a csv file on Google Cloud Storage. For the format of the csv file please see ImportProductSetsGcsSource.csv_file_uri.",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+parent}/productSets:import"
                }
              },
              "resources": {
                "products": {
                  "methods": {
                    "list": {
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}/products",
                      "description": "Lists the Products in a ProductSet, in an unspecified order. If the ProductSet does not exist, the products field of the response will be empty. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.",
                      "response": {
                        "$ref": "ListProductsInProductSetResponse"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}/products",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "description": "The next_page_token returned from a previous List request, if any.",
                          "type": "string"
                        },
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/productSets/[^/]+$",
                          "required": true,
                          "description": "Required. The ProductSet resource for which to retrieve Products. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`",
                          "location": "path",
                          "type": "string"
                        },
                        "pageSize": {
                          "format": "int32",
                          "description": "The maximum number of items to return. Default 10, maximum 100.",
                          "type": "integer",
                          "location": "query"
                        }
                      },
                      "id": "vision.projects.locations.productSets.products.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloud-vision"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operations": {
          "methods": {
            "get": {
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "description": "The name of the operation resource."
                }
              },
              "id": "vision.projects.operations.get",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
              "response": {
                "$ref": "Operation"
              }
            }
          }
        },
        "images": {
          "methods": {
            "asyncBatchAnnotate": {
              "response": {
                "$ref": "Operation"
              },
              "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
              "parameters": {
                "parent": {
                  "type": "string",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "AsyncBatchAnnotateImagesRequest"
              },
              "id": "vision.projects.images.asyncBatchAnnotate",
              "flatPath": "v1/projects/{projectsId}/images:asyncBatchAnnotate",
              "path": "v1/{+parent}/images:asyncBatchAnnotate",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ]
            },
            "annotate": {
              "httpMethod": "POST",
              "id": "vision.projects.images.annotate",
              "path": "v1/{+parent}/images:annotate",
              "request": {
                "$ref": "BatchAnnotateImagesRequest"
              },
              "response": {
                "$ref": "BatchAnnotateImagesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "parameterOrder": [
                "parent"
              ],
              "description": "Run image detection and annotation for a batch of images.",
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/images:annotate"
            }
          }
        },
        "files": {
          "methods": {
            "asyncBatchAnnotate": {
              "parameterOrder": [
                "parent"
              ],
              "id": "vision.projects.files.asyncBatchAnnotate",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "type": "string",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
              "response": {
                "$ref": "Operation"
              },
              "request": {
                "$ref": "AsyncBatchAnnotateFilesRequest"
              },
              "path": "v1/{+parent}/files:asyncBatchAnnotate",
              "flatPath": "v1/projects/{projectsId}/files:asyncBatchAnnotate",
              "httpMethod": "POST"
            },
            "annotate": {
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
                  "location": "path",
                  "required": true
                }
              },
              "id": "vision.projects.files.annotate",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloud-vision"
              ],
              "flatPath": "v1/projects/{projectsId}/files:annotate",
              "response": {
                "$ref": "BatchAnnotateFilesResponse"
              },
              "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
              "request": {
                "$ref": "BatchAnnotateFilesRequest"
              },
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/files:annotate"
            }
          }
        }
      }
    }
  },
  "version_module": true,
  "revision": "20230608",
  "servicePath": "",
  "canonicalName": "Vision",
  "ownerName": "Google",
  "batchPath": "batch",
  "version": "v1",
  "description": "Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.",
  "protocol": "rest",
  "id": "vision:v1",
  "ownerDomain": "google.com",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        },
        "https://www.googleapis.com/auth/cloud-vision": {
          "description": "Apply machine learning models to understand and label images"
        }
      }
    }
  },
  "name": "vision",
  "kind": "discovery#restDescription",
  "parameters": {
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "location": "query",
      "description": "Data format for response.",
      "type": "string",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "description": "V1 error format."
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "mtlsRootUrl": "https://vision.mtls.googleapis.com/",
  "documentationLink": "https://cloud.google.com/vision/",
  "title": "Cloud Vision API",
  "basePath": "",
  "discoveryVersion": "v1",
  "schemas": {
    "GoogleCloudVisionV1p1beta1ProductKeyValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        },
        "key": {
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        }
      },
      "description": "A product label represented as a key-value pair.",
      "id": "GoogleCloudVisionV1p1beta1ProductKeyValue"
    },
    "GoogleCloudVisionV1p2beta1ImageAnnotationContext": {
      "id": "GoogleCloudVisionV1p2beta1ImageAnnotationContext",
      "properties": {
        "uri": {
          "description": "The URI of the file used to produce the image.",
          "type": "string"
        },
        "pageNumber": {
          "format": "int32",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.",
          "type": "integer"
        }
      },
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResultsResult": {
      "properties": {
        "product": {
          "$ref": "GoogleCloudVisionV1p1beta1Product",
          "description": "The Product."
        },
        "image": {
          "type": "string",
          "description": "The resource name of the image from the product that is the closest match to the query."
        },
        "score": {
          "format": "float",
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult",
      "description": "Information about a product.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1BatchOperationMetadata": {
      "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.",
      "id": "GoogleCloudVisionV1p4beta1BatchOperationMetadata",
      "type": "object",
      "properties": {
        "submitTime": {
          "description": "The time when the batch request was submitted to the server.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "description": "The current state of the batch operation.",
          "type": "string",
          "enumDescriptions": [
            "Invalid.",
            "Request is actively being processed.",
            "The request is done and at least one item has been successfully processed.",
            "The request is done and no item has been successfully processed.",
            "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PROCESSING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ]
        },
        "endTime": {
          "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1Vertex": {
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1Vertex",
      "properties": {
        "x": {
          "format": "int32",
          "type": "integer",
          "description": "X coordinate."
        },
        "y": {
          "format": "int32",
          "description": "Y coordinate.",
          "type": "integer"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty": {
      "properties": {
        "detectedLanguages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage"
          },
          "description": "A list of detected languages together with confidence.",
          "type": "array"
        },
        "detectedBreak": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak",
          "description": "Detected start or end of a text segment."
        }
      },
      "description": "Additional information detected on the structural component.",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty"
    },
    "AsyncBatchAnnotateImagesRequest": {
      "properties": {
        "outputConfig": {
          "description": "Required. The desired output location and metadata (e.g. format).",
          "$ref": "OutputConfig"
        },
        "parent": {
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
          "type": "string"
        },
        "requests": {
          "description": "Required. Individual image annotation requests for this batch.",
          "items": {
            "$ref": "AnnotateImageRequest"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "AsyncBatchAnnotateImagesRequest",
      "description": "Request for async image annotation for a list of images."
    },
    "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak",
      "description": "Detected start or end of a structural component.",
      "properties": {
        "isPrefix": {
          "description": "True if break prepends the element.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ],
          "description": "Detected break type."
        }
      }
    },
    "ImportProductSetsRequest": {
      "description": "Request message for the `ImportProductSets` method.",
      "properties": {
        "inputConfig": {
          "$ref": "ImportProductSetsInputConfig",
          "description": "Required. The input content for the list of requests."
        }
      },
      "id": "ImportProductSetsRequest",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1GcsSource": {
      "id": "GoogleCloudVisionV1p4beta1GcsSource",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      },
      "description": "The Google Cloud Storage location where the input will be read from.",
      "type": "object"
    },
    "Position": {
      "type": "object",
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "id": "Position",
      "properties": {
        "x": {
          "format": "float",
          "description": "X coordinate.",
          "type": "number"
        },
        "y": {
          "format": "float",
          "description": "Y coordinate.",
          "type": "number"
        },
        "z": {
          "format": "float",
          "description": "Z coordinate (or depth).",
          "type": "number"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1WebDetection": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1WebDetection",
      "properties": {
        "bestGuessLabels": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebLabel"
          },
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "type": "array"
        },
        "webEntities": {
          "type": "array",
          "description": "Deduced entities from similar images on the Internet.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebEntity"
          }
        },
        "pagesWithMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebPage"
          },
          "description": "Web pages containing the matching images from the Internet.",
          "type": "array"
        },
        "fullMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          },
          "description": "Fully matching images from the Internet. Can include resized copies of the query image."
        },
        "partialMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          },
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."
        },
        "visuallySimilarImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          },
          "type": "array",
          "description": "The visually similar image results."
        }
      },
      "description": "Relevant information for the image from the Internet."
    },
    "GoogleCloudVisionV1p2beta1GcsSource": {
      "id": "GoogleCloudVisionV1p2beta1GcsSource",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported."
        }
      },
      "type": "object",
      "description": "The Google Cloud Storage location where the input will be read from."
    },
    "GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse": {
      "description": "Response to an async batch file annotation request.",
      "properties": {
        "responses": {
          "type": "array",
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse"
          }
        }
      },
      "id": "GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse",
      "type": "object"
    },
    "CancelOperationRequest": {
      "type": "object",
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest"
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResults": {
      "description": "Results for a product search request.",
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResults",
      "properties": {
        "results": {
          "description": "List of results, one for each product match.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult"
          }
        },
        "indexTime": {
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "type": "string",
          "format": "google-datetime"
        },
        "productGroupedResults": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult"
          },
          "type": "array",
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1OperationMetadata": {
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "id": "GoogleCloudVisionV1p2beta1OperationMetadata",
      "type": "object",
      "properties": {
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "description": "Current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ],
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the batch request was received."
        },
        "updateTime": {
          "format": "google-datetime",
          "description": "The time when the operation result was last updated.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty": {
      "properties": {
        "detectedLanguages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage"
          },
          "type": "array",
          "description": "A list of detected languages together with confidence."
        },
        "detectedBreak": {
          "description": "Detected start or end of a text segment.",
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
      "description": "Additional information detected on the structural component.",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1CropHint": {
      "properties": {
        "importanceFraction": {
          "type": "number",
          "description": "Fraction of importance of this salient region with respect to the original image.",
          "format": "float"
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "format": "float"
        },
        "boundingPoly": {
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.",
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly"
        }
      },
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1CropHint"
    },
    "ListProductsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "products": {
          "description": "List of products.",
          "type": "array",
          "items": {
            "$ref": "Product"
          }
        }
      },
      "type": "object",
      "id": "ListProductsResponse",
      "description": "Response message for the `ListProducts` method."
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation": {
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation",
      "type": "object",
      "description": "Prediction for what the object in the bounding box is.",
      "properties": {
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "mid": {
          "type": "string",
          "description": "Object ID that should align with EntityAnnotation mid."
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Score of the result. Range [0, 1]."
        }
      }
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResults": {
      "description": "Results for a product search request.",
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResults",
      "properties": {
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        },
        "productGroupedResults": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult"
          },
          "type": "array",
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."
        },
        "indexTime": {
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1BoundingPoly": {
      "description": "A bounding polygon for the detected image annotation.",
      "id": "GoogleCloudVisionV1p2beta1BoundingPoly",
      "properties": {
        "normalizedVertices": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1NormalizedVertex"
          },
          "description": "The bounding polygon normalized vertices.",
          "type": "array"
        },
        "vertices": {
          "type": "array",
          "description": "The bounding polygon vertices.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Vertex"
          }
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation": {
      "id": "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation",
      "description": "Set of detected objects with bounding boxes.",
      "type": "object",
      "properties": {
        "boundingPoly": {
          "description": "Image region to which this object belongs. This must be populated.",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        },
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "mid": {
          "type": "string",
          "description": "Object ID that should align with EntityAnnotation mid."
        },
        "score": {
          "type": "number",
          "description": "Score of the result. Range [0, 1].",
          "format": "float"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1Word": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Word",
      "properties": {
        "property": {
          "description": "Additional information detected for the word.",
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty"
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "type": "number"
        },
        "symbols": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Symbol"
          },
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order.",
          "type": "array"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        }
      },
      "description": "A word representation."
    },
    "BatchOperationMetadata": {
      "properties": {
        "submitTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the batch request was submitted to the server."
        },
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is actively being processed.",
            "The request is done and at least one item has been successfully processed.",
            "The request is done and no item has been successfully processed.",
            "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."
          ],
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PROCESSING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The current state of the batch operation."
        },
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true."
        }
      },
      "id": "BatchOperationMetadata",
      "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak",
      "description": "Detected start or end of a structural component.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Detected break type.",
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ]
        },
        "isPrefix": {
          "type": "boolean",
          "description": "True if break prepends the element."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage": {
      "id": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage",
      "type": "object",
      "properties": {
        "confidence": {
          "format": "float",
          "description": "Confidence of detected language. Range [0, 1].",
          "type": "number"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      },
      "description": "Detected language for a structural component."
    },
    "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateFilesResponse": {
      "type": "object",
      "description": "Response to an async batch file annotation request.",
      "properties": {
        "responses": {
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse"
          }
        }
      },
      "id": "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateFilesResponse"
    },
    "GoogleCloudVisionV1p1beta1GcsSource": {
      "description": "The Google Cloud Storage location where the input will be read from.",
      "id": "GoogleCloudVisionV1p1beta1GcsSource",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebEntity": {
      "properties": {
        "score": {
          "type": "number",
          "format": "float",
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."
        },
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "description": {
          "description": "Canonical description of the entity, in English.",
          "type": "string"
        }
      },
      "description": "Entity deduced from similar images on the Internet.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebEntity"
    },
    "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark": {
      "properties": {
        "type": {
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ],
          "type": "string",
          "description": "Face landmark type.",
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ]
        },
        "position": {
          "description": "Face landmark position.",
          "$ref": "GoogleCloudVisionV1p4beta1Position"
        }
      },
      "description": "A face-specific landmark (for example, a face feature).",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark"
    },
    "WebDetectionParams": {
      "properties": {
        "includeGeoResults": {
          "description": "Whether to include results derived from the geo information in the image.",
          "type": "boolean"
        }
      },
      "id": "WebDetectionParams",
      "type": "object",
      "description": "Parameters for web detection request."
    },
    "SafeSearchAnnotation": {
      "type": "object",
      "properties": {
        "adult": {
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "racy": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "medical": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Likelihood that this is a medical image."
        },
        "violence": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Likelihood that this image contains violent content."
        },
        "spoof": {
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        }
      },
      "id": "SafeSearchAnnotation",
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence)."
    },
    "Result": {
      "id": "Result",
      "type": "object",
      "description": "Information about a product.",
      "properties": {
        "product": {
          "$ref": "Product",
          "description": "The Product."
        },
        "image": {
          "type": "string",
          "description": "The resource name of the image from the product that is the closest match to the query."
        },
        "score": {
          "format": "float",
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "type": "number"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResultsResult": {
      "properties": {
        "product": {
          "$ref": "GoogleCloudVisionV1p3beta1Product",
          "description": "The Product."
        },
        "image": {
          "type": "string",
          "description": "The resource name of the image from the product that is the closest match to the query."
        },
        "score": {
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).",
          "type": "number",
          "format": "float"
        }
      },
      "description": "Information about a product.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult"
    },
    "GoogleCloudVisionV1p1beta1TextAnnotation": {
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "properties": {
        "text": {
          "type": "string",
          "description": "UTF-8 text detected on the pages."
        },
        "pages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Page"
          },
          "description": "List of pages detected by OCR."
        }
      },
      "id": "GoogleCloudVisionV1p1beta1TextAnnotation",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation": {
      "description": "Prediction for what the object in the bounding box is.",
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation",
      "properties": {
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "score": {
          "format": "float",
          "description": "Score of the result. Range [0, 1].",
          "type": "number"
        }
      },
      "type": "object"
    },
    "Property": {
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "properties": {
        "name": {
          "description": "Name of the property.",
          "type": "string"
        },
        "value": {
          "description": "Value of the property.",
          "type": "string"
        },
        "uint64Value": {
          "type": "string",
          "format": "uint64",
          "description": "Value of numeric properties."
        }
      },
      "type": "object",
      "id": "Property"
    },
    "LatLongRect": {
      "type": "object",
      "properties": {
        "minLatLng": {
          "description": "Min lat/long pair.",
          "$ref": "LatLng"
        },
        "maxLatLng": {
          "description": "Max lat/long pair.",
          "$ref": "LatLng"
        }
      },
      "description": "Rectangle determined by min and max `LatLng` pairs.",
      "id": "LatLongRect"
    },
    "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse": {
      "type": "object",
      "description": "The response for a single offline file annotation request.",
      "properties": {
        "outputConfig": {
          "description": "The output location and metadata from AsyncAnnotateFileRequest.",
          "$ref": "GoogleCloudVisionV1p1beta1OutputConfig"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse"
    },
    "GoogleCloudVisionV1p4beta1FaceAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1FaceAnnotation",
      "properties": {
        "detectionConfidence": {
          "type": "number",
          "format": "float",
          "description": "Detection confidence. Range [0, 1]."
        },
        "recognitionResult": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1FaceRecognitionResult"
          },
          "type": "array",
          "description": "Additional recognition information. Only computed if image_context.face_recognition_params is provided, **and** a match is found to a Celebrity in the input CelebritySet. This field is sorted in order of decreasing confidence values."
        },
        "landmarkingConfidence": {
          "format": "float",
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number"
        },
        "blurredLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Blurred likelihood.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "landmarks": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark"
          },
          "description": "Detected face landmarks."
        },
        "fdBoundingPoly": {
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        },
        "underExposedLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Under-exposed likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "panAngle": {
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "type": "number",
          "format": "float"
        },
        "surpriseLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Surprise likelihood.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "headwearLikelihood": {
          "type": "string",
          "description": "Headwear likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "rollAngle": {
          "type": "number",
          "format": "float",
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]."
        },
        "tiltAngle": {
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].",
          "type": "number",
          "format": "float"
        },
        "joyLikelihood": {
          "description": "Joy likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "sorrowLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Sorrow likelihood.",
          "type": "string"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        },
        "angerLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Anger likelihood.",
          "type": "string"
        }
      },
      "description": "A face annotation object contains the results of face detection."
    },
    "Symbol": {
      "type": "object",
      "description": "A single symbol representation.",
      "id": "Symbol",
      "properties": {
        "property": {
          "description": "Additional information detected for the symbol.",
          "$ref": "TextProperty"
        },
        "text": {
          "description": "The actual UTF-8 representation of the symbol.",
          "type": "string"
        },
        "confidence": {
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "boundingBox": {
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "BoundingPoly"
        }
      }
    },
    "BatchAnnotateImagesResponse": {
      "id": "BatchAnnotateImagesResponse",
      "description": "Response to a batch image annotation request.",
      "properties": {
        "responses": {
          "items": {
            "$ref": "AnnotateImageResponse"
          },
          "description": "Individual responses to image annotation requests within the batch.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "Paragraph": {
      "properties": {
        "property": {
          "$ref": "TextProperty",
          "description": "Additional information detected for the paragraph."
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1].",
          "type": "number"
        },
        "boundingBox": {
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "BoundingPoly"
        },
        "words": {
          "description": "List of all words in this paragraph.",
          "type": "array",
          "items": {
            "$ref": "Word"
          }
        }
      },
      "description": "Structural unit of text representing a number of words in certain order.",
      "type": "object",
      "id": "Paragraph"
    },
    "AsyncAnnotateFileResponse": {
      "description": "The response for a single offline file annotation request.",
      "type": "object",
      "properties": {
        "outputConfig": {
          "$ref": "OutputConfig",
          "description": "The output location and metadata from AsyncAnnotateFileRequest."
        }
      },
      "id": "AsyncAnnotateFileResponse"
    },
    "AnnotateImageResponse": {
      "id": "AnnotateImageResponse",
      "properties": {
        "safeSearchAnnotation": {
          "$ref": "SafeSearchAnnotation",
          "description": "If present, safe-search annotation has completed successfully."
        },
        "context": {
          "$ref": "ImageAnnotationContext",
          "description": "If present, contextual information is needed to understand where this image comes from."
        },
        "webDetection": {
          "description": "If present, web detection has completed successfully.",
          "$ref": "WebDetection"
        },
        "textAnnotations": {
          "items": {
            "$ref": "EntityAnnotation"
          },
          "type": "array",
          "description": "If present, text (OCR) detection has completed successfully."
        },
        "logoAnnotations": {
          "items": {
            "$ref": "EntityAnnotation"
          },
          "type": "array",
          "description": "If present, logo detection has completed successfully."
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."
        },
        "labelAnnotations": {
          "type": "array",
          "items": {
            "$ref": "EntityAnnotation"
          },
          "description": "If present, label detection has completed successfully."
        },
        "localizedObjectAnnotations": {
          "items": {
            "$ref": "LocalizedObjectAnnotation"
          },
          "type": "array",
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."
        },
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "TextAnnotation"
        },
        "cropHintsAnnotation": {
          "description": "If present, crop hints have completed successfully.",
          "$ref": "CropHintsAnnotation"
        },
        "landmarkAnnotations": {
          "description": "If present, landmark detection has completed successfully.",
          "items": {
            "$ref": "EntityAnnotation"
          },
          "type": "array"
        },
        "productSearchResults": {
          "$ref": "ProductSearchResults",
          "description": "If present, product search has completed successfully."
        },
        "faceAnnotations": {
          "type": "array",
          "description": "If present, face detection has completed successfully.",
          "items": {
            "$ref": "FaceAnnotation"
          }
        },
        "imagePropertiesAnnotation": {
          "description": "If present, image properties were extracted successfully.",
          "$ref": "ImageProperties"
        }
      },
      "type": "object",
      "description": "Response to an image annotation request."
    },
    "GoogleCloudVisionV1p4beta1BatchAnnotateFilesResponse": {
      "description": "A list of file annotation responses.",
      "id": "GoogleCloudVisionV1p4beta1BatchAnnotateFilesResponse",
      "properties": {
        "responses": {
          "type": "array",
          "description": "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1AnnotateFileResponse"
          }
        }
      },
      "type": "object"
    },
    "ProductSetPurgeConfig": {
      "id": "ProductSetPurgeConfig",
      "type": "object",
      "properties": {
        "productSetId": {
          "type": "string",
          "description": "The ProductSet that contains the Products to delete. If a Product is a member of product_set_id in addition to other ProductSets, the Product will still be deleted."
        }
      },
      "description": "Config to control which ProductSet contains the Products to be deleted."
    },
    "AddProductToProductSetRequest": {
      "type": "object",
      "properties": {
        "product": {
          "description": "Required. The resource name for the Product to be added to this ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`",
          "type": "string"
        }
      },
      "id": "AddProductToProductSetRequest",
      "description": "Request message for the `AddProductToProductSet` method."
    },
    "GoogleCloudVisionV1p1beta1ImageAnnotationContext": {
      "id": "GoogleCloudVisionV1p1beta1ImageAnnotationContext",
      "properties": {
        "pageNumber": {
          "type": "integer",
          "format": "int32",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image."
        },
        "uri": {
          "type": "string",
          "description": "The URI of the file used to produce the image."
        }
      },
      "type": "object",
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image."
    },
    "GoogleCloudVisionV1p2beta1NormalizedVertex": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1NormalizedVertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "properties": {
        "x": {
          "format": "float",
          "description": "X coordinate.",
          "type": "number"
        },
        "y": {
          "format": "float",
          "type": "number",
          "description": "Y coordinate."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult": {
      "properties": {
        "objectAnnotations": {
          "description": "List of generic predictions for the object in the bounding box.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation"
          }
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding polygon around the product detected in the query image."
        },
        "results": {
          "type": "array",
          "description": "List of results, one for each product match.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult"
          }
        }
      },
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult",
      "type": "object",
      "description": "Information about the products similar to a single product in a query image."
    },
    "GoogleCloudVisionV1p4beta1Vertex": {
      "properties": {
        "x": {
          "description": "X coordinate.",
          "type": "integer",
          "format": "int32"
        },
        "y": {
          "format": "int32",
          "description": "Y coordinate.",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.",
      "id": "GoogleCloudVisionV1p4beta1Vertex"
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebPage": {
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebPage",
      "description": "Metadata for web pages.",
      "type": "object",
      "properties": {
        "pageTitle": {
          "type": "string",
          "description": "Title for the web page, may contain HTML markups."
        },
        "score": {
          "description": "(Deprecated) Overall relevancy score for the web page.",
          "type": "number",
          "format": "float"
        },
        "url": {
          "description": "The result web page URL.",
          "type": "string"
        },
        "partialMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          },
          "type": "array",
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."
        },
        "fullMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage"
          },
          "description": "Fully matching images on the page. Can include resized copies of the query image."
        }
      }
    },
    "AsyncBatchAnnotateFilesRequest": {
      "id": "AsyncBatchAnnotateFilesRequest",
      "description": "Multiple async file annotation requests are batched into a single service call.",
      "type": "object",
      "properties": {
        "requests": {
          "description": "Required. Individual async file annotation requests for this batch.",
          "items": {
            "$ref": "AsyncAnnotateFileRequest"
          },
          "type": "array"
        },
        "parent": {
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
          "type": "string"
        }
      }
    },
    "CropHint": {
      "properties": {
        "boundingPoly": {
          "$ref": "BoundingPoly",
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale."
        },
        "importanceFraction": {
          "format": "float",
          "type": "number",
          "description": "Fraction of importance of this salient region with respect to the original image."
        },
        "confidence": {
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "type": "number",
          "format": "float"
        }
      },
      "id": "CropHint",
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1Page": {
      "type": "object",
      "description": "Detected page from OCR.",
      "properties": {
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."
        },
        "width": {
          "format": "int32",
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "type": "integer"
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results on the page. Range [0, 1].",
          "type": "number"
        },
        "property": {
          "description": "Additional information detected on the page.",
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty"
        },
        "blocks": {
          "description": "List of blocks of text, images etc on this page.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Block"
          }
        }
      },
      "id": "GoogleCloudVisionV1p4beta1Page"
    },
    "ImportProductSetsResponse": {
      "id": "ImportProductSetsResponse",
      "properties": {
        "referenceImages": {
          "items": {
            "$ref": "ReferenceImage"
          },
          "description": "The list of reference_images that are imported successfully.",
          "type": "array"
        },
        "statuses": {
          "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.",
          "items": {
            "$ref": "Status"
          },
          "type": "array"
        }
      },
      "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.",
      "type": "object"
    },
    "RemoveProductFromProductSetRequest": {
      "description": "Request message for the `RemoveProductFromProductSet` method.",
      "id": "RemoveProductFromProductSetRequest",
      "type": "object",
      "properties": {
        "product": {
          "type": "string",
          "description": "Required. The resource name for the Product to be removed from this ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1WebDetection": {
      "id": "GoogleCloudVisionV1p4beta1WebDetection",
      "type": "object",
      "description": "Relevant information for the image from the Internet.",
      "properties": {
        "webEntities": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebEntity"
          },
          "description": "Deduced entities from similar images on the Internet."
        },
        "bestGuessLabels": {
          "type": "array",
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebLabel"
          }
        },
        "partialMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "type": "array"
        },
        "visuallySimilarImages": {
          "description": "The visually similar image results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "type": "array"
        },
        "fullMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "description": "Fully matching images from the Internet. Can include resized copies of the query image.",
          "type": "array"
        },
        "pagesWithMatchingImages": {
          "description": "Web pages containing the matching images from the Internet.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebPage"
          }
        }
      }
    },
    "GoogleCloudVisionV1p3beta1Vertex": {
      "type": "object",
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.",
      "properties": {
        "y": {
          "type": "integer",
          "format": "int32",
          "description": "Y coordinate."
        },
        "x": {
          "type": "integer",
          "description": "X coordinate.",
          "format": "int32"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1Vertex"
    },
    "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak": {
      "description": "Detected start or end of a structural component.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak",
      "properties": {
        "isPrefix": {
          "description": "True if break prepends the element.",
          "type": "boolean"
        },
        "type": {
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ],
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "description": "Detected break type.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1GcsDestination": {
      "properties": {
        "uri": {
          "type": "string",
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."
        }
      },
      "description": "The Google Cloud Storage location where the output will be written to.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1GcsDestination"
    },
    "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage": {
      "id": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "confidence": {
          "description": "Confidence of detected language. Range [0, 1].",
          "type": "number",
          "format": "float"
        }
      },
      "description": "Detected language for a structural component.",
      "type": "object"
    },
    "ObjectAnnotation": {
      "type": "object",
      "description": "Prediction for what the object in the bounding box is.",
      "properties": {
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "score": {
          "format": "float",
          "description": "Score of the result. Range [0, 1].",
          "type": "number"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        }
      },
      "id": "ObjectAnnotation"
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebImage": {
      "description": "Metadata for online images.",
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebImage",
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the image."
        },
        "url": {
          "description": "The result image URL.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1Position": {
      "id": "GoogleCloudVisionV1p3beta1Position",
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "type": "object",
      "properties": {
        "y": {
          "description": "Y coordinate.",
          "format": "float",
          "type": "number"
        },
        "x": {
          "type": "number",
          "format": "float",
          "description": "X coordinate."
        },
        "z": {
          "type": "number",
          "format": "float",
          "description": "Z coordinate (or depth)."
        }
      }
    },
    "GoogleCloudVisionV1p2beta1TextAnnotation": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "UTF-8 text detected on the pages."
        },
        "pages": {
          "type": "array",
          "description": "List of pages detected by OCR.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Page"
          }
        }
      },
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "id": "GoogleCloudVisionV1p2beta1TextAnnotation"
    },
    "GoogleCloudVisionV1p2beta1GcsDestination": {
      "description": "The Google Cloud Storage location where the output will be written to.",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1GcsDestination",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebImage": {
      "description": "Metadata for online images.",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebImage",
      "properties": {
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the image."
        },
        "url": {
          "description": "The result image URL.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1AnnotateFileResponse": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1AnnotateFileResponse",
      "properties": {
        "error": {
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.",
          "$ref": "Status"
        },
        "totalPages": {
          "type": "integer",
          "description": "This field gives the total number of pages in the file.",
          "format": "int32"
        },
        "responses": {
          "type": "array",
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1AnnotateImageResponse"
          }
        },
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "GoogleCloudVisionV1p4beta1InputConfig"
        }
      },
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses."
    },
    "GoogleCloudVisionV1p1beta1ImageProperties": {
      "description": "Stores image properties, such as dominant colors.",
      "type": "object",
      "properties": {
        "dominantColors": {
          "description": "If present, dominant colors completed successfully.",
          "$ref": "GoogleCloudVisionV1p1beta1DominantColorsAnnotation"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1ImageProperties"
    },
    "GoogleCloudVisionV1p2beta1ProductKeyValue": {
      "id": "GoogleCloudVisionV1p2beta1ProductKeyValue",
      "properties": {
        "value": {
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        },
        "key": {
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        }
      },
      "description": "A product label represented as a key-value pair.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1AnnotateImageResponse": {
      "description": "Response to an image annotation request.",
      "properties": {
        "logoAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          },
          "description": "If present, logo detection has completed successfully."
        },
        "webDetection": {
          "$ref": "GoogleCloudVisionV1p4beta1WebDetection",
          "description": "If present, web detection has completed successfully."
        },
        "cropHintsAnnotation": {
          "description": "If present, crop hints have completed successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1CropHintsAnnotation"
        },
        "faceAnnotations": {
          "description": "If present, face detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1FaceAnnotation"
          }
        },
        "imagePropertiesAnnotation": {
          "description": "If present, image properties were extracted successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1ImageProperties"
        },
        "productSearchResults": {
          "description": "If present, product search has completed successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResults"
        },
        "context": {
          "$ref": "GoogleCloudVisionV1p4beta1ImageAnnotationContext",
          "description": "If present, contextual information is needed to understand where this image comes from."
        },
        "localizedObjectAnnotations": {
          "type": "array",
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation"
          }
        },
        "landmarkAnnotations": {
          "description": "If present, landmark detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          }
        },
        "safeSearchAnnotation": {
          "description": "If present, safe-search annotation has completed successfully.",
          "$ref": "GoogleCloudVisionV1p4beta1SafeSearchAnnotation"
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."
        },
        "labelAnnotations": {
          "description": "If present, label detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          },
          "type": "array"
        },
        "textAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation"
          },
          "description": "If present, text (OCR) detection has completed successfully.",
          "type": "array"
        },
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotation"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1AnnotateImageResponse",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1Symbol": {
      "type": "object",
      "description": "A single symbol representation.",
      "id": "GoogleCloudVisionV1p4beta1Symbol",
      "properties": {
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "format": "float"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the symbol."
        },
        "text": {
          "description": "The actual UTF-8 representation of the symbol.",
          "type": "string"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ImportProductSetsResponse": {
      "id": "GoogleCloudVisionV1p4beta1ImportProductSetsResponse",
      "type": "object",
      "properties": {
        "statuses": {
          "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.",
          "type": "array",
          "items": {
            "$ref": "Status"
          }
        },
        "referenceImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ReferenceImage"
          },
          "description": "The list of reference_images that are imported successfully."
        }
      },
      "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field."
    },
    "GoogleCloudVisionV1p2beta1AnnotateFileResponse": {
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.",
      "properties": {
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "GoogleCloudVisionV1p2beta1InputConfig"
        },
        "responses": {
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1AnnotateImageResponse"
          }
        },
        "totalPages": {
          "type": "integer",
          "description": "This field gives the total number of pages in the file.",
          "format": "int32"
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case."
        }
      },
      "id": "GoogleCloudVisionV1p2beta1AnnotateFileResponse",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1SafeSearchAnnotation": {
      "properties": {
        "medical": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that this is a medical image.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "spoof": {
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "adult": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "racy": {
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "violence": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that this image contains violent content."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1SafeSearchAnnotation",
      "type": "object",
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence)."
    },
    "GoogleCloudVisionV1p2beta1Vertex": {
      "properties": {
        "y": {
          "format": "int32",
          "description": "Y coordinate.",
          "type": "integer"
        },
        "x": {
          "type": "integer",
          "format": "int32",
          "description": "X coordinate."
        }
      },
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.",
      "id": "GoogleCloudVisionV1p2beta1Vertex",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1SafeSearchAnnotation": {
      "id": "GoogleCloudVisionV1p2beta1SafeSearchAnnotation",
      "type": "object",
      "properties": {
        "racy": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "type": "string"
        },
        "medical": {
          "description": "Likelihood that this is a medical image.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "violence": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Likelihood that this image contains violent content.",
          "type": "string"
        },
        "spoof": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive."
        },
        "adult": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        }
      },
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence)."
    },
    "GoogleCloudVisionV1p2beta1DominantColorsAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1DominantColorsAnnotation",
      "properties": {
        "colors": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ColorInfo"
          },
          "description": "RGB color values with their score and pixel fraction."
        }
      },
      "description": "Set of dominant colors and their corresponding scores."
    },
    "WebDetection": {
      "type": "object",
      "properties": {
        "bestGuessLabels": {
          "items": {
            "$ref": "WebLabel"
          },
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "type": "array"
        },
        "pagesWithMatchingImages": {
          "type": "array",
          "description": "Web pages containing the matching images from the Internet.",
          "items": {
            "$ref": "WebPage"
          }
        },
        "partialMatchingImages": {
          "type": "array",
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "WebImage"
          }
        },
        "visuallySimilarImages": {
          "type": "array",
          "description": "The visually similar image results.",
          "items": {
            "$ref": "WebImage"
          }
        },
        "webEntities": {
          "items": {
            "$ref": "WebEntity"
          },
          "description": "Deduced entities from similar images on the Internet.",
          "type": "array"
        },
        "fullMatchingImages": {
          "description": "Fully matching images from the Internet. Can include resized copies of the query image.",
          "items": {
            "$ref": "WebImage"
          },
          "type": "array"
        }
      },
      "id": "WebDetection",
      "description": "Relevant information for the image from the Internet."
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebPage": {
      "properties": {
        "score": {
          "type": "number",
          "description": "(Deprecated) Overall relevancy score for the web page.",
          "format": "float"
        },
        "url": {
          "description": "The result web page URL.",
          "type": "string"
        },
        "fullMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "type": "array"
        },
        "partialMatchingImages": {
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage"
          },
          "type": "array"
        },
        "pageTitle": {
          "type": "string",
          "description": "Title for the web page, may contain HTML markups."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebPage",
      "type": "object",
      "description": "Metadata for web pages."
    },
    "GoogleCloudVisionV1p4beta1ImageProperties": {
      "description": "Stores image properties, such as dominant colors.",
      "id": "GoogleCloudVisionV1p4beta1ImageProperties",
      "properties": {
        "dominantColors": {
          "$ref": "GoogleCloudVisionV1p4beta1DominantColorsAnnotation",
          "description": "If present, dominant colors completed successfully."
        }
      },
      "type": "object"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object"
        }
      },
      "id": "Operation"
    },
    "GoogleCloudVisionV1p4beta1ImageAnnotationContext": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1ImageAnnotationContext",
      "properties": {
        "pageNumber": {
          "format": "int32",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.",
          "type": "integer"
        },
        "uri": {
          "type": "string",
          "description": "The URI of the file used to produce the image."
        }
      },
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image."
    },
    "GoogleCloudVisionV1p1beta1NormalizedVertex": {
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "id": "GoogleCloudVisionV1p1beta1NormalizedVertex",
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "description": "X coordinate.",
          "format": "float"
        },
        "y": {
          "format": "float",
          "type": "number",
          "description": "Y coordinate."
        }
      }
    },
    "NormalizedVertex": {
      "id": "NormalizedVertex",
      "type": "object",
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "properties": {
        "x": {
          "description": "X coordinate.",
          "format": "float",
          "type": "number"
        },
        "y": {
          "type": "number",
          "format": "float",
          "description": "Y coordinate."
        }
      }
    },
    "GoogleCloudVisionV1p2beta1InputConfig": {
      "description": "The desired input location and metadata.",
      "properties": {
        "content": {
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.",
          "type": "string",
          "format": "byte"
        },
        "mimeType": {
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.",
          "type": "string"
        },
        "gcsSource": {
          "description": "The Google Cloud Storage location to read the input from.",
          "$ref": "GoogleCloudVisionV1p2beta1GcsSource"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1InputConfig"
    },
    "GoogleCloudVisionV1p3beta1GcsSource": {
      "id": "GoogleCloudVisionV1p3beta1GcsSource",
      "description": "The Google Cloud Storage location where the input will be read from.",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array"
        }
      },
      "id": "Status",
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "WebLabel": {
      "type": "object",
      "properties": {
        "label": {
          "description": "Label for extra metadata.",
          "type": "string"
        },
        "languageCode": {
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      },
      "description": "Label to provide extra metadata for the web detection.",
      "id": "WebLabel"
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult": {
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult",
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding polygon around the product detected in the query image."
        },
        "objectAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation"
          },
          "description": "List of generic predictions for the object in the bounding box.",
          "type": "array"
        },
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        }
      },
      "description": "Information about the products similar to a single product in a query image.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1AnnotateImageResponse": {
      "id": "GoogleCloudVisionV1p3beta1AnnotateImageResponse",
      "type": "object",
      "description": "Response to an image annotation request.",
      "properties": {
        "safeSearchAnnotation": {
          "description": "If present, safe-search annotation has completed successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1SafeSearchAnnotation"
        },
        "textAnnotations": {
          "description": "If present, text (OCR) detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          },
          "type": "array"
        },
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotation"
        },
        "cropHintsAnnotation": {
          "description": "If present, crop hints have completed successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1CropHintsAnnotation"
        },
        "landmarkAnnotations": {
          "description": "If present, landmark detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          }
        },
        "webDetection": {
          "description": "If present, web detection has completed successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1WebDetection"
        },
        "labelAnnotations": {
          "description": "If present, label detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          },
          "type": "array"
        },
        "context": {
          "description": "If present, contextual information is needed to understand where this image comes from.",
          "$ref": "GoogleCloudVisionV1p3beta1ImageAnnotationContext"
        },
        "logoAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation"
          },
          "description": "If present, logo detection has completed successfully.",
          "type": "array"
        },
        "imagePropertiesAnnotation": {
          "description": "If present, image properties were extracted successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1ImageProperties"
        },
        "localizedObjectAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation"
          },
          "type": "array",
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."
        },
        "faceAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1FaceAnnotation"
          },
          "description": "If present, face detection has completed successfully."
        },
        "productSearchResults": {
          "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResults",
          "description": "If present, product search has completed successfully."
        },
        "error": {
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.",
          "$ref": "Status"
        }
      }
    },
    "BatchAnnotateImagesRequest": {
      "id": "BatchAnnotateImagesRequest",
      "properties": {
        "parent": {
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.",
          "type": "string"
        },
        "requests": {
          "description": "Required. Individual image annotation requests for this batch.",
          "items": {
            "$ref": "AnnotateImageRequest"
          },
          "type": "array"
        }
      },
      "description": "Multiple image annotation requests are batched into a single service call.",
      "type": "object"
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "The response message for Operations.ListOperations."
    },
    "GoogleCloudVisionV1p3beta1DominantColorsAnnotation": {
      "description": "Set of dominant colors and their corresponding scores.",
      "properties": {
        "colors": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ColorInfo"
          },
          "description": "RGB color values with their score and pixel fraction.",
          "type": "array"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1DominantColorsAnnotation",
      "type": "object"
    },
    "ListReferenceImagesResponse": {
      "properties": {
        "pageSize": {
          "description": "The maximum number of items to return. Default 10, maximum 100.",
          "type": "integer",
          "format": "int32"
        },
        "referenceImages": {
          "items": {
            "$ref": "ReferenceImage"
          },
          "description": "The list of reference images.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "The next_page_token returned from a previous List request, if any.",
          "type": "string"
        }
      },
      "id": "ListReferenceImagesResponse",
      "type": "object",
      "description": "Response message for the `ListReferenceImages` method."
    },
    "LatLng": {
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "type": "object",
      "properties": {
        "longitude": {
          "format": "double",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
        }
      },
      "id": "LatLng"
    },
    "GoogleCloudVisionV1p3beta1CropHintsAnnotation": {
      "type": "object",
      "properties": {
        "cropHints": {
          "description": "Crop hint results.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1CropHint"
          }
        }
      },
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "id": "GoogleCloudVisionV1p3beta1CropHintsAnnotation"
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebLabel": {
      "properties": {
        "languageCode": {
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "Label for extra metadata."
        }
      },
      "description": "Label to provide extra metadata for the web detection.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebLabel"
    },
    "GoogleCloudVisionV1p2beta1OutputConfig": {
      "properties": {
        "gcsDestination": {
          "$ref": "GoogleCloudVisionV1p2beta1GcsDestination",
          "description": "The Google Cloud Storage location to write the output(s) to."
        },
        "batchSize": {
          "format": "int32",
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.",
          "type": "integer"
        }
      },
      "description": "The desired output location and metadata.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1OutputConfig"
    },
    "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateImagesResponse": {
      "properties": {
        "outputConfig": {
          "description": "The output location and metadata from AsyncBatchAnnotateImagesRequest.",
          "$ref": "GoogleCloudVisionV1p4beta1OutputConfig"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateImagesResponse",
      "description": "Response to an async batch image annotation request.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation": {
      "description": "Set of detected objects with bounding boxes.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation",
      "properties": {
        "score": {
          "type": "number",
          "description": "Score of the result. Range [0, 1].",
          "format": "float"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "Image region to which this object belongs. This must be populated."
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation": {
      "description": "Set of detected objects with bounding boxes.",
      "id": "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation",
      "type": "object",
      "properties": {
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "boundingPoly": {
          "description": "Image region to which this object belongs. This must be populated.",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        },
        "score": {
          "format": "float",
          "description": "Score of the result. Range [0, 1].",
          "type": "number"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        }
      }
    },
    "AsyncBatchAnnotateFilesResponse": {
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "AsyncAnnotateFileResponse"
          },
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."
        }
      },
      "description": "Response to an async batch file annotation request.",
      "type": "object",
      "id": "AsyncBatchAnnotateFilesResponse"
    },
    "ImageProperties": {
      "id": "ImageProperties",
      "type": "object",
      "properties": {
        "dominantColors": {
          "description": "If present, dominant colors completed successfully.",
          "$ref": "DominantColorsAnnotation"
        }
      },
      "description": "Stores image properties, such as dominant colors."
    },
    "GoogleCloudVisionV1p1beta1OutputConfig": {
      "properties": {
        "batchSize": {
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.",
          "format": "int32",
          "type": "integer"
        },
        "gcsDestination": {
          "description": "The Google Cloud Storage location to write the output(s) to.",
          "$ref": "GoogleCloudVisionV1p1beta1GcsDestination"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1OutputConfig",
      "description": "The desired output location and metadata."
    },
    "GoogleCloudVisionV1p2beta1WebDetection": {
      "properties": {
        "pagesWithMatchingImages": {
          "description": "Web pages containing the matching images from the Internet.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebPage"
          },
          "type": "array"
        },
        "webEntities": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebEntity"
          },
          "description": "Deduced entities from similar images on the Internet.",
          "type": "array"
        },
        "fullMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          },
          "description": "Fully matching images from the Internet. Can include resized copies of the query image."
        },
        "partialMatchingImages": {
          "type": "array",
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          }
        },
        "bestGuessLabels": {
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebLabel"
          }
        },
        "visuallySimilarImages": {
          "type": "array",
          "description": "The visually similar image results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          }
        }
      },
      "id": "GoogleCloudVisionV1p2beta1WebDetection",
      "type": "object",
      "description": "Relevant information for the image from the Internet."
    },
    "GoogleCloudVisionV1p3beta1ImageAnnotationContext": {
      "type": "object",
      "properties": {
        "pageNumber": {
          "type": "integer",
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.",
          "format": "int32"
        },
        "uri": {
          "type": "string",
          "description": "The URI of the file used to produce the image."
        }
      },
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.",
      "id": "GoogleCloudVisionV1p3beta1ImageAnnotationContext"
    },
    "GoogleCloudVisionV1p1beta1Product": {
      "id": "GoogleCloudVisionV1p1beta1Product",
      "description": "A Product contains ReferenceImages.",
      "properties": {
        "productLabels": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ProductKeyValue"
          },
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."
        },
        "description": {
          "type": "string",
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long."
        },
        "name": {
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.",
          "type": "string"
        },
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        }
      },
      "type": "object"
    },
    "PurgeProductsRequest": {
      "id": "PurgeProductsRequest",
      "type": "object",
      "properties": {
        "productSetPurgeConfig": {
          "description": "Specify which ProductSet contains the Products to be deleted.",
          "$ref": "ProductSetPurgeConfig"
        },
        "deleteOrphanProducts": {
          "description": "If delete_orphan_products is true, all Products that are not in any ProductSet will be deleted.",
          "type": "boolean"
        },
        "force": {
          "type": "boolean",
          "description": "The default value is false. Override this value to true to actually perform the purge."
        }
      },
      "description": "Request message for the `PurgeProducts` method."
    },
    "GoogleCloudVisionV1p2beta1CropHintsAnnotation": {
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "properties": {
        "cropHints": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1CropHint"
          },
          "description": "Crop hint results.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1CropHintsAnnotation"
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult": {
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult",
      "description": "Information about the products similar to a single product in a query image.",
      "properties": {
        "objectAnnotations": {
          "type": "array",
          "description": "List of generic predictions for the object in the bounding box.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation"
          }
        },
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        },
        "boundingPoly": {
          "description": "The bounding polygon around the product detected in the query image.",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1ImportProductSetsResponse": {
      "id": "GoogleCloudVisionV1p3beta1ImportProductSetsResponse",
      "type": "object",
      "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.",
      "properties": {
        "statuses": {
          "items": {
            "$ref": "Status"
          },
          "type": "array",
          "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0."
        },
        "referenceImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ReferenceImage"
          },
          "description": "The list of reference_images that are imported successfully.",
          "type": "array"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1Product": {
      "description": "A Product contains ReferenceImages.",
      "id": "GoogleCloudVisionV1p3beta1Product",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        },
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "description": {
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."
        },
        "productLabels": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductKeyValue"
          },
          "type": "array",
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1GcsDestination": {
      "type": "object",
      "description": "The Google Cloud Storage location where the output will be written to.",
      "id": "GoogleCloudVisionV1p1beta1GcsDestination",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.",
          "type": "string"
        }
      }
    },
    "AnnotateImageRequest": {
      "properties": {
        "imageContext": {
          "description": "Additional context that may accompany the image.",
          "$ref": "ImageContext"
        },
        "image": {
          "$ref": "Image",
          "description": "The image to be processed."
        },
        "features": {
          "description": "Requested features.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        }
      },
      "description": "Request for performing Google Cloud Vision API tasks over a user-provided image, with user-requested features, and with context information.",
      "id": "AnnotateImageRequest",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1ProductSearchResultsResult": {
      "type": "object",
      "properties": {
        "product": {
          "description": "The Product.",
          "$ref": "GoogleCloudVisionV1p2beta1Product"
        },
        "score": {
          "format": "float",
          "type": "number",
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)."
        },
        "image": {
          "type": "string",
          "description": "The resource name of the image from the product that is the closest match to the query."
        }
      },
      "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult",
      "description": "Information about a product."
    },
    "WebEntity": {
      "description": "Entity deduced from similar images on the Internet.",
      "type": "object",
      "properties": {
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Canonical description of the entity, in English."
        },
        "score": {
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.",
          "type": "number",
          "format": "float"
        }
      },
      "id": "WebEntity"
    },
    "Landmark": {
      "id": "Landmark",
      "type": "object",
      "properties": {
        "type": {
          "description": "Face landmark type.",
          "type": "string",
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ],
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ]
        },
        "position": {
          "$ref": "Position",
          "description": "Face landmark position."
        }
      },
      "description": "A face-specific landmark (for example, a face feature)."
    },
    "GoogleCloudVisionV1p1beta1AnnotateFileResponse": {
      "id": "GoogleCloudVisionV1p1beta1AnnotateFileResponse",
      "type": "object",
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.",
      "properties": {
        "error": {
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.",
          "$ref": "Status"
        },
        "responses": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1AnnotateImageResponse"
          },
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "type": "array"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32",
          "description": "This field gives the total number of pages in the file."
        },
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "GoogleCloudVisionV1p1beta1InputConfig"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1NormalizedVertex": {
      "id": "GoogleCloudVisionV1p3beta1NormalizedVertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "type": "object",
      "properties": {
        "x": {
          "description": "X coordinate.",
          "type": "number",
          "format": "float"
        },
        "y": {
          "type": "number",
          "description": "Y coordinate.",
          "format": "float"
        }
      }
    },
    "ImageContext": {
      "type": "object",
      "id": "ImageContext",
      "description": "Image context and/or feature-specific parameters.",
      "properties": {
        "webDetectionParams": {
          "$ref": "WebDetectionParams",
          "description": "Parameters for web detection."
        },
        "productSearchParams": {
          "description": "Parameters for product search.",
          "$ref": "ProductSearchParams"
        },
        "cropHintsParams": {
          "description": "Parameters for crop hints annotation request.",
          "$ref": "CropHintsParams"
        },
        "languageHints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting `language_hints` is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported languages](https://cloud.google.com/vision/docs/languages)."
        },
        "latLongRect": {
          "$ref": "LatLongRect",
          "description": "Not used."
        },
        "textDetectionParams": {
          "$ref": "TextDetectionParams",
          "description": "Parameters for text detection and document text detection."
        }
      }
    },
    "DetectedLanguage": {
      "id": "DetectedLanguage",
      "description": "Detected language for a structural component.",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of detected language. Range [0, 1]."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse": {
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse",
      "properties": {
        "outputConfig": {
          "$ref": "GoogleCloudVisionV1p3beta1OutputConfig",
          "description": "The output location and metadata from AsyncAnnotateFileRequest."
        }
      },
      "description": "The response for a single offline file annotation request."
    },
    "GoogleCloudVisionV1p1beta1WebDetectionWebLabel": {
      "properties": {
        "label": {
          "description": "Label for extra metadata.",
          "type": "string"
        },
        "languageCode": {
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1WebDetectionWebLabel",
      "description": "Label to provide extra metadata for the web detection.",
      "type": "object"
    },
    "Vertex": {
      "properties": {
        "y": {
          "type": "integer",
          "format": "int32",
          "description": "Y coordinate."
        },
        "x": {
          "type": "integer",
          "format": "int32",
          "description": "X coordinate."
        }
      },
      "id": "Vertex",
      "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1Paragraph": {
      "description": "Structural unit of text representing a number of words in certain order.",
      "id": "GoogleCloudVisionV1p2beta1Paragraph",
      "properties": {
        "words": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Word"
          },
          "type": "array",
          "description": "List of all words in this paragraph."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the paragraph."
        },
        "confidence": {
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1].",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1ReferenceImage": {
      "id": "GoogleCloudVisionV1p4beta1ReferenceImage",
      "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.",
      "properties": {
        "name": {
          "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."
        },
        "boundingPolys": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
          },
          "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not)."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse": {
      "description": "Response to an async batch file annotation request.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse"
          },
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1FaceAnnotation": {
      "type": "object",
      "description": "A face annotation object contains the results of face detection.",
      "id": "GoogleCloudVisionV1p1beta1FaceAnnotation",
      "properties": {
        "sorrowLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Sorrow likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "headwearLikelihood": {
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Headwear likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "surpriseLikelihood": {
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Surprise likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "fdBoundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."
        },
        "underExposedLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Under-exposed likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "angerLikelihood": {
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Anger likelihood."
        },
        "blurredLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Blurred likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "landmarkingConfidence": {
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "panAngle": {
          "format": "float",
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "type": "number"
        },
        "tiltAngle": {
          "type": "number",
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].",
          "format": "float"
        },
        "detectionConfidence": {
          "format": "float",
          "description": "Detection confidence. Range [0, 1].",
          "type": "number"
        },
        "landmarks": {
          "description": "Detected face landmarks.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark"
          }
        },
        "rollAngle": {
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].",
          "type": "number",
          "format": "float"
        },
        "joyLikelihood": {
          "description": "Joy likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        }
      }
    },
    "ProductSet": {
      "properties": {
        "indexTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time at which this ProductSet was last indexed. Query results will reflect all updates before this time. If this ProductSet has never been indexed, this timestamp is the default value \"1970-01-01T00:00:00Z\". This field is ignored when creating a ProductSet.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet."
        },
        "displayName": {
          "description": "The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long.",
          "type": "string"
        },
        "indexError": {
          "readOnly": true,
          "$ref": "Status",
          "description": "Output only. If there was an error with indexing the product set, the field is populated. This field is ignored when creating a ProductSet."
        }
      },
      "type": "object",
      "id": "ProductSet",
      "description": "A ProductSet contains Products. A ProductSet can contain a maximum of 1 million reference images. If the limit is exceeded, periodic indexing will fail."
    },
    "FaceAnnotation": {
      "properties": {
        "detectionConfidence": {
          "format": "float",
          "description": "Detection confidence. Range [0, 1].",
          "type": "number"
        },
        "angerLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Anger likelihood.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "surpriseLikelihood": {
          "type": "string",
          "description": "Surprise likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "underExposedLikelihood": {
          "type": "string",
          "description": "Under-exposed likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ]
        },
        "landmarks": {
          "items": {
            "$ref": "Landmark"
          },
          "type": "array",
          "description": "Detected face landmarks."
        },
        "tiltAngle": {
          "type": "number",
          "format": "float",
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]."
        },
        "panAngle": {
          "type": "number",
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "format": "float"
        },
        "blurredLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Blurred likelihood.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "fdBoundingPoly": {
          "$ref": "BoundingPoly",
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix."
        },
        "sorrowLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Sorrow likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "landmarkingConfidence": {
          "format": "float",
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number"
        },
        "joyLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Joy likelihood."
        },
        "rollAngle": {
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].",
          "type": "number",
          "format": "float"
        },
        "boundingPoly": {
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated.",
          "$ref": "BoundingPoly"
        },
        "headwearLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Headwear likelihood.",
          "type": "string"
        }
      },
      "id": "FaceAnnotation",
      "description": "A face annotation object contains the results of face detection.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1Property": {
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "id": "GoogleCloudVisionV1p2beta1Property",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the property.",
          "type": "string"
        },
        "uint64Value": {
          "description": "Value of numeric properties.",
          "format": "uint64",
          "type": "string"
        },
        "value": {
          "description": "Value of the property.",
          "type": "string"
        }
      }
    },
    "TextAnnotation": {
      "id": "TextAnnotation",
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "properties": {
        "pages": {
          "type": "array",
          "description": "List of pages detected by OCR.",
          "items": {
            "$ref": "Page"
          }
        },
        "text": {
          "description": "UTF-8 text detected on the pages.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1CropHint": {
      "id": "GoogleCloudVisionV1p4beta1CropHint",
      "properties": {
        "importanceFraction": {
          "description": "Fraction of importance of this salient region with respect to the original image.",
          "type": "number",
          "format": "float"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale."
        },
        "confidence": {
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "type": "number",
          "format": "float"
        }
      },
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1Product": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Product",
      "properties": {
        "productLabels": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductKeyValue"
          },
          "type": "array",
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."
        },
        "name": {
          "type": "string",
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."
        },
        "displayName": {
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.",
          "type": "string"
        },
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "description": {
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.",
          "type": "string"
        }
      },
      "description": "A Product contains ReferenceImages."
    },
    "GoogleCloudVisionV1p3beta1ReferenceImage": {
      "id": "GoogleCloudVisionV1p3beta1ReferenceImage",
      "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.",
      "type": "object",
      "properties": {
        "boundingPolys": {
          "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
          },
          "type": "array"
        },
        "uri": {
          "type": "string",
          "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."
        },
        "name": {
          "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1EntityAnnotation": {
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."
        },
        "locale": {
          "description": "The language code for the locale in which the entity textual `description` is expressed.",
          "type": "string"
        },
        "topicality": {
          "format": "float",
          "type": "number",
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1]."
        },
        "description": {
          "description": "Entity textual description, expressed in its `locale` language.",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Property"
          },
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."
        },
        "score": {
          "description": "Overall score of the result. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "mid": {
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).",
          "type": "string"
        },
        "locations": {
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1LocationInfo"
          },
          "type": "array"
        },
        "confidence": {
          "format": "float",
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1EntityAnnotation",
      "description": "Set of detected entity features.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1GcsDestination": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1GcsDestination",
      "description": "The Google Cloud Storage location where the output will be written to.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1Word": {
      "type": "object",
      "description": "A word representation.",
      "properties": {
        "property": {
          "description": "Additional information detected for the word.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty"
        },
        "symbols": {
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Symbol"
          }
        },
        "boundingBox": {
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "confidence": {
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "format": "float",
          "type": "number"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1Word"
    },
    "CropHintsAnnotation": {
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "properties": {
        "cropHints": {
          "description": "Crop hint results.",
          "items": {
            "$ref": "CropHint"
          },
          "type": "array"
        }
      },
      "id": "CropHintsAnnotation",
      "type": "object"
    },
    "ListProductsInProductSetResponse": {
      "description": "Response message for the `ListProductsInProductSet` method.",
      "id": "ListProductsInProductSetResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "products": {
          "description": "The list of Products.",
          "type": "array",
          "items": {
            "$ref": "Product"
          }
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1InputConfig": {
      "type": "object",
      "description": "The desired input location and metadata.",
      "properties": {
        "gcsSource": {
          "description": "The Google Cloud Storage location to read the input from.",
          "$ref": "GoogleCloudVisionV1p4beta1GcsSource"
        },
        "mimeType": {
          "type": "string",
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported."
        },
        "content": {
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1InputConfig"
    },
    "Color": {
      "id": "Color",
      "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...",
      "properties": {
        "red": {
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "format": "float",
          "type": "number"
        },
        "blue": {
          "type": "number",
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "format": "float"
        },
        "green": {
          "format": "float",
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "type": "number"
        },
        "alpha": {
          "format": "float",
          "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProductSearchParams": {
      "properties": {
        "boundingPoly": {
          "description": "The bounding polygon around the area of interest in the image. If it is not specified, system discretion will be applied.",
          "$ref": "BoundingPoly"
        },
        "filter": {
          "type": "string",
          "description": "The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An '=' should be used to connect the key and value. For example, \"(color = red OR color = blue) AND brand = Google\" is acceptable, but \"(color = red OR brand = Google)\" is not acceptable. \"color: red\" is not acceptable because it uses a ':' instead of an '='."
        },
        "productCategories": {
          "description": "The list of product categories to search in. Currently, we only consider the first category, and either \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\", or \"general-v1\" should be specified. The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported but will be deprecated. For new products, please use \"homegoods-v2\", \"apparel-v2\", or \"toys-v2\" for better product search accuracy. It is recommended to migrate existing products to these categories as well.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "productSet": {
          "description": "The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.",
          "type": "string"
        }
      },
      "description": "Parameters for a product search request.",
      "type": "object",
      "id": "ProductSearchParams"
    },
    "ImportProductSetsInputConfig": {
      "id": "ImportProductSetsInputConfig",
      "type": "object",
      "description": "The input content for the `ImportProductSets` method.",
      "properties": {
        "gcsSource": {
          "description": "The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line.",
          "$ref": "ImportProductSetsGcsSource"
        }
      }
    },
    "ImageSource": {
      "properties": {
        "imageUri": {
          "type": "string",
          "description": "The URI of the source image. Can be either: 1. A Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info. 2. A publicly-accessible image HTTP/HTTPS URL. When fetching images from HTTP/HTTPS URLs, Google cannot guarantee that the request will be completed. Your request may fail if the specified host denies the request (e.g. due to request throttling or DOS prevention), or if Google throttles requests to the site for abuse prevention. You should not depend on externally-hosted images for production applications. When both `gcs_image_uri` and `image_uri` are specified, `image_uri` takes precedence."
        },
        "gcsImageUri": {
          "type": "string",
          "description": "**Use `image_uri` instead.** The Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info."
        }
      },
      "id": "ImageSource",
      "description": "External image source (Google Cloud Storage or web URL image location).",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1AsyncBatchAnnotateFilesResponse": {
      "type": "object",
      "description": "Response to an async batch file annotation request.",
      "id": "GoogleCloudVisionV1p3beta1AsyncBatchAnnotateFilesResponse",
      "properties": {
        "responses": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse"
          },
          "type": "array",
          "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1CropHintsAnnotation": {
      "properties": {
        "cropHints": {
          "description": "Crop hint results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1CropHint"
          },
          "type": "array"
        }
      },
      "description": "Set of crop hints that are used to generate new crops when serving images.",
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1CropHintsAnnotation"
    },
    "ImportProductSetsGcsSource": {
      "properties": {
        "csvFileUri": {
          "type": "string",
          "description": "The Google Cloud Storage URI of the input csv file. The URI must start with `gs://`. The format of the input csv file should be one image per line. In each line, there are 8 columns. 1. image-uri 2. image-id 3. product-set-id 4. product-id 5. product-category 6. product-display-name 7. labels 8. bounding-poly The `image-uri`, `product-set-id`, `product-id`, and `product-category` columns are required. All other columns are optional. If the `ProductSet` or `Product` specified by the `product-set-id` and `product-id` values does not exist, then the system will create a new `ProductSet` or `Product` for the image. In this case, the `product-display-name` column refers to display_name, the `product-category` column refers to product_category, and the `labels` column refers to product_labels. The `image-id` column is optional but must be unique if provided. If it is empty, the system will automatically assign a unique id to the image. The `product-display-name` column is optional. If it is empty, the system sets the display_name field for the product to a space (\" \"). You can update the `display_name` later by using the API. If a `Product` with the specified `product-id` already exists, then the system ignores the `product-display-name`, `product-category`, and `labels` columns. The `labels` column (optional) is a line containing a list of comma-separated key-value pairs, in the following format: \"key_1=value_1,key_2=value_2,...,key_n=value_n\" The `bounding-poly` column (optional) identifies one region of interest from the image in the same manner as `CreateReferenceImage`. If you do not specify the `bounding-poly` column, then the system will try to detect regions of interest automatically. At most one `bounding-poly` column is allowed per line. If the image contains multiple regions of interest, add a line to the CSV file that includes the same product information, and the `bounding-poly` values for each region of interest. The `bounding-poly` column must contain an even number of comma-separated numbers, in the format \"p1_x,p1_y,p2_x,p2_y,...,pn_x,pn_y\". Use non-negative integers for absolute bounding polygons, and float values in [0, 1] for normalized bounding polygons. The system will resize the image if the image resolution is too large to process (larger than 20MP)."
        }
      },
      "id": "ImportProductSetsGcsSource",
      "type": "object",
      "description": "The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line."
    },
    "TextDetectionParams": {
      "description": "Parameters for text detections. This is used to control TEXT_DETECTION and DOCUMENT_TEXT_DETECTION features.",
      "type": "object",
      "id": "TextDetectionParams",
      "properties": {
        "enableTextDetectionConfidenceScore": {
          "description": "By default, Cloud Vision API only includes confidence score for DOCUMENT_TEXT_DETECTION result. Set the flag to true to include confidence score for TEXT_DETECTION as well.",
          "type": "boolean"
        },
        "advancedOcrOptions": {
          "items": {
            "type": "string"
          },
          "description": "A list of advanced OCR options to further fine-tune OCR behavior. Current valid values are: - `legacy_layout`: a heuristics layout detection algorithm, which serves as an alternative to the current ML-based layout detection algorithm. Customers can choose the best suitable layout algorithm based on their situation.",
          "type": "array"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1ColorInfo": {
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1ColorInfo",
      "properties": {
        "pixelFraction": {
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "color": {
          "description": "RGB components of the color.",
          "$ref": "Color"
        },
        "score": {
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        }
      }
    },
    "ListProductSetsResponse": {
      "description": "Response message for the `ListProductSets` method.",
      "type": "object",
      "id": "ListProductSetsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "productSets": {
          "items": {
            "$ref": "ProductSet"
          },
          "type": "array",
          "description": "List of ProductSets."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ColorInfo": {
      "properties": {
        "score": {
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "color": {
          "$ref": "Color",
          "description": "RGB components of the color."
        },
        "pixelFraction": {
          "type": "number",
          "format": "float",
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1]."
        }
      },
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1ColorInfo"
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResultsResult": {
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult",
      "description": "Information about a product.",
      "type": "object",
      "properties": {
        "score": {
          "format": "float",
          "type": "number",
          "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)."
        },
        "image": {
          "type": "string",
          "description": "The resource name of the image from the product that is the closest match to the query."
        },
        "product": {
          "$ref": "GoogleCloudVisionV1p4beta1Product",
          "description": "The Product."
        }
      }
    },
    "Word": {
      "description": "A word representation.",
      "type": "object",
      "properties": {
        "boundingBox": {
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "BoundingPoly"
        },
        "symbols": {
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order.",
          "items": {
            "$ref": "Symbol"
          },
          "type": "array"
        },
        "property": {
          "description": "Additional information detected for the word.",
          "$ref": "TextProperty"
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "type": "number"
        }
      },
      "id": "Word"
    },
    "GoogleCloudVisionV1p4beta1OperationMetadata": {
      "id": "GoogleCloudVisionV1p4beta1OperationMetadata",
      "properties": {
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time when the operation result was last updated."
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "description": "Current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ]
        },
        "createTime": {
          "description": "The time when the batch request was received.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "type": "object",
      "description": "Contains metadata for the BatchAnnotateImages operation."
    },
    "DominantColorsAnnotation": {
      "type": "object",
      "description": "Set of dominant colors and their corresponding scores.",
      "properties": {
        "colors": {
          "type": "array",
          "description": "RGB color values with their score and pixel fraction.",
          "items": {
            "$ref": "ColorInfo"
          }
        }
      },
      "id": "DominantColorsAnnotation"
    },
    "GoogleCloudVisionV1p4beta1Position": {
      "type": "object",
      "properties": {
        "x": {
          "format": "float",
          "description": "X coordinate.",
          "type": "number"
        },
        "z": {
          "description": "Z coordinate (or depth).",
          "format": "float",
          "type": "number"
        },
        "y": {
          "format": "float",
          "type": "number",
          "description": "Y coordinate."
        }
      },
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "id": "GoogleCloudVisionV1p4beta1Position"
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebLabel": {
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebLabel",
      "type": "object",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "label": {
          "type": "string",
          "description": "Label for extra metadata."
        }
      },
      "description": "Label to provide extra metadata for the web detection."
    },
    "KeyValue": {
      "description": "A product label represented as a key-value pair.",
      "type": "object",
      "id": "KeyValue",
      "properties": {
        "key": {
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        },
        "value": {
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1Celebrity": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The Celebrity's display name."
        },
        "name": {
          "description": "The resource name of the preloaded Celebrity. Has the format `builtin/{mid}`.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "The Celebrity's description."
        }
      },
      "description": "A Celebrity is a group of Faces with an identity.",
      "id": "GoogleCloudVisionV1p4beta1Celebrity"
    },
    "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse": {
      "description": "The response for a single offline file annotation request.",
      "id": "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse",
      "properties": {
        "outputConfig": {
          "description": "The output location and metadata from AsyncAnnotateFileRequest.",
          "$ref": "GoogleCloudVisionV1p4beta1OutputConfig"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1Page": {
      "properties": {
        "property": {
          "description": "Additional information detected on the page.",
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty"
        },
        "blocks": {
          "type": "array",
          "description": "List of blocks of text, images etc on this page.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Block"
          }
        },
        "height": {
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32",
          "type": "integer"
        },
        "width": {
          "type": "integer",
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32"
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results on the page. Range [0, 1]."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Page",
      "description": "Detected page from OCR."
    },
    "GoogleCloudVisionV1p3beta1ColorInfo": {
      "id": "GoogleCloudVisionV1p3beta1ColorInfo",
      "properties": {
        "color": {
          "$ref": "Color",
          "description": "RGB components of the color."
        },
        "score": {
          "format": "float",
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "type": "number"
        },
        "pixelFraction": {
          "format": "float",
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image."
    },
    "GoogleCloudVisionV1p1beta1InputConfig": {
      "description": "The desired input location and metadata.",
      "type": "object",
      "properties": {
        "mimeType": {
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.",
          "type": "string"
        },
        "content": {
          "format": "byte",
          "type": "string",
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."
        },
        "gcsSource": {
          "$ref": "GoogleCloudVisionV1p1beta1GcsSource",
          "description": "The Google Cloud Storage location to read the input from."
        }
      },
      "id": "GoogleCloudVisionV1p1beta1InputConfig"
    },
    "GoogleCloudVisionV1p2beta1FaceAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1FaceAnnotation",
      "properties": {
        "tiltAngle": {
          "type": "number",
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].",
          "format": "float"
        },
        "fdBoundingPoly": {
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        },
        "joyLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Joy likelihood.",
          "type": "string"
        },
        "blurredLikelihood": {
          "description": "Blurred likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "landmarkingConfidence": {
          "description": "Face landmarking confidence. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "surpriseLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Surprise likelihood.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "underExposedLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Under-exposed likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string"
        },
        "rollAngle": {
          "type": "number",
          "format": "float",
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]."
        },
        "detectionConfidence": {
          "description": "Detection confidence. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "panAngle": {
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "type": "number",
          "format": "float"
        },
        "headwearLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Headwear likelihood."
        },
        "sorrowLikelihood": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Sorrow likelihood."
        },
        "angerLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Anger likelihood."
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        },
        "landmarks": {
          "type": "array",
          "description": "Detected face landmarks.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark"
          }
        }
      },
      "description": "A face annotation object contains the results of face detection."
    },
    "WebPage": {
      "properties": {
        "fullMatchingImages": {
          "items": {
            "$ref": "WebImage"
          },
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "type": "array"
        },
        "pageTitle": {
          "description": "Title for the web page, may contain HTML markups.",
          "type": "string"
        },
        "score": {
          "description": "(Deprecated) Overall relevancy score for the web page.",
          "format": "float",
          "type": "number"
        },
        "partialMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "WebImage"
          },
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."
        },
        "url": {
          "description": "The result web page URL.",
          "type": "string"
        }
      },
      "id": "WebPage",
      "description": "Metadata for web pages.",
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1CropHintsAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1CropHintsAnnotation",
      "properties": {
        "cropHints": {
          "description": "Crop hint results.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1CropHint"
          }
        }
      },
      "description": "Set of crop hints that are used to generate new crops when serving images."
    },
    "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage": {
      "properties": {
        "confidence": {
          "type": "number",
          "description": "Confidence of detected language. Range [0, 1].",
          "format": "float"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage",
      "description": "Detected language for a structural component."
    },
    "GoogleCloudVisionV1p1beta1ColorInfo": {
      "id": "GoogleCloudVisionV1p1beta1ColorInfo",
      "properties": {
        "score": {
          "type": "number",
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "format": "float"
        },
        "color": {
          "$ref": "Color",
          "description": "RGB components of the color."
        },
        "pixelFraction": {
          "format": "float",
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image."
    },
    "GoogleCloudVisionV1p2beta1CropHint": {
      "properties": {
        "boundingPoly": {
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        },
        "importanceFraction": {
          "type": "number",
          "format": "float",
          "description": "Fraction of importance of this salient region with respect to the original image."
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of this being a salient region. Range [0, 1]."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1CropHint",
      "description": "Single crop hint that is used to generate a new crop when serving an image."
    },
    "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark": {
      "description": "A face-specific landmark (for example, a face feature).",
      "type": "object",
      "properties": {
        "position": {
          "$ref": "GoogleCloudVisionV1p1beta1Position",
          "description": "Face landmark position."
        },
        "type": {
          "description": "Face landmark type.",
          "type": "string",
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ],
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ]
        }
      },
      "id": "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark"
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebEntity": {
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebEntity",
      "type": "object",
      "description": "Entity deduced from similar images on the Internet.",
      "properties": {
        "score": {
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.",
          "type": "number",
          "format": "float"
        },
        "entityId": {
          "type": "string",
          "description": "Opaque entity ID."
        },
        "description": {
          "type": "string",
          "description": "Canonical description of the entity, in English."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebImage": {
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebImage",
      "description": "Metadata for online images.",
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "description": "(Deprecated) Overall relevancy score for the image.",
          "format": "float"
        },
        "url": {
          "type": "string",
          "description": "The result image URL."
        }
      }
    },
    "ProductSearchResults": {
      "properties": {
        "indexTime": {
          "type": "string",
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "format": "google-datetime"
        },
        "results": {
          "items": {
            "$ref": "Result"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        },
        "productGroupedResults": {
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.",
          "items": {
            "$ref": "GroupedResult"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "ProductSearchResults",
      "description": "Results for a product search request."
    },
    "GoogleCloudVisionV1p2beta1Symbol": {
      "properties": {
        "confidence": {
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "text": {
          "type": "string",
          "description": "The actual UTF-8 representation of the symbol."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the symbol."
        }
      },
      "type": "object",
      "description": "A single symbol representation.",
      "id": "GoogleCloudVisionV1p2beta1Symbol"
    },
    "CropHintsParams": {
      "description": "Parameters for crop hints annotation request.",
      "id": "CropHintsParams",
      "properties": {
        "aspectRatios": {
          "items": {
            "type": "number",
            "format": "float"
          },
          "type": "array",
          "description": "Aspect ratios in floats, representing the ratio of the width to the height of the image. For example, if the desired aspect ratio is 4/3, the corresponding float value should be 1.33333. If not specified, the best possible crop is returned. The number of provided aspect ratios is limited to a maximum of 16; any aspect ratios provided after the 16th are ignored."
        }
      },
      "type": "object"
    },
    "InputConfig": {
      "type": "object",
      "id": "InputConfig",
      "properties": {
        "gcsSource": {
          "description": "The Google Cloud Storage location to read the input from.",
          "$ref": "GcsSource"
        },
        "mimeType": {
          "type": "string",
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported."
        },
        "content": {
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.",
          "format": "byte",
          "type": "string"
        }
      },
      "description": "The desired input location and metadata."
    },
    "GoogleCloudVisionV1p1beta1Page": {
      "id": "GoogleCloudVisionV1p1beta1Page",
      "properties": {
        "property": {
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty",
          "description": "Additional information detected on the page."
        },
        "confidence": {
          "description": "Confidence of the OCR results on the page. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "height": {
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32",
          "type": "integer"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Block"
          },
          "description": "List of blocks of text, images etc on this page."
        },
        "width": {
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object",
      "description": "Detected page from OCR."
    },
    "GoogleCloudVisionV1p3beta1TextAnnotation": {
      "id": "GoogleCloudVisionV1p3beta1TextAnnotation",
      "type": "object",
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "properties": {
        "pages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Page"
          },
          "description": "List of pages detected by OCR."
        },
        "text": {
          "description": "UTF-8 text detected on the pages.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1Symbol": {
      "id": "GoogleCloudVisionV1p3beta1Symbol",
      "properties": {
        "text": {
          "description": "The actual UTF-8 representation of the symbol.",
          "type": "string"
        },
        "boundingBox": {
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "property": {
          "description": "Additional information detected for the symbol.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty"
        },
        "confidence": {
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "format": "float",
          "type": "number"
        }
      },
      "description": "A single symbol representation.",
      "type": "object"
    },
    "LocalizedObjectAnnotation": {
      "description": "Set of detected objects with bounding boxes.",
      "properties": {
        "mid": {
          "type": "string",
          "description": "Object ID that should align with EntityAnnotation mid."
        },
        "boundingPoly": {
          "description": "Image region to which this object belongs. This must be populated.",
          "$ref": "BoundingPoly"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Score of the result. Range [0, 1]."
        }
      },
      "id": "LocalizedObjectAnnotation",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1EntityAnnotation": {
      "type": "object",
      "description": "Set of detected entity features.",
      "id": "GoogleCloudVisionV1p2beta1EntityAnnotation",
      "properties": {
        "description": {
          "description": "Entity textual description, expressed in its `locale` language.",
          "type": "string"
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1]."
        },
        "score": {
          "format": "float",
          "description": "Overall score of the result. Range [0, 1].",
          "type": "number"
        },
        "properties": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Property"
          },
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.",
          "type": "array"
        },
        "mid": {
          "type": "string",
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."
        },
        "topicality": {
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "locations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1LocationInfo"
          },
          "type": "array",
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."
        },
        "locale": {
          "description": "The language code for the locale in which the entity textual `description` is expressed.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse": {
      "description": "The response for a single offline file annotation request.",
      "id": "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse",
      "properties": {
        "outputConfig": {
          "description": "The output location and metadata from AsyncAnnotateFileRequest.",
          "$ref": "GoogleCloudVisionV1p2beta1OutputConfig"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1Position": {
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "properties": {
        "z": {
          "format": "float",
          "description": "Z coordinate (or depth).",
          "type": "number"
        },
        "y": {
          "type": "number",
          "description": "Y coordinate.",
          "format": "float"
        },
        "x": {
          "description": "X coordinate.",
          "type": "number",
          "format": "float"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1Position"
    },
    "GoogleCloudVisionV1p3beta1InputConfig": {
      "description": "The desired input location and metadata.",
      "type": "object",
      "properties": {
        "mimeType": {
          "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.",
          "type": "string"
        },
        "gcsSource": {
          "$ref": "GoogleCloudVisionV1p3beta1GcsSource",
          "description": "The Google Cloud Storage location to read the input from."
        },
        "content": {
          "format": "byte",
          "type": "string",
          "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1InputConfig"
    },
    "GoogleCloudVisionV1p3beta1LocationInfo": {
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1LocationInfo",
      "properties": {
        "latLng": {
          "description": "lat/long location coordinates.",
          "$ref": "LatLng"
        }
      },
      "description": "Detected entity location information."
    },
    "GoogleCloudVisionV1p4beta1Property": {
      "type": "object",
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the property."
        },
        "name": {
          "type": "string",
          "description": "Name of the property."
        },
        "uint64Value": {
          "type": "string",
          "description": "Value of numeric properties.",
          "format": "uint64"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1Property"
    },
    "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty": {
      "id": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty",
      "description": "Additional information detected on the structural component.",
      "type": "object",
      "properties": {
        "detectedBreak": {
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak",
          "description": "Detected start or end of a text segment."
        },
        "detectedLanguages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage"
          },
          "description": "A list of detected languages together with confidence."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1FaceAnnotation": {
      "type": "object",
      "properties": {
        "panAngle": {
          "type": "number",
          "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].",
          "format": "float"
        },
        "landmarkingConfidence": {
          "type": "number",
          "description": "Face landmarking confidence. Range [0, 1].",
          "format": "float"
        },
        "landmarks": {
          "type": "array",
          "description": "Detected face landmarks.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark"
          }
        },
        "detectionConfidence": {
          "description": "Detection confidence. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "angerLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Anger likelihood.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "surpriseLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "description": "Surprise likelihood.",
          "type": "string"
        },
        "joyLikelihood": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Joy likelihood.",
          "type": "string"
        },
        "fdBoundingPoly": {
          "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.",
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly"
        },
        "rollAngle": {
          "type": "number",
          "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].",
          "format": "float"
        },
        "tiltAngle": {
          "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].",
          "format": "float",
          "type": "number"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated."
        },
        "blurredLikelihood": {
          "description": "Blurred likelihood.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "underExposedLikelihood": {
          "description": "Under-exposed likelihood.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "headwearLikelihood": {
          "description": "Headwear likelihood.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "sorrowLikelihood": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Sorrow likelihood."
        }
      },
      "description": "A face annotation object contains the results of face detection.",
      "id": "GoogleCloudVisionV1p3beta1FaceAnnotation"
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResults": {
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResults",
      "description": "Results for a product search request.",
      "properties": {
        "results": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult"
          },
          "description": "List of results, one for each product match.",
          "type": "array"
        },
        "productGroupedResults": {
          "type": "array",
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult"
          }
        },
        "indexTime": {
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Feature": {
      "id": "Feature",
      "properties": {
        "maxResults": {
          "format": "int32",
          "description": "Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`.",
          "type": "integer"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "FACE_DETECTION",
            "LANDMARK_DETECTION",
            "LOGO_DETECTION",
            "LABEL_DETECTION",
            "TEXT_DETECTION",
            "DOCUMENT_TEXT_DETECTION",
            "SAFE_SEARCH_DETECTION",
            "IMAGE_PROPERTIES",
            "CROP_HINTS",
            "WEB_DETECTION",
            "PRODUCT_SEARCH",
            "OBJECT_LOCALIZATION"
          ],
          "enumDescriptions": [
            "Unspecified feature type.",
            "Run face detection.",
            "Run landmark detection.",
            "Run logo detection.",
            "Run label detection.",
            "Run text detection / optical character recognition (OCR). Text detection is optimized for areas of text within a larger image; if the image is a document, use `DOCUMENT_TEXT_DETECTION` instead.",
            "Run dense text document OCR. Takes precedence when both `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` are present.",
            "Run Safe Search to detect potentially unsafe or undesirable content.",
            "Compute a set of image properties, such as the image's dominant colors.",
            "Run crop hints.",
            "Run web detection.",
            "Run Product Search.",
            "Run localizer for object detection."
          ],
          "type": "string",
          "description": "The feature type."
        },
        "model": {
          "description": "Model to use for the feature. Supported values: \"builtin/stable\" (the default if unset) and \"builtin/latest\". `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` also support \"builtin/weekly\" for the bleeding edge release updated weekly.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The type of Google Cloud Vision API detection to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list."
    },
    "AnnotateFileRequest": {
      "description": "A request to annotate one single file, e.g. a PDF, TIFF or GIF file.",
      "type": "object",
      "id": "AnnotateFileRequest",
      "properties": {
        "inputConfig": {
          "description": "Required. Information about the input file.",
          "$ref": "InputConfig"
        },
        "features": {
          "description": "Required. Requested features.",
          "type": "array",
          "items": {
            "$ref": "Feature"
          }
        },
        "pages": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file."
        },
        "imageContext": {
          "$ref": "ImageContext",
          "description": "Additional context that may accompany the image(s) in the file."
        }
      }
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "type": "object",
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "properties": {
        "updateTime": {
          "description": "The time when the operation result was last updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "The time when the batch request was received.",
          "type": "string",
          "format": "google-datetime"
        },
        "state": {
          "type": "string",
          "description": "Current state of the batch operation.",
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ]
        }
      }
    },
    "ColorInfo": {
      "type": "object",
      "id": "ColorInfo",
      "properties": {
        "pixelFraction": {
          "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Image-specific score for this color. Value in range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "color": {
          "$ref": "Color",
          "description": "RGB components of the color."
        }
      },
      "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image."
    },
    "WebImage": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The result image URL."
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the image."
        }
      },
      "description": "Metadata for online images.",
      "type": "object",
      "id": "WebImage"
    },
    "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak": {
      "properties": {
        "isPrefix": {
          "description": "True if break prepends the element.",
          "type": "boolean"
        },
        "type": {
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ],
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "description": "Detected break type.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Detected start or end of a structural component.",
      "id": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak"
    },
    "GoogleCloudVisionV1p3beta1BoundingPoly": {
      "type": "object",
      "description": "A bounding polygon for the detected image annotation.",
      "id": "GoogleCloudVisionV1p3beta1BoundingPoly",
      "properties": {
        "normalizedVertices": {
          "description": "The bounding polygon normalized vertices.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1NormalizedVertex"
          }
        },
        "vertices": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Vertex"
          },
          "type": "array",
          "description": "The bounding polygon vertices."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1OutputConfig": {
      "id": "GoogleCloudVisionV1p3beta1OutputConfig",
      "type": "object",
      "description": "The desired output location and metadata.",
      "properties": {
        "batchSize": {
          "format": "int32",
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.",
          "type": "integer"
        },
        "gcsDestination": {
          "$ref": "GoogleCloudVisionV1p3beta1GcsDestination",
          "description": "The Google Cloud Storage location to write the output(s) to."
        }
      }
    },
    "DetectedBreak": {
      "id": "DetectedBreak",
      "properties": {
        "isPrefix": {
          "type": "boolean",
          "description": "True if break prepends the element."
        },
        "type": {
          "enum": [
            "UNKNOWN",
            "SPACE",
            "SURE_SPACE",
            "EOL_SURE_SPACE",
            "HYPHEN",
            "LINE_BREAK"
          ],
          "enumDescriptions": [
            "Unknown break label type.",
            "Regular space.",
            "Sure space (very wide).",
            "Line-wrapping break.",
            "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.",
            "Line break that ends a paragraph."
          ],
          "type": "string",
          "description": "Detected break type."
        }
      },
      "description": "Detected start or end of a structural component.",
      "type": "object"
    },
    "BatchAnnotateFilesResponse": {
      "id": "BatchAnnotateFilesResponse",
      "type": "object",
      "description": "A list of file annotation responses.",
      "properties": {
        "responses": {
          "description": "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest.",
          "items": {
            "$ref": "AnnotateFileResponse"
          },
          "type": "array"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "displayName": {
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.",
          "type": "string"
        },
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "name": {
          "type": "string",
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product."
        },
        "description": {
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.",
          "type": "string"
        },
        "productLabels": {
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.",
          "items": {
            "$ref": "KeyValue"
          },
          "type": "array"
        }
      },
      "id": "Product",
      "description": "A Product contains ReferenceImages."
    },
    "GoogleCloudVisionV1p1beta1Paragraph": {
      "type": "object",
      "description": "Structural unit of text representing a number of words in certain order.",
      "id": "GoogleCloudVisionV1p1beta1Paragraph",
      "properties": {
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1]."
        },
        "boundingBox": {
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly"
        },
        "property": {
          "description": "Additional information detected for the paragraph.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty"
        },
        "words": {
          "description": "List of all words in this paragraph.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Word"
          },
          "type": "array"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebPage": {
      "description": "Metadata for web pages.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The result web page URL."
        },
        "fullMatchingImages": {
          "type": "array",
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          }
        },
        "pageTitle": {
          "description": "Title for the web page, may contain HTML markups.",
          "type": "string"
        },
        "partialMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage"
          },
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."
        },
        "score": {
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the web page.",
          "type": "number"
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebPage"
    },
    "AsyncBatchAnnotateImagesResponse": {
      "id": "AsyncBatchAnnotateImagesResponse",
      "type": "object",
      "description": "Response to an async batch image annotation request.",
      "properties": {
        "outputConfig": {
          "description": "The output location and metadata from AsyncBatchAnnotateImagesRequest.",
          "$ref": "OutputConfig"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1EntityAnnotation": {
      "description": "Set of detected entity features.",
      "id": "GoogleCloudVisionV1p3beta1EntityAnnotation",
      "type": "object",
      "properties": {
        "properties": {
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Property"
          },
          "type": "array"
        },
        "score": {
          "description": "Overall score of the result. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "description": {
          "description": "Entity textual description, expressed in its `locale` language.",
          "type": "string"
        },
        "locations": {
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1LocationInfo"
          }
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."
        },
        "confidence": {
          "type": "number",
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].",
          "format": "float"
        },
        "topicality": {
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].",
          "type": "number",
          "format": "float"
        },
        "locale": {
          "description": "The language code for the locale in which the entity textual `description` is expressed.",
          "type": "string"
        },
        "mid": {
          "type": "string",
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
        }
      }
    },
    "GcsSource": {
      "id": "GcsSource",
      "type": "object",
      "description": "The Google Cloud Storage location where the input will be read from.",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1LocationInfo": {
      "description": "Detected entity location information.",
      "properties": {
        "latLng": {
          "$ref": "LatLng",
          "description": "lat/long location coordinates."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1LocationInfo"
    },
    "GoogleCloudVisionV1p4beta1Paragraph": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Paragraph",
      "properties": {
        "words": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Word"
          },
          "type": "array",
          "description": "List of all words in this paragraph."
        },
        "confidence": {
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "boundingBox": {
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the paragraph."
        }
      },
      "description": "Structural unit of text representing a number of words in certain order."
    },
    "GoogleCloudVisionV1p4beta1Block": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1Block",
      "properties": {
        "blockType": {
          "type": "string",
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ],
          "description": "Detected block type (text, image etc) for this block.",
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ]
        },
        "paragraphs": {
          "description": "List of paragraphs in this block (if this blocks is of type text).",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Paragraph"
          }
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results on the block. Range [0, 1].",
          "format": "float"
        },
        "property": {
          "description": "Additional information detected for the block.",
          "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly",
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        }
      },
      "description": "Logical element on the page."
    },
    "GoogleCloudVisionV1p3beta1ProductKeyValue": {
      "type": "object",
      "description": "A product label represented as a key-value pair.",
      "id": "GoogleCloudVisionV1p3beta1ProductKeyValue",
      "properties": {
        "key": {
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        },
        "value": {
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.",
          "type": "string"
        }
      }
    },
    "ImageAnnotationContext": {
      "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.",
      "properties": {
        "pageNumber": {
          "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.",
          "type": "integer",
          "format": "int32"
        },
        "uri": {
          "description": "The URI of the file used to produce the image.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ImageAnnotationContext"
    },
    "ReferenceImage": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image."
        },
        "uri": {
          "type": "string",
          "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`."
        },
        "boundingPolys": {
          "type": "array",
          "items": {
            "$ref": "BoundingPoly"
          },
          "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not)."
        }
      },
      "id": "ReferenceImage",
      "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1AnnotateImageResponse": {
      "properties": {
        "labelAnnotations": {
          "description": "If present, label detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          }
        },
        "productSearchResults": {
          "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResults",
          "description": "If present, product search has completed successfully."
        },
        "context": {
          "$ref": "GoogleCloudVisionV1p2beta1ImageAnnotationContext",
          "description": "If present, contextual information is needed to understand where this image comes from."
        },
        "landmarkAnnotations": {
          "type": "array",
          "description": "If present, landmark detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          }
        },
        "cropHintsAnnotation": {
          "description": "If present, crop hints have completed successfully.",
          "$ref": "GoogleCloudVisionV1p2beta1CropHintsAnnotation"
        },
        "error": {
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.",
          "$ref": "Status"
        },
        "webDetection": {
          "$ref": "GoogleCloudVisionV1p2beta1WebDetection",
          "description": "If present, web detection has completed successfully."
        },
        "logoAnnotations": {
          "description": "If present, logo detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          }
        },
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotation"
        },
        "safeSearchAnnotation": {
          "description": "If present, safe-search annotation has completed successfully.",
          "$ref": "GoogleCloudVisionV1p2beta1SafeSearchAnnotation"
        },
        "textAnnotations": {
          "type": "array",
          "description": "If present, text (OCR) detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation"
          }
        },
        "faceAnnotations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1FaceAnnotation"
          },
          "type": "array",
          "description": "If present, face detection has completed successfully."
        },
        "imagePropertiesAnnotation": {
          "$ref": "GoogleCloudVisionV1p2beta1ImageProperties",
          "description": "If present, image properties were extracted successfully."
        },
        "localizedObjectAnnotations": {
          "type": "array",
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation"
          }
        }
      },
      "id": "GoogleCloudVisionV1p2beta1AnnotateImageResponse",
      "description": "Response to an image annotation request.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1Page": {
      "type": "object",
      "description": "Detected page from OCR.",
      "id": "GoogleCloudVisionV1p3beta1Page",
      "properties": {
        "blocks": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Block"
          },
          "type": "array",
          "description": "List of blocks of text, images etc on this page."
        },
        "property": {
          "description": "Additional information detected on the page.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty"
        },
        "width": {
          "type": "integer",
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32"
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results on the page. Range [0, 1]."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1Property": {
      "id": "GoogleCloudVisionV1p1beta1Property",
      "description": "A `Property` consists of a user-supplied name/value pair.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the property."
        },
        "uint64Value": {
          "type": "string",
          "format": "uint64",
          "description": "Value of numeric properties."
        },
        "name": {
          "description": "Name of the property.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebImage": {
      "type": "object",
      "description": "Metadata for online images.",
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebImage",
      "properties": {
        "url": {
          "type": "string",
          "description": "The result image URL."
        },
        "score": {
          "description": "(Deprecated) Overall relevancy score for the image.",
          "format": "float",
          "type": "number"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ProductKeyValue": {
      "id": "GoogleCloudVisionV1p4beta1ProductKeyValue",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        },
        "key": {
          "type": "string",
          "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes."
        }
      },
      "description": "A product label represented as a key-value pair."
    },
    "Block": {
      "properties": {
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Confidence of the OCR results on the block. Range [0, 1]."
        },
        "boundingBox": {
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "BoundingPoly"
        },
        "property": {
          "$ref": "TextProperty",
          "description": "Additional information detected for the block."
        },
        "blockType": {
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ],
          "description": "Detected block type (text, image etc) for this block.",
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ],
          "type": "string"
        },
        "paragraphs": {
          "type": "array",
          "items": {
            "$ref": "Paragraph"
          },
          "description": "List of paragraphs in this block (if this blocks is of type text)."
        }
      },
      "type": "object",
      "id": "Block",
      "description": "Logical element on the page."
    },
    "BoundingPoly": {
      "description": "A bounding polygon for the detected image annotation.",
      "properties": {
        "vertices": {
          "description": "The bounding polygon vertices.",
          "type": "array",
          "items": {
            "$ref": "Vertex"
          }
        },
        "normalizedVertices": {
          "items": {
            "$ref": "NormalizedVertex"
          },
          "type": "array",
          "description": "The bounding polygon normalized vertices."
        }
      },
      "type": "object",
      "id": "BoundingPoly"
    },
    "GoogleCloudVisionV1p3beta1CropHint": {
      "description": "Single crop hint that is used to generate a new crop when serving an image.",
      "type": "object",
      "properties": {
        "importanceFraction": {
          "type": "number",
          "format": "float",
          "description": "Fraction of importance of this salient region with respect to the original image."
        },
        "confidence": {
          "type": "number",
          "description": "Confidence of this being a salient region. Range [0, 1].",
          "format": "float"
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale."
        }
      },
      "id": "GoogleCloudVisionV1p3beta1CropHint"
    },
    "GoogleCloudVisionV1p3beta1OperationMetadata": {
      "properties": {
        "createTime": {
          "description": "The time when the batch request was received.",
          "type": "string",
          "format": "google-datetime"
        },
        "state": {
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "type": "string",
          "description": "Current state of the batch operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ]
        },
        "updateTime": {
          "type": "string",
          "description": "The time when the operation result was last updated.",
          "format": "google-datetime"
        }
      },
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1OperationMetadata"
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {}
    },
    "GoogleCloudVisionV1p4beta1OutputConfig": {
      "description": "The desired output location and metadata.",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "$ref": "GoogleCloudVisionV1p4beta1GcsDestination",
          "description": "The Google Cloud Storage location to write the output(s) to."
        },
        "batchSize": {
          "type": "integer",
          "format": "int32",
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."
        }
      },
      "id": "GoogleCloudVisionV1p4beta1OutputConfig"
    },
    "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark": {
      "type": "object",
      "description": "A face-specific landmark (for example, a face feature).",
      "properties": {
        "position": {
          "description": "Face landmark position.",
          "$ref": "GoogleCloudVisionV1p2beta1Position"
        },
        "type": {
          "description": "Face landmark type.",
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ]
        }
      },
      "id": "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark"
    },
    "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation",
      "description": "Set of detected objects with bounding boxes.",
      "properties": {
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
        },
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "Image region to which this object belongs. This must be populated."
        },
        "score": {
          "type": "number",
          "description": "Score of the result. Range [0, 1].",
          "format": "float"
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1ImageProperties": {
      "properties": {
        "dominantColors": {
          "$ref": "GoogleCloudVisionV1p2beta1DominantColorsAnnotation",
          "description": "If present, dominant colors completed successfully."
        }
      },
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1ImageProperties",
      "description": "Stores image properties, such as dominant colors."
    },
    "GoogleCloudVisionV1p4beta1TextAnnotation": {
      "properties": {
        "text": {
          "type": "string",
          "description": "UTF-8 text detected on the pages."
        },
        "pages": {
          "description": "List of pages detected by OCR.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Page"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudVisionV1p4beta1TextAnnotation",
      "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1Symbol": {
      "properties": {
        "text": {
          "type": "string",
          "description": "The actual UTF-8 representation of the symbol."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "property": {
          "description": "Additional information detected for the symbol.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty"
        },
        "confidence": {
          "description": "Confidence of the OCR results for the symbol. Range [0, 1].",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object",
      "description": "A single symbol representation.",
      "id": "GoogleCloudVisionV1p1beta1Symbol"
    },
    "GoogleCloudVisionV1p4beta1BoundingPoly": {
      "id": "GoogleCloudVisionV1p4beta1BoundingPoly",
      "properties": {
        "normalizedVertices": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1NormalizedVertex"
          },
          "description": "The bounding polygon normalized vertices.",
          "type": "array"
        },
        "vertices": {
          "description": "The bounding polygon vertices.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Vertex"
          },
          "type": "array"
        }
      },
      "description": "A bounding polygon for the detected image annotation.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1WebDetection": {
      "type": "object",
      "description": "Relevant information for the image from the Internet.",
      "id": "GoogleCloudVisionV1p3beta1WebDetection",
      "properties": {
        "webEntities": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebEntity"
          },
          "type": "array",
          "description": "Deduced entities from similar images on the Internet."
        },
        "visuallySimilarImages": {
          "description": "The visually similar image results.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          }
        },
        "partialMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          },
          "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops."
        },
        "bestGuessLabels": {
          "type": "array",
          "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebLabel"
          }
        },
        "pagesWithMatchingImages": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebPage"
          },
          "description": "Web pages containing the matching images from the Internet."
        },
        "fullMatchingImages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          },
          "type": "array",
          "description": "Fully matching images from the Internet. Can include resized copies of the query image."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1WebDetectionWebPage": {
      "description": "Metadata for web pages.",
      "id": "GoogleCloudVisionV1p3beta1WebDetectionWebPage",
      "properties": {
        "pageTitle": {
          "type": "string",
          "description": "Title for the web page, may contain HTML markups."
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "(Deprecated) Overall relevancy score for the web page."
        },
        "fullMatchingImages": {
          "description": "Fully matching images on the page. Can include resized copies of the query image.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          }
        },
        "url": {
          "type": "string",
          "description": "The result web page URL."
        },
        "partialMatchingImages": {
          "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage"
          }
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1SafeSearchAnnotation": {
      "properties": {
        "spoof": {
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "racy": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "type": "string"
        },
        "adult": {
          "type": "string",
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "violence": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Likelihood that this image contains violent content."
        },
        "medical": {
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Likelihood that this is a medical image."
        }
      },
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1SafeSearchAnnotation"
    },
    "GoogleCloudVisionV1p3beta1Block": {
      "properties": {
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results on the block. Range [0, 1].",
          "format": "float"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "paragraphs": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Paragraph"
          },
          "description": "List of paragraphs in this block (if this blocks is of type text)."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the block."
        },
        "blockType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ],
          "description": "Detected block type (text, image etc) for this block.",
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ]
        }
      },
      "description": "Logical element on the page.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1Block"
    },
    "BatchAnnotateFilesRequest": {
      "description": "A list of requests to annotate files using the BatchAnnotateFiles API.",
      "id": "BatchAnnotateFilesRequest",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`."
        },
        "requests": {
          "type": "array",
          "items": {
            "$ref": "AnnotateFileRequest"
          },
          "description": "Required. The list of file annotation requests. Right now we support only one AnnotateFileRequest in BatchAnnotateFilesRequest."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1Word": {
      "type": "object",
      "description": "A word representation.",
      "id": "GoogleCloudVisionV1p1beta1Word",
      "properties": {
        "boundingBox": {
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the word."
        },
        "symbols": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Symbol"
          },
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order.",
          "type": "array"
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results for the word. Range [0, 1]."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark": {
      "type": "object",
      "description": "A face-specific landmark (for example, a face feature).",
      "id": "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark",
      "properties": {
        "position": {
          "$ref": "GoogleCloudVisionV1p3beta1Position",
          "description": "Face landmark position."
        },
        "type": {
          "enumDescriptions": [
            "Unknown face landmark detected. Should not be filled.",
            "Left eye.",
            "Right eye.",
            "Left of left eyebrow.",
            "Right of left eyebrow.",
            "Left of right eyebrow.",
            "Right of right eyebrow.",
            "Midpoint between eyes.",
            "Nose tip.",
            "Upper lip.",
            "Lower lip.",
            "Mouth left.",
            "Mouth right.",
            "Mouth center.",
            "Nose, bottom right.",
            "Nose, bottom left.",
            "Nose, bottom center.",
            "Left eye, top boundary.",
            "Left eye, right corner.",
            "Left eye, bottom boundary.",
            "Left eye, left corner.",
            "Right eye, top boundary.",
            "Right eye, right corner.",
            "Right eye, bottom boundary.",
            "Right eye, left corner.",
            "Left eyebrow, upper midpoint.",
            "Right eyebrow, upper midpoint.",
            "Left ear tragion.",
            "Right ear tragion.",
            "Left eye pupil.",
            "Right eye pupil.",
            "Forehead glabella.",
            "Chin gnathion.",
            "Chin left gonion.",
            "Chin right gonion.",
            "Left cheek center.",
            "Right cheek center."
          ],
          "enum": [
            "UNKNOWN_LANDMARK",
            "LEFT_EYE",
            "RIGHT_EYE",
            "LEFT_OF_LEFT_EYEBROW",
            "RIGHT_OF_LEFT_EYEBROW",
            "LEFT_OF_RIGHT_EYEBROW",
            "RIGHT_OF_RIGHT_EYEBROW",
            "MIDPOINT_BETWEEN_EYES",
            "NOSE_TIP",
            "UPPER_LIP",
            "LOWER_LIP",
            "MOUTH_LEFT",
            "MOUTH_RIGHT",
            "MOUTH_CENTER",
            "NOSE_BOTTOM_RIGHT",
            "NOSE_BOTTOM_LEFT",
            "NOSE_BOTTOM_CENTER",
            "LEFT_EYE_TOP_BOUNDARY",
            "LEFT_EYE_RIGHT_CORNER",
            "LEFT_EYE_BOTTOM_BOUNDARY",
            "LEFT_EYE_LEFT_CORNER",
            "RIGHT_EYE_TOP_BOUNDARY",
            "RIGHT_EYE_RIGHT_CORNER",
            "RIGHT_EYE_BOTTOM_BOUNDARY",
            "RIGHT_EYE_LEFT_CORNER",
            "LEFT_EYEBROW_UPPER_MIDPOINT",
            "RIGHT_EYEBROW_UPPER_MIDPOINT",
            "LEFT_EAR_TRAGION",
            "RIGHT_EAR_TRAGION",
            "LEFT_EYE_PUPIL",
            "RIGHT_EYE_PUPIL",
            "FOREHEAD_GLABELLA",
            "CHIN_GNATHION",
            "CHIN_LEFT_GONION",
            "CHIN_RIGHT_GONION",
            "LEFT_CHEEK_CENTER",
            "RIGHT_CHEEK_CENTER"
          ],
          "description": "Face landmark type.",
          "type": "string"
        }
      }
    },
    "GoogleCloudVisionV1p1beta1LocationInfo": {
      "description": "Detected entity location information.",
      "id": "GoogleCloudVisionV1p1beta1LocationInfo",
      "type": "object",
      "properties": {
        "latLng": {
          "$ref": "LatLng",
          "description": "lat/long location coordinates."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResults": {
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResults",
      "description": "Results for a product search request.",
      "type": "object",
      "properties": {
        "indexTime": {
          "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.",
          "format": "google-datetime",
          "type": "string"
        },
        "results": {
          "type": "array",
          "description": "List of results, one for each product match.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult"
          }
        },
        "productGroupedResults": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult"
          },
          "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results."
        }
      }
    },
    "TextProperty": {
      "type": "object",
      "id": "TextProperty",
      "properties": {
        "detectedLanguages": {
          "type": "array",
          "items": {
            "$ref": "DetectedLanguage"
          },
          "description": "A list of detected languages together with confidence."
        },
        "detectedBreak": {
          "description": "Detected start or end of a text segment.",
          "$ref": "DetectedBreak"
        }
      },
      "description": "Additional information detected on the structural component."
    },
    "GoogleCloudVisionV1p1beta1Block": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1Block",
      "properties": {
        "paragraphs": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Paragraph"
          },
          "description": "List of paragraphs in this block (if this blocks is of type text)."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly",
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "property": {
          "description": "Additional information detected for the block.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty"
        },
        "blockType": {
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ],
          "description": "Detected block type (text, image etc) for this block.",
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ],
          "type": "string"
        },
        "confidence": {
          "format": "float",
          "description": "Confidence of the OCR results on the block. Range [0, 1].",
          "type": "number"
        }
      },
      "description": "Logical element on the page."
    },
    "AnnotateFileResponse": {
      "properties": {
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "InputConfig"
        },
        "error": {
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.",
          "$ref": "Status"
        },
        "responses": {
          "items": {
            "$ref": "AnnotateImageResponse"
          },
          "type": "array",
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set."
        },
        "totalPages": {
          "description": "This field gives the total number of pages in the file.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "AnnotateFileResponse",
      "type": "object",
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses."
    },
    "GoogleCloudVisionV1p1beta1DominantColorsAnnotation": {
      "properties": {
        "colors": {
          "description": "RGB color values with their score and pixel fraction.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1ColorInfo"
          }
        }
      },
      "description": "Set of dominant colors and their corresponding scores.",
      "id": "GoogleCloudVisionV1p1beta1DominantColorsAnnotation",
      "type": "object"
    },
    "Page": {
      "type": "object",
      "description": "Detected page from OCR.",
      "id": "Page",
      "properties": {
        "width": {
          "type": "integer",
          "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32"
        },
        "property": {
          "$ref": "TextProperty",
          "description": "Additional information detected on the page."
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results on the page. Range [0, 1]."
        },
        "blocks": {
          "type": "array",
          "description": "List of blocks of text, images etc on this page.",
          "items": {
            "$ref": "Block"
          }
        },
        "height": {
          "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1ImageProperties": {
      "id": "GoogleCloudVisionV1p3beta1ImageProperties",
      "properties": {
        "dominantColors": {
          "description": "If present, dominant colors completed successfully.",
          "$ref": "GoogleCloudVisionV1p3beta1DominantColorsAnnotation"
        }
      },
      "description": "Stores image properties, such as dominant colors.",
      "type": "object"
    },
    "OutputConfig": {
      "description": "The desired output location and metadata.",
      "id": "OutputConfig",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "$ref": "GcsDestination",
          "description": "The Google Cloud Storage location to write the output(s) to."
        },
        "batchSize": {
          "type": "integer",
          "format": "int32",
          "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations."
        }
      }
    },
    "GoogleCloudVisionV1p3beta1AnnotateFileResponse": {
      "properties": {
        "inputConfig": {
          "description": "Information about the file for which this response is generated.",
          "$ref": "GoogleCloudVisionV1p3beta1InputConfig"
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case."
        },
        "totalPages": {
          "type": "integer",
          "format": "int32",
          "description": "This field gives the total number of pages in the file."
        },
        "responses": {
          "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1AnnotateImageResponse"
          },
          "type": "array"
        }
      },
      "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.",
      "type": "object",
      "id": "GoogleCloudVisionV1p3beta1AnnotateFileResponse"
    },
    "GoogleCloudVisionV1p2beta1Position": {
      "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.",
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Position",
      "properties": {
        "y": {
          "type": "number",
          "description": "Y coordinate.",
          "format": "float"
        },
        "x": {
          "description": "X coordinate.",
          "type": "number",
          "format": "float"
        },
        "z": {
          "format": "float",
          "description": "Z coordinate (or depth).",
          "type": "number"
        }
      }
    },
    "GoogleCloudVisionV1p4beta1WebDetectionWebEntity": {
      "id": "GoogleCloudVisionV1p4beta1WebDetectionWebEntity",
      "description": "Entity deduced from similar images on the Internet.",
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "format": "float",
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries."
        },
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Canonical description of the entity, in English."
        }
      }
    },
    "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation": {
      "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation",
      "description": "Prediction for what the object in the bounding box is.",
      "properties": {
        "score": {
          "type": "number",
          "description": "Score of the result. Range [0, 1].",
          "format": "float"
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "name": {
          "description": "Object name, expressed in its `language_code` language.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1EntityAnnotation": {
      "id": "GoogleCloudVisionV1p4beta1EntityAnnotation",
      "description": "Set of detected entity features.",
      "properties": {
        "topicality": {
          "type": "number",
          "format": "float",
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1]."
        },
        "locations": {
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1LocationInfo"
          },
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.",
          "type": "array"
        },
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1]."
        },
        "boundingPoly": {
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features.",
          "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly"
        },
        "locale": {
          "type": "string",
          "description": "The language code for the locale in which the entity textual `description` is expressed."
        },
        "score": {
          "type": "number",
          "description": "Overall score of the result. Range [0, 1].",
          "format": "float"
        },
        "properties": {
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1Property"
          }
        },
        "description": {
          "type": "string",
          "description": "Entity textual description, expressed in its `locale` language."
        },
        "mid": {
          "type": "string",
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1FaceRecognitionResult": {
      "type": "object",
      "properties": {
        "confidence": {
          "format": "float",
          "type": "number",
          "description": "Recognition confidence. Range [0, 1]."
        },
        "celebrity": {
          "$ref": "GoogleCloudVisionV1p4beta1Celebrity",
          "description": "The Celebrity that this face was matched to."
        }
      },
      "description": "Information about a face's identity.",
      "id": "GoogleCloudVisionV1p4beta1FaceRecognitionResult"
    },
    "GoogleCloudVisionV1p1beta1BoundingPoly": {
      "type": "object",
      "description": "A bounding polygon for the detected image annotation.",
      "id": "GoogleCloudVisionV1p1beta1BoundingPoly",
      "properties": {
        "normalizedVertices": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1NormalizedVertex"
          },
          "type": "array",
          "description": "The bounding polygon normalized vertices."
        },
        "vertices": {
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1Vertex"
          },
          "description": "The bounding polygon vertices.",
          "type": "array"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1Property": {
      "id": "GoogleCloudVisionV1p3beta1Property",
      "properties": {
        "value": {
          "description": "Value of the property.",
          "type": "string"
        },
        "uint64Value": {
          "description": "Value of numeric properties.",
          "format": "uint64",
          "type": "string"
        },
        "name": {
          "description": "Name of the property.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A `Property` consists of a user-supplied name/value pair."
    },
    "GoogleCloudVisionV1p1beta1SafeSearchAnnotation": {
      "type": "object",
      "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).",
      "properties": {
        "violence": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "description": "Likelihood that this image contains violent content.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "racy": {
          "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.",
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "spoof": {
          "type": "string",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "medical": {
          "description": "Likelihood that this is a medical image.",
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ]
        },
        "adult": {
          "enumDescriptions": [
            "Unknown likelihood.",
            "It is very unlikely.",
            "It is unlikely.",
            "It is possible.",
            "It is likely.",
            "It is very likely."
          ],
          "enum": [
            "UNKNOWN",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string",
          "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities."
        }
      },
      "id": "GoogleCloudVisionV1p1beta1SafeSearchAnnotation"
    },
    "AsyncAnnotateFileRequest": {
      "type": "object",
      "id": "AsyncAnnotateFileRequest",
      "description": "An offline file annotation request.",
      "properties": {
        "outputConfig": {
          "description": "Required. The desired output location and metadata (e.g. format).",
          "$ref": "OutputConfig"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "Feature"
          },
          "description": "Required. Requested features."
        },
        "imageContext": {
          "$ref": "ImageContext",
          "description": "Additional context that may accompany the image(s) in the file."
        },
        "inputConfig": {
          "description": "Required. Information about the input file.",
          "$ref": "InputConfig"
        }
      }
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebLabel": {
      "properties": {
        "label": {
          "description": "Label for extra metadata.",
          "type": "string"
        },
        "languageCode": {
          "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebLabel",
      "description": "Label to provide extra metadata for the web detection.",
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1AnnotateImageResponse": {
      "type": "object",
      "properties": {
        "context": {
          "description": "If present, contextual information is needed to understand where this image comes from.",
          "$ref": "GoogleCloudVisionV1p1beta1ImageAnnotationContext"
        },
        "cropHintsAnnotation": {
          "$ref": "GoogleCloudVisionV1p1beta1CropHintsAnnotation",
          "description": "If present, crop hints have completed successfully."
        },
        "logoAnnotations": {
          "description": "If present, logo detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          }
        },
        "localizedObjectAnnotations": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation"
          },
          "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score."
        },
        "error": {
          "$ref": "Status",
          "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set."
        },
        "textAnnotations": {
          "type": "array",
          "description": "If present, text (OCR) detection has completed successfully.",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          }
        },
        "fullTextAnnotation": {
          "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.",
          "$ref": "GoogleCloudVisionV1p1beta1TextAnnotation"
        },
        "webDetection": {
          "description": "If present, web detection has completed successfully.",
          "$ref": "GoogleCloudVisionV1p1beta1WebDetection"
        },
        "productSearchResults": {
          "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResults",
          "description": "If present, product search has completed successfully."
        },
        "labelAnnotations": {
          "description": "If present, label detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          }
        },
        "imagePropertiesAnnotation": {
          "$ref": "GoogleCloudVisionV1p1beta1ImageProperties",
          "description": "If present, image properties were extracted successfully."
        },
        "safeSearchAnnotation": {
          "$ref": "GoogleCloudVisionV1p1beta1SafeSearchAnnotation",
          "description": "If present, safe-search annotation has completed successfully."
        },
        "faceAnnotations": {
          "description": "If present, face detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1FaceAnnotation"
          }
        },
        "landmarkAnnotations": {
          "description": "If present, landmark detection has completed successfully.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation"
          }
        }
      },
      "id": "GoogleCloudVisionV1p1beta1AnnotateImageResponse",
      "description": "Response to an image annotation request."
    },
    "Image": {
      "description": "Client image to perform Google Cloud Vision API tasks over.",
      "id": "Image",
      "properties": {
        "source": {
          "$ref": "ImageSource",
          "description": "Google Cloud Storage image location, or publicly-accessible image URL. If both `content` and `source` are provided for an image, `content` takes precedence and is used to perform the image annotation request."
        },
        "content": {
          "format": "byte",
          "description": "Image content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateImages requests. It does not work for AsyncBatchAnnotateImages requests.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1DominantColorsAnnotation": {
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1DominantColorsAnnotation",
      "properties": {
        "colors": {
          "description": "RGB color values with their score and pixel fraction.",
          "items": {
            "$ref": "GoogleCloudVisionV1p4beta1ColorInfo"
          },
          "type": "array"
        }
      },
      "description": "Set of dominant colors and their corresponding scores."
    },
    "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult": {
      "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult",
      "description": "Information about the products similar to a single product in a query image.",
      "properties": {
        "boundingPoly": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding polygon around the product detected in the query image."
        },
        "objectAnnotations": {
          "description": "List of generic predictions for the object in the bounding box.",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation"
          },
          "type": "array"
        },
        "results": {
          "description": "List of results, one for each product match.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult"
          }
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p4beta1NormalizedVertex": {
      "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.",
      "type": "object",
      "id": "GoogleCloudVisionV1p4beta1NormalizedVertex",
      "properties": {
        "x": {
          "type": "number",
          "description": "X coordinate.",
          "format": "float"
        },
        "y": {
          "format": "float",
          "type": "number",
          "description": "Y coordinate."
        }
      }
    },
    "GoogleCloudVisionV1p2beta1Word": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Word",
      "description": "A word representation.",
      "properties": {
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results for the word. Range [0, 1].",
          "format": "float"
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the word."
        },
        "symbols": {
          "type": "array",
          "description": "List of symbols in the word. The order of the symbols follows the natural reading order.",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Symbol"
          }
        },
        "boundingBox": {
          "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).",
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1BatchOperationMetadata": {
      "id": "GoogleCloudVisionV1p3beta1BatchOperationMetadata",
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PROCESSING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "description": "The current state of the batch operation.",
          "type": "string",
          "enumDescriptions": [
            "Invalid.",
            "Request is actively being processed.",
            "The request is done and at least one item has been successfully processed.",
            "The request is done and no item has been successfully processed.",
            "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request."
          ]
        },
        "endTime": {
          "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true.",
          "type": "string",
          "format": "google-datetime"
        },
        "submitTime": {
          "format": "google-datetime",
          "description": "The time when the batch request was submitted to the server.",
          "type": "string"
        }
      },
      "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service."
    },
    "GoogleCloudVisionV1p3beta1Paragraph": {
      "properties": {
        "confidence": {
          "type": "number",
          "description": "Confidence of the OCR results for the paragraph. Range [0, 1].",
          "format": "float"
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly",
          "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the paragraph."
        },
        "words": {
          "description": "List of all words in this paragraph.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1Word"
          }
        }
      },
      "id": "GoogleCloudVisionV1p3beta1Paragraph",
      "description": "Structural unit of text representing a number of words in certain order.",
      "type": "object"
    },
    "GcsDestination": {
      "type": "object",
      "id": "GcsDestination",
      "properties": {
        "uri": {
          "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.",
          "type": "string"
        }
      },
      "description": "The Google Cloud Storage location where the output will be written to."
    },
    "GoogleCloudVisionV1p2beta1Block": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1Block",
      "description": "Logical element on the page.",
      "properties": {
        "blockType": {
          "enumDescriptions": [
            "Unknown block type.",
            "Regular text block.",
            "Table block.",
            "Image block.",
            "Horizontal/vertical line box.",
            "Barcode block."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "TEXT",
            "TABLE",
            "PICTURE",
            "RULER",
            "BARCODE"
          ],
          "description": "Detected block type (text, image etc) for this block."
        },
        "boundingBox": {
          "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly",
          "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)."
        },
        "property": {
          "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty",
          "description": "Additional information detected for the block."
        },
        "paragraphs": {
          "description": "List of paragraphs in this block (if this blocks is of type text).",
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1Paragraph"
          },
          "type": "array"
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "description": "Confidence of the OCR results on the block. Range [0, 1]."
        }
      }
    },
    "GroupedResult": {
      "id": "GroupedResult",
      "description": "Information about the products similar to a single product in a query image.",
      "type": "object",
      "properties": {
        "results": {
          "description": "List of results, one for each product match.",
          "type": "array",
          "items": {
            "$ref": "Result"
          }
        },
        "boundingPoly": {
          "description": "The bounding polygon around the product detected in the query image.",
          "$ref": "BoundingPoly"
        },
        "objectAnnotations": {
          "items": {
            "$ref": "ObjectAnnotation"
          },
          "description": "List of generic predictions for the object in the bounding box.",
          "type": "array"
        }
      }
    },
    "LocationInfo": {
      "properties": {
        "latLng": {
          "$ref": "LatLng",
          "description": "lat/long location coordinates."
        }
      },
      "type": "object",
      "description": "Detected entity location information.",
      "id": "LocationInfo"
    },
    "GoogleCloudVisionV1p2beta1LocationInfo": {
      "properties": {
        "latLng": {
          "description": "lat/long location coordinates.",
          "$ref": "LatLng"
        }
      },
      "id": "GoogleCloudVisionV1p2beta1LocationInfo",
      "description": "Detected entity location information.",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1WebDetectionWebEntity": {
      "type": "object",
      "id": "GoogleCloudVisionV1p2beta1WebDetectionWebEntity",
      "description": "Entity deduced from similar images on the Internet.",
      "properties": {
        "entityId": {
          "description": "Opaque entity ID.",
          "type": "string"
        },
        "score": {
          "format": "float",
          "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.",
          "type": "number"
        },
        "description": {
          "type": "string",
          "description": "Canonical description of the entity, in English."
        }
      }
    },
    "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation": {
      "description": "Prediction for what the object in the bounding box is.",
      "properties": {
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        },
        "score": {
          "description": "Score of the result. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "name": {
          "type": "string",
          "description": "Object name, expressed in its `language_code` language."
        },
        "mid": {
          "description": "Object ID that should align with EntityAnnotation mid.",
          "type": "string"
        }
      },
      "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation",
      "type": "object"
    },
    "GoogleCloudVisionV1p2beta1Product": {
      "type": "object",
      "description": "A Product contains ReferenceImages.",
      "properties": {
        "name": {
          "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long."
        },
        "description": {
          "type": "string",
          "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long."
        },
        "productCategory": {
          "type": "string",
          "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products."
        },
        "productLabels": {
          "items": {
            "$ref": "GoogleCloudVisionV1p2beta1ProductKeyValue"
          },
          "type": "array",
          "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet."
        }
      },
      "id": "GoogleCloudVisionV1p2beta1Product"
    },
    "EntityAnnotation": {
      "description": "Set of detected entity features.",
      "id": "EntityAnnotation",
      "properties": {
        "mid": {
          "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "Property"
          },
          "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity."
        },
        "score": {
          "type": "number",
          "format": "float",
          "description": "Overall score of the result. Range [0, 1]."
        },
        "confidence": {
          "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "locale": {
          "type": "string",
          "description": "The language code for the locale in which the entity textual `description` is expressed."
        },
        "boundingPoly": {
          "$ref": "BoundingPoly",
          "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features."
        },
        "topicality": {
          "type": "number",
          "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].",
          "format": "float"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "LocationInfo"
          },
          "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks."
        },
        "description": {
          "description": "Entity textual description, expressed in its `locale` language.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudVisionV1p1beta1OperationMetadata": {
      "type": "object",
      "id": "GoogleCloudVisionV1p1beta1OperationMetadata",
      "description": "Contains metadata for the BatchAnnotateImages operation.",
      "properties": {
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time when the operation result was last updated."
        },
        "state": {
          "description": "Current state of the batch operation.",
          "type": "string",
          "enumDescriptions": [
            "Invalid.",
            "Request is received.",
            "Request is actively being processed.",
            "The batch processing is done.",
            "The batch processing was cancelled."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATED",
            "RUNNING",
            "DONE",
            "CANCELLED"
          ]
        },
        "createTime": {
          "type": "string",
          "description": "The time when the batch request was received.",
          "format": "google-datetime"
        }
      }
    },
    "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty": {
      "properties": {
        "detectedLanguages": {
          "items": {
            "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage"
          },
          "description": "A list of detected languages together with confidence.",
          "type": "array"
        },
        "detectedBreak": {
          "description": "Detected start or end of a text segment.",
          "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak"
        }
      },
      "id": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty",
      "description": "Additional information detected on the structural component.",
      "type": "object"
    },
    "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage": {
      "description": "Detected language for a structural component.",
      "id": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage",
      "type": "object",
      "properties": {
        "confidence": {
          "description": "Confidence of detected language. Range [0, 1].",
          "format": "float",
          "type": "number"
        },
        "languageCode": {
          "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
          "type": "string"
        }
      }
    }
  }
}

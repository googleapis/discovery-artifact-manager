{
  "documentationLink": "https://cloud.google.com/data-catalog/docs/",
  "baseUrl": "https://datacatalog.googleapis.com/",
  "basePath": "",
  "schemas": {
    "GoogleCloudDatacatalogV1UsageSignal": {
      "id": "GoogleCloudDatacatalogV1UsageSignal",
      "description": "The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.",
      "type": "object",
      "properties": {
        "usageWithinTimeRange": {
          "additionalProperties": {
            "$ref": "GoogleCloudDatacatalogV1UsageStats"
          },
          "type": "object",
          "description": "Output only. BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\"}`.",
          "readOnly": true
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The end timestamp of the duration of usage statistics."
        },
        "favoriteCount": {
          "format": "int64",
          "type": "string",
          "description": "Favorite count in the source system."
        },
        "commonUsageWithinTimeRange": {
          "description": "Common usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\", \"Lifetime\"}`.",
          "additionalProperties": {
            "$ref": "GoogleCloudDatacatalogV1CommonUsageStats"
          },
          "type": "object"
        }
      }
    },
    "GoogleCloudDatacatalogV1ReplaceTaxonomyRequest": {
      "type": "object",
      "properties": {
        "serializedTaxonomy": {
          "description": "Required. Taxonomy to update along with its child policy tags.",
          "$ref": "GoogleCloudDatacatalogV1SerializedTaxonomy"
        }
      },
      "description": "Request message for ReplaceTaxonomy.",
      "id": "GoogleCloudDatacatalogV1ReplaceTaxonomyRequest"
    },
    "GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema": {
      "description": "Schema in protocol buffer format.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema",
      "properties": {
        "text": {
          "description": "Protocol buffer source of the schema.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest": {
      "properties": {
        "newEnumValueDisplayName": {
          "description": "Required. The new display name of the enum value. For example, `my_new_enum_value`.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest",
      "type": "object",
      "description": "Request message for RenameTagTemplateFieldEnumValue."
    },
    "GoogleCloudDatacatalogV1ImportTaxonomiesRequest": {
      "description": "Request message for ImportTaxonomies.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ImportTaxonomiesRequest",
      "properties": {
        "inlineSource": {
          "$ref": "GoogleCloudDatacatalogV1InlineSource",
          "description": "Inline source taxonomy to import."
        },
        "crossRegionalSource": {
          "$ref": "GoogleCloudDatacatalogV1CrossRegionalSource",
          "description": "Cross-regional source taxonomy to import."
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "properties": {
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "GoogleCloudDatacatalogV1LookerSystemSpec": {
      "description": "Specification that applies to entries that are part `LOOKER` system (user_specified_type)",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1LookerSystemSpec",
      "properties": {
        "parentViewDisplayName": {
          "description": "Name of the parent View. Empty if it does not exist.",
          "type": "string"
        },
        "parentViewId": {
          "description": "ID of the parent View. Empty if it does not exist.",
          "type": "string"
        },
        "parentInstanceId": {
          "type": "string",
          "description": "ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`"
        },
        "parentModelDisplayName": {
          "description": "Name of the parent Model. Empty if it does not exist.",
          "type": "string"
        },
        "parentInstanceDisplayName": {
          "type": "string",
          "description": "Name of the parent Looker Instance. Empty if it does not exist."
        },
        "parentModelId": {
          "description": "ID of the parent Model. Empty if it does not exist.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema",
      "properties": {},
      "description": "Marks a CSV-encoded data source."
    },
    "GoogleCloudDatacatalogV1TableSpec": {
      "properties": {
        "groupedEntry": {
          "description": "Output only. If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.",
          "type": "string",
          "readOnly": true
        }
      },
      "description": "Normal BigQuery table specification.",
      "id": "GoogleCloudDatacatalogV1TableSpec",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1CloudBigtableInstanceSpec": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1CloudBigtableInstanceSpec",
      "description": "Specification that applies to Instance entries that are part of `CLOUD_BIGTABLE` system. (user_specified_type)",
      "properties": {
        "cloudBigtableClusterSpecs": {
          "description": "The list of clusters for the Instance.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpec"
          },
          "type": "array"
        }
      }
    },
    "GoogleCloudDatacatalogV1ServiceSpec": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ServiceSpec",
      "properties": {
        "cloudBigtableInstanceSpec": {
          "description": "Specification that applies to Instance entries of `CLOUD_BIGTABLE` system.",
          "$ref": "GoogleCloudDatacatalogV1CloudBigtableInstanceSpec"
        }
      },
      "description": "Specification that applies to a Service resource. Valid only for entries with the `SERVICE` type."
    },
    "GoogleCloudDatacatalogV1SearchCatalogResult": {
      "type": "object",
      "description": "Result in the response to a search request. Each result captures details of one entry that matches the search.",
      "id": "GoogleCloudDatacatalogV1SearchCatalogResult",
      "properties": {
        "fullyQualifiedName": {
          "type": "string",
          "description": "Fully qualified name (FQN) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:PROJECT_ID.LOCATION_ID.INSTANCE_ID.DATABASE_ID.TABLE_ID`"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the result."
        },
        "searchResultSubtype": {
          "type": "string",
          "description": "Sub-type of the search result. A dot-delimited full type of the resource. The same type you specify in the `type` search predicate. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`."
        },
        "linkedResource": {
          "description": "The full name of the Google Cloud resource the entry belongs to. For more information, see [Full Resource Name] (/apis/design/resource_names#full_resource_name). Example: `//bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID`",
          "type": "string"
        },
        "relativeResourceName": {
          "type": "string",
          "description": "The relative name of the resource in URL format. Examples: * `projects/{PROJECT_ID}/locations/{LOCATION_ID}/entryGroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}` * `projects/{PROJECT_ID}/tagTemplates/{TAG_TEMPLATE_ID}`"
        },
        "modifyTime": {
          "type": "string",
          "description": "The last modification timestamp of the entry in the source system.",
          "format": "google-datetime"
        },
        "userSpecifiedSystem": {
          "description": "Custom source system that you can manually integrate Data Catalog with.",
          "type": "string"
        },
        "description": {
          "description": "Entry description that can consist of several sentences or paragraphs that describe entry contents.",
          "type": "string"
        },
        "integratedSystem": {
          "type": "string",
          "readOnly": true,
          "enumDescriptions": [
            "Default unknown system.",
            "BigQuery.",
            "Cloud Pub/Sub.",
            "Dataproc Metastore.",
            "Dataplex.",
            "Cloud Spanner",
            "Cloud Bigtable",
            "Cloud Sql",
            "Looker"
          ],
          "enum": [
            "INTEGRATED_SYSTEM_UNSPECIFIED",
            "BIGQUERY",
            "CLOUD_PUBSUB",
            "DATAPROC_METASTORE",
            "DATAPLEX",
            "CLOUD_SPANNER",
            "CLOUD_BIGTABLE",
            "CLOUD_SQL",
            "LOOKER"
          ],
          "description": "Output only. The source system that Data Catalog automatically integrates with, such as BigQuery, Cloud Pub/Sub, or Dataproc Metastore."
        },
        "searchResultType": {
          "enum": [
            "SEARCH_RESULT_TYPE_UNSPECIFIED",
            "ENTRY",
            "TAG_TEMPLATE",
            "ENTRY_GROUP"
          ],
          "enumDescriptions": [
            "Default unknown type.",
            "An Entry.",
            "A TagTemplate.",
            "An EntryGroup."
          ],
          "description": "Type of the search result. You can use this field to determine which get method to call to fetch the full resource.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1StarEntryRequest": {
      "id": "GoogleCloudDatacatalogV1StarEntryRequest",
      "properties": {},
      "description": "Request message for StarEntry.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1ModifyEntryOverviewRequest": {
      "id": "GoogleCloudDatacatalogV1ModifyEntryOverviewRequest",
      "properties": {
        "entryOverview": {
          "description": "Required. The new value for the Entry Overview.",
          "$ref": "GoogleCloudDatacatalogV1EntryOverview"
        }
      },
      "description": "Request message for ModifyEntryOverview.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1SqlDatabaseSystemSpec": {
      "id": "GoogleCloudDatacatalogV1SqlDatabaseSystemSpec",
      "description": "Specification that applies to entries that are part `SQL_DATABASE` system (user_specified_type)",
      "type": "object",
      "properties": {
        "instanceHost": {
          "description": "Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.",
          "type": "string"
        },
        "databaseVersion": {
          "type": "string",
          "description": "Version of the database engine."
        },
        "sqlEngine": {
          "description": "SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1GcsFilesetSpec": {
      "id": "GoogleCloudDatacatalogV1GcsFilesetSpec",
      "properties": {
        "filePatterns": {
          "type": "array",
          "description": "Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`",
          "items": {
            "type": "string"
          }
        },
        "sampleGcsFileSpecs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "GoogleCloudDatacatalogV1GcsFileSpec"
          },
          "description": "Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here."
        }
      },
      "description": "Describes a Cloud Storage fileset entry.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1CommonUsageStats": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1CommonUsageStats",
      "description": "Common statistics on the entry's usage. They can be set on any system.",
      "properties": {
        "viewCount": {
          "format": "int64",
          "description": "View count in source system.",
          "type": "string"
        }
      }
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "properties": {
        "operations": {
          "items": {
            "$ref": "Operation"
          },
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      }
    },
    "GoogleCloudDatacatalogV1FieldType": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1FieldType",
      "properties": {
        "primitiveType": {
          "enumDescriptions": [
            "The default invalid value for a type.",
            "A double precision number.",
            "An UTF-8 string.",
            "A boolean value.",
            "A timestamp.",
            "A Richtext description."
          ],
          "enum": [
            "PRIMITIVE_TYPE_UNSPECIFIED",
            "DOUBLE",
            "STRING",
            "BOOL",
            "TIMESTAMP",
            "RICHTEXT"
          ],
          "type": "string",
          "description": "Primitive types, such as string, boolean, etc."
        },
        "enumType": {
          "description": "An enum type.",
          "$ref": "GoogleCloudDatacatalogV1FieldTypeEnumType"
        }
      }
    },
    "GoogleCloudDatacatalogV1TaxonomyService": {
      "id": "GoogleCloudDatacatalogV1TaxonomyService",
      "description": "The source system of the Taxonomy.",
      "type": "object",
      "properties": {
        "name": {
          "enumDescriptions": [
            "Default value",
            "Dataplex.",
            "Other"
          ],
          "enum": [
            "MANAGING_SYSTEM_UNSPECIFIED",
            "MANAGING_SYSTEM_DATAPLEX",
            "MANAGING_SYSTEM_OTHER"
          ],
          "description": "The Google Cloud service name.",
          "type": "string"
        },
        "identity": {
          "description": "The service agent for the service.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1InlineSource": {
      "description": "Inline source containing taxonomies to import.",
      "id": "GoogleCloudDatacatalogV1InlineSource",
      "properties": {
        "taxonomies": {
          "description": "Required. Taxonomies to import.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1SerializedTaxonomy"
          }
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1CloudBigtableSystemSpec": {
      "id": "GoogleCloudDatacatalogV1CloudBigtableSystemSpec",
      "description": "Specification that applies to all entries that are part of `CLOUD_BIGTABLE` system (user_specified_type)",
      "type": "object",
      "properties": {
        "instanceDisplayName": {
          "description": "Display name of the Instance. This is user specified and different from the resource name.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1PolicyTag": {
      "properties": {
        "childPolicyTags": {
          "items": {
            "type": "string"
          },
          "description": "Output only. Resource names of child policy tags of this policy tag.",
          "type": "array",
          "readOnly": true
        },
        "description": {
          "description": "Description of this policy tag. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns and page breaks, and be at most 2000 bytes long when encoded in UTF-8.",
          "type": "string"
        },
        "displayName": {
          "description": "Required. User-defined name of this policy tag. The name can't start or end with spaces and must be unique within the parent taxonomy, contain only Unicode letters, numbers, underscores, dashes and spaces, and be at most 200 bytes long when encoded in UTF-8.",
          "type": "string"
        },
        "parentPolicyTag": {
          "type": "string",
          "description": "Resource name of this policy tag's parent policy tag. If empty, this is a top level tag. If not set, defaults to an empty string. For example, for the \"LatLong\" policy tag in the example above, this field contains the resource name of the \"Geolocation\" policy tag, and, for \"Geolocation\", this field is empty."
        },
        "name": {
          "readOnly": true,
          "description": "Output only. Resource name of this policy tag in the URL format. The policy tag manager generates unique taxonomy IDs and policy tag IDs.",
          "type": "string"
        }
      },
      "description": "Denotes one policy tag in a taxonomy, for example, SSN. Policy tags can be defined in a hierarchy. For example: ``` + Geolocation + LatLong + City + ZipCode ``` Where the \"Geolocation\" policy tag contains three children.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1PolicyTag"
    },
    "GoogleCloudDatacatalogV1ModifyEntryContactsRequest": {
      "id": "GoogleCloudDatacatalogV1ModifyEntryContactsRequest",
      "properties": {
        "contacts": {
          "description": "Required. The new value for the Contacts.",
          "$ref": "GoogleCloudDatacatalogV1Contacts"
        }
      },
      "description": "Request message for ModifyEntryContacts.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1ImportEntriesRequest": {
      "type": "object",
      "properties": {
        "gcsBucketPath": {
          "type": "string",
          "description": "Path to a Cloud Storage bucket that contains a dump ready for ingestion."
        }
      },
      "id": "GoogleCloudDatacatalogV1ImportEntriesRequest",
      "description": "Request message for ImportEntries method."
    },
    "GoogleCloudDatacatalogV1EntryOverview": {
      "type": "object",
      "description": "Entry overview fields for rich text descriptions of entries.",
      "properties": {
        "overview": {
          "description": "Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1EntryOverview"
    },
    "GoogleCloudDatacatalogV1DatabaseTableSpec": {
      "id": "GoogleCloudDatacatalogV1DatabaseTableSpec",
      "type": "object",
      "description": "Specification that applies to a table resource. Valid only for entries with the `TABLE` type.",
      "properties": {
        "databaseViewSpec": {
          "description": "Spec what aplies to tables that are actually views. Not set for \"real\" tables.",
          "$ref": "GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec"
        },
        "type": {
          "enum": [
            "TABLE_TYPE_UNSPECIFIED",
            "NATIVE",
            "EXTERNAL"
          ],
          "enumDescriptions": [
            "Default unknown table type.",
            "Native table.",
            "External table."
          ],
          "description": "Type of this table.",
          "type": "string"
        },
        "dataplexTable": {
          "readOnly": true,
          "$ref": "GoogleCloudDatacatalogV1DataplexTableSpec",
          "description": "Output only. Fields specific to a Dataplex table and present only in the Dataplex table entries."
        }
      }
    },
    "GoogleCloudDatacatalogV1SearchCatalogRequest": {
      "id": "GoogleCloudDatacatalogV1SearchCatalogRequest",
      "properties": {
        "scope": {
          "description": "Required. The scope of this search request. The `scope` is invalid if `include_org_ids`, `include_project_ids` are empty AND `include_gcp_public_datasets` is set to `false`. In this case, the request returns an error.",
          "$ref": "GoogleCloudDatacatalogV1SearchCatalogRequestScope"
        },
        "pageToken": {
          "description": "Optional. Pagination token that, if specified, returns the next page of search results. If empty, returns the first page. This token is returned in the SearchCatalogResponse.next_page_token field of the response to a previous SearchCatalogRequest call.",
          "type": "string"
        },
        "query": {
          "description": "Optional. The query string with a minimum of 3 characters and specific syntax. For more information, see [Data Catalog search syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference). An empty query string returns all data assets (in the specified scope) that you have access to. A query string can be a simple `xyz` or qualified by predicates: * `name:x` * `column:y` * `description:z`",
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Number of results to return in a single search page. Can't be negative or 0, defaults to 10 in this case. The maximum number is 1000. If exceeded, throws an \"invalid argument\" exception."
        },
        "orderBy": {
          "type": "string",
          "description": "Specifies the order of results. Currently supported case-sensitive values are: * `relevance` that can only be descending * `last_modified_timestamp [asc|desc]` with descending (`desc`) as default * `default` that can only be descending If this parameter is omitted, it defaults to the descending `relevance`."
        }
      },
      "type": "object",
      "description": "Request message for SearchCatalog."
    },
    "SetIamPolicyRequest": {
      "type": "object",
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      }
    },
    "GoogleCloudDatacatalogV1CrossRegionalSource": {
      "description": "Cross-regional source used to import an existing taxonomy into a different region.",
      "id": "GoogleCloudDatacatalogV1CrossRegionalSource",
      "type": "object",
      "properties": {
        "taxonomy": {
          "type": "string",
          "description": "Required. The resource name of the source taxonomy to import."
        }
      }
    },
    "GoogleCloudDatacatalogV1ImportEntriesResponse": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ImportEntriesResponse",
      "description": "Response message for long-running operation returned by the ImportEntries.",
      "properties": {
        "upsertedEntriesCount": {
          "type": "string",
          "description": "Cumulative number of entries created and entries updated as a result of import operation.",
          "format": "int64"
        },
        "deletedEntriesCount": {
          "format": "int64",
          "description": "Number of entries deleted as a result of import operation.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1ViewSpec": {
      "id": "GoogleCloudDatacatalogV1ViewSpec",
      "type": "object",
      "properties": {
        "viewQuery": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The query that defines the table view."
        }
      },
      "description": "Table view specification."
    },
    "GoogleCloudDatacatalogV1TaggedEntry": {
      "properties": {
        "v1Entry": {
          "$ref": "GoogleCloudDatacatalogV1Entry",
          "description": "Non-encrypted Data Catalog v1 Entry."
        },
        "absentTags": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1Tag"
          },
          "description": "Optional. Tags that should be deleted from the Data Catalog. Caller should populate template name and column only."
        },
        "presentTags": {
          "description": "Optional. Tags that should be ingested into the Data Catalog. Caller should populate template name, column and fields.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1Tag"
          },
          "type": "array"
        }
      },
      "description": "Wrapper containing Entry and information about Tags that should and should not be attached to it.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1TaggedEntry"
    },
    "GoogleCloudDatacatalogV1ExportTaxonomiesResponse": {
      "type": "object",
      "description": "Response message for ExportTaxonomies.",
      "id": "GoogleCloudDatacatalogV1ExportTaxonomiesResponse",
      "properties": {
        "taxonomies": {
          "description": "List of taxonomies and policy tags as nested protocol buffers.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1SerializedTaxonomy"
          },
          "type": "array"
        }
      }
    },
    "GoogleCloudDatacatalogV1ListTaxonomiesResponse": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ListTaxonomiesResponse",
      "properties": {
        "taxonomies": {
          "items": {
            "$ref": "GoogleCloudDatacatalogV1Taxonomy"
          },
          "type": "array",
          "description": "Taxonomies that the project contains."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token of the next results page. Empty if there are no more results in the list."
        }
      },
      "description": "Response message for ListTaxonomies."
    },
    "GoogleCloudDatacatalogV1GcsFileSpec": {
      "properties": {
        "sizeBytes": {
          "readOnly": true,
          "type": "string",
          "format": "int64",
          "description": "Output only. File size in bytes."
        },
        "filePath": {
          "description": "Required. Full file path. Example: `gs://bucket_name/a/b.txt`.",
          "type": "string"
        },
        "gcsTimestamps": {
          "$ref": "GoogleCloudDatacatalogV1SystemTimestamps",
          "readOnly": true,
          "description": "Output only. Creation, modification, and expiration timestamps of a Cloud Storage file."
        }
      },
      "type": "object",
      "id": "GoogleCloudDatacatalogV1GcsFileSpec",
      "description": "Specification of a single file in Cloud Storage."
    },
    "GoogleCloudDatacatalogV1StarEntryResponse": {
      "id": "GoogleCloudDatacatalogV1StarEntryResponse",
      "description": "Response message for StarEntry. Empty for now",
      "type": "object",
      "properties": {}
    },
    "GoogleCloudDatacatalogV1TagTemplateField": {
      "id": "GoogleCloudDatacatalogV1TagTemplateField",
      "description": "The template for an individual field within a tag template.",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters."
        },
        "name": {
          "description": "Output only. The resource name of the tag template field in URL format. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE}/fields/{FIELD}` Note: The tag template field itself might not be stored in the location specified in its name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 64 characters.",
          "type": "string",
          "readOnly": true
        },
        "order": {
          "description": "The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Required. The type of value this tag field can contain.",
          "$ref": "GoogleCloudDatacatalogV1FieldType"
        },
        "description": {
          "type": "string",
          "description": "The description for this field. Defaults to an empty string."
        },
        "isRequired": {
          "type": "boolean",
          "description": "If true, this field is required. Defaults to false."
        }
      }
    },
    "GoogleCloudDatacatalogV1DataplexFilesetSpec": {
      "type": "object",
      "description": "Entry specyfication for a Dataplex fileset.",
      "properties": {
        "dataplexSpec": {
          "$ref": "GoogleCloudDatacatalogV1DataplexSpec",
          "description": "Common Dataplex fields."
        }
      },
      "id": "GoogleCloudDatacatalogV1DataplexFilesetSpec"
    },
    "GoogleCloudDatacatalogV1ListEntryGroupsResponse": {
      "description": "Response message for ListEntryGroups.",
      "id": "GoogleCloudDatacatalogV1ListEntryGroupsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Pagination token to specify in the next call to retrieve the next page of results. Empty if there are no more items.",
          "type": "string"
        },
        "entryGroups": {
          "items": {
            "$ref": "GoogleCloudDatacatalogV1EntryGroup"
          },
          "description": "Entry group details.",
          "type": "array"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "type": "object",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "properties": {
        "version": {
          "format": "int32",
          "type": "integer",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "bindings": {
          "items": {
            "$ref": "Binding"
          },
          "type": "array",
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`."
        },
        "etag": {
          "type": "string",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte"
        }
      }
    },
    "Expr": {
      "id": "Expr",
      "type": "object",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "properties": {
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        },
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1DataplexTableSpec": {
      "properties": {
        "dataplexSpec": {
          "$ref": "GoogleCloudDatacatalogV1DataplexSpec",
          "description": "Common Dataplex fields."
        },
        "userManaged": {
          "description": "Indicates if the table schema is managed by the user or not.",
          "type": "boolean"
        },
        "externalTables": {
          "type": "array",
          "description": "List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1DataplexExternalTable"
          }
        }
      },
      "id": "GoogleCloudDatacatalogV1DataplexTableSpec",
      "description": "Entry specification for a Dataplex table.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1StorageProperties": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1StorageProperties",
      "properties": {
        "filePattern": {
          "type": "array",
          "description": "Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`",
          "items": {
            "type": "string"
          }
        },
        "fileType": {
          "description": "File type in MIME format, for example, `text/plain`.",
          "type": "string"
        }
      },
      "description": "Details the properties of the underlying storage."
    },
    "GoogleCloudDatacatalogV1ListPolicyTagsResponse": {
      "description": "Response message for ListPolicyTags.",
      "type": "object",
      "properties": {
        "policyTags": {
          "items": {
            "$ref": "GoogleCloudDatacatalogV1PolicyTag"
          },
          "type": "array",
          "description": "The policy tags that belong to the taxonomy."
        },
        "nextPageToken": {
          "description": "Pagination token of the next results page. Empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1ListPolicyTagsResponse"
    },
    "GoogleCloudDatacatalogV1Taxonomy": {
      "properties": {
        "displayName": {
          "description": "Required. User-defined name of this taxonomy. The name can't start or end with spaces, must contain only Unicode letters, numbers, underscores, dashes, and spaces, and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.",
          "type": "string"
        },
        "activatedPolicyTypes": {
          "items": {
            "enum": [
              "POLICY_TYPE_UNSPECIFIED",
              "FINE_GRAINED_ACCESS_CONTROL"
            ],
            "type": "string",
            "enumDescriptions": [
              "Unspecified policy type.",
              "Fine-grained access control policy that enables access control on tagged sub-resources."
            ]
          },
          "description": "Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.",
          "type": "array"
        },
        "service": {
          "description": "Output only. Identity of the service which owns the Taxonomy. This field is only populated when the taxonomy is created by a Google Cloud service. Currently only 'DATAPLEX' is supported.",
          "readOnly": true,
          "$ref": "GoogleCloudDatacatalogV1TaxonomyService"
        },
        "taxonomyTimestamps": {
          "$ref": "GoogleCloudDatacatalogV1SystemTimestamps",
          "description": "Output only. Creation and modification timestamps of this taxonomy.",
          "readOnly": true
        },
        "policyTagCount": {
          "description": "Output only. Number of policy tags in this taxonomy.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Output only. Resource name of this taxonomy in URL format. Note: Policy tag manager generates unique taxonomy IDs.",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of this taxonomy. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns, and page breaks, and be at most 2000 bytes long when encoded in UTF-8."
        }
      },
      "description": "A taxonomy is a collection of hierarchical policy tags that classify data along a common axis. For example, a \"data sensitivity\" taxonomy might contain the following policy tags: ``` + PII + Account number + Age + SSN + Zipcode + Financials + Revenue ``` A \"data origin\" taxonomy might contain the following policy tags: ``` + User data + Employee data + Partner data + Public data ```",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1Taxonomy"
    },
    "TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "id": "TestIamPermissionsResponse",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array"
        }
      }
    },
    "GoogleCloudDatacatalogV1DataplexSpec": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1DataplexSpec",
      "properties": {
        "projectId": {
          "description": "Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.",
          "type": "string"
        },
        "compressionFormat": {
          "description": "Compression format of the data, e.g., zip, gzip etc.",
          "type": "string"
        },
        "dataFormat": {
          "description": "Format of the data.",
          "$ref": "GoogleCloudDatacatalogV1PhysicalSchema"
        },
        "asset": {
          "description": "Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.",
          "type": "string"
        }
      },
      "description": "Common Dataplex fields."
    },
    "GoogleCloudDatacatalogV1UnstarEntryRequest": {
      "id": "GoogleCloudDatacatalogV1UnstarEntryRequest",
      "properties": {},
      "type": "object",
      "description": "Request message for UnstarEntry."
    },
    "GoogleCloudDatacatalogV1RoutineSpecArgument": {
      "id": "GoogleCloudDatacatalogV1RoutineSpecArgument",
      "description": "Input or output argument of a function or stored procedure.",
      "properties": {
        "type": {
          "description": "Type of the argument. The exact value depends on the source system and the language.",
          "type": "string"
        },
        "name": {
          "description": "The name of the argument. A return argument of a function might not have a name.",
          "type": "string"
        },
        "mode": {
          "type": "string",
          "description": "Specifies whether the argument is input or output.",
          "enumDescriptions": [
            "Unspecified mode.",
            "The argument is input-only.",
            "The argument is output-only.",
            "The argument is both an input and an output."
          ],
          "enum": [
            "MODE_UNSPECIFIED",
            "IN",
            "OUT",
            "INOUT"
          ]
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema": {
      "properties": {
        "text": {
          "description": "Thrift IDL source of the schema.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Schema in Thrift format.",
      "id": "GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema"
    },
    "GoogleCloudDatacatalogV1SerializedTaxonomy": {
      "description": "A nested protocol buffer that represents a taxonomy and the hierarchy of its policy tags. Used for taxonomy replacement, import, and export.",
      "properties": {
        "activatedPolicyTypes": {
          "items": {
            "enumDescriptions": [
              "Unspecified policy type.",
              "Fine-grained access control policy that enables access control on tagged sub-resources."
            ],
            "type": "string",
            "enum": [
              "POLICY_TYPE_UNSPECIFIED",
              "FINE_GRAINED_ACCESS_CONTROL"
            ]
          },
          "description": "A list of policy types that are activated per taxonomy.",
          "type": "array"
        },
        "policyTags": {
          "type": "array",
          "description": "Top level policy tags associated with the taxonomy, if any.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1SerializedPolicyTag"
          }
        },
        "description": {
          "description": "Description of the serialized taxonomy. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Required. Display name of the taxonomy. At most 200 bytes when encoded in UTF-8."
        }
      },
      "id": "GoogleCloudDatacatalogV1SerializedTaxonomy",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema": {
      "description": "Schema in Avro JSON format.",
      "id": "GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema",
      "properties": {
        "text": {
          "description": "JSON source of the Avro schema.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1DataSource": {
      "properties": {
        "service": {
          "enum": [
            "SERVICE_UNSPECIFIED",
            "CLOUD_STORAGE",
            "BIGQUERY"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default unknown service.",
            "Google Cloud Storage service.",
            "BigQuery service."
          ],
          "description": "Service that physically stores the data."
        },
        "storageProperties": {
          "description": "Detailed properties of the underlying storage.",
          "$ref": "GoogleCloudDatacatalogV1StorageProperties"
        },
        "sourceEntry": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Data Catalog entry name, if applicable."
        },
        "resource": {
          "description": "Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`",
          "type": "string"
        }
      },
      "description": "Physical location of an entry.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1DataSource"
    },
    "GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValue": {
      "id": "GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValue",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Required. The display name of the enum value. Must not be an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters."
        }
      }
    },
    "GoogleCloudDatacatalogV1ListEntriesResponse": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ListEntriesResponse",
      "properties": {
        "nextPageToken": {
          "description": "Pagination token of the next results page. Empty if there are no more items in results.",
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1Entry"
          },
          "description": "Entry details."
        }
      },
      "description": "Response message for ListEntries."
    },
    "GoogleCloudDatacatalogV1SearchCatalogResponse": {
      "description": "Response message for SearchCatalog.",
      "type": "object",
      "properties": {
        "totalSize": {
          "description": "The approximate total number of entries matched by the query.",
          "type": "integer",
          "format": "int32"
        },
        "unreachable": {
          "description": "Unreachable locations. Search results don't include data from those locations. To get additional information on an error, repeat the search request and restrict it to specific locations by setting the `SearchCatalogRequest.scope.restricted_locations` parameter.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "results": {
          "description": "Search results.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1SearchCatalogResult"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Pagination token that can be used in subsequent calls to retrieve the next page of results.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1SearchCatalogResponse"
    },
    "GoogleCloudDatacatalogV1SerializedPolicyTag": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the serialized policy tag. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description."
        },
        "childPolicyTags": {
          "items": {
            "$ref": "GoogleCloudDatacatalogV1SerializedPolicyTag"
          },
          "type": "array",
          "description": "Children of the policy tag, if any."
        },
        "displayName": {
          "description": "Required. Display name of the policy tag. At most 200 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "policyTag": {
          "type": "string",
          "description": "Resource name of the policy tag. This field is ignored when calling `ImportTaxonomies`."
        }
      },
      "id": "GoogleCloudDatacatalogV1SerializedPolicyTag",
      "description": "A nested protocol buffer that represents a policy tag and all its descendants."
    },
    "GoogleCloudDatacatalogV1PersonalDetails": {
      "id": "GoogleCloudDatacatalogV1PersonalDetails",
      "properties": {
        "starTime": {
          "format": "google-datetime",
          "description": "Set if the entry is starred; unset otherwise.",
          "type": "string"
        },
        "starred": {
          "description": "True if the entry is starred by the user; false otherwise.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Entry metadata relevant only to the user and private to them."
    },
    "GoogleCloudDatacatalogV1ReconcileTagsResponse": {
      "description": "Long-running operation response message returned by ReconcileTags.",
      "id": "GoogleCloudDatacatalogV1ReconcileTagsResponse",
      "properties": {
        "updatedTagsCount": {
          "description": "Number of tags updated in the request.",
          "type": "string",
          "format": "int64"
        },
        "createdTagsCount": {
          "description": "Number of tags created in the request.",
          "type": "string",
          "format": "int64"
        },
        "deletedTagsCount": {
          "format": "int64",
          "description": "Number of tags deleted in the request.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1UnstarEntryResponse": {
      "properties": {},
      "description": "Response message for UnstarEntry. Empty for now",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1UnstarEntryResponse"
    },
    "GoogleCloudDatacatalogV1EntryGroup": {
      "description": "Entry group metadata. An `EntryGroup` resource represents a logical grouping of zero or more Data Catalog Entry resources.",
      "properties": {
        "dataCatalogTimestamps": {
          "description": "Output only. Timestamps of the entry group. Default value is empty.",
          "readOnly": true,
          "$ref": "GoogleCloudDatacatalogV1SystemTimestamps"
        },
        "description": {
          "description": "Entry group description. Can consist of several sentences or paragraphs that describe the entry group contents. Default value is an empty string.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "A short name to identify the entry group, for example, \"analytics data - jan 2011\". Default value is an empty string."
        },
        "name": {
          "description": "The resource name of the entry group in URL format. Note: The entry group itself and its child resources might not be stored in the location specified in its name.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1EntryGroup",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema": {
      "id": "GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema",
      "properties": {},
      "description": "Marks an ORC-encoded data source.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1TagFieldEnumValue": {
      "type": "object",
      "description": "An enum value.",
      "properties": {
        "displayName": {
          "description": "The display name of the enum value.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1TagFieldEnumValue"
    },
    "GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec": {
      "description": "Specification for the BigQuery connection to a Cloud SQL instance.",
      "id": "GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec",
      "properties": {
        "type": {
          "enum": [
            "DATABASE_TYPE_UNSPECIFIED",
            "POSTGRES",
            "MYSQL"
          ],
          "type": "string",
          "description": "Type of the Cloud SQL database.",
          "enumDescriptions": [
            "Unspecified database type.",
            "Cloud SQL for PostgreSQL.",
            "Cloud SQL for MySQL."
          ]
        },
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "instanceId": {
          "description": "Cloud SQL instance ID in the format of `project:location:instance`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1ReconcileTagsMetadata": {
      "description": "Long-running operation metadata message returned by the ReconcileTags.",
      "properties": {
        "state": {
          "type": "string",
          "description": "State of the reconciliation operation.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The reconciliation has been queued and awaits for execution.",
            "The reconciliation is in progress.",
            "The reconciliation has been finished."
          ],
          "enum": [
            "RECONCILIATION_STATE_UNSPECIFIED",
            "RECONCILIATION_QUEUED",
            "RECONCILIATION_IN_PROGRESS",
            "RECONCILIATION_DONE"
          ]
        },
        "errors": {
          "description": "Maps the name of each tagged column (or empty string for a sole entry) to tagging operation status.",
          "additionalProperties": {
            "$ref": "Status"
          },
          "type": "object"
        }
      },
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ReconcileTagsMetadata"
    },
    "GoogleCloudDatacatalogV1SearchCatalogRequestScope": {
      "id": "GoogleCloudDatacatalogV1SearchCatalogRequestScope",
      "properties": {
        "includeProjectIds": {
          "description": "The list of project IDs to search within. For more information on the distinction between project names, IDs, and numbers, see [Projects](/docs/overview/#projects).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "restrictedLocations": {
          "description": "Optional. The list of locations to search within. If empty, all locations are searched. Returns an error if any location in the list isn't one of the [Supported regions](https://cloud.google.com/data-catalog/docs/concepts/regions#supported_regions). If a location is unreachable, its name is returned in the `SearchCatalogResponse.unreachable` field. To get additional information on the error, repeat the search request and set the location name as the value of this parameter.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includePublicTagTemplates": {
          "type": "boolean",
          "description": "Optional. This field is deprecated. The search mechanism for public and private tag templates is the same."
        },
        "includeGcpPublicDatasets": {
          "description": "If `true`, include Google Cloud public datasets in search results. By default, they are excluded. See [Google Cloud Public Datasets](/public-datasets) for more information.",
          "type": "boolean"
        },
        "includeOrgIds": {
          "items": {
            "type": "string"
          },
          "description": "The list of organization IDs to search within. To find your organization ID, follow the steps from [Creating and managing organizations] (/resource-manager/docs/creating-managing-organization).",
          "type": "array"
        },
        "starredOnly": {
          "type": "boolean",
          "description": "Optional. If `true`, search only among starred entries. By default, all results are returned, starred or not."
        }
      },
      "description": "The criteria that select the subspace used for query matching.",
      "type": "object"
    },
    "Empty": {
      "id": "Empty",
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "GoogleCloudDatacatalogV1ListTagsResponse": {
      "id": "GoogleCloudDatacatalogV1ListTagsResponse",
      "properties": {
        "nextPageToken": {
          "description": "Pagination token of the next results page. Empty if there are no more items in results.",
          "type": "string"
        },
        "tags": {
          "type": "array",
          "description": "Tag details.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1Tag"
          }
        }
      },
      "description": "Response message for ListTags.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1DataplexExternalTable": {
      "type": "object",
      "properties": {
        "dataCatalogEntry": {
          "type": "string",
          "description": "Name of the Data Catalog entry representing the external table."
        },
        "fullyQualifiedName": {
          "description": "Fully qualified name (FQN) of the external table.",
          "type": "string"
        },
        "system": {
          "description": "Service in which the external table is registered.",
          "enum": [
            "INTEGRATED_SYSTEM_UNSPECIFIED",
            "BIGQUERY",
            "CLOUD_PUBSUB",
            "DATAPROC_METASTORE",
            "DATAPLEX",
            "CLOUD_SPANNER",
            "CLOUD_BIGTABLE",
            "CLOUD_SQL",
            "LOOKER"
          ],
          "enumDescriptions": [
            "Default unknown system.",
            "BigQuery.",
            "Cloud Pub/Sub.",
            "Dataproc Metastore.",
            "Dataplex.",
            "Cloud Spanner",
            "Cloud Bigtable",
            "Cloud Sql",
            "Looker"
          ],
          "type": "string"
        },
        "googleCloudResource": {
          "type": "string",
          "description": "Google Cloud resource name of the external table."
        }
      },
      "description": "External table registered by Dataplex. Dataplex publishes data discovered from an asset into multiple other systems (BigQuery, DPMS) in form of tables. We call them \"external tables\". External tables are also synced into the Data Catalog. This message contains pointers to those external tables (fully qualified name, resource name et cetera) within the Data Catalog.",
      "id": "GoogleCloudDatacatalogV1DataplexExternalTable"
    },
    "GoogleCloudDatacatalogV1ImportTaxonomiesResponse": {
      "properties": {
        "taxonomies": {
          "type": "array",
          "description": "Imported taxonomies.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1Taxonomy"
          }
        }
      },
      "description": "Response message for ImportTaxonomies.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ImportTaxonomiesResponse"
    },
    "GoogleCloudDatacatalogV1ColumnSchema": {
      "id": "GoogleCloudDatacatalogV1ColumnSchema",
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string",
          "description": "Optional. Default value for the column."
        },
        "type": {
          "type": "string",
          "description": "Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes."
        },
        "description": {
          "description": "Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.",
          "type": "string"
        },
        "mode": {
          "description": "Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.",
          "type": "string"
        },
        "ordinalPosition": {
          "description": "Optional. Ordinal position",
          "type": "integer",
          "format": "int32"
        },
        "lookerColumnSpec": {
          "description": "Looker specific column info of this column.",
          "$ref": "GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec"
        },
        "gcRule": {
          "description": "Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.",
          "type": "string"
        },
        "highestIndexingType": {
          "description": "Optional. Most important inclusion of this column.",
          "enum": [
            "INDEXING_TYPE_UNSPECIFIED",
            "INDEXING_TYPE_NONE",
            "INDEXING_TYPE_NON_UNIQUE",
            "INDEXING_TYPE_UNIQUE",
            "INDEXING_TYPE_PRIMARY_KEY"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Column not a part of an index.",
            "Column Part of non unique index.",
            "Column part of unique index.",
            "Column part of the primary key."
          ],
          "type": "string"
        },
        "column": {
          "description": "Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.",
          "type": "string"
        },
        "subcolumns": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1ColumnSchema"
          },
          "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns."
        }
      },
      "description": "A column within a schema. Columns can be nested inside other columns."
    },
    "GoogleCloudDatacatalogV1TagField": {
      "id": "GoogleCloudDatacatalogV1TagField",
      "properties": {
        "enumValue": {
          "description": "The value of a tag field with an enum type. This value must be one of the allowed values listed in this enum.",
          "$ref": "GoogleCloudDatacatalogV1TagFieldEnumValue"
        },
        "stringValue": {
          "type": "string",
          "description": "The value of a tag field with a string type. The maximum length is 2000 UTF-8 characters."
        },
        "richtextValue": {
          "description": "The value of a tag field with a rich text type. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.",
          "type": "string"
        },
        "doubleValue": {
          "type": "number",
          "description": "The value of a tag field with a double type.",
          "format": "double"
        },
        "timestampValue": {
          "format": "google-datetime",
          "type": "string",
          "description": "The value of a tag field with a timestamp type."
        },
        "displayName": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The display name of this field."
        },
        "order": {
          "readOnly": true,
          "description": "Output only. The order of this field with respect to other fields in this tag. Can be set by Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag don't have to be sequential.",
          "type": "integer",
          "format": "int32"
        },
        "boolValue": {
          "description": "The value of a tag field with a boolean type.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Contains the value and additional information on a field within a Tag."
    },
    "Status": {
      "properties": {
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1ImportEntriesMetadata": {
      "id": "GoogleCloudDatacatalogV1ImportEntriesMetadata",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "Status"
          },
          "description": "Partial errors that are encountered during the ImportEntries operation. There is no guarantee that all the encountered errors are reported. However, if no errors are reported, it means that no errors were encountered."
        },
        "state": {
          "enum": [
            "IMPORT_STATE_UNSPECIFIED",
            "IMPORT_QUEUED",
            "IMPORT_IN_PROGRESS",
            "IMPORT_DONE",
            "IMPORT_OBSOLETE"
          ],
          "description": "State of the import operation.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The dump with entries has been queued for import.",
            "The import of entries is in progress.",
            "The import of entries has been finished.",
            "The import of entries has been abandoned in favor of a newer request."
          ],
          "type": "string"
        }
      },
      "description": "Metadata message for long-running operation returned by the ImportEntries.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1DataSourceConnectionSpec": {
      "description": "Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type. Only one of internal specs can be set at the time, and cannot be changed later.",
      "type": "object",
      "properties": {
        "bigqueryConnectionSpec": {
          "description": "Output only. Fields specific to BigQuery connections.",
          "$ref": "GoogleCloudDatacatalogV1BigQueryConnectionSpec"
        }
      },
      "id": "GoogleCloudDatacatalogV1DataSourceConnectionSpec"
    },
    "GoogleCloudDatacatalogV1PhysicalSchema": {
      "id": "GoogleCloudDatacatalogV1PhysicalSchema",
      "description": "Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.",
      "properties": {
        "csv": {
          "$ref": "GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema",
          "description": "Marks a CSV-encoded data source."
        },
        "orc": {
          "description": "Marks an ORC-encoded data source.",
          "$ref": "GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema"
        },
        "thrift": {
          "$ref": "GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema",
          "description": "Schema in Thrift format."
        },
        "parquet": {
          "description": "Marks a Parquet-encoded data source.",
          "$ref": "GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema"
        },
        "avro": {
          "description": "Schema in Avro JSON format.",
          "$ref": "GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema"
        },
        "protobuf": {
          "$ref": "GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema",
          "description": "Schema in protocol buffer format."
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1FieldTypeEnumType": {
      "properties": {
        "allowedValues": {
          "items": {
            "$ref": "GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValue"
          },
          "description": "The set of allowed values for this enum. This set must not be empty and can include up to 100 allowed values. The display names of the values in this set must not be empty and must be case-insensitively unique within this set. The order of items in this set is preserved. This field can be used to create, remove, and reorder enum values. To rename enum values, use the `RenameTagTemplateFieldEnumValue` method.",
          "type": "array"
        }
      },
      "id": "GoogleCloudDatacatalogV1FieldTypeEnumType",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1BigQueryDateShardedSpec": {
      "type": "object",
      "description": "Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).",
      "id": "GoogleCloudDatacatalogV1BigQueryDateShardedSpec",
      "properties": {
        "latestShardResource": {
          "description": "Output only. BigQuery resource name of the latest shard.",
          "type": "string",
          "readOnly": true
        },
        "tablePrefix": {
          "description": "Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.",
          "type": "string",
          "readOnly": true
        },
        "dataset": {
          "description": "Output only. The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.",
          "type": "string",
          "readOnly": true
        },
        "shardCount": {
          "readOnly": true,
          "description": "Output only. Total number of shards.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "Binding": {
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        },
        "members": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding."
        }
      },
      "id": "Binding",
      "description": "Associates `members`, or principals, with a `role`."
    },
    "GoogleCloudDatacatalogV1FilesetSpec": {
      "properties": {
        "dataplexFileset": {
          "$ref": "GoogleCloudDatacatalogV1DataplexFilesetSpec",
          "description": "Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries."
        }
      },
      "description": "Specification that applies to a fileset. Valid only for entries with the 'FILESET' type.",
      "id": "GoogleCloudDatacatalogV1FilesetSpec",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1UsageStats": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1UsageStats",
      "properties": {
        "totalFailures": {
          "description": "The number of failed attempts to use the underlying entry.",
          "format": "float",
          "type": "number"
        },
        "totalCompletions": {
          "description": "The number of successful uses of the underlying entry.",
          "format": "float",
          "type": "number"
        },
        "totalCancellations": {
          "type": "number",
          "format": "float",
          "description": "The number of cancelled attempts to use the underlying entry."
        },
        "totalExecutionTimeForCompletionsMillis": {
          "description": "Total time spent only on successful uses, in milliseconds.",
          "type": "number",
          "format": "float"
        }
      },
      "description": "Detailed statistics on the entry's usage. Usage statistics have the following limitations: - Only BigQuery tables have them. - They only include BigQuery query jobs. - They might be underestimated because wildcard table references are not yet counted. For more information, see [Querying multiple tables using a wildcard table] (https://cloud.google.com/bigquery/docs/querying-wildcard-tables)"
    },
    "GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpec": {
      "id": "GoogleCloudDatacatalogV1CloudBigtableInstanceSpecCloudBigtableClusterSpec",
      "properties": {
        "location": {
          "description": "Location of the cluster, typically a Cloud zone.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Name of the cluster."
        },
        "type": {
          "type": "string",
          "description": "Type of the resource. For a cluster this would be \"CLUSTER\"."
        },
        "linkedResource": {
          "type": "string",
          "description": "A link back to the parent resource, in this case Instance."
        }
      },
      "description": "Spec that applies to clusters of an Instance of Cloud Bigtable.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1TagTemplate": {
      "type": "object",
      "description": "A tag template defines a tag that can have one or more typed fields. The template is used to create tags that are attached to Google Cloud resources. [Tag template roles] (https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. For example, see the [TagTemplate User] (https://cloud.google.com/data-catalog/docs/how-to/template-user) role that includes a permission to use the tag template to tag resources.",
      "id": "GoogleCloudDatacatalogV1TagTemplate",
      "properties": {
        "fields": {
          "additionalProperties": {
            "$ref": "GoogleCloudDatacatalogV1TagTemplateField"
          },
          "type": "object",
          "description": "Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. The map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. The IDs have the following limitations: * Can contain uppercase and lowercase letters, numbers (0-9) and underscores (_). * Must be at least 1 character and at most 64 characters long. * Must start with a letter or underscore."
        },
        "isPubliclyReadable": {
          "description": "Indicates whether tags created with this template are public. Public tags do not require tag template access to appear in ListTags API response. Additionally, you can search for a public tag by value with a simple search query in addition to using a ``tag:`` predicate.",
          "type": "boolean"
        },
        "name": {
          "description": "The resource name of the tag template in URL format. Note: The tag template itself and its child resources might not be stored in the location specified in its name.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Display name for this template. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters."
        }
      }
    },
    "GetPolicyOptions": {
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "type": "object",
      "properties": {
        "requestedPolicyVersion": {
          "format": "int32",
          "type": "integer",
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        }
      },
      "id": "GetPolicyOptions"
    },
    "GoogleCloudDatacatalogV1BigQueryRoutineSpec": {
      "description": "Fields specific for BigQuery routines.",
      "properties": {
        "importedLibraries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Paths of the imported libraries."
        }
      },
      "type": "object",
      "id": "GoogleCloudDatacatalogV1BigQueryRoutineSpec"
    },
    "GoogleCloudDatacatalogV1Contacts": {
      "id": "GoogleCloudDatacatalogV1Contacts",
      "properties": {
        "people": {
          "description": "The list of contact people for the entry.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1ContactsPerson"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Contact people for the entry."
    },
    "GoogleCloudDatacatalogV1SystemTimestamps": {
      "properties": {
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes."
        },
        "expireTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "description": "Creation timestamp of the resource within the given system.",
          "format": "google-datetime"
        }
      },
      "id": "GoogleCloudDatacatalogV1SystemTimestamps",
      "description": "Timestamps associated with this resource in a particular system.",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1Entry": {
      "description": "Entry metadata. A Data Catalog entry represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic) or outside of it. You can use the `linked_resource` field in the entry resource to refer to the original resource ID of the source system. An entry resource contains resource details, for example, its schema. Additionally, you can attach flexible metadata to an entry in the form of a Tag.",
      "id": "GoogleCloudDatacatalogV1Entry",
      "type": "object",
      "properties": {
        "fullyQualifiedName": {
          "description": "[Fully Qualified Name (FQN)](https://cloud.google.com//data-catalog/docs/fully-qualified-names) of the resource. Set automatically for entries representing resources from synced systems. Settable only during creation, and read-only later. Can be used for search and lookup of the entries. ",
          "type": "string"
        },
        "routineSpec": {
          "description": "Specification that applies to a user-defined function or procedure. Valid only for entries with the `ROUTINE` type.",
          "$ref": "GoogleCloudDatacatalogV1RoutineSpec"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cloud labels attached to the entry. In Data Catalog, you can create and modify labels attached only to custom entries. Synced entries have unmodifiable labels that come from the source system."
        },
        "businessContext": {
          "$ref": "GoogleCloudDatacatalogV1BusinessContext",
          "description": "Business Context of the entry. Not supported for BigQuery datasets"
        },
        "integratedSystem": {
          "enumDescriptions": [
            "Default unknown system.",
            "BigQuery.",
            "Cloud Pub/Sub.",
            "Dataproc Metastore.",
            "Dataplex.",
            "Cloud Spanner",
            "Cloud Bigtable",
            "Cloud Sql",
            "Looker"
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. Indicates the entry's source system that Data Catalog integrates with, such as BigQuery, Pub/Sub, or Dataproc Metastore.",
          "enum": [
            "INTEGRATED_SYSTEM_UNSPECIFIED",
            "BIGQUERY",
            "CLOUD_PUBSUB",
            "DATAPROC_METASTORE",
            "DATAPLEX",
            "CLOUD_SPANNER",
            "CLOUD_BIGTABLE",
            "CLOUD_SQL",
            "LOOKER"
          ]
        },
        "databaseTableSpec": {
          "$ref": "GoogleCloudDatacatalogV1DatabaseTableSpec",
          "description": "Specification that applies to a table resource. Valid only for entries with the `TABLE` or `EXPLORE` type."
        },
        "type": {
          "enumDescriptions": [
            "Default unknown type.",
            "The entry type that has a GoogleSQL schema, including logical views.",
            "Output only. The type of models. For more information, see [Supported models in BigQuery ML] (https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in).",
            "An entry type for streaming entries. For example, a Pub/Sub topic.",
            "An entry type for a set of files or objects. For example, a Cloud Storage fileset.",
            "A group of servers that work together. For example, a Kafka cluster.",
            "A database.",
            "Output only. Connection to a data source. For example, a BigQuery connection.",
            "Output only. Routine, for example, a BigQuery routine.",
            "A Dataplex lake.",
            "A Dataplex zone.",
            "A service, for example, a Dataproc Metastore service.",
            "Schema within a relational database.",
            "A Dashboard, for example from Looker.",
            "A Looker Explore. For more information, see [Looker Explore API] (https://developers.looker.com/api/explorer/4.0/methods/LookmlModel/lookml_model_explore).",
            "A Looker Look. For more information, see [Looker Look API] (https://developers.looker.com/api/explorer/4.0/methods/Look)."
          ],
          "enum": [
            "ENTRY_TYPE_UNSPECIFIED",
            "TABLE",
            "MODEL",
            "DATA_STREAM",
            "FILESET",
            "CLUSTER",
            "DATABASE",
            "DATA_SOURCE_CONNECTION",
            "ROUTINE",
            "LAKE",
            "ZONE",
            "SERVICE",
            "DATABASE_SCHEMA",
            "DASHBOARD",
            "EXPLORE",
            "LOOK"
          ],
          "type": "string",
          "description": "The type of the entry. Only used for entries with types listed in the `EntryType` enum. Currently, only `FILESET` enum value is allowed. All other entries created in Data Catalog must use the `user_specified_type`."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The resource name of an entry in URL format. Note: The entry itself and its child resources might not be stored in the location specified in its name."
        },
        "serviceSpec": {
          "$ref": "GoogleCloudDatacatalogV1ServiceSpec",
          "description": "Specification that applies to a Service resource."
        },
        "userSpecifiedType": {
          "type": "string",
          "description": "Custom entry type that doesn't match any of the values allowed for input and listed in the `EntryType` enum. When creating an entry, first check the type values in the enum. If there are no appropriate types for the new entry, provide a custom value, for example, `my_special_type`. The `user_specified_type` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long."
        },
        "sourceSystemTimestamps": {
          "$ref": "GoogleCloudDatacatalogV1SystemTimestamps",
          "description": "Timestamps from the underlying resource, not from the Data Catalog entry. Output only when the entry has a system listed in the `IntegratedSystem` enum. For entries with `user_specified_system`, this field is optional and defaults to an empty timestamp."
        },
        "cloudBigtableSystemSpec": {
          "description": "Specification that applies to Cloud Bigtable system. Only settable when `integrated_system` is equal to `CLOUD_BIGTABLE`",
          "$ref": "GoogleCloudDatacatalogV1CloudBigtableSystemSpec"
        },
        "bigqueryDateShardedSpec": {
          "$ref": "GoogleCloudDatacatalogV1BigQueryDateShardedSpec",
          "readOnly": true,
          "description": "Output only. Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding)."
        },
        "sqlDatabaseSystemSpec": {
          "description": "Specification that applies to a relational database system. Only settable when `user_specified_system` is equal to `SQL_DATABASE`",
          "$ref": "GoogleCloudDatacatalogV1SqlDatabaseSystemSpec"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of an entry. The maximum size is 500 bytes when encoded in UTF-8. Default value is an empty string."
        },
        "usageSignal": {
          "$ref": "GoogleCloudDatacatalogV1UsageSignal",
          "description": "Resource usage statistics."
        },
        "dataSourceConnectionSpec": {
          "description": "Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.",
          "$ref": "GoogleCloudDatacatalogV1DataSourceConnectionSpec"
        },
        "filesetSpec": {
          "description": "Specification that applies to a fileset resource. Valid only for entries with the `FILESET` type.",
          "$ref": "GoogleCloudDatacatalogV1FilesetSpec"
        },
        "userSpecifiedSystem": {
          "type": "string",
          "description": "Indicates the entry's source system that Data Catalog doesn't automatically integrate with. The `user_specified_system` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long."
        },
        "description": {
          "description": "Entry description that can consist of several sentences or paragraphs that describe entry contents. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). The maximum size is 2000 bytes when encoded in UTF-8. Default value is an empty string.",
          "type": "string"
        },
        "bigqueryTableSpec": {
          "$ref": "GoogleCloudDatacatalogV1BigQueryTableSpec",
          "description": "Output only. Specification that applies to a BigQuery table. Valid only for entries with the `TABLE` type.",
          "readOnly": true
        },
        "linkedResource": {
          "type": "string",
          "description": "The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [Full Resource Name] (https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}` Output only when the entry is one of the types in the `EntryType` enum. For entries with a `user_specified_type`, this field is optional and defaults to an empty string. The resource string must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), periods (.), colons (:), slashes (/), dashes (-), and hashes (#). The maximum size is 200 bytes when encoded in UTF-8."
        },
        "schema": {
          "description": "Schema of the entry. An entry might not have any schema attached to it.",
          "$ref": "GoogleCloudDatacatalogV1Schema"
        },
        "lookerSystemSpec": {
          "$ref": "GoogleCloudDatacatalogV1LookerSystemSpec",
          "description": "Specification that applies to Looker sysstem. Only settable when `user_specified_system` is equal to `LOOKER`"
        },
        "personalDetails": {
          "readOnly": true,
          "description": "Output only. Additional information related to the entry. Private to the current user.",
          "$ref": "GoogleCloudDatacatalogV1PersonalDetails"
        },
        "gcsFilesetSpec": {
          "description": "Specification that applies to a Cloud Storage fileset. Valid only for entries with the `FILESET` type.",
          "$ref": "GoogleCloudDatacatalogV1GcsFilesetSpec"
        },
        "dataSource": {
          "$ref": "GoogleCloudDatacatalogV1DataSource",
          "description": "Output only. Physical location of the entry.",
          "readOnly": true
        }
      }
    },
    "GoogleCloudDatacatalogV1BigQueryConnectionSpec": {
      "type": "object",
      "id": "GoogleCloudDatacatalogV1BigQueryConnectionSpec",
      "properties": {
        "hasCredential": {
          "description": "True if there are credentials attached to the BigQuery connection; false otherwise.",
          "type": "boolean"
        },
        "cloudSql": {
          "$ref": "GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec",
          "description": "Specification for the BigQuery connection to a Cloud SQL instance."
        },
        "connectionType": {
          "type": "string",
          "description": "The type of the BigQuery connection.",
          "enum": [
            "CONNECTION_TYPE_UNSPECIFIED",
            "CLOUD_SQL"
          ],
          "enumDescriptions": [
            "Unspecified type.",
            "Cloud SQL connection."
          ]
        }
      },
      "description": "Specification for the BigQuery connection."
    },
    "GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec": {
      "id": "GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec",
      "description": "Column info specific to Looker System.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Dimension.",
            "Dimension group - parent for Dimension.",
            "Filter.",
            "Measure.",
            "Parameter."
          ],
          "description": "Looker specific column type of this column.",
          "enum": [
            "LOOKER_COLUMN_TYPE_UNSPECIFIED",
            "DIMENSION",
            "DIMENSION_GROUP",
            "FILTER",
            "MEASURE",
            "PARAMETER"
          ]
        }
      }
    },
    "GoogleCloudDatacatalogV1ReconcileTagsRequest": {
      "properties": {
        "forceDeleteMissing": {
          "type": "boolean",
          "description": "If set to `true`, deletes entry tags related to a tag template not listed in the tags source from an entry. If set to `false`, unlisted tags are retained."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1Tag"
          },
          "description": "A list of tags to apply to an entry. A tag can specify a tag template, which must be the template specified in the `ReconcileTagsRequest`. The sole entry and each of its columns must be mentioned at most once."
        },
        "tagTemplate": {
          "description": "Required. The name of the tag template, which is used for reconciliation.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleCloudDatacatalogV1ReconcileTagsRequest",
      "description": "Request message for ReconcileTags."
    },
    "GoogleCloudDatacatalogV1BusinessContext": {
      "properties": {
        "entryOverview": {
          "$ref": "GoogleCloudDatacatalogV1EntryOverview",
          "description": "Entry overview fields for rich text descriptions of entries."
        },
        "contacts": {
          "$ref": "GoogleCloudDatacatalogV1Contacts",
          "description": "Contact people for the entry."
        }
      },
      "description": "Business Context of the entry.",
      "id": "GoogleCloudDatacatalogV1BusinessContext",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1ContactsPerson": {
      "id": "GoogleCloudDatacatalogV1ContactsPerson",
      "description": "A contact person for the entry.",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`."
        },
        "designation": {
          "description": "Designation of the person, for example, Data Steward.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1Schema": {
      "description": "Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.",
      "properties": {
        "columns": {
          "description": "The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1ColumnSchema"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudDatacatalogV1Schema",
      "type": "object"
    },
    "GoogleCloudDatacatalogV1BigQueryTableSpec": {
      "description": "Describes a BigQuery table.",
      "id": "GoogleCloudDatacatalogV1BigQueryTableSpec",
      "type": "object",
      "properties": {
        "tableSpec": {
          "$ref": "GoogleCloudDatacatalogV1TableSpec",
          "description": "Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`."
        },
        "tableSourceType": {
          "description": "Output only. The table source type.",
          "type": "string",
          "readOnly": true,
          "enumDescriptions": [
            "Default unknown type.",
            "Table view.",
            "BigQuery native table.",
            "BigQuery materialized view."
          ],
          "enum": [
            "TABLE_SOURCE_TYPE_UNSPECIFIED",
            "BIGQUERY_VIEW",
            "BIGQUERY_TABLE",
            "BIGQUERY_MATERIALIZED_VIEW"
          ]
        },
        "viewSpec": {
          "description": "Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.",
          "$ref": "GoogleCloudDatacatalogV1ViewSpec"
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "properties": {
        "permissions": {
          "type": "array",
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "GoogleCloudDatacatalogV1Tag": {
      "id": "GoogleCloudDatacatalogV1Tag",
      "properties": {
        "fields": {
          "description": "Required. Maps the ID of a tag field to its value and additional information about that field. Tag template defines valid field IDs. A tag must have at least 1 field and at most 500 fields.",
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleCloudDatacatalogV1TagField"
          }
        },
        "name": {
          "type": "string",
          "description": "The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name."
        },
        "column": {
          "type": "string",
          "description": "Resources like entry can have schemas associated with them. This scope allows you to attach tags to an individual column based on that schema. To attach a tag to a nested column, separate column names with a dot (`.`). Example: `column.nested_column`."
        },
        "templateDisplayName": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The display name of the tag template."
        },
        "template": {
          "type": "string",
          "description": "Required. The resource name of the tag template this tag uses. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE_ID}` This field cannot be modified after creation."
        }
      },
      "description": "Tags contain custom metadata and are attached to Data Catalog resources. Tags conform with the specification of their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags.",
      "type": "object"
    },
    "GetIamPolicyRequest": {
      "properties": {
        "options": {
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.",
          "$ref": "GetPolicyOptions"
        }
      },
      "type": "object",
      "id": "GetIamPolicyRequest",
      "description": "Request message for `GetIamPolicy` method."
    },
    "GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec": {
      "properties": {
        "sqlQuery": {
          "description": "SQL query used to generate this view.",
          "type": "string"
        },
        "baseTable": {
          "type": "string",
          "description": "Name of a singular table this view reflects one to one."
        },
        "viewType": {
          "description": "Type of this view.",
          "type": "string",
          "enumDescriptions": [
            "Default unknown view type.",
            "Standard view.",
            "Materialized view."
          ],
          "enum": [
            "VIEW_TYPE_UNSPECIFIED",
            "STANDARD_VIEW",
            "MATERIALIZED_VIEW"
          ]
        }
      },
      "description": "Specification that applies to database view.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec"
    },
    "GoogleCloudDatacatalogV1RenameTagTemplateFieldRequest": {
      "properties": {
        "newTagTemplateFieldId": {
          "description": "Required. The new ID of this tag template field. For example, `my_new_field`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Request message for RenameTagTemplateField.",
      "id": "GoogleCloudDatacatalogV1RenameTagTemplateFieldRequest"
    },
    "GoogleCloudDatacatalogV1DumpItem": {
      "properties": {
        "taggedEntry": {
          "$ref": "GoogleCloudDatacatalogV1TaggedEntry",
          "description": "Entry and its tags."
        }
      },
      "description": "Wrapper for any item that can be contained in the dump.",
      "type": "object",
      "id": "GoogleCloudDatacatalogV1DumpItem"
    },
    "GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema": {
      "id": "GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema",
      "properties": {},
      "type": "object",
      "description": "Marks a Parquet-encoded data source."
    },
    "GoogleCloudDatacatalogV1RoutineSpec": {
      "id": "GoogleCloudDatacatalogV1RoutineSpec",
      "type": "object",
      "properties": {
        "definitionBody": {
          "type": "string",
          "description": "The body of the routine."
        },
        "returnType": {
          "description": "Return type of the argument. The exact value depends on the source system and the language.",
          "type": "string"
        },
        "bigqueryRoutineSpec": {
          "$ref": "GoogleCloudDatacatalogV1BigQueryRoutineSpec",
          "description": "Fields specific for BigQuery routines."
        },
        "language": {
          "type": "string",
          "description": "The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`"
        },
        "routineArguments": {
          "description": "Arguments of the routine.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1RoutineSpecArgument"
          }
        },
        "routineType": {
          "type": "string",
          "enum": [
            "ROUTINE_TYPE_UNSPECIFIED",
            "SCALAR_FUNCTION",
            "PROCEDURE"
          ],
          "description": "The type of the routine.",
          "enumDescriptions": [
            "Unspecified type.",
            "Non-builtin permanent scalar function.",
            "Stored procedure."
          ]
        }
      },
      "description": "Specification that applies to a routine. Valid only for entries with the `ROUTINE` type."
    }
  },
  "rootUrl": "https://datacatalog.googleapis.com/",
  "ownerDomain": "google.com",
  "canonicalName": "Data Catalog",
  "protocol": "rest",
  "id": "datacatalog:v1",
  "description": "A fully managed and highly scalable data discovery and metadata management service. ",
  "discoveryVersion": "v1",
  "mtlsRootUrl": "https://datacatalog.mtls.googleapis.com/",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "servicePath": "",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "taxonomies": {
              "methods": {
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/taxonomies",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Resource name of the project to list the taxonomies of.",
                      "type": "string",
                      "location": "path"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The maximum number of items to return. Must be a value between 1 and 1000 inclusively. If not set, defaults to 50.",
                      "location": "query",
                      "type": "integer"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "Supported field for filter is 'service' and value is 'dataplex'. Eg: service=dataplex."
                    },
                    "pageToken": {
                      "description": "The pagination token of the next results page. If not set, the first page is returned. The token is returned in the response to a previous list request.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1ListTaxonomiesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists all taxonomies in a project in a particular location that you have a permission to view.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies",
                  "id": "datacatalog.projects.locations.taxonomies.list"
                },
                "create": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1Taxonomy"
                  },
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Resource name of the project that the taxonomy will belong to."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags.",
                  "path": "v1/{+parent}/taxonomies",
                  "parameterOrder": [
                    "parent"
                  ],
                  "id": "datacatalog.projects.locations.taxonomies.create",
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1Taxonomy"
                  }
                },
                "setIamPolicy": {
                  "description": "Sets the IAM policy for a policy tag or a taxonomy.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:setIamPolicy",
                  "path": "v1/{+resource}:setIamPolicy",
                  "parameters": {
                    "resource": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path"
                    }
                  },
                  "httpMethod": "POST",
                  "id": "datacatalog.projects.locations.taxonomies.setIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "Policy"
                  },
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1Taxonomy"
                  },
                  "id": "datacatalog.projects.locations.taxonomies.get",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "description": "Gets a taxonomy.",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the taxonomy to get.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  }
                },
                "patch": {
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "PATCH",
                  "description": "Updates a taxonomy, including its display name, description, and activated policy types.",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1Taxonomy"
                  },
                  "id": "datacatalog.projects.locations.taxonomies.patch",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1Taxonomy"
                  },
                  "parameters": {
                    "updateMask": {
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string",
                      "description": "Specifies fields to update. If not set, defaults to all fields you can update. For more information, see [FieldMask] (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask)."
                    },
                    "name": {
                      "location": "path",
                      "description": "Output only. Resource name of this taxonomy in URL format. Note: Policy tag manager generates unique taxonomy IDs.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "export": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1ExportTaxonomiesResponse"
                  },
                  "httpMethod": "GET",
                  "description": "Exports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates `SerializedTaxonomy` protocol buffers with nested policy tags that can be used as input for `ImportTaxonomies` calls.",
                  "id": "datacatalog.projects.locations.taxonomies.export",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/taxonomies:export",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies:export",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "serializedTaxonomies": {
                      "description": "Serialized export taxonomies that contain all the policy tags as nested protocol buffers.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "parent": {
                      "description": "Required. Resource name of the project that the exported taxonomies belong to.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "required": true
                    },
                    "taxonomies": {
                      "type": "string",
                      "location": "query",
                      "repeated": true,
                      "description": "Required. Resource names of the taxonomies to export."
                    }
                  }
                },
                "replace": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1Taxonomy"
                  },
                  "description": "Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don't have resource names. They are considered new. - Updates policy tags with valid resources names accordingly.",
                  "path": "v1/{+name}:replace",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1ReplaceTaxonomyRequest"
                  },
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "Required. Resource name of the taxonomy to update.",
                      "required": true
                    }
                  },
                  "id": "datacatalog.projects.locations.taxonomies.replace",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:replace",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "import": {
                  "id": "datacatalog.projects.locations.taxonomies.import",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies:import",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1ImportTaxonomiesResponse"
                  },
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1ImportTaxonomiesRequest"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. Resource name of project that the imported taxonomies will belong to.",
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/taxonomies:import",
                  "description": "Creates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures.",
                  "httpMethod": "POST"
                },
                "delete": {
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the taxonomy to delete. Note: All policy tags in this taxonomy are also deleted.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "id": "datacatalog.projects.locations.taxonomies.delete",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a taxonomy, including all policy tags in this taxonomy, their associated policies, and the policy tags references from BigQuery columns."
                },
                "testIamPermissions": {
                  "path": "v1/{+resource}:testIamPermissions",
                  "description": "Returns your permissions on a specified policy tag or taxonomy.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:testIamPermissions",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "httpMethod": "POST",
                  "id": "datacatalog.projects.locations.taxonomies.testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  }
                },
                "getIamPolicy": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameters": {
                    "resource": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "datacatalog.projects.locations.taxonomies.getIamPolicy",
                  "description": "Gets the IAM policy for a policy tag or a taxonomy.",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "path": "v1/{+resource}:getIamPolicy"
                }
              },
              "resources": {
                "policyTags": {
                  "methods": {
                    "get": {
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.get",
                      "description": "Gets a policy tag.",
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "required": true,
                          "description": "Required. Resource name of the policy tag.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$"
                        }
                      },
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1PolicyTag"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "testIamPermissions": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:testIamPermissions",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.testIamPermissions",
                      "description": "Returns your permissions on a specified policy tag or taxonomy.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$"
                        }
                      },
                      "path": "v1/{+resource}:testIamPermissions",
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      }
                    },
                    "patch": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}",
                      "description": "Updates a policy tag, including its display name, description, and parent policy tag.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1PolicyTag"
                      },
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Output only. Resource name of this policy tag in the URL format. The policy tag manager generates unique taxonomy IDs and policy tag IDs."
                        },
                        "updateMask": {
                          "location": "query",
                          "type": "string",
                          "format": "google-fieldmask",
                          "description": "Specifies the fields to update. You can update only display name, description, and parent policy tag. If not set, defaults to all updatable fields. For more information, see [FieldMask] (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask)."
                        }
                      },
                      "httpMethod": "PATCH",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1PolicyTag"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.patch",
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "setIamPolicy": {
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "httpMethod": "POST",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.setIamPolicy",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+resource}:setIamPolicy",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:setIamPolicy",
                      "description": "Sets the IAM policy for a policy tag or a taxonomy.",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "location": "path",
                          "type": "string"
                        }
                      }
                    },
                    "delete": {
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.delete",
                      "parameters": {
                        "name": {
                          "description": "Required. Resource name of the policy tag to delete. Note: All of its descendant policy tags are also deleted.",
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}",
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants",
                      "httpMethod": "DELETE",
                      "response": {
                        "$ref": "Empty"
                      }
                    },
                    "getIamPolicy": {
                      "httpMethod": "POST",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.getIamPolicy",
                      "parameters": {
                        "resource": {
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                        }
                      },
                      "request": {
                        "$ref": "GetIamPolicyRequest"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "path": "v1/{+resource}:getIamPolicy",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:getIamPolicy",
                      "response": {
                        "$ref": "Policy"
                      },
                      "description": "Gets the IAM policy for a policy tag or a taxonomy.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "create": {
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Required. Resource name of the taxonomy that the policy tag will belong to."
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags",
                      "path": "v1/{+parent}/policyTags",
                      "httpMethod": "POST",
                      "description": "Creates a policy tag in a taxonomy.",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1PolicyTag"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1PolicyTag"
                      },
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.create",
                      "parameterOrder": [
                        "parent"
                      ]
                    },
                    "list": {
                      "httpMethod": "GET",
                      "path": "v1/{+parent}/policyTags",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.list",
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "location": "query",
                          "description": "The maximum number of items to return. Must be a value between 1 and 1000 inclusively. If not set, defaults to 50.",
                          "type": "integer"
                        },
                        "parent": {
                          "description": "Required. Resource name of the taxonomy to list the policy tags of.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                          "required": true,
                          "location": "path",
                          "type": "string"
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "The pagination token of the next results page. If not set, returns the first page. The token is returned in the response to a previous list request.",
                          "location": "query"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists all policy tags in a taxonomy.",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1ListPolicyTagsResponse"
                      }
                    }
                  }
                }
              }
            },
            "tagTemplates": {
              "methods": {
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "force": {
                      "type": "boolean",
                      "description": "Required. If true, deletes all tags that use this template. Currently, `true` is the only supported value.",
                      "location": "query"
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "description": "Required. The name of the tag template to delete.",
                      "type": "string",
                      "required": true
                    }
                  },
                  "id": "datacatalog.projects.locations.tagTemplates.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "Deletes a tag template and all tags that use it. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)."
                },
                "testIamPermissions": {
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "description": "Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "datacatalog.projects.locations.tagTemplates.testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1/{+resource}:testIamPermissions",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:testIamPermissions"
                },
                "create": {
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1TagTemplate"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1TagTemplate"
                  },
                  "description": "Creates a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                  "parameters": {
                    "tagTemplateId": {
                      "location": "query",
                      "description": "Required. The ID of the tag template to create. The ID must contain only lowercase letters (a-z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum size is 64 bytes when encoded in UTF-8.",
                      "type": "string"
                    },
                    "parent": {
                      "location": "path",
                      "description": "Required. The name of the project and the template location [region](https://cloud.google.com/data-catalog/docs/concepts/regions).",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "id": "datacatalog.projects.locations.tagTemplates.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/tagTemplates"
                },
                "setIamPolicy": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:setIamPolicy",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+resource}:setIamPolicy",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameters": {
                    "resource": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "id": "datacatalog.projects.locations.tagTemplates.setIamPolicy",
                  "description": "Sets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can't be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups."
                },
                "get": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1TagTemplate"
                  },
                  "description": "Gets a tag template.",
                  "id": "datacatalog.projects.locations.tagTemplates.get",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "description": "Required. The name of the tag template to get."
                    }
                  }
                },
                "patch": {
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1TagTemplate"
                  },
                  "description": "Updates a tag template. You can't update template fields with this method. These fields are separate resources with their own create, update, and delete methods. You must enable the Data Catalog API in the project identified by the `tag_template.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}",
                  "id": "datacatalog.projects.locations.tagTemplates.patch",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1TagTemplate"
                  },
                  "path": "v1/{+name}",
                  "parameters": {
                    "updateMask": {
                      "type": "string",
                      "location": "query",
                      "format": "google-fieldmask",
                      "description": "Names of fields whose values to overwrite on a tag template. Currently, only `display_name` and `is_publicly_readable` can be overwritten. If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied. Note: Updating the `is_publicly_readable` field may require up to 12 hours to take effect in search results."
                    },
                    "name": {
                      "description": "The resource name of the tag template in URL format. Note: The tag template itself and its child resources might not be stored in the location specified in its name.",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "location": "path"
                    }
                  },
                  "httpMethod": "PATCH"
                },
                "getIamPolicy": {
                  "httpMethod": "POST",
                  "path": "v1/{+resource}:getIamPolicy",
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "description": "Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:getIamPolicy",
                  "id": "datacatalog.projects.locations.tagTemplates.getIamPolicy",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              },
              "resources": {
                "fields": {
                  "resources": {
                    "enumValues": {
                      "methods": {
                        "rename": {
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "name": {
                              "required": true,
                              "description": "Required. The name of the enum field value.",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+/fields/[^/]+/enumValues/[^/]+$",
                              "location": "path"
                            }
                          },
                          "response": {
                            "$ref": "GoogleCloudDatacatalogV1TagTemplateField"
                          },
                          "httpMethod": "POST",
                          "id": "datacatalog.projects.locations.tagTemplates.fields.enumValues.rename",
                          "description": "Renames an enum value in a tag template. Within a single enum field, enum values must be unique.",
                          "request": {
                            "$ref": "GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest"
                          },
                          "path": "v1/{+name}:rename",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}/enumValues/{enumValuesId}:rename",
                          "parameterOrder": [
                            "name"
                          ]
                        }
                      }
                    }
                  },
                  "methods": {
                    "delete": {
                      "id": "datacatalog.projects.locations.tagTemplates.fields.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}",
                      "path": "v1/{+name}",
                      "parameters": {
                        "force": {
                          "location": "query",
                          "type": "boolean",
                          "description": "Required. If true, deletes this field from any tags that use it. Currently, `true` is the only supported value."
                        },
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+/fields/[^/]+$",
                          "type": "string",
                          "description": "Required. The name of the tag template field to delete.",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "httpMethod": "DELETE",
                      "description": "Deletes a field in a tag template and all uses of this field from the tags based on this template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Empty"
                      }
                    },
                    "rename": {
                      "description": "Renames a field in a tag template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "datacatalog.projects.locations.tagTemplates.fields.rename",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "location": "path",
                          "description": "Required. The name of the tag template field.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+/fields/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}:rename",
                      "path": "v1/{+name}:rename",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1RenameTagTemplateFieldRequest"
                      },
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1TagTemplateField"
                      }
                    },
                    "create": {
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1TagTemplateField"
                      },
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1TagTemplateField"
                      },
                      "path": "v1/{+parent}/fields",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields",
                      "id": "datacatalog.projects.locations.tagTemplates.fields.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "tagTemplateFieldId": {
                          "type": "string",
                          "description": "Required. The ID of the tag template field to create. Note: Adding a required field to an existing template is *not* allowed. Field IDs can contain letters (both uppercase and lowercase), numbers (0-9), underscores (_) and dashes (-). Field IDs must be at least 1 character long and at most 128 characters long. Field IDs must also be unique within their template.",
                          "location": "query"
                        },
                        "parent": {
                          "location": "path",
                          "description": "Required. The name of the project and the template location [region](https://cloud.google.com/data-catalog/docs/concepts/regions).",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                          "required": true
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "description": "Creates a field in a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)."
                    },
                    "patch": {
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the tag template field.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+/fields/[^/]+$",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        },
                        "updateMask": {
                          "location": "query",
                          "format": "google-fieldmask",
                          "description": "Optional. Names of fields whose values to overwrite on an individual field of a tag template. The following fields are modifiable: * `display_name` * `type.enum_type` * `is_required` If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied with one exception: when updating an enum type, the provided values are merged with the existing values. Therefore, enum values can only be added, existing enum values cannot be deleted or renamed. Additionally, updating a template field from optional to required is *not* allowed.",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1TagTemplateField"
                      },
                      "id": "datacatalog.projects.locations.tagTemplates.fields.patch",
                      "path": "v1/{+name}",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}",
                      "httpMethod": "PATCH",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates a field in a tag template. You can't update the field type with this method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1TagTemplateField"
                      }
                    }
                  }
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "datacatalog.projects.locations.operations.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "The name of the operation resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  }
                },
                "cancel": {
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "path": "v1/{+name}:cancel",
                  "id": "datacatalog.projects.locations.operations.cancel",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string",
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path"
                    }
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "delete": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "datacatalog.projects.locations.operations.delete",
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "description": "The name of the operation resource to be deleted.",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ]
                },
                "list": {
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
                  "id": "datacatalog.projects.locations.operations.list",
                  "path": "v1/{+name}/operations",
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
                  "httpMethod": "GET",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "The name of the operation's parent resource.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "The standard list filter."
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The standard list page token.",
                      "location": "query"
                    }
                  }
                }
              }
            },
            "entryGroups": {
              "resources": {
                "tags": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "pageToken": {
                          "description": "Pagination token that specifies the next page to return. If empty, the first page is returned.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The maximum number of tags to return. Default is 10. Maximum limit is 1000.",
                          "type": "integer",
                          "location": "query",
                          "format": "int32"
                        },
                        "parent": {
                          "type": "string",
                          "description": "Required. The name of the Data Catalog resource to list the tags of. The resource can be an Entry or an EntryGroup (without `/entries/{entries}` at the end).",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "required": true
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1ListTagsResponse"
                      },
                      "id": "datacatalog.projects.locations.entryGroups.tags.list",
                      "path": "v1/{+parent}/tags",
                      "httpMethod": "GET",
                      "description": "Lists tags assigned to an Entry. The columns in the response are lowercased.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "create": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "path": "v1/{+parent}/tags",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "description": "Required. The name of the resource to attach this tag to. Tags can be attached to entries or entry groups. An entry can have up to 1000 attached tags. Note: The tag and its child resources might not be stored in the location specified in its name.",
                          "required": true,
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "id": "datacatalog.projects.locations.entryGroups.tags.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1Tag"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1Tag"
                      }
                    },
                    "patch": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags/{tagsId}",
                      "id": "datacatalog.projects.locations.entryGroups.tags.patch",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1Tag"
                      },
                      "parameters": {
                        "updateMask": {
                          "description": "Names of fields whose values to overwrite on a tag. Currently, a tag has the only modifiable field with the name `fields`. In general, if this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied.",
                          "location": "query",
                          "type": "string",
                          "format": "google-fieldmask"
                        },
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/tags/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "description": "The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name.",
                          "required": true
                        }
                      },
                      "httpMethod": "PATCH",
                      "description": "Updates an existing tag.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1Tag"
                      },
                      "path": "v1/{+name}"
                    },
                    "delete": {
                      "httpMethod": "DELETE",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags/{tagsId}",
                      "description": "Deletes a tag.",
                      "id": "datacatalog.projects.locations.entryGroups.tags.delete",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+name}",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "description": "Required. The name of the tag to delete.",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/tags/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ]
                    }
                  }
                },
                "entries": {
                  "resources": {
                    "tags": {
                      "methods": {
                        "list": {
                          "path": "v1/{+parent}/tags",
                          "parameters": {
                            "pageSize": {
                              "type": "integer",
                              "description": "The maximum number of tags to return. Default is 10. Maximum limit is 1000.",
                              "format": "int32",
                              "location": "query"
                            },
                            "parent": {
                              "description": "Required. The name of the Data Catalog resource to list the tags of. The resource can be an Entry or an EntryGroup (without `/entries/{entries}` at the end).",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "pageToken": {
                              "description": "Pagination token that specifies the next page to return. If empty, the first page is returned.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "description": "Lists tags assigned to an Entry. The columns in the response are lowercased.",
                          "httpMethod": "GET",
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "GoogleCloudDatacatalogV1ListTagsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.list",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags"
                        },
                        "delete": {
                          "path": "v1/{+name}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags/{tagsId}",
                          "description": "Deletes a tag.",
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.delete",
                          "httpMethod": "DELETE",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+/tags/[^/]+$",
                              "description": "Required. The name of the tag to delete.",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "patch": {
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.patch",
                          "request": {
                            "$ref": "GoogleCloudDatacatalogV1Tag"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "updateMask": {
                              "format": "google-fieldmask",
                              "type": "string",
                              "description": "Names of fields whose values to overwrite on a tag. Currently, a tag has the only modifiable field with the name `fields`. In general, if this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied.",
                              "location": "query"
                            },
                            "name": {
                              "location": "path",
                              "description": "The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+/tags/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "response": {
                            "$ref": "GoogleCloudDatacatalogV1Tag"
                          },
                          "path": "v1/{+name}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags/{tagsId}",
                          "httpMethod": "PATCH",
                          "description": "Updates an existing tag."
                        },
                        "reconcile": {
                          "path": "v1/{+parent}/tags:reconcile",
                          "httpMethod": "POST",
                          "response": {
                            "$ref": "Operation"
                          },
                          "description": "`ReconcileTags` creates or updates a list of tags on the entry. If the ReconcileTagsRequest.force_delete_missing parameter is set, the operation deletes tags not included in the input tag list. `ReconcileTags` returns a long-running operation resource that can be queried with Operations.GetOperation to return ReconcileTagsMetadata and a ReconcileTagsResponse message.",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "parent"
                          ],
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.reconcile",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of Entry to be tagged.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                              "required": true,
                              "type": "string",
                              "location": "path"
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags:reconcile",
                          "request": {
                            "$ref": "GoogleCloudDatacatalogV1ReconcileTagsRequest"
                          }
                        },
                        "create": {
                          "request": {
                            "$ref": "GoogleCloudDatacatalogV1Tag"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags",
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.create",
                          "path": "v1/{+parent}/tags",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "parent": {
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                              "description": "Required. The name of the resource to attach this tag to. Tags can be attached to entries or entry groups. An entry can have up to 1000 attached tags. Note: The tag and its child resources might not be stored in the location specified in its name.",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "description": "Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.",
                          "response": {
                            "$ref": "GoogleCloudDatacatalogV1Tag"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "POST"
                        }
                      }
                    }
                  },
                  "methods": {
                    "patch": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates an existing entry. You must enable the Data Catalog API in the project identified by the `entry.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                      "httpMethod": "PATCH",
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}",
                      "id": "datacatalog.projects.locations.entryGroups.entries.patch",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1Entry"
                      },
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1Entry"
                      },
                      "parameters": {
                        "updateMask": {
                          "location": "query",
                          "type": "string",
                          "description": "Names of fields whose values to overwrite on an entry. If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied. You can modify only the fields listed below. For entries with type `DATA_STREAM`: * `schema` For entries with type `FILESET`: * `schema` * `display_name` * `description` * `gcs_fileset_spec` * `gcs_fileset_spec.file_patterns` For entries with `user_specified_type`: * `schema` * `display_name` * `description` * `user_specified_type` * `user_specified_system` * `linked_resource` * `source_system_timestamps`",
                          "format": "google-fieldmask"
                        },
                        "name": {
                          "required": true,
                          "description": "Output only. The resource name of an entry in URL format. Note: The entry itself and its child resources might not be stored in the location specified in its name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "location": "path",
                          "type": "string"
                        }
                      }
                    },
                    "star": {
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1StarEntryResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:star",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1StarEntryRequest"
                      },
                      "path": "v1/{+name}:star",
                      "description": "Marks an Entry as starred by the current user. Starring information is private to each user.",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the entry to mark as starred.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "type": "string",
                          "required": true
                        }
                      },
                      "id": "datacatalog.projects.locations.entryGroups.entries.star",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "testIamPermissions": {
                      "parameters": {
                        "resource": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "required": true,
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                          "type": "string"
                        }
                      },
                      "description": "Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.",
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "resource"
                      ],
                      "id": "datacatalog.projects.locations.entryGroups.entries.testIamPermissions",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+resource}:testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:testIamPermissions",
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      }
                    },
                    "delete": {
                      "id": "datacatalog.projects.locations.entryGroups.entries.delete",
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "description": "Required. The name of the entry to delete."
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "httpMethod": "DELETE",
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}",
                      "description": "Deletes an existing entry. You can delete only the entries created by the CreateEntry method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "modifyEntryContacts": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:modifyEntryContacts",
                      "httpMethod": "POST",
                      "id": "datacatalog.projects.locations.entryGroups.entries.modifyEntryContacts",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1ModifyEntryContactsRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1Contacts"
                      },
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "type": "string",
                          "description": "Required. The full resource name of the entry.",
                          "location": "path"
                        }
                      },
                      "description": "Modifies contacts, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateContacts` IAM permission on the corresponding project.",
                      "path": "v1/{+name}:modifyEntryContacts",
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "list": {
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "Pagination token that specifies the next page to return. If empty, the first page is returned."
                        },
                        "parent": {
                          "description": "Required. The name of the entry group that contains the entries to list. Can be provided in URL format.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "required": true
                        },
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "format": "int32",
                          "description": "The maximum number of items to return. Default is 10. Maximum limit is 1000. Throws an invalid argument if `page_size` is more than 1000."
                        },
                        "readMask": {
                          "format": "google-fieldmask",
                          "location": "query",
                          "type": "string",
                          "description": "The fields to return for each entry. If empty or omitted, all fields are returned. For example, to return a list of entries with only the `name` field, set `read_mask` to only one path with the `name` value."
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries",
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog.",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1ListEntriesResponse"
                      },
                      "id": "datacatalog.projects.locations.entryGroups.entries.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+parent}/entries"
                    },
                    "modifyEntryOverview": {
                      "description": "Modifies entry overview, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateOverview` IAM permission on the corresponding project.",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "description": "Required. The full resource name of the entry.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$"
                        }
                      },
                      "path": "v1/{+name}:modifyEntryOverview",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:modifyEntryOverview",
                      "id": "datacatalog.projects.locations.entryGroups.entries.modifyEntryOverview",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1EntryOverview"
                      },
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1ModifyEntryOverviewRequest"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST"
                    },
                    "get": {
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1Entry"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
                      "path": "v1/{+name}",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "datacatalog.projects.locations.entryGroups.entries.get",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "location": "path",
                          "description": "Required. The name of the entry to get.",
                          "required": true
                        }
                      },
                      "httpMethod": "GET",
                      "description": "Gets an entry.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "unstar": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:unstar",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "location": "path",
                          "required": true,
                          "description": "Required. The name of the entry to mark as **not** starred.",
                          "type": "string"
                        }
                      },
                      "id": "datacatalog.projects.locations.entryGroups.entries.unstar",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1UnstarEntryResponse"
                      },
                      "path": "v1/{+name}:unstar",
                      "description": "Marks an Entry as NOT starred by the current user. Starring information is private to each user.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1UnstarEntryRequest"
                      },
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "getIamPolicy": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "GetIamPolicyRequest"
                      },
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$"
                        }
                      },
                      "id": "datacatalog.projects.locations.entryGroups.entries.getIamPolicy",
                      "description": "Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
                      "parameterOrder": [
                        "resource"
                      ],
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "Policy"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:getIamPolicy",
                      "path": "v1/{+resource}:getIamPolicy"
                    },
                    "create": {
                      "description": "Creates an entry. You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM', or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries",
                      "parameters": {
                        "parent": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "description": "Required. The name of the entry group this entry belongs to. Note: The entry itself and its child resources might not be stored in the location specified in its name.",
                          "location": "path"
                        },
                        "entryId": {
                          "type": "string",
                          "location": "query",
                          "description": "Required. The ID of the entry to create. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores (_). The maximum size is 64 bytes when encoded in UTF-8."
                        }
                      },
                      "id": "datacatalog.projects.locations.entryGroups.entries.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1/{+parent}/entries",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1Entry"
                      },
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1Entry"
                      }
                    },
                    "import": {
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "description": "Required. Target entry group for ingested entries.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "type": "string",
                          "required": true
                        }
                      },
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1ImportEntriesRequest"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries:import",
                      "response": {
                        "$ref": "Operation"
                      },
                      "path": "v1/{+parent}/entries:import",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "datacatalog.projects.locations.entryGroups.entries.import",
                      "httpMethod": "POST",
                      "description": "Imports entries from a source, such as data previously dumped into a Cloud Storage bucket, into Data Catalog. Import of entries is a sync operation that reconciles the state of the third-party system with the Data Catalog. `ImportEntries` accepts source data snapshots of a third-party system. Snapshot should be delivered as a .wire or base65-encoded .txt file containing a sequence of Protocol Buffer messages of DumpItem type. `ImportEntries` returns a long-running operation resource that can be queried with Operations.GetOperation to return ImportEntriesMetadata and an ImportEntriesResponse message.",
                      "parameterOrder": [
                        "parent"
                      ]
                    }
                  }
                }
              },
              "methods": {
                "getIamPolicy": {
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "datacatalog.projects.locations.entryGroups.getIamPolicy",
                  "description": "Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
                  "parameterOrder": [
                    "resource"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:getIamPolicy",
                  "path": "v1/{+resource}:getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$"
                    }
                  },
                  "httpMethod": "POST"
                },
                "patch": {
                  "httpMethod": "PATCH",
                  "parameters": {
                    "updateMask": {
                      "description": "Names of fields whose values to overwrite on an entry group. If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "name": {
                      "description": "The resource name of the entry group in URL format. Note: The entry group itself and its child resources might not be stored in the location specified in its name.",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "location": "path"
                    }
                  },
                  "description": "Updates an entry group. You must enable the Data Catalog API in the project identified by the `entry_group.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                  "path": "v1/{+name}",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1EntryGroup"
                  },
                  "id": "datacatalog.projects.locations.entryGroups.patch",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1EntryGroup"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}"
                },
                "delete": {
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
                  "description": "Deletes an entry group. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "required": true,
                      "description": "Required. The name of the entry group to delete.",
                      "location": "path"
                    },
                    "force": {
                      "description": "Optional. If true, deletes all entries in the entry group.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "id": "datacatalog.projects.locations.entryGroups.delete"
                },
                "testIamPermissions": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "resource"
                  ],
                  "path": "v1/{+resource}:testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:testIamPermissions",
                  "id": "datacatalog.projects.locations.entryGroups.testIamPermissions",
                  "description": "Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method."
                },
                "setIamPolicy": {
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "id": "datacatalog.projects.locations.entryGroups.setIamPolicy",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "description": "Sets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can't be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.",
                  "path": "v1/{+resource}:setIamPolicy"
                },
                "get": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1EntryGroup"
                  },
                  "id": "datacatalog.projects.locations.entryGroups.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "description": "Required. The name of the entry group to get.",
                      "type": "string"
                    },
                    "readMask": {
                      "format": "google-fieldmask",
                      "description": "The fields to return. If empty or omitted, all fields are returned.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "path": "v1/{+name}",
                  "description": "Gets an entry group.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET"
                },
                "list": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+parent}/entryGroups",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Lists entry groups.",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1ListEntryGroupsResponse"
                  },
                  "id": "datacatalog.projects.locations.entryGroups.list",
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "description": "Optional. Pagination token that specifies the next page to return. If empty, returns the first page.",
                      "type": "string"
                    },
                    "parent": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. The name of the location that contains the entry groups to list. Can be provided as a URL."
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Optional. The maximum number of items to return. Default is 10. Maximum limit is 1000. Throws an invalid argument if `page_size` is greater than 1000.",
                      "format": "int32"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups"
                },
                "create": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Creates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the `@` symbol for the following resources: * BigQuery entries (`@bigquery`) * Pub/Sub topics (`@pubsub`) * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can't contain the `@` symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "datacatalog.projects.locations.entryGroups.create",
                  "path": "v1/{+parent}/entryGroups",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/entryGroups",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1EntryGroup"
                  },
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1EntryGroup"
                  },
                  "httpMethod": "POST",
                  "parameters": {
                    "entryGroupId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. The ID of the entry group to create. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and must start with a letter or underscore. The maximum size is 64 bytes when encoded in UTF-8."
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "description": "Required. The names of the project and location that the new entry group belongs to. Note: The entry group itself and its child resources might not be stored in the location specified in its name.",
                      "location": "path",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "entries": {
      "methods": {
        "lookup": {
          "response": {
            "$ref": "GoogleCloudDatacatalogV1Entry"
          },
          "parameterOrder": [],
          "description": "Gets an entry by its target resource name. The resource name comes from the source Google Cloud Platform service.",
          "id": "datacatalog.entries.lookup",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "location": {
              "location": "query",
              "type": "string",
              "description": "Location where the lookup should be performed. Required to lookup entry that is not a part of `DPMS` or `DATAPLEX` `integrated_system` using its `fully_qualified_name`. Ignored in other cases."
            },
            "sqlResource": {
              "type": "string",
              "description": "The SQL name of the entry. SQL names are case-sensitive. Examples: * `pubsub.topic.{PROJECT_ID}.{TOPIC_ID}` * `pubsub.topic.{PROJECT_ID}.`\\``{TOPIC.ID.SEPARATED.WITH.DOTS}`\\` * `bigquery.table.{PROJECT_ID}.{DATASET_ID}.{TABLE_ID}` * `bigquery.dataset.{PROJECT_ID}.{DATASET_ID}` * `datacatalog.entry.{PROJECT_ID}.{LOCATION_ID}.{ENTRY_GROUP_ID}.{ENTRY_ID}` Identifiers (`*_ID`) should comply with the [Lexical structure in Standard SQL] (https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical).",
              "location": "query"
            },
            "fullyQualifiedName": {
              "location": "query",
              "type": "string",
              "description": "[Fully Qualified Name (FQN)](https://cloud.google.com//data-catalog/docs/fully-qualified-names) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:{PROJECT_ID}.{LOCATION_ID}.{INSTANCE_ID}.{DATABASE_ID}.{TABLE_ID}`"
            },
            "linkedResource": {
              "description": "The full name of the Google Cloud Platform resource the Data Catalog entry represents. For more information, see [Full Resource Name] (https://cloud.google.com/apis/design/resource_names#full_resource_name). Full names are case-sensitive. For example: * `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}` * `//pubsub.googleapis.com/projects/{PROJECT_ID}/topics/{TOPIC_ID}`",
              "location": "query",
              "type": "string"
            },
            "project": {
              "description": "Project where the lookup should be performed. Required to lookup entry that is not a part of `DPMS` or `DATAPLEX` `integrated_system` using its `fully_qualified_name`. Ignored in other cases.",
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "v1/entries:lookup",
          "path": "v1/entries:lookup"
        }
      }
    },
    "catalog": {
      "methods": {
        "search": {
          "description": "Searches Data Catalog for multiple resources like entries and tags that match a query. This is a [Custom Method] (https://cloud.google.com/apis/design/custom_methods) that doesn't return all information on a resource, only its ID and high level fields. To get more information, you can subsequently call specific get methods. Note: Data Catalog search queries don't guarantee full recall. Results that match your query might not be returned, even in subsequent result pages. Additionally, returned (and not returned) results can vary if you repeat search queries. For more information, see [Data Catalog search syntax] (https://cloud.google.com/data-catalog/docs/how-to/search-reference).",
          "path": "v1/catalog:search",
          "parameterOrder": [],
          "id": "datacatalog.catalog.search",
          "request": {
            "$ref": "GoogleCloudDatacatalogV1SearchCatalogRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "flatPath": "v1/catalog:search",
          "parameters": {},
          "response": {
            "$ref": "GoogleCloudDatacatalogV1SearchCatalogResponse"
          }
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "parameters": {
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    }
  },
  "name": "datacatalog",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "revision": "20230512",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "ownerName": "Google",
  "version_module": true,
  "title": "Google Cloud Data Catalog API",
  "version": "v1"
}

{
  "version_module": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "canonicalName": "Connectors",
  "discoveryVersion": "v1",
  "batchPath": "batch",
  "title": "Connectors API",
  "protocol": "rest",
  "rootUrl": "https://connectors.googleapis.com/",
  "schemas": {
    "ExecuteActionRequest": {
      "id": "ExecuteActionRequest",
      "description": "Request message for ActionService.ExecuteAction",
      "type": "object",
      "properties": {
        "parameters": {
          "description": "Parameters for executing the action. The parameters can be key/value pairs or nested structs.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "ExecuteActionResponse": {
      "id": "ExecuteActionResponse",
      "description": "Response message for ActionService.ExecuteAction",
      "type": "object",
      "properties": {
        "results": {
          "description": "In the case of successful invocation of the specified action, the results Struct contains values based on the response of the action invoked. 1. If the action execution produces any entities as a result, they are returned as an array of Structs with the 'key' being the field name and the 'value' being the value of that field in each result row. { 'results': [{'key': 'value'}, ...] }",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object."
            }
          }
        }
      }
    },
    "ListActionsResponse": {
      "id": "ListActionsResponse",
      "description": "Response message for ActionService.ListActions",
      "type": "object",
      "properties": {
        "actions": {
          "description": "List of action metadata.",
          "type": "array",
          "items": {
            "$ref": "Action"
          }
        },
        "unsupportedActionNames": {
          "description": "List of actions which contain unsupported Datatypes. Check datatype.proto for more information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "description": "Next page token if more actions available.",
          "type": "string"
        }
      }
    },
    "Action": {
      "id": "Action",
      "description": "Action message contains metadata information about a single action present in the external system.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the action.",
          "type": "string"
        },
        "inputParameters": {
          "description": "List containing input parameter metadata.",
          "type": "array",
          "items": {
            "$ref": "InputParameter"
          }
        },
        "resultMetadata": {
          "description": "List containing the metadata of result fields.",
          "type": "array",
          "items": {
            "$ref": "ResultMetadata"
          }
        },
        "inputJsonSchema": {
          "description": "JsonSchema representation of this actions's input schema",
          "$ref": "JsonSchema"
        },
        "resultJsonSchema": {
          "description": "JsonSchema representation of this actions's result schema",
          "$ref": "JsonSchema"
        },
        "displayName": {
          "description": "Display Name of action to be shown on client side",
          "type": "string"
        },
        "description": {
          "description": "Brief Description of action",
          "type": "string"
        }
      }
    },
    "InputParameter": {
      "id": "InputParameter",
      "description": "Input Parameter message contains metadata about the parameters required for executing an Action.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Parameter.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the Parameter.",
          "type": "string"
        },
        "dataType": {
          "description": "The data type of the Parameter",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "nullable": {
          "description": "Specifies whether a null value is allowed.",
          "type": "boolean"
        },
        "defaultValue": {
          "description": "The following field specifies the default value of the Parameter provided by the external system if a value is not provided.",
          "type": "any"
        },
        "jsonSchema": {
          "description": "JsonSchema of the parameter, applicable only if parameter is of type `STRUCT`",
          "$ref": "JsonSchema"
        },
        "additionalDetails": {
          "description": "The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "JsonSchema": {
      "id": "JsonSchema",
      "description": "JsonSchema representation of schema metadata",
      "type": "object",
      "properties": {
        "description": {
          "description": "A description of this schema.",
          "type": "string"
        },
        "default": {
          "description": "The default value of the field or object described by this schema.",
          "type": "any"
        },
        "required": {
          "description": "Whether this property is required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "JSON Schema Validation: A Vocabulary for Structural Validation of JSON",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "items": {
          "description": "Schema that applies to array values, applicable only if this is of type `array`.",
          "$ref": "JsonSchema"
        },
        "properties": {
          "description": "The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property",
          "type": "object",
          "additionalProperties": {
            "$ref": "JsonSchema"
          }
        },
        "enum": {
          "description": "Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values",
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "jdbcType": {
          "description": "JDBC datatype of the field.",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "format": {
          "description": "Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format",
          "type": "string"
        },
        "additionalDetails": {
          "description": "Additional details apart from standard json schema fields, this gives flexibility to store metadata about the schema",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "ResultMetadata": {
      "id": "ResultMetadata",
      "description": "Result Metadata message contains metadata about the result returned after executing an Action.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the metadata field.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the metadata field.",
          "type": "string"
        },
        "dataType": {
          "description": "The data type of the metadata field",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "jsonSchema": {
          "description": "JsonSchema of the result, applicable only if parameter is of type `STRUCT`",
          "$ref": "JsonSchema"
        }
      }
    },
    "CheckStatusResponse": {
      "id": "CheckStatusResponse",
      "description": "The status of the connector.",
      "type": "object",
      "properties": {
        "state": {
          "description": "State of the connector.",
          "type": "string",
          "enumDescriptions": [
            "State unspecified.",
            "The connector is active and ready to process runtime requests. This can also mean that from the connector's perspective, the connector is not in an error state and should be able to process runtime requests successfully.",
            "The connector is in an error state and cannot process runtime requests. An example reason would be that the connection container has some network issues that prevent outbound requests from being sent.",
            "This is a more specific error state that the developers can opt to use when the connector is facing auth-related errors caused by auth configuration not present, invalid auth credentials, etc."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "ERROR",
            "AUTH_ERROR"
          ]
        },
        "description": {
          "description": "When the connector is not in ACTIVE state, the description must be populated to specify the reason why it's not in ACTIVE state.",
          "type": "string"
        }
      }
    },
    "CheckReadinessResponse": {
      "id": "CheckReadinessResponse",
      "description": "Response containing status of the connector for readiness prober.",
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "ExchangeAuthCodeRequest": {
      "id": "ExchangeAuthCodeRequest",
      "description": "ExchangeAuthCodeRequest currently includes no fields.",
      "type": "object",
      "properties": {}
    },
    "ExchangeAuthCodeResponse": {
      "id": "ExchangeAuthCodeResponse",
      "description": "ExchangeAuthCodeResponse includes the returned access token and its associated credentials.",
      "type": "object",
      "properties": {
        "accessCredentials": {
          "$ref": "AccessCredentials"
        }
      }
    },
    "AccessCredentials": {
      "id": "AccessCredentials",
      "description": "AccessCredentials includes the OAuth access token, and the other fields returned along with it.",
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "OAuth access token.",
          "type": "string"
        },
        "refreshToken": {
          "description": "OAuth refresh token.",
          "type": "string"
        },
        "expiresIn": {
          "description": "Duration till the access token expires.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "RefreshAccessTokenRequest": {
      "id": "RefreshAccessTokenRequest",
      "description": "RefreshAccessTokenRequest currently includes no fields.",
      "type": "object",
      "properties": {}
    },
    "RefreshAccessTokenResponse": {
      "id": "RefreshAccessTokenResponse",
      "description": "RefreshAccessTokenResponse includes the returned access token and its associated credentials.",
      "type": "object",
      "properties": {
        "accessCredentials": {
          "$ref": "AccessCredentials"
        }
      }
    },
    "EntityType": {
      "id": "EntityType",
      "description": "EntityType message contains metadata information about a single entity type present in the external system.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the entity type.",
          "type": "string"
        },
        "fields": {
          "description": "List containing metadata information about each field of the entity type.",
          "type": "array",
          "items": {
            "$ref": "Field"
          }
        },
        "jsonSchema": {
          "description": "JsonSchema representation of this entity's schema",
          "$ref": "JsonSchema"
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Operation unspecified.",
              "This operation means entity type supports LIST method.",
              "This operation means entity type supports GET method.",
              "This operation means entity type supports CREATE method.",
              "This operation means entity type supports UPDATE method.",
              "This operation means entity type supports DELETE method."
            ],
            "enum": [
              "OPERATION_UNSPECIFIED",
              "LIST",
              "GET",
              "CREATE",
              "UPDATE",
              "DELETE"
            ]
          }
        }
      }
    },
    "Field": {
      "id": "Field",
      "description": "Message contains EntityType's Field metadata.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Field.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the Field.",
          "type": "string"
        },
        "dataType": {
          "description": "The data type of the Field.",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "key": {
          "description": "The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity.",
          "type": "boolean"
        },
        "nullable": {
          "description": "Specifies whether a null value is allowed.",
          "type": "boolean"
        },
        "defaultValue": {
          "description": "The following field specifies the default value of the Field provided by the external system if a value is not provided.",
          "type": "any"
        },
        "additionalDetails": {
          "description": "The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "reference": {
          "description": "Reference captures the association between two different entity types. Value links to the reference of another entity type.",
          "$ref": "Reference"
        },
        "jsonSchema": {
          "description": "JsonSchema of the field, applicable only if field is of type `STRUCT`",
          "$ref": "JsonSchema"
        }
      }
    },
    "Reference": {
      "id": "Reference",
      "type": "object",
      "properties": {
        "type": {
          "description": "Name of reference entity type.",
          "type": "string"
        },
        "name": {
          "description": "Name of the reference field.",
          "type": "string"
        }
      }
    },
    "ListEntityTypesResponse": {
      "id": "ListEntityTypesResponse",
      "description": "Response message for EntityService.ListEntityTypes",
      "type": "object",
      "properties": {
        "types": {
          "description": "List of metadata related to all entity types.",
          "type": "array",
          "items": {
            "$ref": "EntityType"
          }
        },
        "nextPageToken": {
          "description": "Next page token if more entity types available.",
          "type": "string"
        },
        "unsupportedTypeNames": {
          "description": "List of entity type names which contain unsupported Datatypes. Check datatype.proto for more information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListEntitiesResponse": {
      "id": "ListEntitiesResponse",
      "description": "Response message for EntityService.ListEntities",
      "type": "object",
      "properties": {
        "entities": {
          "description": "List containing entity rows.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "nextPageToken": {
          "description": "Next page token if more records are available.",
          "type": "string"
        }
      }
    },
    "Entity": {
      "id": "Entity",
      "description": "'Entity row'/ 'Entity' refers to a single row of an entity type.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
          "readOnly": true,
          "type": "string"
        },
        "fields": {
          "description": "Fields of the entity. The key is name of the field and the value contains the applicable `google.protobuf.Value` entry for this field.",
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "UpdateEntitiesWithConditionsResponse": {
      "id": "UpdateEntitiesWithConditionsResponse",
      "description": "Response message for EntityService.UpdateEntitiesWithConditions",
      "type": "object",
      "properties": {
        "response": {
          "description": "Response returned by the external system.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {}
    },
    "ExecuteSqlQueryRequest": {
      "id": "ExecuteSqlQueryRequest",
      "description": "An execute sql query request containing the query and the connection to execute it on.",
      "type": "object",
      "properties": {
        "query": {
          "description": "Required. SQL statement passed by clients like Integration Platform, the query is passed as-is to the driver used for interfacing with external systems.",
          "$ref": "Query"
        }
      }
    },
    "Query": {
      "id": "Query",
      "description": "A wrapper around the SQL query statement. This is needed so that the JSON representation of ExecuteSqlQueryRequest has the following format: `{\"query\":\"select *\"}`.",
      "type": "object",
      "properties": {
        "query": {
          "description": "Required. Sql query to execute.",
          "type": "string"
        },
        "timeout": {
          "description": "Sets the number of seconds the driver will wait for a query to execute.",
          "type": "string",
          "format": "int64"
        },
        "maxRows": {
          "description": "Sets the limit for the maximum number of rows returned after the query execution.",
          "type": "string",
          "format": "int64"
        },
        "queryParameters": {
          "description": "In the struct, the value corresponds to the value of query parameter and date type corresponds to the date type of the query parameter.",
          "type": "array",
          "items": {
            "$ref": "QueryParameter"
          }
        }
      }
    },
    "QueryParameter": {
      "id": "QueryParameter",
      "description": "Query parameter definition",
      "type": "object",
      "properties": {
        "value": {
          "type": "any"
        },
        "dataType": {
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        }
      }
    },
    "ExecuteSqlQueryResponse": {
      "id": "ExecuteSqlQueryResponse",
      "description": "A response returned by the connection after executing the sql query.",
      "type": "object",
      "properties": {
        "results": {
          "description": "In the case of successful execution of the query the response contains results returned by the external system. For example, the result rows of the query are contained in the 'results' Struct list - \"results\": [ { \"field1\": \"val1\", \"field2\": \"val2\",.. },.. ] Each Struct row can contain fields any type of like nested Structs or lists.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object."
            }
          }
        }
      }
    },
    "Instance": {
      "id": "Instance",
      "description": "Instance represents the interface for SLM services to actuate the state of control plane resources. Example Instance in JSON, where consumer-project-number=123456, producer-project-id=cloud-sql: ```json Instance: { \"name\": \"projects/123456/locations/us-east1/instances/prod-instance\", \"create_time\": { \"seconds\": 1526406431, }, \"labels\": { \"env\": \"prod\", \"foo\": \"bar\" }, \"state\": READY, \"software_versions\": { \"software_update\": \"cloud-sql-09-28-2018\", }, \"maintenance_policy_names\": { \"UpdatePolicy\": \"projects/123456/locations/us-east1/maintenancePolicies/prod-update-policy\", } \"tenant_project_id\": \"cloud-sql-test-tenant\", \"producer_metadata\": { \"cloud-sql-tier\": \"basic\", \"cloud-sql-instance-size\": \"1G\", }, \"provisioned_resources\": [ { \"resource-type\": \"compute-instance\", \"resource-url\": \"https://www.googleapis.com/compute/v1/projects/cloud-sql/zones/us-east1-b/instances/vm-1\", } ], \"maintenance_schedules\": { \"csa_rollout\": { \"start_time\": { \"seconds\": 1526406431, }, \"end_time\": { \"seconds\": 1535406431, }, }, \"ncsa_rollout\": { \"start_time\": { \"seconds\": 1526406431, }, \"end_time\": { \"seconds\": 1535406431, }, } }, \"consumer_defined_name\": \"my-sql-instance1\", } ``` LINT.IfChange",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique name of the resource. It uses the form: `projects/{project_number}/locations/{location_id}/instances/{instance_id}` Note: This name is passed, stored and logged across the rollout system. So use of consumer project_id or any other consumer PII in the name is strongly discouraged for wipeout (go/wipeout) compliance. See go/elysium/project_ids#storage-guidance for more details.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Timestamp when the resource was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Timestamp when the resource was last modified.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "state": {
          "description": "Output only. Current lifecycle state of the resource (e.g. if it's being created or ready to use).",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Unspecified state.",
            "Instance is being created.",
            "Instance has been created and is ready to use.",
            "Instance is being updated.",
            "Instance is unheathy and under repair.",
            "Instance is being deleted.",
            "Instance encountered an error and is in indeterministic state."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "UPDATING",
            "REPAIRING",
            "DELETING",
            "ERROR"
          ]
        },
        "softwareVersions": {
          "description": "Software versions that are used to deploy this instance. This can be mutated by rollout services.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "maintenancePolicyNames": {
          "description": "Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the referenced policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_settings.maintenance_policies is set.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tenantProjectId": {
          "description": "Output only. ID of the associated GCP tenant project. See go/get-instance-metadata.",
          "readOnly": true,
          "type": "string"
        },
        "producerMetadata": {
          "description": "Output only. Custom string attributes used primarily to expose producer-specific information in monitoring dashboards. See go/get-instance-metadata.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "provisionedResources": {
          "description": "Output only. The list of data plane resources provisioned for this instance, e.g. compute VMs. See go/get-instance-metadata.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "ProvisionedResource"
          }
        },
        "sloMetadata": {
          "description": "Output only. SLO metadata for instance classification in the Standardized dataplane SLO platform. See go/cloud-ssa-standard-slo for feature description.",
          "readOnly": true,
          "$ref": "SloMetadata"
        },
        "maintenanceSchedules": {
          "description": "The MaintenanceSchedule contains the scheduling information of published maintenance schedule with same key as software_versions.",
          "type": "object",
          "additionalProperties": {
            "$ref": "MaintenanceSchedule"
          }
        },
        "consumerDefinedName": {
          "description": "consumer_defined_name is the name of the instance set by the service consumers. Generally this is different from the `name` field which reperesents the system-assigned id of the instance which the service consumers do not recognize. This is a required field for tenants onboarding to Maintenance Window notifications (go/slm-rollout-maintenance-policies#prerequisites).",
          "type": "string"
        },
        "slmInstanceTemplate": {
          "description": "Link to the SLM instance template. Only populated when updating SLM instances via SSA's Actuation service adaptor. Service producers with custom control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead they should use software_versions.",
          "type": "string"
        },
        "maintenanceSettings": {
          "description": "Optional. The MaintenanceSettings associated with instance.",
          "$ref": "MaintenanceSettings"
        },
        "instanceType": {
          "description": "Optional. The instance_type of this instance of format: projects/{project_number}/locations/{location_id}/instanceTypes/{instance_type_id}. Instance Type represents a high-level tier or SKU of the service that this instance belong to. When enabled(eg: Maintenance Rollout), Rollout uses 'instance_type' along with 'software_versions' to determine whether instance needs an update or not.",
          "type": "string"
        },
        "notificationParameters": {
          "description": "Optional. notification_parameter are information that service producers may like to include that is not relevant to Rollout. This parameter will only be passed to Gamma and Cloud Logging for notification/logging purpose.",
          "type": "object",
          "additionalProperties": {
            "$ref": "NotificationParameter"
          }
        }
      }
    },
    "ProvisionedResource": {
      "id": "ProvisionedResource",
      "description": "Describes provisioned dataplane resources.",
      "type": "object",
      "properties": {
        "resourceType": {
          "description": "Type of the resource. This can be either a GCP resource or a custom one (e.g. another cloud provider's VM). For GCP compute resources use singular form of the names listed in GCP compute API documentation (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with 'compute-', for example: 'compute-instance', 'compute-disk', 'compute-autoscaler'.",
          "type": "string"
        },
        "resourceUrl": {
          "description": "URL identifying the resource, e.g. \"https://www.googleapis.com/compute/v1/projects/...)\".",
          "type": "string"
        }
      }
    },
    "SloMetadata": {
      "id": "SloMetadata",
      "description": "SloMetadata contains resources required for proper SLO classification of the instance.",
      "type": "object",
      "properties": {
        "tier": {
          "description": "Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.",
          "type": "string"
        },
        "nodes": {
          "description": "Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch.",
          "type": "array",
          "items": {
            "$ref": "NodeSloMetadata"
          }
        },
        "perSliEligibility": {
          "description": "Optional. Multiple per-instance SLI eligibilities which apply for individual SLIs.",
          "$ref": "PerSliSloEligibility"
        }
      }
    },
    "NodeSloMetadata": {
      "id": "NodeSloMetadata",
      "description": "Node information for custom per-node SLO implementations. SSA does not support per-node SLO, but producers can populate per-node information in SloMetadata for custom precomputations. SSA Eligibility Exporter will emit per-node metric based on this information.",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "The id of the node. This should be equal to SaasInstanceNode.node_id.",
          "type": "string"
        },
        "location": {
          "description": "The location of the node, if different from instance location.",
          "type": "string"
        },
        "perSliEligibility": {
          "description": "If present, this will override eligibility for the node coming from instance or exclusions for specified SLIs.",
          "$ref": "PerSliSloEligibility"
        }
      }
    },
    "PerSliSloEligibility": {
      "id": "PerSliSloEligibility",
      "description": "PerSliSloEligibility is a mapping from an SLI name to eligibility.",
      "type": "object",
      "properties": {
        "eligibilities": {
          "description": "An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted.",
          "type": "object",
          "additionalProperties": {
            "$ref": "SloEligibility"
          }
        }
      }
    },
    "SloEligibility": {
      "id": "SloEligibility",
      "description": "SloEligibility is a tuple containing eligibility value: true if an instance is eligible for SLO calculation or false if it should be excluded from all SLO-related calculations along with a user-defined reason.",
      "type": "object",
      "properties": {
        "eligible": {
          "description": "Whether an instance is eligible or ineligible.",
          "type": "boolean"
        },
        "reason": {
          "description": "User-defined reason for the current value of instance eligibility. Usually, this can be directly mapped to the internal state. An empty reason is allowed.",
          "type": "string"
        }
      }
    },
    "MaintenanceSchedule": {
      "id": "MaintenanceSchedule",
      "description": "Maintenance schedule which is exposed to customer and potentially end user, indicating published upcoming future maintenance schedule",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "The scheduled start time for the maintenance.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "The scheduled end time for the maintenance.",
          "type": "string",
          "format": "google-datetime"
        },
        "canReschedule": {
          "description": "This field is deprecated, and will be always set to true since reschedule can happen multiple times now. This field should not be removed until all service producers remove this for their customers.",
          "deprecated": true,
          "type": "boolean"
        },
        "rolloutManagementPolicy": {
          "description": "The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy.",
          "type": "string"
        },
        "scheduleDeadlineTime": {
          "description": "schedule_deadline_time is the time deadline any schedule start time cannot go beyond, including reschedule. It's normally the initial schedule start time plus maintenance window length (1 day or 1 week). Maintenance cannot be scheduled to start beyond this deadline.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "MaintenanceSettings": {
      "id": "MaintenanceSettings",
      "description": "Maintenance settings associated with instance. Allows service producers and end users to assign settings that controls maintenance on this instance.",
      "type": "object",
      "properties": {
        "exclude": {
          "description": "Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted.",
          "type": "boolean"
        },
        "maintenancePolicies": {
          "description": "Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the embedded policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_policy_names is set. If only the name is needed, then only populate MaintenancePolicy.name.",
          "type": "object",
          "additionalProperties": {
            "$ref": "MaintenancePolicy"
          }
        },
        "isRollback": {
          "description": "Optional. If the update call is triggered from rollback, set the value as true.",
          "type": "boolean"
        }
      }
    },
    "MaintenancePolicy": {
      "id": "MaintenancePolicy",
      "description": "Defines policies to service maintenance events.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. MaintenancePolicy name using the form: `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}` where {project_id} refers to a GCP consumer project ID, {location_id} refers to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time when the resource was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The time when the resource was updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "description": {
          "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.",
          "type": "string"
        },
        "labels": {
          "description": "Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "state": {
          "description": "Optional. The state of the policy.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified state.",
            "Resource is ready to be used.",
            "Resource is being deleted. It can no longer be attached to instances."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "READY",
            "DELETING"
          ]
        },
        "updatePolicy": {
          "description": "Maintenance policy applicable to instance update.",
          "$ref": "UpdatePolicy"
        }
      }
    },
    "UpdatePolicy": {
      "id": "UpdatePolicy",
      "description": "Maintenance policy applicable to instance updates.",
      "type": "object",
      "properties": {
        "window": {
          "description": "Optional. Maintenance window that is applied to resources covered by this policy.",
          "$ref": "MaintenanceWindow"
        },
        "channel": {
          "description": "Optional. Relative scheduling channel applied to resource.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified channel.",
            "Early channel within a customer project.",
            "Later channel within a customer project.",
            "! ! The follow channels can ONLY be used if you adopt the new MW system! ! ! NOTE: all WEEK channels are assumed to be under a weekly window. ! There is currently no dedicated channel definitions for Daily windows. ! If you use Daily window, the system will assume a 1d (24Hours) advanced ! notification period b/w EARLY and LATER. ! We may consider support more flexible daily channel specifications in ! the future. WEEK1 == EARLIER with minimum 7d advanced notification. {7d, 14d} The system will treat them equally and will use WEEK1 whenever it can. New customers are encouraged to use this channel annotation.",
            "WEEK2 == LATER with minimum 14d advanced notification {14d, 21d}.",
            "WEEK5 == 40d support. minimum 35d advanced notification {35d, 42d}."
          ],
          "enum": [
            "UPDATE_CHANNEL_UNSPECIFIED",
            "EARLIER",
            "LATER",
            "WEEK1",
            "WEEK2",
            "WEEK5"
          ]
        },
        "denyMaintenancePeriods": {
          "description": "Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. The protocol supports zero-to-many such periods, but the current SLM Rollout implementation only supports zero-to-one.",
          "type": "array",
          "items": {
            "$ref": "DenyMaintenancePeriod"
          }
        }
      }
    },
    "MaintenanceWindow": {
      "id": "MaintenanceWindow",
      "description": "MaintenanceWindow definition.",
      "type": "object",
      "properties": {
        "dailyCycle": {
          "description": "Daily cycle.",
          "$ref": "DailyCycle"
        },
        "weeklyCycle": {
          "description": "Weekly cycle.",
          "$ref": "WeeklyCycle"
        }
      }
    },
    "DailyCycle": {
      "id": "DailyCycle",
      "description": "Time window specified for daily operations.",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "Time within the day to start the operations.",
          "$ref": "TimeOfDay"
        },
        "duration": {
          "description": "Output only. Duration of the time window, set by service producer.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "TimeOfDay": {
      "id": "TimeOfDay",
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
      "type": "object",
      "properties": {
        "hours": {
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
          "type": "integer",
          "format": "int32"
        },
        "minutes": {
          "description": "Minutes of hour of day. Must be from 0 to 59.",
          "type": "integer",
          "format": "int32"
        },
        "seconds": {
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
          "type": "integer",
          "format": "int32"
        },
        "nanos": {
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WeeklyCycle": {
      "id": "WeeklyCycle",
      "description": "Time window specified for weekly operations.",
      "type": "object",
      "properties": {
        "schedule": {
          "description": "User can specify multiple windows in a week. Minimum of 1 window.",
          "type": "array",
          "items": {
            "$ref": "Schedule"
          }
        }
      }
    },
    "Schedule": {
      "id": "Schedule",
      "description": "Configure the schedule.",
      "type": "object",
      "properties": {
        "day": {
          "description": "Allows to define schedule that runs specified day of the week.",
          "type": "string",
          "enumDescriptions": [
            "The day of the week is unspecified.",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ],
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ]
        },
        "startTime": {
          "description": "Time within the window to start the operations.",
          "$ref": "TimeOfDay"
        },
        "duration": {
          "description": "Output only. Duration of the time window, set by service producer.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "DenyMaintenancePeriod": {
      "id": "DenyMaintenancePeriod",
      "description": "DenyMaintenancePeriod definition. Maintenance is forbidden within the deny period. The start_date must be less than the end_date.",
      "type": "object",
      "properties": {
        "startDate": {
          "description": "Deny period start date. This can be: * A full date, with non-zero year, month and day values. * A month and day value, with a zero year. Allows recurring deny periods each year. Date matching this period will have to be the same or after the start.",
          "$ref": "Date"
        },
        "endDate": {
          "description": "Deny period end date. This can be: * A full date, with non-zero year, month and day values. * A month and day value, with a zero year. Allows recurring deny periods each year. Date matching this period will have to be before the end.",
          "$ref": "Date"
        },
        "time": {
          "description": "Time in UTC when the Blackout period starts on start_date and ends on end_date. This can be: * Full time. * All zeros for 00:00:00 UTC",
          "$ref": "TimeOfDay"
        }
      }
    },
    "Date": {
      "id": "Date",
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
      "type": "object",
      "properties": {
        "year": {
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "type": "integer",
          "format": "int32"
        },
        "day": {
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NotificationParameter": {
      "id": "NotificationParameter",
      "description": "Contains notification related data.",
      "type": "object",
      "properties": {
        "values": {
          "description": "Optional. Array of string values. e.g. instance's replica information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "basePath": "",
  "id": "connectors:v2",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "description": "Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.",
  "revision": "20240606",
  "mtlsRootUrl": "https://connectors.mtls.googleapis.com/",
  "name": "connectors",
  "fullyEncodeReservedExpansion": true,
  "kind": "discovery#restDescription",
  "ownerDomain": "google.com",
  "servicePath": "",
  "version": "v2",
  "baseUrl": "https://connectors.googleapis.com/",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "connections": {
              "methods": {
                "checkStatus": {
                  "id": "connectors.projects.locations.connections.checkStatus",
                  "path": "v2/{+name}:checkStatus",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:checkStatus",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "CheckStatusResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Reports the status of the connection. Note that when the connection is in a state that is not ACTIVE, the implementation of this RPC method must return a Status with the corresponding State instead of returning a gRPC status code that is not \"OK\", which indicates that ConnectionStatus itself, not the connection, failed."
                },
                "checkReadiness": {
                  "id": "connectors.projects.locations.connections.checkReadiness",
                  "path": "v2/{+name}:checkReadiness",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:checkReadiness",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "CheckReadinessResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Reports readiness status of the connector. Similar logic to GetStatus but modified for kubernetes health check to understand."
                },
                "exchangeAuthCode": {
                  "id": "connectors.projects.locations.connections.exchangeAuthCode",
                  "path": "v2/{+name}:exchangeAuthCode",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:exchangeAuthCode",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ExchangeAuthCodeRequest"
                  },
                  "response": {
                    "$ref": "ExchangeAuthCodeResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "ExchangeAuthCode exchanges the OAuth authorization code (and other necessary data) for an access token (and associated credentials)."
                },
                "refreshAccessToken": {
                  "id": "connectors.projects.locations.connections.refreshAccessToken",
                  "path": "v2/{+name}:refreshAccessToken",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:refreshAccessToken",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "RefreshAccessTokenRequest"
                  },
                  "response": {
                    "$ref": "RefreshAccessTokenResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "RefreshAccessToken exchanges the OAuth refresh token (and other necessary data) for a new access token (and new associated credentials)."
                },
                "executeSqlQuery": {
                  "id": "connectors.projects.locations.connections.executeSqlQuery",
                  "path": "v2/{+connection}:executeSqlQuery",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:executeSqlQuery",
                  "httpMethod": "POST",
                  "parameters": {
                    "connection": {
                      "description": "Required. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}",
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "connection"
                  ],
                  "request": {
                    "$ref": "ExecuteSqlQueryRequest"
                  },
                  "response": {
                    "$ref": "ExecuteSqlQueryResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Executes a SQL statement specified in the body of the request. An example of this SQL statement in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id = o.AccountId'."
                }
              },
              "resources": {
                "actions": {
                  "methods": {
                    "execute": {
                      "id": "connectors.projects.locations.connections.actions.execute",
                      "path": "v2/{+name}:execute",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/actions/{actionsId}:execute",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "Required. Resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}/actions/{action}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/actions/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ExecuteActionRequest"
                      },
                      "response": {
                        "$ref": "ExecuteActionResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Executes an action with the name specified in the request. The input parameters for executing the action are passed through the body of the ExecuteAction request."
                    },
                    "list": {
                      "id": "connectors.projects.locations.connections.actions.list",
                      "path": "v2/{+parent}/actions",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/actions",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. Parent resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Number of Actions to return. Defaults to 25.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "Page token, return from a previous ListActions call, that can be used retrieve the next page of content. If unspecified, the request returns the first page of actions.",
                          "location": "query",
                          "type": "string"
                        },
                        "view": {
                          "description": "Specifies which fields of the Action are returned in the response.",
                          "location": "query",
                          "type": "string",
                          "enumDescriptions": [
                            "VIEW_UNSPECIFIED. The unset value Defaults to FULL View.",
                            "Return only action names.",
                            "Return actions with schema."
                          ],
                          "enum": [
                            "ACTION_VIEW_UNSPECIFIED",
                            "ACTION_VIEW_BASIC",
                            "ACTION_VIEW_FULL"
                          ]
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListActionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the schema of all the actions supported by the connector."
                    },
                    "get": {
                      "id": "connectors.projects.locations.connections.actions.get",
                      "path": "v2/{+name}",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/actions/{actionsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. Resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}/actions/{action}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/actions/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Action"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the schema of the given action."
                    }
                  }
                },
                "entityTypes": {
                  "methods": {
                    "get": {
                      "id": "connectors.projects.locations.connections.entityTypes.get",
                      "path": "v2/{+name}",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{entityType}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "EntityType"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets metadata of given entity type"
                    },
                    "list": {
                      "id": "connectors.projects.locations.connections.entityTypes.list",
                      "path": "v2/{+parent}/entityTypes",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Number of entity types to return. Defaults to 25.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "Page token, return from a previous ListEntityTypes call, that can be used retrieve the next page of content. If unspecified, the request returns the first page of entity types.",
                          "location": "query",
                          "type": "string"
                        },
                        "view": {
                          "description": "Specifies which fields of the Entity Type are returned in the response.",
                          "location": "query",
                          "type": "string",
                          "enumDescriptions": [
                            "VIEW_UNSPECIFIED. The unset value. Defaults to FULL View.",
                            "Return only entity type names.",
                            "Return entity types with schema"
                          ],
                          "enum": [
                            "ENTITY_TYPE_VIEW_UNSPECIFIED",
                            "ENTITY_TYPE_VIEW_BASIC",
                            "ENTITY_TYPE_VIEW_FULL"
                          ]
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListEntityTypesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists metadata related to all entity types present in the external system."
                    }
                  },
                  "resources": {
                    "entities": {
                      "methods": {
                        "list": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.list",
                          "path": "v2/{+parent}/entities",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Number of entity rows to return. Defaults page size = 25. Max page size = 200.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "Page token value if available from a previous request.",
                              "location": "query",
                              "type": "string"
                            },
                            "sortBy": {
                              "description": "List of 'sort_by' columns to use when returning the results.",
                              "location": "query",
                              "repeated": true,
                              "type": "string"
                            },
                            "conditions": {
                              "description": "Conditions to be used when listing entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListEntitiesResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists entity rows of a particular entity type contained in the request. Note: 1. Currently, only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values of the 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates, inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors."
                        },
                        "get": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.get",
                          "path": "v2/{+name}",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities/{entitiesId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Entity"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets a single entity row matching the entity type and entity id specified in the request."
                        },
                        "create": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.create",
                          "path": "v2/{+parent}/entities",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities",
                          "httpMethod": "POST",
                          "parameters": {
                            "parent": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "Entity"
                          },
                          "response": {
                            "$ref": "Entity"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Creates a new entity row of the specified entity type in the external system. The field values for creating the row are contained in the body of the request. The response message contains a `Entity` message object returned as a response by the external system."
                        },
                        "patch": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.patch",
                          "path": "v2/{+name}",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities/{entitiesId}",
                          "httpMethod": "PATCH",
                          "parameters": {
                            "name": {
                              "description": "Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "Entity"
                          },
                          "response": {
                            "$ref": "Entity"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates an existing entity row matching the entity type and entity id specified in the request. The fields in the entity row that need to be modified are contained in the body of the request. All unspecified fields are left unchanged. The response message contains a `Entity` message object returned as a response by the external system."
                        },
                        "updateEntitiesWithConditions": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.updateEntitiesWithConditions",
                          "path": "v2/{+entityType}/entities:updateEntitiesWithConditions",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities:updateEntitiesWithConditions",
                          "httpMethod": "POST",
                          "parameters": {
                            "entityType": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "conditions": {
                              "description": "Required. Conditions to be used when updating entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported. Note: If this conditions field is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-all case. Connector developers can determine and document what a match-all case constraint would be.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "entityType"
                          ],
                          "request": {
                            "$ref": "Entity"
                          },
                          "response": {
                            "$ref": "UpdateEntitiesWithConditionsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates entities based on conditions specified in the request and not on entity id."
                        },
                        "delete": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.delete",
                          "path": "v2/{+name}",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities/{entitiesId}",
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes an existing entity row matching the entity type and entity id specified in the request."
                        },
                        "deleteEntitiesWithConditions": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.deleteEntitiesWithConditions",
                          "path": "v2/{+entityType}/entities:deleteEntitiesWithConditions",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities:deleteEntitiesWithConditions",
                          "httpMethod": "POST",
                          "parameters": {
                            "entityType": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "conditions": {
                              "description": "Required. Conditions to be used when deleting entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported. Note: If this conditions field is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-all case. Connector developers can determine and document what a match-all case constraint would be.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "entityType"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes entities based on conditions specified in the request and not on entity id."
                        }
                      }
                    },
                    "entitieswithacls": {
                      "methods": {
                        "list": {
                          "id": "connectors.projects.locations.connections.entityTypes.entitieswithacls.list",
                          "path": "v2/{+parent}/entitieswithacls",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entitieswithacls",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "conditions": {
                              "description": "Conditions to be used when listing entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported.",
                              "location": "query",
                              "type": "string"
                            },
                            "gsutilUri": {
                              "description": "Format: gs://object_path",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "Operation"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists entity rows with ACLs of a particular entity type contained in the request. Note: 1. Currently, only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values of the 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates, inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "documentationLink": "https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "ownerName": "Google"
}

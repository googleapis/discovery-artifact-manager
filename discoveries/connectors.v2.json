{
  "mtlsRootUrl": "https://connectors.mtls.googleapis.com/",
  "rootUrl": "https://connectors.googleapis.com/",
  "description": "Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.",
  "discoveryVersion": "v1",
  "protocol": "rest",
  "kind": "discovery#restDescription",
  "canonicalName": "Connectors",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "ownerName": "Google",
  "version_module": true,
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "connections": {
              "methods": {
                "checkStatus": {
                  "id": "connectors.projects.locations.connections.checkStatus",
                  "path": "v2/{+name}:checkStatus",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:checkStatus",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "CheckStatusResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Reports the status of the connection. Note that when the connection is in a state that is not ACTIVE, the implementation of this RPC method must return a Status with the corresponding State instead of returning a gRPC status code that is not \"OK\", which indicates that ConnectionStatus itself, not the connection, failed."
                },
                "checkReadiness": {
                  "id": "connectors.projects.locations.connections.checkReadiness",
                  "path": "v2/{+name}:checkReadiness",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:checkReadiness",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "CheckReadinessResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Reports readiness status of the connector. Similar logic to GetStatus but modified for kubernetes health check to understand."
                },
                "exchangeAuthCode": {
                  "id": "connectors.projects.locations.connections.exchangeAuthCode",
                  "path": "v2/{+name}:exchangeAuthCode",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:exchangeAuthCode",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ExchangeAuthCodeRequest"
                  },
                  "response": {
                    "$ref": "ExchangeAuthCodeResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "ExchangeAuthCode exchanges the OAuth authorization code (and other necessary data) for an access token (and associated credentials)."
                },
                "refreshAccessToken": {
                  "id": "connectors.projects.locations.connections.refreshAccessToken",
                  "path": "v2/{+name}:refreshAccessToken",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:refreshAccessToken",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "RefreshAccessTokenRequest"
                  },
                  "response": {
                    "$ref": "RefreshAccessTokenResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "RefreshAccessToken exchanges the OAuth refresh token (and other necessary data) for a new access token (and new associated credentials)."
                },
                "executeSqlQuery": {
                  "id": "connectors.projects.locations.connections.executeSqlQuery",
                  "path": "v2/{+connection}:executeSqlQuery",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:executeSqlQuery",
                  "httpMethod": "POST",
                  "parameters": {
                    "connection": {
                      "description": "Required. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}",
                      "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "connection"
                  ],
                  "request": {
                    "$ref": "ExecuteSqlQueryRequest"
                  },
                  "response": {
                    "$ref": "ExecuteSqlQueryResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Executes a SQL statement specified in the body of the request. An example of this SQL statement in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id = o.AccountId'."
                }
              },
              "resources": {
                "actions": {
                  "methods": {
                    "execute": {
                      "id": "connectors.projects.locations.connections.actions.execute",
                      "path": "v2/{+name}:execute",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/actions/{actionsId}:execute",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "Required. Resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}/actions/{action}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/actions/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ExecuteActionRequest"
                      },
                      "response": {
                        "$ref": "ExecuteActionResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Executes an action with the name specified in the request. The input parameters for executing the action are passed through the body of the ExecuteAction request."
                    },
                    "list": {
                      "id": "connectors.projects.locations.connections.actions.list",
                      "path": "v2/{+parent}/actions",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/actions",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. Parent resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Number of Actions to return. Defaults to 25.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "Page token, return from a previous ListActions call, that can be used retrieve the next page of content. If unspecified, the request returns the first page of actions.",
                          "location": "query",
                          "type": "string"
                        },
                        "view": {
                          "description": "Specifies which fields of the Action are returned in the response.",
                          "location": "query",
                          "type": "string",
                          "enumDescriptions": [
                            "VIEW_UNSPECIFIED. The unset value Defaults to FULL View.",
                            "Return only action names.",
                            "Return actions with schema."
                          ],
                          "enum": [
                            "ACTION_VIEW_UNSPECIFIED",
                            "ACTION_VIEW_BASIC",
                            "ACTION_VIEW_FULL"
                          ]
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListActionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the schema of all the actions supported by the connector."
                    },
                    "get": {
                      "id": "connectors.projects.locations.connections.actions.get",
                      "path": "v2/{+name}",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/actions/{actionsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. Resource name of the Action. Format: projects/{project}/locations/{location}/connections/{connection}/actions/{action}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/actions/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Action"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the schema of the given action."
                    }
                  }
                },
                "entityTypes": {
                  "methods": {
                    "get": {
                      "id": "connectors.projects.locations.connections.entityTypes.get",
                      "path": "v2/{+name}",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{entityType}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "EntityType"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets metadata of given entity type"
                    },
                    "list": {
                      "id": "connectors.projects.locations.connections.entityTypes.list",
                      "path": "v2/{+parent}/entityTypes",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}",
                          "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Number of entity types to return. Defaults to 25.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "Page token, return from a previous ListEntityTypes call, that can be used retrieve the next page of content. If unspecified, the request returns the first page of entity types.",
                          "location": "query",
                          "type": "string"
                        },
                        "view": {
                          "description": "Specifies which fields of the Entity Type are returned in the response.",
                          "location": "query",
                          "type": "string",
                          "enumDescriptions": [
                            "VIEW_UNSPECIFIED. The unset value. Defaults to FULL View.",
                            "Return only entity type names.",
                            "Return entity types with schema"
                          ],
                          "enum": [
                            "ENTITY_TYPE_VIEW_UNSPECIFIED",
                            "ENTITY_TYPE_VIEW_BASIC",
                            "ENTITY_TYPE_VIEW_FULL"
                          ]
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListEntityTypesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists metadata related to all entity types present in the external system."
                    }
                  },
                  "resources": {
                    "entities": {
                      "methods": {
                        "list": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.list",
                          "path": "v2/{+parent}/entities",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Number of entity rows to return. Defaults page size = 25. Max page size = 200.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "Page token value if available from a previous request.",
                              "location": "query",
                              "type": "string"
                            },
                            "sortBy": {
                              "description": "List of 'sort_by' columns to use when returning the results.",
                              "location": "query",
                              "repeated": true,
                              "type": "string"
                            },
                            "conditions": {
                              "description": "Conditions to be used when listing entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListEntitiesResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists entity rows of a particular entity type contained in the request. Note: 1. Currently, only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values of the 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates, inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors."
                        },
                        "get": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.get",
                          "path": "v2/{+name}",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities/{entitiesId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Entity"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets a single entity row matching the entity type and entity id specified in the request."
                        },
                        "create": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.create",
                          "path": "v2/{+parent}/entities",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities",
                          "httpMethod": "POST",
                          "parameters": {
                            "parent": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "Entity"
                          },
                          "response": {
                            "$ref": "Entity"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Creates a new entity row of the specified entity type in the external system. The field values for creating the row are contained in the body of the request. The response message contains a `Entity` message object returned as a response by the external system."
                        },
                        "patch": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.patch",
                          "path": "v2/{+name}",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities/{entitiesId}",
                          "httpMethod": "PATCH",
                          "parameters": {
                            "name": {
                              "description": "Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "Entity"
                          },
                          "response": {
                            "$ref": "Entity"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates an existing entity row matching the entity type and entity id specified in the request. The fields in the entity row that need to be modified are contained in the body of the request. All unspecified fields are left unchanged. The response message contains a `Entity` message object returned as a response by the external system."
                        },
                        "updateEntitiesWithConditions": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.updateEntitiesWithConditions",
                          "path": "v2/{+entityType}/entities:updateEntitiesWithConditions",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities:updateEntitiesWithConditions",
                          "httpMethod": "POST",
                          "parameters": {
                            "entityType": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "conditions": {
                              "description": "Required. Conditions to be used when updating entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported. Note: If this conditions field is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-all case. Connector developers can determine and document what a match-all case constraint would be.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "entityType"
                          ],
                          "request": {
                            "$ref": "Entity"
                          },
                          "response": {
                            "$ref": "UpdateEntitiesWithConditionsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates entities based on conditions specified in the request and not on entity id."
                        },
                        "delete": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.delete",
                          "path": "v2/{+name}",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities/{entitiesId}",
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes an existing entity row matching the entity type and entity id specified in the request."
                        },
                        "deleteEntitiesWithConditions": {
                          "id": "connectors.projects.locations.connections.entityTypes.entities.deleteEntitiesWithConditions",
                          "path": "v2/{+entityType}/entities:deleteEntitiesWithConditions",
                          "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/entityTypes/{entityTypesId}/entities:deleteEntitiesWithConditions",
                          "httpMethod": "POST",
                          "parameters": {
                            "entityType": {
                              "description": "Required. Resource name of the Entity Type. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}",
                              "pattern": "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "conditions": {
                              "description": "Required. Conditions to be used when deleting entities. From a proto standpoint, There are no restrictions on what can be passed using this field. The connector documentation should have information about what format of filters/conditions are supported. Note: If this conditions field is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-all case. Connector developers can determine and document what a match-all case constraint would be.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "entityType"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes entities based on conditions specified in the request and not on entity id."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "schemas": {
    "ExecuteActionRequest": {
      "id": "ExecuteActionRequest",
      "description": "Request message for ActionService.ExecuteAction",
      "type": "object",
      "properties": {
        "parameters": {
          "description": "Parameters for executing the action. The parameters can be key/value pairs or nested structs.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "ExecuteActionResponse": {
      "id": "ExecuteActionResponse",
      "description": "Response message for ActionService.ExecuteAction",
      "type": "object",
      "properties": {
        "results": {
          "description": "In the case of successful invocation of the specified action, the results Struct contains values based on the response of the action invoked. 1. If the action execution produces any entities as a result, they are returned as an array of Structs with the 'key' being the field name and the 'value' being the value of that field in each result row. { 'results': [{'key': 'value'}, ...] }",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object."
            }
          }
        }
      }
    },
    "ListActionsResponse": {
      "id": "ListActionsResponse",
      "description": "Response message for ActionService.ListActions",
      "type": "object",
      "properties": {
        "actions": {
          "description": "List of action metadata.",
          "type": "array",
          "items": {
            "$ref": "Action"
          }
        },
        "unsupportedActionNames": {
          "description": "List of actions which contain unsupported Datatypes. Check datatype.proto for more information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "description": "Next page token if more actions available.",
          "type": "string"
        }
      }
    },
    "Action": {
      "id": "Action",
      "description": "Action message contains metadata information about a single action present in the external system.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the action.",
          "type": "string"
        },
        "inputParameters": {
          "description": "List containing input parameter metadata.",
          "type": "array",
          "items": {
            "$ref": "InputParameter"
          }
        },
        "resultMetadata": {
          "description": "List containing the metadata of result fields.",
          "type": "array",
          "items": {
            "$ref": "ResultMetadata"
          }
        },
        "inputJsonSchema": {
          "description": "JsonSchema representation of this actions's input schema",
          "$ref": "JsonSchema"
        },
        "resultJsonSchema": {
          "description": "JsonSchema representation of this actions's result schema",
          "$ref": "JsonSchema"
        },
        "displayName": {
          "description": "Display Name of action to be shown on client side",
          "type": "string"
        },
        "description": {
          "description": "Brief Description of action",
          "type": "string"
        }
      }
    },
    "InputParameter": {
      "id": "InputParameter",
      "description": "Input Parameter message contains metadata about the parameters required for executing an Action.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Parameter.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the Parameter.",
          "type": "string"
        },
        "dataType": {
          "description": "The data type of the Parameter",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "nullable": {
          "description": "Specifies whether a null value is allowed.",
          "type": "boolean"
        },
        "defaultValue": {
          "description": "The following field specifies the default value of the Parameter provided by the external system if a value is not provided.",
          "type": "any"
        },
        "jsonSchema": {
          "description": "JsonSchema of the parameter, applicable only if parameter is of type `STRUCT`",
          "$ref": "JsonSchema"
        },
        "additionalDetails": {
          "description": "The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "JsonSchema": {
      "id": "JsonSchema",
      "description": "JsonSchema representation of schema metadata",
      "type": "object",
      "properties": {
        "description": {
          "description": "A description of this schema.",
          "type": "string"
        },
        "default": {
          "description": "The default value of the field or object described by this schema.",
          "type": "any"
        },
        "required": {
          "description": "Whether this property is required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "JSON Schema Validation: A Vocabulary for Structural Validation of JSON",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "items": {
          "description": "Schema that applies to array values, applicable only if this is of type `array`.",
          "$ref": "JsonSchema"
        },
        "properties": {
          "description": "The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property",
          "type": "object",
          "additionalProperties": {
            "$ref": "JsonSchema"
          }
        },
        "enum": {
          "description": "Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values",
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "jdbcType": {
          "description": "JDBC datatype of the field.",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "format": {
          "description": "Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format",
          "type": "string"
        },
        "additionalDetails": {
          "description": "Additional details apart from standard json schema fields, this gives flexibility to store metadata about the schema",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "ResultMetadata": {
      "id": "ResultMetadata",
      "description": "Result Metadata message contains metadata about the result returned after executing an Action.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the metadata field.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the metadata field.",
          "type": "string"
        },
        "dataType": {
          "description": "The data type of the metadata field",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "jsonSchema": {
          "description": "JsonSchema of the result, applicable only if parameter is of type `STRUCT`",
          "$ref": "JsonSchema"
        }
      }
    },
    "CheckStatusResponse": {
      "id": "CheckStatusResponse",
      "description": "The status of the connector.",
      "type": "object",
      "properties": {
        "state": {
          "description": "State of the connector.",
          "type": "string",
          "enumDescriptions": [
            "State unspecified.",
            "The connector is active and ready to process runtime requests. This can also mean that from the connector's perspective, the connector is not in an error state and should be able to process runtime requests successfully.",
            "The connector is in an error state and cannot process runtime requests. An example reason would be that the connection container has some network issues that prevent outbound requests from being sent.",
            "This is a more specific error state that the developers can opt to use when the connector is facing auth-related errors caused by auth configuration not present, invalid auth credentials, etc."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "ERROR",
            "AUTH_ERROR"
          ]
        },
        "description": {
          "description": "When the connector is not in ACTIVE state, the description must be populated to specify the reason why it's not in ACTIVE state.",
          "type": "string"
        }
      }
    },
    "CheckReadinessResponse": {
      "id": "CheckReadinessResponse",
      "description": "Response containing status of the connector for readiness prober.",
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "ExchangeAuthCodeRequest": {
      "id": "ExchangeAuthCodeRequest",
      "description": "ExchangeAuthCodeRequest currently includes no fields.",
      "type": "object",
      "properties": {}
    },
    "ExchangeAuthCodeResponse": {
      "id": "ExchangeAuthCodeResponse",
      "description": "ExchangeAuthCodeResponse includes the returned access token and its associated credentials.",
      "type": "object",
      "properties": {
        "accessCredentials": {
          "$ref": "AccessCredentials"
        }
      }
    },
    "AccessCredentials": {
      "id": "AccessCredentials",
      "description": "AccessCredentials includes the OAuth access token, and the other fields returned along with it.",
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "OAuth access token.",
          "type": "string"
        },
        "refreshToken": {
          "description": "OAuth refresh token.",
          "type": "string"
        },
        "expiresIn": {
          "description": "Duration till the access token expires.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "RefreshAccessTokenRequest": {
      "id": "RefreshAccessTokenRequest",
      "description": "RefreshAccessTokenRequest currently includes no fields.",
      "type": "object",
      "properties": {}
    },
    "RefreshAccessTokenResponse": {
      "id": "RefreshAccessTokenResponse",
      "description": "RefreshAccessTokenResponse includes the returned access token and its associated credentials.",
      "type": "object",
      "properties": {
        "accessCredentials": {
          "$ref": "AccessCredentials"
        }
      }
    },
    "EntityType": {
      "id": "EntityType",
      "description": "EntityType message contains metadata information about a single entity type present in the external system.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the entity type.",
          "type": "string"
        },
        "fields": {
          "description": "List containing metadata information about each field of the entity type.",
          "type": "array",
          "items": {
            "$ref": "Field"
          }
        },
        "jsonSchema": {
          "description": "JsonSchema representation of this entity's schema",
          "$ref": "JsonSchema"
        }
      }
    },
    "Field": {
      "id": "Field",
      "description": "Message contains EntityType's Field metadata.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Field.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the Field.",
          "type": "string"
        },
        "dataType": {
          "description": "The data type of the Field.",
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        },
        "key": {
          "description": "The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity.",
          "type": "boolean"
        },
        "nullable": {
          "description": "Specifies whether a null value is allowed.",
          "type": "boolean"
        },
        "defaultValue": {
          "description": "The following field specifies the default value of the Field provided by the external system if a value is not provided.",
          "type": "any"
        },
        "additionalDetails": {
          "description": "The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "reference": {
          "description": "Reference captures the association between two different entity types. Value links to the reference of another entity type.",
          "$ref": "Reference"
        },
        "jsonSchema": {
          "description": "JsonSchema of the field, applicable only if field is of type `STRUCT`",
          "$ref": "JsonSchema"
        }
      }
    },
    "Reference": {
      "id": "Reference",
      "type": "object",
      "properties": {
        "type": {
          "description": "Name of reference entity type.",
          "type": "string"
        },
        "name": {
          "description": "Name of the reference field.",
          "type": "string"
        }
      }
    },
    "ListEntityTypesResponse": {
      "id": "ListEntityTypesResponse",
      "description": "Response message for EntityService.ListEntityTypes",
      "type": "object",
      "properties": {
        "types": {
          "description": "List of metadata related to all entity types.",
          "type": "array",
          "items": {
            "$ref": "EntityType"
          }
        },
        "nextPageToken": {
          "description": "Next page token if more entity types available.",
          "type": "string"
        },
        "unsupportedTypeNames": {
          "description": "List of entity type names which contain unsupported Datatypes. Check datatype.proto for more information.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListEntitiesResponse": {
      "id": "ListEntitiesResponse",
      "description": "Response message for EntityService.ListEntities",
      "type": "object",
      "properties": {
        "entities": {
          "description": "List containing entity rows.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "nextPageToken": {
          "description": "Next page token if more records are available.",
          "type": "string"
        }
      }
    },
    "Entity": {
      "id": "Entity",
      "description": "'Entity row'/ 'Entity' refers to a single row of an entity type.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}",
          "readOnly": true,
          "type": "string"
        },
        "fields": {
          "description": "Fields of the entity. The key is name of the field and the value contains the applicable `google.protobuf.Value` entry for this field.",
          "type": "object",
          "additionalProperties": {
            "type": "any"
          }
        }
      }
    },
    "UpdateEntitiesWithConditionsResponse": {
      "id": "UpdateEntitiesWithConditionsResponse",
      "description": "Response message for EntityService.UpdateEntitiesWithConditions",
      "type": "object",
      "properties": {
        "response": {
          "description": "Response returned by the external system.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {}
    },
    "ExecuteSqlQueryRequest": {
      "id": "ExecuteSqlQueryRequest",
      "description": "An execute sql query request containing the query and the connection to execute it on.",
      "type": "object",
      "properties": {
        "query": {
          "description": "Required. SQL statement passed by clients like Integration Platform, the query is passed as-is to the driver used for interfacing with external systems.",
          "$ref": "Query"
        }
      }
    },
    "Query": {
      "id": "Query",
      "description": "A wrapper around the SQL query statement. This is needed so that the JSON representation of ExecuteSqlQueryRequest has the following format: `{\"query\":\"select *\"}`.",
      "type": "object",
      "properties": {
        "query": {
          "description": "Required. Sql query to execute.",
          "type": "string"
        },
        "timeout": {
          "description": "Sets the number of seconds the driver will wait for a query to execute.",
          "type": "string",
          "format": "int64"
        },
        "maxRows": {
          "description": "Sets the limit for the maximum number of rows returned after the query execution.",
          "type": "string",
          "format": "int64"
        },
        "queryParameters": {
          "description": "In the struct, the value corresponds to the value of query parameter and date type corresponds to the date type of the query parameter.",
          "type": "array",
          "items": {
            "$ref": "QueryParameter"
          }
        }
      }
    },
    "QueryParameter": {
      "id": "QueryParameter",
      "description": "Query parameter definition",
      "type": "object",
      "properties": {
        "value": {
          "type": "any"
        },
        "dataType": {
          "type": "string",
          "enumDescriptions": [
            "Datatype unspecified.",
            "Deprecated Int type, use INTEGER type instead.",
            "Small int type.",
            "Double type.",
            "Date type.",
            "Deprecated Datetime type.",
            "Time type.",
            "Deprecated string type, use VARCHAR type instead.",
            "Deprecated Long type, use BIGINT type instead.",
            "Boolean type.",
            "Decimal type.",
            "Deprecated UUID type, use VARCHAR instead.",
            "Blob type.",
            "Bit type.",
            "Tiny int type.",
            "Integer type.",
            "Big int type.",
            "Float type.",
            "Real type.",
            "Numeric type.",
            "Char type.",
            "Varchar type.",
            "Long varchar type.",
            "Timestamp type.",
            "Nchar type.",
            "Nvarchar type.",
            "Long Nvarchar type.",
            "Null type.",
            "Other type.",
            "Java object type.",
            "Distinct type keyword.",
            "Struct type.",
            "Array type.",
            "Clob type.",
            "Ref type.",
            "Datalink type.",
            "Row ID type.",
            "Binary type.",
            "Varbinary type.",
            "Long Varbinary type.",
            "Nclob type.",
            "SQLXML type.",
            "Ref_cursor type.",
            "Time with timezone type.",
            "Timestamp with timezone type."
          ],
          "enumDeprecated": [
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "enum": [
            "DATA_TYPE_UNSPECIFIED",
            "INT",
            "SMALLINT",
            "DOUBLE",
            "DATE",
            "DATETIME",
            "TIME",
            "STRING",
            "LONG",
            "BOOLEAN",
            "DECIMAL",
            "UUID",
            "BLOB",
            "BIT",
            "TINYINT",
            "INTEGER",
            "BIGINT",
            "FLOAT",
            "REAL",
            "NUMERIC",
            "CHAR",
            "VARCHAR",
            "LONGVARCHAR",
            "TIMESTAMP",
            "NCHAR",
            "NVARCHAR",
            "LONGNVARCHAR",
            "NULL",
            "OTHER",
            "JAVA_OBJECT",
            "DISTINCT",
            "STRUCT",
            "ARRAY",
            "CLOB",
            "REF",
            "DATALINK",
            "ROWID",
            "BINARY",
            "VARBINARY",
            "LONGVARBINARY",
            "NCLOB",
            "SQLXML",
            "REF_CURSOR",
            "TIME_WITH_TIMEZONE",
            "TIMESTAMP_WITH_TIMEZONE"
          ]
        }
      }
    },
    "ExecuteSqlQueryResponse": {
      "id": "ExecuteSqlQueryResponse",
      "description": "A response returned by the connection after executing the sql query.",
      "type": "object",
      "properties": {
        "results": {
          "description": "In the case of successful execution of the query the response contains results returned by the external system. For example, the result rows of the query are contained in the 'results' Struct list - \"results\": [ { \"field1\": \"val1\", \"field2\": \"val2\",.. },.. ] Each Struct row can contain fields any type of like nested Structs or lists.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object."
            }
          }
        }
      }
    }
  },
  "baseUrl": "https://connectors.googleapis.com/",
  "revision": "20231205",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "connectors:v2",
  "basePath": "",
  "version": "v2",
  "title": "Connectors API",
  "batchPath": "batch",
  "documentationLink": "https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors",
  "name": "connectors",
  "ownerDomain": "google.com",
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "servicePath": ""
}

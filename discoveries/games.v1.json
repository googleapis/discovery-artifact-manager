{
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "title": "Google Play Game Services",
  "ownerName": "Google",
  "description": "The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.",
  "id": "games:v1",
  "rootUrl": "https://games.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/games": {
          "description": "Create, edit, and delete your Google Play Games activity"
        },
        "https://www.googleapis.com/auth/drive.appdata": {
          "description": "See, create, and delete its own configuration data in your Google Drive"
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "batchPath": "batch",
  "resources": {
    "stats": {
      "methods": {
        "get": {
          "id": "games.stats.get",
          "description": "Returns engagement and spend statistics in this application for the currently authenticated user.",
          "parameters": {},
          "response": {
            "$ref": "StatsResponse"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/stats",
          "path": "games/v1/stats"
        }
      }
    },
    "applications": {
      "methods": {
        "verify": {
          "parameterOrder": [
            "applicationId"
          ],
          "httpMethod": "GET",
          "id": "games.applications.verify",
          "response": {
            "$ref": "ApplicationVerifyResponse"
          },
          "flatPath": "games/v1/applications/{applicationId}/verify",
          "path": "games/v1/applications/{applicationId}/verify",
          "description": "Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "applicationId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "The application ID from the Google Play developer console."
            }
          }
        },
        "played": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "POST",
          "parameters": {},
          "path": "games/v1/applications/played",
          "parameterOrder": [],
          "description": "Indicate that the currently authenticated user is playing your application.",
          "id": "games.applications.played",
          "flatPath": "games/v1/applications/played"
        },
        "getEndPoint": {
          "parameters": {
            "endPointType": {
              "enum": [
                "END_POINT_TYPE_UNSPECIFIED",
                "PROFILE_CREATION",
                "PROFILE_SETTINGS"
              ],
              "description": "Type of endpoint being requested.",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Request a URL to create a new profile.",
                "Request a URL for the Settings view."
              ],
              "type": "string",
              "location": "query"
            },
            "applicationId": {
              "description": "The application ID from the Google Play developer console.",
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.applications.getEndPoint",
          "path": "games/v1/applications/getEndPoint",
          "httpMethod": "POST",
          "description": "Returns a URL for the requested end point type.",
          "parameterOrder": [],
          "flatPath": "games/v1/applications/getEndPoint",
          "response": {
            "$ref": "EndPoint"
          }
        },
        "get": {
          "description": "Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data.",
          "parameters": {
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            },
            "applicationId": {
              "type": "string",
              "required": true,
              "description": "The application ID from the Google Play developer console.",
              "location": "path"
            },
            "platformType": {
              "location": "query",
              "enum": [
                "PLATFORM_TYPE_UNSPECIFIED",
                "ANDROID",
                "IOS",
                "WEB_APP"
              ],
              "type": "string",
              "enumDescriptions": [
                "Default value, don't use.",
                "Retrieve applications that can be played on Android.",
                "Retrieve applications that can be played on iOS.",
                "Retrieve applications that can be played on desktop web."
              ],
              "description": "Restrict application details returned to the specific platform."
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "applicationId"
          ],
          "id": "games.applications.get",
          "flatPath": "games/v1/applications/{applicationId}",
          "path": "games/v1/applications/{applicationId}",
          "response": {
            "$ref": "Application"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        }
      }
    },
    "leaderboards": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.leaderboards.get",
          "response": {
            "$ref": "Leaderboard"
          },
          "parameterOrder": [
            "leaderboardId"
          ],
          "httpMethod": "GET",
          "flatPath": "games/v1/leaderboards/{leaderboardId}",
          "path": "games/v1/leaderboards/{leaderboardId}",
          "parameters": {
            "leaderboardId": {
              "description": "The ID of the leaderboard.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            }
          },
          "description": "Retrieves the metadata of the leaderboard with the given ID."
        },
        "list": {
          "id": "games.leaderboards.list",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The token returned by the previous request."
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "maxResults": {
              "format": "int32",
              "location": "query",
              "description": "The maximum number of leaderboards to return in the response. For any response, the actual number of leaderboards returned may be less than the specified `maxResults`.",
              "type": "integer"
            }
          },
          "description": "Lists all the leaderboard metadata for your application.",
          "response": {
            "$ref": "LeaderboardListResponse"
          },
          "parameterOrder": [],
          "flatPath": "games/v1/leaderboards",
          "path": "games/v1/leaderboards",
          "httpMethod": "GET"
        }
      }
    },
    "achievements": {
      "methods": {
        "unlock": {
          "parameters": {
            "achievementId": {
              "required": true,
              "location": "path",
              "description": "The ID of the achievement used by this method.",
              "type": "string"
            }
          },
          "flatPath": "games/v1/achievements/{achievementId}/unlock",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/achievements/{achievementId}/unlock",
          "httpMethod": "POST",
          "parameterOrder": [
            "achievementId"
          ],
          "description": "Unlocks this achievement for the currently authenticated player.",
          "id": "games.achievements.unlock",
          "response": {
            "$ref": "AchievementUnlockResponse"
          }
        },
        "reveal": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/achievements/{achievementId}/reveal",
          "description": "Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.",
          "path": "games/v1/achievements/{achievementId}/reveal",
          "response": {
            "$ref": "AchievementRevealResponse"
          },
          "parameters": {
            "achievementId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The ID of the achievement used by this method."
            }
          },
          "id": "games.achievements.reveal",
          "parameterOrder": [
            "achievementId"
          ],
          "httpMethod": "POST"
        },
        "increment": {
          "id": "games.achievements.increment",
          "description": "Increments the steps of the achievement with the given ID for the currently authenticated player.",
          "parameters": {
            "stepsToIncrement": {
              "type": "integer",
              "location": "query",
              "description": "The number of steps to increment.",
              "required": true,
              "format": "int32"
            },
            "requestId": {
              "format": "int64",
              "location": "query",
              "type": "string",
              "description": "A randomly generated numeric ID for each request specified by the caller. This number is used at the server to ensure that the request is handled correctly across retries."
            },
            "achievementId": {
              "location": "path",
              "description": "The ID of the achievement used by this method.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "POST",
          "flatPath": "games/v1/achievements/{achievementId}/increment",
          "path": "games/v1/achievements/{achievementId}/increment",
          "response": {
            "$ref": "AchievementIncrementResponse"
          },
          "parameterOrder": [
            "achievementId",
            "stepsToIncrement"
          ]
        },
        "setStepsAtLeast": {
          "httpMethod": "POST",
          "path": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "id": "games.achievements.setStepsAtLeast",
          "flatPath": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "parameters": {
            "steps": {
              "location": "query",
              "description": "The minimum value to set the steps to.",
              "format": "int32",
              "required": true,
              "type": "integer"
            },
            "achievementId": {
              "required": true,
              "description": "The ID of the achievement used by this method.",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.",
          "response": {
            "$ref": "AchievementSetStepsAtLeastResponse"
          },
          "parameterOrder": [
            "achievementId",
            "steps"
          ]
        },
        "updateMultiple": {
          "description": "Updates multiple achievements for the currently authenticated player.",
          "httpMethod": "POST",
          "response": {
            "$ref": "AchievementUpdateMultipleResponse"
          },
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [],
          "flatPath": "games/v1/achievements/updateMultiple",
          "id": "games.achievements.updateMultiple",
          "path": "games/v1/achievements/updateMultiple",
          "request": {
            "$ref": "AchievementUpdateMultipleRequest"
          }
        },
        "list": {
          "path": "games/v1/players/{playerId}/achievements",
          "httpMethod": "GET",
          "parameters": {
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            },
            "maxResults": {
              "format": "int32",
              "location": "query",
              "description": "The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified `maxResults`.",
              "type": "integer"
            },
            "state": {
              "enum": [
                "ALL",
                "HIDDEN",
                "REVEALED",
                "UNLOCKED"
              ],
              "enumDescriptions": [
                "List all achievements. This is the default.",
                "List only hidden achievements.",
                "List only revealed achievements.",
                "List only unlocked achievements."
              ],
              "type": "string",
              "location": "query",
              "description": "Tells the server to return only achievements with the specified state. If this parameter isn't specified, all achievements are returned."
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "playerId": {
              "required": true,
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "games/v1/players/{playerId}/achievements",
          "response": {
            "$ref": "PlayerAchievementListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "playerId"
          ],
          "description": "Lists the progress for all your application's achievements for the currently authenticated player.",
          "id": "games.achievements.list"
        }
      }
    },
    "revisions": {
      "methods": {
        "check": {
          "id": "games.revisions.check",
          "description": "Checks whether the games client is out of date.",
          "parameterOrder": [
            "clientRevision"
          ],
          "flatPath": "games/v1/revisions/check",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "path": "games/v1/revisions/check",
          "parameters": {
            "clientRevision": {
              "description": "The revision of the client SDK used by your application. Format: `[PLATFORM_TYPE]:[VERSION_NUMBER]`. Possible values of `PLATFORM_TYPE` are: * `ANDROID` - Client is running the Android SDK. * `IOS` - Client is running the iOS SDK. * `WEB_APP` - Client is running as a Web App.",
              "required": true,
              "type": "string",
              "location": "query"
            }
          },
          "response": {
            "$ref": "RevisionCheckResponse"
          }
        }
      }
    },
    "events": {
      "methods": {
        "record": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          },
          "id": "games.events.record",
          "path": "games/v1/events",
          "response": {
            "$ref": "EventUpdateResponse"
          },
          "description": "Records a batch of changes to the number of times events have occurred for the currently authenticated user of this application.",
          "httpMethod": "POST",
          "flatPath": "games/v1/events",
          "request": {
            "$ref": "EventRecordRequest"
          },
          "parameterOrder": []
        },
        "listByPlayer": {
          "description": "Returns a list showing the current progress on events in this application for the currently authenticated user.",
          "id": "games.events.listByPlayer",
          "path": "games/v1/events",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/events",
          "response": {
            "$ref": "PlayerEventListResponse"
          },
          "parameterOrder": [],
          "parameters": {
            "maxResults": {
              "description": "The maximum number of events to return in the response, used for paging. For any response, the actual number of events to return may be less than the specified maxResults.",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            }
          },
          "httpMethod": "GET"
        },
        "listDefinitions": {
          "parameters": {
            "maxResults": {
              "description": "The maximum number of event definitions to return in the response, used for paging. For any response, the actual number of event definitions to return may be less than the specified `maxResults`.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          },
          "response": {
            "$ref": "EventDefinitionListResponse"
          },
          "httpMethod": "GET",
          "path": "games/v1/eventDefinitions",
          "description": "Returns a list of the event definitions in this application.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.events.listDefinitions",
          "parameterOrder": [],
          "flatPath": "games/v1/eventDefinitions"
        }
      }
    },
    "metagame": {
      "methods": {
        "listCategoriesByPlayer": {
          "parameterOrder": [
            "playerId",
            "collection"
          ],
          "flatPath": "games/v1/players/{playerId}/categories/{collection}",
          "parameters": {
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of category resources to return in the response, used for paging. For any response, the actual number of category resources returned may be less than the specified `maxResults`.",
              "format": "int32",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "collection": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The collection of categories for which data will be returned.",
              "enum": [
                "COLLECTION_UNSPECIFIED",
                "ALL"
              ],
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Retrieve data for all categories. This is the default."
              ]
            },
            "playerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID."
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "CategoryListResponse"
          },
          "description": "List play data aggregated per category for the player corresponding to `playerId`.",
          "path": "games/v1/players/{playerId}/categories/{collection}",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.metagame.listCategoriesByPlayer"
        },
        "getMetagameConfig": {
          "path": "games/v1/metagameConfig",
          "parameterOrder": [],
          "response": {
            "$ref": "MetagameConfig"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "flatPath": "games/v1/metagameConfig",
          "id": "games.metagame.getMetagameConfig",
          "parameters": {},
          "description": "Return the metagame configuration data for the calling application."
        }
      }
    },
    "players": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/players/me/players/{collection}",
          "parameters": {
            "pageToken": {
              "description": "The token returned by the previous request.",
              "type": "string",
              "location": "query"
            },
            "collection": {
              "required": true,
              "enumDeprecated": [
                true,
                true,
                false
              ],
              "enum": [
                "CONNECTED",
                "VISIBLE",
                "FRIENDS_ALL"
              ],
              "enumDescriptions": [
                "Retrieve a list of players that are also playing this game in reverse chronological order.",
                "Retrieve a list of players in the user's social graph that are visible to this game.",
                "Retrieve a list of players who are friends of the user in alphabetical order."
              ],
              "location": "path",
              "type": "string",
              "description": "Collection of players being retrieved"
            },
            "maxResults": {
              "format": "int32",
              "location": "query",
              "type": "integer",
              "description": "The maximum number of player resources to return in the response, used for paging. For any response, the actual number of player resources returned may be less than the specified `maxResults`."
            },
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            }
          },
          "description": "Get the collection of players for the currently authenticated user.",
          "id": "games.players.list",
          "parameterOrder": [
            "collection"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "PlayerListResponse"
          },
          "path": "games/v1/players/me/players/{collection}"
        },
        "getMultipleApplicationPlayerIds": {
          "id": "games.players.getMultipleApplicationPlayerIds",
          "response": {
            "$ref": "GetMultipleApplicationPlayerIdsResponse"
          },
          "parameters": {
            "applicationIds": {
              "repeated": true,
              "type": "string",
              "location": "query",
              "description": "Required. The application IDs from the Google Play developer console for the games to return scoped ids for."
            }
          },
          "path": "games/v1/players/me/multipleApplicationPlayerIds",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [],
          "flatPath": "games/v1/players/me/multipleApplicationPlayerIds",
          "httpMethod": "GET",
          "description": "Get the application player ids for the currently authenticated player across all requested games by the same developer as the calling application. This will only return ids for players that actually have an id (scoped or otherwise) with that game."
        },
        "get": {
          "flatPath": "games/v1/players/{playerId}",
          "parameters": {
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "playerIdConsistencyToken": {
              "description": "Consistency token of the player id. The call returns a 'not found' result when the token is present and invalid. Empty value is ignored. See also GlobalPlayerIdConsistencyTokenProto",
              "type": "string",
              "location": "query"
            },
            "playerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID."
            }
          },
          "id": "games.players.get",
          "description": "Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "playerId"
          ],
          "path": "games/v1/players/{playerId}",
          "httpMethod": "GET",
          "response": {
            "$ref": "Player"
          }
        },
        "getScopedPlayerIds": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/players/me/scopedIds",
          "description": "Retrieves scoped player identifiers for currently authenticated user.",
          "id": "games.players.getScopedPlayerIds",
          "httpMethod": "GET",
          "path": "games/v1/players/me/scopedIds",
          "response": {
            "$ref": "ScopedPlayerIds"
          },
          "parameters": {},
          "parameterOrder": []
        }
      }
    },
    "achievementDefinitions": {
      "methods": {
        "list": {
          "flatPath": "games/v1/achievements",
          "description": "Lists all the achievement definitions for your application.",
          "id": "games.achievementDefinitions.list",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "path": "games/v1/achievements",
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "description": "The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified `maxResults`.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "parameterOrder": [],
          "response": {
            "$ref": "AchievementDefinitionsListResponse"
          }
        }
      }
    },
    "snapshots": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "id": "games.snapshots.get",
          "parameters": {
            "snapshotId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The ID of the snapshot."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Snapshot"
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Retrieves the metadata for a given snapshot ID.",
          "path": "games/v1/snapshots/{snapshotId}",
          "parameterOrder": [
            "snapshotId"
          ],
          "flatPath": "games/v1/snapshots/{snapshotId}"
        },
        "list": {
          "parameterOrder": [
            "playerId"
          ],
          "description": "Retrieves a list of snapshots created by your application for the player corresponding to the player ID.",
          "path": "games/v1/players/{playerId}/snapshots",
          "id": "games.snapshots.list",
          "flatPath": "games/v1/players/{playerId}/snapshots",
          "response": {
            "$ref": "SnapshotListResponse"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "description": "The maximum number of snapshot resources to return in the response, used for paging. For any response, the actual number of snapshot resources returned may be less than the specified `maxResults`.",
              "format": "int32"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "playerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID."
            }
          }
        }
      }
    },
    "scores": {
      "methods": {
        "listWindow": {
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "parameters": {
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "resultsAbove": {
              "type": "integer",
              "description": "The preferred number of scores to return above the player's score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults.",
              "location": "query",
              "format": "int32"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.",
              "format": "int32"
            },
            "collection": {
              "enumDeprecated": [
                false,
                false,
                true,
                false
              ],
              "description": "The collection of scores you're requesting.",
              "required": true,
              "enumDescriptions": [
                "Default value. This value is unused.",
                "List all scores in the public leaderboard.",
                "(Obsolete) Legacy G+ social scores.",
                "List only scores of friends."
              ],
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "type": "string",
              "location": "path"
            },
            "leaderboardId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The ID of the leaderboard."
            },
            "timeSpan": {
              "description": "The time span for the scores and ranks you're requesting.",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "The score is an all-time score.",
                "The score is a weekly score.",
                "The score is a daily score."
              ],
              "location": "query",
              "required": true,
              "type": "string",
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ]
            },
            "returnTopIfAbsent": {
              "description": "True if the top scores should be returned when the player is not in the leaderboard. Defaults to true.",
              "type": "boolean",
              "location": "query"
            },
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            }
          },
          "path": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "description": "Lists the scores in a leaderboard around (and including) a player's score.",
          "response": {
            "$ref": "LeaderboardScores"
          },
          "id": "games.scores.listWindow",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET"
        },
        "get": {
          "path": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "description": "Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.",
          "parameters": {
            "playerId": {
              "type": "string",
              "location": "path",
              "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID.",
              "required": true
            },
            "leaderboardId": {
              "required": true,
              "description": "The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all leaderboards for this application.",
              "type": "string",
              "location": "path"
            },
            "pageToken": {
              "type": "string",
              "description": "The token returned by the previous request.",
              "location": "query"
            },
            "timeSpan": {
              "type": "string",
              "required": true,
              "location": "path",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "Get the high scores for all time spans. If this is used, maxResults values will be ignored.",
                "Get the all time high score.",
                "List the top scores for the current day.",
                "List the top scores for the current week."
              ],
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "description": "The time span for the scores and ranks you're requesting."
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "includeRankType": {
              "location": "query",
              "enumDeprecated": [
                false,
                false,
                false,
                true,
                false
              ],
              "type": "string",
              "enum": [
                "INCLUDE_RANK_TYPE_UNSPECIFIED",
                "ALL",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "enumDescriptions": [
                "Default value. Should be unused.",
                "Retrieve all supported ranks. In HTTP, this parameter value can also be specified as `ALL`.",
                "Retrieve public ranks, if the player is sharing their gameplay activity publicly.",
                "(Obsolete) Retrieve the social rank.",
                "Retrieve the rank on the friends collection."
              ],
              "description": "The types of ranks to return. If the parameter is omitted, no ranks will be returned."
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.",
              "type": "integer",
              "format": "int32"
            }
          },
          "response": {
            "$ref": "PlayerLeaderboardScoreListResponse"
          },
          "parameterOrder": [
            "playerId",
            "leaderboardId",
            "timeSpan"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.scores.get",
          "flatPath": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}"
        },
        "list": {
          "path": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "response": {
            "$ref": "LeaderboardScores"
          },
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.",
              "type": "integer",
              "format": "int32"
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "leaderboardId": {
              "description": "The ID of the leaderboard.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "collection": {
              "enumDeprecated": [
                false,
                false,
                true,
                false
              ],
              "location": "path",
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "description": "The collection of scores you're requesting.",
              "required": true,
              "type": "string",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "List all scores in the public leaderboard.",
                "(Obsolete) Legacy G+ social scores.",
                "List only scores of friends."
              ]
            },
            "timeSpan": {
              "required": true,
              "location": "query",
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "type": "string",
              "enumDescriptions": [
                "Default value. This value is unused.",
                "The score is an all-time score.",
                "The score is a weekly score.",
                "The score is a daily score."
              ],
              "description": "The time span for the scores and ranks you're requesting."
            }
          },
          "id": "games.scores.list",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "description": "Lists the scores in a leaderboard, starting from the top."
        },
        "submit": {
          "path": "games/v1/leaderboards/{leaderboardId}/scores",
          "parameterOrder": [
            "leaderboardId",
            "score"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "PlayerScoreResponse"
          },
          "id": "games.scores.submit",
          "description": "Submits a score to the specified leaderboard.",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "scoreTag": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-._~]{0,64}",
              "description": "Additional information about the score you're submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
              "location": "query"
            },
            "leaderboardId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "The ID of the leaderboard."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            },
            "score": {
              "required": true,
              "description": "The score you're submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units.",
              "location": "query",
              "type": "string",
              "format": "int64"
            }
          }
        },
        "submitMultiple": {
          "request": {
            "$ref": "PlayerScoreSubmissionList"
          },
          "id": "games.scores.submitMultiple",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "POST",
          "path": "games/v1/leaderboards/scores",
          "parameterOrder": [],
          "flatPath": "games/v1/leaderboards/scores",
          "parameters": {
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "PlayerScoreListResponse"
          },
          "description": "Submits multiple scores to leaderboards."
        }
      }
    }
  },
  "protocol": "rest",
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "kind": "discovery#restDescription",
  "revision": "20230712",
  "documentationLink": "https://developers.google.com/games/",
  "basePath": "",
  "version": "v1",
  "name": "games",
  "schemas": {
    "PlayerEvent": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`.",
          "type": "string"
        },
        "definitionId": {
          "type": "string",
          "description": "The ID of the event definition."
        },
        "numEvents": {
          "type": "string",
          "description": "The current number of times this event has occurred.",
          "format": "int64"
        },
        "playerId": {
          "description": "The ID of the player.",
          "type": "string"
        },
        "formattedNumEvents": {
          "description": "The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "PlayerEvent",
      "description": "An event status resource."
    },
    "EventDefinitionListResponse": {
      "type": "object",
      "properties": {
        "items": {
          "description": "The event definitions.",
          "items": {
            "$ref": "EventDefinition"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinitionListResponse`."
        }
      },
      "id": "EventDefinitionListResponse",
      "description": "A ListDefinitions response."
    },
    "AchievementRevealResponse": {
      "id": "AchievementRevealResponse",
      "description": "An achievement reveal response",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementRevealResponse`.",
          "type": "string"
        },
        "currentState": {
          "type": "string",
          "enum": [
            "REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "description": "The current state of the achievement for which a reveal was attempted. This might be `UNLOCKED` if the achievement was already unlocked."
        }
      },
      "type": "object"
    },
    "ApplicationPlayerId": {
      "properties": {
        "applicationId": {
          "type": "string",
          "description": "The application that this player identifier is for."
        },
        "playerId": {
          "type": "string",
          "description": "The player identifier for the application."
        }
      },
      "description": "Primary scoped player identifier for an application.",
      "type": "object",
      "id": "ApplicationPlayerId"
    },
    "PlayerListResponse": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Player"
          },
          "description": "The players."
        }
      },
      "id": "PlayerListResponse",
      "description": "A third party player list response.",
      "type": "object"
    },
    "AchievementUnlockResponse": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUnlockResponse`."
        },
        "newlyUnlocked": {
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).",
          "type": "boolean"
        }
      },
      "id": "AchievementUnlockResponse",
      "type": "object",
      "description": "An achievement unlock response"
    },
    "InstanceAndroidDetails": {
      "properties": {
        "preferred": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceAndroidDetails`."
        },
        "packageName": {
          "type": "string",
          "description": "Android package name which maps to Google Play URL."
        },
        "enablePiracyCheck": {
          "description": "Flag indicating whether the anti-piracy check is enabled.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "The Android instance details resource.",
      "id": "InstanceAndroidDetails"
    },
    "AchievementIncrementResponse": {
      "type": "object",
      "description": "An achievement increment response",
      "id": "AchievementIncrementResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementIncrementResponse`.",
          "type": "string"
        },
        "currentSteps": {
          "type": "integer",
          "format": "int32",
          "description": "The current steps recorded for this incremental achievement."
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of steps required to unlock."
        }
      }
    },
    "PlayerLeaderboardScoreListResponse": {
      "properties": {
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "items": {
          "description": "The leaderboard scores.",
          "items": {
            "$ref": "PlayerLeaderboardScore"
          },
          "type": "array"
        },
        "player": {
          "description": "The Player resources for the owner of this score.",
          "$ref": "Player"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScoreListResponse`.",
          "type": "string"
        }
      },
      "id": "PlayerLeaderboardScoreListResponse",
      "description": "A list of player leaderboard scores.",
      "type": "object"
    },
    "AchievementDefinition": {
      "description": "An achievement definition object.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the achievement."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the achievement.",
          "type": "string"
        },
        "isUnlockedIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the unlocked icon image being returned is a default image, or is game-provided."
        },
        "isRevealedIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the revealed icon image being returned is a default image, or is provided by the game."
        },
        "experiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "Experience points which will be earned when unlocking this achievement."
        },
        "revealedIconUrl": {
          "type": "string",
          "description": "The image URL for the revealed achievement icon."
        },
        "unlockedIconUrl": {
          "description": "The image URL for the unlocked achievement icon.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the achievement."
        },
        "initialState": {
          "description": "The initial state of the achievement.",
          "type": "string",
          "enum": [
            "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        },
        "achievementType": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is either locked or unlocked.",
            "Achievement is incremental."
          ],
          "type": "string",
          "enum": [
            "ACHIEVEMENT_TYPE_UNSPECIFIED",
            "STANDARD",
            "INCREMENTAL"
          ],
          "description": "The type of the achievement."
        },
        "formattedTotalSteps": {
          "type": "string",
          "description": "The total steps for an incremental achievement as a string."
        },
        "totalSteps": {
          "type": "integer",
          "format": "int32",
          "description": "The total steps for an incremental achievement."
        }
      },
      "id": "AchievementDefinition"
    },
    "RevisionCheckResponse": {
      "type": "object",
      "description": "A third party checking a revision response.",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#revisionCheckResponse`.",
          "type": "string"
        },
        "revisionStatus": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The revision being used is current.",
            "There is currently a newer version available, but the revision being used still works.",
            "The revision being used is not supported in any released version."
          ],
          "description": "The result of the revision check.",
          "type": "string",
          "enum": [
            "REVISION_STATUS_UNSPECIFIED",
            "OK",
            "DEPRECATED",
            "INVALID"
          ]
        },
        "apiVersion": {
          "description": "The version of the API this client revision should use when calling API methods.",
          "type": "string"
        }
      },
      "id": "RevisionCheckResponse"
    },
    "PlayerScore": {
      "id": "PlayerScore",
      "properties": {
        "formattedScore": {
          "type": "string",
          "description": "The formatted score for this player score."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`."
        },
        "timeSpan": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "description": "The time span for this player score."
        },
        "score": {
          "type": "string",
          "format": "int64",
          "description": "The numerical value for this player score."
        },
        "scoreTag": {
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        }
      },
      "description": "A player score.",
      "type": "object"
    },
    "LeaderboardListResponse": {
      "id": "LeaderboardListResponse",
      "type": "object",
      "description": "A list of leaderboard objects.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardListResponse`."
        },
        "items": {
          "description": "The leaderboards.",
          "items": {
            "$ref": "Leaderboard"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results."
        }
      }
    },
    "Category": {
      "id": "Category",
      "description": "Data related to individual game categories.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#category`."
        },
        "category": {
          "description": "The category name.",
          "type": "string"
        },
        "experiencePoints": {
          "type": "string",
          "format": "int64",
          "description": "Experience points earned in this category."
        }
      }
    },
    "ImageAsset": {
      "description": "An image asset object.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the asset."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#imageAsset`."
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "The height of the asset."
        },
        "width": {
          "description": "The width of the asset.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string",
          "description": "The name of the asset."
        }
      },
      "id": "ImageAsset",
      "type": "object"
    },
    "ProfileSettings": {
      "type": "object",
      "id": "ProfileSettings",
      "description": "Profile settings",
      "properties": {
        "profileVisible": {
          "description": "Whether the player's profile is visible to the currently signed in player.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`."
        },
        "friendsListVisibility": {
          "type": "string",
          "enumDescriptions": [
            "Unused.",
            "The friends list is currently visible to the game.",
            "The developer does not have access to the friends list, but can call the Android API to show a consent dialog.",
            "The friends list is currently unavailable for this user, and it is not possible to request access at this time, either because the user has permanently declined or the friends feature is not available to them. In this state, any attempts to request access to the friends list will be unsuccessful."
          ],
          "enum": [
            "FRIENDS_LIST_VISIBILITY_UNSPECIFIED",
            "VISIBLE",
            "REQUEST_REQUIRED",
            "UNAVAILABLE"
          ]
        }
      }
    },
    "GamesAchievementIncrement": {
      "description": "The payload to request to increment an achievement.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementIncrement`."
        },
        "requestId": {
          "format": "int64",
          "type": "string",
          "description": "The requestId associated with an increment to an achievement."
        },
        "steps": {
          "format": "int32",
          "type": "integer",
          "description": "The number of steps to be incremented."
        }
      },
      "id": "GamesAchievementIncrement",
      "type": "object"
    },
    "AchievementUpdateResponse": {
      "properties": {
        "newlyUnlocked": {
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).",
          "type": "boolean"
        },
        "currentState": {
          "type": "string",
          "enum": [
            "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "description": "The current state of the achievement.",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        },
        "achievementId": {
          "description": "The achievement this update is was applied to.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`."
        },
        "updateOccurred": {
          "type": "boolean",
          "description": "Whether the requested updates actually affected the achievement."
        },
        "currentSteps": {
          "description": "The current steps recorded for this achievement if it is incremental.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "AchievementUpdateResponse",
      "description": "An updated achievement.",
      "type": "object"
    },
    "AchievementSetStepsAtLeastResponse": {
      "description": "An achievement set steps at least response.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementSetStepsAtLeastResponse`."
        },
        "currentSteps": {
          "type": "integer",
          "format": "int32",
          "description": "The current steps recorded for this incremental achievement."
        },
        "newlyUnlocked": {
          "description": "Whether the current steps for the achievement has reached the number of steps required to unlock.",
          "type": "boolean"
        }
      },
      "id": "AchievementSetStepsAtLeastResponse"
    },
    "ApplicationVerifyResponse": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationVerifyResponse`.",
          "type": "string"
        },
        "alternate_player_id": {
          "type": "string",
          "description": "An alternate ID that was once used for the player that was issued the auth token used in this request. (This field is not normally populated.)"
        },
        "player_id": {
          "type": "string",
          "description": "The ID of the player that was issued the auth token used in this request."
        }
      },
      "description": "A third party application verification response resource.",
      "id": "ApplicationVerifyResponse",
      "type": "object"
    },
    "EventBatchRecordFailure": {
      "properties": {
        "range": {
          "description": "The time range which was rejected; empty for a request-wide failure.",
          "$ref": "EventPeriodRange"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventBatchRecordFailure`.",
          "type": "string"
        },
        "failureCause": {
          "description": "The cause for the update failure.",
          "type": "string",
          "enum": [
            "EVENT_FAILURE_CAUSE_UNSPECIFIED",
            "TOO_LARGE",
            "TIME_PERIOD_EXPIRED",
            "TIME_PERIOD_SHORT",
            "TIME_PERIOD_LONG",
            "ALREADY_UPDATED",
            "RECORD_RATE_HIGH"
          ],
          "enumDescriptions": [
            "Default value. Should not be used.",
            "A batch request was issued with more events than are allowed in a single batch.",
            "A batch was sent with data too far in the past to record.",
            "A batch was sent with a time range that was too short.",
            "A batch was sent with a time range that was too long.",
            "An attempt was made to record a batch of data which was already seen.",
            "An attempt was made to record data faster than the server will apply updates."
          ]
        }
      },
      "description": "A batch update failure resource.",
      "id": "EventBatchRecordFailure",
      "type": "object"
    },
    "PlayerAchievementListResponse": {
      "id": "PlayerAchievementListResponse",
      "type": "object",
      "properties": {
        "items": {
          "description": "The achievements.",
          "type": "array",
          "items": {
            "$ref": "PlayerAchievement"
          }
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievementListResponse`."
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        }
      },
      "description": "A list of achievement objects."
    },
    "Leaderboard": {
      "description": "The Leaderboard resource.",
      "properties": {
        "order": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Larger values are better; scores are sorted in descending order",
            "Smaller values are better; scores are sorted in ascending order"
          ],
          "type": "string",
          "enum": [
            "SCORE_ORDER_UNSPECIFIED",
            "LARGER_IS_BETTER",
            "SMALLER_IS_BETTER"
          ],
          "description": "How scores are ordered."
        },
        "iconUrl": {
          "description": "The icon for the leaderboard.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the leaderboard."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`.",
          "type": "string"
        },
        "isIconUrlDefault": {
          "description": "Indicates whether the icon image being returned is a default image, or is game-provided.",
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "description": "The leaderboard ID."
        }
      },
      "id": "Leaderboard",
      "type": "object"
    },
    "ScopedPlayerIds": {
      "description": "Scoped player identifiers.",
      "id": "ScopedPlayerIds",
      "type": "object",
      "properties": {
        "gamePlayerId": {
          "type": "string",
          "description": "Game-scoped player identifier. This is the same id that is returned in GetPlayer game_player_id field."
        },
        "developerPlayerKey": {
          "type": "string",
          "description": "Identifier of the player across all games of the given developer. Every player has the same developer_player_key in all games of one developer. Developer player key changes for the game if the game is transferred to another developer. Note that game_player_id will stay unchanged."
        }
      }
    },
    "ScoreSubmission": {
      "properties": {
        "signature": {
          "description": "Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "score": {
          "format": "int64",
          "description": "The new score being submitted.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`.",
          "type": "string"
        },
        "leaderboardId": {
          "description": "The leaderboard this score is being submitted to.",
          "type": "string"
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        }
      },
      "id": "ScoreSubmission",
      "description": "A request to submit a score to leaderboards.",
      "type": "object"
    },
    "EndPoint": {
      "description": "Container for a URL end point of the requested type.",
      "properties": {
        "url": {
          "type": "string",
          "description": "A URL suitable for loading in a web browser for the requested endpoint."
        }
      },
      "type": "object",
      "id": "EndPoint"
    },
    "CategoryListResponse": {
      "id": "CategoryListResponse",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Category"
          },
          "description": "The list of categories with usage data."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#categoryListResponse`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A third party list metagame categories response."
    },
    "EventRecordRequest": {
      "id": "EventRecordRequest",
      "type": "object",
      "properties": {
        "timePeriods": {
          "description": "A list of the time period updates being made in this request.",
          "items": {
            "$ref": "EventPeriodUpdate"
          },
          "type": "array"
        },
        "currentTimeMillis": {
          "format": "int64",
          "type": "string",
          "description": "The current time when this update was sent, in milliseconds, since 1970 UTC (Unix Epoch)."
        },
        "requestId": {
          "type": "string",
          "format": "int64",
          "description": "The request ID used to identify this attempt to record events."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordRequest`."
        }
      },
      "description": "An event period update resource."
    },
    "LeaderboardScoreRank": {
      "properties": {
        "formattedRank": {
          "description": "The rank in the leaderboard as a string.",
          "type": "string"
        },
        "numScores": {
          "format": "int64",
          "description": "The number of scores in the leaderboard.",
          "type": "string"
        },
        "rank": {
          "type": "string",
          "format": "int64",
          "description": "The rank in the leaderboard."
        },
        "formattedNumScores": {
          "type": "string",
          "description": "The number of scores in the leaderboard as a string."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScoreRank`."
        }
      },
      "description": "A score rank in a leaderboard.",
      "type": "object",
      "id": "LeaderboardScoreRank"
    },
    "PlayerEventListResponse": {
      "id": "PlayerEventListResponse",
      "properties": {
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "items": {
          "description": "The player events.",
          "type": "array",
          "items": {
            "$ref": "PlayerEvent"
          }
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEventListResponse`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A ListByPlayer response."
    },
    "Application": {
      "id": "Application",
      "description": "The Application resource.",
      "type": "object",
      "properties": {
        "enabledFeatures": {
          "type": "array",
          "description": "A list of features that have been enabled for the application.",
          "items": {
            "type": "string",
            "enum": [
              "APPLICATION_FEATURE_UNSPECIFIED",
              "SNAPSHOTS"
            ],
            "enumDescriptions": [
              "Safe default, don't use.",
              "Saved Games (snapshots)."
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "The description of the application."
        },
        "instances": {
          "items": {
            "$ref": "Instance"
          },
          "description": "The instances of the application.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#application`."
        },
        "id": {
          "type": "string",
          "description": "The ID of the application."
        },
        "themeColor": {
          "type": "string",
          "description": "A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \"E0E0E0\")."
        },
        "name": {
          "description": "The name of the application.",
          "type": "string"
        },
        "author": {
          "description": "The author of the application.",
          "type": "string"
        },
        "category": {
          "description": "The category of the application.",
          "$ref": "ApplicationCategory"
        },
        "leaderboard_count": {
          "description": "The number of leaderboards visible to the currently authenticated player.",
          "format": "int32",
          "type": "integer"
        },
        "assets": {
          "description": "The assets of the application.",
          "items": {
            "$ref": "ImageAsset"
          },
          "type": "array"
        },
        "achievement_count": {
          "description": "The number of achievements visible to the currently authenticated player.",
          "format": "int32",
          "type": "integer"
        },
        "lastUpdatedTimestamp": {
          "description": "The last updated timestamp of the application.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "EventRecordFailure": {
      "properties": {
        "eventId": {
          "description": "The ID of the event that was not updated.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordFailure`."
        },
        "failureCause": {
          "enum": [
            "EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID_UPDATE_VALUE"
          ],
          "description": "The cause for the update failure.",
          "enumDescriptions": [
            "Default value. Should not use.",
            "An attempt was made to set an event that was not defined.",
            "An attempt was made to increment an event by a non-positive value."
          ],
          "type": "string"
        }
      },
      "id": "EventRecordFailure",
      "type": "object",
      "description": "An event update failure resource."
    },
    "PlayerScoreSubmissionList": {
      "id": "PlayerScoreSubmissionList",
      "type": "object",
      "description": "A list of score submission requests.",
      "properties": {
        "scores": {
          "items": {
            "$ref": "ScoreSubmission"
          },
          "description": "The score submissions.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreSubmissionList`."
        }
      }
    },
    "Player": {
      "id": "Player",
      "properties": {
        "title": {
          "type": "string",
          "description": "The player's title rewarded for their game activities."
        },
        "name": {
          "type": "object",
          "description": "A representation of the individual components of the name.",
          "properties": {
            "familyName": {
              "type": "string",
              "description": "The family name of this player. In some places, this is known as the last name."
            },
            "givenName": {
              "type": "string",
              "description": "The given name of this player. In some places, this is known as the first name."
            }
          }
        },
        "bannerUrlPortrait": {
          "type": "string",
          "description": "The url to the portrait mode player banner image."
        },
        "profileSettings": {
          "description": "The player's profile settings. Controls whether or not the player's profile is visible to other players.",
          "$ref": "ProfileSettings"
        },
        "gamePlayerId": {
          "description": "Per-application unique player identifier.",
          "type": "string"
        },
        "originalPlayerId": {
          "type": "string",
          "description": "The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#player`",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name to display for the player."
        },
        "playerId": {
          "type": "string",
          "description": "The ID of the player."
        },
        "experienceInfo": {
          "$ref": "PlayerExperienceInfo",
          "description": "An object to represent Play Game experience information for the player."
        },
        "friendStatus": {
          "enum": [
            "FRIEND_STATUS_UNSPECIFIED",
            "NO_RELATIONSHIP",
            "FRIEND"
          ],
          "description": "The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "There is no relationship between the players.",
            "The player and requester are friends."
          ],
          "type": "string"
        },
        "bannerUrlLandscape": {
          "description": "The url to the landscape mode player banner image.",
          "type": "string"
        },
        "avatarImageUrl": {
          "description": "The base URL for the image that represents the player.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A Player resource."
    },
    "SnapshotListResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results. If there are no more results, the token is omitted."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotListResponse`."
        },
        "items": {
          "description": "The snapshots.",
          "items": {
            "$ref": "Snapshot"
          },
          "type": "array"
        }
      },
      "description": "A third party list snapshots response.",
      "id": "SnapshotListResponse"
    },
    "AchievementUpdateRequest": {
      "description": "A request to update an achievement.",
      "properties": {
        "setStepsAtLeastPayload": {
          "description": "The payload if an update of type `SET_STEPS_AT_LEAST` was requested for the achievement.",
          "$ref": "GamesAchievementSetStepsAtLeast"
        },
        "updateType": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked.",
            "Achievement is incremented.",
            "Achievement progress is set to at least the passed value."
          ],
          "enum": [
            "ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED",
            "REVEAL",
            "UNLOCK",
            "INCREMENT",
            "SET_STEPS_AT_LEAST"
          ],
          "description": "The type of update being applied.",
          "type": "string"
        },
        "achievementId": {
          "description": "The achievement this update is being applied to.",
          "type": "string"
        },
        "incrementPayload": {
          "description": "The payload if an update of type `INCREMENT` was requested for the achievement.",
          "$ref": "GamesAchievementIncrement"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "AchievementUpdateRequest"
    },
    "LeaderboardEntry": {
      "id": "LeaderboardEntry",
      "type": "object",
      "properties": {
        "scoreTag": {
          "type": "string",
          "description": "Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "scoreRank": {
          "description": "The rank of this score for this leaderboard.",
          "type": "string",
          "format": "int64"
        },
        "scoreValue": {
          "description": "The numerical value of this score.",
          "type": "string",
          "format": "int64"
        },
        "player": {
          "$ref": "Player",
          "description": "The player who holds this score."
        },
        "timeSpan": {
          "type": "string",
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "description": "The time span of this high score."
        },
        "formattedScoreRank": {
          "description": "The localized string for the rank of this score for this leaderboard.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`."
        },
        "writeTimestampMillis": {
          "type": "string",
          "description": "The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.",
          "format": "int64"
        },
        "formattedScore": {
          "description": "The localized string for the numerical value of this score.",
          "type": "string"
        }
      },
      "description": "The Leaderboard Entry resource."
    },
    "PlayerLevel": {
      "type": "object",
      "description": "1P/3P metadata about a user's level.",
      "id": "PlayerLevel",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLevel`.",
          "type": "string"
        },
        "minExperiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "The minimum experience points for this level."
        },
        "level": {
          "format": "int32",
          "description": "The level for the user.",
          "type": "integer"
        },
        "maxExperiencePoints": {
          "description": "The maximum experience points for this level.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "EventPeriodRange": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodRange`."
        },
        "periodEndMillis": {
          "type": "string",
          "format": "int64",
          "description": "The time when this update period ends, in millis, since 1970 UTC (Unix Epoch)."
        },
        "periodStartMillis": {
          "type": "string",
          "format": "int64",
          "description": "The time when this update period begins, in millis, since 1970 UTC (Unix Epoch)."
        }
      },
      "type": "object",
      "description": "An event period time range.",
      "id": "EventPeriodRange"
    },
    "PlayerScoreListResponse": {
      "type": "object",
      "id": "PlayerScoreListResponse",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreListResponse`."
        },
        "submittedScores": {
          "description": "The score submissions statuses.",
          "type": "array",
          "items": {
            "$ref": "PlayerScoreResponse"
          }
        }
      },
      "description": "A list of score submission statuses."
    },
    "InstanceWebDetails": {
      "type": "object",
      "properties": {
        "launchUrl": {
          "description": "Launch URL for the game.",
          "type": "string"
        },
        "preferred": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceWebDetails`."
        }
      },
      "description": "The Web details resource.",
      "id": "InstanceWebDetails"
    },
    "AchievementDefinitionsListResponse": {
      "description": "A list of achievement definition objects.",
      "type": "object",
      "id": "AchievementDefinitionsListResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinitionsListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results."
        },
        "items": {
          "items": {
            "$ref": "AchievementDefinition"
          },
          "type": "array",
          "description": "The achievement definitions."
        }
      }
    },
    "StatsResponse": {
      "id": "StatsResponse",
      "properties": {
        "spend_percentile": {
          "description": "The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.",
          "format": "float",
          "type": "number"
        },
        "total_spend_next_28_days": {
          "format": "float",
          "description": "The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.",
          "type": "number"
        },
        "spend_probability": {
          "type": "number",
          "format": "float",
          "description": "The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information."
        },
        "avg_session_length_minutes": {
          "format": "float",
          "description": "Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.",
          "type": "number"
        },
        "high_spender_probability": {
          "description": "The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.",
          "format": "float",
          "type": "number"
        },
        "num_sessions": {
          "format": "int32",
          "type": "integer",
          "description": "The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information."
        },
        "churn_probability": {
          "format": "float",
          "type": "number",
          "description": "The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information."
        },
        "days_since_last_played": {
          "type": "integer",
          "format": "int32",
          "description": "Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`."
        },
        "num_purchases": {
          "format": "int32",
          "description": "Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.",
          "type": "integer"
        },
        "num_sessions_percentile": {
          "format": "float",
          "description": "The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.",
          "type": "number"
        }
      },
      "type": "object",
      "description": "A third party stats resource."
    },
    "Instance": {
      "type": "object",
      "description": "The Instance resource.",
      "properties": {
        "androidInstance": {
          "$ref": "InstanceAndroidDetails",
          "description": "Platform dependent details for Android."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`."
        },
        "turnBasedPlay": {
          "type": "boolean",
          "description": "Flag to show if this game instance supports turn based play."
        },
        "acquisitionUri": {
          "description": "URI which shows where a user can acquire this instance.",
          "type": "string"
        },
        "webInstance": {
          "description": "Platform dependent details for Web.",
          "$ref": "InstanceWebDetails"
        },
        "platformType": {
          "description": "The platform type.",
          "enum": [
            "PLATFORM_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "WEB_APP"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value. Should be unused.",
            "Instance is for Android.",
            "Instance is for iOS.",
            "Instance is for Web App."
          ]
        },
        "realtimePlay": {
          "type": "boolean",
          "description": "Flag to show if this game instance supports realtime play."
        },
        "name": {
          "description": "Localized display name.",
          "type": "string"
        },
        "iosInstance": {
          "description": "Platform dependent details for iOS.",
          "$ref": "InstanceIosDetails"
        }
      },
      "id": "Instance"
    },
    "PlayerAchievement": {
      "properties": {
        "achievementState": {
          "type": "string",
          "description": "The state of the achievement.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ]
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "string",
          "description": "The timestamp of the last modification to this achievement's state."
        },
        "currentSteps": {
          "type": "integer",
          "description": "The current steps for an incremental achievement.",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "description": "The ID of the achievement."
        },
        "experiencePoints": {
          "description": "Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`."
        },
        "formattedCurrentStepsString": {
          "description": "The current steps for an incremental achievement as a string.",
          "type": "string"
        }
      },
      "description": "An achievement object.",
      "id": "PlayerAchievement",
      "type": "object"
    },
    "InstanceIosDetails": {
      "type": "object",
      "id": "InstanceIosDetails",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceIosDetails`.",
          "type": "string"
        },
        "supportIphone": {
          "type": "boolean",
          "description": "Flag to indicate if this instance supports iPhone."
        },
        "supportIpad": {
          "description": "Flag to indicate if this instance supports iPad.",
          "type": "boolean"
        },
        "itunesAppId": {
          "description": "iTunes App ID.",
          "type": "string"
        },
        "preferredForIpad": {
          "description": "Indicates that this instance is the default for new installations on iPad devices.",
          "type": "boolean"
        },
        "bundleIdentifier": {
          "description": "Bundle identifier.",
          "type": "string"
        },
        "preferredForIphone": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations on iPhone devices."
        }
      },
      "description": "The iOS details resource."
    },
    "Snapshot": {
      "id": "Snapshot",
      "description": "An snapshot object.",
      "properties": {
        "driveId": {
          "description": "The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.",
          "type": "string"
        },
        "durationMillis": {
          "type": "string",
          "format": "int64",
          "description": "The duration associated with this snapshot, in millis."
        },
        "lastModifiedMillis": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp (in millis since Unix epoch) of the last modification to this snapshot."
        },
        "uniqueName": {
          "type": "string",
          "description": "The unique name provided when the snapshot was created."
        },
        "id": {
          "description": "The ID of the snapshot.",
          "type": "string"
        },
        "title": {
          "description": "The title of this snapshot.",
          "type": "string"
        },
        "type": {
          "enum": [
            "SNAPSHOT_TYPE_UNSPECIFIED",
            "SAVE_GAME"
          ],
          "type": "string",
          "description": "The type of this snapshot.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "A snapshot representing a save game."
          ]
        },
        "description": {
          "description": "The description of this snapshot.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`."
        },
        "coverImage": {
          "description": "The cover image of this snapshot. May be absent if there is no image.",
          "$ref": "SnapshotImage"
        },
        "progressValue": {
          "format": "int64",
          "description": "The progress value (64-bit integer set by developer) associated with this snapshot.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeaderboardScores": {
      "description": "A ListScores response.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The pagination token for the next page of results."
        },
        "playerScore": {
          "description": "The score of the requesting player on the leaderboard. The player's score may appear both here and in the list of scores above. If you are viewing a public leaderboard and the player is not sharing their gameplay information publicly, the `scoreRank`and `formattedScoreRank` values will not be present.",
          "$ref": "LeaderboardEntry"
        },
        "prevPageToken": {
          "type": "string",
          "description": "The pagination token for the previous page of results."
        },
        "numScores": {
          "format": "int64",
          "description": "The total number of scores in the leaderboard.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "LeaderboardEntry"
          },
          "type": "array",
          "description": "The scores in the leaderboard."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardScores`."
        }
      },
      "id": "LeaderboardScores",
      "type": "object"
    },
    "PlayerExperienceInfo": {
      "type": "object",
      "properties": {
        "currentExperiencePoints": {
          "type": "string",
          "description": "The current number of experience points for the player.",
          "format": "int64"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerExperienceInfo`.",
          "type": "string"
        },
        "currentLevel": {
          "description": "The current level of the player.",
          "$ref": "PlayerLevel"
        },
        "nextLevel": {
          "description": "The next level of the player. If the current level is the maximum level, this should be same as the current level.",
          "$ref": "PlayerLevel"
        },
        "lastLevelUpTimestampMillis": {
          "format": "int64",
          "type": "string",
          "description": "The timestamp when the player was leveled up, in millis since Unix epoch UTC."
        }
      },
      "description": "1P/3P metadata about the player's experience.",
      "id": "PlayerExperienceInfo"
    },
    "PlayerScoreResponse": {
      "description": "A list of leaderboard entry resources.",
      "id": "PlayerScoreResponse",
      "type": "object",
      "properties": {
        "beatenScoreTimeSpans": {
          "items": {
            "type": "string",
            "enum": [
              "SCORE_TIME_SPAN_UNSPECIFIED",
              "ALL_TIME",
              "WEEKLY",
              "DAILY"
            ],
            "enumDescriptions": [
              "Default value. This value is unused.",
              "The score is an all-time score.",
              "The score is a weekly score.",
              "The score is a daily score."
            ]
          },
          "type": "array",
          "description": "The time spans where the submitted score is better than the existing score for that time span."
        },
        "leaderboardId": {
          "description": "The leaderboard ID that this score was submitted to.",
          "type": "string"
        },
        "unbeatenScores": {
          "type": "array",
          "items": {
            "$ref": "PlayerScore"
          },
          "description": "The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans."
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.",
          "type": "string"
        },
        "formattedScore": {
          "type": "string",
          "description": "The formatted value of the submitted score."
        }
      }
    },
    "EventChild": {
      "description": "An event child relationship resource.",
      "id": "EventChild",
      "properties": {
        "childId": {
          "description": "The ID of the child event.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventChild`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetMultipleApplicationPlayerIdsResponse": {
      "properties": {
        "playerIds": {
          "type": "array",
          "description": "Output only. The requested applications along with the scoped ids for tha player, if that player has an id for the application. If not, the application is not included in the response.",
          "readOnly": true,
          "items": {
            "$ref": "ApplicationPlayerId"
          }
        }
      },
      "id": "GetMultipleApplicationPlayerIdsResponse",
      "description": "Response message for GetMultipleApplicationPlayerIds rpc.",
      "type": "object"
    },
    "SnapshotImage": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshotImage`.",
          "type": "string"
        },
        "mime_type": {
          "type": "string",
          "description": "The MIME type of the image."
        },
        "width": {
          "description": "The width of the image.",
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "description": "The height of the image.",
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string",
          "description": "The URL of the image. This URL may be invalidated at any time and should not be cached."
        }
      },
      "type": "object",
      "id": "SnapshotImage",
      "description": "An image of a snapshot."
    },
    "EventUpdateResponse": {
      "id": "EventUpdateResponse",
      "description": "An event period update resource.",
      "properties": {
        "eventFailures": {
          "items": {
            "$ref": "EventRecordFailure"
          },
          "type": "array",
          "description": "Any failures updating a particular event."
        },
        "playerEvents": {
          "type": "array",
          "items": {
            "$ref": "PlayerEvent"
          },
          "description": "The current status of any updated events"
        },
        "batchFailures": {
          "description": "Any batch-wide failures which occurred applying updates.",
          "type": "array",
          "items": {
            "$ref": "EventBatchRecordFailure"
          }
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`."
        }
      },
      "type": "object"
    },
    "EventUpdateRequest": {
      "description": "An event period update resource.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateRequest`.",
          "type": "string"
        },
        "updateCount": {
          "description": "The number of times this event occurred in this time period.",
          "format": "int64",
          "type": "string"
        },
        "definitionId": {
          "type": "string",
          "description": "The ID of the event being modified in this update."
        }
      },
      "id": "EventUpdateRequest"
    },
    "PlayerLeaderboardScore": {
      "id": "PlayerLeaderboardScore",
      "properties": {
        "scoreTag": {
          "type": "string",
          "description": "Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`."
        },
        "scoreString": {
          "type": "string",
          "description": "The formatted value of this score."
        },
        "scoreValue": {
          "type": "string",
          "description": "The numerical value of this score.",
          "format": "int64"
        },
        "writeTimestamp": {
          "format": "int64",
          "description": "The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.",
          "type": "string"
        },
        "leaderboard_id": {
          "type": "string",
          "description": "The ID of the leaderboard this score is in."
        },
        "friendsRank": {
          "description": "The rank of the score in the friends collection for this leaderboard.",
          "$ref": "LeaderboardScoreRank"
        },
        "timeSpan": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "type": "string",
          "description": "The time span of this score."
        },
        "publicRank": {
          "$ref": "LeaderboardScoreRank",
          "description": "The public rank of the score in this leaderboard. This object will not be present if the user is not sharing their scores publicly."
        },
        "socialRank": {
          "description": "The social rank of the score in this leaderboard.",
          "$ref": "LeaderboardScoreRank"
        }
      },
      "type": "object",
      "description": "A player leaderboard score object."
    },
    "AchievementUpdateMultipleResponse": {
      "type": "object",
      "description": "Response message for UpdateMultipleAchievements rpc.",
      "id": "AchievementUpdateMultipleResponse",
      "properties": {
        "updatedAchievements": {
          "items": {
            "$ref": "AchievementUpdateResponse"
          },
          "type": "array",
          "description": "The updated state of the achievements."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleResponse`.",
          "type": "string"
        }
      }
    },
    "GamesAchievementSetStepsAtLeast": {
      "description": "The payload to request to increment an achievement.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#GamesAchievementSetStepsAtLeast`."
        },
        "steps": {
          "type": "integer",
          "description": "The minimum number of steps for the achievement to be set to.",
          "format": "int32"
        }
      },
      "id": "GamesAchievementSetStepsAtLeast"
    },
    "EventPeriodUpdate": {
      "description": "An event period update resource.",
      "id": "EventPeriodUpdate",
      "type": "object",
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "$ref": "EventUpdateRequest"
          },
          "description": "The updates being made for this time period."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventPeriodUpdate`."
        },
        "timePeriod": {
          "description": "The time period being covered by this update.",
          "$ref": "EventPeriodRange"
        }
      }
    },
    "ApplicationCategory": {
      "description": "An application category object.",
      "properties": {
        "primary": {
          "description": "The primary category.",
          "type": "string"
        },
        "secondary": {
          "type": "string",
          "description": "The secondary category."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#applicationCategory`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ApplicationCategory"
    },
    "MetagameConfig": {
      "description": "The metagame config resource",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#metagameConfig`."
        },
        "currentVersion": {
          "type": "integer",
          "description": "Current version of the metagame configuration data. When this data is updated, the version number will be increased by one.",
          "format": "int32"
        },
        "playerLevels": {
          "type": "array",
          "description": "The list of player levels.",
          "items": {
            "$ref": "PlayerLevel"
          }
        }
      },
      "id": "MetagameConfig"
    },
    "AchievementUpdateMultipleRequest": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateMultipleRequest`.",
          "type": "string"
        },
        "updates": {
          "items": {
            "$ref": "AchievementUpdateRequest"
          },
          "description": "The individual achievement update requests.",
          "type": "array"
        }
      },
      "description": "A list of achievement update requests.",
      "id": "AchievementUpdateMultipleRequest",
      "type": "object"
    },
    "EventDefinition": {
      "type": "object",
      "id": "EventDefinition",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`."
        },
        "isDefaultImageUrl": {
          "type": "boolean",
          "description": "Indicates whether the icon image being returned is a default image, or is game-provided."
        },
        "description": {
          "description": "Description of what this event represents.",
          "type": "string"
        },
        "visibility": {
          "type": "string",
          "enum": [
            "EVENT_VISIBILITY_UNSPECIFIED",
            "REVEALED",
            "HIDDEN"
          ],
          "enumDescriptions": [
            "Default value. Should not be used.",
            "This event should be visible to all users.",
            "This event should only be shown to users that have recorded this event at least once."
          ],
          "description": "The visibility of event being tracked in this definition."
        },
        "childEvents": {
          "type": "array",
          "description": "A list of events that are a child of this event.",
          "items": {
            "$ref": "EventChild"
          }
        },
        "imageUrl": {
          "type": "string",
          "description": "The base URL for the image that represents the event."
        },
        "id": {
          "type": "string",
          "description": "The ID of the event."
        },
        "displayName": {
          "description": "The name to display for the event.",
          "type": "string"
        }
      },
      "description": "An event definition resource."
    }
  },
  "servicePath": "",
  "canonicalName": "Games",
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://games.mtls.googleapis.com/",
  "baseUrl": "https://games.googleapis.com/"
}

{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "revision": "20230916",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "documentationLink": "https://cloud.google.com/dataform/docs",
  "rootUrl": "https://dataform.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "name": "dataform",
  "protocol": "rest",
  "mtlsRootUrl": "https://dataform.mtls.googleapis.com/",
  "schemas": {
    "GitRemoteSettings": {
      "id": "GitRemoteSettings",
      "description": "Controls Git remote configuration for a repository.",
      "type": "object",
      "properties": {
        "authenticationTokenSecretVersion": {
          "description": "Optional. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.",
          "type": "string"
        },
        "defaultBranch": {
          "description": "Required. The Git remote's default branch name.",
          "type": "string"
        },
        "tokenStatus": {
          "enum": [
            "TOKEN_STATUS_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID",
            "VALID"
          ],
          "deprecated": true,
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The token could not be found in Secret Manager (or the Dataform Service Account did not have permission to access it).",
            "The token could not be used to authenticate against the Git remote.",
            "The token was used successfully to authenticate against the Git remote."
          ],
          "description": "Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus",
          "readOnly": true
        },
        "sshAuthenticationConfig": {
          "description": "Optional. Authentication fields for remote uris using SSH protocol.",
          "$ref": "SshAuthenticationConfig"
        },
        "url": {
          "description": "Required. The Git remote's URL.",
          "type": "string"
        }
      }
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitAuthor": {
      "description": "Represents the author of a Git commit.",
      "properties": {
        "emailAddress": {
          "description": "Required. The commit author's email address.",
          "type": "string"
        },
        "name": {
          "description": "Required. The commit author's name.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CommitAuthor"
    },
    "CommitRepositoryChangesRequest": {
      "type": "object",
      "id": "CommitRepositoryChangesRequest",
      "description": "`CommitRepositoryChanges` request message.",
      "properties": {
        "requiredHeadCommitSha": {
          "type": "string",
          "description": "Optional. The commit SHA which must be the repository's current HEAD before applying this commit; otherwise this request will fail. If unset, no validation on the current HEAD commit SHA is performed."
        },
        "commitMetadata": {
          "$ref": "CommitMetadata",
          "description": "Required. The changes to commit to the repository."
        },
        "fileOperations": {
          "type": "object",
          "description": "A map to the path of the file to the operation. The path is the full file path including filename, from repository root.",
          "additionalProperties": {
            "$ref": "FileOperation"
          }
        }
      }
    },
    "ListWorkspacesResponse": {
      "description": "`ListWorkspaces` response message.",
      "id": "ListWorkspacesResponse",
      "type": "object",
      "properties": {
        "unreachable": {
          "description": "Locations which could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "workspaces": {
          "description": "List of workspaces.",
          "type": "array",
          "items": {
            "$ref": "Workspace"
          }
        }
      }
    },
    "QueryWorkflowInvocationActionsResponse": {
      "properties": {
        "workflowInvocationActions": {
          "description": "List of workflow invocation actions.",
          "items": {
            "$ref": "WorkflowInvocationAction"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "description": "`QueryWorkflowInvocationActions` response message.",
      "type": "object",
      "id": "QueryWorkflowInvocationActionsResponse"
    },
    "InstallNpmPackagesRequest": {
      "properties": {},
      "id": "InstallNpmPackagesRequest",
      "type": "object",
      "description": "`InstallNpmPackages` request message."
    },
    "WriteFileRequest": {
      "id": "WriteFileRequest",
      "type": "object",
      "description": "`WriteFile` request message.",
      "properties": {
        "contents": {
          "type": "string",
          "description": "Required. The file's contents.",
          "format": "byte"
        },
        "path": {
          "description": "Required. The file.",
          "type": "string"
        }
      }
    },
    "CodeCompilationConfig": {
      "description": "Configures various aspects of Dataform code compilation.",
      "id": "CodeCompilationConfig",
      "properties": {
        "defaultLocation": {
          "type": "string",
          "description": "Optional. The default BigQuery location to use. Defaults to \"US\". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations."
        },
        "defaultSchema": {
          "description": "Optional. The default schema (BigQuery dataset ID).",
          "type": "string"
        },
        "databaseSuffix": {
          "description": "Optional. The suffix that should be appended to all database (Google Cloud project ID) names.",
          "type": "string"
        },
        "tablePrefix": {
          "description": "Optional. The prefix that should be prepended to all table names.",
          "type": "string"
        },
        "assertionSchema": {
          "description": "Optional. The default schema (BigQuery dataset ID) for assertions.",
          "type": "string"
        },
        "schemaSuffix": {
          "type": "string",
          "description": "Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names."
        },
        "defaultDatabase": {
          "type": "string",
          "description": "Optional. The default database (Google Cloud project ID)."
        },
        "vars": {
          "type": "object",
          "description": "Optional. User-defined variables that are made available to project code during compilation.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "FetchRemoteBranchesResponse": {
      "description": "`FetchRemoteBranches` response message.",
      "properties": {
        "branches": {
          "items": {
            "type": "string"
          },
          "description": "The remote repository's branch names.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "FetchRemoteBranchesResponse"
    },
    "ReadRepositoryFileResponse": {
      "description": "`ReadRepositoryFile` response message.",
      "id": "ReadRepositoryFileResponse",
      "type": "object",
      "properties": {
        "contents": {
          "format": "byte",
          "type": "string",
          "description": "The file's contents."
        }
      }
    },
    "InvocationConfig": {
      "description": "Includes various configuration options for a workflow invocation. If both `included_targets` and `included_tags` are unset, all actions will be included.",
      "type": "object",
      "properties": {
        "transitiveDependentsIncluded": {
          "description": "Optional. When set to true, transitive dependents of included actions will be executed.",
          "type": "boolean"
        },
        "fullyRefreshIncrementalTablesEnabled": {
          "description": "Optional. When set to true, any incremental tables will be fully refreshed.",
          "type": "boolean"
        },
        "includedTargets": {
          "description": "Optional. The set of action identifiers to include.",
          "type": "array",
          "items": {
            "$ref": "Target"
          }
        },
        "transitiveDependenciesIncluded": {
          "description": "Optional. When set to true, transitive dependencies of included actions will be executed.",
          "type": "boolean"
        },
        "serviceAccount": {
          "description": "Optional. The service account to run workflow invocations under.",
          "type": "string"
        },
        "includedTags": {
          "description": "Optional. The set of tags to include.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "InvocationConfig"
    },
    "Declaration": {
      "id": "Declaration",
      "description": "Represents a relation which is not managed by Dataform but which may be referenced by Dataform actions.",
      "properties": {
        "relationDescriptor": {
          "$ref": "RelationDescriptor",
          "description": "Descriptor for the relation and its columns. Used as documentation only, i.e. values here will result in no changes to the relation's metadata."
        }
      },
      "type": "object"
    },
    "QueryRepositoryDirectoryContentsResponse": {
      "properties": {
        "directoryEntries": {
          "type": "array",
          "description": "List of entries in the directory.",
          "items": {
            "$ref": "DirectoryEntry"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      },
      "id": "QueryRepositoryDirectoryContentsResponse",
      "description": "`QueryRepositoryDirectoryContents` response message.",
      "type": "object"
    },
    "Target": {
      "type": "object",
      "id": "Target",
      "description": "Represents an action identifier. If the action writes output, the output will be written to the referenced database object.",
      "properties": {
        "schema": {
          "type": "string",
          "description": "The action's schema (BigQuery dataset ID), within `database`."
        },
        "database": {
          "description": "The action's database (Google Cloud project ID) .",
          "type": "string"
        },
        "name": {
          "description": "The action's name, within `database` and `schema`.",
          "type": "string"
        }
      }
    },
    "PullGitCommitsRequest": {
      "id": "PullGitCommitsRequest",
      "type": "object",
      "description": "`PullGitCommits` request message.",
      "properties": {
        "remoteBranch": {
          "description": "Optional. The name of the branch in the Git remote from which to pull commits. If left unset, the repository's default branch name will be used.",
          "type": "string"
        },
        "author": {
          "description": "Required. The author of any merge commit which may be created as a result of merging fetched Git commits into this workspace.",
          "$ref": "CommitAuthor"
        }
      }
    },
    "TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "id": "TestIamPermissionsResponse",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
        }
      }
    },
    "IncrementalTableConfig": {
      "id": "IncrementalTableConfig",
      "description": "Contains settings for relations of type `INCREMENTAL_TABLE`.",
      "type": "object",
      "properties": {
        "refreshDisabled": {
          "type": "boolean",
          "description": "Whether this table should be protected from being refreshed."
        },
        "incrementalPreOperations": {
          "items": {
            "type": "string"
          },
          "description": "SQL statements to be executed before inserting new rows into the relation.",
          "type": "array"
        },
        "incrementalSelectQuery": {
          "type": "string",
          "description": "The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed."
        },
        "uniqueKeyParts": {
          "description": "A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatePartitionFilter": {
          "type": "string",
          "description": "A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information)."
        },
        "incrementalPostOperations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "SQL statements to be executed after inserting new rows into the relation."
        }
      }
    },
    "UncommittedFileChange": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The file has been newly added.",
            "The file has been deleted.",
            "The file has been modified.",
            "The file contains merge conflicts."
          ],
          "description": "Indicates the status of the file.",
          "enum": [
            "STATE_UNSPECIFIED",
            "ADDED",
            "DELETED",
            "MODIFIED",
            "HAS_CONFLICTS"
          ]
        },
        "path": {
          "type": "string",
          "description": "The file's full path including filename, relative to the workspace root."
        }
      },
      "description": "Represents the Git state of a file with uncommitted changes.",
      "id": "UncommittedFileChange"
    },
    "ScheduledReleaseRecord": {
      "properties": {
        "errorStatus": {
          "$ref": "Status",
          "description": "The error status encountered upon this attempt to create the compilation result, if the attempt was unsuccessful."
        },
        "releaseTime": {
          "format": "google-datetime",
          "description": "The timestamp of this release attempt.",
          "type": "string"
        },
        "compilationResult": {
          "type": "string",
          "description": "The name of the created compilation result, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`."
        }
      },
      "id": "ScheduledReleaseRecord",
      "description": "A record of an attempt to create a compilation result for this release config.",
      "type": "object"
    },
    "ReadFileResponse": {
      "id": "ReadFileResponse",
      "type": "object",
      "properties": {
        "fileContents": {
          "format": "byte",
          "description": "The file's contents.",
          "type": "string"
        }
      },
      "description": "`ReadFile` response message."
    },
    "Repository": {
      "description": "Represents a Dataform Git repository.",
      "id": "Repository",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Optional. The repository's user-friendly name."
        },
        "npmrcEnvironmentVariablesSecretVersion": {
          "description": "Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.",
          "type": "string"
        },
        "gitRemoteSettings": {
          "description": "Optional. If set, configures this repository to be linked to a Git remote.",
          "$ref": "GitRemoteSettings"
        },
        "labels": {
          "description": "Optional. Repository user labels.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "setAuthenticatedUserAdmin": {
          "description": "Optional. Input only. If set to true, the authenticated user will be granted the roles/dataform.admin role on the created repository. To modify access to the created repository later apply setIamPolicy from https://cloud.google.com/dataform/reference/rest#rest-resource:-v1beta1.projects.locations.repositories",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The repository's name."
        },
        "workspaceCompilationOverrides": {
          "description": "Optional. If set, fields of `workspace_compilation_overrides` override the default compilation settings that are specified in dataform.json when creating workspace-scoped compilation results. See documentation for `WorkspaceCompilationOverrides` for more information.",
          "$ref": "WorkspaceCompilationOverrides"
        },
        "serviceAccount": {
          "type": "string",
          "description": "Optional. The service account to run workflow invocations under."
        }
      },
      "type": "object"
    },
    "ListWorkflowConfigsResponse": {
      "id": "ListWorkflowConfigsResponse",
      "properties": {
        "workflowConfigs": {
          "type": "array",
          "description": "List of workflow configs.",
          "items": {
            "$ref": "WorkflowConfig"
          }
        },
        "unreachable": {
          "description": "Locations which could not be reached.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "`ListWorkflowConfigs` response message."
    },
    "FileOperation": {
      "properties": {
        "writeFile": {
          "description": "Represents the write operation.",
          "$ref": "WriteFile"
        },
        "deleteFile": {
          "description": "Represents the delete operation.",
          "$ref": "DeleteFile"
        }
      },
      "id": "FileOperation",
      "description": "Represents a single file operation to the repository.",
      "type": "object"
    },
    "Assertion": {
      "type": "object",
      "properties": {
        "parentAction": {
          "$ref": "Target",
          "description": "The parent action of this assertion. Only set if this assertion was automatically generated."
        },
        "selectQuery": {
          "description": "The SELECT query which must return zero rows in order for this assertion to succeed.",
          "type": "string"
        },
        "disabled": {
          "description": "Whether this action is disabled (i.e. should not be run).",
          "type": "boolean"
        },
        "dependencyTargets": {
          "description": "A list of actions that this action depends on.",
          "type": "array",
          "items": {
            "$ref": "Target"
          }
        },
        "tags": {
          "description": "Arbitrary, user-defined tags on this action.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relationDescriptor": {
          "$ref": "RelationDescriptor",
          "description": "Descriptor for the assertion's automatically-generated view and its columns."
        }
      },
      "description": "Represents an assertion upon a SQL query which is required return zero rows.",
      "id": "Assertion"
    },
    "CommitLogEntry": {
      "id": "CommitLogEntry",
      "description": "Represents a single commit log.",
      "properties": {
        "author": {
          "$ref": "CommitAuthor",
          "description": "The commit author for this commit log entry."
        },
        "commitTime": {
          "format": "google-datetime",
          "description": "Commit timestamp.",
          "type": "string"
        },
        "commitSha": {
          "type": "string",
          "description": "The commit SHA for this commit log entry."
        },
        "commitMessage": {
          "description": "The commit message for this commit log entry.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowConfig": {
      "type": "object",
      "id": "WorkflowConfig",
      "properties": {
        "timeZone": {
          "type": "string",
          "description": "Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC."
        },
        "invocationConfig": {
          "description": "Optional. If left unset, a default InvocationConfig will be used.",
          "$ref": "InvocationConfig"
        },
        "recentScheduledExecutionRecords": {
          "type": "array",
          "items": {
            "$ref": "ScheduledExecutionRecord"
          },
          "description": "Output only. Records of the 10 most recent scheduled execution attempts, ordered in in descending order of `execution_time`. Updated whenever automatic creation of a workflow invocation is triggered by cron_schedule.",
          "readOnly": true
        },
        "releaseConfig": {
          "description": "Required. The name of the release config whose release_compilation_result should be executed. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Output only. The workflow config's name.",
          "readOnly": true
        },
        "cronSchedule": {
          "type": "string",
          "description": "Optional. Optional schedule (in cron format) for automatic execution of this workflow config."
        }
      },
      "description": "Represents a Dataform workflow configuration."
    },
    "WorkflowInvocationAction": {
      "id": "WorkflowInvocationAction",
      "properties": {
        "canonicalTarget": {
          "description": "Output only. The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result.",
          "readOnly": true,
          "$ref": "Target"
        },
        "invocationTiming": {
          "$ref": "Interval",
          "readOnly": true,
          "description": "Output only. This action's timing details. `start_time` will be set if the action is in [RUNNING, SUCCEEDED, CANCELLED, FAILED] state. `end_time` will be set if the action is in [SUCCEEDED, CANCELLED, FAILED] state."
        },
        "bigqueryAction": {
          "readOnly": true,
          "description": "Output only. The workflow action's bigquery action details.",
          "$ref": "BigQueryAction"
        },
        "target": {
          "readOnly": true,
          "description": "Output only. This action's identifier. Unique within the workflow invocation.",
          "$ref": "Target"
        },
        "failureReason": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. If and only if action's state is FAILED a failure reason is set."
        },
        "state": {
          "description": "Output only. This action's current state.",
          "enumDescriptions": [
            "The action has not yet been considered for invocation.",
            "The action is currently running.",
            "Execution of the action was skipped because upstream dependencies did not all complete successfully. A terminal state.",
            "Execution of the action was disabled as per the configuration of the corresponding compilation result action. A terminal state.",
            "The action succeeded. A terminal state.",
            "The action was cancelled. A terminal state.",
            "The action failed. A terminal state."
          ],
          "readOnly": true,
          "enum": [
            "PENDING",
            "RUNNING",
            "SKIPPED",
            "DISABLED",
            "SUCCEEDED",
            "CANCELLED",
            "FAILED"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents a single action in a workflow invocation."
    },
    "ListReleaseConfigsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "releaseConfigs": {
          "description": "List of release configs.",
          "type": "array",
          "items": {
            "$ref": "ReleaseConfig"
          }
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations which could not be reached.",
          "type": "array"
        }
      },
      "description": "`ListReleaseConfigs` response message.",
      "id": "ListReleaseConfigsResponse",
      "type": "object"
    },
    "RemoveDirectoryRequest": {
      "type": "object",
      "id": "RemoveDirectoryRequest",
      "description": "`RemoveDirectory` request message.",
      "properties": {
        "path": {
          "type": "string",
          "description": "Required. The directory's full path including directory name, relative to the workspace root."
        }
      }
    },
    "ComputeRepositoryAccessTokenStatusResponse": {
      "description": "`ComputeRepositoryAccessTokenStatus` response message.",
      "properties": {
        "tokenStatus": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The token could not be found in Secret Manager (or the Dataform Service Account did not have permission to access it).",
            "The token could not be used to authenticate against the Git remote.",
            "The token was used successfully to authenticate against the Git remote."
          ],
          "type": "string",
          "description": "Indicates the status of the Git access token.",
          "enum": [
            "TOKEN_STATUS_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID",
            "VALID"
          ]
        }
      },
      "type": "object",
      "id": "ComputeRepositoryAccessTokenStatusResponse"
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "description": "The response message for Locations.ListLocations.",
      "type": "object"
    },
    "QueryCompilationResultActionsResponse": {
      "description": "`QueryCompilationResultActions` response message.",
      "type": "object",
      "id": "QueryCompilationResultActionsResponse",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "compilationResultActions": {
          "description": "List of compilation result actions.",
          "type": "array",
          "items": {
            "$ref": "CompilationResultAction"
          }
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
        }
      },
      "description": "Request message for `TestIamPermissions` method."
    },
    "MoveFileRequest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Required. The file's full path including filename, relative to the workspace root."
        },
        "newPath": {
          "type": "string",
          "description": "Required. The file's new path including filename, relative to the workspace root."
        }
      },
      "description": "`MoveFile` request message.",
      "id": "MoveFileRequest"
    },
    "Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "properties": {
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      },
      "id": "Expr",
      "type": "object"
    },
    "MakeDirectoryRequest": {
      "id": "MakeDirectoryRequest",
      "properties": {
        "path": {
          "description": "Required. The directory's full path including directory name, relative to the workspace root.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "`MakeDirectory` request message."
    },
    "ScheduledExecutionRecord": {
      "id": "ScheduledExecutionRecord",
      "properties": {
        "errorStatus": {
          "description": "The error status encountered upon this attempt to create the workflow invocation, if the attempt was unsuccessful.",
          "$ref": "Status"
        },
        "executionTime": {
          "description": "The timestamp of this execution attempt.",
          "type": "string",
          "format": "google-datetime"
        },
        "workflowInvocation": {
          "description": "The name of the created workflow invocation, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/workflowInvocations/*`.",
          "type": "string"
        }
      },
      "description": "A record of an attempt to create a workflow invocation for this workflow config.",
      "type": "object"
    },
    "Workspace": {
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The workspace's name."
        }
      },
      "id": "Workspace",
      "type": "object",
      "description": "Represents a Dataform Git workspace."
    },
    "ResetWorkspaceChangesRequest": {
      "type": "object",
      "properties": {
        "clean": {
          "type": "boolean",
          "description": "Optional. If set to true, untracked files will be deleted."
        },
        "paths": {
          "description": "Optional. Full file paths to reset back to their committed state including filename, rooted at workspace root. If left empty, all files will be reset.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "`ResetWorkspaceChanges` request message.",
      "id": "ResetWorkspaceChangesRequest"
    },
    "MakeDirectoryResponse": {
      "id": "MakeDirectoryResponse",
      "description": "`MakeDirectory` response message.",
      "properties": {},
      "type": "object"
    },
    "CompilationResult": {
      "properties": {
        "gitCommitish": {
          "type": "string",
          "description": "Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`"
        },
        "codeCompilationConfig": {
          "description": "Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.",
          "$ref": "CodeCompilationConfig"
        },
        "compilationErrors": {
          "items": {
            "$ref": "CompilationError"
          },
          "type": "array",
          "readOnly": true,
          "description": "Output only. Errors encountered during project compilation."
        },
        "dataformCoreVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The version of `@dataform/core` that was used for compilation."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The compilation result's name."
        },
        "releaseConfig": {
          "type": "string",
          "description": "Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`."
        },
        "workspace": {
          "description": "Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.",
          "type": "string"
        },
        "resolvedGitCommitSha": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace."
        }
      },
      "type": "object",
      "id": "CompilationResult",
      "description": "Represents the result of compiling a Dataform project."
    },
    "WorkflowInvocation": {
      "id": "WorkflowInvocation",
      "properties": {
        "workflowConfig": {
          "type": "string",
          "description": "Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`."
        },
        "invocationTiming": {
          "description": "Output only. This workflow invocation's timing details.",
          "readOnly": true,
          "$ref": "Interval"
        },
        "state": {
          "description": "Output only. This workflow invocation's current state.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The workflow invocation is currently running.",
            "The workflow invocation succeeded. A terminal state.",
            "The workflow invocation was cancelled. A terminal state.",
            "The workflow invocation failed. A terminal state.",
            "The workflow invocation is being cancelled, but some actions are still running."
          ],
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "RUNNING",
            "SUCCEEDED",
            "CANCELLED",
            "FAILED",
            "CANCELING"
          ],
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Output only. The workflow invocation's name.",
          "readOnly": true
        },
        "invocationConfig": {
          "$ref": "InvocationConfig",
          "description": "Immutable. If left unset, a default InvocationConfig will be used."
        },
        "compilationResult": {
          "description": "Immutable. The name of the compilation result to use for this invocation. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents a single invocation of a compilation result."
    },
    "CommitWorkspaceChangesRequest": {
      "description": "`CommitWorkspaceChanges` request message.",
      "type": "object",
      "properties": {
        "author": {
          "description": "Required. The commit's author.",
          "$ref": "CommitAuthor"
        },
        "commitMessage": {
          "type": "string",
          "description": "Optional. The commit's message."
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "description": "Optional. Full file paths to commit including filename, rooted at workspace root. If left empty, all files will be committed.",
          "type": "array"
        }
      },
      "id": "CommitWorkspaceChangesRequest"
    },
    "InstallNpmPackagesResponse": {
      "id": "InstallNpmPackagesResponse",
      "description": "`InstallNpmPackages` response message.",
      "properties": {},
      "type": "object"
    },
    "RemoveFileRequest": {
      "description": "`RemoveFile` request message.",
      "properties": {
        "path": {
          "description": "Required. The file's full path including filename, relative to the workspace root.",
          "type": "string"
        }
      },
      "id": "RemoveFileRequest",
      "type": "object"
    },
    "BigQueryAction": {
      "properties": {
        "sqlScript": {
          "description": "Output only. The generated BigQuery SQL script that will be executed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "id": "BigQueryAction",
      "type": "object",
      "description": "Represents a workflow action that will run against BigQuery."
    },
    "Operations": {
      "properties": {
        "dependencyTargets": {
          "items": {
            "$ref": "Target"
          },
          "description": "A list of actions that this action depends on.",
          "type": "array"
        },
        "queries": {
          "type": "array",
          "description": "A list of arbitrary SQL statements that will be executed without alteration.",
          "items": {
            "type": "string"
          }
        },
        "relationDescriptor": {
          "description": "Descriptor for any output relation and its columns. Only set if `has_output` is true.",
          "$ref": "RelationDescriptor"
        },
        "tags": {
          "description": "Arbitrary, user-defined tags on this action.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether this action is disabled (i.e. should not be run)."
        },
        "hasOutput": {
          "description": "Whether these operations produce an output relation.",
          "type": "boolean"
        }
      },
      "id": "Operations",
      "description": "Represents a list of arbitrary database operations.",
      "type": "object"
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "description": "Represents the metadata of the long-running operation.",
      "properties": {
        "target": {
          "readOnly": true,
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "statusDetail": {
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string"
        },
        "verb": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation."
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "apiVersion": {
          "type": "string",
          "description": "Output only. API version used to start the operation.",
          "readOnly": true
        },
        "cancelRequested": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time the operation was created."
        }
      },
      "type": "object"
    },
    "FetchFileGitStatusesResponse": {
      "id": "FetchFileGitStatusesResponse",
      "description": "`FetchFileGitStatuses` response message.",
      "type": "object",
      "properties": {
        "uncommittedFileChanges": {
          "items": {
            "$ref": "UncommittedFileChange"
          },
          "description": "A list of all files which have uncommitted Git changes. There will only be a single entry for any given file.",
          "type": "array"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {}
    },
    "CancelWorkflowInvocationRequest": {
      "type": "object",
      "description": "`CancelWorkflowInvocation` request message.",
      "id": "CancelWorkflowInvocationRequest",
      "properties": {}
    },
    "MoveDirectoryRequest": {
      "properties": {
        "newPath": {
          "description": "Required. The new path for the directory including directory name, rooted at workspace root.",
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "Required. The directory's full path including directory name, relative to the workspace root."
        }
      },
      "description": "`MoveDirectory` request message.",
      "type": "object",
      "id": "MoveDirectoryRequest"
    },
    "FetchRepositoryHistoryResponse": {
      "type": "object",
      "description": "`FetchRepositoryHistory` response message.",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "commits": {
          "description": "A list of commit logs, ordered by 'git log' default order.",
          "type": "array",
          "items": {
            "$ref": "CommitLogEntry"
          }
        }
      },
      "id": "FetchRepositoryHistoryResponse"
    },
    "MoveDirectoryResponse": {
      "description": "`MoveDirectory` response message.",
      "id": "MoveDirectoryResponse",
      "type": "object",
      "properties": {}
    },
    "WriteFile": {
      "id": "WriteFile",
      "type": "object",
      "properties": {
        "contents": {
          "description": "The file's contents.",
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Represents the write file operation (for files added or modified)."
    },
    "PushGitCommitsRequest": {
      "description": "`PushGitCommits` request message.",
      "id": "PushGitCommitsRequest",
      "properties": {
        "remoteBranch": {
          "description": "Optional. The name of the branch in the Git remote to which commits should be pushed. If left unset, the repository's default branch name will be used.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompilationResultAction": {
      "properties": {
        "filePath": {
          "type": "string",
          "description": "The full path including filename in which this action is located, relative to the workspace root."
        },
        "declaration": {
          "description": "The declaration declared by this action.",
          "$ref": "Declaration"
        },
        "assertion": {
          "description": "The assertion executed by this action.",
          "$ref": "Assertion"
        },
        "target": {
          "description": "This action's identifier. Unique within the compilation result.",
          "$ref": "Target"
        },
        "relation": {
          "description": "The database relation created/updated by this action.",
          "$ref": "Relation"
        },
        "canonicalTarget": {
          "$ref": "Target",
          "description": "The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result."
        },
        "operations": {
          "description": "The database operations executed by this action.",
          "$ref": "Operations"
        }
      },
      "id": "CompilationResultAction",
      "description": "Represents a single Dataform action in a compilation result.",
      "type": "object"
    },
    "FetchGitAheadBehindResponse": {
      "id": "FetchGitAheadBehindResponse",
      "properties": {
        "commitsAhead": {
          "description": "The number of commits in the remote branch that are not in the workspace.",
          "format": "int32",
          "type": "integer"
        },
        "commitsBehind": {
          "format": "int32",
          "description": "The number of commits in the workspace that are not in the remote branch.",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "`FetchGitAheadBehind` response message."
    },
    "ReleaseConfig": {
      "id": "ReleaseConfig",
      "description": "Represents a Dataform release configuration.",
      "type": "object",
      "properties": {
        "recentScheduledReleaseRecords": {
          "readOnly": true,
          "items": {
            "$ref": "ScheduledReleaseRecord"
          },
          "description": "Output only. Records of the 10 most recent scheduled release attempts, ordered in in descending order of `release_time`. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.",
          "type": "array"
        },
        "codeCompilationConfig": {
          "description": "Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.",
          "$ref": "CodeCompilationConfig"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The release config's name."
        },
        "gitCommitish": {
          "type": "string",
          "description": "Required. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`"
        },
        "releaseCompilationResult": {
          "type": "string",
          "description": "Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`."
        },
        "cronSchedule": {
          "description": "Optional. Optional schedule (in cron format) for automatic creation of compilation results.",
          "type": "string"
        },
        "timeZone": {
          "type": "string",
          "description": "Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC."
        }
      }
    },
    "DirectoryEntry": {
      "type": "object",
      "properties": {
        "file": {
          "description": "A file in the directory.",
          "type": "string"
        },
        "directory": {
          "type": "string",
          "description": "A child directory in the directory."
        }
      },
      "id": "DirectoryEntry",
      "description": "Represents a single entry in a directory."
    },
    "RelationDescriptor": {
      "description": "Describes a relation and its columns.",
      "properties": {
        "bigqueryLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A set of BigQuery labels that should be applied to the relation.",
          "type": "object"
        },
        "columns": {
          "items": {
            "$ref": "ColumnDescriptor"
          },
          "description": "A list of descriptions of columns within the relation.",
          "type": "array"
        },
        "description": {
          "type": "string",
          "description": "A text description of the relation."
        }
      },
      "type": "object",
      "id": "RelationDescriptor"
    },
    "ColumnDescriptor": {
      "properties": {
        "description": {
          "description": "A textual description of the column.",
          "type": "string"
        },
        "path": {
          "description": "The identifier for the column. Each entry in `path` represents one level of nesting.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bigqueryPolicyTags": {
          "type": "array",
          "description": "A list of BigQuery policy tags that will be applied to the column.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Describes a column.",
      "id": "ColumnDescriptor"
    },
    "MoveFileResponse": {
      "id": "MoveFileResponse",
      "type": "object",
      "description": "`MoveFile` response message.",
      "properties": {}
    },
    "SshAuthenticationConfig": {
      "id": "SshAuthenticationConfig",
      "properties": {
        "hostPublicKey": {
          "description": "Required. Content of a public SSH key to verify an identity of a remote Git host.",
          "type": "string"
        },
        "userPrivateKeySecretVersion": {
          "type": "string",
          "description": "Required. The name of the Secret Manager secret version to use as a ssh private key for Git operations. Must be in the format `projects/*/secrets/*/versions/*`."
        }
      },
      "type": "object",
      "description": "Configures fields for performing SSH authentication."
    },
    "DeleteFile": {
      "description": "Represents the delete file operation.",
      "id": "DeleteFile",
      "type": "object",
      "properties": {}
    },
    "SetIamPolicyRequest": {
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      },
      "type": "object",
      "description": "Request message for `SetIamPolicy` method.",
      "id": "SetIamPolicyRequest"
    },
    "WriteFileResponse": {
      "id": "WriteFileResponse",
      "description": "`WriteFile` response message.",
      "type": "object",
      "properties": {}
    },
    "Binding": {
      "type": "object",
      "description": "Associates `members`, or principals, with a `role`.",
      "id": "Binding",
      "properties": {
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "Expr"
        },
        "role": {
          "type": "string",
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "members": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding."
        }
      }
    },
    "ListWorkflowInvocationsResponse": {
      "properties": {
        "workflowInvocations": {
          "items": {
            "$ref": "WorkflowInvocation"
          },
          "type": "array",
          "description": "List of workflow invocations."
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations which could not be reached.",
          "type": "array"
        }
      },
      "description": "`ListWorkflowInvocations` response message.",
      "id": "ListWorkflowInvocationsResponse",
      "type": "object"
    },
    "QueryDirectoryContentsResponse": {
      "type": "object",
      "properties": {
        "directoryEntries": {
          "type": "array",
          "items": {
            "$ref": "DirectoryEntry"
          },
          "description": "List of entries in the directory."
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      },
      "id": "QueryDirectoryContentsResponse",
      "description": "`QueryDirectoryContents` response message."
    },
    "Location": {
      "description": "A resource that represents a Google Cloud location.",
      "type": "object",
      "properties": {
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata. For example the available capacity at the given location."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
        }
      },
      "id": "Location"
    },
    "WorkspaceCompilationOverrides": {
      "description": "Configures workspace compilation overrides for a repository. Primarily used by the UI (`console.cloud.google.com`). `schema_suffix` and `table_prefix` can have a special expression - `${workspaceName}`, which refers to the workspace name from which the compilation results will be created. API callers are expected to resolve the expression in these overrides and provide them explicitly in `code_compilation_config` (https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories.compilationResults#codecompilationconfig) when creating workspace-scoped compilation results.",
      "id": "WorkspaceCompilationOverrides",
      "properties": {
        "defaultDatabase": {
          "type": "string",
          "description": "Optional. The default database (Google Cloud project ID)."
        },
        "schemaSuffix": {
          "type": "string",
          "description": "Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names."
        },
        "tablePrefix": {
          "description": "Optional. The prefix that should be prepended to all table names.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FetchFileDiffResponse": {
      "properties": {
        "formattedDiff": {
          "description": "The raw formatted Git diff for the file.",
          "type": "string"
        }
      },
      "id": "FetchFileDiffResponse",
      "description": "`FetchFileDiff` response message.",
      "type": "object"
    },
    "ListCompilationResultsResponse": {
      "properties": {
        "unreachable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Locations which could not be reached."
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "compilationResults": {
          "items": {
            "$ref": "CompilationResult"
          },
          "description": "List of compilation results.",
          "type": "array"
        }
      },
      "description": "`ListCompilationResults` response message.",
      "id": "ListCompilationResultsResponse",
      "type": "object"
    },
    "CompilationError": {
      "id": "CompilationError",
      "type": "object",
      "properties": {
        "actionTarget": {
          "description": "Output only. The identifier of the action where this error occurred, if available.",
          "readOnly": true,
          "$ref": "Target"
        },
        "path": {
          "readOnly": true,
          "description": "Output only. The path of the file where this error occurred, if available, relative to the project root.",
          "type": "string"
        },
        "stack": {
          "description": "Output only. The error's full stack trace.",
          "readOnly": true,
          "type": "string"
        },
        "message": {
          "type": "string",
          "description": "Output only. The error's top level message.",
          "readOnly": true
        }
      },
      "description": "An error encountered when attempting to compile a Dataform project."
    },
    "Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "properties": {
        "bindings": {
          "items": {
            "$ref": "Binding"
          },
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array"
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        },
        "version": {
          "format": "int32",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer"
        }
      },
      "type": "object",
      "id": "Policy"
    },
    "CommitMetadata": {
      "description": "Represents a Dataform Git commit.",
      "id": "CommitMetadata",
      "properties": {
        "commitMessage": {
          "description": "Optional. The commit's message.",
          "type": "string"
        },
        "author": {
          "$ref": "CommitAuthor",
          "description": "Required. The commit's author."
        }
      },
      "type": "object"
    },
    "ListRepositoriesResponse": {
      "type": "object",
      "id": "ListRepositoriesResponse",
      "description": "`ListRepositories` response message.",
      "properties": {
        "repositories": {
          "description": "List of repositories.",
          "items": {
            "$ref": "Repository"
          },
          "type": "array"
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations which could not be reached.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "Relation": {
      "type": "object",
      "properties": {
        "relationType": {
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The relation is a table.",
            "The relation is a view.",
            "The relation is an incrementalized table.",
            "The relation is a materialized view."
          ],
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "TABLE",
            "VIEW",
            "INCREMENTAL_TABLE",
            "MATERIALIZED_VIEW"
          ],
          "description": "The type of this relation.",
          "type": "string"
        },
        "dependencyTargets": {
          "items": {
            "$ref": "Target"
          },
          "type": "array",
          "description": "A list of actions that this action depends on."
        },
        "incrementalTableConfig": {
          "$ref": "IncrementalTableConfig",
          "description": "Configures `INCREMENTAL_TABLE` settings for this relation. Only set if `relation_type` is `INCREMENTAL_TABLE`."
        },
        "disabled": {
          "description": "Whether this action is disabled (i.e. should not be run).",
          "type": "boolean"
        },
        "postOperations": {
          "description": "SQL statements to be executed after creating the relation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relationDescriptor": {
          "$ref": "RelationDescriptor",
          "description": "Descriptor for the relation and its columns."
        },
        "partitionExpirationDays": {
          "description": "Sets the partition expiration in days.",
          "format": "int32",
          "type": "integer"
        },
        "additionalOptions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported."
        },
        "requirePartitionFilter": {
          "description": "Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.",
          "type": "boolean"
        },
        "partitionExpression": {
          "type": "string",
          "description": "The SQL expression used to partition the relation."
        },
        "selectQuery": {
          "description": "The SELECT query which returns rows which this relation should contain.",
          "type": "string"
        },
        "preOperations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "SQL statements to be executed before creating the relation."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arbitrary, user-defined tags on this action."
        },
        "clusterExpressions": {
          "description": "A list of columns or SQL expressions used to cluster the table.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "Relation",
      "description": "Represents a database relation."
    },
    "Interval": {
      "id": "Interval",
      "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.",
      "properties": {
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start."
        },
        "endTime": {
          "format": "google-datetime",
          "description": "Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "title": "Dataform API",
  "servicePath": "",
  "description": "Service to develop, version control, and operationalize SQL pipelines in BigQuery.",
  "parameters": {
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "alt": {
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "location": "query",
      "default": "json"
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "version": "v1beta1",
  "batchPath": "batch",
  "ownerDomain": "google.com",
  "version_module": true,
  "discoveryVersion": "v1",
  "id": "dataform:v1beta1",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "description": "Gets information about a location.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Location"
              },
              "path": "v1beta1/{+name}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "type": "string"
                }
              },
              "id": "dataform.projects.locations.get"
            },
            "list": {
              "path": "v1beta1/{+name}/locations",
              "id": "dataform.projects.locations.list",
              "description": "Lists information about the supported locations for this service.",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1beta1/projects/{projectsId}/locations",
              "parameters": {
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "format": "int32",
                  "description": "The maximum number of results to return. If not set, the service selects a default."
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                },
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "ListLocationsResponse"
              }
            }
          },
          "resources": {
            "repositories": {
              "resources": {
                "compilationResults": {
                  "methods": {
                    "get": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults/{compilationResultsId}",
                      "id": "dataform.projects.locations.repositories.compilationResults.get",
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "description": "Required. The compilation result's name.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/compilationResults/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1beta1/{+name}",
                      "response": {
                        "$ref": "CompilationResult"
                      },
                      "httpMethod": "GET",
                      "description": "Fetches a single CompilationResult."
                    },
                    "create": {
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "CompilationResult"
                      },
                      "description": "Creates a new CompilationResult in a given project and location.",
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "Required. The repository in which to create the compilation result. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults",
                      "id": "dataform.projects.locations.repositories.compilationResults.create",
                      "response": {
                        "$ref": "CompilationResult"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+parent}/compilationResults"
                    },
                    "query": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults/{compilationResultsId}:query",
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/compilationResults/[^/]+$",
                          "type": "string",
                          "description": "Required. The compilation result's name.",
                          "location": "path"
                        },
                        "filter": {
                          "location": "query",
                          "description": "Optional. Optional filter for the returned list. Filtering is only currently supported on the `file_path` field.",
                          "type": "string"
                        },
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "Optional. Page token received from a previous `QueryCompilationResultActions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `QueryCompilationResultActions` must match the call that provided the page token."
                        },
                        "pageSize": {
                          "location": "query",
                          "format": "int32",
                          "description": "Optional. Maximum number of compilation results to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "type": "integer"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.compilationResults.query",
                      "httpMethod": "GET",
                      "description": "Returns CompilationResultActions in a given CompilationResult.",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "QueryCompilationResultActionsResponse"
                      },
                      "path": "v1beta1/{+name}:query"
                    },
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+parent}/compilationResults",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists CompilationResults in a given Repository.",
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "description": "Optional. Maximum number of compilation results to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query",
                          "type": "integer"
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "type": "string",
                          "location": "path",
                          "description": "Required. The repository in which to list compilation results. Must be in the format `projects/*/locations/*/repositories/*`."
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "Optional. Page token received from a previous `ListCompilationResults` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCompilationResults` must match the call that provided the page token.",
                          "location": "query"
                        }
                      },
                      "httpMethod": "GET",
                      "id": "dataform.projects.locations.repositories.compilationResults.list",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults",
                      "response": {
                        "$ref": "ListCompilationResultsResponse"
                      }
                    }
                  }
                },
                "workflowInvocations": {
                  "methods": {
                    "delete": {
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}",
                      "httpMethod": "DELETE",
                      "response": {
                        "$ref": "Empty"
                      },
                      "id": "dataform.projects.locations.repositories.workflowInvocations.delete",
                      "path": "v1beta1/{+name}",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "description": "Required. The workflow invocation resource's name."
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes a single WorkflowInvocation."
                    },
                    "create": {
                      "id": "dataform.projects.locations.repositories.workflowInvocations.create",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations",
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1beta1/{+parent}/workflowInvocations",
                      "request": {
                        "$ref": "WorkflowInvocation"
                      },
                      "description": "Creates a new WorkflowInvocation in a given Repository.",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "description": "Required. The repository in which to create the workflow invocation. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "response": {
                        "$ref": "WorkflowInvocation"
                      },
                      "httpMethod": "POST"
                    },
                    "query": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.workflowInvocations.query",
                      "path": "v1beta1/{+name}:query",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}:query",
                      "parameters": {
                        "name": {
                          "description": "Required. The workflow invocation's name.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "location": "path",
                          "required": true
                        },
                        "pageToken": {
                          "description": "Optional. Page token received from a previous `QueryWorkflowInvocationActions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `QueryWorkflowInvocationActions` must match the call that provided the page token.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Optional. Maximum number of workflow invocations to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "format": "int32",
                          "location": "query"
                        }
                      },
                      "description": "Returns WorkflowInvocationActions in a given WorkflowInvocation.",
                      "response": {
                        "$ref": "QueryWorkflowInvocationActionsResponse"
                      }
                    },
                    "cancel": {
                      "parameters": {
                        "name": {
                          "description": "Required. The workflow invocation resource's name.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "id": "dataform.projects.locations.repositories.workflowInvocations.cancel",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}:cancel",
                      "request": {
                        "$ref": "CancelWorkflowInvocationRequest"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "httpMethod": "POST",
                      "description": "Requests cancellation of a running WorkflowInvocation.",
                      "path": "v1beta1/{+name}:cancel"
                    },
                    "list": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations",
                      "description": "Lists WorkflowInvocations in a given Repository.",
                      "id": "dataform.projects.locations.repositories.workflowInvocations.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "ListWorkflowInvocationsResponse"
                      },
                      "path": "v1beta1/{+parent}/workflowInvocations",
                      "parameters": {
                        "pageSize": {
                          "description": "Optional. Maximum number of workflow invocations to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "filter": {
                          "description": "Optional. Filter for the returned list.",
                          "location": "query",
                          "type": "string"
                        },
                        "orderBy": {
                          "type": "string",
                          "location": "query",
                          "description": "Optional. This field only supports ordering by `name`. If unspecified, the server will choose the ordering. If specified, the default order is ascending for the `name` field."
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Required. The parent resource of the WorkflowInvocation type. Must be in the format `projects/*/locations/*/repositories/*`."
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "Optional. Page token received from a previous `ListWorkflowInvocations` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListWorkflowInvocations` must match the call that provided the page token."
                        }
                      },
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "parent"
                      ]
                    },
                    "get": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "description": "Fetches a single WorkflowInvocation.",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "required": true,
                          "type": "string",
                          "description": "Required. The workflow invocation resource's name."
                        }
                      },
                      "response": {
                        "$ref": "WorkflowInvocation"
                      },
                      "path": "v1beta1/{+name}",
                      "id": "dataform.projects.locations.repositories.workflowInvocations.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  }
                },
                "workflowConfigs": {
                  "methods": {
                    "patch": {
                      "parameters": {
                        "updateMask": {
                          "type": "string",
                          "format": "google-fieldmask",
                          "location": "query",
                          "description": "Optional. Specifies the fields to be updated in the workflow config. If left unset, all fields will be updated."
                        },
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowConfigs/[^/]+$",
                          "description": "Output only. The workflow config's name.",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "httpMethod": "PATCH",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowConfigs/{workflowConfigsId}",
                      "id": "dataform.projects.locations.repositories.workflowConfigs.patch",
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Updates a single WorkflowConfig.",
                      "response": {
                        "$ref": "WorkflowConfig"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+name}",
                      "request": {
                        "$ref": "WorkflowConfig"
                      }
                    },
                    "create": {
                      "id": "dataform.projects.locations.repositories.workflowConfigs.create",
                      "httpMethod": "POST",
                      "path": "v1beta1/{+parent}/workflowConfigs",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string",
                          "location": "path",
                          "description": "Required. The repository in which to create the workflow config. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "required": true
                        },
                        "workflowConfigId": {
                          "description": "Required. The ID to use for the workflow config, which will become the final component of the workflow config's resource name.",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "response": {
                        "$ref": "WorkflowConfig"
                      },
                      "description": "Creates a new WorkflowConfig in a given Repository.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "WorkflowConfig"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowConfigs"
                    },
                    "list": {
                      "response": {
                        "$ref": "ListWorkflowConfigsResponse"
                      },
                      "path": "v1beta1/{+parent}/workflowConfigs",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "dataform.projects.locations.repositories.workflowConfigs.list",
                      "description": "Lists WorkflowConfigs in a given Repository.",
                      "httpMethod": "GET",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowConfigs",
                      "parameters": {
                        "pageSize": {
                          "location": "query",
                          "type": "integer",
                          "format": "int32",
                          "description": "Optional. Maximum number of workflow configs to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default."
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "Optional. Page token received from a previous `ListWorkflowConfigs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListWorkflowConfigs` must match the call that provided the page token.",
                          "location": "query"
                        },
                        "parent": {
                          "description": "Required. The repository in which to list workflow configs. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "type": "string",
                          "location": "path"
                        }
                      }
                    },
                    "get": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowConfigs/{workflowConfigsId}",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "WorkflowConfig"
                      },
                      "path": "v1beta1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "description": "Required. The workflow config's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowConfigs/[^/]+$"
                        }
                      },
                      "description": "Fetches a single WorkflowConfig.",
                      "id": "dataform.projects.locations.repositories.workflowConfigs.get",
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "delete": {
                      "path": "v1beta1/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes a single WorkflowConfig.",
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "description": "Required. The workflow config's name.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowConfigs/[^/]+$"
                        }
                      },
                      "id": "dataform.projects.locations.repositories.workflowConfigs.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowConfigs/{workflowConfigsId}",
                      "httpMethod": "DELETE"
                    }
                  }
                },
                "releaseConfigs": {
                  "methods": {
                    "get": {
                      "httpMethod": "GET",
                      "description": "Fetches a single ReleaseConfig.",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Required. The release config's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/releaseConfigs/[^/]+$"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs/{releaseConfigsId}",
                      "response": {
                        "$ref": "ReleaseConfig"
                      },
                      "path": "v1beta1/{+name}",
                      "id": "dataform.projects.locations.repositories.releaseConfigs.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "create": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs",
                      "response": {
                        "$ref": "ReleaseConfig"
                      },
                      "parameters": {
                        "releaseConfigId": {
                          "description": "Required. The ID to use for the release config, which will become the final component of the release config's resource name.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string",
                          "location": "path",
                          "description": "Required. The repository in which to create the release config. Must be in the format `projects/*/locations/*/repositories/*`."
                        }
                      },
                      "httpMethod": "POST",
                      "description": "Creates a new ReleaseConfig in a given Repository.",
                      "id": "dataform.projects.locations.repositories.releaseConfigs.create",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "path": "v1beta1/{+parent}/releaseConfigs",
                      "request": {
                        "$ref": "ReleaseConfig"
                      }
                    },
                    "list": {
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "Optional. Page token received from a previous `ListReleaseConfigs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReleaseConfigs` must match the call that provided the page token."
                        },
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "description": "Optional. Maximum number of release configs to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "format": "int32"
                        },
                        "parent": {
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string",
                          "description": "Required. The repository in which to list release configs. Must be in the format `projects/*/locations/*/repositories/*`."
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs",
                      "response": {
                        "$ref": "ListReleaseConfigsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists ReleaseConfigs in a given Repository.",
                      "path": "v1beta1/{+parent}/releaseConfigs",
                      "id": "dataform.projects.locations.repositories.releaseConfigs.list",
                      "httpMethod": "GET"
                    },
                    "delete": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs/{releaseConfigsId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Deletes a single ReleaseConfig.",
                      "path": "v1beta1/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "id": "dataform.projects.locations.repositories.releaseConfigs.delete",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Required. The release config's name.",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/releaseConfigs/[^/]+$"
                        }
                      },
                      "httpMethod": "DELETE"
                    },
                    "patch": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+name}",
                      "id": "dataform.projects.locations.repositories.releaseConfigs.patch",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs/{releaseConfigsId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "Output only. The release config's name.",
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/releaseConfigs/[^/]+$"
                        },
                        "updateMask": {
                          "format": "google-fieldmask",
                          "location": "query",
                          "type": "string",
                          "description": "Optional. Specifies the fields to be updated in the release config. If left unset, all fields will be updated."
                        }
                      },
                      "description": "Updates a single ReleaseConfig.",
                      "request": {
                        "$ref": "ReleaseConfig"
                      },
                      "response": {
                        "$ref": "ReleaseConfig"
                      }
                    }
                  }
                },
                "workspaces": {
                  "methods": {
                    "reset": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:reset",
                      "path": "v1beta1/{+name}:reset",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "POST",
                      "id": "dataform.projects.locations.repositories.workspaces.reset",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string",
                          "required": true,
                          "description": "Required. The workspace's name."
                        }
                      },
                      "description": "Performs a Git reset for uncommitted files in a Workspace.",
                      "request": {
                        "$ref": "ResetWorkspaceChangesRequest"
                      },
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "getIamPolicy": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                      "id": "dataform.projects.locations.repositories.workspaces.getIamPolicy",
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "resource"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:getIamPolicy",
                      "path": "v1beta1/{+resource}:getIamPolicy",
                      "parameters": {
                        "resource": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string",
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                        },
                        "options.requestedPolicyVersion": {
                          "format": "int32",
                          "location": "query",
                          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                          "type": "integer"
                        }
                      }
                    },
                    "fetchFileDiff": {
                      "parameterOrder": [
                        "workspace"
                      ],
                      "parameters": {
                        "path": {
                          "type": "string",
                          "description": "Required. The file's full path including filename, relative to the workspace root.",
                          "location": "query"
                        },
                        "workspace": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string",
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "location": "path"
                        }
                      },
                      "description": "Fetches Git diff for an uncommitted file in a Workspace.",
                      "path": "v1beta1/{+workspace}:fetchFileDiff",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.fetchFileDiff",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchFileDiff",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "FetchFileDiffResponse"
                      }
                    },
                    "readFile": {
                      "id": "dataform.projects.locations.repositories.workspaces.readFile",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:readFile",
                      "parameters": {
                        "path": {
                          "type": "string",
                          "location": "query",
                          "description": "Required. The file's full path including filename, relative to the workspace root."
                        },
                        "workspace": {
                          "type": "string",
                          "description": "Required. The workspace's name.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$"
                        }
                      },
                      "httpMethod": "GET",
                      "description": "Returns the contents of a file (inside a Workspace).",
                      "response": {
                        "$ref": "ReadFileResponse"
                      },
                      "path": "v1beta1/{+workspace}:readFile",
                      "parameterOrder": [
                        "workspace"
                      ]
                    },
                    "delete": {
                      "response": {
                        "$ref": "Empty"
                      },
                      "id": "dataform.projects.locations.repositories.workspaces.delete",
                      "path": "v1beta1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes a single Workspace.",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. The workspace resource's name.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "required": true
                        }
                      },
                      "httpMethod": "DELETE",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}"
                    },
                    "fetchGitAheadBehind": {
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "FetchGitAheadBehindResponse"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchGitAheadBehind",
                      "description": "Fetches Git ahead/behind against a remote branch.",
                      "id": "dataform.projects.locations.repositories.workspaces.fetchGitAheadBehind",
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "description": "Required. The workspace's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path"
                        },
                        "remoteBranch": {
                          "description": "Optional. The name of the branch in the Git remote against which this workspace should be compared. If left unset, the repository's default branch name will be used.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+name}:fetchGitAheadBehind"
                    },
                    "removeDirectory": {
                      "id": "dataform.projects.locations.repositories.workspaces.removeDirectory",
                      "description": "Deletes a directory (inside a Workspace) and all of its contents.",
                      "path": "v1beta1/{+workspace}:removeDirectory",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:removeDirectory",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "request": {
                        "$ref": "RemoveDirectoryRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "parameters": {
                        "workspace": {
                          "description": "Required. The workspace's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "response": {
                        "$ref": "Empty"
                      }
                    },
                    "makeDirectory": {
                      "parameters": {
                        "workspace": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "location": "path"
                        }
                      },
                      "id": "dataform.projects.locations.repositories.workspaces.makeDirectory",
                      "description": "Creates a directory inside a Workspace.",
                      "response": {
                        "$ref": "MakeDirectoryResponse"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:makeDirectory",
                      "httpMethod": "POST",
                      "path": "v1beta1/{+workspace}:makeDirectory",
                      "request": {
                        "$ref": "MakeDirectoryRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "workspace"
                      ]
                    },
                    "fetchFileGitStatuses": {
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "FetchFileGitStatusesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "type": "string",
                          "description": "Required. The workspace's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "id": "dataform.projects.locations.repositories.workspaces.fetchFileGitStatuses",
                      "description": "Fetches Git statuses for the files in a Workspace.",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchFileGitStatuses",
                      "path": "v1beta1/{+name}:fetchFileGitStatuses",
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "installNpmPackages": {
                      "path": "v1beta1/{+workspace}:installNpmPackages",
                      "parameters": {
                        "workspace": {
                          "location": "path",
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$"
                        }
                      },
                      "response": {
                        "$ref": "InstallNpmPackagesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "InstallNpmPackagesRequest"
                      },
                      "description": "Installs dependency NPM packages (inside a Workspace).",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.installNpmPackages",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:installNpmPackages",
                      "httpMethod": "POST"
                    },
                    "moveFile": {
                      "description": "Moves a file (inside a Workspace) to a new location.",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "parameters": {
                        "workspace": {
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path",
                          "description": "Required. The workspace's name."
                        }
                      },
                      "httpMethod": "POST",
                      "request": {
                        "$ref": "MoveFileRequest"
                      },
                      "response": {
                        "$ref": "MoveFileResponse"
                      },
                      "id": "dataform.projects.locations.repositories.workspaces.moveFile",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:moveFile",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+workspace}:moveFile"
                    },
                    "setIamPolicy": {
                      "parameterOrder": [
                        "resource"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:setIamPolicy",
                      "httpMethod": "POST",
                      "path": "v1beta1/{+resource}:setIamPolicy",
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                      "response": {
                        "$ref": "Policy"
                      },
                      "id": "dataform.projects.locations.repositories.workspaces.setIamPolicy",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "resource": {
                          "required": true,
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path"
                        }
                      },
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      }
                    },
                    "queryDirectoryContents": {
                      "description": "Returns the contents of a given Workspace directory.",
                      "response": {
                        "$ref": "QueryDirectoryContentsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.queryDirectoryContents",
                      "path": "v1beta1/{+workspace}:queryDirectoryContents",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "location": "query",
                          "description": "Optional. Maximum number of paths to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "Optional. Page token received from a previous `QueryDirectoryContents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `QueryDirectoryContents` must match the call that provided the page token.",
                          "location": "query",
                          "type": "string"
                        },
                        "workspace": {
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path"
                        },
                        "path": {
                          "description": "Optional. The directory's full path including directory name, relative to the workspace root. If left unset, the workspace root is used.",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:queryDirectoryContents",
                      "httpMethod": "GET"
                    },
                    "writeFile": {
                      "id": "dataform.projects.locations.repositories.workspaces.writeFile",
                      "parameters": {
                        "workspace": {
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "description": "Required. The workspace's name."
                        }
                      },
                      "parameterOrder": [
                        "workspace"
                      ],
                      "httpMethod": "POST",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:writeFile",
                      "response": {
                        "$ref": "WriteFileResponse"
                      },
                      "description": "Writes to a file (inside a Workspace).",
                      "request": {
                        "$ref": "WriteFileRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+workspace}:writeFile"
                    },
                    "list": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists Workspaces in a given Repository.",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.list",
                      "response": {
                        "$ref": "ListWorkspacesResponse"
                      },
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "description": "Required. The repository in which to list workspaces. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "required": true,
                          "type": "string"
                        },
                        "orderBy": {
                          "type": "string",
                          "description": "Optional. This field only supports ordering by `name`. If unspecified, the server will choose the ordering. If specified, the default order is ascending for the `name` field.",
                          "location": "query"
                        },
                        "filter": {
                          "description": "Optional. Filter for the returned list.",
                          "type": "string",
                          "location": "query"
                        },
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "Optional. Page token received from a previous `ListWorkspaces` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListWorkspaces` must match the call that provided the page token."
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Optional. Maximum number of workspaces to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "format": "int32",
                          "location": "query"
                        }
                      },
                      "httpMethod": "GET",
                      "path": "v1beta1/{+parent}/workspaces"
                    },
                    "create": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "workspaceId": {
                          "type": "string",
                          "location": "query",
                          "description": "Required. The ID to use for the workspace, which will become the final component of the workspace's resource name."
                        },
                        "parent": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "required": true,
                          "description": "Required. The repository in which to create the workspace. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "type": "string"
                        }
                      },
                      "description": "Creates a new Workspace in a given Repository.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "path": "v1beta1/{+parent}/workspaces",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces",
                      "id": "dataform.projects.locations.repositories.workspaces.create",
                      "request": {
                        "$ref": "Workspace"
                      },
                      "response": {
                        "$ref": "Workspace"
                      }
                    },
                    "push": {
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Pushes Git commits from a Workspace to the Repository's remote.",
                      "response": {
                        "$ref": "Empty"
                      },
                      "request": {
                        "$ref": "PushGitCommitsRequest"
                      },
                      "path": "v1beta1/{+name}:push",
                      "httpMethod": "POST",
                      "id": "dataform.projects.locations.repositories.workspaces.push",
                      "parameters": {
                        "name": {
                          "description": "Required. The workspace's name.",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:push"
                    },
                    "pull": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:pull",
                      "description": "Pulls Git commits from the Repository's remote into a Workspace.",
                      "id": "dataform.projects.locations.repositories.workspaces.pull",
                      "path": "v1beta1/{+name}:pull",
                      "request": {
                        "$ref": "PullGitCommitsRequest"
                      },
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. The workspace's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string",
                          "required": true
                        }
                      }
                    },
                    "commit": {
                      "description": "Applies a Git commit for uncommitted files in a Workspace.",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Required. The workspace's name."
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+name}:commit",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:commit",
                      "id": "dataform.projects.locations.repositories.workspaces.commit",
                      "request": {
                        "$ref": "CommitWorkspaceChangesRequest"
                      },
                      "httpMethod": "POST"
                    },
                    "moveDirectory": {
                      "id": "dataform.projects.locations.repositories.workspaces.moveDirectory",
                      "description": "Moves a directory (inside a Workspace), and all of its contents, to a new location.",
                      "request": {
                        "$ref": "MoveDirectoryRequest"
                      },
                      "parameters": {
                        "workspace": {
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path",
                          "description": "Required. The workspace's name."
                        }
                      },
                      "path": "v1beta1/{+workspace}:moveDirectory",
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "MoveDirectoryResponse"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:moveDirectory",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "removeFile": {
                      "parameterOrder": [
                        "workspace"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.removeFile",
                      "httpMethod": "POST",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:removeFile",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+workspace}:removeFile",
                      "description": "Deletes a file (inside a Workspace).",
                      "request": {
                        "$ref": "RemoveFileRequest"
                      },
                      "parameters": {
                        "workspace": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "description": "Required. The workspace's name.",
                          "location": "path"
                        }
                      }
                    },
                    "get": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}",
                      "id": "dataform.projects.locations.repositories.workspaces.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Workspace"
                      },
                      "description": "Fetches a single Workspace.",
                      "httpMethod": "GET",
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1beta1/{+name}",
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "description": "Required. The workspace's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path"
                        }
                      }
                    },
                    "testIamPermissions": {
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:testIamPermissions",
                      "parameterOrder": [
                        "resource"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.testIamPermissions",
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+resource}:testIamPermissions",
                      "parameters": {
                        "resource": {
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      }
                    }
                  }
                }
              },
              "methods": {
                "testIamPermissions": {
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "type": "string",
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "id": "dataform.projects.locations.repositories.testIamPermissions",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions",
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "path": "v1beta1/{+resource}:testIamPermissions"
                },
                "computeAccessTokenStatus": {
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "Required. The repository's name.",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "id": "dataform.projects.locations.repositories.computeAccessTokenStatus",
                  "description": "Computes a Repository's Git access token status.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:computeAccessTokenStatus",
                  "path": "v1beta1/{+name}:computeAccessTokenStatus",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "ComputeRepositoryAccessTokenStatusResponse"
                  }
                },
                "setIamPolicy": {
                  "path": "v1beta1/{+resource}:setIamPolicy",
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "httpMethod": "POST",
                  "id": "dataform.projects.locations.repositories.setIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                },
                "create": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "description": "Creates a new Repository in a given project and location.",
                  "response": {
                    "$ref": "Repository"
                  },
                  "request": {
                    "$ref": "Repository"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "dataform.projects.locations.repositories.create",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "Required. The location in which to create the repository. Must be in the format `projects/*/locations/*`."
                    },
                    "repositoryId": {
                      "description": "Required. The ID to use for the repository, which will become the final component of the repository's resource name.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1beta1/{+parent}/repositories",
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "list": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "id": "dataform.projects.locations.repositories.list",
                  "response": {
                    "$ref": "ListRepositoriesResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta1/{+parent}/repositories",
                  "description": "Lists Repositories in a given project and location.",
                  "parameters": {
                    "orderBy": {
                      "description": "Optional. This field only supports ordering by `name`. If unspecified, the server will choose the ordering. If specified, the default order is ascending for the `name` field.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The location in which to list repositories. Must be in the format `projects/*/locations/*`.",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "pageSize": {
                      "type": "integer",
                      "description": "Optional. Maximum number of repositories to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                      "format": "int32",
                      "location": "query"
                    },
                    "filter": {
                      "type": "string",
                      "description": "Optional. Filter for the returned list.",
                      "location": "query"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. Page token received from a previous `ListRepositories` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRepositories` must match the call that provided the page token."
                    }
                  }
                },
                "commit": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "POST",
                  "path": "v1beta1/{+name}:commit",
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CommitRepositoryChangesRequest"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "Required. The repository's name.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                    }
                  },
                  "id": "dataform.projects.locations.repositories.commit",
                  "description": "Applies a Git commit to a Repository. The Repository must not have a value for `git_remote_settings.url`.",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:commit",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "request": {
                    "$ref": "Repository"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta1/{+name}",
                  "response": {
                    "$ref": "Repository"
                  },
                  "description": "Updates a single Repository.",
                  "id": "dataform.projects.locations.repositories.patch",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "updateMask": {
                      "description": "Optional. Specifies the fields to be updated in the repository. If left unset, all fields will be updated.",
                      "location": "query",
                      "format": "google-fieldmask",
                      "type": "string"
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "Output only. The repository's name."
                    }
                  }
                },
                "queryDirectoryContents": {
                  "path": "v1beta1/{+name}:queryDirectoryContents",
                  "response": {
                    "$ref": "QueryRepositoryDirectoryContentsResponse"
                  },
                  "description": "Returns the contents of a given Repository directory. The Repository must not have a value for `git_remote_settings.url`.",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "commitSha": {
                      "type": "string",
                      "description": "Optional. The Commit SHA for the commit to query from. If unset, the directory will be queried from HEAD.",
                      "location": "query"
                    },
                    "pageToken": {
                      "description": "Optional. Page token received from a previous `QueryRepositoryDirectoryContents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `QueryRepositoryDirectoryContents` must match the call that provided the page token.",
                      "type": "string",
                      "location": "query"
                    },
                    "path": {
                      "type": "string",
                      "description": "Optional. The directory's full path including directory name, relative to root. If left unset, the root is used.",
                      "location": "query"
                    },
                    "name": {
                      "type": "string",
                      "description": "Required. The repository's name.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                    },
                    "pageSize": {
                      "type": "integer",
                      "description": "Optional. Maximum number of paths to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                      "location": "query",
                      "format": "int32"
                    }
                  },
                  "id": "dataform.projects.locations.repositories.queryDirectoryContents",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:queryDirectoryContents"
                },
                "getIamPolicy": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy",
                  "httpMethod": "GET",
                  "parameters": {
                    "options.requestedPolicyVersion": {
                      "type": "integer",
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                      "format": "int32",
                      "location": "query"
                    },
                    "resource": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "id": "dataform.projects.locations.repositories.getIamPolicy",
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta1/{+resource}:getIamPolicy"
                },
                "delete": {
                  "id": "dataform.projects.locations.repositories.delete",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true,
                      "location": "path",
                      "description": "Required. The repository's name.",
                      "type": "string"
                    },
                    "force": {
                      "location": "query",
                      "type": "boolean",
                      "description": "If set to true, any child resources of this repository will also be deleted. (Otherwise, the request will only succeed if the repository has no child resources.)"
                    }
                  },
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes a single Repository.",
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "readFile": {
                  "path": "v1beta1/{+name}:readFile",
                  "description": "Returns the contents of a file (inside a Repository). The Repository must not have a value for `git_remote_settings.url`.",
                  "httpMethod": "GET",
                  "id": "dataform.projects.locations.repositories.readFile",
                  "parameters": {
                    "commitSha": {
                      "location": "query",
                      "type": "string",
                      "description": "Optional. The commit SHA for the commit to read from. If unset, the file will be read from HEAD."
                    },
                    "path": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. Full file path to read including filename, from repository root."
                    },
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "type": "string",
                      "description": "Required. The repository's name.",
                      "required": true
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:readFile",
                  "response": {
                    "$ref": "ReadRepositoryFileResponse"
                  }
                },
                "get": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "description": "Fetches a single Repository.",
                  "path": "v1beta1/{+name}",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Repository"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "location": "path",
                      "description": "Required. The repository's name."
                    }
                  },
                  "id": "dataform.projects.locations.repositories.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "fetchRemoteBranches": {
                  "response": {
                    "$ref": "FetchRemoteBranchesResponse"
                  },
                  "path": "v1beta1/{+name}:fetchRemoteBranches",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "Required. The repository's name.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:fetchRemoteBranches",
                  "description": "Fetches a Repository's remote branches.",
                  "httpMethod": "GET",
                  "id": "dataform.projects.locations.repositories.fetchRemoteBranches",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "fetchHistory": {
                  "httpMethod": "GET",
                  "description": "Fetches a Repository's history of commits. The Repository must not have a value for `git_remote_settings.url`.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "FetchRepositoryHistoryResponse"
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:fetchHistory",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "dataform.projects.locations.repositories.fetchHistory",
                  "parameters": {
                    "pageToken": {
                      "description": "Optional. Page token received from a previous `FetchRepositoryHistory` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `FetchRepositoryHistory` must match the call that provided the page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "description": "Optional. Maximum number of commits to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                      "type": "integer"
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "Required. The repository's name.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "location": "path"
                    }
                  },
                  "path": "v1beta1/{+name}:fetchHistory"
                }
              }
            },
            "collections": {
              "methods": {
                "testIamPermissions": {
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "dataform.projects.locations.collections.testIamPermissions",
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/collections/{collectionsId}:testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/collections/[^/]+$",
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "resource"
                  ],
                  "path": "v1beta1/{+resource}:testIamPermissions"
                },
                "getIamPolicy": {
                  "path": "v1beta1/{+resource}:getIamPolicy",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "dataform.projects.locations.collections.getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "httpMethod": "GET",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/collections/{collectionsId}:getIamPolicy",
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "required": true,
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/collections/[^/]+$"
                    },
                    "options.requestedPolicyVersion": {
                      "type": "integer",
                      "location": "query",
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                      "format": "int32"
                    }
                  }
                },
                "setIamPolicy": {
                  "path": "v1beta1/{+resource}:setIamPolicy",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/collections/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
                    }
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/collections/{collectionsId}:setIamPolicy",
                  "id": "dataform.projects.locations.collections.setIamPolicy",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://dataform.googleapis.com/"
}

{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "version_module": true,
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "id": "dataform.projects.locations.get",
              "response": {
                "$ref": "Location"
              },
              "path": "v1beta1/{+name}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Resource name for the location.",
                  "pattern": "^projects/[^/]+/locations/[^/]+$"
                }
              },
              "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
              "description": "Gets information about a location.",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "flatPath": "v1beta1/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "description": "Lists information about the supported locations for this service.",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "parameterOrder": [
                "name"
              ],
              "id": "dataform.projects.locations.list",
              "path": "v1beta1/{+name}/locations",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page."
                },
                "filter": {
                  "location": "query",
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "type": "integer"
                },
                "includeUnrevealedLocations": {
                  "type": "boolean",
                  "description": "If true, the returned list will include locations which are not yet revealed.",
                  "location": "query"
                },
                "name": {
                  "location": "path",
                  "required": true,
                  "description": "The resource that owns the locations collection, if applicable.",
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                }
              }
            }
          },
          "resources": {
            "repositories": {
              "resources": {
                "workflowInvocations": {
                  "methods": {
                    "get": {
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "type": "string",
                          "description": "Required. The workflow invocation resource's name."
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}",
                      "description": "Fetches a single WorkflowInvocation.",
                      "path": "v1beta1/{+name}",
                      "id": "dataform.projects.locations.repositories.workflowInvocations.get",
                      "response": {
                        "$ref": "WorkflowInvocation"
                      }
                    },
                    "cancel": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}:cancel",
                      "description": "Requests cancellation of a running WorkflowInvocation.",
                      "request": {
                        "$ref": "CancelWorkflowInvocationRequest"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.workflowInvocations.cancel",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "description": "Required. The workflow invocation resource's name."
                        }
                      },
                      "response": {
                        "$ref": "Empty"
                      },
                      "path": "v1beta1/{+name}:cancel"
                    },
                    "list": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists WorkflowInvocations in a given Repository.",
                      "response": {
                        "$ref": "ListWorkflowInvocationsResponse"
                      },
                      "httpMethod": "GET",
                      "id": "dataform.projects.locations.repositories.workflowInvocations.list",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations",
                      "path": "v1beta1/{+parent}/workflowInvocations",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "description": "Required. The parent resource of the WorkflowInvocation type. Must be in the format `projects/*/locations/*/repositories/*`."
                        },
                        "pageSize": {
                          "location": "query",
                          "format": "int32",
                          "type": "integer",
                          "description": "Optional. Maximum number of workflow invocations to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default."
                        },
                        "filter": {
                          "location": "query",
                          "description": "Optional. Filter for the returned list.",
                          "type": "string"
                        },
                        "orderBy": {
                          "location": "query",
                          "description": "Optional. This field only supports ordering by `name`. If unspecified, the server will choose the ordering. If specified, the default order is ascending for the `name` field.",
                          "type": "string"
                        },
                        "pageToken": {
                          "description": "Optional. Page token received from a previous `ListWorkflowInvocations` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListWorkflowInvocations` must match the call that provided the page token.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "query": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}:query",
                      "path": "v1beta1/{+name}:query",
                      "response": {
                        "$ref": "QueryWorkflowInvocationActionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns WorkflowInvocationActions in a given WorkflowInvocation.",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "description": "Required. The workflow invocation's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "type": "string"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "Optional. Page token received from a previous `QueryWorkflowInvocationActions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `QueryWorkflowInvocationActions` must match the call that provided the page token.",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "format": "int32",
                          "description": "Optional. Maximum number of workflow invocations to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default."
                        }
                      },
                      "id": "dataform.projects.locations.repositories.workflowInvocations.query",
                      "httpMethod": "GET"
                    },
                    "delete": {
                      "description": "Deletes a single WorkflowInvocation.",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}",
                      "id": "dataform.projects.locations.repositories.workflowInvocations.delete",
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "description": "Required. The workflow invocation resource's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workflowInvocations/[^/]+$",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "DELETE",
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1beta1/{+name}",
                      "response": {
                        "$ref": "Empty"
                      }
                    },
                    "create": {
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "description": "Required. The repository in which to create the workflow invocation. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "dataform.projects.locations.repositories.workflowInvocations.create",
                      "request": {
                        "$ref": "WorkflowInvocation"
                      },
                      "path": "v1beta1/{+parent}/workflowInvocations",
                      "response": {
                        "$ref": "WorkflowInvocation"
                      },
                      "httpMethod": "POST",
                      "description": "Creates a new WorkflowInvocation in a given Repository.",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  }
                },
                "compilationResults": {
                  "methods": {
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "ListCompilationResultsResponse"
                      },
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "type": "integer",
                          "location": "query",
                          "description": "Optional. Maximum number of compilation results to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default."
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "Optional. Page token received from a previous `ListCompilationResults` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCompilationResults` must match the call that provided the page token.",
                          "location": "query"
                        },
                        "parent": {
                          "required": true,
                          "location": "path",
                          "description": "Required. The repository in which to list compilation results. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "httpMethod": "GET",
                      "path": "v1beta1/{+parent}/compilationResults",
                      "id": "dataform.projects.locations.repositories.compilationResults.list",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists CompilationResults in a given Repository."
                    },
                    "query": {
                      "path": "v1beta1/{+name}:query",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns CompilationResultActions in a given CompilationResult.",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults/{compilationResultsId}:query",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/compilationResults/[^/]+$",
                          "type": "string",
                          "description": "Required. The compilation result's name.",
                          "required": true
                        },
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "Optional. Page token received from a previous `QueryCompilationResultActions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `QueryCompilationResultActions` must match the call that provided the page token."
                        },
                        "filter": {
                          "location": "query",
                          "description": "Optional. Optional filter for the returned list. Filtering is only currently supported on the `file_path` field.",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "location": "query",
                          "description": "Optional. Maximum number of compilation results to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default."
                        }
                      },
                      "id": "dataform.projects.locations.repositories.compilationResults.query",
                      "response": {
                        "$ref": "QueryCompilationResultActionsResponse"
                      }
                    },
                    "create": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "CompilationResult"
                      },
                      "parameters": {
                        "parent": {
                          "description": "Required. The repository in which to create the compilation result. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "request": {
                        "$ref": "CompilationResult"
                      },
                      "description": "Creates a new CompilationResult in a given project and location.",
                      "id": "dataform.projects.locations.repositories.compilationResults.create",
                      "httpMethod": "POST",
                      "path": "v1beta1/{+parent}/compilationResults",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "get": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults/{compilationResultsId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "CompilationResult"
                      },
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. The compilation result's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/compilationResults/[^/]+$",
                          "type": "string",
                          "required": true
                        }
                      },
                      "description": "Fetches a single CompilationResult.",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.compilationResults.get",
                      "path": "v1beta1/{+name}"
                    }
                  }
                },
                "releaseConfigs": {
                  "methods": {
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+parent}/releaseConfigs",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "description": "Required. The repository in which to list release configs. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "Optional. Page token received from a previous `ListReleaseConfigs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReleaseConfigs` must match the call that provided the page token.",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Optional. Maximum number of release configs to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "format": "int32",
                          "type": "integer",
                          "location": "query"
                        }
                      },
                      "response": {
                        "$ref": "ListReleaseConfigsResponse"
                      },
                      "description": "Lists ReleaseConfigs in a given Repository.",
                      "httpMethod": "GET",
                      "id": "dataform.projects.locations.repositories.releaseConfigs.list",
                      "parameterOrder": [
                        "parent"
                      ]
                    },
                    "delete": {
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1beta1/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs/{releaseConfigsId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/releaseConfigs/[^/]+$",
                          "required": true,
                          "type": "string",
                          "description": "Required. The release config's name."
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.releaseConfigs.delete",
                      "description": "Deletes a single ReleaseConfig."
                    },
                    "patch": {
                      "path": "v1beta1/{+name}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/releaseConfigs/[^/]+$",
                          "description": "Output only. The release config's name.",
                          "required": true,
                          "type": "string",
                          "location": "path"
                        },
                        "updateMask": {
                          "description": "Optional. Specifies the fields to be updated in the release config. If left unset, all fields will be updated.",
                          "location": "query",
                          "format": "google-fieldmask",
                          "type": "string"
                        }
                      },
                      "request": {
                        "$ref": "ReleaseConfig"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "ReleaseConfig"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs/{releaseConfigsId}",
                      "id": "dataform.projects.locations.repositories.releaseConfigs.patch",
                      "description": "Updates a single ReleaseConfig."
                    },
                    "create": {
                      "request": {
                        "$ref": "ReleaseConfig"
                      },
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new ReleaseConfig in a given Repository.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "id": "dataform.projects.locations.repositories.releaseConfigs.create",
                      "parameters": {
                        "releaseConfigId": {
                          "description": "Required. The ID to use for the release config, which will become the final component of the release config's resource name.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "location": "path",
                          "type": "string",
                          "description": "Required. The repository in which to create the release config. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$"
                        }
                      },
                      "response": {
                        "$ref": "ReleaseConfig"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs",
                      "path": "v1beta1/{+parent}/releaseConfigs"
                    },
                    "get": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs/{releaseConfigsId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+name}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/releaseConfigs/[^/]+$",
                          "location": "path",
                          "description": "Required. The release config's name.",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "ReleaseConfig"
                      },
                      "description": "Fetches a single ReleaseConfig.",
                      "id": "dataform.projects.locations.repositories.releaseConfigs.get",
                      "parameterOrder": [
                        "name"
                      ]
                    }
                  }
                },
                "workspaces": {
                  "methods": {
                    "moveDirectory": {
                      "description": "Moves a directory (inside a Workspace), and all of its contents, to a new location.",
                      "response": {
                        "$ref": "MoveDirectoryResponse"
                      },
                      "request": {
                        "$ref": "MoveDirectoryRequest"
                      },
                      "parameters": {
                        "workspace": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "description": "Required. The workspace's name.",
                          "required": true
                        }
                      },
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+workspace}:moveDirectory",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:moveDirectory",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.moveDirectory"
                    },
                    "installNpmPackages": {
                      "parameterOrder": [
                        "workspace"
                      ],
                      "response": {
                        "$ref": "InstallNpmPackagesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:installNpmPackages",
                      "request": {
                        "$ref": "InstallNpmPackagesRequest"
                      },
                      "id": "dataform.projects.locations.repositories.workspaces.installNpmPackages",
                      "path": "v1beta1/{+workspace}:installNpmPackages",
                      "httpMethod": "POST",
                      "parameters": {
                        "workspace": {
                          "description": "Required. The workspace's name.",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$"
                        }
                      },
                      "description": "Installs dependency NPM packages (inside a Workspace)."
                    },
                    "removeDirectory": {
                      "description": "Deletes a directory (inside a Workspace) and all of its contents.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "RemoveDirectoryRequest"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:removeDirectory",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "path": "v1beta1/{+workspace}:removeDirectory",
                      "id": "dataform.projects.locations.repositories.workspaces.removeDirectory",
                      "parameters": {
                        "workspace": {
                          "description": "Required. The workspace's name.",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string"
                        }
                      },
                      "httpMethod": "POST"
                    },
                    "fetchGitAheadBehind": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.fetchGitAheadBehind",
                      "parameters": {
                        "name": {
                          "description": "Required. The workspace's name.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path"
                        },
                        "remoteBranch": {
                          "location": "query",
                          "description": "Optional. The name of the branch in the Git remote against which this workspace should be compared. If left unset, the repository's default branch name will be used.",
                          "type": "string"
                        }
                      },
                      "httpMethod": "GET",
                      "description": "Fetches Git ahead/behind against a remote branch.",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchGitAheadBehind",
                      "path": "v1beta1/{+name}:fetchGitAheadBehind",
                      "response": {
                        "$ref": "FetchGitAheadBehindResponse"
                      }
                    },
                    "writeFile": {
                      "parameterOrder": [
                        "workspace"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.writeFile",
                      "response": {
                        "$ref": "WriteFileResponse"
                      },
                      "path": "v1beta1/{+workspace}:writeFile",
                      "description": "Writes to a file (inside a Workspace).",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:writeFile",
                      "parameters": {
                        "workspace": {
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Required. The workspace's name.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "WriteFileRequest"
                      },
                      "httpMethod": "POST"
                    },
                    "readFile": {
                      "description": "Returns the contents of a file (inside a Workspace).",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "response": {
                        "$ref": "ReadFileResponse"
                      },
                      "parameters": {
                        "workspace": {
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string"
                        },
                        "path": {
                          "type": "string",
                          "description": "Required. The file's full path including filename, relative to the workspace root.",
                          "location": "query"
                        }
                      },
                      "path": "v1beta1/{+workspace}:readFile",
                      "id": "dataform.projects.locations.repositories.workspaces.readFile",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:readFile"
                    },
                    "reset": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Performs a Git reset for uncommitted files in a Workspace.",
                      "id": "dataform.projects.locations.repositories.workspaces.reset",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "type": "string"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:reset",
                      "request": {
                        "$ref": "ResetWorkspaceChangesRequest"
                      },
                      "httpMethod": "POST",
                      "path": "v1beta1/{+name}:reset",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      }
                    },
                    "get": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "GET",
                      "id": "dataform.projects.locations.repositories.workspaces.get",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}",
                      "path": "v1beta1/{+name}",
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "type": "string",
                          "location": "path",
                          "description": "Required. The workspace's name."
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "description": "Fetches a single Workspace.",
                      "response": {
                        "$ref": "Workspace"
                      }
                    },
                    "queryDirectoryContents": {
                      "parameterOrder": [
                        "workspace"
                      ],
                      "parameters": {
                        "pageSize": {
                          "description": "Optional. Maximum number of paths to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "workspace": {
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "description": "Required. The workspace's name.",
                          "type": "string"
                        },
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "Optional. Page token received from a previous `QueryDirectoryContents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `QueryDirectoryContents` must match the call that provided the page token."
                        },
                        "path": {
                          "type": "string",
                          "description": "Optional. The directory's full path including directory name, relative to the workspace root. If left unset, the workspace root is used.",
                          "location": "query"
                        }
                      },
                      "description": "Returns the contents of a given Workspace directory.",
                      "httpMethod": "GET",
                      "id": "dataform.projects.locations.repositories.workspaces.queryDirectoryContents",
                      "path": "v1beta1/{+workspace}:queryDirectoryContents",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "QueryDirectoryContentsResponse"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:queryDirectoryContents"
                    },
                    "commit": {
                      "path": "v1beta1/{+name}:commit",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "httpMethod": "POST",
                      "request": {
                        "$ref": "CommitWorkspaceChangesRequest"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "type": "string",
                          "description": "Required. The workspace's name.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path"
                        }
                      },
                      "description": "Applies a Git commit for uncommitted files in a Workspace.",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:commit",
                      "id": "dataform.projects.locations.repositories.workspaces.commit"
                    },
                    "fetchFileGitStatuses": {
                      "id": "dataform.projects.locations.repositories.workspaces.fetchFileGitStatuses",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchFileGitStatuses",
                      "description": "Fetches Git statuses for the files in a Workspace.",
                      "response": {
                        "$ref": "FetchFileGitStatusesResponse"
                      },
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "description": "Required. The workspace's name.",
                          "type": "string",
                          "location": "path",
                          "required": true
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "path": "v1beta1/{+name}:fetchFileGitStatuses",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "delete": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}",
                      "path": "v1beta1/{+name}",
                      "id": "dataform.projects.locations.repositories.workspaces.delete",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "DELETE",
                      "description": "Deletes a single Workspace.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "description": "Required. The workspace resource's name.",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        }
                      }
                    },
                    "fetchFileDiff": {
                      "parameterOrder": [
                        "workspace"
                      ],
                      "id": "dataform.projects.locations.repositories.workspaces.fetchFileDiff",
                      "parameters": {
                        "path": {
                          "description": "Required. The file's full path including filename, relative to the workspace root.",
                          "type": "string",
                          "location": "query"
                        },
                        "workspace": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "description": "Required. The workspace's name.",
                          "required": true,
                          "location": "path",
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+workspace}:fetchFileDiff",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchFileDiff",
                      "response": {
                        "$ref": "FetchFileDiffResponse"
                      },
                      "httpMethod": "GET",
                      "description": "Fetches Git diff for an uncommitted file in a Workspace."
                    },
                    "removeFile": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:removeFile",
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "workspace"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1beta1/{+workspace}:removeFile",
                      "response": {
                        "$ref": "Empty"
                      },
                      "id": "dataform.projects.locations.repositories.workspaces.removeFile",
                      "description": "Deletes a file (inside a Workspace).",
                      "parameters": {
                        "workspace": {
                          "type": "string",
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$"
                        }
                      },
                      "request": {
                        "$ref": "RemoveFileRequest"
                      }
                    },
                    "pull": {
                      "id": "dataform.projects.locations.repositories.workspaces.pull",
                      "request": {
                        "$ref": "PullGitCommitsRequest"
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:pull",
                      "path": "v1beta1/{+name}:pull",
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path",
                          "description": "Required. The workspace's name.",
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Pulls Git commits from the Repository's remote into a Workspace.",
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ]
                    },
                    "list": {
                      "response": {
                        "$ref": "ListWorkspacesResponse"
                      },
                      "httpMethod": "GET",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "Optional. Page token received from a previous `ListWorkspaces` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListWorkspaces` must match the call that provided the page token."
                        },
                        "filter": {
                          "description": "Optional. Filter for the returned list.",
                          "type": "string",
                          "location": "query"
                        },
                        "orderBy": {
                          "location": "query",
                          "description": "Optional. This field only supports ordering by `name`. If unspecified, the server will choose the ordering. If specified, the default order is ascending for the `name` field.",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Optional. Maximum number of workspaces to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default.",
                          "location": "query",
                          "format": "int32"
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Required. The repository in which to list workspaces. Must be in the format `projects/*/locations/*/repositories/*`."
                        }
                      },
                      "description": "Lists Workspaces in a given Repository.",
                      "path": "v1beta1/{+parent}/workspaces",
                      "id": "dataform.projects.locations.repositories.workspaces.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "create": {
                      "parameters": {
                        "workspaceId": {
                          "description": "Required. The ID to use for the workspace, which will become the final component of the workspace's resource name.",
                          "type": "string",
                          "location": "query"
                        },
                        "parent": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                          "type": "string",
                          "description": "Required. The repository in which to create the workspace. Must be in the format `projects/*/locations/*/repositories/*`.",
                          "required": true
                        }
                      },
                      "path": "v1beta1/{+parent}/workspaces",
                      "httpMethod": "POST",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new Workspace in a given Repository.",
                      "id": "dataform.projects.locations.repositories.workspaces.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "Workspace"
                      },
                      "request": {
                        "$ref": "Workspace"
                      }
                    },
                    "push": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:push",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Required. The workspace's name."
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "POST",
                      "description": "Pushes Git commits from a Workspace to the Repository's remote.",
                      "id": "dataform.projects.locations.repositories.workspaces.push",
                      "request": {
                        "$ref": "PushGitCommitsRequest"
                      },
                      "response": {
                        "$ref": "Empty"
                      },
                      "path": "v1beta1/{+name}:push"
                    },
                    "moveFile": {
                      "id": "dataform.projects.locations.repositories.workspaces.moveFile",
                      "description": "Moves a file (inside a Workspace) to a new location.",
                      "httpMethod": "POST",
                      "request": {
                        "$ref": "MoveFileRequest"
                      },
                      "path": "v1beta1/{+workspace}:moveFile",
                      "response": {
                        "$ref": "MoveFileResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:moveFile",
                      "parameters": {
                        "workspace": {
                          "required": true,
                          "description": "Required. The workspace's name.",
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "workspace"
                      ]
                    },
                    "makeDirectory": {
                      "description": "Creates a directory inside a Workspace.",
                      "response": {
                        "$ref": "MakeDirectoryResponse"
                      },
                      "parameters": {
                        "workspace": {
                          "description": "Required. The workspace's name.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+/workspaces/[^/]+$",
                          "location": "path"
                        }
                      },
                      "parameterOrder": [
                        "workspace"
                      ],
                      "request": {
                        "$ref": "MakeDirectoryRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "id": "dataform.projects.locations.repositories.workspaces.makeDirectory",
                      "path": "v1beta1/{+workspace}:makeDirectory",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:makeDirectory"
                    }
                  }
                }
              },
              "methods": {
                "patch": {
                  "httpMethod": "PATCH",
                  "request": {
                    "$ref": "Repository"
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "description": "Updates a single Repository.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Repository"
                  },
                  "id": "dataform.projects.locations.repositories.patch",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true,
                      "description": "Output only. The repository's name.",
                      "type": "string"
                    },
                    "updateMask": {
                      "format": "google-fieldmask",
                      "type": "string",
                      "location": "query",
                      "description": "Optional. Specifies the fields to be updated in the repository. If left unset, all fields will be updated."
                    }
                  },
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "description": "Optional. Filter for the returned list.",
                      "location": "query"
                    },
                    "orderBy": {
                      "type": "string",
                      "description": "Optional. This field only supports ordering by `name`. If unspecified, the server will choose the ordering. If specified, the default order is ascending for the `name` field.",
                      "location": "query"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "Optional. Page token received from a previous `ListRepositories` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRepositories` must match the call that provided the page token."
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "format": "int32",
                      "description": "Optional. Maximum number of repositories to return. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default."
                    },
                    "parent": {
                      "location": "path",
                      "description": "Required. The location in which to list repositories. Must be in the format `projects/*/locations/*`.",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "path": "v1beta1/{+parent}/repositories",
                  "id": "dataform.projects.locations.repositories.list",
                  "description": "Lists Repositories in a given project and location.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListRepositoriesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories"
                },
                "delete": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "description": "Deletes a single Repository.",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "dataform.projects.locations.repositories.delete",
                  "path": "v1beta1/{+name}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "type": "string",
                      "description": "Required. The repository's name.",
                      "required": true,
                      "location": "path"
                    },
                    "force": {
                      "description": "If set to true, any child resources of this repository will also be deleted. (Otherwise, the request will only succeed if the repository has no child resources.)",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "httpMethod": "DELETE"
                },
                "fetchRemoteBranches": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "location": "path",
                      "description": "Required. The repository's name.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "required": true
                    }
                  },
                  "description": "Fetches a Repository's remote branches.",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:fetchRemoteBranches",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "dataform.projects.locations.repositories.fetchRemoteBranches",
                  "path": "v1beta1/{+name}:fetchRemoteBranches",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "FetchRemoteBranchesResponse"
                  }
                },
                "create": {
                  "request": {
                    "$ref": "Repository"
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories",
                  "id": "dataform.projects.locations.repositories.create",
                  "description": "Creates a new Repository in a given project and location.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1beta1/{+parent}/repositories",
                  "parameters": {
                    "repositoryId": {
                      "location": "query",
                      "description": "Required. The ID to use for the repository, which will become the final component of the repository's resource name.",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The location in which to create the repository. Must be in the format `projects/*/locations/*`.",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Repository"
                  }
                },
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/repositories/[^/]+$",
                      "description": "Required. The repository's name."
                    }
                  },
                  "description": "Fetches a single Repository.",
                  "httpMethod": "GET",
                  "id": "dataform.projects.locations.repositories.get",
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
                  "response": {
                    "$ref": "Repository"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "title": "Dataform API",
  "mtlsRootUrl": "https://dataform.mtls.googleapis.com/",
  "name": "dataform",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "batchPath": "batch",
  "basePath": "",
  "version": "v1beta1",
  "discoveryVersion": "v1",
  "revision": "20221203",
  "id": "dataform:v1beta1",
  "rootUrl": "https://dataform.googleapis.com/",
  "baseUrl": "https://dataform.googleapis.com/",
  "kind": "discovery#restDescription",
  "parameters": {
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    }
  },
  "description": "",
  "schemas": {
    "Operations": {
      "description": "Represents a list of arbitrary database operations.",
      "id": "Operations",
      "properties": {
        "relationDescriptor": {
          "description": "Descriptor for any output relation and its columns. Only set if `has_output` is true.",
          "$ref": "RelationDescriptor"
        },
        "tags": {
          "description": "Arbitrary, user-defined tags on this action.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disabled": {
          "description": "Whether this action is disabled (i.e. should not be run).",
          "type": "boolean"
        },
        "hasOutput": {
          "type": "boolean",
          "description": "Whether these operations produce an output relation."
        },
        "dependencyTargets": {
          "description": "A list of actions that this action depends on.",
          "items": {
            "$ref": "Target"
          },
          "type": "array"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of arbitrary SQL statements that will be executed without alteration."
        }
      },
      "type": "object"
    },
    "WorkflowInvocationAction": {
      "properties": {
        "canonicalTarget": {
          "$ref": "Target",
          "readOnly": true,
          "description": "Output only. The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result."
        },
        "bigqueryAction": {
          "description": "Output only. The workflow action's bigquery action details.",
          "$ref": "BigQueryAction",
          "readOnly": true
        },
        "target": {
          "readOnly": true,
          "description": "Output only. This action's identifier. Unique within the workflow invocation.",
          "$ref": "Target"
        },
        "failureReason": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. If and only if action's state is FAILED a failure reason is set."
        },
        "invocationTiming": {
          "$ref": "Interval",
          "readOnly": true,
          "description": "Output only. This action's timing details. `start_time` will be set if the action is in [RUNNING, SUCCEEDED, CANCELLED, FAILED] state. `end_time` will be set if the action is in [SUCCEEDED, CANCELLED, FAILED] state."
        },
        "state": {
          "description": "Output only. This action's current state.",
          "type": "string",
          "enumDescriptions": [
            "The action has not yet been considered for invocation.",
            "The action is currently running.",
            "Execution of the action was skipped because upstream dependencies did not all complete successfully. A terminal state.",
            "Execution of the action was disabled as per the configuration of the corresponding compilation result action. A terminal state.",
            "The action succeeded. A terminal state.",
            "The action was cancelled. A terminal state.",
            "The action failed. A terminal state."
          ],
          "readOnly": true,
          "enum": [
            "PENDING",
            "RUNNING",
            "SKIPPED",
            "DISABLED",
            "SUCCEEDED",
            "CANCELLED",
            "FAILED"
          ]
        }
      },
      "description": "Represents a single action in a workflow invocation.",
      "id": "WorkflowInvocationAction",
      "type": "object"
    },
    "ListWorkflowInvocationsResponse": {
      "properties": {
        "workflowInvocations": {
          "items": {
            "$ref": "WorkflowInvocation"
          },
          "description": "List of workflow invocations.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Locations which could not be reached."
        }
      },
      "type": "object",
      "description": "`ListWorkflowInvocations` response message.",
      "id": "ListWorkflowInvocationsResponse"
    },
    "Repository": {
      "type": "object",
      "description": "Represents a Dataform Git repository.",
      "id": "Repository",
      "properties": {
        "gitRemoteSettings": {
          "description": "Optional. If set, configures this repository to be linked to a Git remote.",
          "$ref": "GitRemoteSettings"
        },
        "npmrcEnvironmentVariablesSecretVersion": {
          "type": "string",
          "description": "Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format."
        },
        "name": {
          "readOnly": true,
          "description": "Output only. The repository's name.",
          "type": "string"
        }
      }
    },
    "CompilationResultAction": {
      "type": "object",
      "description": "Represents a single Dataform action in a compilation result.",
      "properties": {
        "assertion": {
          "$ref": "Assertion",
          "description": "The assertion executed by this action."
        },
        "relation": {
          "description": "The database relation created/updated by this action.",
          "$ref": "Relation"
        },
        "canonicalTarget": {
          "description": "The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result.",
          "$ref": "Target"
        },
        "operations": {
          "description": "The database operations executed by this action.",
          "$ref": "Operations"
        },
        "declaration": {
          "description": "The declaration declared by this action.",
          "$ref": "Declaration"
        },
        "filePath": {
          "description": "The full path including filename in which this action is located, relative to the workspace root.",
          "type": "string"
        },
        "target": {
          "description": "This action's identifier. Unique within the compilation result.",
          "$ref": "Target"
        }
      },
      "id": "CompilationResultAction"
    },
    "ListRepositoriesResponse": {
      "description": "`ListRepositories` response message.",
      "type": "object",
      "id": "ListRepositoriesResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "unreachable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Locations which could not be reached."
        },
        "repositories": {
          "description": "List of repositories.",
          "type": "array",
          "items": {
            "$ref": "Repository"
          }
        }
      }
    },
    "CompilationError": {
      "description": "An error encountered when attempting to compile a Dataform project.",
      "properties": {
        "path": {
          "type": "string",
          "description": "Output only. The path of the file where this error occurred, if available, relative to the project root.",
          "readOnly": true
        },
        "stack": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The error's full stack trace."
        },
        "actionTarget": {
          "readOnly": true,
          "description": "Output only. The identifier of the action where this error occurred, if available.",
          "$ref": "Target"
        },
        "message": {
          "readOnly": true,
          "description": "Output only. The error's top level message.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CompilationError"
    },
    "Assertion": {
      "properties": {
        "selectQuery": {
          "type": "string",
          "description": "The SELECT query which must return zero rows in order for this assertion to succeed."
        },
        "parentAction": {
          "description": "The parent action of this assertion. Only set if this assertion was automatically generated.",
          "$ref": "Target"
        },
        "dependencyTargets": {
          "type": "array",
          "items": {
            "$ref": "Target"
          },
          "description": "A list of actions that this action depends on."
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Arbitrary, user-defined tags on this action."
        },
        "disabled": {
          "description": "Whether this action is disabled (i.e. should not be run).",
          "type": "boolean"
        },
        "relationDescriptor": {
          "$ref": "RelationDescriptor",
          "description": "Descriptor for the assertion's automatically-generated view and its columns."
        }
      },
      "type": "object",
      "id": "Assertion",
      "description": "Represents an assertion upon a SQL query which is required return zero rows."
    },
    "Interval": {
      "type": "object",
      "properties": {
        "endTime": {
          "format": "google-datetime",
          "description": "Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.",
          "type": "string"
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start."
        }
      },
      "id": "Interval",
      "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time."
    },
    "CommitAuthor": {
      "type": "object",
      "description": "Represents the author of a Git commit.",
      "properties": {
        "emailAddress": {
          "description": "Required. The commit author's email address.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Required. The commit author's name."
        }
      },
      "id": "CommitAuthor"
    },
    "InvocationConfig": {
      "type": "object",
      "properties": {
        "transitiveDependenciesIncluded": {
          "description": "Immutable. When set to true, transitive dependencies of included actions will be executed.",
          "type": "boolean"
        },
        "includedTags": {
          "items": {
            "type": "string"
          },
          "description": "Immutable. The set of tags to include.",
          "type": "array"
        },
        "fullyRefreshIncrementalTablesEnabled": {
          "description": "Immutable. When set to true, any incremental tables will be fully refreshed.",
          "type": "boolean"
        },
        "includedTargets": {
          "description": "Immutable. The set of action identifiers to include.",
          "type": "array",
          "items": {
            "$ref": "Target"
          }
        },
        "transitiveDependentsIncluded": {
          "type": "boolean",
          "description": "Immutable. When set to true, transitive dependents of included actions will be executed."
        }
      },
      "description": "Includes various configuration options for this workflow invocation. If both `included_targets` and `included_tags` are unset, all actions will be included.",
      "id": "InvocationConfig"
    },
    "MakeDirectoryResponse": {
      "properties": {},
      "description": "`MakeDirectory` response message.",
      "id": "MakeDirectoryResponse",
      "type": "object"
    },
    "RemoveDirectoryRequest": {
      "description": "`RemoveDirectory` request message.",
      "type": "object",
      "id": "RemoveDirectoryRequest",
      "properties": {
        "path": {
          "type": "string",
          "description": "Required. The directory's full path including directory name, relative to the workspace root."
        }
      }
    },
    "Status": {
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "Status"
    },
    "BigQueryAction": {
      "properties": {
        "sqlScript": {
          "readOnly": true,
          "description": "Output only. The generated BigQuery SQL script that will be executed.",
          "type": "string"
        }
      },
      "id": "BigQueryAction",
      "type": "object",
      "description": "Represents a workflow action that will run against BigQuery."
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "Location"
          },
          "description": "A list of locations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The response message for Locations.ListLocations."
    },
    "FetchGitAheadBehindResponse": {
      "description": "`FetchGitAheadBehind` response message.",
      "properties": {
        "commitsBehind": {
          "format": "int32",
          "description": "The number of commits in the workspace that are not in the remote branch.",
          "type": "integer"
        },
        "commitsAhead": {
          "format": "int32",
          "description": "The number of commits in the remote branch that are not in the workspace.",
          "type": "integer"
        }
      },
      "id": "FetchGitAheadBehindResponse",
      "type": "object"
    },
    "MoveFileResponse": {
      "type": "object",
      "properties": {},
      "id": "MoveFileResponse",
      "description": "`MoveFile` response message."
    },
    "WorkflowInvocation": {
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "RUNNING",
            "SUCCEEDED",
            "CANCELLED",
            "FAILED",
            "CANCELING"
          ],
          "description": "Output only. This workflow invocation's current state.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The workflow invocation is currently running.",
            "The workflow invocation succeeded. A terminal state.",
            "The workflow invocation was cancelled. A terminal state.",
            "The workflow invocation failed. A terminal state.",
            "The workflow invocation is being cancelled, but some actions are still running."
          ],
          "readOnly": true
        },
        "invocationTiming": {
          "$ref": "Interval",
          "description": "Output only. This workflow invocation's timing details.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The workflow invocation's name."
        },
        "compilationResult": {
          "type": "string",
          "description": "Immutable. The name of the compilation result to compile. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`."
        },
        "invocationConfig": {
          "description": "Immutable. If left unset, a default InvocationConfig will be used.",
          "$ref": "InvocationConfig"
        }
      },
      "type": "object",
      "id": "WorkflowInvocation",
      "description": "Represents a single invocation of a compilation result."
    },
    "Workspace": {
      "description": "Represents a Dataform Git workspace.",
      "properties": {
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The workspace's name."
        }
      },
      "id": "Workspace",
      "type": "object"
    },
    "FetchRemoteBranchesResponse": {
      "properties": {
        "branches": {
          "items": {
            "type": "string"
          },
          "description": "The remote repository's branch names.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "FetchRemoteBranchesResponse",
      "description": "`FetchRemoteBranches` response message."
    },
    "FetchFileGitStatusesResponse": {
      "id": "FetchFileGitStatusesResponse",
      "type": "object",
      "properties": {
        "uncommittedFileChanges": {
          "type": "array",
          "description": "A list of all files which have uncommitted Git changes. There will only be a single entry for any given file.",
          "items": {
            "$ref": "UncommittedFileChange"
          }
        }
      },
      "description": "`FetchFileGitStatuses` response message."
    },
    "ReadFileResponse": {
      "type": "object",
      "id": "ReadFileResponse",
      "description": "`ReadFile` response message.",
      "properties": {
        "fileContents": {
          "description": "The file's contents.",
          "format": "byte",
          "type": "string"
        }
      }
    },
    "IncrementalTableConfig": {
      "properties": {
        "incrementalSelectQuery": {
          "description": "The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.",
          "type": "string"
        },
        "refreshDisabled": {
          "type": "boolean",
          "description": "Whether this table should be protected from being refreshed."
        },
        "uniqueKeyParts": {
          "items": {
            "type": "string"
          },
          "description": "A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.",
          "type": "array"
        },
        "incrementalPreOperations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "SQL statements to be executed before inserting new rows into the relation."
        },
        "incrementalPostOperations": {
          "items": {
            "type": "string"
          },
          "description": "SQL statements to be executed after inserting new rows into the relation.",
          "type": "array"
        },
        "updatePartitionFilter": {
          "description": "A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information).",
          "type": "string"
        }
      },
      "description": "Contains settings for relations of type `INCREMENTAL_TABLE`.",
      "id": "IncrementalTableConfig",
      "type": "object"
    },
    "InstallNpmPackagesRequest": {
      "description": "`InstallNpmPackages` request message.",
      "properties": {},
      "id": "InstallNpmPackagesRequest",
      "type": "object"
    },
    "Location": {
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "locationId": {
          "type": "string",
          "description": "The canonical id for this location. For example: `\"us-east1\"`."
        }
      },
      "description": "A resource that represents Google Cloud Platform location.",
      "type": "object",
      "id": "Location"
    },
    "InstallNpmPackagesResponse": {
      "type": "object",
      "description": "`InstallNpmPackages` response message.",
      "properties": {},
      "id": "InstallNpmPackagesResponse"
    },
    "PushGitCommitsRequest": {
      "properties": {
        "remoteBranch": {
          "description": "Optional. The name of the branch in the Git remote to which commits should be pushed. If left unset, the repository's default branch name will be used.",
          "type": "string"
        }
      },
      "id": "PushGitCommitsRequest",
      "description": "`PushGitCommits` request message.",
      "type": "object"
    },
    "WriteFileRequest": {
      "description": "`WriteFile` request message.",
      "properties": {
        "contents": {
          "format": "byte",
          "description": "Required. The file's contents.",
          "type": "string"
        },
        "path": {
          "description": "Required. The file.",
          "type": "string"
        }
      },
      "id": "WriteFileRequest",
      "type": "object"
    },
    "ListCompilationResultsResponse": {
      "type": "object",
      "description": "`ListCompilationResults` response message.",
      "id": "ListCompilationResultsResponse",
      "properties": {
        "unreachable": {
          "description": "Locations which could not be reached.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "compilationResults": {
          "description": "List of compilation results.",
          "type": "array",
          "items": {
            "$ref": "CompilationResult"
          }
        }
      }
    },
    "RemoveFileRequest": {
      "description": "`RemoveFile` request message.",
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Required. The file's full path including filename, relative to the workspace root."
        }
      },
      "id": "RemoveFileRequest"
    },
    "OperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "properties": {
        "verb": {
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "description": "Output only. The time the operation finished running.",
          "format": "google-datetime",
          "readOnly": true
        },
        "statusDetail": {
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "apiVersion": {
          "readOnly": true,
          "description": "Output only. API version used to start the operation.",
          "type": "string"
        }
      },
      "id": "OperationMetadata",
      "type": "object"
    },
    "Relation": {
      "id": "Relation",
      "type": "object",
      "properties": {
        "preOperations": {
          "description": "SQL statements to be executed before creating the relation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relationDescriptor": {
          "$ref": "RelationDescriptor",
          "description": "Descriptor for the relation and its columns."
        },
        "partitionExpirationDays": {
          "type": "integer",
          "format": "int32",
          "description": "Sets the partition expiration in days."
        },
        "selectQuery": {
          "description": "The SELECT query which returns rows which this relation should contain.",
          "type": "string"
        },
        "partitionExpression": {
          "description": "The SQL expression used to partition the relation.",
          "type": "string"
        },
        "postOperations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "SQL statements to be executed after creating the relation."
        },
        "clusterExpressions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of columns or SQL expressions used to cluster the table."
        },
        "dependencyTargets": {
          "items": {
            "$ref": "Target"
          },
          "description": "A list of actions that this action depends on.",
          "type": "array"
        },
        "relationType": {
          "description": "The type of this relation.",
          "type": "string",
          "enum": [
            "RELATION_TYPE_UNSPECIFIED",
            "TABLE",
            "VIEW",
            "INCREMENTAL_TABLE",
            "MATERIALIZED_VIEW"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The relation is a table.",
            "The relation is a view.",
            "The relation is an incrementalized table.",
            "The relation is a materialized view."
          ]
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether this action is disabled (i.e. should not be run)."
        },
        "requirePartitionFilter": {
          "description": "Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.",
          "type": "boolean"
        },
        "additionalOptions": {
          "type": "object",
          "description": "Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "incrementalTableConfig": {
          "description": "Configures `INCREMENTAL_TABLE` settings for this relation. Only set if `relation_type` is `INCREMENTAL_TABLE`.",
          "$ref": "IncrementalTableConfig"
        },
        "tags": {
          "description": "Arbitrary, user-defined tags on this action.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "Represents a database relation."
    },
    "MakeDirectoryRequest": {
      "type": "object",
      "id": "MakeDirectoryRequest",
      "properties": {
        "path": {
          "type": "string",
          "description": "Required. The directory's full path including directory name, relative to the workspace root."
        }
      },
      "description": "`MakeDirectory` request message."
    },
    "CommitWorkspaceChangesRequest": {
      "type": "object",
      "id": "CommitWorkspaceChangesRequest",
      "properties": {
        "commitMessage": {
          "type": "string",
          "description": "Optional. The commit's message."
        },
        "author": {
          "$ref": "CommitAuthor",
          "description": "Required. The commit's author."
        },
        "paths": {
          "description": "Optional. Full file paths to commit including filename, rooted at workspace root. If left empty, all files will be committed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "`CommitWorkspaceChanges` request message."
    },
    "ColumnDescriptor": {
      "type": "object",
      "description": "Describes a column.",
      "properties": {
        "bigqueryPolicyTags": {
          "items": {
            "type": "string"
          },
          "description": "A list of BigQuery policy tags that will be applied to the column.",
          "type": "array"
        },
        "description": {
          "type": "string",
          "description": "A textual description of the column."
        },
        "path": {
          "description": "The identifier for the column. Each entry in `path` represents one level of nesting.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "ColumnDescriptor"
    },
    "Empty": {
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty",
      "properties": {}
    },
    "DirectoryEntry": {
      "type": "object",
      "id": "DirectoryEntry",
      "properties": {
        "file": {
          "type": "string",
          "description": "A file in the directory."
        },
        "directory": {
          "type": "string",
          "description": "A child directory in the directory."
        }
      },
      "description": "Represents a single entry in a workspace directory."
    },
    "MoveFileRequest": {
      "properties": {
        "newPath": {
          "type": "string",
          "description": "Required. The file's new path including filename, relative to the workspace root."
        },
        "path": {
          "description": "Required. The file's full path including filename, relative to the workspace root.",
          "type": "string"
        }
      },
      "id": "MoveFileRequest",
      "description": "`MoveFile` request message.",
      "type": "object"
    },
    "UncommittedFileChange": {
      "properties": {
        "path": {
          "type": "string",
          "description": "The file's full path including filename, relative to the workspace root."
        },
        "state": {
          "description": "Indicates the status of the file.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The file has been newly added.",
            "The file has been deleted.",
            "The file has been modified.",
            "The file contains merge conflicts."
          ],
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "ADDED",
            "DELETED",
            "MODIFIED",
            "HAS_CONFLICTS"
          ]
        }
      },
      "type": "object",
      "id": "UncommittedFileChange",
      "description": "Represents the Git state of a file with uncommitted changes."
    },
    "QueryDirectoryContentsResponse": {
      "id": "QueryDirectoryContentsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "directoryEntries": {
          "items": {
            "$ref": "DirectoryEntry"
          },
          "type": "array",
          "description": "List of entries in the directory."
        }
      },
      "description": "`QueryDirectoryContents` response message."
    },
    "CodeCompilationConfig": {
      "properties": {
        "assertionSchema": {
          "type": "string",
          "description": "Optional. The default schema (BigQuery dataset ID) for assertions."
        },
        "defaultDatabase": {
          "type": "string",
          "description": "Optional. The default database (Google Cloud project ID)."
        },
        "schemaSuffix": {
          "type": "string",
          "description": "Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names."
        },
        "defaultSchema": {
          "description": "Optional. The default schema (BigQuery dataset ID).",
          "type": "string"
        },
        "vars": {
          "description": "Optional. User-defined variables that are made available to project code during compilation.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tablePrefix": {
          "type": "string",
          "description": "Optional. The prefix that should be prepended to all table names."
        },
        "databaseSuffix": {
          "type": "string",
          "description": "Optional. The suffix that should be appended to all database (Google Cloud project ID) names."
        },
        "defaultLocation": {
          "type": "string",
          "description": "Optional. The default BigQuery location to use. Defaults to \"US\". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations."
        }
      },
      "type": "object",
      "description": "Configures various aspects of Dataform code compilation.",
      "id": "CodeCompilationConfig"
    },
    "ReleaseConfig": {
      "type": "object",
      "id": "ReleaseConfig",
      "description": "Represents a Dataform release configuration.",
      "properties": {
        "recentScheduledReleaseRecords": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. Records of the 10 most recent scheduled release attempts. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.",
          "items": {
            "$ref": "ScheduledReleaseRecord"
          }
        },
        "cronSchedule": {
          "description": "Optional. Optional schedule (in cron format) for automatic creation of compilation results.",
          "type": "string"
        },
        "releaseCompilationResult": {
          "description": "Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.",
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The release config's name."
        },
        "codeCompilationConfig": {
          "description": "Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.",
          "$ref": "CodeCompilationConfig"
        },
        "gitCommitish": {
          "type": "string",
          "description": "Required. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`"
        }
      }
    },
    "ScheduledReleaseRecord": {
      "type": "object",
      "description": "A record of an attempt to create a compilation result for this release config.",
      "id": "ScheduledReleaseRecord",
      "properties": {
        "errorStatus": {
          "$ref": "Status",
          "description": "The error status encountered upon this attempt to create the compilation result, if the attempt was unsuccessful."
        },
        "compilationResult": {
          "type": "string",
          "description": "The name of the created compilation result, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`."
        },
        "releaseTime": {
          "type": "string",
          "description": "The timestamp of this release attempt.",
          "format": "google-datetime"
        }
      }
    },
    "GitRemoteSettings": {
      "description": "Controls Git remote configuration for a repository.",
      "type": "object",
      "properties": {
        "authenticationTokenSecretVersion": {
          "description": "Required. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.",
          "type": "string"
        },
        "defaultBranch": {
          "description": "Required. The Git remote's default branch name.",
          "type": "string"
        },
        "url": {
          "description": "Required. The Git remote's URL.",
          "type": "string"
        },
        "tokenStatus": {
          "description": "Output only. Indicates the status of the Git access token.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The token could not be found in Secret Manager (or the Dataform Service Account did not have permission to access it).",
            "The token could not be used to authenticate against the Git remote.",
            "The token was used successfully to authenticate against the Git remote."
          ],
          "enum": [
            "TOKEN_STATUS_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID",
            "VALID"
          ],
          "type": "string",
          "readOnly": true
        }
      },
      "id": "GitRemoteSettings"
    },
    "MoveDirectoryResponse": {
      "properties": {},
      "id": "MoveDirectoryResponse",
      "type": "object",
      "description": "`MoveDirectory` response message."
    },
    "MoveDirectoryRequest": {
      "properties": {
        "newPath": {
          "type": "string",
          "description": "Required. The new path for the directory including directory name, rooted at workspace root."
        },
        "path": {
          "description": "Required. The directory's full path including directory name, relative to the workspace root.",
          "type": "string"
        }
      },
      "description": "`MoveDirectory` request message.",
      "type": "object",
      "id": "MoveDirectoryRequest"
    },
    "ResetWorkspaceChangesRequest": {
      "description": "`ResetWorkspaceChanges` request message.",
      "properties": {
        "paths": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. Full file paths to reset back to their committed state including filename, rooted at workspace root. If left empty, all files will be reset."
        },
        "clean": {
          "type": "boolean",
          "description": "Optional. If set to true, untracked files will be deleted."
        }
      },
      "type": "object",
      "id": "ResetWorkspaceChangesRequest"
    },
    "QueryCompilationResultActionsResponse": {
      "type": "object",
      "description": "`QueryCompilationResultActions` response message.",
      "properties": {
        "compilationResultActions": {
          "description": "List of compilation result actions.",
          "items": {
            "$ref": "CompilationResultAction"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      },
      "id": "QueryCompilationResultActionsResponse"
    },
    "FetchFileDiffResponse": {
      "type": "object",
      "description": "`FetchFileDiff` response message.",
      "properties": {
        "formattedDiff": {
          "description": "The raw formatted Git diff for the file.",
          "type": "string"
        }
      },
      "id": "FetchFileDiffResponse"
    },
    "RelationDescriptor": {
      "id": "RelationDescriptor",
      "properties": {
        "bigqueryLabels": {
          "description": "A set of BigQuery labels that should be applied to the relation.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "ColumnDescriptor"
          },
          "description": "A list of descriptions of columns within the relation."
        },
        "description": {
          "type": "string",
          "description": "A text description of the relation."
        }
      },
      "description": "Describes a relation and its columns.",
      "type": "object"
    },
    "CancelWorkflowInvocationRequest": {
      "description": "`CancelWorkflowInvocation` request message.",
      "type": "object",
      "id": "CancelWorkflowInvocationRequest",
      "properties": {}
    },
    "Declaration": {
      "id": "Declaration",
      "description": "Represents a relation which is not managed by Dataform but which may be referenced by Dataform actions.",
      "properties": {
        "relationDescriptor": {
          "$ref": "RelationDescriptor",
          "description": "Descriptor for the relation and its columns. Used as documentation only, i.e. values here will result in no changes to the relation's metadata."
        }
      },
      "type": "object"
    },
    "Target": {
      "id": "Target",
      "properties": {
        "schema": {
          "type": "string",
          "description": "The action's schema (BigQuery dataset ID), within `database`."
        },
        "name": {
          "type": "string",
          "description": "The action's name, within `database` and `schema`."
        },
        "database": {
          "type": "string",
          "description": "The action's database (Google Cloud project ID) ."
        }
      },
      "type": "object",
      "description": "Represents an action identifier. If the action writes output, the output will be written to the referenced database object."
    },
    "WriteFileResponse": {
      "description": "`WriteFile` response message.",
      "type": "object",
      "properties": {},
      "id": "WriteFileResponse"
    },
    "CompilationResult": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. The compilation result's name.",
          "readOnly": true
        },
        "codeCompilationConfig": {
          "description": "Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.",
          "$ref": "CodeCompilationConfig"
        },
        "releaseConfig": {
          "type": "string",
          "description": "Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`."
        },
        "dataformCoreVersion": {
          "type": "string",
          "description": "Output only. The version of `@dataform/core` that was used for compilation.",
          "readOnly": true
        },
        "workspace": {
          "type": "string",
          "description": "Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`."
        },
        "gitCommitish": {
          "description": "Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`",
          "type": "string"
        },
        "compilationErrors": {
          "type": "array",
          "items": {
            "$ref": "CompilationError"
          },
          "description": "Output only. Errors encountered during project compilation.",
          "readOnly": true
        },
        "resolvedGitCommitSha": {
          "description": "Output only. The fully resolved Git commit SHA of the code that was compiled.",
          "readOnly": true,
          "type": "string"
        }
      },
      "id": "CompilationResult",
      "type": "object",
      "description": "Represents the result of compiling a Dataform project."
    },
    "QueryWorkflowInvocationActionsResponse": {
      "properties": {
        "workflowInvocationActions": {
          "description": "List of workflow invocation actions.",
          "items": {
            "$ref": "WorkflowInvocationAction"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      },
      "description": "`QueryWorkflowInvocationActions` response message.",
      "id": "QueryWorkflowInvocationActionsResponse",
      "type": "object"
    },
    "PullGitCommitsRequest": {
      "type": "object",
      "description": "`PullGitCommits` request message.",
      "properties": {
        "remoteBranch": {
          "description": "Optional. The name of the branch in the Git remote from which to pull commits. If left unset, the repository's default branch name will be used.",
          "type": "string"
        },
        "author": {
          "$ref": "CommitAuthor",
          "description": "Required. The author of any merge commit which may be created as a result of merging fetched Git commits into this workspace."
        }
      },
      "id": "PullGitCommitsRequest"
    },
    "ListReleaseConfigsResponse": {
      "id": "ListReleaseConfigsResponse",
      "type": "object",
      "description": "`ListReleaseConfigs` response message.",
      "properties": {
        "unreachable": {
          "description": "Locations which could not be reached.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "releaseConfigs": {
          "description": "List of release configs.",
          "items": {
            "$ref": "ReleaseConfig"
          },
          "type": "array"
        }
      }
    },
    "ListWorkspacesResponse": {
      "id": "ListWorkspacesResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "workspaces": {
          "type": "array",
          "description": "List of workspaces.",
          "items": {
            "$ref": "Workspace"
          }
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Locations which could not be reached."
        }
      },
      "description": "`ListWorkspaces` response message.",
      "type": "object"
    }
  },
  "servicePath": "",
  "ownerName": "Google",
  "documentationLink": "https://cloud.google.com/dataform/docs",
  "ownerDomain": "google.com"
}

{
  "schemas": {
    "LanguagePackageDependency": {
      "id": "LanguagePackageDependency",
      "properties": {
        "package": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "description": "Indicates a language package available between this package and the customer's resource artifact.",
      "type": "object"
    },
    "Identity": {
      "properties": {
        "revision": {
          "format": "int32",
          "type": "integer",
          "description": "The revision number of the update."
        },
        "updateId": {
          "type": "string",
          "description": "The revision independent identifier of the update."
        }
      },
      "description": "The unique identifier of the update.",
      "type": "object",
      "id": "Identity"
    },
    "Subject": {
      "id": "Subject",
      "properties": {
        "digest": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "`\"\": \"\"` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder": {
      "description": "Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.",
      "id": "GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuilderConfig": {
      "id": "BuilderConfig",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "ImageOccurrence": {
      "properties": {
        "layerInfo": {
          "items": {
            "$ref": "Layer"
          },
          "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.",
          "type": "array"
        },
        "baseResourceUrl": {
          "type": "string",
          "description": "Output only. This contains the base image URL for the derived image occurrence."
        },
        "distance": {
          "description": "Output only. The number of layers by which this image differs from the associated image basis.",
          "type": "integer",
          "format": "int32"
        },
        "fingerprint": {
          "description": "Required. The fingerprint of the derived image.",
          "$ref": "Fingerprint"
        }
      },
      "type": "object",
      "description": "Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
      "id": "ImageOccurrence"
    },
    "Artifact": {
      "description": "Artifact describes a build product.",
      "type": "object",
      "id": "Artifact",
      "properties": {
        "checksum": {
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`."
        },
        "names": {
          "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AnalyzePackagesResponseV1": {
      "description": "AnalyzePackagesResponse contains the information necessary to find results for the given scan.",
      "type": "object",
      "properties": {
        "scan": {
          "description": "The name of the scan resource created by this successful scan.",
          "type": "string"
        }
      },
      "id": "AnalyzePackagesResponseV1"
    },
    "Justification": {
      "id": "Justification",
      "properties": {
        "details": {
          "type": "string",
          "description": "Additional details on why this justification was chosen."
        },
        "justificationType": {
          "type": "string",
          "description": "The justification type for this vulnerability.",
          "enumDescriptions": [
            "JUSTIFICATION_TYPE_UNSPECIFIED.",
            "The vulnerable component is not present in the product.",
            "The vulnerable code is not present. Typically this case occurs when source code is configured or built in a way that excludes the vulnerable code.",
            "The vulnerable code can not be executed. Typically this case occurs when the product includes the vulnerable code but does not call or use the vulnerable code.",
            "The vulnerable code cannot be controlled by an attacker to exploit the vulnerability.",
            "The product includes built-in protections or features that prevent exploitation of the vulnerability. These built-in protections cannot be subverted by the attacker and cannot be configured or disabled by the user. These mitigations completely prevent exploitation based on known attack vectors."
          ],
          "enum": [
            "JUSTIFICATION_TYPE_UNSPECIFIED",
            "COMPONENT_NOT_PRESENT",
            "VULNERABLE_CODE_NOT_PRESENT",
            "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH",
            "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
            "INLINE_MITIGATIONS_ALREADY_EXIST"
          ]
        }
      },
      "description": "Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
      "type": "object"
    },
    "BuildMetadata": {
      "id": "BuildMetadata",
      "type": "object",
      "properties": {
        "finishedOn": {
          "format": "google-datetime",
          "type": "string"
        },
        "startedOn": {
          "format": "google-datetime",
          "type": "string"
        },
        "invocationId": {
          "type": "string"
        }
      }
    },
    "FileLocation": {
      "id": "FileLocation",
      "type": "object",
      "description": "Indicates the location at which a package was found.",
      "properties": {
        "filePath": {
          "description": "For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.",
          "type": "string"
        }
      }
    },
    "SBOMStatus": {
      "type": "object",
      "properties": {
        "sbomState": {
          "type": "string",
          "enum": [
            "SBOM_STATE_UNSPECIFIED",
            "PENDING",
            "COMPLETE"
          ],
          "description": "The progress of the SBOM generation.",
          "enumDescriptions": [
            "Default unknown state.",
            "SBOM scanning is pending.",
            "SBOM scanning has completed."
          ]
        },
        "error": {
          "type": "string",
          "description": "If there was an error generating an SBOM, this will indicate what that error was."
        }
      },
      "description": "The status of an SBOM generation.",
      "id": "SBOMStatus"
    },
    "Metadata": {
      "type": "object",
      "id": "Metadata",
      "description": "Other properties of the build.",
      "properties": {
        "completeness": {
          "$ref": "Completeness",
          "description": "Indicates that the builder claims certain fields in this message to be complete."
        },
        "buildFinishedOn": {
          "description": "The timestamp of when the build completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "reproducible": {
          "type": "boolean",
          "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
        },
        "buildStartedOn": {
          "format": "google-datetime",
          "description": "The timestamp of when the build started.",
          "type": "string"
        },
        "buildInvocationId": {
          "type": "string",
          "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec."
        }
      }
    },
    "ComplianceOccurrence": {
      "properties": {
        "nonComplianceReason": {
          "type": "string"
        },
        "nonCompliantFiles": {
          "type": "array",
          "items": {
            "$ref": "NonCompliantFile"
          }
        }
      },
      "type": "object",
      "id": "ComplianceOccurrence",
      "description": "An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason."
    },
    "GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial": {
      "properties": {
        "digest": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "uri": {
          "type": "string"
        }
      },
      "id": "GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial",
      "type": "object",
      "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on."
    },
    "AnalyzePackagesRequest": {
      "properties": {
        "resourceUri": {
          "type": "string",
          "description": "Required. The resource URI of the container image being scanned."
        },
        "packages": {
          "items": {
            "$ref": "PackageData"
          },
          "description": "The packages to analyze.",
          "type": "array"
        }
      },
      "id": "AnalyzePackagesRequest",
      "type": "object",
      "description": "AnalyzePackagesRequest is the request to analyze a list of packages and create Vulnerability Occurrences for it."
    },
    "CVSS": {
      "description": "Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.",
      "id": "CVSS",
      "properties": {
        "impactScore": {
          "type": "number",
          "format": "float"
        },
        "baseScore": {
          "format": "float",
          "type": "number",
          "description": "The base score is a function of the base metric scores."
        },
        "availabilityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE",
            "IMPACT_PARTIAL",
            "IMPACT_COMPLETE"
          ],
          "type": "string"
        },
        "attackVector": {
          "enum": [
            "ATTACK_VECTOR_UNSPECIFIED",
            "ATTACK_VECTOR_NETWORK",
            "ATTACK_VECTOR_ADJACENT",
            "ATTACK_VECTOR_LOCAL",
            "ATTACK_VECTOR_PHYSICAL"
          ],
          "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "attackComplexity": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "ATTACK_COMPLEXITY_UNSPECIFIED",
            "ATTACK_COMPLEXITY_LOW",
            "ATTACK_COMPLEXITY_HIGH",
            "ATTACK_COMPLEXITY_MEDIUM"
          ]
        },
        "confidentialityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE",
            "IMPACT_PARTIAL",
            "IMPACT_COMPLETE"
          ]
        },
        "userInteraction": {
          "enum": [
            "USER_INTERACTION_UNSPECIFIED",
            "USER_INTERACTION_NONE",
            "USER_INTERACTION_REQUIRED"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "scope": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "SCOPE_UNSPECIFIED",
            "SCOPE_UNCHANGED",
            "SCOPE_CHANGED"
          ]
        },
        "exploitabilityScore": {
          "type": "number",
          "format": "float"
        },
        "authentication": {
          "type": "string",
          "enum": [
            "AUTHENTICATION_UNSPECIFIED",
            "AUTHENTICATION_MULTIPLE",
            "AUTHENTICATION_SINGLE",
            "AUTHENTICATION_NONE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        },
        "integrityImpact": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "IMPACT_UNSPECIFIED",
            "IMPACT_HIGH",
            "IMPACT_LOW",
            "IMPACT_NONE",
            "IMPACT_PARTIAL",
            "IMPACT_COMPLETE"
          ]
        },
        "privilegesRequired": {
          "enum": [
            "PRIVILEGES_REQUIRED_UNSPECIFIED",
            "PRIVILEGES_REQUIRED_NONE",
            "PRIVILEGES_REQUIRED_LOW",
            "PRIVILEGES_REQUIRED_HIGH"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ]
        }
      },
      "type": "object"
    },
    "RepoId": {
      "description": "A unique identifier for a Cloud Repo.",
      "type": "object",
      "properties": {
        "projectRepoId": {
          "description": "A combination of a project ID and a repo name.",
          "$ref": "ProjectRepoId"
        },
        "uid": {
          "type": "string",
          "description": "A server-assigned, globally unique identifier."
        }
      },
      "id": "RepoId"
    },
    "SlsaBuilder": {
      "id": "SlsaBuilder",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "Fingerprint": {
      "properties": {
        "v1Name": {
          "description": "Required. The layer ID of the final layer in the Docker image's v1 representation.",
          "type": "string"
        },
        "v2Blob": {
          "description": "Required. The ordered list of v2 blobs that represent a given image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "v2Name": {
          "type": "string",
          "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept."
        }
      },
      "id": "Fingerprint",
      "type": "object",
      "description": "A set of properties that uniquely identify a given Docker image."
    },
    "GitSourceContext": {
      "properties": {
        "url": {
          "type": "string",
          "description": "Git repository URL."
        },
        "revisionId": {
          "description": "Git commit hash.",
          "type": "string"
        }
      },
      "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
      "type": "object",
      "id": "GitSourceContext"
    },
    "Signature": {
      "id": "Signature",
      "description": "Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be \"attached\" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any \"attached\" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).",
      "properties": {
        "signature": {
          "description": "The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.",
          "format": "byte",
          "type": "string"
        },
        "publicKeyId": {
          "description": "The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Layer": {
      "id": "Layer",
      "description": "Layer holds metadata specific to a layer of a Docker image.",
      "type": "object",
      "properties": {
        "directive": {
          "type": "string",
          "description": "Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information."
        },
        "arguments": {
          "description": "The recovered arguments to the Dockerfile directive.",
          "type": "string"
        }
      }
    },
    "GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata": {
      "description": "Other properties of the build.",
      "id": "GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata",
      "properties": {
        "reproducible": {
          "type": "boolean"
        },
        "buildStartedOn": {
          "type": "string",
          "format": "google-datetime"
        },
        "completeness": {
          "$ref": "GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness"
        },
        "buildInvocationId": {
          "type": "string"
        },
        "buildFinishedOn": {
          "type": "string",
          "format": "google-datetime"
        }
      },
      "type": "object"
    },
    "SlsaProvenanceZeroTwo": {
      "id": "SlsaProvenanceZeroTwo",
      "description": "See full explanation of fields at slsa.dev/provenance/v0.2.",
      "properties": {
        "invocation": {
          "$ref": "GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation"
        },
        "builder": {
          "$ref": "GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder"
        },
        "metadata": {
          "$ref": "GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata"
        },
        "materials": {
          "type": "array",
          "items": {
            "$ref": "GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial"
          }
        },
        "buildType": {
          "type": "string"
        },
        "buildConfig": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "WindowsUpdate": {
      "properties": {
        "supportUrl": {
          "type": "string",
          "description": "The hyperlink to the support information for the update."
        },
        "identity": {
          "description": "Required - The unique identifier for the update.",
          "$ref": "Identity"
        },
        "title": {
          "description": "The localized title of the update.",
          "type": "string"
        },
        "description": {
          "description": "The localized description of the update.",
          "type": "string"
        },
        "categories": {
          "type": "array",
          "description": "The list of categories to which the update belongs.",
          "items": {
            "$ref": "Category"
          }
        },
        "lastPublishedTimestamp": {
          "type": "string",
          "description": "The last published timestamp of the update.",
          "format": "google-datetime"
        },
        "kbArticleIds": {
          "items": {
            "type": "string"
          },
          "description": "The Microsoft Knowledge Base article IDs that are associated with the update.",
          "type": "array"
        }
      },
      "description": "Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.",
      "type": "object",
      "id": "WindowsUpdate"
    },
    "AnalysisCompleted": {
      "type": "object",
      "description": "Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.",
      "id": "AnalysisCompleted",
      "properties": {
        "analysisType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BuildOccurrence": {
      "type": "object",
      "description": "Details of a build occurrence.",
      "properties": {
        "intotoStatement": {
          "$ref": "InTotoStatement",
          "description": "In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope."
        },
        "provenanceBytes": {
          "description": "Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.",
          "type": "string"
        },
        "intotoProvenance": {
          "$ref": "InTotoProvenance",
          "description": "Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec."
        },
        "inTotoSlsaProvenanceV1": {
          "$ref": "InTotoSlsaProvenanceV1",
          "description": "In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance."
        },
        "provenance": {
          "description": "The actual provenance for the build.",
          "$ref": "BuildProvenance"
        }
      },
      "id": "BuildOccurrence"
    },
    "SlsaMetadata": {
      "description": "Other properties of the build.",
      "type": "object",
      "id": "SlsaMetadata",
      "properties": {
        "buildFinishedOn": {
          "description": "The timestamp of when the build completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "reproducible": {
          "type": "boolean",
          "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
        },
        "completeness": {
          "description": "Indicates that the builder claims certain fields in this message to be complete.",
          "$ref": "SlsaCompleteness"
        },
        "buildInvocationId": {
          "type": "string",
          "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec."
        },
        "buildStartedOn": {
          "type": "string",
          "description": "The timestamp of when the build started.",
          "format": "google-datetime"
        }
      }
    },
    "SlsaCompleteness": {
      "type": "object",
      "properties": {
        "arguments": {
          "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
          "type": "boolean"
        },
        "environment": {
          "type": "boolean",
          "description": "If true, the builder claims that recipe.environment is claimed to be complete."
        },
        "materials": {
          "type": "boolean",
          "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
        }
      },
      "description": "Indicates that the builder claims certain fields in this message to be complete.",
      "id": "SlsaCompleteness"
    },
    "ListOperationsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "Operation"
          },
          "description": "A list of operations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse"
    },
    "SBOMReferenceOccurrence": {
      "type": "object",
      "id": "SBOMReferenceOccurrence",
      "description": "The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.",
      "properties": {
        "signatures": {
          "items": {
            "$ref": "EnvelopeSignature"
          },
          "type": "array",
          "description": "The signatures over the payload."
        },
        "payloadType": {
          "description": "The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.",
          "type": "string"
        },
        "payload": {
          "$ref": "SbomReferenceIntotoPayload",
          "description": "The actual payload that contains the SBOM reference data."
        }
      }
    },
    "RelatedUrl": {
      "description": "Metadata for any related URL information.",
      "id": "RelatedUrl",
      "properties": {
        "label": {
          "description": "Label to describe usage of the URL.",
          "type": "string"
        },
        "url": {
          "description": "Specific URL associated with the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PackageOccurrence": {
      "type": "object",
      "description": "Details on how a particular software package was installed on a system.",
      "id": "PackageOccurrence",
      "properties": {
        "version": {
          "$ref": "Version",
          "readOnly": true,
          "description": "Output only. The version of the package."
        },
        "cpeUri": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Required. Output only. The name of the installed package."
        },
        "architecture": {
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unknown architecture.",
            "X86 architecture.",
            "X64 architecture."
          ],
          "description": "Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
          "readOnly": true
        },
        "license": {
          "description": "Licenses that have been declared by the authors of the package.",
          "$ref": "License"
        },
        "location": {
          "type": "array",
          "description": "All of the places within the filesystem versions of this package have been found.",
          "items": {
            "$ref": "Location"
          }
        },
        "packageType": {
          "readOnly": true,
          "description": "Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
          "type": "string"
        }
      }
    },
    "GrafeasV1FileLocation": {
      "description": "Indicates the location at which a package was found.",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file."
        }
      },
      "id": "GrafeasV1FileLocation",
      "type": "object"
    },
    "License": {
      "id": "License",
      "description": "License information.",
      "properties": {
        "expression": {
          "type": "string",
          "description": "Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
        },
        "comments": {
          "description": "Comments",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SlsaRecipe": {
      "id": "SlsaRecipe",
      "properties": {
        "environment": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.",
          "type": "object"
        },
        "definedInMaterial": {
          "format": "int64",
          "type": "string",
          "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64."
        },
        "type": {
          "type": "string",
          "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
        },
        "arguments": {
          "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object"
        },
        "entryPoint": {
          "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
          "type": "string"
        }
      },
      "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
      "type": "object"
    },
    "CloudRepoSourceContext": {
      "properties": {
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "AliasContext"
        },
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        },
        "repoId": {
          "$ref": "RepoId",
          "description": "The ID of the repo."
        }
      },
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
      "id": "CloudRepoSourceContext",
      "type": "object"
    },
    "VulnerabilityOccurrence": {
      "description": "An occurrence of a severity vulnerability on a resource.",
      "type": "object",
      "properties": {
        "fixAvailable": {
          "description": "Output only. Whether at least one of the affected packages has a fix available.",
          "type": "boolean"
        },
        "relatedUrls": {
          "description": "Output only. URLs related to this vulnerability.",
          "items": {
            "$ref": "RelatedUrl"
          },
          "type": "array"
        },
        "cvssv3": {
          "$ref": "CVSS",
          "description": "The cvss v3 score for the vulnerability."
        },
        "cvssVersion": {
          "type": "string",
          "enum": [
            "CVSS_VERSION_UNSPECIFIED",
            "CVSS_VERSION_2",
            "CVSS_VERSION_3"
          ],
          "description": "Output only. CVSS version used to populate cvss_score and severity.",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "shortDescription": {
          "type": "string",
          "description": "Output only. A one sentence description of this vulnerability."
        },
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.)."
        },
        "cvssScore": {
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.",
          "format": "float",
          "type": "number"
        },
        "vexAssessment": {
          "$ref": "VexAssessment"
        },
        "longDescription": {
          "description": "Output only. A detailed description of this vulnerability.",
          "type": "string"
        },
        "severity": {
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "type": "string",
          "description": "Output only. The note provider assigned severity of this vulnerability.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "packageIssue": {
          "type": "array",
          "description": "Required. The set of affected locations and their fixes (if available) within the associated resource.",
          "items": {
            "$ref": "PackageIssue"
          }
        },
        "effectiveSeverity": {
          "description": "The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.",
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string"
        },
        "cvssV2": {
          "description": "The cvss v2 score for the vulnerability.",
          "$ref": "CVSS"
        }
      },
      "id": "VulnerabilityOccurrence"
    },
    "Remediation": {
      "properties": {
        "details": {
          "description": "Contains a comprehensive human-readable discussion of the remediation.",
          "type": "string"
        },
        "remediationType": {
          "enum": [
            "REMEDIATION_TYPE_UNSPECIFIED",
            "MITIGATION",
            "NO_FIX_PLANNED",
            "NONE_AVAILABLE",
            "VENDOR_FIX",
            "WORKAROUND"
          ],
          "enumDescriptions": [
            "No remediation type specified.",
            "A MITIGATION is available.",
            "No fix is planned.",
            "Not available.",
            "A vendor fix is available.",
            "A workaround is available."
          ],
          "type": "string",
          "description": "The type of remediation that can be applied."
        },
        "remediationUri": {
          "$ref": "RelatedUrl",
          "description": "Contains the URL where to obtain the remediation."
        }
      },
      "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
      "type": "object",
      "id": "Remediation"
    },
    "VexAssessment": {
      "id": "VexAssessment",
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "AFFECTED",
            "NOT_AFFECTED",
            "FIXED",
            "UNDER_INVESTIGATION"
          ],
          "type": "string",
          "description": "Provides the state of this Vulnerability assessment.",
          "enumDescriptions": [
            "No state is specified.",
            "This product is known to be affected by this vulnerability.",
            "This product is known to be not affected by this vulnerability.",
            "This product contains a fix for this vulnerability.",
            "It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation."
          ]
        },
        "justification": {
          "$ref": "Justification",
          "description": "Justification provides the justification when the state of the assessment if NOT_AFFECTED."
        },
        "noteName": {
          "description": "The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.",
          "type": "string"
        },
        "remediations": {
          "type": "array",
          "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
          "items": {
            "$ref": "Remediation"
          }
        },
        "cve": {
          "description": "Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.",
          "type": "string"
        },
        "impacts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Contains information about the impact of this vulnerability, this will change with time."
        },
        "relatedUris": {
          "description": "Holds a list of references associated with this vulnerability item and assessment.",
          "type": "array",
          "items": {
            "$ref": "RelatedUrl"
          }
        }
      },
      "type": "object",
      "description": "VexAssessment provides all publisher provided Vex information that is related to this vulnerability."
    },
    "AliasContext": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The alias name."
        },
        "kind": {
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a ref named \"refs/foo/bar\"."
          ],
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ],
          "type": "string",
          "description": "The alias kind."
        }
      },
      "id": "AliasContext",
      "description": "An alias to a repo revision."
    },
    "ResourceDescriptor": {
      "type": "object",
      "id": "ResourceDescriptor",
      "properties": {
        "downloadLocation": {
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "digest": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "additionalProperties": {
            "type": "any"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "content": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Maintainer": {
      "id": "Maintainer",
      "properties": {
        "name": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnalyzePackagesResponse": {
      "description": "AnalyzePackagesResponse contains the information necessary to find results for the given scan.",
      "id": "AnalyzePackagesResponse",
      "properties": {
        "scan": {
          "description": "The name of the scan resource created by this successful scan.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InTotoStatement": {
      "id": "InTotoStatement",
      "properties": {
        "predicateType": {
          "type": "string",
          "description": "`https://slsa.dev/provenance/v0.1` for SlsaProvenance."
        },
        "provenance": {
          "$ref": "InTotoProvenance"
        },
        "slsaProvenanceZeroTwo": {
          "$ref": "SlsaProvenanceZeroTwo"
        },
        "slsaProvenance": {
          "$ref": "SlsaProvenance"
        },
        "_type": {
          "description": "Always `https://in-toto.io/Statement/v0.1`.",
          "type": "string"
        },
        "subject": {
          "type": "array",
          "items": {
            "$ref": "Subject"
          }
        }
      },
      "description": "Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".",
      "type": "object"
    },
    "UpgradeDistribution": {
      "properties": {
        "cpeUri": {
          "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
          "type": "string"
        },
        "cve": {
          "description": "The cve tied to this Upgrade.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "classification": {
          "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)",
          "type": "string"
        },
        "severity": {
          "description": "The severity as specified by the upstream operating system.",
          "type": "string"
        }
      },
      "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
      "id": "UpgradeDistribution",
      "type": "object"
    },
    "SourceContext": {
      "id": "SourceContext",
      "properties": {
        "cloudRepo": {
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo.",
          "$ref": "CloudRepoSourceContext"
        },
        "gerrit": {
          "description": "A SourceContext referring to a Gerrit project.",
          "$ref": "GerritSourceContext"
        },
        "labels": {
          "type": "object",
          "description": "Labels with user defined metadata.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "git": {
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub).",
          "$ref": "GitSourceContext"
        }
      },
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
      "type": "object"
    },
    "SlsaProvenance": {
      "id": "SlsaProvenance",
      "type": "object",
      "properties": {
        "recipe": {
          "$ref": "SlsaRecipe",
          "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required"
        },
        "metadata": {
          "$ref": "SlsaMetadata"
        },
        "materials": {
          "items": {
            "$ref": "Material"
          },
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
          "type": "array"
        },
        "builder": {
          "description": "required",
          "$ref": "SlsaBuilder"
        }
      }
    },
    "GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation": {
      "description": "Identifies the event that kicked off the build.",
      "type": "object",
      "id": "GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation",
      "properties": {
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          }
        },
        "configSource": {
          "$ref": "GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource"
        }
      }
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "ListVulnerabilitiesResponse": {
      "properties": {
        "occurrences": {
          "description": "The list of Vulnerability Occurrences resulting from a scan.",
          "items": {
            "$ref": "Occurrence"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A page token that can be used in a subsequent call to ListVulnerabilities to continue retrieving results.",
          "type": "string"
        }
      },
      "id": "ListVulnerabilitiesResponse",
      "type": "object",
      "description": "ListVulnerabilitiesResponse contains a single page of vulnerabilities resulting from a scan."
    },
    "Material": {
      "id": "Material",
      "properties": {
        "digest": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GerritSourceContext": {
      "type": "object",
      "properties": {
        "aliasContext": {
          "$ref": "AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "gerritProject": {
          "type": "string",
          "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project."
        },
        "hostUri": {
          "type": "string",
          "description": "The URI of a running Gerrit instance."
        },
        "revisionId": {
          "description": "A revision (commit) ID.",
          "type": "string"
        }
      },
      "id": "GerritSourceContext",
      "description": "A SourceContext referring to a Gerrit project."
    },
    "PackageIssue": {
      "type": "object",
      "properties": {
        "fixedVersion": {
          "$ref": "Version",
          "description": "Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available."
        },
        "fixAvailable": {
          "type": "boolean",
          "description": "Output only. Whether a fix is available for this package."
        },
        "fixedCpeUri": {
          "description": "The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.",
          "type": "string"
        },
        "affectedCpeUri": {
          "type": "string",
          "description": "Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in."
        },
        "affectedPackage": {
          "type": "string",
          "description": "Required. The package this vulnerability was found in."
        },
        "affectedVersion": {
          "$ref": "Version",
          "description": "Required. The version of the package that is installed on the resource affected by this vulnerability."
        },
        "packageType": {
          "description": "The type of package (e.g. OS, MAVEN, GO).",
          "type": "string"
        },
        "effectiveSeverity": {
          "enumDescriptions": [
            "Unknown.",
            "Minimal severity.",
            "Low severity.",
            "Medium severity.",
            "High severity.",
            "Critical severity."
          ],
          "readOnly": true,
          "description": "Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "type": "string"
        },
        "fileLocation": {
          "type": "array",
          "items": {
            "$ref": "GrafeasV1FileLocation"
          },
          "description": "The location at which this package was found."
        },
        "fixedPackage": {
          "type": "string",
          "description": "The package this vulnerability was fixed in. It is possible for this to be different from the affected_package."
        }
      },
      "id": "PackageIssue",
      "description": "A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available)."
    },
    "SbomReferenceIntotoPayload": {
      "type": "object",
      "id": "SbomReferenceIntotoPayload",
      "properties": {
        "predicateType": {
          "type": "string",
          "description": "URI identifying the type of the Predicate."
        },
        "subject": {
          "type": "array",
          "description": "Set of software artifacts that the attestation applies to. Each element represents a single software artifact.",
          "items": {
            "$ref": "Subject"
          }
        },
        "predicate": {
          "description": "Additional parameters of the Predicate. Includes the actual data about the SBOM.",
          "$ref": "SbomReferenceIntotoPredicate"
        },
        "_type": {
          "type": "string",
          "description": "Identifier for the schema of the Statement."
        }
      },
      "description": "The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details."
    },
    "Category": {
      "type": "object",
      "description": "The category to which the update belongs.",
      "properties": {
        "name": {
          "description": "The localized name of the category.",
          "type": "string"
        },
        "categoryId": {
          "description": "The identifier of the category.",
          "type": "string"
        }
      },
      "id": "Category"
    },
    "InTotoSlsaProvenanceV1": {
      "id": "InTotoSlsaProvenanceV1",
      "properties": {
        "subject": {
          "items": {
            "$ref": "Subject"
          },
          "type": "array"
        },
        "predicate": {
          "$ref": "SlsaProvenanceV1"
        },
        "_type": {
          "type": "string",
          "description": "InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement"
        },
        "predicateType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RunDetails": {
      "type": "object",
      "id": "RunDetails",
      "properties": {
        "builder": {
          "$ref": "ProvenanceBuilder"
        },
        "metadata": {
          "$ref": "BuildMetadata"
        },
        "byproducts": {
          "items": {
            "$ref": "ResourceDescriptor"
          },
          "type": "array"
        }
      }
    },
    "SbomReferenceIntotoPredicate": {
      "type": "object",
      "id": "SbomReferenceIntotoPredicate",
      "description": "A predicate which describes the SBOM being referenced.",
      "properties": {
        "mimeType": {
          "description": "The mime type of the SBOM.",
          "type": "string"
        },
        "digest": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "A map of algorithm to digest of the contents of the SBOM."
        },
        "location": {
          "description": "The location of the SBOM.",
          "type": "string"
        },
        "referrerId": {
          "type": "string",
          "description": "The person or system referring this predicate to the consumer."
        }
      }
    },
    "UpgradeOccurrence": {
      "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.",
      "id": "UpgradeOccurrence",
      "properties": {
        "windowsUpdate": {
          "$ref": "WindowsUpdate",
          "description": "Required for Windows OS. Represents the metadata about the Windows update."
        },
        "parsedVersion": {
          "$ref": "Version",
          "description": "Required for non-Windows OS. The version of the package in a machine + human readable form."
        },
        "distribution": {
          "$ref": "UpgradeDistribution",
          "description": "Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence."
        },
        "package": {
          "type": "string",
          "description": "Required for non-Windows OS. The package this Upgrade is for."
        }
      },
      "type": "object"
    },
    "ProjectRepoId": {
      "properties": {
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "The name of the repo. Leave empty for the default repo."
        }
      },
      "type": "object",
      "id": "ProjectRepoId",
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project."
    },
    "Jwt": {
      "properties": {
        "compactJwt": {
          "type": "string",
          "description": "The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1"
        }
      },
      "id": "Jwt",
      "type": "object"
    },
    "Source": {
      "type": "object",
      "properties": {
        "context": {
          "description": "If provided, the source code used for the build came from this location.",
          "$ref": "SourceContext"
        },
        "additionalContexts": {
          "items": {
            "$ref": "SourceContext"
          },
          "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.",
          "type": "array"
        },
        "fileHashes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file."
        },
        "artifactStorageSourceUri": {
          "description": "If provided, the input binary artifacts for the build came from this location.",
          "type": "string"
        }
      },
      "description": "Source describes the location of the source used for the build.",
      "id": "Source"
    },
    "DSSEAttestationOccurrence": {
      "properties": {
        "statement": {
          "$ref": "InTotoStatement"
        },
        "envelope": {
          "$ref": "Envelope",
          "description": "If doing something security critical, make sure to verify the signatures in this metadata."
        }
      },
      "type": "object",
      "id": "DSSEAttestationOccurrence",
      "description": "Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence."
    },
    "AnalyzePackagesMetadataV1": {
      "description": "AnalyzePackagesMetadata contains metadata for an active scan of a container image.",
      "properties": {
        "resourceUri": {
          "description": "The resource URI of the container image being scanned.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "When the scan was created."
        }
      },
      "type": "object",
      "id": "AnalyzePackagesMetadataV1"
    },
    "Version": {
      "type": "object",
      "description": "Version contains structured information about the version of a package.",
      "properties": {
        "fullName": {
          "type": "string",
          "description": "Human readable version string. This string is of the form :- and is only set when kind is NORMAL."
        },
        "kind": {
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "A standard package version.",
            "A special version representing negative infinity.",
            "A special version representing positive infinity."
          ],
          "enum": [
            "VERSION_KIND_UNSPECIFIED",
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ],
          "description": "Required. Distinguishes between sentinel MIN/MAX versions and normal versions."
        },
        "epoch": {
          "description": "Used to correct mistakes in the version numbering scheme.",
          "type": "integer",
          "format": "int32"
        },
        "inclusive": {
          "type": "boolean",
          "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range."
        },
        "revision": {
          "type": "string",
          "description": "The iteration of the package build from the above version."
        },
        "name": {
          "type": "string",
          "description": "Required only when version kind is NORMAL. The main part of the version name."
        }
      },
      "id": "Version"
    },
    "DiscoveryOccurrence": {
      "type": "object",
      "id": "DiscoveryOccurrence",
      "description": "Provides information about the analysis status of a discovered resource.",
      "properties": {
        "analysisCompleted": {
          "$ref": "AnalysisCompleted"
        },
        "archiveTime": {
          "type": "string",
          "description": "Output only. The time occurrences related to this discovery occurrence were archived.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "analysisStatusError": {
          "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.",
          "$ref": "Status"
        },
        "continuousAnalysis": {
          "enumDescriptions": [
            "Unknown.",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ],
          "type": "string",
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "description": "Whether the resource is continuously analyzed."
        },
        "analysisStatus": {
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "FINISHED_SUCCESS",
            "COMPLETE",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ],
          "type": "string",
          "description": "The status of discovery for the resource.",
          "enumDescriptions": [
            "Unknown.",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has finished successfully.",
            "Analysis has completed.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad state.",
            "The resource is known not to be supported."
          ]
        },
        "analysisError": {
          "items": {
            "$ref": "Status"
          },
          "description": "Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.",
          "type": "array"
        },
        "cpe": {
          "type": "string",
          "description": "The CPE of the resource being scanned."
        },
        "lastScanTime": {
          "description": "The last time this resource was scanned.",
          "format": "google-datetime",
          "type": "string"
        },
        "sbomStatus": {
          "$ref": "SBOMStatus",
          "description": "The status of an SBOM generation."
        }
      }
    },
    "Recipe": {
      "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
        },
        "environment": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form \"Any\".",
          "type": "array"
        },
        "definedInMaterial": {
          "type": "string",
          "format": "int64",
          "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64."
        },
        "arguments": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form \"Any\".",
          "type": "array"
        },
        "entryPoint": {
          "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
          "type": "string"
        }
      },
      "id": "Recipe"
    },
    "Hash": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. The type of hash that was performed, e.g. \"SHA-256\"."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Required. The hash value."
        }
      },
      "description": "Container message for hash values.",
      "id": "Hash",
      "type": "object"
    },
    "NonCompliantFile": {
      "properties": {
        "displayCommand": {
          "type": "string",
          "description": "Command to display the non-compliant files."
        },
        "reason": {
          "description": "Explains why a file is non compliant for a CIS check.",
          "type": "string"
        },
        "path": {
          "description": "Empty if `display_command` is set.",
          "type": "string"
        }
      },
      "id": "NonCompliantFile",
      "type": "object",
      "description": "Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'."
    },
    "Completeness": {
      "id": "Completeness",
      "properties": {
        "environment": {
          "type": "boolean",
          "description": "If true, the builder claims that recipe.environment is claimed to be complete."
        },
        "arguments": {
          "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
          "type": "boolean"
        },
        "materials": {
          "type": "boolean",
          "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
        }
      },
      "description": "Indicates that the builder claims certain fields in this message to be complete.",
      "type": "object"
    },
    "Occurrence": {
      "properties": {
        "dsseAttestation": {
          "description": "Describes an attestation of an artifact using dsse.",
          "$ref": "DSSEAttestationOccurrence"
        },
        "kind": {
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts.",
            "This represents an available package upgrade.",
            "This represents a Compliance Note",
            "This represents a DSSE attestation Note",
            "This represents a Vulnerability Assessment.",
            "This represents an SBOM Reference."
          ],
          "description": "Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.",
          "enum": [
            "NOTE_KIND_UNSPECIFIED",
            "VULNERABILITY",
            "BUILD",
            "IMAGE",
            "PACKAGE",
            "DEPLOYMENT",
            "DISCOVERY",
            "ATTESTATION",
            "UPGRADE",
            "COMPLIANCE",
            "DSSE_ATTESTATION",
            "VULNERABILITY_ASSESSMENT",
            "SBOM_REFERENCE"
          ]
        },
        "compliance": {
          "$ref": "ComplianceOccurrence",
          "description": "Describes a compliance violation on a linked resource."
        },
        "name": {
          "description": "Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
          "type": "string"
        },
        "resourceUri": {
          "description": "Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.",
          "type": "string"
        },
        "sbomReference": {
          "$ref": "SBOMReferenceOccurrence",
          "description": "Describes a specific SBOM reference occurrences."
        },
        "upgrade": {
          "description": "Describes an available package upgrade on the linked resource.",
          "$ref": "UpgradeOccurrence"
        },
        "createTime": {
          "description": "Output only. The time this occurrence was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "envelope": {
          "$ref": "Envelope",
          "description": "https://github.com/secure-systems-lab/dsse"
        },
        "build": {
          "$ref": "BuildOccurrence",
          "description": "Describes a verifiable build."
        },
        "remediation": {
          "type": "string",
          "description": "A description of actions that can be taken to remedy the note."
        },
        "discovery": {
          "$ref": "DiscoveryOccurrence",
          "description": "Describes when a resource was discovered."
        },
        "package": {
          "description": "Describes the installation of a package on the linked resource.",
          "$ref": "PackageOccurrence"
        },
        "deployment": {
          "description": "Describes the deployment of an artifact on a runtime.",
          "$ref": "DeploymentOccurrence"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time this occurrence was last updated.",
          "format": "google-datetime"
        },
        "noteName": {
          "description": "Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.",
          "type": "string"
        },
        "attestation": {
          "$ref": "AttestationOccurrence",
          "description": "Describes an attestation of an artifact."
        },
        "vulnerability": {
          "$ref": "VulnerabilityOccurrence",
          "description": "Describes a security vulnerability."
        },
        "image": {
          "description": "Describes how this resource derives from the basis in the associated note.",
          "$ref": "ImageOccurrence"
        }
      },
      "type": "object",
      "description": "An instance of an analysis type that has been found on a resource.",
      "id": "Occurrence"
    },
    "ProvenanceBuilder": {
      "id": "ProvenanceBuilder",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "builderDependencies": {
          "type": "array",
          "items": {
            "$ref": "ResourceDescriptor"
          }
        }
      },
      "type": "object"
    },
    "GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness": {
      "description": "Indicates that the builder claims certain fields in this message to be complete.",
      "type": "object",
      "id": "GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness",
      "properties": {
        "environment": {
          "type": "boolean"
        },
        "materials": {
          "type": "boolean"
        },
        "parameters": {
          "type": "boolean"
        }
      }
    },
    "InTotoProvenance": {
      "type": "object",
      "properties": {
        "recipe": {
          "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required",
          "$ref": "Recipe"
        },
        "builderConfig": {
          "description": "required",
          "$ref": "BuilderConfig"
        },
        "metadata": {
          "$ref": "Metadata"
        },
        "materials": {
          "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "InTotoProvenance"
    },
    "AnalyzePackagesMetadata": {
      "type": "object",
      "id": "AnalyzePackagesMetadata",
      "description": "AnalyzePackagesMetadata contains metadata for an active scan of a container image.",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "When the scan was created."
        },
        "resourceUri": {
          "type": "string",
          "description": "The resource URI of the container image being scanned."
        }
      }
    },
    "SlsaProvenanceV1": {
      "properties": {
        "buildDefinition": {
          "$ref": "BuildDefinition"
        },
        "runDetails": {
          "$ref": "RunDetails"
        }
      },
      "type": "object",
      "description": "Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.",
      "id": "SlsaProvenanceV1"
    },
    "BuildProvenance": {
      "properties": {
        "projectId": {
          "type": "string",
          "description": "ID of the project."
        },
        "startTime": {
          "description": "Time at which execution of the build was started.",
          "format": "google-datetime",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time at which the build was created."
        },
        "triggerId": {
          "description": "Trigger identifier if the build was triggered automatically; empty if not.",
          "type": "string"
        },
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
          "type": "string"
        },
        "commands": {
          "type": "array",
          "items": {
            "$ref": "Command"
          },
          "description": "Commands requested by the build."
        },
        "builderVersion": {
          "description": "Version string of the builder at the time this build was executed.",
          "type": "string"
        },
        "buildOptions": {
          "type": "object",
          "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "logsUri": {
          "description": "URI where any logs for this provenance were written.",
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Time at which execution of the build was finished."
        },
        "id": {
          "description": "Required. Unique identifier of the build.",
          "type": "string"
        },
        "builtArtifacts": {
          "type": "array",
          "items": {
            "$ref": "Artifact"
          },
          "description": "Output of the build."
        },
        "sourceProvenance": {
          "$ref": "Source",
          "description": "Details of the Source input to the build."
        }
      },
      "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
      "type": "object",
      "id": "BuildProvenance"
    },
    "BinarySourceInfo": {
      "properties": {
        "binaryVersion": {
          "description": "The binary package. This is significant when the source is different than the binary itself. Historically if they've differed, we've stored the name of the source and its version in the package/version fields, but we should also store the binary package info, as that's what's actually installed. See b/175908657#comment15.",
          "$ref": "PackageVersion"
        },
        "sourceVersion": {
          "$ref": "PackageVersion",
          "description": "The source package. Similar to the above, this is significant when the source is different than the binary itself. Since the top-level package/version fields are based on an if/else, we need a separate field for both binary and source if we want to know definitively where the data is coming from."
        }
      },
      "type": "object",
      "id": "BinarySourceInfo"
    },
    "PackageVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "id": "PackageVersion"
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "properties": {
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "AttestationOccurrence": {
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.",
      "type": "object",
      "properties": {
        "jwts": {
          "type": "array",
          "items": {
            "$ref": "Jwt"
          },
          "description": "One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas."
        },
        "serializedPayload": {
          "format": "byte",
          "description": "Required. The serialized payload that is verified by one or more `signatures`.",
          "type": "string"
        },
        "signatures": {
          "items": {
            "$ref": "Signature"
          },
          "description": "One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.",
          "type": "array"
        }
      },
      "id": "AttestationOccurrence"
    },
    "GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource": {
      "id": "GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource",
      "type": "object",
      "properties": {
        "digest": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "entryPoint": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "description": "Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from."
    },
    "Operation": {
      "id": "Operation",
      "properties": {
        "response": {
          "type": "object",
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object"
    },
    "Command": {
      "description": "Command describes a step performed as part of the build pipeline.",
      "properties": {
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Environment variables set before running this command."
        },
        "id": {
          "description": "Optional unique identifier for this command, used in wait_for to reference this command as a dependency.",
          "type": "string"
        },
        "args": {
          "type": "array",
          "description": "Command-line arguments used when executing this command.",
          "items": {
            "type": "string"
          }
        },
        "waitFor": {
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the command(s) that this command depends on.",
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`."
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running this command.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Command"
    },
    "Envelope": {
      "id": "Envelope",
      "description": "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
      "type": "object",
      "properties": {
        "signatures": {
          "items": {
            "$ref": "EnvelopeSignature"
          },
          "type": "array"
        },
        "payload": {
          "type": "string",
          "format": "byte"
        },
        "payloadType": {
          "type": "string"
        }
      }
    },
    "EnvelopeSignature": {
      "id": "EnvelopeSignature",
      "properties": {
        "sig": {
          "format": "byte",
          "type": "string"
        },
        "keyid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.",
      "id": "Location",
      "properties": {
        "cpeUri": {
          "type": "string",
          "description": "Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)"
        },
        "path": {
          "description": "The path from which we gathered that this package/version is installed.",
          "type": "string"
        },
        "version": {
          "description": "Deprecated. The version installed at this location.",
          "$ref": "Version"
        }
      },
      "type": "object"
    },
    "PackageData": {
      "properties": {
        "version": {
          "description": "The version of the package being analysed",
          "type": "string"
        },
        "fileLocation": {
          "description": "The path to the jar file / go binary file.",
          "items": {
            "$ref": "FileLocation"
          },
          "type": "array"
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.",
          "type": "string"
        },
        "package": {
          "type": "string",
          "description": "The package being analysed for vulnerabilities"
        },
        "os": {
          "description": "The OS affected by a vulnerability Used to generate the cpe_uri for OS packages",
          "type": "string"
        },
        "binaryVersion": {
          "$ref": "PackageVersion",
          "description": "DEPRECATED"
        },
        "architecture": {
          "type": "string",
          "description": "The architecture of the package."
        },
        "hashDigest": {
          "type": "string",
          "description": "HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages."
        },
        "unused": {
          "type": "string"
        },
        "patchedCve": {
          "description": "CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "osVersion": {
          "type": "string",
          "description": "The version of the OS Used to generate the cpe_uri for OS packages"
        },
        "maintainer": {
          "$ref": "Maintainer",
          "description": "The maintainer of the package."
        },
        "dependencyChain": {
          "description": "The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package.",
          "type": "array",
          "items": {
            "$ref": "LanguagePackageDependency"
          }
        },
        "sourceVersion": {
          "description": "DEPRECATED",
          "$ref": "PackageVersion"
        },
        "packageType": {
          "description": "The type of package: os, maven, go, etc.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Operating System",
            "Java packages from Maven.",
            "Go third-party packages.",
            "Go toolchain + standard library packages.",
            "Python packages.",
            "NPM packages."
          ],
          "enum": [
            "PACKAGE_TYPE_UNSPECIFIED",
            "OS",
            "MAVEN",
            "GO",
            "GO_STDLIB",
            "PYPI",
            "NPM"
          ]
        },
        "binarySourceInfo": {
          "type": "array",
          "items": {
            "$ref": "BinarySourceInfo"
          },
          "description": "A bundle containing the binary and source information."
        }
      },
      "id": "PackageData",
      "type": "object"
    },
    "DeploymentOccurrence": {
      "properties": {
        "resourceUri": {
          "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deployTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Required. Beginning of the lifetime of this deployment."
        },
        "platform": {
          "enumDescriptions": [
            "Unknown.",
            "Google Container Engine.",
            "Google App Engine: Flexible Environment.",
            "Custom user-defined platform."
          ],
          "description": "Platform hosting this deployment.",
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ],
          "type": "string"
        },
        "userEmail": {
          "description": "Identity of the user that triggered this deployment.",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "Address of the runtime element hosting this deployment."
        },
        "config": {
          "type": "string",
          "description": "Configuration used to create this deployment."
        },
        "undeployTime": {
          "description": "End of the lifetime of this deployment.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "DeploymentOccurrence",
      "description": "The period during which some deployable was active in a runtime.",
      "type": "object"
    },
    "BuildDefinition": {
      "type": "object",
      "properties": {
        "internalParameters": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          }
        },
        "buildType": {
          "type": "string"
        },
        "resolvedDependencies": {
          "items": {
            "$ref": "ResourceDescriptor"
          },
          "type": "array"
        },
        "externalParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      },
      "id": "BuildDefinition"
    },
    "FileHashes": {
      "type": "object",
      "description": "Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.",
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "Hash"
          },
          "description": "Required. Collection of file hashes."
        }
      }
    }
  },
  "protocol": "rest",
  "id": "ondemandscanning:v1beta1",
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "canonicalName": "On-Demand Scanning",
  "servicePath": "",
  "basePath": "",
  "discoveryVersion": "v1",
  "revision": "20230710",
  "kind": "discovery#restDescription",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "rootUrl": "https://ondemandscanning.googleapis.com/",
  "version_module": true,
  "ownerDomain": "google.com",
  "title": "On-Demand Scanning API",
  "batchPath": "batch",
  "mtlsRootUrl": "https://ondemandscanning.mtls.googleapis.com/",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "cancel": {
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "path": "v1beta1/{+name}:cancel",
                  "id": "ondemandscanning.projects.locations.operations.cancel",
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "wait": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:wait",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.",
                  "httpMethod": "POST",
                  "id": "ondemandscanning.projects.locations.operations.wait",
                  "path": "v1beta1/{+name}:wait",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "timeout": {
                      "description": "The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.",
                      "format": "google-duration",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "The name of the operation resource to wait on."
                    }
                  }
                },
                "delete": {
                  "path": "v1beta1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "The name of the operation resource to be deleted.",
                      "required": true
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "ondemandscanning.projects.locations.operations.delete",
                  "httpMethod": "DELETE"
                },
                "get": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "The name of the operation resource.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1beta1/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "ondemandscanning.projects.locations.operations.get"
                },
                "list": {
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "description": "The standard list page token.",
                      "type": "string"
                    },
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "The standard list filter."
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "description": "The name of the operation's parent resource."
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "The standard list page size.",
                      "format": "int32"
                    }
                  },
                  "id": "ondemandscanning.projects.locations.operations.list",
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
                  "httpMethod": "GET",
                  "path": "v1beta1/{+name}/operations",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            },
            "scans": {
              "resources": {
                "vulnerabilities": {
                  "methods": {
                    "list": {
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "type": "string",
                          "description": "The page token, resulting from a previous call to ListVulnerabilities."
                        },
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "location": "query",
                          "description": "The number of vulnerabilities to retrieve."
                        },
                        "parent": {
                          "required": true,
                          "type": "string",
                          "description": "Required. The parent of the collection of Vulnerabilities being requested. Format: projects/[project_name]/locations/[location]/scans/[scan_id]",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/scans/[^/]+$"
                        }
                      },
                      "id": "ondemandscanning.projects.locations.scans.vulnerabilities.list",
                      "path": "v1beta1/{+parent}/vulnerabilities",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListVulnerabilitiesResponse"
                      },
                      "description": "Lists vulnerabilities resulting from a successfully completed scan.",
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/scans/{scansId}/vulnerabilities"
                    }
                  }
                }
              },
              "methods": {
                "analyzePackages": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "path": "v1beta1/{+parent}/scans:analyzePackages",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "description": "Required. The parent of the resource for which analysis is requested. Format: projects/[project_name]/locations/[location]",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "request": {
                    "$ref": "AnalyzePackagesRequest"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/scans:analyzePackages",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "ondemandscanning.projects.locations.scans.analyzePackages",
                  "description": "Initiates an analysis of the provided packages."
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "location": "query",
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    }
  },
  "version": "v1beta1",
  "documentationLink": "https://cloud.google.com/container-analysis/docs/on-demand-scanning/",
  "name": "ondemandscanning",
  "description": "A service to scan container images for vulnerabilities.",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "baseUrl": "https://ondemandscanning.googleapis.com/"
}

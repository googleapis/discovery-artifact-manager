{
  "version": "v1",
  "name": "recaptchaenterprise",
  "batchPath": "batch",
  "mtlsRootUrl": "https://recaptchaenterprise.mtls.googleapis.com/",
  "canonicalName": "Recaptcha Enterprise",
  "rootUrl": "https://recaptchaenterprise.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "description": "Help protect your website from fraudulent activity, spam, and abuse without creating friction.",
  "basePath": "",
  "resources": {
    "projects": {
      "resources": {
        "assessments": {
          "methods": {
            "annotate": {
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest"
              },
              "flatPath": "v1/projects/{projectsId}/assessments/{assessmentsId}:annotate",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/assessments/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The resource name of the Assessment, in the format `projects/{project}/assessments/{assessment}`."
                }
              },
              "description": "Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.",
              "path": "v1/{+name}:annotate",
              "parameterOrder": [
                "name"
              ],
              "id": "recaptchaenterprise.projects.assessments.annotate",
              "httpMethod": "POST"
            },
            "create": {
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Assessment"
              },
              "path": "v1/{+parent}/assessments",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Required. The name of the project in which the assessment will be created, in the format `projects/{project}`.",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "id": "recaptchaenterprise.projects.assessments.create",
              "description": "Creates an Assessment of the likelihood an event is legitimate.",
              "flatPath": "v1/projects/{projectsId}/assessments",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Assessment"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          }
        },
        "keys": {
          "methods": {
            "list": {
              "flatPath": "v1/projects/{projectsId}/keys",
              "description": "Returns the list of all keys that belong to a project.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/keys",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListKeysResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "id": "recaptchaenterprise.projects.keys.list",
              "parameters": {
                "pageSize": {
                  "type": "integer",
                  "description": "Optional. The maximum number of keys to return. Default is 10. Max limit is 1000.",
                  "format": "int32",
                  "location": "query"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Optional. The next_page_token value returned from a previous. ListKeysRequest, if any."
                },
                "parent": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Required. The name of the project that contains the keys that will be listed, in the format `projects/{project}`.",
                  "pattern": "^projects/[^/]+$"
                }
              }
            },
            "getMetrics": {
              "description": "Get some aggregated metrics for a Key. This data can be used to build dashboards.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Metrics"
              },
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}/metrics",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "recaptchaenterprise.projects.keys.getMetrics",
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "description": "Required. The name of the requested metrics, in the format `projects/{project}/keys/{key}/metrics`.",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/keys/[^/]+/metrics$"
                }
              }
            },
            "retrieveLegacySecretKey": {
              "parameterOrder": [
                "key"
              ],
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}:retrieveLegacySecretKey",
              "parameters": {
                "key": {
                  "required": true,
                  "location": "path",
                  "description": "Required. The public key name linked to the requested secret key in the format `projects/{project}/keys/{key}`.",
                  "type": "string",
                  "pattern": "^projects/[^/]+/keys/[^/]+$"
                }
              },
              "id": "recaptchaenterprise.projects.keys.retrieveLegacySecretKey",
              "path": "v1/{+key}:retrieveLegacySecretKey",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse"
              },
              "description": "Returns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA."
            },
            "delete": {
              "response": {
                "$ref": "GoogleProtobufEmpty"
              },
              "description": "Deletes the specified key.",
              "path": "v1/{+name}",
              "id": "recaptchaenterprise.projects.keys.delete",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "description": "Required. The name of the key to be deleted, in the format `projects/{project}/keys/{key}`.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE"
            },
            "create": {
              "parameters": {
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "description": "Required. The name of the project in which the key will be created, in the format `projects/{project}`.",
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "parent"
              ],
              "id": "recaptchaenterprise.projects.keys.create",
              "httpMethod": "POST",
              "flatPath": "v1/projects/{projectsId}/keys",
              "path": "v1/{+parent}/keys",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "description": "Creates a new reCAPTCHA Enterprise key.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              }
            },
            "get": {
              "httpMethod": "GET",
              "id": "recaptchaenterprise.projects.keys.get",
              "description": "Returns the specified key.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "description": "Required. The name of the requested key, in the format `projects/{project}/keys/{key}`."
                }
              },
              "path": "v1/{+name}",
              "parameterOrder": [
                "name"
              ]
            },
            "patch": {
              "httpMethod": "PATCH",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "description": "Updates the specified key.",
              "parameters": {
                "updateMask": {
                  "description": "Optional. The mask to control which fields of the key get updated. If the mask is not present, all fields will be updated.",
                  "type": "string",
                  "location": "query",
                  "format": "google-fieldmask"
                },
                "name": {
                  "required": true,
                  "description": "Identifier. The resource name for the Key in the format `projects/{project}/keys/{key}`.",
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/keys/[^/]+$"
                }
              },
              "id": "recaptchaenterprise.projects.keys.patch",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}"
            },
            "migrate": {
              "parameterOrder": [
                "name"
              ],
              "id": "recaptchaenterprise.projects.keys.migrate",
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "type": "string",
                  "description": "Required. The name of the key to be migrated, in the format `projects/{project}/keys/{key}`.",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}:migrate",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "path": "v1/{+name}:migrate",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.",
              "httpMethod": "POST"
            }
          }
        },
        "relatedaccountgroupmemberships": {
          "methods": {
            "search": {
              "httpMethod": "POST",
              "parameters": {
                "project": {
                  "pattern": "^projects/[^/]+$",
                  "description": "Required. The name of the project to search related account group memberships from. Specify the project name in the following format: `projects/{project}`.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "v1/projects/{projectsId}/relatedaccountgroupmemberships:search",
              "parameterOrder": [
                "project"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse"
              },
              "id": "recaptchaenterprise.projects.relatedaccountgroupmemberships.search",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest"
              },
              "path": "v1/{+project}/relatedaccountgroupmemberships:search",
              "description": "Search group memberships related to a given account.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          }
        },
        "firewallpolicies": {
          "methods": {
            "delete": {
              "path": "v1/{+name}",
              "httpMethod": "DELETE",
              "description": "Deletes the specified firewall policy.",
              "response": {
                "$ref": "GoogleProtobufEmpty"
              },
              "flatPath": "v1/projects/{projectsId}/firewallpolicies/{firewallpoliciesId}",
              "id": "recaptchaenterprise.projects.firewallpolicies.delete",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Required. The name of the policy to be deleted, in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+/firewallpolicies/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "get": {
              "path": "v1/{+name}",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "httpMethod": "GET",
              "id": "recaptchaenterprise.projects.firewallpolicies.get",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies/{firewallpoliciesId}",
              "description": "Returns the specified firewall policy.",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. The name of the requested policy, in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.",
                  "required": true,
                  "pattern": "^projects/[^/]+/firewallpolicies/[^/]+$",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "create": {
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "description": "Required. The name of the project this policy will apply to, in the format `projects/{project}`."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "flatPath": "v1/projects/{projectsId}/firewallpolicies",
              "path": "v1/{+parent}/firewallpolicies",
              "httpMethod": "POST",
              "id": "recaptchaenterprise.projects.firewallpolicies.create",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              }
            },
            "reorder": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesRequest"
              },
              "parameters": {
                "parent": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The name of the project to list the policies for, in the format `projects/{project}`."
                }
              },
              "description": "Reorders all firewall policies.",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies:reorder",
              "path": "v1/{+parent}/firewallpolicies:reorder",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesResponse"
              },
              "httpMethod": "POST",
              "id": "recaptchaenterprise.projects.firewallpolicies.reorder"
            },
            "patch": {
              "id": "recaptchaenterprise.projects.firewallpolicies.patch",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies/{firewallpoliciesId}",
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/firewallpolicies/[^/]+$",
                  "description": "Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "updateMask": {
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask",
                  "description": "Optional. The mask to control which fields of the policy get updated. If the mask is not present, all fields will be updated."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates the specified firewall policy.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "httpMethod": "PATCH"
            },
            "list": {
              "id": "recaptchaenterprise.projects.firewallpolicies.list",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/firewallpolicies",
              "parameters": {
                "pageSize": {
                  "location": "query",
                  "description": "Optional. The maximum number of policies to return. Default is 10. Max limit is 1000.",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Optional. The next_page_token value returned from a previous. ListFirewallPoliciesRequest, if any.",
                  "location": "query",
                  "type": "string"
                },
                "parent": {
                  "description": "Required. The name of the project to list the policies for, in the format `projects/{project}`.",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Returns the list of all firewall policies that belong to a project.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse"
              }
            }
          }
        },
        "relatedaccountgroups": {
          "methods": {
            "list": {
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse"
              },
              "flatPath": "v1/projects/{projectsId}/relatedaccountgroups",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "List groups of related accounts.",
              "id": "recaptchaenterprise.projects.relatedaccountgroups.list",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/relatedaccountgroups",
              "parameters": {
                "pageSize": {
                  "location": "query",
                  "description": "Optional. The maximum number of groups to return. The service might return fewer than this value. If unspecified, at most 50 groups are returned. The maximum value is 1000; values above 1000 are coerced to 1000.",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Optional. A page token, received from a previous `ListRelatedAccountGroups` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRelatedAccountGroups` must match the call that provided the page token.",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "description": "Required. The name of the project to list related account groups from, in the format `projects/{project}`.",
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "GET"
            }
          },
          "resources": {
            "memberships": {
              "methods": {
                "list": {
                  "path": "v1/{+parent}/memberships",
                  "response": {
                    "$ref": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse"
                  },
                  "parameters": {
                    "parent": {
                      "description": "Required. The resource name for the related account group in the format `projects/{project}/relatedaccountgroups/{relatedaccountgroup}`.",
                      "pattern": "^projects/[^/]+/relatedaccountgroups/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageToken": {
                      "description": "Optional. A page token, received from a previous `ListRelatedAccountGroupMemberships` call. When paginating, all other parameters provided to `ListRelatedAccountGroupMemberships` must match the call that provided the page token.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "Optional. The maximum number of accounts to return. The service might return fewer than this value. If unspecified, at most 50 accounts are returned. The maximum value is 1000; values above 1000 are coerced to 1000.",
                      "type": "integer",
                      "location": "query"
                    }
                  },
                  "httpMethod": "GET",
                  "id": "recaptchaenterprise.projects.relatedaccountgroups.memberships.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "description": "Get memberships in a group of related accounts.",
                  "flatPath": "v1/projects/{projectsId}/relatedaccountgroups/{relatedaccountgroupsId}/memberships",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "ownerName": "Google",
  "id": "recaptchaenterprise:v1",
  "kind": "discovery#restDescription",
  "ownerDomain": "google.com",
  "discoveryVersion": "v1",
  "revision": "20240317",
  "version_module": true,
  "parameters": {
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "default": "json",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ]
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "fullyEncodeReservedExpansion": true,
  "protocol": "rest",
  "documentationLink": "https://cloud.google.com/recaptcha-enterprise/",
  "baseUrl": "https://recaptchaenterprise.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "schemas": {
    "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse": {
      "description": "The response to a `ListRelatedAccountGroupMemberships` call.",
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse",
      "properties": {
        "relatedAccountGroupMemberships": {
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership"
          },
          "type": "array",
          "description": "The memberships listed by the query."
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesRequest": {
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. A list containing all policy names, in the new order. Each name is in the format `projects/{project}/firewallpolicies/{firewallpolicy}`."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesRequest",
      "type": "object",
      "description": "The reorder firewall policies request message."
    },
    "GoogleCloudRecaptchaenterpriseV1FraudSignals": {
      "type": "object",
      "description": "Fraud signals describing users and cards involved in the transaction.",
      "id": "GoogleCloudRecaptchaenterpriseV1FraudSignals",
      "properties": {
        "userSignals": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals",
          "description": "Output only. Signals describing the end user in this transaction.",
          "readOnly": true
        },
        "cardSignals": {
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals",
          "description": "Output only. Signals describing the payment card or cards used in this transaction."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1WafSettings": {
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1WafSettings",
      "description": "Settings specific to keys that can be used for WAF (Web Application Firewall).",
      "properties": {
        "wafService": {
          "type": "string",
          "enum": [
            "WAF_SERVICE_UNSPECIFIED",
            "CA",
            "FASTLY",
            "CLOUDFLARE"
          ],
          "enumDescriptions": [
            "Undefined WAF",
            "Cloud Armor",
            "Fastly",
            "Cloudflare"
          ],
          "description": "Required. The WAF service that uses this key."
        },
        "wafFeature": {
          "enum": [
            "WAF_FEATURE_UNSPECIFIED",
            "CHALLENGE_PAGE",
            "SESSION_TOKEN",
            "ACTION_TOKEN",
            "EXPRESS"
          ],
          "enumDescriptions": [
            "Undefined feature.",
            "Redirects suspicious traffic to reCAPTCHA.",
            "Use reCAPTCHA session-tokens to protect the whole user session on the site's domain.",
            "Use reCAPTCHA action-tokens to protect user actions.",
            "Use reCAPTCHA WAF express protection to protect any content other than web pages, like APIs and IoT devices."
          ],
          "description": "Required. The WAF feature for which this key is enabled.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo": {
      "description": "Information about a verification endpoint that can be used for 2FA.",
      "id": "GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo",
      "properties": {
        "lastVerificationTime": {
          "description": "Output only. Timestamp of the last successful verification for the endpoint, if any.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "requestToken": {
          "description": "Output only. Token to provide to the client to trigger endpoint verification. It must be used within 15 minutes.",
          "type": "string",
          "readOnly": true
        },
        "emailAddress": {
          "type": "string",
          "description": "Email address for which to trigger a verification request."
        },
        "phoneNumber": {
          "description": "Phone number for which to trigger a verification request. Should be given in E.164 format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment": {
      "id": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment",
      "type": "object",
      "description": "Assessment for Fraud Prevention.",
      "properties": {
        "behavioralTrustVerdict": {
          "description": "Output only. Assessment of this transaction for behavioral trust.",
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict"
        },
        "cardTestingVerdict": {
          "description": "Output only. Assessment of this transaction for risk of being part of a card testing attack.",
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict"
        },
        "transactionRisk": {
          "format": "float",
          "description": "Output only. Probability of this transaction being fraudulent. Summarizes the combined risk of attack vectors below. Values are from 0.0 (lowest) to 1.0 (highest).",
          "type": "number",
          "readOnly": true
        },
        "stolenInstrumentVerdict": {
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict",
          "description": "Output only. Assessment of this transaction for risk of a stolen instrument."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction",
      "properties": {
        "value": {
          "description": "Optional. The header value to set in the request to the backend server.",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "Optional. The header key to set in the request to the backend server."
        }
      },
      "description": "A set header action sets a header and forwards the request to the backend. This can be used to trigger custom protection implemented on the backend.",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1TestingOptions": {
      "id": "GoogleCloudRecaptchaenterpriseV1TestingOptions",
      "description": "Options for user acceptance testing.",
      "type": "object",
      "properties": {
        "testingScore": {
          "description": "Optional. All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.",
          "type": "number",
          "format": "float"
        },
        "testingChallenge": {
          "enumDescriptions": [
            "Perform the normal risk analysis and return either nocaptcha or a challenge depending on risk and trust factors.",
            "Challenge requests for this key always return a nocaptcha, which does not require a solution.",
            "Challenge requests for this key always return an unsolvable challenge."
          ],
          "description": "Optional. For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.",
          "enum": [
            "TESTING_CHALLENGE_UNSPECIFIED",
            "NOCAPTCHA",
            "UNSOLVABLE_CHALLENGE"
          ],
          "type": "string"
        }
      }
    },
    "GoogleRpcStatus": {
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "details": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "id": "GoogleRpcStatus"
    },
    "GoogleCloudRecaptchaenterpriseV1Key": {
      "type": "object",
      "description": "A key used to identify and configure applications (web and/or mobile) that use reCAPTCHA Enterprise.",
      "id": "GoogleCloudRecaptchaenterpriseV1Key",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Required. Human-readable display name of this key. Modifiable by user."
        },
        "wafSettings": {
          "description": "Optional. Settings for WAF",
          "$ref": "GoogleCloudRecaptchaenterpriseV1WafSettings"
        },
        "name": {
          "description": "Identifier. The resource name for the Key in the format `projects/{project}/keys/{key}`.",
          "type": "string"
        },
        "iosSettings": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1IOSKeySettings",
          "description": "Settings for keys that can be used by iOS apps."
        },
        "testingOptions": {
          "description": "Optional. Options for user acceptance testing.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1TestingOptions"
        },
        "createTime": {
          "description": "Output only. The timestamp corresponding to the creation of this key.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "androidSettings": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings",
          "description": "Settings for keys that can be used by Android apps."
        },
        "webSettings": {
          "description": "Settings for keys that can be used by websites.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1WebKeySettings"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. See [Creating and managing labels] (https://cloud.google.com/recaptcha-enterprise/docs/labels)."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1WebKeySettings": {
      "properties": {
        "allowAllDomains": {
          "description": "Optional. If set to true, it means allowed_domains will not be enforced.",
          "type": "boolean"
        },
        "integrationType": {
          "enumDescriptions": [
            "Default type that indicates this enum hasn't been specified. This is not a valid IntegrationType, one of the other types must be specified instead.",
            "Only used to produce scores. It doesn't display the \"I'm not a robot\" checkbox and never shows captcha challenges.",
            "Displays the \"I'm not a robot\" checkbox and may show captcha challenges after it is checked.",
            "Doesn't display the \"I'm not a robot\" checkbox, but may show captcha challenges after risk analysis."
          ],
          "description": "Required. Describes how this key is integrated with the website.",
          "enum": [
            "INTEGRATION_TYPE_UNSPECIFIED",
            "SCORE",
            "CHECKBOX",
            "INVISIBLE"
          ],
          "type": "string"
        },
        "allowAmpTraffic": {
          "type": "boolean",
          "description": "Optional. If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type."
        },
        "challengeSecurityPreference": {
          "enum": [
            "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED",
            "USABILITY",
            "BALANCE",
            "SECURITY"
          ],
          "enumDescriptions": [
            "Default type that indicates this enum hasn't been specified.",
            "Key tends to show fewer and easier challenges.",
            "Key tends to show balanced (in amount and difficulty) challenges.",
            "Key tends to show more and harder challenges."
          ],
          "description": "Optional. Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.",
          "type": "string"
        },
        "allowedDomains": {
          "description": "Optional. Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1WebKeySettings",
      "description": "Settings specific to keys that can be used by websites.",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1TokenProperties": {
      "type": "object",
      "properties": {
        "androidPackageName": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The name of the Android package with which the token was generated (Android keys only)."
        },
        "valid": {
          "description": "Output only. Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).",
          "type": "boolean",
          "readOnly": true
        },
        "hostname": {
          "description": "Output only. The hostname of the page on which the token was generated (Web keys only).",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The timestamp corresponding to the generation of the token.",
          "type": "string",
          "readOnly": true
        },
        "iosBundleId": {
          "description": "Output only. The ID of the iOS bundle with which the token was generated (iOS keys only).",
          "type": "string",
          "readOnly": true
        },
        "invalidReason": {
          "enumDescriptions": [
            "Default unspecified type.",
            "If the failure reason was not accounted for.",
            "The provided user verification token was malformed.",
            "The user verification token had expired.",
            "The user verification had already been seen.",
            "The user verification token was not present.",
            "A retriable error (such as network failure) occurred on the browser. Could easily be simulated by an attacker."
          ],
          "enum": [
            "INVALID_REASON_UNSPECIFIED",
            "UNKNOWN_INVALID_REASON",
            "MALFORMED",
            "EXPIRED",
            "DUPE",
            "MISSING",
            "BROWSER_ERROR"
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. Reason associated with the response when valid = false."
        },
        "action": {
          "readOnly": true,
          "description": "Output only. Action name provided at token generation.",
          "type": "string"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1TokenProperties",
      "description": "Properties of the provided event token."
    },
    "GoogleCloudRecaptchaenterpriseV1RiskAnalysis": {
      "properties": {
        "extendedVerdictReasons": {
          "readOnly": true,
          "description": "Output only. Extended verdict reasons to be used for experimentation only. The set of possible reasons is subject to change.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "score": {
          "format": "float",
          "description": "Output only. Legitimate event score from 0.0 to 1.0. (1.0 means very likely legitimate traffic while 0.0 means very likely non-legitimate traffic).",
          "readOnly": true,
          "type": "number"
        },
        "reasons": {
          "items": {
            "enumDescriptions": [
              "Default unspecified type.",
              "Interactions matched the behavior of an automated agent.",
              "The event originated from an illegitimate environment.",
              "Traffic volume from the event source is higher than normal.",
              "Interactions with the site were significantly different than expected patterns.",
              "Too little traffic has been received from this site thus far to generate quality risk analysis.",
              "The request matches behavioral characteristics of a carding attack.",
              "The request matches behavioral characteristics of chargebacks for fraud."
            ],
            "type": "string",
            "enum": [
              "CLASSIFICATION_REASON_UNSPECIFIED",
              "AUTOMATION",
              "UNEXPECTED_ENVIRONMENT",
              "TOO_MUCH_TRAFFIC",
              "UNEXPECTED_USAGE_PATTERNS",
              "LOW_CONFIDENCE_SCORE",
              "SUSPECTED_CARDING",
              "SUSPECTED_CHARGEBACK"
            ]
          },
          "readOnly": true,
          "type": "array",
          "description": "Output only. Reasons contributing to the risk analysis verdict."
        }
      },
      "description": "Risk analysis result for an event.",
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1RiskAnalysis"
    },
    "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict": {
      "description": "Information about card testing fraud, where an adversary is testing fraudulently obtained cards or brute forcing their details.",
      "properties": {
        "risk": {
          "format": "float",
          "readOnly": true,
          "description": "Output only. Probability of this transaction attempt being part of a card testing attack. Values are from 0.0 (lowest) to 1.0 (highest).",
          "type": "number"
        }
      },
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict"
    },
    "GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals": {
      "properties": {
        "syntheticRisk": {
          "readOnly": true,
          "description": "Output only. Likelihood (from 0.0 to 1.0) this user includes synthetic components in their identity, such as a randomly generated email address, temporary phone number, or fake shipping address.",
          "type": "number",
          "format": "float"
        },
        "activeDaysLowerBound": {
          "format": "int32",
          "description": "Output only. This user (based on email, phone, and other identifiers) has been seen on the internet for at least this number of days.",
          "readOnly": true,
          "type": "integer"
        }
      },
      "description": "Signals describing the user involved in this transaction.",
      "id": "GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1TransactionData": {
      "properties": {
        "shippingAddress": {
          "description": "Optional. Destination address if this transaction involves shipping a physical item.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionDataAddress"
        },
        "items": {
          "type": "array",
          "description": "Optional. Items purchased in this transaction.",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionDataItem"
          }
        },
        "shippingValue": {
          "description": "Optional. The value of shipping in the specified currency. 0 for free or no shipping.",
          "format": "double",
          "type": "number"
        },
        "cardLastFour": {
          "type": "string",
          "description": "Optional. The last four digits of the card."
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "Optional. The decimal value of the transaction in the specified currency."
        },
        "transactionId": {
          "description": "Unique identifier for the transaction. This custom identifier can be used to reference this transaction in the future, for example, labeling a refund or chargeback event. Two attempts at the same transaction should use the same transaction id.",
          "type": "string"
        },
        "billingAddress": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionDataAddress",
          "description": "Optional. Address associated with the payment method when applicable."
        },
        "user": {
          "description": "Optional. Information about the user paying/initiating the transaction.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionDataUser"
        },
        "cardBin": {
          "description": "Optional. The Bank Identification Number - generally the first 6 or 8 digits of the card.",
          "type": "string"
        },
        "currencyCode": {
          "description": "Optional. The currency code in ISO-4217 format.",
          "type": "string"
        },
        "gatewayInfo": {
          "description": "Optional. Information about the payment gateway's response to the transaction.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo"
        },
        "merchants": {
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionDataUser"
          },
          "description": "Optional. Information about the user or users fulfilling the transaction.",
          "type": "array"
        },
        "paymentMethod": {
          "type": "string",
          "description": "Optional. The payment method for the transaction. The allowed values are: * credit-card * debit-card * gift-card * processor-{name} (If a third-party is used, for example, processor-paypal) * custom-{name} (If an alternative method is used, for example, custom-crypto)"
        }
      },
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1TransactionData",
      "description": "Transaction data associated with a payment protected by reCAPTCHA Enterprise."
    },
    "GoogleCloudRecaptchaenterpriseV1TransactionDataAddress": {
      "id": "GoogleCloudRecaptchaenterpriseV1TransactionDataAddress",
      "description": "Structured address format for billing and shipping addresses.",
      "type": "object",
      "properties": {
        "locality": {
          "description": "Optional. The town/city of the address.",
          "type": "string"
        },
        "regionCode": {
          "description": "Optional. The CLDR country/region of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "description": "Optional. The state, province, or otherwise administrative area of the address.",
          "type": "string"
        },
        "address": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. The first lines of the address. The first line generally contains the street name and number, and further lines may include information such as an apartment number."
        },
        "recipient": {
          "type": "string",
          "description": "Optional. The recipient name, potentially including information such as \"care of\"."
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. The postal or ZIP code of the address."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1Assessment": {
      "description": "A reCAPTCHA Enterprise assessment resource.",
      "properties": {
        "accountVerification": {
          "description": "Optional. Account verification information for identity verification. The assessment event must include a token and site key to use this feature.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo"
        },
        "event": {
          "description": "Optional. The event being assessed.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1Event"
        },
        "name": {
          "description": "Output only. Identifier. The resource name for the Assessment in the format `projects/{project}/assessments/{assessment}`.",
          "readOnly": true,
          "type": "string"
        },
        "riskAnalysis": {
          "readOnly": true,
          "description": "Output only. The risk analysis result for the event being assessed.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1RiskAnalysis"
        },
        "firewallPolicyAssessment": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment",
          "readOnly": true,
          "description": "Output only. Assessment returned when firewall policies belonging to the project are evaluated using the field firewall_policy_evaluation."
        },
        "tokenProperties": {
          "description": "Output only. Properties of the provided event token.",
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1TokenProperties"
        },
        "fraudSignals": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FraudSignals",
          "description": "Output only. Fraud Signals specific to the users involved in a payment transaction.",
          "readOnly": true
        },
        "privatePasswordLeakVerification": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification",
          "description": "Optional. The private password leak verification field contains the parameters that are used to to check for leaks privately without sharing user credentials."
        },
        "accountDefenderAssessment": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment",
          "description": "Output only. Assessment returned by account defender when an account identifier is provided.",
          "readOnly": true
        },
        "fraudPreventionAssessment": {
          "readOnly": true,
          "description": "Output only. Assessment returned by Fraud Prevention when TransactionData is provided.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1Assessment",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict": {
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict",
      "description": "Information about stolen instrument fraud, where the user is not the legitimate owner of the instrument being used for the purchase.",
      "properties": {
        "risk": {
          "description": "Output only. Probability of this transaction being executed with a stolen instrument. Values are from 0.0 (lowest) to 1.0 (highest).",
          "format": "float",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ScoreMetrics": {
      "properties": {
        "overallMetrics": {
          "description": "Aggregated score metrics for all traffic.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution"
        },
        "actionMetrics": {
          "description": "Action-based metrics. The map key is the action name which specified by the site owners at time of the \"execute\" client-side call.",
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution"
          }
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1ScoreMetrics",
      "description": "Metrics related to scoring.",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction": {
      "type": "object",
      "properties": {},
      "description": "An include reCAPTCHA script action involves injecting reCAPTCHA JavaScript code into the HTML returned by the site backend. This reCAPTCHA script is tasked with collecting user signals on the requested web page, issuing tokens as a cookie within the site domain, and enabling their utilization in subsequent page requests.",
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction"
    },
    "GoogleCloudRecaptchaenterpriseV1ListKeysResponse": {
      "properties": {
        "keys": {
          "description": "Key details.",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. It is set to empty if no keys remain in results.",
          "type": "string"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1ListKeysResponse",
      "type": "object",
      "description": "Response to request to list keys in a project."
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction": {
      "properties": {},
      "description": "A block action serves an HTTP error code a prevents the request from hitting the backend.",
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse": {
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse",
      "description": "Response to request to list firewall policies belonging to a project.",
      "properties": {
        "firewallPolicies": {
          "description": "Policy details.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results. It is set to empty if no policies remain in results."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1TransactionDataItem": {
      "properties": {
        "quantity": {
          "description": "Optional. The quantity of this item that is being purchased.",
          "format": "int64",
          "type": "string"
        },
        "name": {
          "description": "Optional. The full name of the item.",
          "type": "string"
        },
        "value": {
          "type": "number",
          "description": "Optional. The value per item that the user is paying, in the transaction currency, after discounts.",
          "format": "double"
        },
        "merchantAccountId": {
          "description": "Optional. When a merchant is specified, its corresponding account_id. Necessary to populate marketplace-style transactions.",
          "type": "string"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1TransactionDataItem",
      "type": "object",
      "description": "Line items being purchased in this transaction."
    },
    "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse": {
      "properties": {
        "relatedAccountGroups": {
          "type": "array",
          "description": "The groups of related accounts listed by the query.",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "description": "The response to a `ListRelatedAccountGroups` call.",
      "id": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics": {
      "description": "Metrics related to challenges.",
      "properties": {
        "nocaptchaCount": {
          "type": "string",
          "format": "int64",
          "description": "Count of nocaptchas (successful verification without a challenge) issued."
        },
        "passedCount": {
          "format": "int64",
          "type": "string",
          "description": "Count of nocaptchas (successful verification without a challenge) plus submitted challenge solutions that were correct and resulted in verification."
        },
        "pageloadCount": {
          "description": "Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of pageloads for pages that include reCAPTCHA.",
          "type": "string",
          "format": "int64"
        },
        "failedCount": {
          "description": "Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such that a subsequent challenge was triggered.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse": {
      "properties": {},
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse",
      "description": "Empty response for AnnotateAssessment."
    },
    "GoogleCloudRecaptchaenterpriseV1TransactionDataUser": {
      "description": "Details about a user's account involved in the transaction.",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "Optional. Unique account identifier for this user. If using account defender, this should match the hashed_account_id field. Otherwise, a unique and persistent identifier for this account."
        },
        "phoneNumber": {
          "description": "Optional. The phone number of the user, with country code.",
          "type": "string"
        },
        "emailVerified": {
          "description": "Optional. Whether the email has been verified to be accessible by the user (OTP or similar).",
          "type": "boolean"
        },
        "creationMs": {
          "type": "string",
          "format": "int64",
          "description": "Optional. The epoch milliseconds of the user's account creation."
        },
        "phoneVerified": {
          "type": "boolean",
          "description": "Optional. Whether the phone number has been verified to be accessible by the user (OTP or similar)."
        },
        "email": {
          "description": "Optional. The email address of the user.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1TransactionDataUser"
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallAction": {
      "description": "An individual action. Each action represents what to do if a policy matches.",
      "type": "object",
      "properties": {
        "block": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction",
          "description": "This action will deny access to a given page. The user will get an HTTP error code."
        },
        "allow": {
          "description": "The user request did not match any policy and should be allowed access to the requested resource.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction"
        },
        "substitute": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction",
          "description": "This action will transparently serve a different page to an offending user."
        },
        "includeRecaptchaScript": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction",
          "description": "This action will inject reCAPTCHA JavaScript code into the HTML page returned by the site backend."
        },
        "setHeader": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction",
          "description": "This action will set a custom header but allow the request to continue to the customer backend."
        },
        "redirect": {
          "description": "This action will redirect the request to a ReCaptcha interstitial to attach a token.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallAction"
    },
    "GoogleCloudRecaptchaenterpriseV1ScoreDistribution": {
      "id": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution",
      "type": "object",
      "properties": {
        "scoreBuckets": {
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "string"
          },
          "description": "Map key is score value multiplied by 100. The scores are discrete values between [0, 1]. The maximum number of buckets is on order of a few dozen, but typically much lower (ie. 10)."
        }
      },
      "description": "Score distribution."
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction",
      "description": "An allow action continues processing a request unimpeded.",
      "type": "object",
      "properties": {}
    },
    "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest": {
      "properties": {
        "skipBillingCheck": {
          "description": "Optional. If true, skips the billing check. A reCAPTCHA Enterprise key or migrated key behaves differently than a reCAPTCHA (non-Enterprise version) key when you reach a quota limit (see https://cloud.google.com/recaptcha-enterprise/quotas#quota_limit). To avoid any disruption of your usage, we check that a billing account is present. If your usage of reCAPTCHA is under the free quota, you can safely skip the billing check and proceed with the migration. See https://cloud.google.com/recaptcha-enterprise/docs/billing-information.",
          "type": "boolean"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest",
      "type": "object",
      "description": "The migrate key request message."
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallPolicy": {
      "type": "object",
      "description": "A FirewallPolicy represents a single matching pattern and resulting actions to take.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Optional. A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters."
        },
        "path": {
          "description": "Optional. The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters.",
          "type": "string"
        },
        "condition": {
          "type": "string",
          "description": "Optional. A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters."
        },
        "name": {
          "type": "string",
          "description": "Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`."
        },
        "actions": {
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallAction"
          },
          "description": "Optional. The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as `AllowAction`, `BlockAction` or `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader` might be specified. A single policy can contain up to 16 actions.",
          "type": "array"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction",
      "type": "object",
      "description": "A substitute action transparently serves a different page than the one requested.",
      "properties": {
        "path": {
          "type": "string",
          "description": "Optional. The address to redirect to. The target is a relative path in the current host. Example: \"/blog/404.html\"."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1IOSKeySettings": {
      "type": "object",
      "description": "Settings specific to keys that can be used by iOS apps.",
      "id": "GoogleCloudRecaptchaenterpriseV1IOSKeySettings",
      "properties": {
        "appleDeveloperId": {
          "description": "Optional. Apple Developer account details for the app that is protected by the reCAPTCHA Key. reCAPTCHA Enterprise leverages platform-specific checks like Apple App Attest and Apple DeviceCheck to protect your app from abuse. Providing these fields allows reCAPTCHA Enterprise to get a better assessment of the integrity of your app.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1AppleDeveloperId"
        },
        "allowAllBundleIds": {
          "type": "boolean",
          "description": "Optional. If set to true, allowed_bundle_ids are not enforced."
        },
        "allowedBundleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse": {
      "description": "Secret key is used only in legacy reCAPTCHA. It must be used in a 3rd party integration with legacy reCAPTCHA.",
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse",
      "properties": {
        "legacySecretKey": {
          "description": "The secret key (also known as shared secret) authorizes communication between your application backend and the reCAPTCHA Enterprise server to create an assessment. The secret key needs to be kept safe for security purposes.",
          "type": "string"
        }
      }
    },
    "GoogleProtobufEmpty": {
      "id": "GoogleProtobufEmpty",
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "GoogleCloudRecaptchaenterpriseV1UserId": {
      "id": "GoogleCloudRecaptchaenterpriseV1UserId",
      "type": "object",
      "properties": {
        "username": {
          "description": "Optional. A unique username, if different from all the other identifiers and `account_id` that are provided. Can be a unique login handle or display name for a user.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "Optional. An email address."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Optional. A phone number. Should use the E.164 format."
        }
      },
      "description": "An identifier associated with a user."
    },
    "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment": {
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "enum": [
              "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED",
              "PROFILE_MATCH",
              "SUSPICIOUS_LOGIN_ACTIVITY",
              "SUSPICIOUS_ACCOUNT_CREATION",
              "RELATED_ACCOUNTS_NUMBER_HIGH"
            ],
            "type": "string",
            "enumDescriptions": [
              "Default unspecified type.",
              "The request matches a known good profile for the user.",
              "The request is potentially a suspicious login event and must be further verified either through multi-factor authentication or another system.",
              "The request matched a profile that previously had suspicious account creation behavior. This can mean that this is a fake account.",
              "The account in the request has a high number of related accounts. It does not necessarily imply that the account is bad but can require further investigation."
            ]
          },
          "readOnly": true,
          "description": "Output only. Labels for this request."
        }
      },
      "description": "Account defender risk assessment."
    },
    "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Identifier. The resource name for the related account group in the format `projects/{project}/relatedaccountgroups/{related_account_group}`."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup",
      "description": "A group of related accounts."
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment": {
      "description": "Policy config assessment.",
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment",
      "properties": {
        "firewallPolicy": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy",
          "readOnly": true,
          "description": "Output only. The policy that matched the request. If more than one policy may match, this is the first match. If no policy matches the incoming request, the policy field will be left empty."
        },
        "error": {
          "description": "Output only. If the processing of a policy config fails, an error will be populated and the firewall_policy will be left empty.",
          "$ref": "GoogleRpcStatus",
          "readOnly": true
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction": {
      "type": "object",
      "properties": {},
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction",
      "description": "A redirect action returns a 307 (temporary redirect) response, pointing the user to a ReCaptcha interstitial page to attach a token."
    },
    "GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals": {
      "properties": {
        "cardLabels": {
          "description": "Output only. The labels for the payment card in this transaction.",
          "items": {
            "enumDescriptions": [
              "No label specified.",
              "This card has been detected as prepaid.",
              "This card has been detected as virtual, such as a card number generated for a single transaction or merchant.",
              "This card has been detected as being used in an unexpected geographic location."
            ],
            "enum": [
              "CARD_LABEL_UNSPECIFIED",
              "PREPAID",
              "VIRTUAL",
              "UNEXPECTED_LOCATION"
            ],
            "type": "string"
          },
          "type": "array",
          "readOnly": true
        }
      },
      "description": "Signals describing the payment card used in this transaction.",
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals"
    },
    "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Identifier. The resource name for this membership in the format `projects/{project}/relatedaccountgroups/{relatedaccountgroup}/memberships/{membership}`."
        },
        "hashedAccountId": {
          "format": "byte",
          "deprecated": true,
          "description": "Deprecated: use `account_id` instead. The unique stable hashed account identifier of the member. The identifier corresponds to a `hashed_account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call.",
          "type": "string"
        },
        "accountId": {
          "type": "string",
          "description": "The unique stable account identifier of the member. The identifier corresponds to an `account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership",
      "type": "object",
      "description": "A membership in a group of related accounts."
    },
    "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest": {
      "type": "object",
      "properties": {
        "pageToken": {
          "type": "string",
          "description": "Optional. A page token, received from a previous `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchRelatedAccountGroupMemberships` must match the call that provided the page token."
        },
        "accountId": {
          "type": "string",
          "description": "Optional. The unique stable account identifier used to search connections. The identifier should correspond to an `account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id or account_id must be set, but not both."
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "description": "Optional. The maximum number of groups to return. The service might return fewer than this value. If unspecified, at most 50 groups are returned. The maximum value is 1000; values above 1000 are coerced to 1000."
        },
        "hashedAccountId": {
          "format": "byte",
          "type": "string",
          "description": "Optional. Deprecated: use `account_id` instead. The unique stable hashed account identifier used to search connections. The identifier should correspond to a `hashed_account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id or account_id must be set, but not both.",
          "deprecated": true
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest",
      "description": "The request message to search related account group memberships."
    },
    "GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo": {
      "type": "object",
      "properties": {
        "latestVerificationResult": {
          "description": "Output only. Result of the latest account verification challenge.",
          "enum": [
            "RESULT_UNSPECIFIED",
            "SUCCESS_USER_VERIFIED",
            "ERROR_USER_NOT_VERIFIED",
            "ERROR_SITE_ONBOARDING_INCOMPLETE",
            "ERROR_RECIPIENT_NOT_ALLOWED",
            "ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED",
            "ERROR_CRITICAL_INTERNAL",
            "ERROR_CUSTOMER_QUOTA_EXHAUSTED",
            "ERROR_VERIFICATION_BYPASSED",
            "ERROR_VERDICT_MISMATCH"
          ],
          "enumDescriptions": [
            "No information about the latest account verification.",
            "The user was successfully verified. This means the account verification challenge was successfully completed.",
            "The user failed the verification challenge.",
            "The site is not properly onboarded to use the account verification feature.",
            "The recipient is not allowed for account verification. This can occur during integration but should not occur in production.",
            "The recipient has already been sent too many verification codes in a short amount of time.",
            "The verification flow could not be completed due to a critical internal error.",
            "The client has exceeded their two factor request quota for this period of time.",
            "The request cannot be processed at the time because of an incident. This bypass can be restricted to a problematic destination email domain, a customer, or could affect the entire service.",
            "The request parameters do not match with the token provided and cannot be processed."
          ],
          "type": "string",
          "readOnly": true
        },
        "languageCode": {
          "description": "Optional. Language code preference for the verification message, set as a IETF BCP 47 language code.",
          "type": "string"
        },
        "endpoints": {
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo"
          },
          "type": "array",
          "description": "Optional. Endpoints that can be used for identity verification."
        },
        "username": {
          "type": "string",
          "deprecated": true,
          "description": "Username of the account that is being verified. Deprecated. Customers should now provide the `account_id` field in `event.user_info`."
        }
      },
      "description": "Information about account verification, used for identity verification.",
      "id": "GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo"
    },
    "GoogleCloudRecaptchaenterpriseV1UserInfo": {
      "id": "GoogleCloudRecaptchaenterpriseV1UserInfo",
      "description": "User information associated with a request protected by reCAPTCHA Enterprise.",
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "Optional. For logged-in requests or login/registration requests, the unique account identifier associated with this user. You can use the username if it is stable (meaning it is the same for every request associated with the same user), or any stable user ID of your choice. Leave blank for non logged-in actions or guest checkout."
        },
        "userIds": {
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1UserId"
          },
          "type": "array",
          "description": "Optional. Identifiers associated with this user or request."
        },
        "createAccountTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Optional. Creation time for this account associated with this user. Leave blank for non logged-in actions, guest checkout, or when there is no account associated with the current user."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest": {
      "description": "The request message to annotate an Assessment.",
      "properties": {
        "annotation": {
          "description": "Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.",
          "enum": [
            "ANNOTATION_UNSPECIFIED",
            "LEGITIMATE",
            "FRAUDULENT",
            "PASSWORD_CORRECT",
            "PASSWORD_INCORRECT"
          ],
          "enumDescriptions": [
            "Default unspecified type.",
            "Provides information that the event turned out to be legitimate.",
            "Provides information that the event turned out to be fraudulent.",
            "Provides information that the event was related to a login event in which the user typed the correct password. Deprecated, prefer indicating CORRECT_PASSWORD through the reasons field instead.",
            "Provides information that the event was related to a login event in which the user typed the incorrect password. Deprecated, prefer indicating INCORRECT_PASSWORD through the reasons field instead."
          ],
          "type": "string",
          "enumDeprecated": [
            false,
            false,
            false,
            true,
            true
          ]
        },
        "hashedAccountId": {
          "type": "string",
          "format": "byte",
          "description": "Optional. A stable hashed account identifier to apply to the assessment. This is an alternative to setting `hashed_account_id` in `CreateAssessment`, for example when a stable account identifier is not yet known in the initial request."
        },
        "accountId": {
          "type": "string",
          "description": "Optional. A stable account identifier to apply to the assessment. This is an alternative to setting `account_id` in `CreateAssessment`, for example when a stable account identifier is not yet known in the initial request."
        },
        "transactionEvent": {
          "description": "Optional. If the assessment is part of a payment transaction, provide details on payment lifecycle events that occur in the transaction.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionEvent"
        },
        "reasons": {
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default unspecified reason.",
              "Indicates that the transaction had a chargeback issued with no other details. When possible, specify the type by using CHARGEBACK_FRAUD or CHARGEBACK_DISPUTE instead.",
              "Indicates that the transaction had a chargeback issued related to an alleged unauthorized transaction from the cardholder's perspective (for example, the card number was stolen).",
              "Indicates that the transaction had a chargeback issued related to the cardholder having provided their card details but allegedly not being satisfied with the purchase (for example, misrepresentation, attempted cancellation).",
              "Indicates that the completed payment transaction was refunded by the seller.",
              "Indicates that the completed payment transaction was determined to be fraudulent by the seller, and was cancelled and refunded as a result.",
              "Indicates that the payment transaction was accepted, and the user was charged.",
              "Indicates that the payment transaction was declined, for example due to invalid card details.",
              "Indicates the transaction associated with the assessment is suspected of being fraudulent based on the payment method, billing details, shipping address or other transaction information.",
              "Indicates that the user was served a 2FA challenge. An old assessment with `ENUM_VALUES.INITIATED_TWO_FACTOR` reason that has not been overwritten with `PASSED_TWO_FACTOR` is treated as an abandoned 2FA flow. This is equivalent to `FAILED_TWO_FACTOR`.",
              "Indicates that the user passed a 2FA challenge.",
              "Indicates that the user failed a 2FA challenge.",
              "Indicates the user provided the correct password.",
              "Indicates the user provided an incorrect password.",
              "Indicates that the user sent unwanted and abusive messages to other users of the platform, such as spam, scams, phishing, or social engineering."
            ],
            "enum": [
              "REASON_UNSPECIFIED",
              "CHARGEBACK",
              "CHARGEBACK_FRAUD",
              "CHARGEBACK_DISPUTE",
              "REFUND",
              "REFUND_FRAUD",
              "TRANSACTION_ACCEPTED",
              "TRANSACTION_DECLINED",
              "PAYMENT_HEURISTICS",
              "INITIATED_TWO_FACTOR",
              "PASSED_TWO_FACTOR",
              "FAILED_TWO_FACTOR",
              "CORRECT_PASSWORD",
              "INCORRECT_PASSWORD",
              "SOCIAL_SPAM"
            ]
          },
          "description": "Optional. Reasons for the annotation that are assigned to the event."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification": {
      "properties": {
        "reencryptedUserCredentialsHash": {
          "type": "string",
          "format": "byte",
          "description": "Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field. It is used to match potential password leaks within `encrypted_leak_match_prefixes`.",
          "readOnly": true
        },
        "encryptedUserCredentialsHash": {
          "type": "string",
          "description": "Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by the server and returned through `reencrypted_user_credentials_hash`.",
          "format": "byte"
        },
        "lookupHashPrefix": {
          "type": "string",
          "format": "byte",
          "description": "Required. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used to look up password leaks associated with that hash prefix."
        },
        "encryptedLeakMatchPrefixes": {
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "Output only. List of prefixes of the encrypted potential password leaks that matched the given parameters. They must be compared with the client-side decryption prefix of `reencrypted_user_credentials_hash`",
          "type": "array",
          "readOnly": true
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification",
      "description": "Private password leak verification info.",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1Metrics": {
      "type": "object",
      "description": "Metrics for a single Key.",
      "properties": {
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Inclusive start time aligned to a day (UTC)."
        },
        "challengeMetrics": {
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics"
          },
          "type": "array",
          "description": "Metrics will be continuous and in order by dates, and in the granularity of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have challenge-based data."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Identifier. The name of the metrics, in the format `projects/{project}/keys/{key}/metrics`."
        },
        "scoreMetrics": {
          "description": "Metrics will be continuous and in order by dates, and in the granularity of day. All Key types should have score-based data.",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreMetrics"
          },
          "type": "array"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1Metrics"
    },
    "GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo": {
      "id": "GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo",
      "type": "object",
      "description": "Details about the transaction from the gateway.",
      "properties": {
        "cvvResponseCode": {
          "type": "string",
          "description": "Optional. CVV response code from the gateway (available only when reCAPTCHA Enterprise is called after authorization)."
        },
        "name": {
          "type": "string",
          "description": "Optional. Name of the gateway service (for example, stripe, square, paypal)."
        },
        "avsResponseCode": {
          "description": "Optional. AVS response code from the gateway (available only when reCAPTCHA Enterprise is called after authorization).",
          "type": "string"
        },
        "gatewayResponseCode": {
          "description": "Optional. Gateway response code describing the state of the transaction.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict": {
      "type": "object",
      "properties": {
        "trust": {
          "readOnly": true,
          "format": "float",
          "type": "number",
          "description": "Output only. Probability of this transaction attempt being executed in a behaviorally trustworthy way. Values are from 0.0 (lowest) to 1.0 (highest)."
        }
      },
      "description": "Information about behavioral trust of the transaction.",
      "id": "GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict"
    },
    "GoogleCloudRecaptchaenterpriseV1Event": {
      "id": "GoogleCloudRecaptchaenterpriseV1Event",
      "type": "object",
      "description": "The event being assessed.",
      "properties": {
        "headers": {
          "description": "Optional. HTTP header information about the request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userAgent": {
          "type": "string",
          "description": "Optional. The user agent present in the request from the user's device related to this event."
        },
        "wafTokenAssessment": {
          "description": "Optional. Flag for running WAF token assessment. If enabled, the token must be specified, and have been created by a WAF-enabled key.",
          "type": "boolean"
        },
        "express": {
          "type": "boolean",
          "description": "Optional. Flag for a reCAPTCHA express request for an assessment without a token. If enabled, `site_key` must reference a SCORE key with WAF feature set to EXPRESS."
        },
        "userIpAddress": {
          "description": "Optional. The IP address in the request from the user's device related to this event.",
          "type": "string"
        },
        "expectedAction": {
          "description": "Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha enterprise.",
          "type": "string"
        },
        "transactionData": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1TransactionData",
          "description": "Optional. Data describing a payment transaction to be assessed. Sending this data enables reCAPTCHA Enterprise Fraud Prevention and the FraudPreventionAssessment component in the response."
        },
        "userInfo": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1UserInfo",
          "description": "Optional. Information about the user that generates this event, when they can be identified. They are often identified through the use of an account for logged-in requests or login/registration requests, or by providing user identifiers for guest actions like checkout."
        },
        "ja3": {
          "description": "Optional. JA3 fingerprint for SSL clients.",
          "type": "string"
        },
        "siteKey": {
          "type": "string",
          "description": "Optional. The site key that was used to invoke reCAPTCHA Enterprise on your site and generate the token."
        },
        "hashedAccountId": {
          "type": "string",
          "description": "Optional. Deprecated: use `user_info.account_id` instead. Unique stable hashed user identifier for the request. The identifier must be hashed using hmac-sha256 with stable secret.",
          "deprecated": true,
          "format": "byte"
        },
        "firewallPolicyEvaluation": {
          "description": "Optional. Flag for enabling firewall policy config assessment. If this flag is enabled, the firewall policy will be evaluated and a suggested firewall action will be returned in the response.",
          "type": "boolean"
        },
        "token": {
          "type": "string",
          "description": "Optional. The user response token provided by the reCAPTCHA Enterprise client-side integration on your site."
        },
        "requestedUri": {
          "type": "string",
          "description": "Optional. The URI resource the user requested that triggered an assessment."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse": {
      "description": "The response to a `SearchRelatedAccountGroupMemberships` call.",
      "properties": {
        "relatedAccountGroupMemberships": {
          "description": "The queried memberships.",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse"
    },
    "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings": {
      "id": "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings",
      "type": "object",
      "properties": {
        "supportNonGoogleAppStoreDistribution": {
          "type": "boolean",
          "description": "Optional. Set to true for keys that are used in an Android application that is available for download in app stores in addition to the Google Play Store."
        },
        "allowedPackageNames": {
          "type": "array",
          "description": "Optional. Android package names of apps allowed to use the key. Example: 'com.companyname.appname'",
          "items": {
            "type": "string"
          }
        },
        "allowAllPackageNames": {
          "type": "boolean",
          "description": "Optional. If set to true, allowed_package_names are not enforced."
        }
      },
      "description": "Settings specific to keys that can be used by Android apps."
    },
    "GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesResponse": {
      "type": "object",
      "properties": {},
      "description": "The reorder firewall policies response message.",
      "id": "GoogleCloudRecaptchaenterpriseV1ReorderFirewallPoliciesResponse"
    },
    "GoogleCloudRecaptchaenterpriseV1AppleDeveloperId": {
      "properties": {
        "teamId": {
          "type": "string",
          "description": "Required. The Apple team ID (10-character string) owning the provisioning profile used to build your application."
        },
        "keyId": {
          "description": "Required. The Apple developer key ID (10-character string).",
          "type": "string"
        },
        "privateKey": {
          "type": "string",
          "description": "Required. Input only. A private key (downloaded as a text file with a .p8 file extension) generated for your Apple Developer account. Ensure that Apple DeviceCheck is enabled for the private key."
        }
      },
      "description": "Contains fields that are required to perform Apple-specific integrity checks.",
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1AppleDeveloperId"
    },
    "GoogleCloudRecaptchaenterpriseV1TransactionEvent": {
      "id": "GoogleCloudRecaptchaenterpriseV1TransactionEvent",
      "type": "object",
      "properties": {
        "eventType": {
          "description": "Optional. The type of this transaction event.",
          "type": "string",
          "enumDescriptions": [
            "Default, unspecified event type.",
            "Indicates that the transaction is approved by the merchant. The accompanying reasons can include terms such as 'INHOUSE', 'ACCERTIFY', 'CYBERSOURCE', or 'MANUAL_REVIEW'.",
            "Indicates that the transaction is denied and concluded due to risks detected by the merchant. The accompanying reasons can include terms such as 'INHOUSE', 'ACCERTIFY', 'CYBERSOURCE', or 'MANUAL_REVIEW'.",
            "Indicates that the transaction is being evaluated by a human, due to suspicion or risk.",
            "Indicates that the authorization attempt with the card issuer succeeded.",
            "Indicates that the authorization attempt with the card issuer failed. The accompanying reasons can include Visa's '54' indicating that the card is expired, or '82' indicating that the CVV is incorrect.",
            "Indicates that the transaction is completed because the funds were settled.",
            "Indicates that the transaction could not be completed because the funds were not settled.",
            "Indicates that the transaction has been canceled. Specify the reason for the cancellation. For example, 'INSUFFICIENT_INVENTORY'.",
            "Indicates that the merchant has received a chargeback inquiry due to fraud for the transaction, requesting additional information before a fraud chargeback is officially issued and a formal chargeback notification is sent.",
            "Indicates that the merchant has received a chargeback alert due to fraud for the transaction. The process of resolving the dispute without involving the payment network is started.",
            "Indicates that a fraud notification is issued for the transaction, sent by the payment instrument's issuing bank because the transaction appears to be fraudulent. We recommend including TC40 or SAFE data in the `reason` field for this event type. For partial chargebacks, we recommend that you include an amount in the `value` field.",
            "Indicates that the merchant is informed by the payment network that the transaction has entered the chargeback process due to fraud. Reason code examples include Discover's '6005' and '6041'. For partial chargebacks, we recommend that you include an amount in the `value` field.",
            "Indicates that the transaction has entered the chargeback process due to fraud, and that the merchant has chosen to enter representment. Reason examples include Discover's '6005' and '6041'. For partial chargebacks, we recommend that you include an amount in the `value` field.",
            "Indicates that the transaction has had a fraud chargeback which was illegitimate and was reversed as a result. For partial chargebacks, we recommend that you include an amount in the `value` field.",
            "Indicates that the merchant has received a refund for a completed transaction. For partial refunds, we recommend that you include an amount in the `value` field. Reason example: 'TAX_EXEMPT' (partial refund of exempt tax)",
            "Indicates that the merchant has received a refund request for this transaction, but that they have declined it. For partial refunds, we recommend that you include an amount in the `value` field. Reason example: 'TAX_EXEMPT' (partial refund of exempt tax)",
            "Indicates that the completed transaction was refunded by the merchant. For partial refunds, we recommend that you include an amount in the `value` field. Reason example: 'TAX_EXEMPT' (partial refund of exempt tax)",
            "Indicates that the completed transaction was refunded by the merchant, and that this refund was reversed. For partial refunds, we recommend that you include an amount in the `value` field."
          ],
          "enum": [
            "TRANSACTION_EVENT_TYPE_UNSPECIFIED",
            "MERCHANT_APPROVE",
            "MERCHANT_DENY",
            "MANUAL_REVIEW",
            "AUTHORIZATION",
            "AUTHORIZATION_DECLINE",
            "PAYMENT_CAPTURE",
            "PAYMENT_CAPTURE_DECLINE",
            "CANCEL",
            "CHARGEBACK_INQUIRY",
            "CHARGEBACK_ALERT",
            "FRAUD_NOTIFICATION",
            "CHARGEBACK",
            "CHARGEBACK_REPRESENTMENT",
            "CHARGEBACK_REVERSE",
            "REFUND_REQUEST",
            "REFUND_DECLINE",
            "REFUND",
            "REFUND_REVERSE"
          ]
        },
        "eventTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of the API call."
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "Optional. The value that corresponds with this transaction event, if one exists. For example, a refund event where $5.00 was refunded. Currency is obtained from the original transaction data."
        },
        "reason": {
          "type": "string",
          "description": "Optional. The reason or standardized code that corresponds with this transaction event, if one exists. For example, a CHARGEBACK event with code 6005."
        }
      },
      "description": "Describes an event in the lifecycle of a payment transaction."
    }
  },
  "title": "reCAPTCHA Enterprise API",
  "servicePath": ""
}

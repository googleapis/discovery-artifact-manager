{
  "ownerDomain": "google.com",
  "baseUrl": "https://recaptchaenterprise.googleapis.com/",
  "canonicalName": "Recaptcha Enterprise",
  "version_module": true,
  "batchPath": "batch",
  "servicePath": "",
  "fullyEncodeReservedExpansion": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "rootUrl": "https://recaptchaenterprise.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "revision": "20220722",
  "id": "recaptchaenterprise:v1",
  "discoveryVersion": "v1",
  "mtlsRootUrl": "https://recaptchaenterprise.mtls.googleapis.com/",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "name": "recaptchaenterprise",
  "parameters": {
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ]
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "alt": {
      "default": "json",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response."
    }
  },
  "schemas": {
    "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse": {
      "properties": {},
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse",
      "description": "Empty response for AnnotateAssessment."
    },
    "GoogleCloudRecaptchaenterpriseV1WafSettings": {
      "properties": {
        "wafFeature": {
          "enum": [
            "WAF_FEATURE_UNSPECIFIED",
            "CHALLENGE_PAGE",
            "SESSION_TOKEN",
            "ACTION_TOKEN"
          ],
          "enumDescriptions": [
            "Undefined feature.",
            "Redirects suspicious traffic to reCAPTCHA.",
            "Use reCAPTCHA session-tokens to protect the whole user session on the site's domain.",
            "Use reCAPTCHA action-tokens to protect user actions."
          ],
          "description": "Required. The WAF feature for which this key is enabled.",
          "type": "string"
        },
        "wafService": {
          "type": "string",
          "description": "Required. The WAF service that uses this key.",
          "enum": [
            "WAF_SERVICE_UNSPECIFIED",
            "CA"
          ],
          "enumDescriptions": [
            "Undefined WAF",
            "Cloud Armor"
          ]
        }
      },
      "description": "Settings specific to keys that can be used for WAF (Web Application Firewall).",
      "id": "GoogleCloudRecaptchaenterpriseV1WafSettings",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification": {
      "type": "object",
      "description": "Private password leak verification info.",
      "id": "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification",
      "properties": {
        "encryptedUserCredentialsHash": {
          "description": "Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by the server and returned through `reencrypted_user_credentials_hash`.",
          "format": "byte",
          "type": "string"
        },
        "lookupHashPrefix": {
          "type": "string",
          "description": "Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used to look up password leaks associated with that hash prefix.",
          "format": "byte"
        },
        "encryptedLeakMatchPrefixes": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. List of prefixes of the encrypted potential password leaks that matched the given parameters. They should be compared with the client-side decryption prefix of `reencrypted_user_credentials_hash`",
          "items": {
            "format": "byte",
            "type": "string"
          }
        },
        "reencryptedUserCredentialsHash": {
          "type": "string",
          "description": "Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field. Used to match potential password leaks within `encrypted_leak_match_prefixes`.",
          "readOnly": true,
          "format": "byte"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1Event": {
      "id": "GoogleCloudRecaptchaenterpriseV1Event",
      "type": "object",
      "properties": {
        "expectedAction": {
          "description": "Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha enterprise.",
          "type": "string"
        },
        "userIpAddress": {
          "description": "Optional. The IP address in the request from the user's device related to this event.",
          "type": "string"
        },
        "token": {
          "description": "Optional. The user response token provided by the reCAPTCHA client-side integration on your site.",
          "type": "string"
        },
        "siteKey": {
          "description": "Optional. The site key that was used to invoke reCAPTCHA on your site and generate the token.",
          "type": "string"
        },
        "hashedAccountId": {
          "type": "string",
          "description": "Optional. Optional unique stable hashed user identifier for the request. The identifier should ideally be hashed using sha256 with stable secret.",
          "format": "byte"
        },
        "userAgent": {
          "type": "string",
          "description": "Optional. The user agent present in the request from the user's device related to this event."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RiskAnalysis": {
      "id": "GoogleCloudRecaptchaenterpriseV1RiskAnalysis",
      "description": "Risk analysis result for an event.",
      "type": "object",
      "properties": {
        "reasons": {
          "items": {
            "type": "string",
            "enum": [
              "CLASSIFICATION_REASON_UNSPECIFIED",
              "AUTOMATION",
              "UNEXPECTED_ENVIRONMENT",
              "TOO_MUCH_TRAFFIC",
              "UNEXPECTED_USAGE_PATTERNS",
              "LOW_CONFIDENCE_SCORE"
            ],
            "enumDescriptions": [
              "Default unspecified type.",
              "Interactions matched the behavior of an automated agent.",
              "The event originated from an illegitimate environment.",
              "Traffic volume from the event source is higher than normal.",
              "Interactions with the site were significantly different than expected patterns.",
              "Too little traffic has been received from this site thus far to generate quality risk analysis."
            ]
          },
          "type": "array",
          "description": "Reasons contributing to the risk analysis verdict."
        },
        "score": {
          "format": "float",
          "type": "number",
          "description": "Legitimate event score from 0.0 to 1.0. (1.0 means very likely legitimate traffic while 0.0 means very likely non-legitimate traffic)."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse": {
      "properties": {
        "legacySecretKey": {
          "description": "The secret key (also known as shared secret) authorizes communication between your application backend and the reCAPTCHA Enterprise server to create an assessment. The secret key needs to be kept safe for security purposes.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Secret key used in legacy reCAPTCHA only. Should be used when integrating with a 3rd party which is still using legacy reCAPTCHA.",
      "id": "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse"
    },
    "GoogleCloudRecaptchaenterpriseV1ScoreMetrics": {
      "description": "Metrics related to scoring.",
      "type": "object",
      "properties": {
        "actionMetrics": {
          "additionalProperties": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution"
          },
          "type": "object",
          "description": "Action-based metrics. The map key is the action name which specified by the site owners at time of the \"execute\" client-side call. Populated only for SCORE keys."
        },
        "overallMetrics": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution",
          "description": "Aggregated score metrics for all traffic."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1ScoreMetrics"
    },
    "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest": {
      "properties": {
        "pageToken": {
          "type": "string",
          "description": "Optional. A page token, received from a previous `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchRelatedAccountGroupMemberships` must match the call that provided the page token."
        },
        "pageSize": {
          "type": "integer",
          "description": "Optional. The maximum number of groups to return. The service may return fewer than this value. If unspecified, at most 50 groups will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.",
          "format": "int32"
        },
        "hashedAccountId": {
          "description": "Optional. The unique stable hashed user identifier we should search connections to. The identifier should correspond to a `hashed_account_id` provided in a previous CreateAssessment or AnnotateAssessment call.",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest",
      "type": "object",
      "description": "The request message to search related account group memberships."
    },
    "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest": {
      "description": "The request message to annotate an Assessment.",
      "id": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest",
      "type": "object",
      "properties": {
        "annotation": {
          "enumDescriptions": [
            "Default unspecified type.",
            "Provides information that the event turned out to be legitimate.",
            "Provides information that the event turned out to be fraudulent.",
            "Provides information that the event was related to a login event in which the user typed the correct password. Deprecated, prefer indicating CORRECT_PASSWORD through the reasons field instead.",
            "Provides information that the event was related to a login event in which the user typed the incorrect password. Deprecated, prefer indicating INCORRECT_PASSWORD through the reasons field instead."
          ],
          "enum": [
            "ANNOTATION_UNSPECIFIED",
            "LEGITIMATE",
            "FRAUDULENT",
            "PASSWORD_CORRECT",
            "PASSWORD_INCORRECT"
          ],
          "description": "Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.",
          "type": "string"
        },
        "reasons": {
          "description": "Optional. Optional reasons for the annotation that will be assigned to the Event.",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default unspecified reason.",
              "Indicates a chargeback issued for the transaction with no other details. When possible, specify the type by using CHARGEBACK_FRAUD or CHARGEBACK_DISPUTE instead.",
              "Indicates a chargeback related to an alleged unauthorized transaction from the cardholder's perspective (for example, the card number was stolen).",
              "Indicates a chargeback related to the cardholder having provided their card details but allegedly not being satisfied with the purchase (for example, misrepresentation, attempted cancellation).",
              "Indicates a completed payment transaction was refunded by the seller.",
              "Indicates a completed payment transaction was determined to be fraudulent by the seller, and was cancelled and refunded as a result.",
              "Indicates the transaction associated with the assessment is suspected of being fraudulent based on the payment method, billing details, shipping address or other transaction information.",
              "Indicates that the user was served a 2FA challenge. An old assessment with `ENUM_VALUES.INITIATED_TWO_FACTOR` reason that has not been overwritten with `PASSED_TWO_FACTOR` is treated as an abandoned 2FA flow. This is equivalent to `FAILED_TWO_FACTOR`.",
              "Indicates that the user passed a 2FA challenge.",
              "Indicates that the user failed a 2FA challenge.",
              "Indicates the user provided the correct password.",
              "Indicates the user provided an incorrect password."
            ],
            "enum": [
              "REASON_UNSPECIFIED",
              "CHARGEBACK",
              "CHARGEBACK_FRAUD",
              "CHARGEBACK_DISPUTE",
              "REFUND",
              "REFUND_FRAUD",
              "PAYMENT_HEURISTICS",
              "INITIATED_TWO_FACTOR",
              "PASSED_TWO_FACTOR",
              "FAILED_TWO_FACTOR",
              "CORRECT_PASSWORD",
              "INCORRECT_PASSWORD"
            ]
          },
          "type": "array"
        },
        "hashedAccountId": {
          "format": "byte",
          "type": "string",
          "description": "Optional. Optional unique stable hashed user identifier to apply to the assessment. This is an alternative to setting the hashed_account_id in CreateAssessment, for example when the account identifier is not yet known in the initial request. It is recommended that the identifier is hashed using hmac-sha256 with stable secret."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse",
      "type": "object",
      "description": "The response to a `ListRelatedAccountGroups` call.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "relatedAccountGroups": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup"
          },
          "description": "The groups of related accounts listed by the query."
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics": {
      "properties": {
        "passedCount": {
          "description": "Count of nocaptchas (successful verification without a challenge) plus submitted challenge solutions that were correct and resulted in verification.",
          "format": "int64",
          "type": "string"
        },
        "failedCount": {
          "type": "string",
          "description": "Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such that a subsequent challenge was triggered.",
          "format": "int64"
        },
        "nocaptchaCount": {
          "type": "string",
          "format": "int64",
          "description": "Count of nocaptchas (successful verification without a challenge) issued."
        },
        "pageloadCount": {
          "format": "int64",
          "type": "string",
          "description": "Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of pageloads for pages that include reCAPTCHA."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics",
      "type": "object",
      "description": "Metrics related to challenges."
    },
    "GoogleCloudRecaptchaenterpriseV1TestingOptions": {
      "description": "Options for user acceptance testing.",
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1TestingOptions",
      "properties": {
        "testingScore": {
          "type": "number",
          "format": "float",
          "description": "All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive."
        },
        "testingChallenge": {
          "description": "For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.",
          "type": "string",
          "enum": [
            "TESTING_CHALLENGE_UNSPECIFIED",
            "NOCAPTCHA",
            "UNSOLVABLE_CHALLENGE"
          ],
          "enumDescriptions": [
            "Perform the normal risk analysis and return either nocaptcha or a challenge depending on risk and trust factors.",
            "Challenge requests for this key always return a nocaptcha, which does not require a solution.",
            "Challenge requests for this key always return an unsolvable challenge."
          ]
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1IOSKeySettings": {
      "id": "GoogleCloudRecaptchaenterpriseV1IOSKeySettings",
      "properties": {
        "allowAllBundleIds": {
          "description": "If set to true, allowed_bundle_ids are not enforced.",
          "type": "boolean"
        },
        "allowedBundleIds": {
          "description": "iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Settings specific to keys that can be used by iOS apps.",
      "type": "object"
    },
    "GoogleProtobufEmpty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "GoogleProtobufEmpty",
      "type": "object",
      "properties": {}
    },
    "GoogleCloudRecaptchaenterpriseV1Metrics": {
      "id": "GoogleCloudRecaptchaenterpriseV1Metrics",
      "properties": {
        "scoreMetrics": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreMetrics"
          },
          "description": "Metrics will be continuous and in order by dates, and in the granularity of day. All Key types should have score-based data."
        },
        "challengeMetrics": {
          "description": "Metrics will be continuous and in order by dates, and in the granularity of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have challenge-based data.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics"
          }
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The name of the metrics, in the format \"projects/{project}/keys/{key}/metrics\"."
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Inclusive start time aligned to a day (UTC)."
        }
      },
      "type": "object",
      "description": "Metrics for a single Key."
    },
    "GoogleCloudRecaptchaenterpriseV1ListKeysResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1ListKeysResponse",
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
          },
          "description": "Key details."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results. It is set to empty if no keys remain in results."
        }
      },
      "description": "Response to request to list keys in a project."
    },
    "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings": {
      "properties": {
        "allowAllPackageNames": {
          "description": "If set to true, allowed_package_names are not enforced.",
          "type": "boolean"
        },
        "allowedPackageNames": {
          "type": "array",
          "description": "Android package names of apps allowed to use the key. Example: 'com.companyname.appname'",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Settings specific to keys that can be used by Android apps.",
      "id": "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1Assessment": {
      "properties": {
        "event": {
          "description": "The event being assessed.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1Event"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The resource name for the Assessment in the format \"projects/{project}/assessments/{assessment}\"."
        },
        "tokenProperties": {
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1TokenProperties",
          "description": "Output only. Properties of the provided event token."
        },
        "riskAnalysis": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1RiskAnalysis",
          "description": "Output only. The risk analysis result for the event being assessed.",
          "readOnly": true
        },
        "accountDefenderAssessment": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment",
          "description": "Assessment returned by Account Defender when a hashed_account_id is provided."
        },
        "privatePasswordLeakVerification": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification",
          "description": "The private password leak verification field contains the parameters used to check for leaks privately without sharing user credentials."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1Assessment",
      "type": "object",
      "description": "A recaptcha assessment resource."
    },
    "GoogleCloudRecaptchaenterpriseV1Key": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name for the Key in the format \"projects/{project}/keys/{key}\"."
        },
        "testingOptions": {
          "description": "Options for user acceptance testing.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1TestingOptions"
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name of this key. Modifiable by user."
        },
        "iosSettings": {
          "description": "Settings for keys that can be used by iOS apps.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1IOSKeySettings"
        },
        "createTime": {
          "description": "The timestamp corresponding to the creation of this Key.",
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "See Creating and managing labels."
        },
        "androidSettings": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings",
          "description": "Settings for keys that can be used by Android apps."
        },
        "wafSettings": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1WafSettings",
          "description": "Settings for WAF"
        },
        "webSettings": {
          "$ref": "GoogleCloudRecaptchaenterpriseV1WebKeySettings",
          "description": "Settings for keys that can be used by websites."
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1Key",
      "description": "A key used to identify and configure applications (web and/or mobile) that use reCAPTCHA Enterprise."
    },
    "GoogleCloudRecaptchaenterpriseV1ScoreDistribution": {
      "id": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution",
      "description": "Score distribution.",
      "type": "object",
      "properties": {
        "scoreBuckets": {
          "description": "Map key is score value multiplied by 100. The scores are discrete values between [0, 1]. The maximum number of buckets is on order of a few dozen, but typically much lower (ie. 10).",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "type": "object"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1WebKeySettings": {
      "description": "Settings specific to keys that can be used by websites.",
      "id": "GoogleCloudRecaptchaenterpriseV1WebKeySettings",
      "properties": {
        "allowAmpTraffic": {
          "type": "boolean",
          "description": "If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type."
        },
        "allowedDomains": {
          "type": "array",
          "description": "Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'",
          "items": {
            "type": "string"
          }
        },
        "allowAllDomains": {
          "type": "boolean",
          "description": "If set to true, it means allowed_domains will not be enforced."
        },
        "challengeSecurityPreference": {
          "enumDescriptions": [
            "Default type that indicates this enum hasn't been specified.",
            "Key tends to show fewer and easier challenges.",
            "Key tends to show balanced (in amount and difficulty) challenges.",
            "Key tends to show more and harder challenges."
          ],
          "enum": [
            "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED",
            "USABILITY",
            "BALANCE",
            "SECURITY"
          ],
          "type": "string",
          "description": "Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE."
        },
        "integrationType": {
          "description": "Required. Describes how this key is integrated with the website.",
          "type": "string",
          "enum": [
            "INTEGRATION_TYPE_UNSPECIFIED",
            "SCORE",
            "CHECKBOX",
            "INVISIBLE"
          ],
          "enumDescriptions": [
            "Default type that indicates this enum hasn't been specified. This is not a valid IntegrationType, one of the other types must be specified instead.",
            "Only used to produce scores. It doesn't display the \"I'm not a robot\" checkbox and never shows captcha challenges.",
            "Displays the \"I'm not a robot\" checkbox and may show captcha challenges after it is checked.",
            "Doesn't display the \"I'm not a robot\" checkbox, but may show captcha challenges after risk analysis."
          ]
        }
      },
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment": {
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "enum": [
              "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED",
              "PROFILE_MATCH",
              "SUSPICIOUS_LOGIN_ACTIVITY",
              "SUSPICIOUS_ACCOUNT_CREATION",
              "RELATED_ACCOUNTS_NUMBER_HIGH"
            ],
            "enumDescriptions": [
              "Default unspecified type.",
              "The request matches a known good profile for the user.",
              "The request is potentially a suspicious login event and should be further verified either via multi-factor authentication or another system.",
              "The request matched a profile that previously had suspicious account creation behavior. This could mean this is a fake account.",
              "The account in the request has a high number of related accounts. It does not necessarily imply that the account is bad but could require investigating."
            ],
            "type": "string"
          },
          "description": "Labels for this request."
        }
      },
      "description": "Account Defender risk assessment.",
      "id": "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest": {
      "description": "The migrate key request message.",
      "type": "object",
      "properties": {},
      "id": "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest"
    },
    "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "relatedAccountGroupMemberships": {
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership"
          },
          "description": "The memberships listed by the query.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse",
      "description": "The response to a `ListRelatedAccountGroupMemberships` call."
    },
    "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The resource name for the related account group in the format `projects/{project}/relatedaccountgroups/{related_account_group}`."
        }
      },
      "description": "A group of related accounts.",
      "id": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup",
      "type": "object"
    },
    "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse": {
      "description": "The response to a `SearchRelatedAccountGroupMemberships` call.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "relatedAccountGroupMemberships": {
          "description": "The queried memberships.",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse"
    },
    "GoogleCloudRecaptchaenterpriseV1TokenProperties": {
      "type": "object",
      "id": "GoogleCloudRecaptchaenterpriseV1TokenProperties",
      "properties": {
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp corresponding to the generation of the token."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the page on which the token was generated."
        },
        "valid": {
          "description": "Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).",
          "type": "boolean"
        },
        "action": {
          "description": "Action name provided at token generation.",
          "type": "string"
        },
        "invalidReason": {
          "type": "string",
          "enum": [
            "INVALID_REASON_UNSPECIFIED",
            "UNKNOWN_INVALID_REASON",
            "MALFORMED",
            "EXPIRED",
            "DUPE",
            "MISSING",
            "BROWSER_ERROR"
          ],
          "description": "Reason associated with the response when valid = false.",
          "enumDescriptions": [
            "Default unspecified type.",
            "If the failure reason was not accounted for.",
            "The provided user verification token was malformed.",
            "The user verification token had expired.",
            "The user verification had already been seen.",
            "The user verification token was not present.",
            "A retriable error (such as network failure) occurred on the browser. Could easily be simulated by an attacker."
          ]
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The resource name for this membership in the format `projects/{project}/relatedaccountgroups/{relatedaccountgroup}/memberships/{membership}`."
        },
        "hashedAccountId": {
          "description": "The unique stable hashed user identifier of the member. The identifier corresponds to a `hashed_account_id` provided in a previous CreateAssessment or AnnotateAssessment call.",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership",
      "description": "A membership in a group of related accounts.",
      "type": "object"
    }
  },
  "basePath": "",
  "protocol": "rest",
  "resources": {
    "projects": {
      "resources": {
        "assessments": {
          "methods": {
            "annotate": {
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest"
              },
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/assessments/[^/]+$",
                  "required": true,
                  "description": "Required. The resource name of the Assessment, in the format \"projects/{project}/assessments/{assessment}\".",
                  "type": "string"
                }
              },
              "id": "recaptchaenterprise.projects.assessments.annotate",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse"
              },
              "flatPath": "v1/projects/{projectsId}/assessments/{assessmentsId}:annotate",
              "path": "v1/{+name}:annotate"
            },
            "create": {
              "parameters": {
                "parent": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Required. The name of the project in which the assessment will be created, in the format \"projects/{project}\".",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "recaptchaenterprise.projects.assessments.create",
              "description": "Creates an Assessment of the likelihood an event is legitimate.",
              "path": "v1/{+parent}/assessments",
              "httpMethod": "POST",
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Assessment"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Assessment"
              },
              "flatPath": "v1/projects/{projectsId}/assessments"
            }
          }
        },
        "relatedaccountgroupmemberships": {
          "methods": {
            "search": {
              "httpMethod": "POST",
              "parameterOrder": [
                "project"
              ],
              "flatPath": "v1/projects/{projectsId}/relatedaccountgroupmemberships:search",
              "id": "recaptchaenterprise.projects.relatedaccountgroupmemberships.search",
              "parameters": {
                "project": {
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "Required. The name of the project to search related account group memberships from, in the format \"projects/{project}\".",
                  "location": "path"
                }
              },
              "description": "Search group memberships related to a given account.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+project}/relatedaccountgroupmemberships:search",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse"
              }
            }
          }
        },
        "keys": {
          "methods": {
            "get": {
              "path": "v1/{+name}",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "description": "Required. The name of the requested key, in the format \"projects/{project}/keys/{key}\".",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "recaptchaenterprise.projects.keys.get",
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "description": "Returns the specified key.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              }
            },
            "migrate": {
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}:migrate",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "recaptchaenterprise.projects.keys.migrate",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the key to be migrated, in the format \"projects/{project}/keys/{key}\"."
                }
              },
              "path": "v1/{+name}:migrate",
              "description": "Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ]
            },
            "delete": {
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "httpMethod": "DELETE",
              "path": "v1/{+name}",
              "response": {
                "$ref": "GoogleProtobufEmpty"
              },
              "parameters": {
                "name": {
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "description": "Required. The name of the key to be deleted, in the format \"projects/{project}/keys/{key}\".",
                  "type": "string"
                }
              },
              "description": "Deletes the specified key.",
              "id": "recaptchaenterprise.projects.keys.delete",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "retrieveLegacySecretKey": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "key"
              ],
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}:retrieveLegacySecretKey",
              "parameters": {
                "key": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "description": "Required. The public key name linked to the requested secret key , in the format \"projects/{project}/keys/{key}\"."
                }
              },
              "path": "v1/{+key}:retrieveLegacySecretKey",
              "id": "recaptchaenterprise.projects.keys.retrieveLegacySecretKey",
              "description": "Returns the secret key related to the specified public key. You should use the legacy secret key only if you are integrating with a 3rd party using the legacy reCAPTCHA instead of reCAPTCHA Enterprise.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse"
              }
            },
            "patch": {
              "id": "recaptchaenterprise.projects.keys.patch",
              "description": "Updates the specified key.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "parameters": {
                "name": {
                  "description": "The resource name for the Key in the format \"projects/{project}/keys/{key}\".",
                  "pattern": "^projects/[^/]+/keys/[^/]+$",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "updateMask": {
                  "location": "query",
                  "description": "Optional. The mask to control which fields of the key get updated. If the mask is not present, all fields will be updated.",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "path": "v1/{+name}",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "description": "Returns the list of all keys that belong to a project.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListKeysResponse"
              },
              "path": "v1/{+parent}/keys",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "Optional. The next_page_token value returned from a previous. ListKeysRequest, if any.",
                  "location": "query"
                },
                "pageSize": {
                  "description": "Optional. The maximum number of keys to return. Default is 10. Max limit is 1000.",
                  "location": "query",
                  "format": "int32",
                  "type": "integer"
                },
                "parent": {
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the project that contains the keys that will be listed, in the format \"projects/{project}\"."
                }
              },
              "flatPath": "v1/projects/{projectsId}/keys",
              "id": "recaptchaenterprise.projects.keys.list"
            },
            "getMetrics": {
              "description": "Get some aggregated metrics for a Key. This data can be used to build dashboards.",
              "id": "recaptchaenterprise.projects.keys.getMetrics",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/keys/[^/]+/metrics$",
                  "required": true,
                  "location": "path",
                  "description": "Required. The name of the requested metrics, in the format \"projects/{project}/keys/{key}/metrics\".",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Metrics"
              },
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}/metrics",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/{+parent}/keys",
              "httpMethod": "POST",
              "id": "recaptchaenterprise.projects.keys.create",
              "parameters": {
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the project in which the key will be created, in the format \"projects/{project}\".",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "description": "Creates a new reCAPTCHA Enterprise key.",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "flatPath": "v1/projects/{projectsId}/keys",
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              }
            }
          }
        },
        "relatedaccountgroups": {
          "resources": {
            "memberships": {
              "methods": {
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/relatedaccountgroups/{relatedaccountgroupsId}/memberships",
                  "description": "Get the memberships in a group of related accounts.",
                  "response": {
                    "$ref": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse"
                  },
                  "path": "v1/{+parent}/memberships",
                  "parameters": {
                    "parent": {
                      "description": "Required. The resource name for the related account group in the format `projects/{project}/relatedaccountgroups/{relatedaccountgroup}`.",
                      "pattern": "^projects/[^/]+/relatedaccountgroups/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Optional. The maximum number of accounts to return. The service may return fewer than this value. If unspecified, at most 50 accounts will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Optional. A page token, received from a previous `ListRelatedAccountGroupMemberships` call. When paginating, all other parameters provided to `ListRelatedAccountGroupMemberships` must match the call that provided the page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "id": "recaptchaenterprise.projects.relatedaccountgroups.memberships.list",
                  "httpMethod": "GET"
                }
              }
            }
          },
          "methods": {
            "list": {
              "parameters": {
                "pageSize": {
                  "description": "Optional. The maximum number of groups to return. The service may return fewer than this value. If unspecified, at most 50 groups will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "parent": {
                  "description": "Required. The name of the project to list related account groups from, in the format \"projects/{project}\".",
                  "type": "string",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "description": "Optional. A page token, received from a previous `ListRelatedAccountGroups` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRelatedAccountGroups` must match the call that provided the page token.",
                  "location": "query"
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "List groups of related accounts.",
              "parameterOrder": [
                "parent"
              ],
              "path": "v1/{+parent}/relatedaccountgroups",
              "id": "recaptchaenterprise.projects.relatedaccountgroups.list",
              "flatPath": "v1/projects/{projectsId}/relatedaccountgroups"
            }
          }
        }
      }
    }
  },
  "documentationLink": "https://cloud.google.com/recaptcha-enterprise/",
  "description": "",
  "title": "reCAPTCHA Enterprise API",
  "version": "v1"
}

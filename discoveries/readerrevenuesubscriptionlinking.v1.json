{
  "protocol": "rest",
  "rootUrl": "https://readerrevenuesubscriptionlinking.googleapis.com/",
  "ownerDomain": "google.com",
  "fullyEncodeReservedExpansion": true,
  "title": "Reader Revenue Subscription Linking API",
  "mtlsRootUrl": "https://readerrevenuesubscriptionlinking.mtls.googleapis.com/",
  "description": "readerrevenuesubscriptionlinking.googleapis.com API.",
  "batchPath": "batch",
  "kind": "discovery#restDescription",
  "resources": {
    "publications": {
      "resources": {
        "readers": {
          "methods": {
            "updateEntitlements": {
              "path": "v1/{+name}",
              "response": {
                "$ref": "ReaderEntitlements"
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "ReaderEntitlements"
              },
              "parameters": {
                "name": {
                  "description": "Output only. The resource name of the singleton.",
                  "required": true,
                  "type": "string",
                  "pattern": "^publications/[^/]+/readers/[^/]+/entitlements$",
                  "location": "path"
                },
                "updateMask": {
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask",
                  "description": "Optional. The list of fields to update. Defaults to all fields."
                }
              },
              "id": "readerrevenuesubscriptionlinking.publications.readers.updateEntitlements",
              "flatPath": "v1/publications/{publicationsId}/readers/{readersId}/entitlements",
              "parameterOrder": [
                "name"
              ],
              "description": "Updates the reader entitlements for a publication reader. The entire reader entitlements will be overwritten by the new reader entitlements in the payload, like a PUT. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist."
            },
            "getEntitlements": {
              "flatPath": "v1/publications/{publicationsId}/readers/{readersId}/entitlements",
              "id": "readerrevenuesubscriptionlinking.publications.readers.getEntitlements",
              "httpMethod": "GET",
              "description": "Gets the reader entitlements for a publication reader. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist.",
              "parameters": {
                "name": {
                  "description": "Required. The name of the reader entitlements to retrieve. Format: publications/{publication_id}/readers/{reader_id}/entitlements",
                  "pattern": "^publications/[^/]+/readers/[^/]+/entitlements$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "response": {
                "$ref": "ReaderEntitlements"
              },
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}"
            },
            "get": {
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/publications/{publicationsId}/readers/{readersId}",
              "response": {
                "$ref": "Reader"
              },
              "httpMethod": "GET",
              "id": "readerrevenuesubscriptionlinking.publications.readers.get",
              "path": "v1/{+name}",
              "description": "Gets a reader of a publication. Returns NOT_FOUND if the reader does not exist.",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}",
                  "required": true,
                  "pattern": "^publications/[^/]+/readers/[^/]+$",
                  "location": "path"
                }
              }
            },
            "delete": {
              "response": {
                "$ref": "DeleteReaderResponse"
              },
              "description": "Removes a publication reader, effectively severing the association with a Google user. If `force` is set to true, any entitlements for this reader will also be deleted. (Otherwise, the request will only work if the reader has no entitlements.) - If the reader does not exist, return NOT_FOUND. - Return FAILED_PRECONDITION if the force field is false (or unset) and entitlements are present.",
              "httpMethod": "DELETE",
              "id": "readerrevenuesubscriptionlinking.publications.readers.delete",
              "parameters": {
                "force": {
                  "description": "If set to true, any entitlements under the reader will also be purged.",
                  "type": "boolean",
                  "location": "query"
                },
                "name": {
                  "required": true,
                  "description": "Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}",
                  "location": "path",
                  "pattern": "^publications/[^/]+/readers/[^/]+$",
                  "type": "string"
                }
              },
              "path": "v1/{+name}",
              "flatPath": "v1/publications/{publicationsId}/readers/{readersId}",
              "parameterOrder": [
                "name"
              ]
            }
          }
        }
      }
    }
  },
  "schemas": {
    "Entitlement": {
      "description": "A single entitlement for a publication reader",
      "type": "object",
      "id": "Entitlement",
      "properties": {
        "productId": {
          "description": "Required. The publication's product ID that the user has access to. This is the same product ID as can be found in Schema.org markup (http://schema.org/productID). E.g. \"dailybugle.com:basic\"",
          "type": "string"
        },
        "expireTime": {
          "type": "string",
          "description": "Required. Expiration time of the entitlement. Entitlements that have expired over 30 days will be purged. Required. LINT.IfChange(expire_time) The max expire_time is 398 days from now(). LINT.ThenChange(//depot/google3/java/com/google/subscribewithgoogle/accountlinking/subscriptionlink/service/config/protoconf.pi:max_expiry_age)",
          "format": "google-datetime"
        },
        "subscriptionToken": {
          "description": "A source-specific subscription token. This is an opaque string that the publisher provides to Google. This token is opaque and has no meaning to Google.",
          "type": "string"
        },
        "detail": {
          "description": "The detail field can carry a description of the SKU that corresponds to what the user has been granted access to. This description, which is opaque to Google, can be displayed in the Google user subscription console for users who linked the subscription to a Google Account. Max 80 character limit.",
          "type": "string"
        }
      }
    },
    "ReaderEntitlements": {
      "id": "ReaderEntitlements",
      "properties": {
        "name": {
          "description": "Output only. The resource name of the singleton.",
          "readOnly": true,
          "type": "string"
        },
        "entitlements": {
          "type": "array",
          "description": "All of the entitlements for a publication reader.",
          "items": {
            "$ref": "Entitlement"
          }
        }
      },
      "description": "A singleton containing all of a reader's entitlements for a publication.",
      "type": "object"
    },
    "Reader": {
      "properties": {
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The resource name of the reader. The last part of ppid in the resource name is the publisher provided id."
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time the publication reader was created and associated with a Google user."
        }
      },
      "description": "A reader of a publication.",
      "id": "Reader",
      "type": "object"
    },
    "DeleteReaderResponse": {
      "type": "object",
      "description": "Response to deleting a reader of a publication.",
      "id": "DeleteReaderResponse",
      "properties": {}
    }
  },
  "revision": "20230216",
  "baseUrl": "https://readerrevenuesubscriptionlinking.googleapis.com/",
  "documentationLink": "https://developers.google.com/news/subscribe/subscription-linking/overview",
  "canonicalName": "Subscription Linking",
  "version": "v1",
  "version_module": true,
  "id": "readerrevenuesubscriptionlinking:v1",
  "name": "readerrevenuesubscriptionlinking",
  "basePath": "",
  "discoveryVersion": "v1",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "parameters": {
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "description": "V1 error format.",
      "type": "string"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks."
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    }
  },
  "servicePath": "",
  "ownerName": "Google"
}

import glob
import json
import os
import subprocess
from subprocess import call

call(['./gradlew', 'discoJar'], cwd='toolkit')

call(['mkdir', '-p', 'discoveries'])

ddoc_file = 'discoveries/compute.v1.json'
ddoc_url = 'https://content.googleapis.com/discovery/v1/apis/compute/v1/rest'

call(['wget', '-O', ddoc_file, ddoc_url])

name, version, revision = '', '', ''
with open(ddoc_file) as file_:
    root = json.load(file_)
    name, version, revision = root['name'], root['version'], root['revision']

dir_ = 'autogenerated/{}/{}/{}'.format(name, version, revision)

if not os.path.exists(dir_):
    os.makedirs(dir_)

ovr_arg = ''
dv_ovr_path = '{}/compute.v1.override1.json'.format(dir_)
call(['python', 'gen_ovr.py', 'discoveries/compute.v1.json',
      '--output', dv_ovr_path])
ovr_arg += dv_ovr_path + ','

ovr_path = 'discoveries/compute.v1.override.json'
orig_ovr_path = '{}/compute.v1.override2.json'.format(dir_)
ovr_suffix = '2'
if os.path.isfile(ovr_path):
    call(['cp', ovr_path, orig_ovr_path])
    ovr_arg += orig_ovr_path + ','
    ovr_suffix = '3'

auth_ovr = {
  'csharp|go|java|js|nodejs|php|python|ruby': {
    'authType': 'NONE'
  },
  'js|python': {
    'discoveryDocUrl': 'http://localhost:5000/static/{}.{}.json'.format(name, version)
  }
}
auth_ovr_path = '{}/compute.v1.override{}.json'.format(dir_, ovr_suffix)
with open(auth_ovr_path, 'w') as file_:
    file_.write(json.dumps(auth_ovr, sort_keys=True, indent=2))
    ovr_arg += auth_ovr_path

resources = 'toolkit/src/main/resources/com/google/api/codegen'

GAPIC_YAMLS = [
  'toolkit/src/main/resources/com/google/api/codegen/py/python_discovery.yaml',
  'toolkit/src/main/resources/com/google/api/codegen/csharp/csharp_discovery.yaml'
]

for gapic_yaml in GAPIC_YAMLS:
    call(['java', '-jar', 'toolkit/build/libs/discoGen-0.0.5.jar',
          '--discovery_doc', 'discoveries/compute.v1.json',
          '--gapic_yaml',
          gapic_yaml,
          '--overrides', ovr_arg])

call(['python', 'gen_mocks.py', 'discoveries/compute.v1.json',
      '--directory', dir_])



DEVNULL = open(os.devnull, 'w')

for path in glob.glob('{}/*.mock.py'.format(dir_)):
    print 'testing {}'.format(path)

    # print '... python {}'.format(path)
    proc = subprocess.Popen(['python', path], stdout=DEVNULL, stderr=subprocess.PIPE)
    while not proc.stderr.readline():
        pass

    script = path[0:-len('.mock.py')] + '.frag.py'
    print '... python {}'.format(script)
    code = call(['python', script], stdout=DEVNULL, stderr=DEVNULL)
    if code:
        print '    fail!!!'

    proc.terminate()
    proc.wait()


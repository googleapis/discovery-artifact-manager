import glob
import json
import os
import subprocess
import time
from subprocess import call

call(['./gradlew', 'discoJar'], cwd='../toolkit')

call(['mkdir', '-p', 'discoveries'])

ddoc_file = 'discoveries/dfareporting.v2.7.json'
ddoc_url = 'https://content.googleapis.com/discovery/v1/apis/dfareporting/v2.7/rest'

call(['wget', '-O', ddoc_file, ddoc_url])

name, version, revision = '', '', ''
with open(ddoc_file) as file_:
    root = json.load(file_)
    name, version, revision = root['name'], root['version'], root['revision']

dir_ = 'autogenerated/{}/{}/{}'.format(name, version, revision)

if not os.path.exists(dir_):
    os.makedirs(dir_)

ovr_arg = ''
dv_ovr_path = '{}/dfareporting.v2.7.override1.json'.format(dir_)
call(['python', 'gen_ovr.py', 'discoveries/dfareporting.v2.7.json',
      '--output', dv_ovr_path])
ovr_arg += dv_ovr_path + ','

ovr_path = 'discoveries/dfareporting.v2.7.override.json'
orig_ovr_path = '{}/dfareporting.v2.7.override2.json'.format(dir_)
ovr_suffix = '2'
if os.path.isfile(ovr_path):
    call(['cp', ovr_path, orig_ovr_path])
    ovr_arg += orig_ovr_path + ','
    ovr_suffix = '3'

auth_ovr = {
  'csharp|go|java|js|nodejs|php|python|ruby': {
    'authType': 'NONE'
  },
  'js|python': {
    'discoveryDocUrl': 'http://localhost:8000/static/{}.{}.json'.format(name, version)
  }
}
auth_ovr_path = '{}/dfareporting.v2.7.override{}.json'.format(dir_, ovr_suffix)
with open(auth_ovr_path, 'w') as file_:
    file_.write(json.dumps(auth_ovr, sort_keys=True, indent=2))
    ovr_arg += auth_ovr_path

resources = '../toolkit/src/main/resources/com/google/api/codegen'

GAPIC_YAMLS = [
  '../toolkit/src/main/resources/com/google/api/codegen/csharp/csharp_discovery.yaml',
  '../toolkit/src/main/resources/com/google/api/codegen/go/go_discovery.yaml',
  '../toolkit/src/main/resources/com/google/api/codegen/py/python_discovery.yaml'
]

for gapic_yaml in GAPIC_YAMLS:
    call(['java', '-jar', '../toolkit/build/libs/discoGen-0.0.5.jar',
          '--discovery_doc', 'discoveries/dfareporting.v2.7.json',
          '--gapic_yaml', gapic_yaml,
          '--overrides', ovr_arg])

call(['python', 'gen_mocks.py', 'discoveries/dfareporting.v2.7.json',
      '--directory', dir_])



DEVNULL = open(os.devnull, 'w')

testdir = 'tests/{}/{}/{}'.format(name, version, revision)
if not os.path.exists(testdir):
    os.makedirs(testdir)


# Go
gotestdir = os.path.abspath('{}/go'.format(testdir)) # Absolute path b/c this is used for GOPATH.
if not os.path.exists(gotestdir):
    os.makedirs(gotestdir)

goenv = os.environ.copy()
goenv['GOPATH'] = gotestdir
call(['go', 'get', '-v', 'google.golang.org/api/google-api-go-generator'], env=goenv)
call(['go', 'get', '-v', 'golang.org/x/net/context'], env=goenv)
call(['google-api-go-generator', '--api_json_file', '/Users/saicheems/Documents/workspace/discovery-artifact-manager/autogenerated/dfareporting/v2.7/{}/static/dfareporting.v2.7.json'.format(revision)], env=goenv)

for path in glob.glob('{}/*.mock.py'.format(dir_)):
    partname = path.split('/')[-1][0:-len('.mock.py')] # 'my/path/foo.bar.get.mock.py' -> 'foo.bar.get'
    print 'testing {}'.format(partname)

    curdir = '{}/src/{}'.format(gotestdir, partname)
    if not os.path.exists(curdir):
        os.makedirs(curdir)

    call(['cp', path[0:-len('.mock.py')] + '.frag.go', '{}/main.go'.format(curdir)])

    proc = subprocess.Popen(['python', path], stdout=DEVNULL, stderr=subprocess.PIPE)
    while not proc.stderr.readline():
        pass
    time.sleep(0.1) # Sleep for a bit just to make sure the server is ready.
    print '... {}'.format(partname)
    code = call(['go', 'run', '{}/main.go'.format(curdir)], env=goenv, stdout=DEVNULL)
    if code:
        print '    fail!!!'
    proc.terminate()
    proc.wait()


# C#

call(['virtualenv', '../google-api-dotnet-client/ClientGenerator/venv'])
call(['venv/bin/python', 'setup.py', 'install'], cwd='../google-api-dotnet-client/ClientGenerator')
call(['venv/bin/python', 'src/googleapis/codegen/generate_library.py', '--input', '/Users/saicheems/Documents/workspace/discovery-artifact-manager/autogenerated/dfareporting/v2.7/{}/static/dfareporting.v2.7.json'.format(revision), '--language', 'csharp', '--output_dir', '../Src/Generated'], cwd='../google-api-dotnet-client/ClientGenerator')
call(['dotnet', 'migrate'], cwd='/Users/saicheems/Documents/workspace/google-api-dotnet-client/Src/Generated/Google.Apis.Dfareporting.v2_7')

cstestdir = '{}/csharp'.format(testdir)
if not os.path.exists(cstestdir):
    os.makedirs(cstestdir)

for path in glob.glob('{}/*.mock.py'.format(dir_)):
    partname = path.split('/')[-1][0:-len('.mock.py')] # 'my/path/foo.bar.get.mock.py' -> 'foo.bar.get'
    print 'testing {}'.format(partname)

    curdir = '{}/{}'.format(cstestdir, partname)
    if not os.path.exists(curdir):
        os.makedirs(curdir)

    call(['cp', path[0:-len('.mock.py')] + '.frag.cs', '{}/Program.cs'.format(curdir)])
    csproj = """<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="/Users/saicheems/Documents/workspace/google-api-dotnet-client/Src/Generated/Google.Apis.Dfareporting.v2_7/Google.Apis.Dfareporting.v2_7.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp1.0</TargetFramework>
  </PropertyGroup>

</Project>
"""
    with open('{}/program.csproj'.format(curdir), 'w') as f:
        f.write(csproj)
    call(['dotnet', 'restore'], cwd=curdir, stdout=DEVNULL)

    proc = subprocess.Popen(['python', path], stdout=DEVNULL, stderr=subprocess.PIPE)
    while not proc.stderr.readline():
        pass
    time.sleep(0.1) # Sleep for a bit just to make sure the server is ready.
    print '... {}'.format(partname)
    code = call(['dotnet', 'run'], cwd=curdir, stdout=DEVNULL)
    if code:
        print '    fail!!!'
    proc.terminate()
    proc.wait()


pytestdir = '{}/python'.format(testdir)
if not os.path.exists(pytestdir):
    os.makedirs(pytestdir)

call(['virtualenv', pytestdir + '/venv'])
call([pytestdir + '/venv/bin/pip', 'install', 'google-api-python-client'])

for path in glob.glob('{}/*.mock.py'.format(dir_)):
    partname = path.split('/')[-1][0:-len('.mock.py')] # 'my/path/foo.bar.get.mock.py' -> 'foo.bar.get'
    print 'testing {}'.format(partname)

    call(['cp', '{}'.format(path[0:-len('.mock.py')] + '.frag.py'), '{}'.format(pytestdir)])

    # print '... python {}'.format(path)
    proc = subprocess.Popen(['python', path], stdout=DEVNULL, stderr=subprocess.PIPE)
    while not proc.stderr.readline():
        pass
    time.sleep(0.1) # Sleep for a bit just to make sure the server is ready.

    script = '{}/{}'.format(pytestdir, partname + '.frag.py')
    print '... {}/venv/bin/python {}'.format(pytestdir, script)
    code = call(['{}/venv/bin/python'.format(pytestdir), script], stdout=DEVNULL)
    if code:
        print '    fail!!!'

    # call(['python', 'src/googleapis/codegen/generate_library.py', '--input=/Users/saicheems/Documents/workspace/discovery-artifact-manager/discoveries/dfareporting.v2.7.json', '--language=cpp', '--output_dir=../Src/Generated'], cwd='../google-api-dotnet-client/ClientGenerator')

    proc.terminate()
    proc.wait()


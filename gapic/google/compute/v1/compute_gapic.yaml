# TODO: Address all the TODOs in this auto-generated config before using it
# for client generation. Remove this paragraph after you closed all the
# TODOs. The retry_codes_name, required_fields, flattening, and timeout
# properties cannot be precisely decided by the tooling and may require some
# configuration.
type: com.google.api.codegen.ConfigProto
config_schema_version: 1.0.0
# The settings of generated code in a specific language.
language_settings:
  java:
    package_name: com.google.cloud.compute.v1
  python:
    package_name: com.google.compute_v1.gapic
  go:
    package_name: google.golang.org/com/google/compute/v1
  csharp:
    package_name: Com.Google.Compute.V1
  ruby:
    package_name: Com::Google::Compute::V1
  php:
    package_name: Com\Google\Compute\V1
  nodejs:
    package_name: compute.v1
# A list of API interface configurations.
interfaces:
  # The fully qualified name of the API interface.
- name: google.compute.v1.AcceleratorTypes
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}
    entity_name: acceleratorType
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.acceleratorTypes.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: AcceleratorTypeAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.acceleratorTypes.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - acceleratorType
    # TODO: Configure which fields are required.
    required_fields:
    - acceleratorType
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      acceleratorType: acceleratorType
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.acceleratorTypes.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: AcceleratorTypeList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Addresses
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/addresses/{address}
    entity_name: address
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.addresses.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: AddressAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.addresses.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - address
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - address
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      address: address
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.addresses.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - address
    # TODO: Configure which fields are required.
    required_fields:
    - address
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      address: address
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.addresses.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - addressResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - addressResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.addresses.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: AddressList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Autoscalers
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/autoscalers/{autoscaler}
    entity_name: autoscaler
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.autoscalers.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: AutoscalerAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.autoscalers.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      autoscaler: autoscaler
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.autoscalers.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      autoscaler: autoscaler
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.autoscalers.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
        - requestId
        - autoscalerResource
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    - requestId
    - autoscalerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.autoscalers.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: AutoscalerList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.autoscalers.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
        - zone
        - requestId
        - autoscalerResource
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    - zone
    - requestId
    - autoscalerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.autoscalers.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
        - zone
        - requestId
        - autoscalerResource
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    - zone
    - requestId
    - autoscalerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.BackendBuckets
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/backendBuckets/{backendBucket}
    entity_name: backendBucket
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.backendBuckets.addSignedUrlKey
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendBucket
        - requestId
        - signedUrlKeyResource
    # TODO: Configure which fields are required.
    required_fields:
    - backendBucket
    - requestId
    - signedUrlKeyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendBucket: backendBucket
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendBuckets.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendBucket
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - backendBucket
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendBucket: backendBucket
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendBuckets.deleteSignedUrlKey
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendBucket
        - requestId
        - keyName
    # TODO: Configure which fields are required.
    required_fields:
    - backendBucket
    - requestId
    - keyName
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendBucket: backendBucket
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendBuckets.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendBucket
    # TODO: Configure which fields are required.
    required_fields:
    - backendBucket
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendBucket: backendBucket
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendBuckets.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - backendBucketResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - backendBucketResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendBuckets.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: BackendBucketList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendBuckets.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendBucket
        - requestId
        - backendBucketResource
    # TODO: Configure which fields are required.
    required_fields:
    - backendBucket
    - requestId
    - backendBucketResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendBucket: backendBucket
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendBuckets.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendBucket
        - requestId
        - backendBucketResource
    # TODO: Configure which fields are required.
    required_fields:
    - backendBucket
    - requestId
    - backendBucketResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendBucket: backendBucket
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.BackendServices
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/backendServices/{backendService}
    entity_name: backendService
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.backendServices.addSignedUrlKey
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
        - signedUrlKeyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    - signedUrlKeyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: BackendServiceAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.deleteSignedUrlKey
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
        - keyName
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    - keyName
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendService
    # TODO: Configure which fields are required.
    required_fields:
    - backendService
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.getHealth
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendService
        - resourceGroupReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - backendService
    - resourceGroupReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - backendServiceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - backendServiceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: BackendServiceList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
        - backendServiceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    - backendServiceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.setSecurityPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
        - securityPolicyReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    - securityPolicyReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.backendServices.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
        - backendServiceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    - backendServiceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: backendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.DiskTypes
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/diskTypes/{diskType}
    entity_name: diskType
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.diskTypes.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: DiskTypeAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.diskTypes.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - diskType
    # TODO: Configure which fields are required.
    required_fields:
    - diskType
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      diskType: diskType
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.diskTypes.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: DiskTypeList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Disks
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/disks/{disk}
    entity_name: disk
  - name_pattern: projects/{project}/zones/{zone}/disks/{resource}
    entity_name: disksResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.disks.addResourcePolicies
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - disksAddResourcePoliciesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - disksAddResourcePoliciesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: disk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: DiskAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.createSnapshot
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - guestFlush
        - snapshotResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - guestFlush
    - snapshotResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: disk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: disk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: disk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: disksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
        - requestId
        - sourceImage
        - diskResource
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    - requestId
    - sourceImage
    - diskResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: DiskList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.removeResourcePolicies
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - disksRemoveResourcePoliciesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - disksRemoveResourcePoliciesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: disk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.resize
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - disksResizeRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - disksResizeRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: disk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - zoneSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - zoneSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: disksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.setLabels
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - requestId
        - zoneSetLabelsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - requestId
    - zoneSetLabelsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: disksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.disks.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: disksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Firewalls
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/firewalls/{firewall}
    entity_name: firewall
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.firewalls.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - firewall
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - firewall
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      firewall: firewall
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.firewalls.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - firewall
    # TODO: Configure which fields are required.
    required_fields:
    - firewall
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      firewall: firewall
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.firewalls.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - firewallResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - firewallResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.firewalls.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: FirewallList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.firewalls.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - firewall
        - requestId
        - firewallResource
    # TODO: Configure which fields are required.
    required_fields:
    - firewall
    - requestId
    - firewallResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      firewall: firewall
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.firewalls.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - firewall
        - requestId
        - firewallResource
    # TODO: Configure which fields are required.
    required_fields:
    - firewall
    - requestId
    - firewallResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      firewall: firewall
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.ForwardingRules
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/forwardingRules/{forwardingRule}
    entity_name: forwardingRule
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.forwardingRules.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ForwardingRuleAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.forwardingRules.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - forwardingRule
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - forwardingRule
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      forwardingRule: forwardingRule
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.forwardingRules.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - forwardingRule
    # TODO: Configure which fields are required.
    required_fields:
    - forwardingRule
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      forwardingRule: forwardingRule
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.forwardingRules.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - forwardingRuleResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - forwardingRuleResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.forwardingRules.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ForwardingRuleList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.forwardingRules.setTarget
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - forwardingRule
        - targetReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - forwardingRule
    - targetReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      forwardingRule: forwardingRule
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.GlobalAddresses
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/addresses/{address}
    entity_name: globalAddressesAddress
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.globalAddresses.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - address
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - address
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      address: globalAddressesAddress
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalAddresses.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - address
    # TODO: Configure which fields are required.
    required_fields:
    - address
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      address: globalAddressesAddress
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalAddresses.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - addressResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - addressResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalAddresses.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: AddressList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.GlobalForwardingRules
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/forwardingRules/{forwardingRule}
    entity_name: globalForwardingRulesForwardingRule
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.globalForwardingRules.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - forwardingRule
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - forwardingRule
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      forwardingRule: globalForwardingRulesForwardingRule
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalForwardingRules.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - forwardingRule
    # TODO: Configure which fields are required.
    required_fields:
    - forwardingRule
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      forwardingRule: globalForwardingRulesForwardingRule
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalForwardingRules.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - forwardingRuleResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - forwardingRuleResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalForwardingRules.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ForwardingRuleList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalForwardingRules.setTarget
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - forwardingRule
        - targetReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - forwardingRule
    - targetReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      forwardingRule: globalForwardingRulesForwardingRule
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.GlobalOperations
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/operations/{operation}
    entity_name: globalOperationsOperation
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.globalOperations.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: OperationAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalOperations.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - operation
    # TODO: Configure which fields are required.
    required_fields:
    - operation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      operation: globalOperationsOperation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalOperations.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - operation
    # TODO: Configure which fields are required.
    required_fields:
    - operation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      operation: globalOperationsOperation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.globalOperations.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: OperationList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.HealthChecks
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/healthChecks/{healthCheck}
    entity_name: healthCheck
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.healthChecks.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - healthCheck
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - healthCheck
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      healthCheck: healthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.healthChecks.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - healthCheck
    # TODO: Configure which fields are required.
    required_fields:
    - healthCheck
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      healthCheck: healthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.healthChecks.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - healthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - healthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.healthChecks.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: HealthCheckList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.healthChecks.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - healthCheck
        - healthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - healthCheck
    - healthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      healthCheck: healthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.healthChecks.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - healthCheck
        - healthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - healthCheck
    - healthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      healthCheck: healthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.HttpHealthChecks
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/httpHealthChecks/{httpHealthCheck}
    entity_name: httpHealthCheck
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.httpHealthChecks.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - httpHealthCheck
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - httpHealthCheck
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpHealthCheck: httpHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpHealthChecks.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - httpHealthCheck
    # TODO: Configure which fields are required.
    required_fields:
    - httpHealthCheck
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpHealthCheck: httpHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpHealthChecks.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - httpHealthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - httpHealthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpHealthChecks.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: HttpHealthCheckList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpHealthChecks.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - httpHealthCheck
        - httpHealthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - httpHealthCheck
    - httpHealthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpHealthCheck: httpHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpHealthChecks.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - httpHealthCheck
        - httpHealthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - httpHealthCheck
    - httpHealthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpHealthCheck: httpHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.HttpsHealthChecks
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/httpsHealthChecks/{httpsHealthCheck}
    entity_name: httpsHealthCheck
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.httpsHealthChecks.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - httpsHealthCheck
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - httpsHealthCheck
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpsHealthCheck: httpsHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpsHealthChecks.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - httpsHealthCheck
    # TODO: Configure which fields are required.
    required_fields:
    - httpsHealthCheck
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpsHealthCheck: httpsHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpsHealthChecks.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - httpsHealthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - httpsHealthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpsHealthChecks.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: HttpsHealthCheckList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpsHealthChecks.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - httpsHealthCheck
        - requestId
        - httpsHealthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - httpsHealthCheck
    - requestId
    - httpsHealthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpsHealthCheck: httpsHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.httpsHealthChecks.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - httpsHealthCheck
        - requestId
        - httpsHealthCheckResource
    # TODO: Configure which fields are required.
    required_fields:
    - httpsHealthCheck
    - requestId
    - httpsHealthCheckResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      httpsHealthCheck: httpsHealthCheck
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Images
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/family/{family}
    entity_name: family
  - name_pattern: projects/{project}/images/{image}
    entity_name: image
  - name_pattern: projects/{project}/images/{resource}
    entity_name: imagesResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.images.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - image
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - image
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      image: image
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.deprecate
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - image
        - requestId
        - deprecationStatusResource
    # TODO: Configure which fields are required.
    required_fields:
    - image
    - requestId
    - deprecationStatusResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      image: image
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - image
    # TODO: Configure which fields are required.
    required_fields:
    - image
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      image: image
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.getFromFamily
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - family
    # TODO: Configure which fields are required.
    required_fields:
    - family
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      family: family
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: imagesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - forceCreate
        - requestId
        - project
        - imageResource
    # TODO: Configure which fields are required.
    required_fields:
    - forceCreate
    - requestId
    - project
    - imageResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ImageList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - globalSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - globalSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: imagesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.setLabels
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - globalSetLabelsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - globalSetLabelsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: imagesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.images.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: imagesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.InstanceGroupManagers
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}
    entity_name: instanceGroupManager
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.instanceGroupManagers.abandonInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - instanceGroupManagersAbandonInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - instanceGroupManagersAbandonInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceGroupManagerAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.deleteInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - instanceGroupManagersDeleteInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - instanceGroupManagersDeleteInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
        - requestId
        - instanceGroupManagerResource
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    - requestId
    - instanceGroupManagerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceGroupManagerList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.listManagedInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - instanceGroupManagerResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - instanceGroupManagerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.recreateInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - instanceGroupManagersRecreateInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - instanceGroupManagersRecreateInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.resize
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - size
        - requestId
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - size
    - requestId
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.setInstanceTemplate
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - instanceGroupManagersSetInstanceTemplateRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - instanceGroupManagersSetInstanceTemplateRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroupManagers.setTargetPools
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - instanceGroupManagersSetTargetPoolsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - instanceGroupManagersSetTargetPoolsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: instanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.InstanceGroups
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}
    entity_name: instanceGroup
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.instanceGroups.addInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroup
        - instanceGroupsAddInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroup
    - instanceGroupsAddInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: instanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceGroupAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroup
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroup
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: instanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroup
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroup
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: instanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
        - requestId
        - instanceGroupResource
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    - requestId
    - instanceGroupResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceGroupList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.listInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroup
        - instanceGroupsListInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroup
    - instanceGroupsListInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceGroupsListInstances
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: instanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.removeInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroup
        - instanceGroupsRemoveInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroup
    - instanceGroupsRemoveInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: instanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceGroups.setNamedPorts
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroup
        - instanceGroupsSetNamedPortsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroup
    - instanceGroupsSetNamedPortsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: instanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.InstanceTemplates
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/instanceTemplates/{instanceTemplate}
    entity_name: instanceTemplate
  - name_pattern: projects/{project}/instanceTemplates/{resource}
    entity_name: instanceTemplatesResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.instanceTemplates.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceTemplate
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - instanceTemplate
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceTemplate: instanceTemplate
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceTemplates.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceTemplate
    # TODO: Configure which fields are required.
    required_fields:
    - instanceTemplate
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceTemplate: instanceTemplate
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceTemplates.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: instanceTemplatesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceTemplates.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - instanceTemplateResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - instanceTemplateResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceTemplates.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceTemplateList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceTemplates.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - globalSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - globalSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: instanceTemplatesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instanceTemplates.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: instanceTemplatesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Instances
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/instances/{instance}
    entity_name: instance
  - name_pattern: projects/{project}/zones/{zone}/instances/{resource}
    entity_name: instancesResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.instances.addAccessConfig
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - networkInterface
        - requestId
        - accessConfigResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - networkInterface
    - requestId
    - accessConfigResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.attachDisk
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - forceAttach
        - attachedDiskResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - forceAttach
    - attachedDiskResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.deleteAccessConfig
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - networkInterface
        - requestId
        - accessConfig
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - networkInterface
    - requestId
    - accessConfig
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.detachDisk
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - deviceName
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - deviceName
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.getGuestAttributes
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - queryPath
        - variableKey
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - queryPath
    - variableKey
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: instancesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.getSerialPortOutput
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - port
        - start
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - port
    - start
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.getShieldedInstanceIdentity
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - sourceInstanceTemplate
        - zone
        - requestId
        - instanceResource
    # TODO: Configure which fields are required.
    required_fields:
    - sourceInstanceTemplate
    - zone
    - requestId
    - instanceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.listReferrers
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InstanceListReferrers
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.reset
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setDeletionProtection
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - requestId
        - deletionProtection
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - requestId
    - deletionProtection
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: instancesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setDiskAutoDelete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - autoDelete
        - deviceName
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - autoDelete
    - deviceName
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - zoneSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - zoneSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: instancesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setLabels
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - instancesSetLabelsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - instancesSetLabelsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setMachineResources
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - instancesSetMachineResourcesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - instancesSetMachineResourcesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setMachineType
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - instancesSetMachineTypeRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - instancesSetMachineTypeRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setMetadata
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - metadataResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - metadataResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setMinCpuPlatform
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - instancesSetMinCpuPlatformRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - instancesSetMinCpuPlatformRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setScheduling
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - schedulingResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - schedulingResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setServiceAccount
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - instancesSetServiceAccountRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - instancesSetServiceAccountRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setShieldedInstanceIntegrityPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - shieldedInstanceIntegrityPolicyResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - shieldedInstanceIntegrityPolicyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.setTags
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - tagsResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - tagsResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.simulateMaintenanceEvent
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.start
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.startWithEncryptionKey
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - instancesStartWithEncryptionKeyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - instancesStartWithEncryptionKeyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.stop
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: instancesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.updateAccessConfig
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - networkInterface
        - requestId
        - accessConfigResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - networkInterface
    - requestId
    - accessConfigResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.updateNetworkInterface
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - networkInterface
        - requestId
        - networkInterfaceResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - networkInterface
    - requestId
    - networkInterfaceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.instances.updateShieldedInstanceConfig
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instance
        - requestId
        - shieldedInstanceConfigResource
    # TODO: Configure which fields are required.
    required_fields:
    - instance
    - requestId
    - shieldedInstanceConfigResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instance: instance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.InterconnectAttachments
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}
    entity_name: interconnectAttachment
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.interconnectAttachments.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InterconnectAttachmentAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnectAttachments.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - interconnectAttachment
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - interconnectAttachment
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnectAttachment: interconnectAttachment
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnectAttachments.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - interconnectAttachment
    # TODO: Configure which fields are required.
    required_fields:
    - interconnectAttachment
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnectAttachment: interconnectAttachment
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnectAttachments.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - interconnectAttachmentResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - interconnectAttachmentResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnectAttachments.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InterconnectAttachmentList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnectAttachments.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - interconnectAttachment
        - interconnectAttachmentResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - interconnectAttachment
    - interconnectAttachmentResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnectAttachment: interconnectAttachment
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.InterconnectLocations
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/interconnectLocations/{interconnectLocation}
    entity_name: interconnectLocation
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.interconnectLocations.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - interconnectLocation
    # TODO: Configure which fields are required.
    required_fields:
    - interconnectLocation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnectLocation: interconnectLocation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnectLocations.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InterconnectLocationList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Interconnects
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/interconnects/{interconnect}
    entity_name: interconnect
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.interconnects.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - interconnect
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - interconnect
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnect: interconnect
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnects.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - interconnect
    # TODO: Configure which fields are required.
    required_fields:
    - interconnect
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnect: interconnect
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnects.getDiagnostics
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - interconnect
    # TODO: Configure which fields are required.
    required_fields:
    - interconnect
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnect: interconnect
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnects.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - interconnectResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - interconnectResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnects.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: InterconnectList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.interconnects.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - interconnect
        - interconnectResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - interconnect
    - interconnectResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      interconnect: interconnect
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.LicenseCodes
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/licenseCodes/{licenseCode}
    entity_name: licenseCode
  - name_pattern: projects/{project}/licenseCodes/{resource}
    entity_name: licenseCodesResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.licenseCodes.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - licenseCode
    # TODO: Configure which fields are required.
    required_fields:
    - licenseCode
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      licenseCode: licenseCode
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.licenseCodes.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: licenseCodesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Licenses
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/licenses/{license}
    entity_name: license
  - name_pattern: projects/{project}/licenses/{resource}
    entity_name: licensesResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.licenses.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - license
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - license
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      license: license
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.licenses.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - license
    # TODO: Configure which fields are required.
    required_fields:
    - license
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      license: license
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.licenses.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: licensesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.licenses.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - licenseResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - licenseResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.licenses.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: LicensesListResponse
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.licenses.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - globalSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - globalSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: licensesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.licenses.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: licensesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.MachineTypes
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/machineTypes/{machineType}
    entity_name: machineType
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.machineTypes.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: MachineTypeAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.machineTypes.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - machineType
    # TODO: Configure which fields are required.
    required_fields:
    - machineType
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      machineType: machineType
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.machineTypes.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: MachineTypeList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.NetworkEndpointGroups
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}
    entity_name: networkEndpointGroup
  - name_pattern: projects/{project}/zones/{zone}/networkEndpointGroups/{resource}
    entity_name: networkEndpointGroupsResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.networkEndpointGroups.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NetworkEndpointGroupAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.attachNetworkEndpoints
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - networkEndpointGroup
        - requestId
        - networkEndpointGroupsAttachEndpointsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - networkEndpointGroup
    - requestId
    - networkEndpointGroupsAttachEndpointsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      networkEndpointGroup: networkEndpointGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - networkEndpointGroup
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - networkEndpointGroup
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      networkEndpointGroup: networkEndpointGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.detachNetworkEndpoints
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - networkEndpointGroup
        - requestId
        - networkEndpointGroupsDetachEndpointsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - networkEndpointGroup
    - requestId
    - networkEndpointGroupsDetachEndpointsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      networkEndpointGroup: networkEndpointGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - networkEndpointGroup
    # TODO: Configure which fields are required.
    required_fields:
    - networkEndpointGroup
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      networkEndpointGroup: networkEndpointGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
        - requestId
        - networkEndpointGroupResource
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    - requestId
    - networkEndpointGroupResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NetworkEndpointGroupList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.listNetworkEndpoints
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - networkEndpointGroup
        - networkEndpointGroupsListEndpointsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - networkEndpointGroup
    - networkEndpointGroupsListEndpointsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NetworkEndpointGroupsListNetworkEndpoints
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      networkEndpointGroup: networkEndpointGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networkEndpointGroups.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: networkEndpointGroupsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Networks
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/networks/{network}
    entity_name: network
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.networks.addPeering
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - network
        - networksAddPeeringRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - network
    - networksAddPeeringRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      network: network
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networks.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - network
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - network
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      network: network
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networks.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - network
    # TODO: Configure which fields are required.
    required_fields:
    - network
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      network: network
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networks.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - networkResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - networkResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networks.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NetworkList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networks.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - network
        - networkResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - network
    - networkResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      network: network
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networks.removePeering
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - network
        - networksRemovePeeringRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - network
    - networksRemovePeeringRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      network: network
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.networks.switchToCustomMode
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - network
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - network
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      network: network
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.NodeGroups
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}
    entity_name: nodeGroup
  - name_pattern: projects/{project}/zones/{zone}/nodeGroups/{resource}
    entity_name: nodeGroupsResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.nodeGroups.addNodes
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - nodeGroup
        - nodeGroupsAddNodesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - nodeGroup
    - nodeGroupsAddNodesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeGroup: nodeGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NodeGroupAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - nodeGroup
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - nodeGroup
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeGroup: nodeGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.deleteNodes
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - nodeGroup
        - nodeGroupsDeleteNodesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - nodeGroup
    - nodeGroupsDeleteNodesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeGroup: nodeGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - nodeGroup
    # TODO: Configure which fields are required.
    required_fields:
    - nodeGroup
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeGroup: nodeGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: nodeGroupsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - initialNodeCount
        - zone
        - requestId
        - nodeGroupResource
    # TODO: Configure which fields are required.
    required_fields:
    - initialNodeCount
    - zone
    - requestId
    - nodeGroupResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NodeGroupList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.listNodes
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - nodeGroup
    # TODO: Configure which fields are required.
    required_fields:
    - nodeGroup
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NodeGroupsListNodes
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeGroup: nodeGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - zoneSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - zoneSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: nodeGroupsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.setNodeTemplate
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - nodeGroup
        - nodeGroupsSetNodeTemplateRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - nodeGroup
    - nodeGroupsSetNodeTemplateRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeGroup: nodeGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeGroups.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: nodeGroupsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.NodeTemplates
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}
    entity_name: nodeTemplate
  - name_pattern: projects/{project}/regions/{region}/nodeTemplates/{resource}
    entity_name: nodeTemplatesResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.nodeTemplates.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NodeTemplateAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTemplates.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - nodeTemplate
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - nodeTemplate
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeTemplate: nodeTemplate
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTemplates.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - nodeTemplate
    # TODO: Configure which fields are required.
    required_fields:
    - nodeTemplate
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeTemplate: nodeTemplate
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTemplates.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: nodeTemplatesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTemplates.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - nodeTemplateResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - nodeTemplateResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTemplates.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NodeTemplateList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTemplates.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - regionSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - regionSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: nodeTemplatesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTemplates.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: nodeTemplatesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.NodeTypes
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/nodeTypes/{nodeType}
    entity_name: nodeType
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.nodeTypes.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NodeTypeAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTypes.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - nodeType
    # TODO: Configure which fields are required.
    required_fields:
    - nodeType
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      nodeType: nodeType
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.nodeTypes.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: NodeTypeList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Projects
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.projects.disableXpnHost
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.disableXpnResource
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - projectsDisableXpnResourceRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - projectsDisableXpnResourceRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.enableXpnHost
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.enableXpnResource
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - projectsEnableXpnResourceRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - projectsEnableXpnResourceRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: false
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.getXpnHost
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: false
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.getXpnResources
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ProjectsGetXpnResources
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.listXpnHosts
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
        - projectsListXpnHostsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - project
    - projectsListXpnHostsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: XpnHostList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.moveDisk
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - diskMoveRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - diskMoveRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.moveInstance
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - instanceMoveRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - instanceMoveRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.setCommonInstanceMetadata
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - metadataResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - metadataResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.setDefaultNetworkTier
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - projectsSetDefaultNetworkTierRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - projectsSetDefaultNetworkTierRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.projects.setUsageExportBucket
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - usageExportLocationResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - usageExportLocationResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionAutoscalers
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/autoscalers/{autoscaler}
    entity_name: regionAutoscalersAutoscaler
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionAutoscalers.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      autoscaler: regionAutoscalersAutoscaler
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionAutoscalers.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      autoscaler: regionAutoscalersAutoscaler
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionAutoscalers.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - autoscalerResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - autoscalerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionAutoscalers.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RegionAutoscalerList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionAutoscalers.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
        - requestId
        - region
        - autoscalerResource
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    - requestId
    - region
    - autoscalerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionAutoscalers.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - autoscaler
        - requestId
        - region
        - autoscalerResource
    # TODO: Configure which fields are required.
    required_fields:
    - autoscaler
    - requestId
    - region
    - autoscalerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionBackendServices
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/backendServices/{backendService}
    entity_name: regionBackendServicesBackendService
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionBackendServices.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: regionBackendServicesBackendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionBackendServices.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendService
    # TODO: Configure which fields are required.
    required_fields:
    - backendService
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: regionBackendServicesBackendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionBackendServices.getHealth
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - backendService
        - resourceGroupReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - backendService
    - resourceGroupReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: regionBackendServicesBackendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionBackendServices.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - backendServiceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - backendServiceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionBackendServices.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: BackendServiceList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionBackendServices.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
        - backendServiceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    - backendServiceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: regionBackendServicesBackendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionBackendServices.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - backendService
        - backendServiceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - backendService
    - backendServiceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      backendService: regionBackendServicesBackendService
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionCommitments
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/commitments/{commitment}
    entity_name: commitment
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionCommitments.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: CommitmentAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionCommitments.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - commitment
    # TODO: Configure which fields are required.
    required_fields:
    - commitment
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      commitment: commitment
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionCommitments.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - commitmentResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - commitmentResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionCommitments.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: CommitmentList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionDiskTypes
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/diskTypes/{diskType}
    entity_name: regionDiskTypesDiskType
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionDiskTypes.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - diskType
    # TODO: Configure which fields are required.
    required_fields:
    - diskType
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      diskType: regionDiskTypesDiskType
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDiskTypes.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RegionDiskTypeList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionDisks
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/disks/{disk}
    entity_name: regionDisksDisk
  - name_pattern: projects/{project}/regions/{region}/disks/{resource}
    entity_name: regionDisksResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionDisks.addResourcePolicies
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - regionDisksAddResourcePoliciesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - regionDisksAddResourcePoliciesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: regionDisksDisk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.createSnapshot
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - snapshotResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - snapshotResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: regionDisksDisk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: regionDisksDisk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: regionDisksDisk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - sourceImage
        - region
        - diskResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - sourceImage
    - region
    - diskResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: DiskList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.removeResourcePolicies
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - regionDisksRemoveResourcePoliciesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - regionDisksRemoveResourcePoliciesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: regionDisksDisk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.resize
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - disk
        - requestId
        - regionDisksResizeRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - disk
    - requestId
    - regionDisksResizeRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      disk: regionDisksDisk
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.setLabels
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - requestId
        - regionSetLabelsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - requestId
    - regionSetLabelsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: regionDisksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionDisks.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: regionDisksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionInstanceGroupManagers
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}
    entity_name: regionInstanceGroupManagersInstanceGroupManager
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionInstanceGroupManagers.abandonInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - regionInstanceGroupManagersAbandonInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - regionInstanceGroupManagersAbandonInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.deleteInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - regionInstanceGroupManagersDeleteInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - regionInstanceGroupManagersDeleteInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - instanceGroupManagerResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - instanceGroupManagerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RegionInstanceGroupManagerList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.listManagedInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - instanceGroupManagerResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - instanceGroupManagerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.recreateInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - regionInstanceGroupManagersRecreateRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - regionInstanceGroupManagersRecreateRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.resize
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - size
        - requestId
        - instanceGroupManager
    # TODO: Configure which fields are required.
    required_fields:
    - size
    - requestId
    - instanceGroupManager
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.setInstanceTemplate
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - regionInstanceGroupManagersSetTemplateRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - regionInstanceGroupManagersSetTemplateRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroupManagers.setTargetPools
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroupManager
        - regionInstanceGroupManagersSetTargetPoolsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroupManager
    - regionInstanceGroupManagersSetTargetPoolsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionInstanceGroups
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/instanceGroups/{instanceGroup}
    entity_name: regionInstanceGroupsInstanceGroup
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionInstanceGroups.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroup
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroup
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: regionInstanceGroupsInstanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroups.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RegionInstanceGroupList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroups.listInstances
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - instanceGroup
        - regionInstanceGroupsListInstancesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - instanceGroup
    - regionInstanceGroupsListInstancesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RegionInstanceGroupsListInstances
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: regionInstanceGroupsInstanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionInstanceGroups.setNamedPorts
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - instanceGroup
        - regionInstanceGroupsSetNamedPortsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - instanceGroup
    - regionInstanceGroupsSetNamedPortsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      instanceGroup: regionInstanceGroupsInstanceGroup
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.RegionOperations
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/operations/{operation}
    entity_name: regionOperationsOperation
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regionOperations.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - operation
    # TODO: Configure which fields are required.
    required_fields:
    - operation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      operation: regionOperationsOperation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionOperations.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - operation
    # TODO: Configure which fields are required.
    required_fields:
    - operation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      operation: regionOperationsOperation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regionOperations.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: OperationList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Regions
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.regions.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.regions.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RegionList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Reservations
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/reservations/{reservation}
    entity_name: reservation
  - name_pattern: projects/{project}/zones/{zone}/reservations/{resource}
    entity_name: reservationsResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.reservations.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ReservationAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - reservation
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - reservation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      reservation: reservation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - reservation
    # TODO: Configure which fields are required.
    required_fields:
    - reservation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      reservation: reservation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: reservationsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
        - requestId
        - reservationResource
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    - requestId
    - reservationResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ReservationList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.resize
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - reservation
        - reservationsResizeRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - reservation
    - reservationsResizeRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      reservation: reservation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - zoneSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - zoneSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: reservationsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.reservations.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: reservationsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.ResourcePolicies
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}
    entity_name: resourcePolicy
  - name_pattern: projects/{project}/regions/{region}/resourcePolicies/{resource}
    entity_name: resourcePoliciesResource
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.resourcePolicies.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ResourcePolicyAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.resourcePolicies.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resourcePolicy
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - resourcePolicy
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resourcePolicy: resourcePolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.resourcePolicies.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resourcePolicy
    # TODO: Configure which fields are required.
    required_fields:
    - resourcePolicy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resourcePolicy: resourcePolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.resourcePolicies.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: resourcePoliciesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.resourcePolicies.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - resourcePolicyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - resourcePolicyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.resourcePolicies.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ResourcePolicyList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.resourcePolicies.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - regionSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - regionSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: resourcePoliciesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.resourcePolicies.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: resourcePoliciesResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Routers
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/routers/{router}
    entity_name: router
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.routers.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RouterAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - router
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - router
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      router: router
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - router
    # TODO: Configure which fields are required.
    required_fields:
    - router
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      router: router
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.getNatMappingInfo
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - router
    # TODO: Configure which fields are required.
    required_fields:
    - router
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: VmEndpointNatMappingsList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      router: router
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.getRouterStatus
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - router
    # TODO: Configure which fields are required.
    required_fields:
    - router
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      router: router
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - routerResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - routerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RouterList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - router
        - requestId
        - routerResource
    # TODO: Configure which fields are required.
    required_fields:
    - router
    - requestId
    - routerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      router: router
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.preview
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - router
        - routerResource
    # TODO: Configure which fields are required.
    required_fields:
    - router
    - routerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      router: router
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routers.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - router
        - requestId
        - routerResource
    # TODO: Configure which fields are required.
    required_fields:
    - router
    - requestId
    - routerResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      router: router
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Routes
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/routes/{route}
    entity_name: route
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.routes.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - route
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - route
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      route: route
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routes.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - route
    # TODO: Configure which fields are required.
    required_fields:
    - route
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      route: route
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routes.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - routeResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - routeResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.routes.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: RouteList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.SecurityPolicies
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/securityPolicies/{securityPolicy}
    entity_name: securityPolicy
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.securityPolicies.addRule
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - securityPolicy
        - securityPolicyRuleResource
    # TODO: Configure which fields are required.
    required_fields:
    - securityPolicy
    - securityPolicyRuleResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      securityPolicy: securityPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - securityPolicy
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - securityPolicy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      securityPolicy: securityPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - securityPolicy
    # TODO: Configure which fields are required.
    required_fields:
    - securityPolicy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      securityPolicy: securityPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.getRule
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - priority
        - securityPolicy
    # TODO: Configure which fields are required.
    required_fields:
    - priority
    - securityPolicy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      securityPolicy: securityPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - securityPolicyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - securityPolicyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: SecurityPolicyList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - securityPolicy
        - securityPolicyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - securityPolicy
    - securityPolicyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      securityPolicy: securityPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.patchRule
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - priority
        - securityPolicy
        - securityPolicyRuleResource
    # TODO: Configure which fields are required.
    required_fields:
    - priority
    - securityPolicy
    - securityPolicyRuleResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      securityPolicy: securityPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.securityPolicies.removeRule
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - priority
        - securityPolicy
    # TODO: Configure which fields are required.
    required_fields:
    - priority
    - securityPolicy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      securityPolicy: securityPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Snapshots
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/snapshots/{resource}
    entity_name: snapshotsResource
  - name_pattern: projects/{project}/snapshots/{snapshot}
    entity_name: snapshot
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.snapshots.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - snapshot
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - snapshot
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      snapshot: snapshot
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.snapshots.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - snapshot
    # TODO: Configure which fields are required.
    required_fields:
    - snapshot
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      snapshot: snapshot
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.snapshots.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: snapshotsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.snapshots.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: SnapshotList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.snapshots.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - globalSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - globalSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: snapshotsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.snapshots.setLabels
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - globalSetLabelsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - globalSetLabelsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: snapshotsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.snapshots.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: snapshotsResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.SslCertificates
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/sslCertificates/{sslCertificate}
    entity_name: sslCertificate
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.sslCertificates.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - sslCertificate
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - sslCertificate
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      sslCertificate: sslCertificate
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslCertificates.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - sslCertificate
    # TODO: Configure which fields are required.
    required_fields:
    - sslCertificate
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      sslCertificate: sslCertificate
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslCertificates.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - sslCertificateResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - sslCertificateResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslCertificates.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: SslCertificateList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.SslPolicies
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/sslPolicies/{sslPolicy}
    entity_name: sslPolicy
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.sslPolicies.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - sslPolicy
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - sslPolicy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      sslPolicy: sslPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslPolicies.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - sslPolicy
    # TODO: Configure which fields are required.
    required_fields:
    - sslPolicy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      sslPolicy: sslPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslPolicies.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - sslPolicyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - sslPolicyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslPolicies.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: SslPoliciesList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslPolicies.listAvailableFeatures
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.sslPolicies.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - sslPolicy
        - sslPolicyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - sslPolicy
    - sslPolicyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      sslPolicy: sslPolicy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Subnetworks
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/subnetworks/{resource}
    entity_name: subnetworksResource
  - name_pattern: projects/{project}/regions/{region}/subnetworks/{subnetwork}
    entity_name: subnetwork
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.subnetworks.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: SubnetworkAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - subnetwork
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - subnetwork
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      subnetwork: subnetwork
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.expandIpCidrRange
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - subnetwork
        - subnetworksExpandIpCidrRangeRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - subnetwork
    - subnetworksExpandIpCidrRangeRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      subnetwork: subnetwork
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - subnetwork
    # TODO: Configure which fields are required.
    required_fields:
    - subnetwork
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      subnetwork: subnetwork
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.getIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: subnetworksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - subnetworkResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - subnetworkResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: SubnetworkList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.listUsable
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: UsableSubnetworksAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - subnetwork
        - subnetworkResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - subnetwork
    - subnetworkResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      subnetwork: subnetwork
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.setIamPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - regionSetPolicyRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - regionSetPolicyRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: subnetworksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.setPrivateIpGoogleAccess
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - subnetwork
        - subnetworksSetPrivateIpGoogleAccessRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - subnetwork
    - subnetworksSetPrivateIpGoogleAccessRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      subnetwork: subnetwork
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.subnetworks.testIamPermissions
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - resource
        - testPermissionsRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - resource
    - testPermissionsRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      resource: subnetworksResource
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.TargetHttpProxies
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/targetHttpProxies/{targetHttpProxy}
    entity_name: targetHttpProxy
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.targetHttpProxies.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - targetHttpProxy
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - targetHttpProxy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpProxy: targetHttpProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpProxies.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetHttpProxy
    # TODO: Configure which fields are required.
    required_fields:
    - targetHttpProxy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpProxy: targetHttpProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpProxies.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - targetHttpProxyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - targetHttpProxyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpProxies.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetHttpProxyList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpProxies.setUrlMap
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - targetHttpProxy
        - urlMapReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - targetHttpProxy
    - urlMapReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpProxy: targetHttpProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.TargetHttpsProxies
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/targetHttpsProxies/{targetHttpsProxy}
    entity_name: targetHttpsProxy
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.targetHttpsProxies.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetHttpsProxy
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - targetHttpsProxy
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpsProxy: targetHttpsProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpsProxies.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetHttpsProxy
    # TODO: Configure which fields are required.
    required_fields:
    - targetHttpsProxy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpsProxy: targetHttpsProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpsProxies.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - targetHttpsProxyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - targetHttpsProxyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpsProxies.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetHttpsProxyList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpsProxies.setQuicOverride
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetHttpsProxy
        - requestId
        - targetHttpsProxiesSetQuicOverrideRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetHttpsProxy
    - requestId
    - targetHttpsProxiesSetQuicOverrideRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpsProxy: targetHttpsProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpsProxies.setSslCertificates
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetHttpsProxy
        - requestId
        - targetHttpsProxiesSetSslCertificatesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetHttpsProxy
    - requestId
    - targetHttpsProxiesSetSslCertificatesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpsProxy: targetHttpsProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpsProxies.setSslPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetHttpsProxy
        - requestId
        - sslPolicyReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetHttpsProxy
    - requestId
    - sslPolicyReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpsProxy: targetHttpsProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetHttpsProxies.setUrlMap
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetHttpsProxy
        - requestId
        - urlMapReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetHttpsProxy
    - requestId
    - urlMapReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetHttpsProxy: targetHttpsProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.TargetInstances
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/targetInstances/{targetInstance}
    entity_name: targetInstance
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.targetInstances.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetInstanceAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetInstances.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - targetInstance
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - targetInstance
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetInstance: targetInstance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetInstances.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetInstance
    # TODO: Configure which fields are required.
    required_fields:
    - targetInstance
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetInstance: targetInstance
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetInstances.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
        - requestId
        - targetInstanceResource
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    - requestId
    - targetInstanceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetInstances.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetInstanceList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.TargetPools
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/targetPools/{targetPool}
    entity_name: targetPool
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.targetPools.addHealthCheck
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
        - requestId
        - targetPoolsAddHealthCheckRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    - requestId
    - targetPoolsAddHealthCheckRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.addInstance
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
        - requestId
        - targetPoolsAddInstanceRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    - requestId
    - targetPoolsAddInstanceRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetPoolAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.getHealth
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
        - instanceReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    - instanceReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - targetPoolResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - targetPoolResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetPoolList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.removeHealthCheck
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
        - requestId
        - targetPoolsRemoveHealthCheckRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    - requestId
    - targetPoolsRemoveHealthCheckRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.removeInstance
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
        - requestId
        - targetPoolsRemoveInstanceRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    - requestId
    - targetPoolsRemoveInstanceRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetPools.setBackup
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetPool
        - requestId
        - failoverRatio
        - targetReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetPool
    - requestId
    - failoverRatio
    - targetReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetPool: targetPool
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.TargetSslProxies
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/targetSslProxies/{targetSslProxy}
    entity_name: targetSslProxy
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.targetSslProxies.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetSslProxy
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - targetSslProxy
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetSslProxy: targetSslProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetSslProxies.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetSslProxy
    # TODO: Configure which fields are required.
    required_fields:
    - targetSslProxy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetSslProxy: targetSslProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetSslProxies.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - targetSslProxyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - targetSslProxyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetSslProxies.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetSslProxyList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetSslProxies.setBackendService
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetSslProxy
        - requestId
        - targetSslProxiesSetBackendServiceRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetSslProxy
    - requestId
    - targetSslProxiesSetBackendServiceRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetSslProxy: targetSslProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetSslProxies.setProxyHeader
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetSslProxy
        - requestId
        - targetSslProxiesSetProxyHeaderRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetSslProxy
    - requestId
    - targetSslProxiesSetProxyHeaderRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetSslProxy: targetSslProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetSslProxies.setSslCertificates
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetSslProxy
        - requestId
        - targetSslProxiesSetSslCertificatesRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetSslProxy
    - requestId
    - targetSslProxiesSetSslCertificatesRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetSslProxy: targetSslProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetSslProxies.setSslPolicy
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetSslProxy
        - requestId
        - sslPolicyReferenceResource
    # TODO: Configure which fields are required.
    required_fields:
    - targetSslProxy
    - requestId
    - sslPolicyReferenceResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetSslProxy: targetSslProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.TargetTcpProxies
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/targetTcpProxies/{targetTcpProxy}
    entity_name: targetTcpProxy
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.targetTcpProxies.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - targetTcpProxy
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - targetTcpProxy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetTcpProxy: targetTcpProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetTcpProxies.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetTcpProxy
    # TODO: Configure which fields are required.
    required_fields:
    - targetTcpProxy
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetTcpProxy: targetTcpProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetTcpProxies.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - targetTcpProxyResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - targetTcpProxyResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetTcpProxies.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetTcpProxyList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetTcpProxies.setBackendService
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - targetTcpProxy
        - targetTcpProxiesSetBackendServiceRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - targetTcpProxy
    - targetTcpProxiesSetBackendServiceRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetTcpProxy: targetTcpProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetTcpProxies.setProxyHeader
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - targetTcpProxy
        - targetTcpProxiesSetProxyHeaderRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - targetTcpProxy
    - targetTcpProxiesSetProxyHeaderRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetTcpProxy: targetTcpProxy
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.TargetVpnGateways
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}
    entity_name: targetVpnGateway
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.targetVpnGateways.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetVpnGatewayAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetVpnGateways.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - targetVpnGateway
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - targetVpnGateway
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetVpnGateway: targetVpnGateway
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetVpnGateways.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - targetVpnGateway
    # TODO: Configure which fields are required.
    required_fields:
    - targetVpnGateway
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      targetVpnGateway: targetVpnGateway
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetVpnGateways.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - targetVpnGatewayResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - targetVpnGatewayResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.targetVpnGateways.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: TargetVpnGatewayList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.UrlMaps
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/urlMaps/{urlMap}
    entity_name: urlMap
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.urlMaps.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - urlMap
        - requestId
    # TODO: Configure which fields are required.
    required_fields:
    - urlMap
    - requestId
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      urlMap: urlMap
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.urlMaps.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - urlMap
    # TODO: Configure which fields are required.
    required_fields:
    - urlMap
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      urlMap: urlMap
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.urlMaps.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - project
        - urlMapResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - project
    - urlMapResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.urlMaps.invalidateCache
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - urlMap
        - requestId
        - cacheInvalidationRuleResource
    # TODO: Configure which fields are required.
    required_fields:
    - urlMap
    - requestId
    - cacheInvalidationRuleResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      urlMap: urlMap
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.urlMaps.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: UrlMapList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.urlMaps.patch
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - urlMap
        - requestId
        - urlMapResource
    # TODO: Configure which fields are required.
    required_fields:
    - urlMap
    - requestId
    - urlMapResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      urlMap: urlMap
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.urlMaps.update
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - urlMap
        - requestId
        - urlMapResource
    # TODO: Configure which fields are required.
    required_fields:
    - urlMap
    - requestId
    - urlMapResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      urlMap: urlMap
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.urlMaps.validate
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - urlMap
        - urlMapsValidateRequestResource
    # TODO: Configure which fields are required.
    required_fields:
    - urlMap
    - urlMapsValidateRequestResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      urlMap: urlMap
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.VpnTunnels
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/regions/{region}
    entity_name: region
  - name_pattern: projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}
    entity_name: vpnTunnel
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.vpnTunnels.aggregatedList
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: VpnTunnelAggregatedList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.vpnTunnels.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - vpnTunnel
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - vpnTunnel
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      vpnTunnel: vpnTunnel
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.vpnTunnels.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - vpnTunnel
    # TODO: Configure which fields are required.
    required_fields:
    - vpnTunnel
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      vpnTunnel: vpnTunnel
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.vpnTunnels.insert
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - requestId
        - region
        - vpnTunnelResource
    # TODO: Configure which fields are required.
    required_fields:
    - requestId
    - region
    - vpnTunnelResource
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: non_idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.vpnTunnels.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - region
    # TODO: Configure which fields are required.
    required_fields:
    - region
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: VpnTunnelList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      region: region
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.ZoneOperations
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  - name_pattern: projects/{project}/zones/{zone}/operations/{operation}
    entity_name: zoneOperationsOperation
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.zoneOperations.delete
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - operation
    # TODO: Configure which fields are required.
    required_fields:
    - operation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      operation: zoneOperationsOperation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.zoneOperations.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - operation
    # TODO: Configure which fields are required.
    required_fields:
    - operation
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      operation: zoneOperationsOperation
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.zoneOperations.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: OperationList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  # The fully qualified name of the API interface.
- name: google.compute.v1.Zones
  # A list of resource collection configurations.
  # Consists of a name_pattern and an entity_name.
  # The name_pattern is a pattern to describe the names of the resources of this
  # collection, using the platform's conventions for URI patterns. A generator
  # may use this to generate methods to compose and decompose such names. The
  # pattern should use named placeholders as in `shelves/{shelf}/books/{book}`;
  # those will be taken as hints for the parameter names of the generated
  # methods. If empty, no name methods are generated.
  # The entity_name is the name to be used as a basis for generated methods and
  # classes.
  collections:
  - name_pattern: projects/{project}
    entity_name: project
  - name_pattern: projects/{project}/zones/{zone}
    entity_name: zone
  # Definition for retryable codes.
  retry_codes_def:
  - name: idempotent
    retry_codes:
    - SC_SERVICE_UNAVAILABLE
    - SC_GATEWAY_TIMEOUT
  - name: non_idempotent
    retry_codes: []
  # Definition for retry/backoff parameters.
  retry_params_def:
  - name: default
    initial_retry_delay_millis: 100
    retry_delay_multiplier: 1.3
    max_retry_delay_millis: 60000
    initial_rpc_timeout_millis: 20000
    rpc_timeout_multiplier: 1
    max_rpc_timeout_millis: 20000
    total_timeout_millis: 600000
  # A list of method configurations.
  # Common properties:
  #   name - The simple name of the method.
  #   flattening - Specifies the configuration for parameter flattening.
  #       Describes the parameter groups for which a generator should produce
  #       method overloads which allow a client to directly pass request message
  #       fields as method parameters. This information may or may not be used,
  #       depending on the target language.
  #       Consists of groups, which each represent a list of parameters to be
  #       flattened. Each parameter listed must be a field of the request
  #       message.
  #   required_fields - Fields that are always required for a request to be
  #       valid.
  #   request_object_method - Turns on or off the generation of a method whose
  #       sole parameter is a request object. Not all languages will generate
  #       this method.
  #   resource_name_treatment - An enum that specifies how to treat the
  #       resource name formats defined in the field_name_patterns
  #       and response_field_name_patterns fields.
  #       UNSET: default value
  #       NONE: the collection configs will not be used by the generated code.
  #       VALIDATE: string fields will be validated by the client against the
  #           specified resource name formats.
  #       STATIC_TYPES: the client will use generated types for resource names.
  #   page_streaming - Specifies the configuration for paging.
  #       Describes information for generating a method which transforms a
  #       paging list RPC into a stream of resources.
  #       Consists of a request and a response.
  #       The request specifies request information of the list method. It
  #       defines which fields match the paging pattern in the request. The
  #       request consists of a page_size_field and a token_field. The
  #       page_size_field is the name of the optional field specifying the
  #       maximum number of elements to be returned in the response. The
  #       token_field is the name of the field in the request containing the
  #       page token.
  #       The response specifies response information of the list method. It
  #       defines which fields match the paging pattern in the response. The
  #       response consists of a token_field and a resources_field. The
  #       token_field is the name of the field in the response containing the
  #       next page token. The resources_field is the name of the field in the
  #       response containing the list of resources belonging to the page.
  #   retry_codes_name - Specifies the configuration for retryable codes. The
  #       name must be defined in interfaces.retry_codes_def.
  #   retry_params_name - Specifies the configuration for retry/backoff
  #       parameters. The name must be defined in interfaces.retry_params_def.
  #   field_name_patterns - Maps the field name of the request type to
  #       entity_name of interfaces.collections.
  #       Specifies the string pattern that the field must follow.
  #   timeout_millis - Specifies the default timeout for a non-retrying call. If
  #       the call is retrying, refer to retry_params_name instead.
  methods:
  - name: compute.zones.get
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - zone
    # TODO: Configure which fields are required.
    required_fields:
    - zone
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      zone: zone
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
  - name: compute.zones.list
    # TODO: Configure which groups of fields should be flattened into method
    # params.
    flattening:
      groups:
      - parameters:
        - project
    # TODO: Configure which fields are required.
    required_fields:
    - project
    request_object_method: true
    resource_name_treatment: STATIC_TYPES
    page_streaming:
      request:
        page_size_field: maxResults
        token_field: pageToken
      response:
        token_field: nextPageToken
        resources_field: ZoneList
    # TODO: Configure the retryable codes for this method.
    retry_codes_name: idempotent
    # TODO: Configure the retryable params for this method.
    retry_params_name: default
    field_name_patterns:
      project: project
    # TODO: Configure the default timeout for a non-retrying call.
    timeout_millis: 60000
resource_name_generation:
- message_name: AggregatedListAcceleratorTypesHttpRequest
  field_entity_map:
    project: project
- message_name: GetAcceleratorTypeHttpRequest
  field_entity_map:
    acceleratorType: acceleratorType
- message_name: ListAcceleratorTypesHttpRequest
  field_entity_map:
    zone: zone
- message_name: AggregatedListAddressesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteAddressHttpRequest
  field_entity_map:
    address: address
- message_name: GetAddressHttpRequest
  field_entity_map:
    address: address
- message_name: InsertAddressHttpRequest
  field_entity_map:
    region: region
- message_name: ListAddressesHttpRequest
  field_entity_map:
    region: region
- message_name: AggregatedListAutoscalersHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteAutoscalerHttpRequest
  field_entity_map:
    autoscaler: autoscaler
- message_name: GetAutoscalerHttpRequest
  field_entity_map:
    autoscaler: autoscaler
- message_name: InsertAutoscalerHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListAutoscalersHttpRequest
  field_entity_map:
    zone: zone
- message_name: PatchAutoscalerHttpRequest
  field_entity_map:
    zone: zone
- message_name: UpdateAutoscalerHttpRequest
  field_entity_map:
    zone: zone
- message_name: AddSignedUrlKeyBackendBucketHttpRequest
  field_entity_map:
    backendBucket: backendBucket
- message_name: DeleteBackendBucketHttpRequest
  field_entity_map:
    backendBucket: backendBucket
- message_name: DeleteSignedUrlKeyBackendBucketHttpRequest
  field_entity_map:
    backendBucket: backendBucket
- message_name: GetBackendBucketHttpRequest
  field_entity_map:
    backendBucket: backendBucket
- message_name: InsertBackendBucketHttpRequest
  field_entity_map:
    project: project
- message_name: ListBackendBucketsHttpRequest
  field_entity_map:
    project: project
- message_name: PatchBackendBucketHttpRequest
  field_entity_map:
    backendBucket: backendBucket
- message_name: UpdateBackendBucketHttpRequest
  field_entity_map:
    backendBucket: backendBucket
- message_name: AddSignedUrlKeyBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: AggregatedListBackendServicesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: DeleteSignedUrlKeyBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: GetBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: GetHealthBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: InsertBackendServiceHttpRequest
  field_entity_map:
    project: project
- message_name: ListBackendServicesHttpRequest
  field_entity_map:
    project: project
- message_name: PatchBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: SetSecurityPolicyBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: UpdateBackendServiceHttpRequest
  field_entity_map:
    backendService: backendService
- message_name: AggregatedListDiskTypesHttpRequest
  field_entity_map:
    project: project
- message_name: GetDiskTypeHttpRequest
  field_entity_map:
    diskType: diskType
- message_name: ListDiskTypesHttpRequest
  field_entity_map:
    zone: zone
- message_name: AddResourcePoliciesDiskHttpRequest
  field_entity_map:
    disk: disk
- message_name: AggregatedListDisksHttpRequest
  field_entity_map:
    project: project
- message_name: CreateSnapshotDiskHttpRequest
  field_entity_map:
    disk: disk
- message_name: DeleteDiskHttpRequest
  field_entity_map:
    disk: disk
- message_name: GetDiskHttpRequest
  field_entity_map:
    disk: disk
- message_name: GetIamPolicyDiskHttpRequest
  field_entity_map:
    resource: disksResource
- message_name: InsertDiskHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListDisksHttpRequest
  field_entity_map:
    zone: zone
- message_name: RemoveResourcePoliciesDiskHttpRequest
  field_entity_map:
    disk: disk
- message_name: ResizeDiskHttpRequest
  field_entity_map:
    disk: disk
- message_name: SetIamPolicyDiskHttpRequest
  field_entity_map:
    resource: disksResource
- message_name: SetLabelsDiskHttpRequest
  field_entity_map:
    resource: disksResource
- message_name: TestIamPermissionsDiskHttpRequest
  field_entity_map:
    resource: disksResource
- message_name: DeleteFirewallHttpRequest
  field_entity_map:
    firewall: firewall
- message_name: GetFirewallHttpRequest
  field_entity_map:
    firewall: firewall
- message_name: InsertFirewallHttpRequest
  field_entity_map:
    project: project
- message_name: ListFirewallsHttpRequest
  field_entity_map:
    project: project
- message_name: PatchFirewallHttpRequest
  field_entity_map:
    firewall: firewall
- message_name: UpdateFirewallHttpRequest
  field_entity_map:
    firewall: firewall
- message_name: AggregatedListForwardingRulesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteForwardingRuleHttpRequest
  field_entity_map:
    forwardingRule: forwardingRule
- message_name: GetForwardingRuleHttpRequest
  field_entity_map:
    forwardingRule: forwardingRule
- message_name: InsertForwardingRuleHttpRequest
  field_entity_map:
    region: region
- message_name: ListForwardingRulesHttpRequest
  field_entity_map:
    region: region
- message_name: SetTargetForwardingRuleHttpRequest
  field_entity_map:
    forwardingRule: forwardingRule
- message_name: DeleteGlobalAddressHttpRequest
  field_entity_map:
    address: globalAddressesAddress
- message_name: GetGlobalAddressHttpRequest
  field_entity_map:
    address: globalAddressesAddress
- message_name: InsertGlobalAddressHttpRequest
  field_entity_map:
    project: project
- message_name: ListGlobalAddressesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteGlobalForwardingRuleHttpRequest
  field_entity_map:
    forwardingRule: globalForwardingRulesForwardingRule
- message_name: GetGlobalForwardingRuleHttpRequest
  field_entity_map:
    forwardingRule: globalForwardingRulesForwardingRule
- message_name: InsertGlobalForwardingRuleHttpRequest
  field_entity_map:
    project: project
- message_name: ListGlobalForwardingRulesHttpRequest
  field_entity_map:
    project: project
- message_name: SetTargetGlobalForwardingRuleHttpRequest
  field_entity_map:
    forwardingRule: globalForwardingRulesForwardingRule
- message_name: AggregatedListGlobalOperationsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteGlobalOperationHttpRequest
  field_entity_map:
    operation: globalOperationsOperation
- message_name: GetGlobalOperationHttpRequest
  field_entity_map:
    operation: globalOperationsOperation
- message_name: ListGlobalOperationsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteHealthCheckHttpRequest
  field_entity_map:
    healthCheck: healthCheck
- message_name: GetHealthCheckHttpRequest
  field_entity_map:
    healthCheck: healthCheck
- message_name: InsertHealthCheckHttpRequest
  field_entity_map:
    project: project
- message_name: ListHealthChecksHttpRequest
  field_entity_map:
    project: project
- message_name: PatchHealthCheckHttpRequest
  field_entity_map:
    healthCheck: healthCheck
- message_name: UpdateHealthCheckHttpRequest
  field_entity_map:
    healthCheck: healthCheck
- message_name: DeleteHttpHealthCheckHttpRequest
  field_entity_map:
    httpHealthCheck: httpHealthCheck
- message_name: GetHttpHealthCheckHttpRequest
  field_entity_map:
    httpHealthCheck: httpHealthCheck
- message_name: InsertHttpHealthCheckHttpRequest
  field_entity_map:
    project: project
- message_name: ListHttpHealthChecksHttpRequest
  field_entity_map:
    project: project
- message_name: PatchHttpHealthCheckHttpRequest
  field_entity_map:
    httpHealthCheck: httpHealthCheck
- message_name: UpdateHttpHealthCheckHttpRequest
  field_entity_map:
    httpHealthCheck: httpHealthCheck
- message_name: DeleteHttpsHealthCheckHttpRequest
  field_entity_map:
    httpsHealthCheck: httpsHealthCheck
- message_name: GetHttpsHealthCheckHttpRequest
  field_entity_map:
    httpsHealthCheck: httpsHealthCheck
- message_name: InsertHttpsHealthCheckHttpRequest
  field_entity_map:
    project: project
- message_name: ListHttpsHealthChecksHttpRequest
  field_entity_map:
    project: project
- message_name: PatchHttpsHealthCheckHttpRequest
  field_entity_map:
    httpsHealthCheck: httpsHealthCheck
- message_name: UpdateHttpsHealthCheckHttpRequest
  field_entity_map:
    httpsHealthCheck: httpsHealthCheck
- message_name: DeleteImageHttpRequest
  field_entity_map:
    image: image
- message_name: DeprecateImageHttpRequest
  field_entity_map:
    image: image
- message_name: GetImageHttpRequest
  field_entity_map:
    image: image
- message_name: GetFromFamilyImageHttpRequest
  field_entity_map:
    family: family
- message_name: GetIamPolicyImageHttpRequest
  field_entity_map:
    resource: imagesResource
- message_name: InsertImageHttpRequest
  field_entity_map:
    project: project
- message_name: ListImagesHttpRequest
  field_entity_map:
    project: project
- message_name: SetIamPolicyImageHttpRequest
  field_entity_map:
    resource: imagesResource
- message_name: SetLabelsImageHttpRequest
  field_entity_map:
    resource: imagesResource
- message_name: TestIamPermissionsImageHttpRequest
  field_entity_map:
    resource: imagesResource
- message_name: AbandonInstancesInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: AggregatedListInstanceGroupManagersHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: DeleteInstancesInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: GetInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: InsertInstanceGroupManagerHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListInstanceGroupManagersHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListManagedInstancesInstanceGroupManagersHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: PatchInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: RecreateInstancesInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: ResizeInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: SetInstanceTemplateInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: SetTargetPoolsInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: instanceGroupManager
- message_name: AddInstancesInstanceGroupHttpRequest
  field_entity_map:
    instanceGroup: instanceGroup
- message_name: AggregatedListInstanceGroupsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteInstanceGroupHttpRequest
  field_entity_map:
    instanceGroup: instanceGroup
- message_name: GetInstanceGroupHttpRequest
  field_entity_map:
    instanceGroup: instanceGroup
- message_name: InsertInstanceGroupHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListInstanceGroupsHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListInstancesInstanceGroupsHttpRequest
  field_entity_map:
    instanceGroup: instanceGroup
- message_name: RemoveInstancesInstanceGroupHttpRequest
  field_entity_map:
    instanceGroup: instanceGroup
- message_name: SetNamedPortsInstanceGroupHttpRequest
  field_entity_map:
    instanceGroup: instanceGroup
- message_name: DeleteInstanceTemplateHttpRequest
  field_entity_map:
    instanceTemplate: instanceTemplate
- message_name: GetInstanceTemplateHttpRequest
  field_entity_map:
    instanceTemplate: instanceTemplate
- message_name: GetIamPolicyInstanceTemplateHttpRequest
  field_entity_map:
    resource: instanceTemplatesResource
- message_name: InsertInstanceTemplateHttpRequest
  field_entity_map:
    project: project
- message_name: ListInstanceTemplatesHttpRequest
  field_entity_map:
    project: project
- message_name: SetIamPolicyInstanceTemplateHttpRequest
  field_entity_map:
    resource: instanceTemplatesResource
- message_name: TestIamPermissionsInstanceTemplateHttpRequest
  field_entity_map:
    resource: instanceTemplatesResource
- message_name: AddAccessConfigInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: AggregatedListInstancesHttpRequest
  field_entity_map:
    project: project
- message_name: AttachDiskInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: DeleteInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: DeleteAccessConfigInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: DetachDiskInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: GetInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: GetGuestAttributesInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: GetIamPolicyInstanceHttpRequest
  field_entity_map:
    resource: instancesResource
- message_name: GetSerialPortOutputInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: GetShieldedInstanceIdentityInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: InsertInstanceHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListInstancesHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListReferrersInstancesHttpRequest
  field_entity_map:
    instance: instance
- message_name: ResetInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetDeletionProtectionInstanceHttpRequest
  field_entity_map:
    resource: instancesResource
- message_name: SetDiskAutoDeleteInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetIamPolicyInstanceHttpRequest
  field_entity_map:
    resource: instancesResource
- message_name: SetLabelsInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetMachineResourcesInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetMachineTypeInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetMetadataInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetMinCpuPlatformInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetSchedulingInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetServiceAccountInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetShieldedInstanceIntegrityPolicyInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SetTagsInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: SimulateMaintenanceEventInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: StartInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: StartWithEncryptionKeyInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: StopInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: TestIamPermissionsInstanceHttpRequest
  field_entity_map:
    resource: instancesResource
- message_name: UpdateAccessConfigInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: UpdateNetworkInterfaceInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: UpdateShieldedInstanceConfigInstanceHttpRequest
  field_entity_map:
    instance: instance
- message_name: AggregatedListInterconnectAttachmentsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteInterconnectAttachmentHttpRequest
  field_entity_map:
    interconnectAttachment: interconnectAttachment
- message_name: GetInterconnectAttachmentHttpRequest
  field_entity_map:
    interconnectAttachment: interconnectAttachment
- message_name: InsertInterconnectAttachmentHttpRequest
  field_entity_map:
    region: region
- message_name: ListInterconnectAttachmentsHttpRequest
  field_entity_map:
    region: region
- message_name: PatchInterconnectAttachmentHttpRequest
  field_entity_map:
    interconnectAttachment: interconnectAttachment
- message_name: GetInterconnectLocationHttpRequest
  field_entity_map:
    interconnectLocation: interconnectLocation
- message_name: ListInterconnectLocationsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteInterconnectHttpRequest
  field_entity_map:
    interconnect: interconnect
- message_name: GetInterconnectHttpRequest
  field_entity_map:
    interconnect: interconnect
- message_name: GetDiagnosticsInterconnectHttpRequest
  field_entity_map:
    interconnect: interconnect
- message_name: InsertInterconnectHttpRequest
  field_entity_map:
    project: project
- message_name: ListInterconnectsHttpRequest
  field_entity_map:
    project: project
- message_name: PatchInterconnectHttpRequest
  field_entity_map:
    interconnect: interconnect
- message_name: GetLicenseCodeHttpRequest
  field_entity_map:
    licenseCode: licenseCode
- message_name: TestIamPermissionsLicenseCodeHttpRequest
  field_entity_map:
    resource: licenseCodesResource
- message_name: DeleteLicensHttpRequest
  field_entity_map:
    license: license
- message_name: GetLicensHttpRequest
  field_entity_map:
    license: license
- message_name: GetIamPolicyLicensHttpRequest
  field_entity_map:
    resource: licensesResource
- message_name: InsertLicensHttpRequest
  field_entity_map:
    project: project
- message_name: ListLicensesHttpRequest
  field_entity_map:
    project: project
- message_name: SetIamPolicyLicensHttpRequest
  field_entity_map:
    resource: licensesResource
- message_name: TestIamPermissionsLicensHttpRequest
  field_entity_map:
    resource: licensesResource
- message_name: AggregatedListMachineTypesHttpRequest
  field_entity_map:
    project: project
- message_name: GetMachineTypeHttpRequest
  field_entity_map:
    machineType: machineType
- message_name: ListMachineTypesHttpRequest
  field_entity_map:
    zone: zone
- message_name: AggregatedListNetworkEndpointGroupsHttpRequest
  field_entity_map:
    project: project
- message_name: AttachNetworkEndpointsNetworkEndpointGroupHttpRequest
  field_entity_map:
    networkEndpointGroup: networkEndpointGroup
- message_name: DeleteNetworkEndpointGroupHttpRequest
  field_entity_map:
    networkEndpointGroup: networkEndpointGroup
- message_name: DetachNetworkEndpointsNetworkEndpointGroupHttpRequest
  field_entity_map:
    networkEndpointGroup: networkEndpointGroup
- message_name: GetNetworkEndpointGroupHttpRequest
  field_entity_map:
    networkEndpointGroup: networkEndpointGroup
- message_name: InsertNetworkEndpointGroupHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListNetworkEndpointGroupsHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListNetworkEndpointsNetworkEndpointGroupsHttpRequest
  field_entity_map:
    networkEndpointGroup: networkEndpointGroup
- message_name: TestIamPermissionsNetworkEndpointGroupHttpRequest
  field_entity_map:
    resource: networkEndpointGroupsResource
- message_name: AddPeeringNetworkHttpRequest
  field_entity_map:
    network: network
- message_name: DeleteNetworkHttpRequest
  field_entity_map:
    network: network
- message_name: GetNetworkHttpRequest
  field_entity_map:
    network: network
- message_name: InsertNetworkHttpRequest
  field_entity_map:
    project: project
- message_name: ListNetworksHttpRequest
  field_entity_map:
    project: project
- message_name: PatchNetworkHttpRequest
  field_entity_map:
    network: network
- message_name: RemovePeeringNetworkHttpRequest
  field_entity_map:
    network: network
- message_name: SwitchToCustomModeNetworkHttpRequest
  field_entity_map:
    network: network
- message_name: AddNodesNodeGroupHttpRequest
  field_entity_map:
    nodeGroup: nodeGroup
- message_name: AggregatedListNodeGroupsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteNodeGroupHttpRequest
  field_entity_map:
    nodeGroup: nodeGroup
- message_name: DeleteNodesNodeGroupHttpRequest
  field_entity_map:
    nodeGroup: nodeGroup
- message_name: GetNodeGroupHttpRequest
  field_entity_map:
    nodeGroup: nodeGroup
- message_name: GetIamPolicyNodeGroupHttpRequest
  field_entity_map:
    resource: nodeGroupsResource
- message_name: InsertNodeGroupHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListNodeGroupsHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListNodesNodeGroupsHttpRequest
  field_entity_map:
    nodeGroup: nodeGroup
- message_name: SetIamPolicyNodeGroupHttpRequest
  field_entity_map:
    resource: nodeGroupsResource
- message_name: SetNodeTemplateNodeGroupHttpRequest
  field_entity_map:
    nodeGroup: nodeGroup
- message_name: TestIamPermissionsNodeGroupHttpRequest
  field_entity_map:
    resource: nodeGroupsResource
- message_name: AggregatedListNodeTemplatesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteNodeTemplateHttpRequest
  field_entity_map:
    nodeTemplate: nodeTemplate
- message_name: GetNodeTemplateHttpRequest
  field_entity_map:
    nodeTemplate: nodeTemplate
- message_name: GetIamPolicyNodeTemplateHttpRequest
  field_entity_map:
    resource: nodeTemplatesResource
- message_name: InsertNodeTemplateHttpRequest
  field_entity_map:
    region: region
- message_name: ListNodeTemplatesHttpRequest
  field_entity_map:
    region: region
- message_name: SetIamPolicyNodeTemplateHttpRequest
  field_entity_map:
    resource: nodeTemplatesResource
- message_name: TestIamPermissionsNodeTemplateHttpRequest
  field_entity_map:
    resource: nodeTemplatesResource
- message_name: AggregatedListNodeTypesHttpRequest
  field_entity_map:
    project: project
- message_name: GetNodeTypeHttpRequest
  field_entity_map:
    nodeType: nodeType
- message_name: ListNodeTypesHttpRequest
  field_entity_map:
    zone: zone
- message_name: DisableXpnHostProjectHttpRequest
  field_entity_map:
    project: project
- message_name: DisableXpnResourceProjectHttpRequest
  field_entity_map:
    project: project
- message_name: EnableXpnHostProjectHttpRequest
  field_entity_map:
    project: project
- message_name: EnableXpnResourceProjectHttpRequest
  field_entity_map:
    project: project
- message_name: GetProjectHttpRequest
  field_entity_map:
    project: project
- message_name: GetXpnHostProjectHttpRequest
  field_entity_map:
    project: project
- message_name: GetXpnResourcesProjectsHttpRequest
  field_entity_map:
    project: project
- message_name: ListXpnHostsProjectsHttpRequest
  field_entity_map:
    project: project
- message_name: MoveDiskProjectHttpRequest
  field_entity_map:
    project: project
- message_name: MoveInstanceProjectHttpRequest
  field_entity_map:
    project: project
- message_name: SetCommonInstanceMetadataProjectHttpRequest
  field_entity_map:
    project: project
- message_name: SetDefaultNetworkTierProjectHttpRequest
  field_entity_map:
    project: project
- message_name: SetUsageExportBucketProjectHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteRegionAutoscalerHttpRequest
  field_entity_map:
    autoscaler: regionAutoscalersAutoscaler
- message_name: GetRegionAutoscalerHttpRequest
  field_entity_map:
    autoscaler: regionAutoscalersAutoscaler
- message_name: InsertRegionAutoscalerHttpRequest
  field_entity_map:
    region: region
- message_name: ListRegionAutoscalersHttpRequest
  field_entity_map:
    region: region
- message_name: PatchRegionAutoscalerHttpRequest
  field_entity_map:
    region: region
- message_name: UpdateRegionAutoscalerHttpRequest
  field_entity_map:
    region: region
- message_name: DeleteRegionBackendServiceHttpRequest
  field_entity_map:
    backendService: regionBackendServicesBackendService
- message_name: GetRegionBackendServiceHttpRequest
  field_entity_map:
    backendService: regionBackendServicesBackendService
- message_name: GetHealthRegionBackendServiceHttpRequest
  field_entity_map:
    backendService: regionBackendServicesBackendService
- message_name: InsertRegionBackendServiceHttpRequest
  field_entity_map:
    region: region
- message_name: ListRegionBackendServicesHttpRequest
  field_entity_map:
    region: region
- message_name: PatchRegionBackendServiceHttpRequest
  field_entity_map:
    backendService: regionBackendServicesBackendService
- message_name: UpdateRegionBackendServiceHttpRequest
  field_entity_map:
    backendService: regionBackendServicesBackendService
- message_name: AggregatedListRegionCommitmentsHttpRequest
  field_entity_map:
    project: project
- message_name: GetRegionCommitmentHttpRequest
  field_entity_map:
    commitment: commitment
- message_name: InsertRegionCommitmentHttpRequest
  field_entity_map:
    region: region
- message_name: ListRegionCommitmentsHttpRequest
  field_entity_map:
    region: region
- message_name: GetRegionDiskTypeHttpRequest
  field_entity_map:
    diskType: regionDiskTypesDiskType
- message_name: ListRegionDiskTypesHttpRequest
  field_entity_map:
    region: region
- message_name: AddResourcePoliciesRegionDiskHttpRequest
  field_entity_map:
    disk: regionDisksDisk
- message_name: CreateSnapshotRegionDiskHttpRequest
  field_entity_map:
    disk: regionDisksDisk
- message_name: DeleteRegionDiskHttpRequest
  field_entity_map:
    disk: regionDisksDisk
- message_name: GetRegionDiskHttpRequest
  field_entity_map:
    disk: regionDisksDisk
- message_name: InsertRegionDiskHttpRequest
  field_entity_map:
    region: region
- message_name: ListRegionDisksHttpRequest
  field_entity_map:
    region: region
- message_name: RemoveResourcePoliciesRegionDiskHttpRequest
  field_entity_map:
    disk: regionDisksDisk
- message_name: ResizeRegionDiskHttpRequest
  field_entity_map:
    disk: regionDisksDisk
- message_name: SetLabelsRegionDiskHttpRequest
  field_entity_map:
    resource: regionDisksResource
- message_name: TestIamPermissionsRegionDiskHttpRequest
  field_entity_map:
    resource: regionDisksResource
- message_name: AbandonInstancesRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: DeleteRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: DeleteInstancesRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: GetRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: InsertRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    region: region
- message_name: ListRegionInstanceGroupManagersHttpRequest
  field_entity_map:
    region: region
- message_name: ListManagedInstancesRegionInstanceGroupManagersHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: PatchRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: RecreateInstancesRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: ResizeRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: SetInstanceTemplateRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: SetTargetPoolsRegionInstanceGroupManagerHttpRequest
  field_entity_map:
    instanceGroupManager: regionInstanceGroupManagersInstanceGroupManager
- message_name: GetRegionInstanceGroupHttpRequest
  field_entity_map:
    instanceGroup: regionInstanceGroupsInstanceGroup
- message_name: ListRegionInstanceGroupsHttpRequest
  field_entity_map:
    region: region
- message_name: ListInstancesRegionInstanceGroupsHttpRequest
  field_entity_map:
    instanceGroup: regionInstanceGroupsInstanceGroup
- message_name: SetNamedPortsRegionInstanceGroupHttpRequest
  field_entity_map:
    instanceGroup: regionInstanceGroupsInstanceGroup
- message_name: DeleteRegionOperationHttpRequest
  field_entity_map:
    operation: regionOperationsOperation
- message_name: GetRegionOperationHttpRequest
  field_entity_map:
    operation: regionOperationsOperation
- message_name: ListRegionOperationsHttpRequest
  field_entity_map:
    region: region
- message_name: GetRegionHttpRequest
  field_entity_map:
    region: region
- message_name: ListRegionsHttpRequest
  field_entity_map:
    project: project
- message_name: AggregatedListReservationsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteReservationHttpRequest
  field_entity_map:
    reservation: reservation
- message_name: GetReservationHttpRequest
  field_entity_map:
    reservation: reservation
- message_name: GetIamPolicyReservationHttpRequest
  field_entity_map:
    resource: reservationsResource
- message_name: InsertReservationHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListReservationsHttpRequest
  field_entity_map:
    zone: zone
- message_name: ResizeReservationHttpRequest
  field_entity_map:
    reservation: reservation
- message_name: SetIamPolicyReservationHttpRequest
  field_entity_map:
    resource: reservationsResource
- message_name: TestIamPermissionsReservationHttpRequest
  field_entity_map:
    resource: reservationsResource
- message_name: AggregatedListResourcePoliciesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteResourcePolicyHttpRequest
  field_entity_map:
    resourcePolicy: resourcePolicy
- message_name: GetResourcePolicyHttpRequest
  field_entity_map:
    resourcePolicy: resourcePolicy
- message_name: GetIamPolicyResourcePolicyHttpRequest
  field_entity_map:
    resource: resourcePoliciesResource
- message_name: InsertResourcePolicyHttpRequest
  field_entity_map:
    region: region
- message_name: ListResourcePoliciesHttpRequest
  field_entity_map:
    region: region
- message_name: SetIamPolicyResourcePolicyHttpRequest
  field_entity_map:
    resource: resourcePoliciesResource
- message_name: TestIamPermissionsResourcePolicyHttpRequest
  field_entity_map:
    resource: resourcePoliciesResource
- message_name: AggregatedListRoutersHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteRouterHttpRequest
  field_entity_map:
    router: router
- message_name: GetRouterHttpRequest
  field_entity_map:
    router: router
- message_name: GetNatMappingInfoRoutersHttpRequest
  field_entity_map:
    router: router
- message_name: GetRouterStatusRouterHttpRequest
  field_entity_map:
    router: router
- message_name: InsertRouterHttpRequest
  field_entity_map:
    region: region
- message_name: ListRoutersHttpRequest
  field_entity_map:
    region: region
- message_name: PatchRouterHttpRequest
  field_entity_map:
    router: router
- message_name: PreviewRouterHttpRequest
  field_entity_map:
    router: router
- message_name: UpdateRouterHttpRequest
  field_entity_map:
    router: router
- message_name: DeleteRouteHttpRequest
  field_entity_map:
    route: route
- message_name: GetRouteHttpRequest
  field_entity_map:
    route: route
- message_name: InsertRouteHttpRequest
  field_entity_map:
    project: project
- message_name: ListRoutesHttpRequest
  field_entity_map:
    project: project
- message_name: AddRuleSecurityPolicyHttpRequest
  field_entity_map:
    securityPolicy: securityPolicy
- message_name: DeleteSecurityPolicyHttpRequest
  field_entity_map:
    securityPolicy: securityPolicy
- message_name: GetSecurityPolicyHttpRequest
  field_entity_map:
    securityPolicy: securityPolicy
- message_name: GetRuleSecurityPolicyHttpRequest
  field_entity_map:
    securityPolicy: securityPolicy
- message_name: InsertSecurityPolicyHttpRequest
  field_entity_map:
    project: project
- message_name: ListSecurityPoliciesHttpRequest
  field_entity_map:
    project: project
- message_name: PatchSecurityPolicyHttpRequest
  field_entity_map:
    securityPolicy: securityPolicy
- message_name: PatchRuleSecurityPolicyHttpRequest
  field_entity_map:
    securityPolicy: securityPolicy
- message_name: RemoveRuleSecurityPolicyHttpRequest
  field_entity_map:
    securityPolicy: securityPolicy
- message_name: DeleteSnapshotHttpRequest
  field_entity_map:
    snapshot: snapshot
- message_name: GetSnapshotHttpRequest
  field_entity_map:
    snapshot: snapshot
- message_name: GetIamPolicySnapshotHttpRequest
  field_entity_map:
    resource: snapshotsResource
- message_name: ListSnapshotsHttpRequest
  field_entity_map:
    project: project
- message_name: SetIamPolicySnapshotHttpRequest
  field_entity_map:
    resource: snapshotsResource
- message_name: SetLabelsSnapshotHttpRequest
  field_entity_map:
    resource: snapshotsResource
- message_name: TestIamPermissionsSnapshotHttpRequest
  field_entity_map:
    resource: snapshotsResource
- message_name: DeleteSslCertificateHttpRequest
  field_entity_map:
    sslCertificate: sslCertificate
- message_name: GetSslCertificateHttpRequest
  field_entity_map:
    sslCertificate: sslCertificate
- message_name: InsertSslCertificateHttpRequest
  field_entity_map:
    project: project
- message_name: ListSslCertificatesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteSslPolicyHttpRequest
  field_entity_map:
    sslPolicy: sslPolicy
- message_name: GetSslPolicyHttpRequest
  field_entity_map:
    sslPolicy: sslPolicy
- message_name: InsertSslPolicyHttpRequest
  field_entity_map:
    project: project
- message_name: ListSslPoliciesHttpRequest
  field_entity_map:
    project: project
- message_name: ListAvailableFeaturesSslPoliciesHttpRequest
  field_entity_map:
    project: project
- message_name: PatchSslPolicyHttpRequest
  field_entity_map:
    sslPolicy: sslPolicy
- message_name: AggregatedListSubnetworksHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteSubnetworkHttpRequest
  field_entity_map:
    subnetwork: subnetwork
- message_name: ExpandIpCidrRangeSubnetworkHttpRequest
  field_entity_map:
    subnetwork: subnetwork
- message_name: GetSubnetworkHttpRequest
  field_entity_map:
    subnetwork: subnetwork
- message_name: GetIamPolicySubnetworkHttpRequest
  field_entity_map:
    resource: subnetworksResource
- message_name: InsertSubnetworkHttpRequest
  field_entity_map:
    region: region
- message_name: ListSubnetworksHttpRequest
  field_entity_map:
    region: region
- message_name: ListUsableSubnetworksHttpRequest
  field_entity_map:
    project: project
- message_name: PatchSubnetworkHttpRequest
  field_entity_map:
    subnetwork: subnetwork
- message_name: SetIamPolicySubnetworkHttpRequest
  field_entity_map:
    resource: subnetworksResource
- message_name: SetPrivateIpGoogleAccessSubnetworkHttpRequest
  field_entity_map:
    subnetwork: subnetwork
- message_name: TestIamPermissionsSubnetworkHttpRequest
  field_entity_map:
    resource: subnetworksResource
- message_name: DeleteTargetHttpProxyHttpRequest
  field_entity_map:
    targetHttpProxy: targetHttpProxy
- message_name: GetTargetHttpProxyHttpRequest
  field_entity_map:
    targetHttpProxy: targetHttpProxy
- message_name: InsertTargetHttpProxyHttpRequest
  field_entity_map:
    project: project
- message_name: ListTargetHttpProxiesHttpRequest
  field_entity_map:
    project: project
- message_name: SetUrlMapTargetHttpProxyHttpRequest
  field_entity_map:
    targetHttpProxy: targetHttpProxy
- message_name: DeleteTargetHttpsProxyHttpRequest
  field_entity_map:
    targetHttpsProxy: targetHttpsProxy
- message_name: GetTargetHttpsProxyHttpRequest
  field_entity_map:
    targetHttpsProxy: targetHttpsProxy
- message_name: InsertTargetHttpsProxyHttpRequest
  field_entity_map:
    project: project
- message_name: ListTargetHttpsProxiesHttpRequest
  field_entity_map:
    project: project
- message_name: SetQuicOverrideTargetHttpsProxyHttpRequest
  field_entity_map:
    targetHttpsProxy: targetHttpsProxy
- message_name: SetSslCertificatesTargetHttpsProxyHttpRequest
  field_entity_map:
    targetHttpsProxy: targetHttpsProxy
- message_name: SetSslPolicyTargetHttpsProxyHttpRequest
  field_entity_map:
    targetHttpsProxy: targetHttpsProxy
- message_name: SetUrlMapTargetHttpsProxyHttpRequest
  field_entity_map:
    targetHttpsProxy: targetHttpsProxy
- message_name: AggregatedListTargetInstancesHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteTargetInstanceHttpRequest
  field_entity_map:
    targetInstance: targetInstance
- message_name: GetTargetInstanceHttpRequest
  field_entity_map:
    targetInstance: targetInstance
- message_name: InsertTargetInstanceHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListTargetInstancesHttpRequest
  field_entity_map:
    zone: zone
- message_name: AddHealthCheckTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: AddInstanceTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: AggregatedListTargetPoolsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: GetTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: GetHealthTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: InsertTargetPoolHttpRequest
  field_entity_map:
    region: region
- message_name: ListTargetPoolsHttpRequest
  field_entity_map:
    region: region
- message_name: RemoveHealthCheckTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: RemoveInstanceTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: SetBackupTargetPoolHttpRequest
  field_entity_map:
    targetPool: targetPool
- message_name: DeleteTargetSslProxyHttpRequest
  field_entity_map:
    targetSslProxy: targetSslProxy
- message_name: GetTargetSslProxyHttpRequest
  field_entity_map:
    targetSslProxy: targetSslProxy
- message_name: InsertTargetSslProxyHttpRequest
  field_entity_map:
    project: project
- message_name: ListTargetSslProxiesHttpRequest
  field_entity_map:
    project: project
- message_name: SetBackendServiceTargetSslProxyHttpRequest
  field_entity_map:
    targetSslProxy: targetSslProxy
- message_name: SetProxyHeaderTargetSslProxyHttpRequest
  field_entity_map:
    targetSslProxy: targetSslProxy
- message_name: SetSslCertificatesTargetSslProxyHttpRequest
  field_entity_map:
    targetSslProxy: targetSslProxy
- message_name: SetSslPolicyTargetSslProxyHttpRequest
  field_entity_map:
    targetSslProxy: targetSslProxy
- message_name: DeleteTargetTcpProxyHttpRequest
  field_entity_map:
    targetTcpProxy: targetTcpProxy
- message_name: GetTargetTcpProxyHttpRequest
  field_entity_map:
    targetTcpProxy: targetTcpProxy
- message_name: InsertTargetTcpProxyHttpRequest
  field_entity_map:
    project: project
- message_name: ListTargetTcpProxiesHttpRequest
  field_entity_map:
    project: project
- message_name: SetBackendServiceTargetTcpProxyHttpRequest
  field_entity_map:
    targetTcpProxy: targetTcpProxy
- message_name: SetProxyHeaderTargetTcpProxyHttpRequest
  field_entity_map:
    targetTcpProxy: targetTcpProxy
- message_name: AggregatedListTargetVpnGatewaysHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteTargetVpnGatewayHttpRequest
  field_entity_map:
    targetVpnGateway: targetVpnGateway
- message_name: GetTargetVpnGatewayHttpRequest
  field_entity_map:
    targetVpnGateway: targetVpnGateway
- message_name: InsertTargetVpnGatewayHttpRequest
  field_entity_map:
    region: region
- message_name: ListTargetVpnGatewaysHttpRequest
  field_entity_map:
    region: region
- message_name: DeleteUrlMapHttpRequest
  field_entity_map:
    urlMap: urlMap
- message_name: GetUrlMapHttpRequest
  field_entity_map:
    urlMap: urlMap
- message_name: InsertUrlMapHttpRequest
  field_entity_map:
    project: project
- message_name: InvalidateCacheUrlMapHttpRequest
  field_entity_map:
    urlMap: urlMap
- message_name: ListUrlMapsHttpRequest
  field_entity_map:
    project: project
- message_name: PatchUrlMapHttpRequest
  field_entity_map:
    urlMap: urlMap
- message_name: UpdateUrlMapHttpRequest
  field_entity_map:
    urlMap: urlMap
- message_name: ValidateUrlMapHttpRequest
  field_entity_map:
    urlMap: urlMap
- message_name: AggregatedListVpnTunnelsHttpRequest
  field_entity_map:
    project: project
- message_name: DeleteVpnTunnelHttpRequest
  field_entity_map:
    vpnTunnel: vpnTunnel
- message_name: GetVpnTunnelHttpRequest
  field_entity_map:
    vpnTunnel: vpnTunnel
- message_name: InsertVpnTunnelHttpRequest
  field_entity_map:
    region: region
- message_name: ListVpnTunnelsHttpRequest
  field_entity_map:
    region: region
- message_name: DeleteZoneOperationHttpRequest
  field_entity_map:
    operation: zoneOperationsOperation
- message_name: GetZoneOperationHttpRequest
  field_entity_map:
    operation: zoneOperationsOperation
- message_name: ListZoneOperationsHttpRequest
  field_entity_map:
    zone: zone
- message_name: GetZoneHttpRequest
  field_entity_map:
    zone: zone
- message_name: ListZonesHttpRequest
  field_entity_map:
    project: project
